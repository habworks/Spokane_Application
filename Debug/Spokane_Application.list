
Spokane_Application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095f0  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  080097b0  080097b0  000197b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009918  08009918  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  08009918  08009918  00019918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009920  08009920  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009920  08009920  00019920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009924  08009924  00019924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08009928  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ff4  2000008c  080099b4  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00004000  20002080  080099b4  00022080  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00032362  00000000  00000000  000200ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006b19  00000000  00000000  00052461  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00012221  00000000  00000000  00058f7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001bd0  00000000  00000000  0006b1a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001531  00000000  00000000  0006cd70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00031dd4  00000000  00000000  0006e2a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00035166  00000000  00000000  000a0075  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010e1dc  00000000  00000000  000d51db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000052e0  00000000  00000000  001e33b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000052  00000000  00000000  001e8698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08009798 	.word	0x08009798

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000090 	.word	0x20000090
 80001fc:	08009798 	.word	0x08009798

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b970 	b.w	8000598 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	460f      	mov	r7, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4694      	mov	ip, r2
 80002e4:	d965      	bls.n	80003b2 <__udivmoddi4+0xe2>
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	b143      	cbz	r3, 80002fe <__udivmoddi4+0x2e>
 80002ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f0:	f1c3 0220 	rsb	r2, r3, #32
 80002f4:	409f      	lsls	r7, r3
 80002f6:	fa20 f202 	lsr.w	r2, r0, r2
 80002fa:	4317      	orrs	r7, r2
 80002fc:	409c      	lsls	r4, r3
 80002fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000302:	fa1f f58c 	uxth.w	r5, ip
 8000306:	fbb7 f1fe 	udiv	r1, r7, lr
 800030a:	0c22      	lsrs	r2, r4, #16
 800030c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	fb01 f005 	mul.w	r0, r1, r5
 8000318:	4290      	cmp	r0, r2
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x62>
 800031c:	eb1c 0202 	adds.w	r2, ip, r2
 8000320:	f101 37ff 	add.w	r7, r1, #4294967295
 8000324:	f080 811c 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000328:	4290      	cmp	r0, r2
 800032a:	f240 8119 	bls.w	8000560 <__udivmoddi4+0x290>
 800032e:	3902      	subs	r1, #2
 8000330:	4462      	add	r2, ip
 8000332:	1a12      	subs	r2, r2, r0
 8000334:	b2a4      	uxth	r4, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000342:	fb00 f505 	mul.w	r5, r0, r5
 8000346:	42a5      	cmp	r5, r4
 8000348:	d90a      	bls.n	8000360 <__udivmoddi4+0x90>
 800034a:	eb1c 0404 	adds.w	r4, ip, r4
 800034e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000352:	f080 8107 	bcs.w	8000564 <__udivmoddi4+0x294>
 8000356:	42a5      	cmp	r5, r4
 8000358:	f240 8104 	bls.w	8000564 <__udivmoddi4+0x294>
 800035c:	4464      	add	r4, ip
 800035e:	3802      	subs	r0, #2
 8000360:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000364:	1b64      	subs	r4, r4, r5
 8000366:	2100      	movs	r1, #0
 8000368:	b11e      	cbz	r6, 8000372 <__udivmoddi4+0xa2>
 800036a:	40dc      	lsrs	r4, r3
 800036c:	2300      	movs	r3, #0
 800036e:	e9c6 4300 	strd	r4, r3, [r6]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0xbc>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80ed 	beq.w	800055a <__udivmoddi4+0x28a>
 8000380:	2100      	movs	r1, #0
 8000382:	e9c6 0500 	strd	r0, r5, [r6]
 8000386:	4608      	mov	r0, r1
 8000388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038c:	fab3 f183 	clz	r1, r3
 8000390:	2900      	cmp	r1, #0
 8000392:	d149      	bne.n	8000428 <__udivmoddi4+0x158>
 8000394:	42ab      	cmp	r3, r5
 8000396:	d302      	bcc.n	800039e <__udivmoddi4+0xce>
 8000398:	4282      	cmp	r2, r0
 800039a:	f200 80f8 	bhi.w	800058e <__udivmoddi4+0x2be>
 800039e:	1a84      	subs	r4, r0, r2
 80003a0:	eb65 0203 	sbc.w	r2, r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	4617      	mov	r7, r2
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d0e2      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	e9c6 4700 	strd	r4, r7, [r6]
 80003b0:	e7df      	b.n	8000372 <__udivmoddi4+0xa2>
 80003b2:	b902      	cbnz	r2, 80003b6 <__udivmoddi4+0xe6>
 80003b4:	deff      	udf	#255	; 0xff
 80003b6:	fab2 f382 	clz	r3, r2
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8090 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c0:	1a8a      	subs	r2, r1, r2
 80003c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003c6:	fa1f fe8c 	uxth.w	lr, ip
 80003ca:	2101      	movs	r1, #1
 80003cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003d0:	fb07 2015 	mls	r0, r7, r5, r2
 80003d4:	0c22      	lsrs	r2, r4, #16
 80003d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003da:	fb0e f005 	mul.w	r0, lr, r5
 80003de:	4290      	cmp	r0, r2
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e2:	eb1c 0202 	adds.w	r2, ip, r2
 80003e6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4290      	cmp	r0, r2
 80003ee:	f200 80cb 	bhi.w	8000588 <__udivmoddi4+0x2b8>
 80003f2:	4645      	mov	r5, r8
 80003f4:	1a12      	subs	r2, r2, r0
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000400:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000404:	fb0e fe00 	mul.w	lr, lr, r0
 8000408:	45a6      	cmp	lr, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x14e>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f100 32ff 	add.w	r2, r0, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x14c>
 8000416:	45a6      	cmp	lr, r4
 8000418:	f200 80bb 	bhi.w	8000592 <__udivmoddi4+0x2c2>
 800041c:	4610      	mov	r0, r2
 800041e:	eba4 040e 	sub.w	r4, r4, lr
 8000422:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000426:	e79f      	b.n	8000368 <__udivmoddi4+0x98>
 8000428:	f1c1 0720 	rsb	r7, r1, #32
 800042c:	408b      	lsls	r3, r1
 800042e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000432:	ea4c 0c03 	orr.w	ip, ip, r3
 8000436:	fa05 f401 	lsl.w	r4, r5, r1
 800043a:	fa20 f307 	lsr.w	r3, r0, r7
 800043e:	40fd      	lsrs	r5, r7
 8000440:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000444:	4323      	orrs	r3, r4
 8000446:	fbb5 f8f9 	udiv	r8, r5, r9
 800044a:	fa1f fe8c 	uxth.w	lr, ip
 800044e:	fb09 5518 	mls	r5, r9, r8, r5
 8000452:	0c1c      	lsrs	r4, r3, #16
 8000454:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000458:	fb08 f50e 	mul.w	r5, r8, lr
 800045c:	42a5      	cmp	r5, r4
 800045e:	fa02 f201 	lsl.w	r2, r2, r1
 8000462:	fa00 f001 	lsl.w	r0, r0, r1
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000470:	f080 8088 	bcs.w	8000584 <__udivmoddi4+0x2b4>
 8000474:	42a5      	cmp	r5, r4
 8000476:	f240 8085 	bls.w	8000584 <__udivmoddi4+0x2b4>
 800047a:	f1a8 0802 	sub.w	r8, r8, #2
 800047e:	4464      	add	r4, ip
 8000480:	1b64      	subs	r4, r4, r5
 8000482:	b29d      	uxth	r5, r3
 8000484:	fbb4 f3f9 	udiv	r3, r4, r9
 8000488:	fb09 4413 	mls	r4, r9, r3, r4
 800048c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000490:	fb03 fe0e 	mul.w	lr, r3, lr
 8000494:	45a6      	cmp	lr, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f103 35ff 	add.w	r5, r3, #4294967295
 80004a0:	d26c      	bcs.n	800057c <__udivmoddi4+0x2ac>
 80004a2:	45a6      	cmp	lr, r4
 80004a4:	d96a      	bls.n	800057c <__udivmoddi4+0x2ac>
 80004a6:	3b02      	subs	r3, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ae:	fba3 9502 	umull	r9, r5, r3, r2
 80004b2:	eba4 040e 	sub.w	r4, r4, lr
 80004b6:	42ac      	cmp	r4, r5
 80004b8:	46c8      	mov	r8, r9
 80004ba:	46ae      	mov	lr, r5
 80004bc:	d356      	bcc.n	800056c <__udivmoddi4+0x29c>
 80004be:	d053      	beq.n	8000568 <__udivmoddi4+0x298>
 80004c0:	b156      	cbz	r6, 80004d8 <__udivmoddi4+0x208>
 80004c2:	ebb0 0208 	subs.w	r2, r0, r8
 80004c6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ca:	fa04 f707 	lsl.w	r7, r4, r7
 80004ce:	40ca      	lsrs	r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	4317      	orrs	r7, r2
 80004d4:	e9c6 7400 	strd	r7, r4, [r6]
 80004d8:	4618      	mov	r0, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e0:	f1c3 0120 	rsb	r1, r3, #32
 80004e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e8:	fa20 f201 	lsr.w	r2, r0, r1
 80004ec:	fa25 f101 	lsr.w	r1, r5, r1
 80004f0:	409d      	lsls	r5, r3
 80004f2:	432a      	orrs	r2, r5
 80004f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f8:	fa1f fe8c 	uxth.w	lr, ip
 80004fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000500:	fb07 1510 	mls	r5, r7, r0, r1
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800050a:	fb00 f50e 	mul.w	r5, r0, lr
 800050e:	428d      	cmp	r5, r1
 8000510:	fa04 f403 	lsl.w	r4, r4, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x258>
 8000516:	eb1c 0101 	adds.w	r1, ip, r1
 800051a:	f100 38ff 	add.w	r8, r0, #4294967295
 800051e:	d22f      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000520:	428d      	cmp	r5, r1
 8000522:	d92d      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000524:	3802      	subs	r0, #2
 8000526:	4461      	add	r1, ip
 8000528:	1b49      	subs	r1, r1, r5
 800052a:	b292      	uxth	r2, r2
 800052c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000530:	fb07 1115 	mls	r1, r7, r5, r1
 8000534:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000538:	fb05 f10e 	mul.w	r1, r5, lr
 800053c:	4291      	cmp	r1, r2
 800053e:	d908      	bls.n	8000552 <__udivmoddi4+0x282>
 8000540:	eb1c 0202 	adds.w	r2, ip, r2
 8000544:	f105 38ff 	add.w	r8, r5, #4294967295
 8000548:	d216      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 800054a:	4291      	cmp	r1, r2
 800054c:	d914      	bls.n	8000578 <__udivmoddi4+0x2a8>
 800054e:	3d02      	subs	r5, #2
 8000550:	4462      	add	r2, ip
 8000552:	1a52      	subs	r2, r2, r1
 8000554:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000558:	e738      	b.n	80003cc <__udivmoddi4+0xfc>
 800055a:	4631      	mov	r1, r6
 800055c:	4630      	mov	r0, r6
 800055e:	e708      	b.n	8000372 <__udivmoddi4+0xa2>
 8000560:	4639      	mov	r1, r7
 8000562:	e6e6      	b.n	8000332 <__udivmoddi4+0x62>
 8000564:	4610      	mov	r0, r2
 8000566:	e6fb      	b.n	8000360 <__udivmoddi4+0x90>
 8000568:	4548      	cmp	r0, r9
 800056a:	d2a9      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 800056c:	ebb9 0802 	subs.w	r8, r9, r2
 8000570:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000574:	3b01      	subs	r3, #1
 8000576:	e7a3      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000578:	4645      	mov	r5, r8
 800057a:	e7ea      	b.n	8000552 <__udivmoddi4+0x282>
 800057c:	462b      	mov	r3, r5
 800057e:	e794      	b.n	80004aa <__udivmoddi4+0x1da>
 8000580:	4640      	mov	r0, r8
 8000582:	e7d1      	b.n	8000528 <__udivmoddi4+0x258>
 8000584:	46d0      	mov	r8, sl
 8000586:	e77b      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000588:	3d02      	subs	r5, #2
 800058a:	4462      	add	r2, ip
 800058c:	e732      	b.n	80003f4 <__udivmoddi4+0x124>
 800058e:	4608      	mov	r0, r1
 8000590:	e70a      	b.n	80003a8 <__udivmoddi4+0xd8>
 8000592:	4464      	add	r4, ip
 8000594:	3802      	subs	r0, #2
 8000596:	e742      	b.n	800041e <__udivmoddi4+0x14e>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <Init_Some>:

/**
 * @brief Small state machine to conduct actions in steps. Also if I dont do it this way, the system hard faults.
 */
void Init_Some(void * Task_Data)//Is a task
{
 800059c:	b510      	push	{r4, lr}
	static int state = 0;
	switch(state)
 800059e:	4b40      	ldr	r3, [pc, #256]	; (80006a0 <Init_Some+0x104>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	2b04      	cmp	r3, #4
 80005a4:	d810      	bhi.n	80005c8 <Init_Some+0x2c>
 80005a6:	e8df f003 	tbb	[pc, r3]
 80005aa:	1003      	.short	0x1003
 80005ac:	402b      	.short	0x402b
 80005ae:	4f          	.byte	0x4f
 80005af:	00          	.byte	0x00
		//UART_5 =  Init_DMA_UART(&huart5);//4G
		//Init_Console(UART_2, Print_Startup_Banner);//Starts a task
		//I2C_1 = Init_I2C(&hi2c1);//Init the mag I2c
		//HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
		//OSPI_1 = Init_OSPI(&hospi1);
	    printf("\033[2J\033[H");
 80005b0:	483c      	ldr	r0, [pc, #240]	; (80006a4 <Init_Some+0x108>)
 80005b2:	f008 fb4d 	bl	8008c50 <iprintf>
	    printf("Hello Hab\r\n");
 80005b6:	483c      	ldr	r0, [pc, #240]	; (80006a8 <Init_Some+0x10c>)
 80005b8:	f008 fbb0 	bl	8008d1c <puts>
	    initTest();
 80005bc:	f001 f9d0 	bl	8001960 <initTest>
		state ++;
 80005c0:	4a37      	ldr	r2, [pc, #220]	; (80006a0 <Init_Some+0x104>)
 80005c2:	6813      	ldr	r3, [r2, #0]
 80005c4:	3301      	adds	r3, #1
 80005c6:	6013      	str	r3, [r2, #0]
		//HAL_GPIO_TogglePin (FLASH_CS_GPIO_Port, FLASH_CS_Pin);
		//HAL_Delay(100);
			break;
	}
	}
}
 80005c8:	bd10      	pop	{r4, pc}
		OSPI_Set_Features(&hospi1);//0x1F
 80005ca:	4c38      	ldr	r4, [pc, #224]	; (80006ac <Init_Some+0x110>)
 80005cc:	4620      	mov	r0, r4
 80005ce:	f001 f891 	bl	80016f4 <OSPI_Set_Features>
		OSPI_Reset(&hospi1);//0xFF
 80005d2:	4620      	mov	r0, r4
 80005d4:	f001 f98a 	bl	80018ec <OSPI_Reset>
		OSPI_Get_Features(&hospi1);//0x0f
 80005d8:	4620      	mov	r0, r4
 80005da:	f001 f851 	bl	8001680 <OSPI_Get_Features>
		OSPI_WriteEnable(&hospi1);//0x06
 80005de:	4620      	mov	r0, r4
 80005e0:	f000 ffd9 	bl	8001596 <OSPI_WriteEnable>
		OSPI_Get_Features(&hospi1);//0x0f
 80005e4:	4620      	mov	r0, r4
 80005e6:	f001 f84b 	bl	8001680 <OSPI_Get_Features>
		OSPI_Erase_Block(&hospi1);//0xD8
 80005ea:	4620      	mov	r0, r4
 80005ec:	f001 f81e 	bl	800162c <OSPI_Erase_Block>
		OSPI_Get_Features(&hospi1);//0x0f
 80005f0:	4620      	mov	r0, r4
 80005f2:	f001 f845 	bl	8001680 <OSPI_Get_Features>
		state ++;
 80005f6:	4a2a      	ldr	r2, [pc, #168]	; (80006a0 <Init_Some+0x104>)
 80005f8:	6813      	ldr	r3, [r2, #0]
 80005fa:	3301      	adds	r3, #1
 80005fc:	6013      	str	r3, [r2, #0]
		break;
 80005fe:	e7e3      	b.n	80005c8 <Init_Some+0x2c>
		OSPI_WriteEnable(&hospi1);//0x06
 8000600:	4c2a      	ldr	r4, [pc, #168]	; (80006ac <Init_Some+0x110>)
 8000602:	4620      	mov	r0, r4
 8000604:	f000 ffc7 	bl	8001596 <OSPI_WriteEnable>
		OSPI_Get_Features(&hospi1);//0x0f
 8000608:	4620      	mov	r0, r4
 800060a:	f001 f839 	bl	8001680 <OSPI_Get_Features>
		OSPI_Program_Load(&hospi1);//0x02
 800060e:	4620      	mov	r0, r4
 8000610:	f001 f8a4 	bl	800175c <OSPI_Program_Load>
		OSPI_Program_Execute(&hospi1);//0x10
 8000614:	4620      	mov	r0, r4
 8000616:	f001 f8db 	bl	80017d0 <OSPI_Program_Execute>
		OSPI_Get_Features(&hospi1);//0x0f
 800061a:	4620      	mov	r0, r4
 800061c:	f001 f830 	bl	8001680 <OSPI_Get_Features>
		state ++;
 8000620:	4a1f      	ldr	r2, [pc, #124]	; (80006a0 <Init_Some+0x104>)
 8000622:	6813      	ldr	r3, [r2, #0]
 8000624:	3301      	adds	r3, #1
 8000626:	6013      	str	r3, [r2, #0]
		break;
 8000628:	e7ce      	b.n	80005c8 <Init_Some+0x2c>
		OSPI_Page_Read(&hospi1);//0x13
 800062a:	4c20      	ldr	r4, [pc, #128]	; (80006ac <Init_Some+0x110>)
 800062c:	4620      	mov	r0, r4
 800062e:	f001 f8f9 	bl	8001824 <OSPI_Page_Read>
		OSPI_Get_Features(&hospi1);//0x0f
 8000632:	4620      	mov	r0, r4
 8000634:	f001 f824 	bl	8001680 <OSPI_Get_Features>
		OSPI_Read_Cache_X4(&hospi1);//0x0B
 8000638:	4620      	mov	r0, r4
 800063a:	f001 f91d 	bl	8001878 <OSPI_Read_Cache_X4>
		state ++;
 800063e:	4a18      	ldr	r2, [pc, #96]	; (80006a0 <Init_Some+0x104>)
 8000640:	6813      	ldr	r3, [r2, #0]
 8000642:	3301      	adds	r3, #1
 8000644:	6013      	str	r3, [r2, #0]
		break;
 8000646:	e7bf      	b.n	80005c8 <Init_Some+0x2c>
	    ReadWriteCount++;
 8000648:	4a19      	ldr	r2, [pc, #100]	; (80006b0 <Init_Some+0x114>)
 800064a:	6813      	ldr	r3, [r2, #0]
 800064c:	3301      	adds	r3, #1
 800064e:	6013      	str	r3, [r2, #0]
	    if (readWriteCompare())
 8000650:	f001 f96c 	bl	800192c <readWriteCompare>
 8000654:	b1c8      	cbz	r0, 800068a <Init_Some+0xee>
	        printf("OK Addr: %d  Count: %d\r\n", (int)ADDR, (int)ReadWriteCount);
 8000656:	4b16      	ldr	r3, [pc, #88]	; (80006b0 <Init_Some+0x114>)
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	4b16      	ldr	r3, [pc, #88]	; (80006b4 <Init_Some+0x118>)
 800065c:	6819      	ldr	r1, [r3, #0]
 800065e:	4816      	ldr	r0, [pc, #88]	; (80006b8 <Init_Some+0x11c>)
 8000660:	f008 faf6 	bl	8008c50 <iprintf>
	    prepareForCompare();
 8000664:	f001 f972 	bl	800194c <prepareForCompare>
	    STATUS_LED_TOGGLE();
 8000668:	2102      	movs	r1, #2
 800066a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800066e:	f001 fd4a 	bl	8002106 <HAL_GPIO_TogglePin>
	    ADDR += 2048;
 8000672:	4a10      	ldr	r2, [pc, #64]	; (80006b4 <Init_Some+0x118>)
 8000674:	6813      	ldr	r3, [r2, #0]
 8000676:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800067a:	6013      	str	r3, [r2, #0]
	    if (ADDR >= 268435456)
 800067c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000680:	d209      	bcs.n	8000696 <Init_Some+0xfa>
	    state = 2;
 8000682:	4b07      	ldr	r3, [pc, #28]	; (80006a0 <Init_Some+0x104>)
 8000684:	2202      	movs	r2, #2
 8000686:	601a      	str	r2, [r3, #0]
}
 8000688:	e79e      	b.n	80005c8 <Init_Some+0x2c>
            printf("ERROR Addr: %d\r\n", (int)ADDR);
 800068a:	4b0a      	ldr	r3, [pc, #40]	; (80006b4 <Init_Some+0x118>)
 800068c:	6819      	ldr	r1, [r3, #0]
 800068e:	480b      	ldr	r0, [pc, #44]	; (80006bc <Init_Some+0x120>)
 8000690:	f008 fade 	bl	8008c50 <iprintf>
 8000694:	e7e6      	b.n	8000664 <Init_Some+0xc8>
	        printf("End of memory reached\r\n");
 8000696:	480a      	ldr	r0, [pc, #40]	; (80006c0 <Init_Some+0x124>)
 8000698:	f008 fb40 	bl	8008d1c <puts>
	        while(1);
 800069c:	e7fe      	b.n	800069c <Init_Some+0x100>
 800069e:	bf00      	nop
 80006a0:	200000a8 	.word	0x200000a8
 80006a4:	080097b0 	.word	0x080097b0
 80006a8:	080097b8 	.word	0x080097b8
 80006ac:	20000160 	.word	0x20000160
 80006b0:	2000081c 	.word	0x2000081c
 80006b4:	20000818 	.word	0x20000818
 80006b8:	080097c4 	.word	0x080097c4
 80006bc:	080097e0 	.word	0x080097e0
 80006c0:	080097f4 	.word	0x080097f4

080006c4 <Debug_Task>:
{
 80006c4:	b508      	push	{r3, lr}
	Start_Task(Init_Some, NULL, 0);//start the state machiene
 80006c6:	2200      	movs	r2, #0
 80006c8:	4611      	mov	r1, r2
 80006ca:	4802      	ldr	r0, [pc, #8]	; (80006d4 <Debug_Task+0x10>)
 80006cc:	f007 fdf4 	bl	80082b8 <Start_Task>
}
 80006d0:	bd08      	pop	{r3, pc}
 80006d2:	bf00      	nop
 80006d4:	0800059d 	.word	0x0800059d

080006d8 <_write>:

int _write(int file, char *ptr, int len)
{
 80006d8:	b510      	push	{r4, lr}
 80006da:	4614      	mov	r4, r2
    if (HAL_UART_Transmit_IT(&huart2, (uint8_t *)ptr, len) != HAL_OK)
 80006dc:	b292      	uxth	r2, r2
 80006de:	4804      	ldr	r0, [pc, #16]	; (80006f0 <_write+0x18>)
 80006e0:	f004 fc8a 	bl	8004ff8 <HAL_UART_Transmit_IT>
 80006e4:	b908      	cbnz	r0, 80006ea <_write+0x12>
        Error_Handler();
    }
//    HAL_Delay(10);
    return(len);

} // END OF _write
 80006e6:	4620      	mov	r0, r4
 80006e8:	bd10      	pop	{r4, pc}
        Error_Handler();
 80006ea:	f000 f973 	bl	80009d4 <Error_Handler>
 80006ee:	e7fa      	b.n	80006e6 <_write+0xe>
 80006f0:	200005d8 	.word	0x200005d8

080006f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80006f4:	b500      	push	{lr}
 80006f6:	b085      	sub	sp, #20

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80006f8:	4b3b      	ldr	r3, [pc, #236]	; (80007e8 <MX_DMA_Init+0xf4>)
 80006fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80006fc:	f042 0204 	orr.w	r2, r2, #4
 8000700:	649a      	str	r2, [r3, #72]	; 0x48
 8000702:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000704:	f002 0204 	and.w	r2, r2, #4
 8000708:	9201      	str	r2, [sp, #4]
 800070a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800070c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800070e:	f042 0201 	orr.w	r2, r2, #1
 8000712:	649a      	str	r2, [r3, #72]	; 0x48
 8000714:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000716:	f002 0201 	and.w	r2, r2, #1
 800071a:	9202      	str	r2, [sp, #8]
 800071c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800071e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000720:	f042 0202 	orr.w	r2, r2, #2
 8000724:	649a      	str	r2, [r3, #72]	; 0x48
 8000726:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000728:	f003 0302 	and.w	r3, r3, #2
 800072c:	9303      	str	r3, [sp, #12]
 800072e:	9b03      	ldr	r3, [sp, #12]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000730:	2200      	movs	r2, #0
 8000732:	4611      	mov	r1, r2
 8000734:	200b      	movs	r0, #11
 8000736:	f001 f9a5 	bl	8001a84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800073a:	200b      	movs	r0, #11
 800073c:	f001 f9da 	bl	8001af4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000740:	2200      	movs	r2, #0
 8000742:	4611      	mov	r1, r2
 8000744:	200c      	movs	r0, #12
 8000746:	f001 f99d 	bl	8001a84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800074a:	200c      	movs	r0, #12
 800074c:	f001 f9d2 	bl	8001af4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000750:	2200      	movs	r2, #0
 8000752:	4611      	mov	r1, r2
 8000754:	200d      	movs	r0, #13
 8000756:	f001 f995 	bl	8001a84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800075a:	200d      	movs	r0, #13
 800075c:	f001 f9ca 	bl	8001af4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000760:	2200      	movs	r2, #0
 8000762:	4611      	mov	r1, r2
 8000764:	200e      	movs	r0, #14
 8000766:	f001 f98d 	bl	8001a84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800076a:	200e      	movs	r0, #14
 800076c:	f001 f9c2 	bl	8001af4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000770:	2200      	movs	r2, #0
 8000772:	4611      	mov	r1, r2
 8000774:	200f      	movs	r0, #15
 8000776:	f001 f985 	bl	8001a84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800077a:	200f      	movs	r0, #15
 800077c:	f001 f9ba 	bl	8001af4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000780:	2200      	movs	r2, #0
 8000782:	4611      	mov	r1, r2
 8000784:	2010      	movs	r0, #16
 8000786:	f001 f97d 	bl	8001a84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800078a:	2010      	movs	r0, #16
 800078c:	f001 f9b2 	bl	8001af4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000790:	2200      	movs	r2, #0
 8000792:	4611      	mov	r1, r2
 8000794:	2011      	movs	r0, #17
 8000796:	f001 f975 	bl	8001a84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800079a:	2011      	movs	r0, #17
 800079c:	f001 f9aa 	bl	8001af4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 80007a0:	2200      	movs	r2, #0
 80007a2:	4611      	mov	r1, r2
 80007a4:	2038      	movs	r0, #56	; 0x38
 80007a6:	f001 f96d 	bl	8001a84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 80007aa:	2038      	movs	r0, #56	; 0x38
 80007ac:	f001 f9a2 	bl	8001af4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 80007b0:	2200      	movs	r2, #0
 80007b2:	4611      	mov	r1, r2
 80007b4:	2039      	movs	r0, #57	; 0x39
 80007b6:	f001 f965 	bl	8001a84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 80007ba:	2039      	movs	r0, #57	; 0x39
 80007bc:	f001 f99a 	bl	8001af4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 80007c0:	2200      	movs	r2, #0
 80007c2:	4611      	mov	r1, r2
 80007c4:	203a      	movs	r0, #58	; 0x3a
 80007c6:	f001 f95d 	bl	8001a84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 80007ca:	203a      	movs	r0, #58	; 0x3a
 80007cc:	f001 f992 	bl	8001af4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 0, 0);
 80007d0:	2200      	movs	r2, #0
 80007d2:	4611      	mov	r1, r2
 80007d4:	203b      	movs	r0, #59	; 0x3b
 80007d6:	f001 f955 	bl	8001a84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 80007da:	203b      	movs	r0, #59	; 0x3b
 80007dc:	f001 f98a 	bl	8001af4 <HAL_NVIC_EnableIRQ>

}
 80007e0:	b005      	add	sp, #20
 80007e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80007e6:	bf00      	nop
 80007e8:	40021000 	.word	0x40021000

080007ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	b08c      	sub	sp, #48	; 0x30

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f0:	2400      	movs	r4, #0
 80007f2:	9407      	str	r4, [sp, #28]
 80007f4:	9408      	str	r4, [sp, #32]
 80007f6:	9409      	str	r4, [sp, #36]	; 0x24
 80007f8:	940a      	str	r4, [sp, #40]	; 0x28
 80007fa:	940b      	str	r4, [sp, #44]	; 0x2c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007fc:	4b39      	ldr	r3, [pc, #228]	; (80008e4 <MX_GPIO_Init+0xf8>)
 80007fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000800:	f042 0210 	orr.w	r2, r2, #16
 8000804:	64da      	str	r2, [r3, #76]	; 0x4c
 8000806:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000808:	f002 0210 	and.w	r2, r2, #16
 800080c:	9201      	str	r2, [sp, #4]
 800080e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000810:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000812:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000816:	64da      	str	r2, [r3, #76]	; 0x4c
 8000818:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800081a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800081e:	9202      	str	r2, [sp, #8]
 8000820:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000822:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000824:	f042 0201 	orr.w	r2, r2, #1
 8000828:	64da      	str	r2, [r3, #76]	; 0x4c
 800082a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800082c:	f002 0201 	and.w	r2, r2, #1
 8000830:	9203      	str	r2, [sp, #12]
 8000832:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000834:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000836:	f042 0204 	orr.w	r2, r2, #4
 800083a:	64da      	str	r2, [r3, #76]	; 0x4c
 800083c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800083e:	f002 0204 	and.w	r2, r2, #4
 8000842:	9204      	str	r2, [sp, #16]
 8000844:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000846:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000848:	f042 0202 	orr.w	r2, r2, #2
 800084c:	64da      	str	r2, [r3, #76]	; 0x4c
 800084e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000850:	f002 0202 	and.w	r2, r2, #2
 8000854:	9205      	str	r2, [sp, #20]
 8000856:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000858:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800085a:	f042 0208 	orr.w	r2, r2, #8
 800085e:	64da      	str	r2, [r3, #76]	; 0x4c
 8000860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000862:	f003 0308 	and.w	r3, r3, #8
 8000866:	9306      	str	r3, [sp, #24]
 8000868:	9b06      	ldr	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LTE_DTR_Pin|LTE_RESET_Pin|GPS_RESET_Pin|GPS_WAKE_Pin
 800086a:	4d1f      	ldr	r5, [pc, #124]	; (80008e8 <MX_GPIO_Init+0xfc>)
 800086c:	4622      	mov	r2, r4
 800086e:	f240 216f 	movw	r1, #623	; 0x26f
 8000872:	4628      	mov	r0, r5
 8000874:	f001 fc42 	bl	80020fc <HAL_GPIO_WritePin>
                          |VBUS_ENB_Pin|LTE_PWR_EN_Pin|LTE_ON_OFF_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TH_Pin|nLED_Pin, GPIO_PIN_RESET);
 8000878:	4622      	mov	r2, r4
 800087a:	2103      	movs	r1, #3
 800087c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000880:	f001 fc3c 	bl	80020fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(n_FORCEOFF_GPIO_Port, n_FORCEOFF_Pin, GPIO_PIN_SET);
 8000884:	2201      	movs	r2, #1
 8000886:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800088a:	4628      	mov	r0, r5
 800088c:	f001 fc36 	bl	80020fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = LTE_DTR_Pin|LTE_RESET_Pin|GPS_RESET_Pin|LTE_ON_OFF_Pin;
 8000890:	232e      	movs	r3, #46	; 0x2e
 8000892:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000894:	2311      	movs	r3, #17
 8000896:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089a:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800089c:	a907      	add	r1, sp, #28
 800089e:	4628      	mov	r0, r5
 80008a0:	f001 fb34 	bl	8001f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = LTE_ON_SLEEP_Pin|GPS_JAM_Pin|GPS_3D_FIX_Pin|VBUS_DETECT_Pin
 80008a4:	f44f 6359 	mov.w	r3, #3472	; 0xd90
 80008a8:	9307      	str	r3, [sp, #28]
                          |MagO_INT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008aa:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008ae:	a907      	add	r1, sp, #28
 80008b0:	4628      	mov	r0, r5
 80008b2:	f001 fb2b 	bl	8001f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = GPS_WAKE_Pin|VBUS_ENB_Pin|n_FORCEOFF_Pin|LTE_PWR_EN_Pin;
 80008b6:	f241 2341 	movw	r3, #4673	; 0x1241
 80008ba:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008bc:	2601      	movs	r6, #1
 80008be:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c2:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008c4:	a907      	add	r1, sp, #28
 80008c6:	4628      	mov	r0, r5
 80008c8:	f001 fb20 	bl	8001f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = TH_Pin|nLED_Pin;
 80008cc:	2303      	movs	r3, #3
 80008ce:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d0:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d4:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d6:	a907      	add	r1, sp, #28
 80008d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008dc:	f001 fb16 	bl	8001f0c <HAL_GPIO_Init>

}
 80008e0:	b00c      	add	sp, #48	; 0x30
 80008e2:	bd70      	pop	{r4, r5, r6, pc}
 80008e4:	40021000 	.word	0x40021000
 80008e8:	48001000 	.word	0x48001000

080008ec <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80008ec:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008ee:	4815      	ldr	r0, [pc, #84]	; (8000944 <MX_I2C1_Init+0x58>)
 80008f0:	4b15      	ldr	r3, [pc, #84]	; (8000948 <MX_I2C1_Init+0x5c>)
 80008f2:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x307075B1;
 80008f4:	f1a3 6378 	sub.w	r3, r3, #260046848	; 0xf800000
 80008f8:	f5a3 237d 	sub.w	r3, r3, #1036288	; 0xfd000
 80008fc:	f6a3 634f 	subw	r3, r3, #3663	; 0xe4f
 8000900:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000902:	2300      	movs	r3, #0
 8000904:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000906:	2201      	movs	r2, #1
 8000908:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800090a:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800090c:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800090e:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000910:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000912:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000914:	f002 f96d 	bl	8002bf2 <HAL_I2C_Init>
 8000918:	b950      	cbnz	r0, 8000930 <MX_I2C1_Init+0x44>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800091a:	2100      	movs	r1, #0
 800091c:	4809      	ldr	r0, [pc, #36]	; (8000944 <MX_I2C1_Init+0x58>)
 800091e:	f002 f9c6 	bl	8002cae <HAL_I2CEx_ConfigAnalogFilter>
 8000922:	b940      	cbnz	r0, 8000936 <MX_I2C1_Init+0x4a>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000924:	2100      	movs	r1, #0
 8000926:	4807      	ldr	r0, [pc, #28]	; (8000944 <MX_I2C1_Init+0x58>)
 8000928:	f002 f9ef 	bl	8002d0a <HAL_I2CEx_ConfigDigitalFilter>
 800092c:	b930      	cbnz	r0, 800093c <MX_I2C1_Init+0x50>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800092e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000930:	f000 f850 	bl	80009d4 <Error_Handler>
 8000934:	e7f1      	b.n	800091a <MX_I2C1_Init+0x2e>
    Error_Handler();
 8000936:	f000 f84d 	bl	80009d4 <Error_Handler>
 800093a:	e7f3      	b.n	8000924 <MX_I2C1_Init+0x38>
    Error_Handler();
 800093c:	f000 f84a 	bl	80009d4 <Error_Handler>
}
 8000940:	e7f5      	b.n	800092e <MX_I2C1_Init+0x42>
 8000942:	bf00      	nop
 8000944:	200000ac 	.word	0x200000ac
 8000948:	40005400 	.word	0x40005400

0800094c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800094c:	b510      	push	{r4, lr}
 800094e:	b0ac      	sub	sp, #176	; 0xb0
 8000950:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000952:	2100      	movs	r1, #0
 8000954:	9127      	str	r1, [sp, #156]	; 0x9c
 8000956:	9128      	str	r1, [sp, #160]	; 0xa0
 8000958:	9129      	str	r1, [sp, #164]	; 0xa4
 800095a:	912a      	str	r1, [sp, #168]	; 0xa8
 800095c:	912b      	str	r1, [sp, #172]	; 0xac
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800095e:	2294      	movs	r2, #148	; 0x94
 8000960:	a802      	add	r0, sp, #8
 8000962:	f008 fabb 	bl	8008edc <memset>
  if(i2cHandle->Instance==I2C1)
 8000966:	6822      	ldr	r2, [r4, #0]
 8000968:	4b17      	ldr	r3, [pc, #92]	; (80009c8 <HAL_I2C_MspInit+0x7c>)
 800096a:	429a      	cmp	r2, r3
 800096c:	d001      	beq.n	8000972 <HAL_I2C_MspInit+0x26>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800096e:	b02c      	add	sp, #176	; 0xb0
 8000970:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000972:	2340      	movs	r3, #64	; 0x40
 8000974:	9302      	str	r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000976:	a802      	add	r0, sp, #8
 8000978:	f003 feb8 	bl	80046ec <HAL_RCCEx_PeriphCLKConfig>
 800097c:	bb08      	cbnz	r0, 80009c2 <HAL_I2C_MspInit+0x76>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800097e:	4c13      	ldr	r4, [pc, #76]	; (80009cc <HAL_I2C_MspInit+0x80>)
 8000980:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000982:	f043 0302 	orr.w	r3, r3, #2
 8000986:	64e3      	str	r3, [r4, #76]	; 0x4c
 8000988:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800098a:	f003 0302 	and.w	r3, r3, #2
 800098e:	9300      	str	r3, [sp, #0]
 8000990:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = MagO_I2C1_SCL_Pin|MagO_I2C1_SDA_Pin;
 8000992:	23c0      	movs	r3, #192	; 0xc0
 8000994:	9327      	str	r3, [sp, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000996:	2312      	movs	r3, #18
 8000998:	9328      	str	r3, [sp, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	9329      	str	r3, [sp, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800099e:	2303      	movs	r3, #3
 80009a0:	932a      	str	r3, [sp, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009a2:	2304      	movs	r3, #4
 80009a4:	932b      	str	r3, [sp, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a6:	a927      	add	r1, sp, #156	; 0x9c
 80009a8:	4809      	ldr	r0, [pc, #36]	; (80009d0 <HAL_I2C_MspInit+0x84>)
 80009aa:	f001 faaf 	bl	8001f0c <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80009b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009b4:	65a3      	str	r3, [r4, #88]	; 0x58
 80009b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80009b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009bc:	9301      	str	r3, [sp, #4]
 80009be:	9b01      	ldr	r3, [sp, #4]
}
 80009c0:	e7d5      	b.n	800096e <HAL_I2C_MspInit+0x22>
      Error_Handler();
 80009c2:	f000 f807 	bl	80009d4 <Error_Handler>
 80009c6:	e7da      	b.n	800097e <HAL_I2C_MspInit+0x32>
 80009c8:	40005400 	.word	0x40005400
 80009cc:	40021000 	.word	0x40021000
 80009d0:	48000400 	.word	0x48000400

080009d4 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d4:	b672      	cpsid	i
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();

  while (1)
 80009d6:	e7fe      	b.n	80009d6 <Error_Handler+0x2>

080009d8 <SystemClock_Config>:
{
 80009d8:	b500      	push	{lr}
 80009da:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009dc:	2244      	movs	r2, #68	; 0x44
 80009de:	2100      	movs	r1, #0
 80009e0:	a805      	add	r0, sp, #20
 80009e2:	f008 fa7b 	bl	8008edc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009e6:	2000      	movs	r0, #0
 80009e8:	9000      	str	r0, [sp, #0]
 80009ea:	9001      	str	r0, [sp, #4]
 80009ec:	9002      	str	r0, [sp, #8]
 80009ee:	9003      	str	r0, [sp, #12]
 80009f0:	9004      	str	r0, [sp, #16]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80009f2:	f002 ff3d 	bl	8003870 <HAL_PWREx_ControlVoltageScaling>
 80009f6:	bb10      	cbnz	r0, 8000a3e <SystemClock_Config+0x66>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009f8:	2201      	movs	r2, #1
 80009fa:	9205      	str	r2, [sp, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a00:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a02:	2302      	movs	r3, #2
 8000a04:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a06:	2103      	movs	r1, #3
 8000a08:	9110      	str	r1, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a0a:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 8000a0c:	221e      	movs	r2, #30
 8000a0e:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a10:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a12:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a14:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a16:	a805      	add	r0, sp, #20
 8000a18:	f003 f896 	bl	8003b48 <HAL_RCC_OscConfig>
 8000a1c:	b988      	cbnz	r0, 8000a42 <SystemClock_Config+0x6a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a1e:	230f      	movs	r3, #15
 8000a20:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a22:	2303      	movs	r3, #3
 8000a24:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a26:	2300      	movs	r3, #0
 8000a28:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a2a:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a2c:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a2e:	2105      	movs	r1, #5
 8000a30:	4668      	mov	r0, sp
 8000a32:	f003 fbc7 	bl	80041c4 <HAL_RCC_ClockConfig>
 8000a36:	b930      	cbnz	r0, 8000a46 <SystemClock_Config+0x6e>
}
 8000a38:	b017      	add	sp, #92	; 0x5c
 8000a3a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000a3e:	f7ff ffc9 	bl	80009d4 <Error_Handler>
    Error_Handler();
 8000a42:	f7ff ffc7 	bl	80009d4 <Error_Handler>
    Error_Handler();
 8000a46:	f7ff ffc5 	bl	80009d4 <Error_Handler>

08000a4a <main>:
{
 8000a4a:	b508      	push	{r3, lr}
  HAL_Init();
 8000a4c:	f000 ffd2 	bl	80019f4 <HAL_Init>
  SystemClock_Config();
 8000a50:	f7ff ffc2 	bl	80009d8 <SystemClock_Config>
  MX_GPIO_Init();
 8000a54:	f7ff feca 	bl	80007ec <MX_GPIO_Init>
  MX_DMA_Init();
 8000a58:	f7ff fe4c 	bl	80006f4 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000a5c:	f000 fb1a 	bl	8001094 <MX_USART3_UART_Init>
  MX_SPI2_Init();
 8000a60:	f000 f8e0 	bl	8000c24 <MX_SPI2_Init>
  MX_I2C1_Init();
 8000a64:	f7ff ff42 	bl	80008ec <MX_I2C1_Init>
  MX_OCTOSPI1_Init();
 8000a68:	f000 f814 	bl	8000a94 <MX_OCTOSPI1_Init>
  MX_UART4_Init();
 8000a6c:	f000 fa74 	bl	8000f58 <MX_UART4_Init>
  MX_UART5_Init();
 8000a70:	f000 faa6 	bl	8000fc0 <MX_UART5_Init>
  MX_USART2_UART_Init();
 8000a74:	f000 fada 	bl	800102c <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8000a78:	f005 fd7c 	bl	8006574 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 8000a7c:	f007 fd18 	bl	80084b0 <MX_USB_HOST_Init>
  Start_Scheduler();
 8000a80:	f007 fc64 	bl	800834c <Start_Scheduler>
  Debug_Task();
 8000a84:	f7ff fe1e 	bl	80006c4 <Debug_Task>
    MX_USB_HOST_Process();
 8000a88:	f007 fd32 	bl	80084f0 <MX_USB_HOST_Process>
	  Run_Scheduler_Tasks();
 8000a8c:	f007 fbae 	bl	80081ec <Run_Scheduler_Tasks>
  while (1)
 8000a90:	e7fa      	b.n	8000a88 <main+0x3e>
	...

08000a94 <MX_OCTOSPI1_Init>:
OSPI_HandleTypeDef hospi1;
DMA_HandleTypeDef hdma_octospi1;

/* OCTOSPI1 init function */
void MX_OCTOSPI1_Init(void)
{
 8000a94:	b500      	push	{lr}
 8000a96:	b087      	sub	sp, #28

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 8000a98:	2300      	movs	r3, #0
 8000a9a:	9301      	str	r3, [sp, #4]
 8000a9c:	9302      	str	r3, [sp, #8]
 8000a9e:	9303      	str	r3, [sp, #12]
 8000aa0:	9304      	str	r3, [sp, #16]
 8000aa2:	9305      	str	r3, [sp, #20]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  hospi1.Instance = OCTOSPI1;
 8000aa4:	4818      	ldr	r0, [pc, #96]	; (8000b08 <MX_OCTOSPI1_Init+0x74>)
 8000aa6:	4a19      	ldr	r2, [pc, #100]	; (8000b0c <MX_OCTOSPI1_Init+0x78>)
 8000aa8:	6002      	str	r2, [r0, #0]
  hospi1.Init.FifoThreshold = 1;
 8000aaa:	2201      	movs	r2, #1
 8000aac:	6042      	str	r2, [r0, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000aae:	6083      	str	r3, [r0, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 8000ab0:	60c3      	str	r3, [r0, #12]
  hospi1.Init.DeviceSize = 27;
 8000ab2:	221b      	movs	r2, #27
 8000ab4:	6102      	str	r2, [r0, #16]
  hospi1.Init.ChipSelectHighTime = 3;
 8000ab6:	2203      	movs	r2, #3
 8000ab8:	6142      	str	r2, [r0, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000aba:	6183      	str	r3, [r0, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000abc:	61c3      	str	r3, [r0, #28]
  hospi1.Init.ClockPrescaler = 60;
 8000abe:	223c      	movs	r2, #60	; 0x3c
 8000ac0:	6202      	str	r2, [r0, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000ac2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ac6:	6242      	str	r2, [r0, #36]	; 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8000ac8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000acc:	6282      	str	r2, [r0, #40]	; 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 8000ace:	62c3      	str	r3, [r0, #44]	; 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8000ad0:	2308      	movs	r3, #8
 8000ad2:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8000ad4:	f002 fcbc 	bl	8003450 <HAL_OSPI_Init>
 8000ad8:	b978      	cbnz	r0, 8000afa <MX_OCTOSPI1_Init+0x66>
  {
    Error_Handler();
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 8000ada:	2301      	movs	r3, #1
 8000adc:	9301      	str	r3, [sp, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 8000ade:	9303      	str	r3, [sp, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8000ae0:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8000ae4:	9304      	str	r3, [sp, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000ae6:	f241 3288 	movw	r2, #5000	; 0x1388
 8000aea:	a901      	add	r1, sp, #4
 8000aec:	4806      	ldr	r0, [pc, #24]	; (8000b08 <MX_OCTOSPI1_Init+0x74>)
 8000aee:	f002 fd27 	bl	8003540 <HAL_OSPIM_Config>
 8000af2:	b928      	cbnz	r0, 8000b00 <MX_OCTOSPI1_Init+0x6c>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8000af4:	b007      	add	sp, #28
 8000af6:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000afa:	f7ff ff6b 	bl	80009d4 <Error_Handler>
 8000afe:	e7ec      	b.n	8000ada <MX_OCTOSPI1_Init+0x46>
    Error_Handler();
 8000b00:	f7ff ff68 	bl	80009d4 <Error_Handler>
}
 8000b04:	e7f6      	b.n	8000af4 <MX_OCTOSPI1_Init+0x60>
 8000b06:	bf00      	nop
 8000b08:	20000160 	.word	0x20000160
 8000b0c:	a0001000 	.word	0xa0001000

08000b10 <HAL_OSPI_MspInit>:

void HAL_OSPI_MspInit(OSPI_HandleTypeDef* ospiHandle)
{
 8000b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b14:	b0ae      	sub	sp, #184	; 0xb8
 8000b16:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b18:	2100      	movs	r1, #0
 8000b1a:	9129      	str	r1, [sp, #164]	; 0xa4
 8000b1c:	912a      	str	r1, [sp, #168]	; 0xa8
 8000b1e:	912b      	str	r1, [sp, #172]	; 0xac
 8000b20:	912c      	str	r1, [sp, #176]	; 0xb0
 8000b22:	912d      	str	r1, [sp, #180]	; 0xb4
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b24:	2294      	movs	r2, #148	; 0x94
 8000b26:	a804      	add	r0, sp, #16
 8000b28:	f008 f9d8 	bl	8008edc <memset>
  if(ospiHandle->Instance==OCTOSPI1)
 8000b2c:	6822      	ldr	r2, [r4, #0]
 8000b2e:	4b38      	ldr	r3, [pc, #224]	; (8000c10 <HAL_OSPI_MspInit+0x100>)
 8000b30:	429a      	cmp	r2, r3
 8000b32:	d002      	beq.n	8000b3a <HAL_OSPI_MspInit+0x2a>
    HAL_NVIC_EnableIRQ(OCTOSPI1_IRQn);
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }
}
 8000b34:	b02e      	add	sp, #184	; 0xb8
 8000b36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8000b3a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b3e:	9304      	str	r3, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b40:	a804      	add	r0, sp, #16
 8000b42:	f003 fdd3 	bl	80046ec <HAL_RCCEx_PeriphCLKConfig>
 8000b46:	2800      	cmp	r0, #0
 8000b48:	d15b      	bne.n	8000c02 <HAL_OSPI_MspInit+0xf2>
    __HAL_RCC_OSPIM_CLK_ENABLE();
 8000b4a:	4b32      	ldr	r3, [pc, #200]	; (8000c14 <HAL_OSPI_MspInit+0x104>)
 8000b4c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b4e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000b52:	64da      	str	r2, [r3, #76]	; 0x4c
 8000b54:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b56:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8000b5a:	9200      	str	r2, [sp, #0]
 8000b5c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8000b5e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000b60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000b64:	651a      	str	r2, [r3, #80]	; 0x50
 8000b66:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000b68:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8000b6c:	9201      	str	r2, [sp, #4]
 8000b6e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b70:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b72:	f042 0201 	orr.w	r2, r2, #1
 8000b76:	64da      	str	r2, [r3, #76]	; 0x4c
 8000b78:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b7a:	f002 0201 	and.w	r2, r2, #1
 8000b7e:	9202      	str	r2, [sp, #8]
 8000b80:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b84:	f042 0202 	orr.w	r2, r2, #2
 8000b88:	64da      	str	r2, [r3, #76]	; 0x4c
 8000b8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b8c:	f003 0302 	and.w	r3, r3, #2
 8000b90:	9303      	str	r3, [sp, #12]
 8000b92:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = FLASH_CS_Pin|FLASH_CLK_Pin|FLASH_IO3_Pin|FLASH_IO2_Pin;
 8000b94:	23cc      	movs	r3, #204	; 0xcc
 8000b96:	9329      	str	r3, [sp, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b98:	f04f 0802 	mov.w	r8, #2
 8000b9c:	f8cd 80a8 	str.w	r8, [sp, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	2500      	movs	r5, #0
 8000ba2:	952b      	str	r5, [sp, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba4:	2603      	movs	r6, #3
 8000ba6:	962c      	str	r6, [sp, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8000ba8:	270a      	movs	r7, #10
 8000baa:	972d      	str	r7, [sp, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bac:	a929      	add	r1, sp, #164	; 0xa4
 8000bae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bb2:	f001 f9ab 	bl	8001f0c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = FLASH_IO1_Pin|FLASH_IO0_Pin;
 8000bb6:	9629      	str	r6, [sp, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb8:	f8cd 80a8 	str.w	r8, [sp, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	952b      	str	r5, [sp, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bbe:	962c      	str	r6, [sp, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8000bc0:	972d      	str	r7, [sp, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc2:	a929      	add	r1, sp, #164	; 0xa4
 8000bc4:	4814      	ldr	r0, [pc, #80]	; (8000c18 <HAL_OSPI_MspInit+0x108>)
 8000bc6:	f001 f9a1 	bl	8001f0c <HAL_GPIO_Init>
    hdma_octospi1.Instance = DMA2_Channel4;
 8000bca:	4814      	ldr	r0, [pc, #80]	; (8000c1c <HAL_OSPI_MspInit+0x10c>)
 8000bcc:	4b14      	ldr	r3, [pc, #80]	; (8000c20 <HAL_OSPI_MspInit+0x110>)
 8000bce:	6003      	str	r3, [r0, #0]
    hdma_octospi1.Init.Request = DMA_REQUEST_OCTOSPI1;
 8000bd0:	2328      	movs	r3, #40	; 0x28
 8000bd2:	6043      	str	r3, [r0, #4]
    hdma_octospi1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bd4:	6085      	str	r5, [r0, #8]
    hdma_octospi1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bd6:	60c5      	str	r5, [r0, #12]
    hdma_octospi1.Init.MemInc = DMA_MINC_ENABLE;
 8000bd8:	2380      	movs	r3, #128	; 0x80
 8000bda:	6103      	str	r3, [r0, #16]
    hdma_octospi1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bdc:	6145      	str	r5, [r0, #20]
    hdma_octospi1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bde:	6185      	str	r5, [r0, #24]
    hdma_octospi1.Init.Mode = DMA_NORMAL;
 8000be0:	61c5      	str	r5, [r0, #28]
    hdma_octospi1.Init.Priority = DMA_PRIORITY_LOW;
 8000be2:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_octospi1) != HAL_OK)
 8000be4:	f001 f808 	bl	8001bf8 <HAL_DMA_Init>
 8000be8:	b970      	cbnz	r0, 8000c08 <HAL_OSPI_MspInit+0xf8>
    __HAL_LINKDMA(ospiHandle,hdma,hdma_octospi1);
 8000bea:	4b0c      	ldr	r3, [pc, #48]	; (8000c1c <HAL_OSPI_MspInit+0x10c>)
 8000bec:	6423      	str	r3, [r4, #64]	; 0x40
 8000bee:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(OCTOSPI1_IRQn, 0, 0);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	4611      	mov	r1, r2
 8000bf4:	2047      	movs	r0, #71	; 0x47
 8000bf6:	f000 ff45 	bl	8001a84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OCTOSPI1_IRQn);
 8000bfa:	2047      	movs	r0, #71	; 0x47
 8000bfc:	f000 ff7a 	bl	8001af4 <HAL_NVIC_EnableIRQ>
}
 8000c00:	e798      	b.n	8000b34 <HAL_OSPI_MspInit+0x24>
      Error_Handler();
 8000c02:	f7ff fee7 	bl	80009d4 <Error_Handler>
 8000c06:	e7a0      	b.n	8000b4a <HAL_OSPI_MspInit+0x3a>
      Error_Handler();
 8000c08:	f7ff fee4 	bl	80009d4 <Error_Handler>
 8000c0c:	e7ed      	b.n	8000bea <HAL_OSPI_MspInit+0xda>
 8000c0e:	bf00      	nop
 8000c10:	a0001000 	.word	0xa0001000
 8000c14:	40021000 	.word	0x40021000
 8000c18:	48000400 	.word	0x48000400
 8000c1c:	20000100 	.word	0x20000100
 8000c20:	40020444 	.word	0x40020444

08000c24 <MX_SPI2_Init>:
DMA_HandleTypeDef hdma_spi2_rx;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000c24:	b508      	push	{r3, lr}
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000c26:	480e      	ldr	r0, [pc, #56]	; (8000c60 <MX_SPI2_Init+0x3c>)
 8000c28:	4b0e      	ldr	r3, [pc, #56]	; (8000c64 <MX_SPI2_Init+0x40>)
 8000c2a:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000c2c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000c30:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000c32:	2300      	movs	r3, #0
 8000c34:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c36:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000c3a:	60c2      	str	r2, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c3c:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c3e:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8000c40:	6183      	str	r3, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c42:	61c3      	str	r3, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c44:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c46:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c48:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000c4a:	2207      	movs	r2, #7
 8000c4c:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c4e:	6303      	str	r3, [r0, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000c50:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000c52:	f003 ffb9 	bl	8004bc8 <HAL_SPI_Init>
 8000c56:	b900      	cbnz	r0, 8000c5a <MX_SPI2_Init+0x36>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000c58:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000c5a:	f7ff febb 	bl	80009d4 <Error_Handler>
}
 8000c5e:	e7fb      	b.n	8000c58 <MX_SPI2_Init+0x34>
 8000c60:	20000270 	.word	0x20000270
 8000c64:	40003800 	.word	0x40003800

08000c68 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000c68:	b510      	push	{r4, lr}
 8000c6a:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	9303      	str	r3, [sp, #12]
 8000c70:	9304      	str	r3, [sp, #16]
 8000c72:	9305      	str	r3, [sp, #20]
 8000c74:	9306      	str	r3, [sp, #24]
 8000c76:	9307      	str	r3, [sp, #28]
  if(spiHandle->Instance==SPI2)
 8000c78:	6802      	ldr	r2, [r0, #0]
 8000c7a:	4b32      	ldr	r3, [pc, #200]	; (8000d44 <HAL_SPI_MspInit+0xdc>)
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	d001      	beq.n	8000c84 <HAL_SPI_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000c80:	b008      	add	sp, #32
 8000c82:	bd10      	pop	{r4, pc}
 8000c84:	4604      	mov	r4, r0
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c86:	f503 33ec 	add.w	r3, r3, #120832	; 0x1d800
 8000c8a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000c8c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000c90:	659a      	str	r2, [r3, #88]	; 0x58
 8000c92:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000c94:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000c98:	9201      	str	r2, [sp, #4]
 8000c9a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c9c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c9e:	f042 0202 	orr.w	r2, r2, #2
 8000ca2:	64da      	str	r2, [r3, #76]	; 0x4c
 8000ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ca6:	f003 0302 	and.w	r3, r3, #2
 8000caa:	9302      	str	r3, [sp, #8]
 8000cac:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = NXP_SPI2_CS_Pin|NXP_SPI2_SCK_Pin|NXP_SPI2_DATA_O_Pin|NXP_SPI2_DATA_In_Pin;
 8000cae:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000cb2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb8:	2303      	movs	r3, #3
 8000cba:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cbc:	2305      	movs	r3, #5
 8000cbe:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc0:	a903      	add	r1, sp, #12
 8000cc2:	4821      	ldr	r0, [pc, #132]	; (8000d48 <HAL_SPI_MspInit+0xe0>)
 8000cc4:	f001 f922 	bl	8001f0c <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Channel5;
 8000cc8:	4820      	ldr	r0, [pc, #128]	; (8000d4c <HAL_SPI_MspInit+0xe4>)
 8000cca:	4b21      	ldr	r3, [pc, #132]	; (8000d50 <HAL_SPI_MspInit+0xe8>)
 8000ccc:	6003      	str	r3, [r0, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8000cce:	230c      	movs	r3, #12
 8000cd0:	6043      	str	r3, [r0, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	6083      	str	r3, [r0, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cd6:	60c3      	str	r3, [r0, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000cd8:	2280      	movs	r2, #128	; 0x80
 8000cda:	6102      	str	r2, [r0, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cdc:	6143      	str	r3, [r0, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cde:	6183      	str	r3, [r0, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8000ce0:	2320      	movs	r3, #32
 8000ce2:	61c3      	str	r3, [r0, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000ce4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000ce8:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8000cea:	f000 ff85 	bl	8001bf8 <HAL_DMA_Init>
 8000cee:	bb10      	cbnz	r0, 8000d36 <HAL_SPI_MspInit+0xce>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8000cf0:	4b16      	ldr	r3, [pc, #88]	; (8000d4c <HAL_SPI_MspInit+0xe4>)
 8000cf2:	65a3      	str	r3, [r4, #88]	; 0x58
 8000cf4:	629c      	str	r4, [r3, #40]	; 0x28
    hdma_spi2_tx.Instance = DMA1_Channel6;
 8000cf6:	4817      	ldr	r0, [pc, #92]	; (8000d54 <HAL_SPI_MspInit+0xec>)
 8000cf8:	4b17      	ldr	r3, [pc, #92]	; (8000d58 <HAL_SPI_MspInit+0xf0>)
 8000cfa:	6003      	str	r3, [r0, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8000cfc:	230d      	movs	r3, #13
 8000cfe:	6043      	str	r3, [r0, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d00:	2310      	movs	r3, #16
 8000d02:	6083      	str	r3, [r0, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d04:	2300      	movs	r3, #0
 8000d06:	60c3      	str	r3, [r0, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d08:	2280      	movs	r2, #128	; 0x80
 8000d0a:	6102      	str	r2, [r0, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d0c:	6143      	str	r3, [r0, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d0e:	6183      	str	r3, [r0, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8000d10:	61c3      	str	r3, [r0, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000d12:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000d16:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000d18:	f000 ff6e 	bl	8001bf8 <HAL_DMA_Init>
 8000d1c:	b970      	cbnz	r0, 8000d3c <HAL_SPI_MspInit+0xd4>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8000d1e:	4b0d      	ldr	r3, [pc, #52]	; (8000d54 <HAL_SPI_MspInit+0xec>)
 8000d20:	6563      	str	r3, [r4, #84]	; 0x54
 8000d22:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000d24:	2200      	movs	r2, #0
 8000d26:	4611      	mov	r1, r2
 8000d28:	2024      	movs	r0, #36	; 0x24
 8000d2a:	f000 feab 	bl	8001a84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000d2e:	2024      	movs	r0, #36	; 0x24
 8000d30:	f000 fee0 	bl	8001af4 <HAL_NVIC_EnableIRQ>
}
 8000d34:	e7a4      	b.n	8000c80 <HAL_SPI_MspInit+0x18>
      Error_Handler();
 8000d36:	f7ff fe4d 	bl	80009d4 <Error_Handler>
 8000d3a:	e7d9      	b.n	8000cf0 <HAL_SPI_MspInit+0x88>
      Error_Handler();
 8000d3c:	f7ff fe4a 	bl	80009d4 <Error_Handler>
 8000d40:	e7ed      	b.n	8000d1e <HAL_SPI_MspInit+0xb6>
 8000d42:	bf00      	nop
 8000d44:	40003800 	.word	0x40003800
 8000d48:	48000400 	.word	0x48000400
 8000d4c:	200001b0 	.word	0x200001b0
 8000d50:	40020058 	.word	0x40020058
 8000d54:	20000210 	.word	0x20000210
 8000d58:	4002006c 	.word	0x4002006c

08000d5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d5c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d5e:	4b0a      	ldr	r3, [pc, #40]	; (8000d88 <HAL_MspInit+0x2c>)
 8000d60:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000d62:	f042 0201 	orr.w	r2, r2, #1
 8000d66:	661a      	str	r2, [r3, #96]	; 0x60
 8000d68:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000d6a:	f002 0201 	and.w	r2, r2, #1
 8000d6e:	9200      	str	r2, [sp, #0]
 8000d70:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d72:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000d74:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000d78:	659a      	str	r2, [r3, #88]	; 0x58
 8000d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d80:	9301      	str	r3, [sp, #4]
 8000d82:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d84:	b002      	add	sp, #8
 8000d86:	4770      	bx	lr
 8000d88:	40021000 	.word	0x40021000

08000d8c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d8c:	e7fe      	b.n	8000d8c <NMI_Handler>

08000d8e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d8e:	e7fe      	b.n	8000d8e <HardFault_Handler>

08000d90 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d90:	e7fe      	b.n	8000d90 <MemManage_Handler>

08000d92 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d92:	e7fe      	b.n	8000d92 <BusFault_Handler>

08000d94 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d94:	e7fe      	b.n	8000d94 <UsageFault_Handler>

08000d96 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d96:	4770      	bx	lr

08000d98 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d98:	4770      	bx	lr

08000d9a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d9a:	4770      	bx	lr

08000d9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d9c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d9e:	f000 fe39 	bl	8001a14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000da2:	bd08      	pop	{r3, pc}

08000da4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000da4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8000da6:	4802      	ldr	r0, [pc, #8]	; (8000db0 <DMA1_Channel1_IRQHandler+0xc>)
 8000da8:	f001 f84b 	bl	8001e42 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000dac:	bd08      	pop	{r3, pc}
 8000dae:	bf00      	nop
 8000db0:	20000398 	.word	0x20000398

08000db4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000db4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8000db6:	4802      	ldr	r0, [pc, #8]	; (8000dc0 <DMA1_Channel2_IRQHandler+0xc>)
 8000db8:	f001 f843 	bl	8001e42 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000dbc:	bd08      	pop	{r3, pc}
 8000dbe:	bf00      	nop
 8000dc0:	200003f8 	.word	0x200003f8

08000dc4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000dc4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000dc6:	4802      	ldr	r0, [pc, #8]	; (8000dd0 <DMA1_Channel3_IRQHandler+0xc>)
 8000dc8:	f001 f83b 	bl	8001e42 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000dcc:	bd08      	pop	{r3, pc}
 8000dce:	bf00      	nop
 8000dd0:	20000518 	.word	0x20000518

08000dd4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000dd4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000dd6:	4802      	ldr	r0, [pc, #8]	; (8000de0 <DMA1_Channel4_IRQHandler+0xc>)
 8000dd8:	f001 f833 	bl	8001e42 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000ddc:	bd08      	pop	{r3, pc}
 8000dde:	bf00      	nop
 8000de0:	20000578 	.word	0x20000578

08000de4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000de4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8000de6:	4802      	ldr	r0, [pc, #8]	; (8000df0 <DMA1_Channel5_IRQHandler+0xc>)
 8000de8:	f001 f82b 	bl	8001e42 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000dec:	bd08      	pop	{r3, pc}
 8000dee:	bf00      	nop
 8000df0:	200001b0 	.word	0x200001b0

08000df4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000df4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000df6:	4802      	ldr	r0, [pc, #8]	; (8000e00 <DMA1_Channel6_IRQHandler+0xc>)
 8000df8:	f001 f823 	bl	8001e42 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000dfc:	bd08      	pop	{r3, pc}
 8000dfe:	bf00      	nop
 8000e00:	20000210 	.word	0x20000210

08000e04 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000e04:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000e06:	4802      	ldr	r0, [pc, #8]	; (8000e10 <DMA1_Channel7_IRQHandler+0xc>)
 8000e08:	f001 f81b 	bl	8001e42 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000e0c:	bd08      	pop	{r3, pc}
 8000e0e:	bf00      	nop
 8000e10:	200004b8 	.word	0x200004b8

08000e14 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000e14:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000e16:	4802      	ldr	r0, [pc, #8]	; (8000e20 <SPI2_IRQHandler+0xc>)
 8000e18:	f003 ff46 	bl	8004ca8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000e1c:	bd08      	pop	{r3, pc}
 8000e1e:	bf00      	nop
 8000e20:	20000270 	.word	0x20000270

08000e24 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e24:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e26:	4802      	ldr	r0, [pc, #8]	; (8000e30 <USART2_IRQHandler+0xc>)
 8000e28:	f004 f9ee 	bl	8005208 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e2c:	bd08      	pop	{r3, pc}
 8000e2e:	bf00      	nop
 8000e30:	200005d8 	.word	0x200005d8

08000e34 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000e34:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000e36:	4802      	ldr	r0, [pc, #8]	; (8000e40 <USART3_IRQHandler+0xc>)
 8000e38:	f004 f9e6 	bl	8005208 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000e3c:	bd08      	pop	{r3, pc}
 8000e3e:	bf00      	nop
 8000e40:	20000668 	.word	0x20000668

08000e44 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000e44:	b508      	push	{r3, lr}
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000e46:	4802      	ldr	r0, [pc, #8]	; (8000e50 <UART4_IRQHandler+0xc>)
 8000e48:	f004 f9de 	bl	8005208 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000e4c:	bd08      	pop	{r3, pc}
 8000e4e:	bf00      	nop
 8000e50:	200006f8 	.word	0x200006f8

08000e54 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8000e54:	b508      	push	{r3, lr}
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8000e56:	4802      	ldr	r0, [pc, #8]	; (8000e60 <UART5_IRQHandler+0xc>)
 8000e58:	f004 f9d6 	bl	8005208 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8000e5c:	bd08      	pop	{r3, pc}
 8000e5e:	bf00      	nop
 8000e60:	20000788 	.word	0x20000788

08000e64 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8000e64:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000e66:	4802      	ldr	r0, [pc, #8]	; (8000e70 <DMA2_Channel1_IRQHandler+0xc>)
 8000e68:	f000 ffeb 	bl	8001e42 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8000e6c:	bd08      	pop	{r3, pc}
 8000e6e:	bf00      	nop
 8000e70:	20000458 	.word	0x20000458

08000e74 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8000e74:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8000e76:	4802      	ldr	r0, [pc, #8]	; (8000e80 <DMA2_Channel2_IRQHandler+0xc>)
 8000e78:	f000 ffe3 	bl	8001e42 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8000e7c:	bd08      	pop	{r3, pc}
 8000e7e:	bf00      	nop
 8000e80:	20000338 	.word	0x20000338

08000e84 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8000e84:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8000e86:	4802      	ldr	r0, [pc, #8]	; (8000e90 <DMA2_Channel3_IRQHandler+0xc>)
 8000e88:	f000 ffdb 	bl	8001e42 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 8000e8c:	bd08      	pop	{r3, pc}
 8000e8e:	bf00      	nop
 8000e90:	200002d8 	.word	0x200002d8

08000e94 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8000e94:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_octospi1);
 8000e96:	4802      	ldr	r0, [pc, #8]	; (8000ea0 <DMA2_Channel4_IRQHandler+0xc>)
 8000e98:	f000 ffd3 	bl	8001e42 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 8000e9c:	bd08      	pop	{r3, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000100 	.word	0x20000100

08000ea4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ea4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000ea6:	4802      	ldr	r0, [pc, #8]	; (8000eb0 <OTG_FS_IRQHandler+0xc>)
 8000ea8:	f001 fdb8 	bl	8002a1c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000eac:	bd08      	pop	{r3, pc}
 8000eae:	bf00      	nop
 8000eb0:	20001c30 	.word	0x20001c30

08000eb4 <OCTOSPI1_IRQHandler>:

/**
  * @brief This function handles OCTOSPI1 global interrupt.
  */
void OCTOSPI1_IRQHandler(void)
{
 8000eb4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OCTOSPI1_IRQn 0 */

  /* USER CODE END OCTOSPI1_IRQn 0 */
  HAL_OSPI_IRQHandler(&hospi1);
 8000eb6:	4802      	ldr	r0, [pc, #8]	; (8000ec0 <OCTOSPI1_IRQHandler+0xc>)
 8000eb8:	f002 f9f8 	bl	80032ac <HAL_OSPI_IRQHandler>
  /* USER CODE BEGIN OCTOSPI1_IRQn 1 */

  /* USER CODE END OCTOSPI1_IRQn 1 */
}
 8000ebc:	bd08      	pop	{r3, pc}
 8000ebe:	bf00      	nop
 8000ec0:	20000160 	.word	0x20000160

08000ec4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ec4:	b570      	push	{r4, r5, r6, lr}
 8000ec6:	460c      	mov	r4, r1
 8000ec8:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eca:	2500      	movs	r5, #0
 8000ecc:	e006      	b.n	8000edc <_read+0x18>
  {
    *ptr++ = __io_getchar();
 8000ece:	f3af 8000 	nop.w
 8000ed2:	4621      	mov	r1, r4
 8000ed4:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ed8:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 8000eda:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000edc:	42b5      	cmp	r5, r6
 8000ede:	dbf6      	blt.n	8000ece <_read+0xa>
  }

  return len;
}
 8000ee0:	4630      	mov	r0, r6
 8000ee2:	bd70      	pop	{r4, r5, r6, pc}

08000ee4 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8000ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee8:	4770      	bx	lr

08000eea <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8000eea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eee:	604b      	str	r3, [r1, #4]
  return 0;
}
 8000ef0:	2000      	movs	r0, #0
 8000ef2:	4770      	bx	lr

08000ef4 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8000ef4:	2001      	movs	r0, #1
 8000ef6:	4770      	bx	lr

08000ef8 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8000ef8:	2000      	movs	r0, #0
 8000efa:	4770      	bx	lr

08000efc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000efc:	b510      	push	{r4, lr}
 8000efe:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f00:	4a0c      	ldr	r2, [pc, #48]	; (8000f34 <_sbrk+0x38>)
 8000f02:	490d      	ldr	r1, [pc, #52]	; (8000f38 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f04:	480d      	ldr	r0, [pc, #52]	; (8000f3c <_sbrk+0x40>)
 8000f06:	6800      	ldr	r0, [r0, #0]
 8000f08:	b140      	cbz	r0, 8000f1c <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f0a:	480c      	ldr	r0, [pc, #48]	; (8000f3c <_sbrk+0x40>)
 8000f0c:	6800      	ldr	r0, [r0, #0]
 8000f0e:	4403      	add	r3, r0
 8000f10:	1a52      	subs	r2, r2, r1
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d806      	bhi.n	8000f24 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000f16:	4a09      	ldr	r2, [pc, #36]	; (8000f3c <_sbrk+0x40>)
 8000f18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8000f1a:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8000f1c:	4807      	ldr	r0, [pc, #28]	; (8000f3c <_sbrk+0x40>)
 8000f1e:	4c08      	ldr	r4, [pc, #32]	; (8000f40 <_sbrk+0x44>)
 8000f20:	6004      	str	r4, [r0, #0]
 8000f22:	e7f2      	b.n	8000f0a <_sbrk+0xe>
    errno = ENOMEM;
 8000f24:	f008 f85e 	bl	8008fe4 <__errno>
 8000f28:	230c      	movs	r3, #12
 8000f2a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f30:	e7f3      	b.n	8000f1a <_sbrk+0x1e>
 8000f32:	bf00      	nop
 8000f34:	200a0000 	.word	0x200a0000
 8000f38:	00002000 	.word	0x00002000
 8000f3c:	200002d4 	.word	0x200002d4
 8000f40:	20002080 	.word	0x20002080

08000f44 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f44:	4a03      	ldr	r2, [pc, #12]	; (8000f54 <SystemInit+0x10>)
 8000f46:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8000f4a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f4e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000f52:	4770      	bx	lr
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart3_rx;
DMA_HandleTypeDef hdma_usart3_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8000f58:	b508      	push	{r3, lr}
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000f5a:	4817      	ldr	r0, [pc, #92]	; (8000fb8 <MX_UART4_Init+0x60>)
 8000f5c:	4b17      	ldr	r3, [pc, #92]	; (8000fbc <MX_UART4_Init+0x64>)
 8000f5e:	6003      	str	r3, [r0, #0]
  huart4.Init.BaudRate = 9600;
 8000f60:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000f64:	6043      	str	r3, [r0, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000f66:	2300      	movs	r3, #0
 8000f68:	6083      	str	r3, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000f6a:	60c3      	str	r3, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000f6c:	6103      	str	r3, [r0, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000f6e:	220c      	movs	r2, #12
 8000f70:	6142      	str	r2, [r0, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f72:	6183      	str	r3, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f74:	61c3      	str	r3, [r0, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f76:	6203      	str	r3, [r0, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f78:	6243      	str	r3, [r0, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f7a:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000f7c:	f004 fe03 	bl	8005b86 <HAL_UART_Init>
 8000f80:	b970      	cbnz	r0, 8000fa0 <MX_UART4_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f82:	2100      	movs	r1, #0
 8000f84:	480c      	ldr	r0, [pc, #48]	; (8000fb8 <MX_UART4_Init+0x60>)
 8000f86:	f004 ff01 	bl	8005d8c <HAL_UARTEx_SetTxFifoThreshold>
 8000f8a:	b960      	cbnz	r0, 8000fa6 <MX_UART4_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	480a      	ldr	r0, [pc, #40]	; (8000fb8 <MX_UART4_Init+0x60>)
 8000f90:	f004 ff21 	bl	8005dd6 <HAL_UARTEx_SetRxFifoThreshold>
 8000f94:	b950      	cbnz	r0, 8000fac <MX_UART4_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000f96:	4808      	ldr	r0, [pc, #32]	; (8000fb8 <MX_UART4_Init+0x60>)
 8000f98:	f004 fed9 	bl	8005d4e <HAL_UARTEx_DisableFifoMode>
 8000f9c:	b948      	cbnz	r0, 8000fb2 <MX_UART4_Init+0x5a>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000f9e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000fa0:	f7ff fd18 	bl	80009d4 <Error_Handler>
 8000fa4:	e7ed      	b.n	8000f82 <MX_UART4_Init+0x2a>
    Error_Handler();
 8000fa6:	f7ff fd15 	bl	80009d4 <Error_Handler>
 8000faa:	e7ef      	b.n	8000f8c <MX_UART4_Init+0x34>
    Error_Handler();
 8000fac:	f7ff fd12 	bl	80009d4 <Error_Handler>
 8000fb0:	e7f1      	b.n	8000f96 <MX_UART4_Init+0x3e>
    Error_Handler();
 8000fb2:	f7ff fd0f 	bl	80009d4 <Error_Handler>
}
 8000fb6:	e7f2      	b.n	8000f9e <MX_UART4_Init+0x46>
 8000fb8:	200006f8 	.word	0x200006f8
 8000fbc:	40004c00 	.word	0x40004c00

08000fc0 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8000fc0:	b508      	push	{r3, lr}
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000fc2:	4818      	ldr	r0, [pc, #96]	; (8001024 <MX_UART5_Init+0x64>)
 8000fc4:	4b18      	ldr	r3, [pc, #96]	; (8001028 <MX_UART5_Init+0x68>)
 8000fc6:	6003      	str	r3, [r0, #0]
  huart5.Init.BaudRate = 115200;
 8000fc8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000fcc:	6043      	str	r3, [r0, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	6083      	str	r3, [r0, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000fd2:	60c3      	str	r3, [r0, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000fd4:	6103      	str	r3, [r0, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000fd6:	220c      	movs	r2, #12
 8000fd8:	6142      	str	r2, [r0, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000fda:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000fde:	6182      	str	r2, [r0, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fe0:	61c3      	str	r3, [r0, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fe2:	6203      	str	r3, [r0, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fe4:	6243      	str	r3, [r0, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fe6:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000fe8:	f004 fdcd 	bl	8005b86 <HAL_UART_Init>
 8000fec:	b970      	cbnz	r0, 800100c <MX_UART5_Init+0x4c>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fee:	2100      	movs	r1, #0
 8000ff0:	480c      	ldr	r0, [pc, #48]	; (8001024 <MX_UART5_Init+0x64>)
 8000ff2:	f004 fecb 	bl	8005d8c <HAL_UARTEx_SetTxFifoThreshold>
 8000ff6:	b960      	cbnz	r0, 8001012 <MX_UART5_Init+0x52>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	480a      	ldr	r0, [pc, #40]	; (8001024 <MX_UART5_Init+0x64>)
 8000ffc:	f004 feeb 	bl	8005dd6 <HAL_UARTEx_SetRxFifoThreshold>
 8001000:	b950      	cbnz	r0, 8001018 <MX_UART5_Init+0x58>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8001002:	4808      	ldr	r0, [pc, #32]	; (8001024 <MX_UART5_Init+0x64>)
 8001004:	f004 fea3 	bl	8005d4e <HAL_UARTEx_DisableFifoMode>
 8001008:	b948      	cbnz	r0, 800101e <MX_UART5_Init+0x5e>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800100a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800100c:	f7ff fce2 	bl	80009d4 <Error_Handler>
 8001010:	e7ed      	b.n	8000fee <MX_UART5_Init+0x2e>
    Error_Handler();
 8001012:	f7ff fcdf 	bl	80009d4 <Error_Handler>
 8001016:	e7ef      	b.n	8000ff8 <MX_UART5_Init+0x38>
    Error_Handler();
 8001018:	f7ff fcdc 	bl	80009d4 <Error_Handler>
 800101c:	e7f1      	b.n	8001002 <MX_UART5_Init+0x42>
    Error_Handler();
 800101e:	f7ff fcd9 	bl	80009d4 <Error_Handler>
}
 8001022:	e7f2      	b.n	800100a <MX_UART5_Init+0x4a>
 8001024:	20000788 	.word	0x20000788
 8001028:	40005000 	.word	0x40005000

0800102c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800102c:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800102e:	4817      	ldr	r0, [pc, #92]	; (800108c <MX_USART2_UART_Init+0x60>)
 8001030:	4b17      	ldr	r3, [pc, #92]	; (8001090 <MX_USART2_UART_Init+0x64>)
 8001032:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8001034:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001038:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800103a:	2300      	movs	r3, #0
 800103c:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800103e:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001040:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001042:	220c      	movs	r2, #12
 8001044:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001046:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001048:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800104a:	6203      	str	r3, [r0, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800104c:	6243      	str	r3, [r0, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800104e:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001050:	f004 fd99 	bl	8005b86 <HAL_UART_Init>
 8001054:	b970      	cbnz	r0, 8001074 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001056:	2100      	movs	r1, #0
 8001058:	480c      	ldr	r0, [pc, #48]	; (800108c <MX_USART2_UART_Init+0x60>)
 800105a:	f004 fe97 	bl	8005d8c <HAL_UARTEx_SetTxFifoThreshold>
 800105e:	b960      	cbnz	r0, 800107a <MX_USART2_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001060:	2100      	movs	r1, #0
 8001062:	480a      	ldr	r0, [pc, #40]	; (800108c <MX_USART2_UART_Init+0x60>)
 8001064:	f004 feb7 	bl	8005dd6 <HAL_UARTEx_SetRxFifoThreshold>
 8001068:	b950      	cbnz	r0, 8001080 <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800106a:	4808      	ldr	r0, [pc, #32]	; (800108c <MX_USART2_UART_Init+0x60>)
 800106c:	f004 fe6f 	bl	8005d4e <HAL_UARTEx_DisableFifoMode>
 8001070:	b948      	cbnz	r0, 8001086 <MX_USART2_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001072:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001074:	f7ff fcae 	bl	80009d4 <Error_Handler>
 8001078:	e7ed      	b.n	8001056 <MX_USART2_UART_Init+0x2a>
    Error_Handler();
 800107a:	f7ff fcab 	bl	80009d4 <Error_Handler>
 800107e:	e7ef      	b.n	8001060 <MX_USART2_UART_Init+0x34>
    Error_Handler();
 8001080:	f7ff fca8 	bl	80009d4 <Error_Handler>
 8001084:	e7f1      	b.n	800106a <MX_USART2_UART_Init+0x3e>
    Error_Handler();
 8001086:	f7ff fca5 	bl	80009d4 <Error_Handler>
}
 800108a:	e7f2      	b.n	8001072 <MX_USART2_UART_Init+0x46>
 800108c:	200005d8 	.word	0x200005d8
 8001090:	40004400 	.word	0x40004400

08001094 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001094:	b508      	push	{r3, lr}
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001096:	4817      	ldr	r0, [pc, #92]	; (80010f4 <MX_USART3_UART_Init+0x60>)
 8001098:	4b17      	ldr	r3, [pc, #92]	; (80010f8 <MX_USART3_UART_Init+0x64>)
 800109a:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 800109c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80010a0:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010a2:	2300      	movs	r3, #0
 80010a4:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80010a6:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80010a8:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80010aa:	220c      	movs	r2, #12
 80010ac:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ae:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80010b0:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010b2:	6203      	str	r3, [r0, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010b4:	6243      	str	r3, [r0, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010b6:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80010b8:	f004 fd65 	bl	8005b86 <HAL_UART_Init>
 80010bc:	b970      	cbnz	r0, 80010dc <MX_USART3_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010be:	2100      	movs	r1, #0
 80010c0:	480c      	ldr	r0, [pc, #48]	; (80010f4 <MX_USART3_UART_Init+0x60>)
 80010c2:	f004 fe63 	bl	8005d8c <HAL_UARTEx_SetTxFifoThreshold>
 80010c6:	b960      	cbnz	r0, 80010e2 <MX_USART3_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010c8:	2100      	movs	r1, #0
 80010ca:	480a      	ldr	r0, [pc, #40]	; (80010f4 <MX_USART3_UART_Init+0x60>)
 80010cc:	f004 fe83 	bl	8005dd6 <HAL_UARTEx_SetRxFifoThreshold>
 80010d0:	b950      	cbnz	r0, 80010e8 <MX_USART3_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80010d2:	4808      	ldr	r0, [pc, #32]	; (80010f4 <MX_USART3_UART_Init+0x60>)
 80010d4:	f004 fe3b 	bl	8005d4e <HAL_UARTEx_DisableFifoMode>
 80010d8:	b948      	cbnz	r0, 80010ee <MX_USART3_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80010da:	bd08      	pop	{r3, pc}
    Error_Handler();
 80010dc:	f7ff fc7a 	bl	80009d4 <Error_Handler>
 80010e0:	e7ed      	b.n	80010be <MX_USART3_UART_Init+0x2a>
    Error_Handler();
 80010e2:	f7ff fc77 	bl	80009d4 <Error_Handler>
 80010e6:	e7ef      	b.n	80010c8 <MX_USART3_UART_Init+0x34>
    Error_Handler();
 80010e8:	f7ff fc74 	bl	80009d4 <Error_Handler>
 80010ec:	e7f1      	b.n	80010d2 <MX_USART3_UART_Init+0x3e>
    Error_Handler();
 80010ee:	f7ff fc71 	bl	80009d4 <Error_Handler>
}
 80010f2:	e7f2      	b.n	80010da <MX_USART3_UART_Init+0x46>
 80010f4:	20000668 	.word	0x20000668
 80010f8:	40004800 	.word	0x40004800

080010fc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001100:	b0b6      	sub	sp, #216	; 0xd8
 8001102:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001104:	2100      	movs	r1, #0
 8001106:	9131      	str	r1, [sp, #196]	; 0xc4
 8001108:	9132      	str	r1, [sp, #200]	; 0xc8
 800110a:	9133      	str	r1, [sp, #204]	; 0xcc
 800110c:	9134      	str	r1, [sp, #208]	; 0xd0
 800110e:	9135      	str	r1, [sp, #212]	; 0xd4
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001110:	2294      	movs	r2, #148	; 0x94
 8001112:	a80c      	add	r0, sp, #48	; 0x30
 8001114:	f007 fee2 	bl	8008edc <memset>
  if(uartHandle->Instance==UART4)
 8001118:	6823      	ldr	r3, [r4, #0]
 800111a:	4a81      	ldr	r2, [pc, #516]	; (8001320 <HAL_UART_MspInit+0x224>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d00d      	beq.n	800113c <HAL_UART_MspInit+0x40>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
  else if(uartHandle->Instance==UART5)
 8001120:	4a80      	ldr	r2, [pc, #512]	; (8001324 <HAL_UART_MspInit+0x228>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d06e      	beq.n	8001204 <HAL_UART_MspInit+0x108>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 8001126:	4a80      	ldr	r2, [pc, #512]	; (8001328 <HAL_UART_MspInit+0x22c>)
 8001128:	4293      	cmp	r3, r2
 800112a:	f000 8119 	beq.w	8001360 <HAL_UART_MspInit+0x264>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(uartHandle->Instance==USART3)
 800112e:	4a7f      	ldr	r2, [pc, #508]	; (800132c <HAL_UART_MspInit+0x230>)
 8001130:	4293      	cmp	r3, r2
 8001132:	f000 818d 	beq.w	8001450 <HAL_UART_MspInit+0x354>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001136:	b036      	add	sp, #216	; 0xd8
 8001138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800113c:	2308      	movs	r3, #8
 800113e:	930c      	str	r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001140:	a80c      	add	r0, sp, #48	; 0x30
 8001142:	f003 fad3 	bl	80046ec <HAL_RCCEx_PeriphCLKConfig>
 8001146:	2800      	cmp	r0, #0
 8001148:	d153      	bne.n	80011f2 <HAL_UART_MspInit+0xf6>
    __HAL_RCC_UART4_CLK_ENABLE();
 800114a:	4b79      	ldr	r3, [pc, #484]	; (8001330 <HAL_UART_MspInit+0x234>)
 800114c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800114e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001152:	659a      	str	r2, [r3, #88]	; 0x58
 8001154:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001156:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 800115a:	9201      	str	r2, [sp, #4]
 800115c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800115e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001160:	f042 0204 	orr.w	r2, r2, #4
 8001164:	64da      	str	r2, [r3, #76]	; 0x4c
 8001166:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001168:	f003 0304 	and.w	r3, r3, #4
 800116c:	9302      	str	r3, [sp, #8]
 800116e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
 8001170:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001174:	9331      	str	r3, [sp, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001176:	2302      	movs	r3, #2
 8001178:	9332      	str	r3, [sp, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2500      	movs	r5, #0
 800117c:	9533      	str	r5, [sp, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800117e:	2303      	movs	r3, #3
 8001180:	9334      	str	r3, [sp, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001182:	2308      	movs	r3, #8
 8001184:	9335      	str	r3, [sp, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001186:	a931      	add	r1, sp, #196	; 0xc4
 8001188:	486a      	ldr	r0, [pc, #424]	; (8001334 <HAL_UART_MspInit+0x238>)
 800118a:	f000 febf 	bl	8001f0c <HAL_GPIO_Init>
    hdma_uart4_tx.Instance = DMA2_Channel2;
 800118e:	486a      	ldr	r0, [pc, #424]	; (8001338 <HAL_UART_MspInit+0x23c>)
 8001190:	4b6a      	ldr	r3, [pc, #424]	; (800133c <HAL_UART_MspInit+0x240>)
 8001192:	6003      	str	r3, [r0, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8001194:	231f      	movs	r3, #31
 8001196:	6043      	str	r3, [r0, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001198:	2310      	movs	r3, #16
 800119a:	6083      	str	r3, [r0, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800119c:	60c5      	str	r5, [r0, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800119e:	2380      	movs	r3, #128	; 0x80
 80011a0:	6103      	str	r3, [r0, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011a2:	6145      	str	r5, [r0, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011a4:	6185      	str	r5, [r0, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 80011a6:	61c5      	str	r5, [r0, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80011a8:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 80011aa:	f000 fd25 	bl	8001bf8 <HAL_DMA_Init>
 80011ae:	bb18      	cbnz	r0, 80011f8 <HAL_UART_MspInit+0xfc>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 80011b0:	4b61      	ldr	r3, [pc, #388]	; (8001338 <HAL_UART_MspInit+0x23c>)
 80011b2:	67a3      	str	r3, [r4, #120]	; 0x78
 80011b4:	629c      	str	r4, [r3, #40]	; 0x28
    hdma_uart4_rx.Instance = DMA2_Channel3;
 80011b6:	4862      	ldr	r0, [pc, #392]	; (8001340 <HAL_UART_MspInit+0x244>)
 80011b8:	4b62      	ldr	r3, [pc, #392]	; (8001344 <HAL_UART_MspInit+0x248>)
 80011ba:	6003      	str	r3, [r0, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 80011bc:	231e      	movs	r3, #30
 80011be:	6043      	str	r3, [r0, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011c0:	2300      	movs	r3, #0
 80011c2:	6083      	str	r3, [r0, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011c4:	60c3      	str	r3, [r0, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80011c6:	2280      	movs	r2, #128	; 0x80
 80011c8:	6102      	str	r2, [r0, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011ca:	6143      	str	r3, [r0, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011cc:	6183      	str	r3, [r0, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 80011ce:	2220      	movs	r2, #32
 80011d0:	61c2      	str	r2, [r0, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80011d2:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80011d4:	f000 fd10 	bl	8001bf8 <HAL_DMA_Init>
 80011d8:	b988      	cbnz	r0, 80011fe <HAL_UART_MspInit+0x102>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 80011da:	4b59      	ldr	r3, [pc, #356]	; (8001340 <HAL_UART_MspInit+0x244>)
 80011dc:	67e3      	str	r3, [r4, #124]	; 0x7c
 80011de:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80011e0:	2200      	movs	r2, #0
 80011e2:	4611      	mov	r1, r2
 80011e4:	2034      	movs	r0, #52	; 0x34
 80011e6:	f000 fc4d 	bl	8001a84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80011ea:	2034      	movs	r0, #52	; 0x34
 80011ec:	f000 fc82 	bl	8001af4 <HAL_NVIC_EnableIRQ>
 80011f0:	e7a1      	b.n	8001136 <HAL_UART_MspInit+0x3a>
      Error_Handler();
 80011f2:	f7ff fbef 	bl	80009d4 <Error_Handler>
 80011f6:	e7a8      	b.n	800114a <HAL_UART_MspInit+0x4e>
      Error_Handler();
 80011f8:	f7ff fbec 	bl	80009d4 <Error_Handler>
 80011fc:	e7d8      	b.n	80011b0 <HAL_UART_MspInit+0xb4>
      Error_Handler();
 80011fe:	f7ff fbe9 	bl	80009d4 <Error_Handler>
 8001202:	e7ea      	b.n	80011da <HAL_UART_MspInit+0xde>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001204:	2310      	movs	r3, #16
 8001206:	930c      	str	r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001208:	a80c      	add	r0, sp, #48	; 0x30
 800120a:	f003 fa6f 	bl	80046ec <HAL_RCCEx_PeriphCLKConfig>
 800120e:	2800      	cmp	r0, #0
 8001210:	d17c      	bne.n	800130c <HAL_UART_MspInit+0x210>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001212:	4b47      	ldr	r3, [pc, #284]	; (8001330 <HAL_UART_MspInit+0x234>)
 8001214:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001216:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800121a:	659a      	str	r2, [r3, #88]	; 0x58
 800121c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800121e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001222:	9203      	str	r2, [sp, #12]
 8001224:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001226:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001228:	f042 0204 	orr.w	r2, r2, #4
 800122c:	64da      	str	r2, [r3, #76]	; 0x4c
 800122e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001230:	f002 0204 	and.w	r2, r2, #4
 8001234:	9204      	str	r2, [sp, #16]
 8001236:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001238:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800123a:	f042 0208 	orr.w	r2, r2, #8
 800123e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001240:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001242:	f002 0208 	and.w	r2, r2, #8
 8001246:	9205      	str	r2, [sp, #20]
 8001248:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800124a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800124c:	f042 0202 	orr.w	r2, r2, #2
 8001250:	64da      	str	r2, [r3, #76]	; 0x4c
 8001252:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001254:	f003 0302 	and.w	r3, r3, #2
 8001258:	9306      	str	r3, [sp, #24]
 800125a:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = LTE_U5_TX_Pin;
 800125c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001260:	9331      	str	r3, [sp, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001262:	f04f 0802 	mov.w	r8, #2
 8001266:	f8cd 80c8 	str.w	r8, [sp, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126a:	2500      	movs	r5, #0
 800126c:	9533      	str	r5, [sp, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800126e:	2703      	movs	r7, #3
 8001270:	9734      	str	r7, [sp, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001272:	2608      	movs	r6, #8
 8001274:	9635      	str	r6, [sp, #212]	; 0xd4
    HAL_GPIO_Init(LTE_U5_TX_GPIO_Port, &GPIO_InitStruct);
 8001276:	a931      	add	r1, sp, #196	; 0xc4
 8001278:	482e      	ldr	r0, [pc, #184]	; (8001334 <HAL_UART_MspInit+0x238>)
 800127a:	f000 fe47 	bl	8001f0c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LTE_U5_RX_Pin;
 800127e:	2304      	movs	r3, #4
 8001280:	9331      	str	r3, [sp, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001282:	f8cd 80c8 	str.w	r8, [sp, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001286:	9533      	str	r5, [sp, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001288:	9734      	str	r7, [sp, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800128a:	9635      	str	r6, [sp, #212]	; 0xd4
    HAL_GPIO_Init(LTE_U5_RX_GPIO_Port, &GPIO_InitStruct);
 800128c:	a931      	add	r1, sp, #196	; 0xc4
 800128e:	482e      	ldr	r0, [pc, #184]	; (8001348 <HAL_UART_MspInit+0x24c>)
 8001290:	f000 fe3c 	bl	8001f0c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LTE_U5_RTS_Pin|LTE_U5_CTS_Pin;
 8001294:	2330      	movs	r3, #48	; 0x30
 8001296:	9331      	str	r3, [sp, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001298:	f8cd 80c8 	str.w	r8, [sp, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129c:	9533      	str	r5, [sp, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800129e:	9734      	str	r7, [sp, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80012a0:	9635      	str	r6, [sp, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a2:	a931      	add	r1, sp, #196	; 0xc4
 80012a4:	4829      	ldr	r0, [pc, #164]	; (800134c <HAL_UART_MspInit+0x250>)
 80012a6:	f000 fe31 	bl	8001f0c <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Channel1;
 80012aa:	4829      	ldr	r0, [pc, #164]	; (8001350 <HAL_UART_MspInit+0x254>)
 80012ac:	4b29      	ldr	r3, [pc, #164]	; (8001354 <HAL_UART_MspInit+0x258>)
 80012ae:	6003      	str	r3, [r0, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 80012b0:	2320      	movs	r3, #32
 80012b2:	6043      	str	r3, [r0, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012b4:	6085      	str	r5, [r0, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012b6:	60c5      	str	r5, [r0, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80012b8:	2280      	movs	r2, #128	; 0x80
 80012ba:	6102      	str	r2, [r0, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012bc:	6145      	str	r5, [r0, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012be:	6185      	str	r5, [r0, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 80012c0:	61c3      	str	r3, [r0, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 80012c2:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 80012c4:	f000 fc98 	bl	8001bf8 <HAL_DMA_Init>
 80012c8:	bb18      	cbnz	r0, 8001312 <HAL_UART_MspInit+0x216>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 80012ca:	4b21      	ldr	r3, [pc, #132]	; (8001350 <HAL_UART_MspInit+0x254>)
 80012cc:	67e3      	str	r3, [r4, #124]	; 0x7c
 80012ce:	629c      	str	r4, [r3, #40]	; 0x28
    hdma_uart5_tx.Instance = DMA1_Channel2;
 80012d0:	4821      	ldr	r0, [pc, #132]	; (8001358 <HAL_UART_MspInit+0x25c>)
 80012d2:	4b22      	ldr	r3, [pc, #136]	; (800135c <HAL_UART_MspInit+0x260>)
 80012d4:	6003      	str	r3, [r0, #0]
    hdma_uart5_tx.Init.Request = DMA_REQUEST_UART5_TX;
 80012d6:	2321      	movs	r3, #33	; 0x21
 80012d8:	6043      	str	r3, [r0, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012da:	2310      	movs	r3, #16
 80012dc:	6083      	str	r3, [r0, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012de:	2300      	movs	r3, #0
 80012e0:	60c3      	str	r3, [r0, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 80012e2:	2280      	movs	r2, #128	; 0x80
 80012e4:	6102      	str	r2, [r0, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012e6:	6143      	str	r3, [r0, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012e8:	6183      	str	r3, [r0, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 80012ea:	61c3      	str	r3, [r0, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 80012ec:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 80012ee:	f000 fc83 	bl	8001bf8 <HAL_DMA_Init>
 80012f2:	b988      	cbnz	r0, 8001318 <HAL_UART_MspInit+0x21c>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 80012f4:	4b18      	ldr	r3, [pc, #96]	; (8001358 <HAL_UART_MspInit+0x25c>)
 80012f6:	67a3      	str	r3, [r4, #120]	; 0x78
 80012f8:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80012fa:	2200      	movs	r2, #0
 80012fc:	4611      	mov	r1, r2
 80012fe:	2035      	movs	r0, #53	; 0x35
 8001300:	f000 fbc0 	bl	8001a84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001304:	2035      	movs	r0, #53	; 0x35
 8001306:	f000 fbf5 	bl	8001af4 <HAL_NVIC_EnableIRQ>
 800130a:	e714      	b.n	8001136 <HAL_UART_MspInit+0x3a>
      Error_Handler();
 800130c:	f7ff fb62 	bl	80009d4 <Error_Handler>
 8001310:	e77f      	b.n	8001212 <HAL_UART_MspInit+0x116>
      Error_Handler();
 8001312:	f7ff fb5f 	bl	80009d4 <Error_Handler>
 8001316:	e7d8      	b.n	80012ca <HAL_UART_MspInit+0x1ce>
      Error_Handler();
 8001318:	f7ff fb5c 	bl	80009d4 <Error_Handler>
 800131c:	e7ea      	b.n	80012f4 <HAL_UART_MspInit+0x1f8>
 800131e:	bf00      	nop
 8001320:	40004c00 	.word	0x40004c00
 8001324:	40005000 	.word	0x40005000
 8001328:	40004400 	.word	0x40004400
 800132c:	40004800 	.word	0x40004800
 8001330:	40021000 	.word	0x40021000
 8001334:	48000800 	.word	0x48000800
 8001338:	20000338 	.word	0x20000338
 800133c:	4002041c 	.word	0x4002041c
 8001340:	200002d8 	.word	0x200002d8
 8001344:	40020430 	.word	0x40020430
 8001348:	48000c00 	.word	0x48000c00
 800134c:	48000400 	.word	0x48000400
 8001350:	20000398 	.word	0x20000398
 8001354:	40020008 	.word	0x40020008
 8001358:	200003f8 	.word	0x200003f8
 800135c:	4002001c 	.word	0x4002001c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001360:	2302      	movs	r3, #2
 8001362:	930c      	str	r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001364:	a80c      	add	r0, sp, #48	; 0x30
 8001366:	f003 f9c1 	bl	80046ec <HAL_RCCEx_PeriphCLKConfig>
 800136a:	2800      	cmp	r0, #0
 800136c:	d167      	bne.n	800143e <HAL_UART_MspInit+0x342>
    __HAL_RCC_USART2_CLK_ENABLE();
 800136e:	4b6a      	ldr	r3, [pc, #424]	; (8001518 <HAL_UART_MspInit+0x41c>)
 8001370:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001372:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001376:	659a      	str	r2, [r3, #88]	; 0x58
 8001378:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800137a:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800137e:	9207      	str	r2, [sp, #28]
 8001380:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001382:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001384:	f042 0201 	orr.w	r2, r2, #1
 8001388:	64da      	str	r2, [r3, #76]	; 0x4c
 800138a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800138c:	f002 0201 	and.w	r2, r2, #1
 8001390:	9208      	str	r2, [sp, #32]
 8001392:	9a08      	ldr	r2, [sp, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001394:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001396:	f042 0208 	orr.w	r2, r2, #8
 800139a:	64da      	str	r2, [r3, #76]	; 0x4c
 800139c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800139e:	f003 0308 	and.w	r3, r3, #8
 80013a2:	9309      	str	r3, [sp, #36]	; 0x24
 80013a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80013a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013aa:	9331      	str	r3, [sp, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ac:	2702      	movs	r7, #2
 80013ae:	9732      	str	r7, [sp, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2500      	movs	r5, #0
 80013b2:	9533      	str	r5, [sp, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b4:	2603      	movs	r6, #3
 80013b6:	9634      	str	r6, [sp, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80013b8:	9635      	str	r6, [sp, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ba:	a931      	add	r1, sp, #196	; 0xc4
 80013bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013c0:	f000 fda4 	bl	8001f0c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80013c4:	2320      	movs	r3, #32
 80013c6:	9331      	str	r3, [sp, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c8:	9732      	str	r7, [sp, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	9533      	str	r5, [sp, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013cc:	9634      	str	r6, [sp, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013ce:	2307      	movs	r3, #7
 80013d0:	9335      	str	r3, [sp, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013d2:	a931      	add	r1, sp, #196	; 0xc4
 80013d4:	4851      	ldr	r0, [pc, #324]	; (800151c <HAL_UART_MspInit+0x420>)
 80013d6:	f000 fd99 	bl	8001f0c <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80013da:	4851      	ldr	r0, [pc, #324]	; (8001520 <HAL_UART_MspInit+0x424>)
 80013dc:	4b51      	ldr	r3, [pc, #324]	; (8001524 <HAL_UART_MspInit+0x428>)
 80013de:	6003      	str	r3, [r0, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80013e0:	231b      	movs	r3, #27
 80013e2:	6043      	str	r3, [r0, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013e4:	2310      	movs	r3, #16
 80013e6:	6083      	str	r3, [r0, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013e8:	60c5      	str	r5, [r0, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80013ea:	2380      	movs	r3, #128	; 0x80
 80013ec:	6103      	str	r3, [r0, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013ee:	6145      	str	r5, [r0, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013f0:	6185      	str	r5, [r0, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80013f2:	61c5      	str	r5, [r0, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80013f4:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80013f6:	f000 fbff 	bl	8001bf8 <HAL_DMA_Init>
 80013fa:	bb18      	cbnz	r0, 8001444 <HAL_UART_MspInit+0x348>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80013fc:	4b48      	ldr	r3, [pc, #288]	; (8001520 <HAL_UART_MspInit+0x424>)
 80013fe:	67a3      	str	r3, [r4, #120]	; 0x78
 8001400:	629c      	str	r4, [r3, #40]	; 0x28
    hdma_usart2_rx.Instance = DMA2_Channel1;
 8001402:	4849      	ldr	r0, [pc, #292]	; (8001528 <HAL_UART_MspInit+0x42c>)
 8001404:	4b49      	ldr	r3, [pc, #292]	; (800152c <HAL_UART_MspInit+0x430>)
 8001406:	6003      	str	r3, [r0, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001408:	231a      	movs	r3, #26
 800140a:	6043      	str	r3, [r0, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800140c:	2300      	movs	r3, #0
 800140e:	6083      	str	r3, [r0, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001410:	60c3      	str	r3, [r0, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001412:	2280      	movs	r2, #128	; 0x80
 8001414:	6102      	str	r2, [r0, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001416:	6143      	str	r3, [r0, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001418:	6183      	str	r3, [r0, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800141a:	2220      	movs	r2, #32
 800141c:	61c2      	str	r2, [r0, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800141e:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001420:	f000 fbea 	bl	8001bf8 <HAL_DMA_Init>
 8001424:	b988      	cbnz	r0, 800144a <HAL_UART_MspInit+0x34e>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001426:	4b40      	ldr	r3, [pc, #256]	; (8001528 <HAL_UART_MspInit+0x42c>)
 8001428:	67e3      	str	r3, [r4, #124]	; 0x7c
 800142a:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800142c:	2200      	movs	r2, #0
 800142e:	4611      	mov	r1, r2
 8001430:	2026      	movs	r0, #38	; 0x26
 8001432:	f000 fb27 	bl	8001a84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001436:	2026      	movs	r0, #38	; 0x26
 8001438:	f000 fb5c 	bl	8001af4 <HAL_NVIC_EnableIRQ>
 800143c:	e67b      	b.n	8001136 <HAL_UART_MspInit+0x3a>
      Error_Handler();
 800143e:	f7ff fac9 	bl	80009d4 <Error_Handler>
 8001442:	e794      	b.n	800136e <HAL_UART_MspInit+0x272>
      Error_Handler();
 8001444:	f7ff fac6 	bl	80009d4 <Error_Handler>
 8001448:	e7d8      	b.n	80013fc <HAL_UART_MspInit+0x300>
      Error_Handler();
 800144a:	f7ff fac3 	bl	80009d4 <Error_Handler>
 800144e:	e7ea      	b.n	8001426 <HAL_UART_MspInit+0x32a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001450:	2304      	movs	r3, #4
 8001452:	930c      	str	r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001454:	a80c      	add	r0, sp, #48	; 0x30
 8001456:	f003 f949 	bl	80046ec <HAL_RCCEx_PeriphCLKConfig>
 800145a:	2800      	cmp	r0, #0
 800145c:	d152      	bne.n	8001504 <HAL_UART_MspInit+0x408>
    __HAL_RCC_USART3_CLK_ENABLE();
 800145e:	4b2e      	ldr	r3, [pc, #184]	; (8001518 <HAL_UART_MspInit+0x41c>)
 8001460:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001462:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001466:	659a      	str	r2, [r3, #88]	; 0x58
 8001468:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800146a:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800146e:	920a      	str	r2, [sp, #40]	; 0x28
 8001470:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001472:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001474:	f042 0204 	orr.w	r2, r2, #4
 8001478:	64da      	str	r2, [r3, #76]	; 0x4c
 800147a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800147c:	f003 0304 	and.w	r3, r3, #4
 8001480:	930b      	str	r3, [sp, #44]	; 0x2c
 8001482:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Pin = NXP_TX_Pin|NXP_RX_Pin;
 8001484:	2330      	movs	r3, #48	; 0x30
 8001486:	9331      	str	r3, [sp, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001488:	2302      	movs	r3, #2
 800148a:	9332      	str	r3, [sp, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2500      	movs	r5, #0
 800148e:	9533      	str	r5, [sp, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001490:	2303      	movs	r3, #3
 8001492:	9334      	str	r3, [sp, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001494:	2307      	movs	r3, #7
 8001496:	9335      	str	r3, [sp, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001498:	a931      	add	r1, sp, #196	; 0xc4
 800149a:	4825      	ldr	r0, [pc, #148]	; (8001530 <HAL_UART_MspInit+0x434>)
 800149c:	f000 fd36 	bl	8001f0c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 80014a0:	4824      	ldr	r0, [pc, #144]	; (8001534 <HAL_UART_MspInit+0x438>)
 80014a2:	4b25      	ldr	r3, [pc, #148]	; (8001538 <HAL_UART_MspInit+0x43c>)
 80014a4:	6003      	str	r3, [r0, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80014a6:	231c      	movs	r3, #28
 80014a8:	6043      	str	r3, [r0, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014aa:	6085      	str	r5, [r0, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014ac:	60c5      	str	r5, [r0, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014ae:	2380      	movs	r3, #128	; 0x80
 80014b0:	6103      	str	r3, [r0, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014b2:	6145      	str	r5, [r0, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014b4:	6185      	str	r5, [r0, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80014b6:	2320      	movs	r3, #32
 80014b8:	61c3      	str	r3, [r0, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80014ba:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80014bc:	f000 fb9c 	bl	8001bf8 <HAL_DMA_Init>
 80014c0:	bb18      	cbnz	r0, 800150a <HAL_UART_MspInit+0x40e>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80014c2:	4b1c      	ldr	r3, [pc, #112]	; (8001534 <HAL_UART_MspInit+0x438>)
 80014c4:	67e3      	str	r3, [r4, #124]	; 0x7c
 80014c6:	629c      	str	r4, [r3, #40]	; 0x28
    hdma_usart3_tx.Instance = DMA1_Channel4;
 80014c8:	481c      	ldr	r0, [pc, #112]	; (800153c <HAL_UART_MspInit+0x440>)
 80014ca:	4b1d      	ldr	r3, [pc, #116]	; (8001540 <HAL_UART_MspInit+0x444>)
 80014cc:	6003      	str	r3, [r0, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80014ce:	231d      	movs	r3, #29
 80014d0:	6043      	str	r3, [r0, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014d2:	2310      	movs	r3, #16
 80014d4:	6083      	str	r3, [r0, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014d6:	2300      	movs	r3, #0
 80014d8:	60c3      	str	r3, [r0, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80014da:	2280      	movs	r2, #128	; 0x80
 80014dc:	6102      	str	r2, [r0, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014de:	6143      	str	r3, [r0, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014e0:	6183      	str	r3, [r0, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80014e2:	61c3      	str	r3, [r0, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80014e4:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80014e6:	f000 fb87 	bl	8001bf8 <HAL_DMA_Init>
 80014ea:	b988      	cbnz	r0, 8001510 <HAL_UART_MspInit+0x414>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80014ec:	4b13      	ldr	r3, [pc, #76]	; (800153c <HAL_UART_MspInit+0x440>)
 80014ee:	67a3      	str	r3, [r4, #120]	; 0x78
 80014f0:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80014f2:	2200      	movs	r2, #0
 80014f4:	4611      	mov	r1, r2
 80014f6:	2027      	movs	r0, #39	; 0x27
 80014f8:	f000 fac4 	bl	8001a84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80014fc:	2027      	movs	r0, #39	; 0x27
 80014fe:	f000 faf9 	bl	8001af4 <HAL_NVIC_EnableIRQ>
}
 8001502:	e618      	b.n	8001136 <HAL_UART_MspInit+0x3a>
      Error_Handler();
 8001504:	f7ff fa66 	bl	80009d4 <Error_Handler>
 8001508:	e7a9      	b.n	800145e <HAL_UART_MspInit+0x362>
      Error_Handler();
 800150a:	f7ff fa63 	bl	80009d4 <Error_Handler>
 800150e:	e7d8      	b.n	80014c2 <HAL_UART_MspInit+0x3c6>
      Error_Handler();
 8001510:	f7ff fa60 	bl	80009d4 <Error_Handler>
 8001514:	e7ea      	b.n	80014ec <HAL_UART_MspInit+0x3f0>
 8001516:	bf00      	nop
 8001518:	40021000 	.word	0x40021000
 800151c:	48000c00 	.word	0x48000c00
 8001520:	200004b8 	.word	0x200004b8
 8001524:	40020080 	.word	0x40020080
 8001528:	20000458 	.word	0x20000458
 800152c:	40020408 	.word	0x40020408
 8001530:	48000800 	.word	0x48000800
 8001534:	20000518 	.word	0x20000518
 8001538:	40020030 	.word	0x40020030
 800153c:	20000578 	.word	0x20000578
 8001540:	40020044 	.word	0x40020044

08001544 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001544:	f8df d034 	ldr.w	sp, [pc, #52]	; 800157c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001548:	f7ff fcfc 	bl	8000f44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800154c:	480c      	ldr	r0, [pc, #48]	; (8001580 <LoopForever+0x6>)
  ldr r1, =_edata
 800154e:	490d      	ldr	r1, [pc, #52]	; (8001584 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001550:	4a0d      	ldr	r2, [pc, #52]	; (8001588 <LoopForever+0xe>)
  movs r3, #0
 8001552:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001554:	e002      	b.n	800155c <LoopCopyDataInit>

08001556 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001556:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001558:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800155a:	3304      	adds	r3, #4

0800155c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800155c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800155e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001560:	d3f9      	bcc.n	8001556 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001562:	4a0a      	ldr	r2, [pc, #40]	; (800158c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001564:	4c0a      	ldr	r4, [pc, #40]	; (8001590 <LoopForever+0x16>)
  movs r3, #0
 8001566:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001568:	e001      	b.n	800156e <LoopFillZerobss>

0800156a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800156a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800156c:	3204      	adds	r2, #4

0800156e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800156e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001570:	d3fb      	bcc.n	800156a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001572:	f007 fd3d 	bl	8008ff0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001576:	f7ff fa68 	bl	8000a4a <main>

0800157a <LoopForever>:

LoopForever:
    b LoopForever
 800157a:	e7fe      	b.n	800157a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800157c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001580:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001584:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001588:	08009928 	.word	0x08009928
  ldr r2, =_sbss
 800158c:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001590:	20002080 	.word	0x20002080

08001594 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001594:	e7fe      	b.n	8001594 <ADC1_IRQHandler>

08001596 <OSPI_WriteEnable>:
}



void OSPI_WriteEnable(OSPI_HandleTypeDef *hospi)
{
 8001596:	b510      	push	{r4, lr}
 8001598:	b096      	sub	sp, #88	; 0x58
 800159a:	4604      	mov	r4, r0

  uint8_t reg[2];

  /* Enable write operations ------------------------------------------ */

 sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800159c:	2300      	movs	r3, #0
 800159e:	9302      	str	r3, [sp, #8]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 80015a0:	9303      	str	r3, [sp, #12]
  sCommand.Instruction        = WRITE_ENABLE_CMD;
 80015a2:	2206      	movs	r2, #6
 80015a4:	9204      	str	r2, [sp, #16]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 80015a6:	2201      	movs	r2, #1
 80015a8:	9205      	str	r2, [sp, #20]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 80015aa:	9306      	str	r3, [sp, #24]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80015ac:	9307      	str	r3, [sp, #28]
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 80015ae:	9309      	str	r3, [sp, #36]	; 0x24
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80015b0:	930d      	str	r3, [sp, #52]	; 0x34
  sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 80015b2:	9310      	str	r3, [sp, #64]	; 0x40
  sCommand.DummyCycles        = 0;
 80015b4:	9313      	str	r3, [sp, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80015b6:	9314      	str	r3, [sp, #80]	; 0x50
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80015b8:	9315      	str	r3, [sp, #84]	; 0x54


  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80015ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80015be:	a902      	add	r1, sp, #8
 80015c0:	f001 fd3c 	bl	800303c <HAL_OSPI_Command>
 80015c4:	b988      	cbnz	r0, 80015ea <OSPI_WriteEnable+0x54>
  }



  /* Configure automatic polling mode to wait for write enabling ---- */
  sCommand.Instruction    = GET_FEATURES;
 80015c6:	230f      	movs	r3, #15
 80015c8:	9304      	str	r3, [sp, #16]
  sCommand.Address        = 0xC0;
 80015ca:	23c0      	movs	r3, #192	; 0xc0
 80015cc:	9308      	str	r3, [sp, #32]
  sCommand.AddressMode    = HAL_OSPI_ADDRESS_1_LINE;
 80015ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015d2:	9309      	str	r3, [sp, #36]	; 0x24
  sCommand.AddressSize    = HAL_OSPI_ADDRESS_8_BITS;
 80015d4:	2300      	movs	r3, #0
 80015d6:	930a      	str	r3, [sp, #40]	; 0x28
  sCommand.AddressDtrMode = HAL_OSPI_ADDRESS_DTR_DISABLE;
 80015d8:	930b      	str	r3, [sp, #44]	; 0x2c
  sCommand.DataMode       = HAL_OSPI_DATA_1_LINE;
 80015da:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80015de:	9210      	str	r2, [sp, #64]	; 0x40
  sCommand.DataDtrMode    = HAL_OSPI_DATA_DTR_DISABLE;
 80015e0:	9312      	str	r3, [sp, #72]	; 0x48
  sCommand.NbData         = 1;
 80015e2:	2201      	movs	r2, #1
 80015e4:	9211      	str	r2, [sp, #68]	; 0x44
  sCommand.DummyCycles    = 0;//DUMMY_CLOCK_CYCLES_READ_REG;
 80015e6:	9313      	str	r3, [sp, #76]	; 0x4c
 80015e8:	e00a      	b.n	8001600 <OSPI_WriteEnable+0x6a>
    Error_Handler();
 80015ea:	f7ff f9f3 	bl	80009d4 <Error_Handler>
 80015ee:	e7ea      	b.n	80015c6 <OSPI_WriteEnable+0x30>
  do//NOt sure if to wait here or not
  {

    if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
    {
      Error_Handler();
 80015f0:	f7ff f9f0 	bl	80009d4 <Error_Handler>
 80015f4:	e00c      	b.n	8001610 <OSPI_WriteEnable+0x7a>

    if (HAL_OSPI_Receive(hospi, reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
    {
      Error_Handler();
    }
  } while((reg[0] & WRITE_ENABLE_MASK_VALUE) != WRITE_ENABLE_MATCH_VALUE);//when matches x02, we know write enable is ready
 80015f6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80015fa:	f013 0f02 	tst.w	r3, #2
 80015fe:	d112      	bne.n	8001626 <OSPI_WriteEnable+0x90>
    if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001600:	f241 3288 	movw	r2, #5000	; 0x1388
 8001604:	a902      	add	r1, sp, #8
 8001606:	4620      	mov	r0, r4
 8001608:	f001 fd18 	bl	800303c <HAL_OSPI_Command>
 800160c:	2800      	cmp	r0, #0
 800160e:	d1ef      	bne.n	80015f0 <OSPI_WriteEnable+0x5a>
    if (HAL_OSPI_Receive(hospi, reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001610:	f241 3288 	movw	r2, #5000	; 0x1388
 8001614:	a901      	add	r1, sp, #4
 8001616:	4620      	mov	r0, r4
 8001618:	f001 fdb9 	bl	800318e <HAL_OSPI_Receive>
 800161c:	2800      	cmp	r0, #0
 800161e:	d0ea      	beq.n	80015f6 <OSPI_WriteEnable+0x60>
      Error_Handler();
 8001620:	f7ff f9d8 	bl	80009d4 <Error_Handler>
 8001624:	e7e7      	b.n	80015f6 <OSPI_WriteEnable+0x60>


}
 8001626:	b016      	add	sp, #88	; 0x58
 8001628:	bd10      	pop	{r4, pc}
	...

0800162c <OSPI_Erase_Block>:

}


void OSPI_Erase_Block(OSPI_HandleTypeDef *hospi)//address needed
{
 800162c:	b500      	push	{lr}
 800162e:	b095      	sub	sp, #84	; 0x54
	  OSPI_RegularCmdTypeDef  sCommand;

	  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8001630:	2300      	movs	r3, #0
 8001632:	9300      	str	r3, [sp, #0]
	  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8001634:	9301      	str	r3, [sp, #4]
	  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8001636:	2201      	movs	r2, #1
 8001638:	9203      	str	r2, [sp, #12]
	  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 800163a:	9304      	str	r3, [sp, #16]
	  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800163c:	9305      	str	r3, [sp, #20]
	  sCommand.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 800163e:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001642:	9208      	str	r2, [sp, #32]
	  //sCommand.AddressSize        = HAL_OSPI_ADDRESS_24_BITS;
	  sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 8001644:	9309      	str	r3, [sp, #36]	; 0x24
	  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8001646:	930b      	str	r3, [sp, #44]	; 0x2c
	  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 8001648:	9310      	str	r3, [sp, #64]	; 0x40
	  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800164a:	9312      	str	r3, [sp, #72]	; 0x48
	  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800164c:	9313      	str	r3, [sp, #76]	; 0x4c

	  sCommand.Instruction =  0xD8;
 800164e:	22d8      	movs	r2, #216	; 0xd8
 8001650:	9202      	str	r2, [sp, #8]
	  sCommand.AddressMode = HAL_OSPI_ADDRESS_1_LINE;
 8001652:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001656:	9207      	str	r2, [sp, #28]
	  sCommand.Address     = ADDR;//address;
 8001658:	4a08      	ldr	r2, [pc, #32]	; (800167c <OSPI_Erase_Block+0x50>)
 800165a:	6812      	ldr	r2, [r2, #0]
 800165c:	9206      	str	r2, [sp, #24]
	  sCommand.DataMode    = HAL_OSPI_DATA_NONE;
 800165e:	930e      	str	r3, [sp, #56]	; 0x38
	  sCommand.DummyCycles = 0;
 8001660:	9311      	str	r3, [sp, #68]	; 0x44


	  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001662:	f241 3288 	movw	r2, #5000	; 0x1388
 8001666:	4669      	mov	r1, sp
 8001668:	f001 fce8 	bl	800303c <HAL_OSPI_Command>
 800166c:	b910      	cbnz	r0, 8001674 <OSPI_Erase_Block+0x48>
        Error_Handler();

      }


}
 800166e:	b015      	add	sp, #84	; 0x54
 8001670:	f85d fb04 	ldr.w	pc, [sp], #4
        Error_Handler();
 8001674:	f7ff f9ae 	bl	80009d4 <Error_Handler>
}
 8001678:	e7f9      	b.n	800166e <OSPI_Erase_Block+0x42>
 800167a:	bf00      	nop
 800167c:	20000818 	.word	0x20000818

08001680 <OSPI_Get_Features>:

void OSPI_Get_Features(OSPI_HandleTypeDef *hospi)
{
 8001680:	b510      	push	{r4, lr}
 8001682:	b096      	sub	sp, #88	; 0x58
 8001684:	4604      	mov	r4, r0
	  OSPI_RegularCmdTypeDef  sCommand;
	  uint8_t reg[2];//2 bytes

	   sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8001686:	2300      	movs	r3, #0
 8001688:	9302      	str	r3, [sp, #8]
	   sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 800168a:	9303      	str	r3, [sp, #12]
	   sCommand.Instruction        = GET_FEATURES;
 800168c:	220f      	movs	r2, #15
 800168e:	9204      	str	r2, [sp, #16]
	   sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8001690:	2201      	movs	r2, #1
 8001692:	9205      	str	r2, [sp, #20]
	   sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8001694:	9306      	str	r3, [sp, #24]
	   sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8001696:	9307      	str	r3, [sp, #28]
	   sCommand.Address            = 0xC0;
 8001698:	21c0      	movs	r1, #192	; 0xc0
 800169a:	9108      	str	r1, [sp, #32]
	   sCommand.AddressMode        = HAL_OSPI_ADDRESS_1_LINE;
 800169c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016a0:	9109      	str	r1, [sp, #36]	; 0x24
	   sCommand.AddressSize        = HAL_OSPI_ADDRESS_8_BITS;
 80016a2:	930a      	str	r3, [sp, #40]	; 0x28
	   sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 80016a4:	930b      	str	r3, [sp, #44]	; 0x2c
	   sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80016a6:	930d      	str	r3, [sp, #52]	; 0x34
	   sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 80016a8:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 80016ac:	9110      	str	r1, [sp, #64]	; 0x40
	   sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 80016ae:	9312      	str	r3, [sp, #72]	; 0x48
	   sCommand.NbData             = 1; //1 byte
 80016b0:	9211      	str	r2, [sp, #68]	; 0x44
	   sCommand.DummyCycles        = 0;//DUMMY_CLOCK_CYCLES_READ_REG;
 80016b2:	9313      	str	r3, [sp, #76]	; 0x4c
	   sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80016b4:	9314      	str	r3, [sp, #80]	; 0x50
	   sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80016b6:	9315      	str	r3, [sp, #84]	; 0x54
 80016b8:	e007      	b.n	80016ca <OSPI_Get_Features+0x4a>
	 //  CS_LOW();
      do//Thimk that the autopolling can be use dthe same as this
       {
          if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
          {
            Error_Handler();
 80016ba:	f7ff f98b 	bl	80009d4 <Error_Handler>
 80016be:	e00c      	b.n	80016da <OSPI_Get_Features+0x5a>

          if (HAL_OSPI_Receive(hospi, reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
          {
            Error_Handler();
          }
        } while((reg[0] & MEMORY_READY_MASK_VALUE) != MEMORY_READY_MATCH_VALUE);//while not x00
 80016c0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80016c4:	f013 0f01 	tst.w	r3, #1
 80016c8:	d012      	beq.n	80016f0 <OSPI_Get_Features+0x70>
          if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80016ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ce:	a902      	add	r1, sp, #8
 80016d0:	4620      	mov	r0, r4
 80016d2:	f001 fcb3 	bl	800303c <HAL_OSPI_Command>
 80016d6:	2800      	cmp	r0, #0
 80016d8:	d1ef      	bne.n	80016ba <OSPI_Get_Features+0x3a>
          if (HAL_OSPI_Receive(hospi, reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80016da:	f241 3288 	movw	r2, #5000	; 0x1388
 80016de:	a901      	add	r1, sp, #4
 80016e0:	4620      	mov	r0, r4
 80016e2:	f001 fd54 	bl	800318e <HAL_OSPI_Receive>
 80016e6:	2800      	cmp	r0, #0
 80016e8:	d0ea      	beq.n	80016c0 <OSPI_Get_Features+0x40>
            Error_Handler();
 80016ea:	f7ff f973 	bl	80009d4 <Error_Handler>
 80016ee:	e7e7      	b.n	80016c0 <OSPI_Get_Features+0x40>
      //CS_HIGH();

}
 80016f0:	b016      	add	sp, #88	; 0x58
 80016f2:	bd10      	pop	{r4, pc}

080016f4 <OSPI_Set_Features>:

void OSPI_Set_Features(OSPI_HandleTypeDef *hospi)
{
 80016f4:	b510      	push	{r4, lr}
 80016f6:	b096      	sub	sp, #88	; 0x58
 80016f8:	4604      	mov	r4, r0
	  OSPI_RegularCmdTypeDef  sCommand;
	  uint8_t reg = 0x00;//2 bytes
 80016fa:	2300      	movs	r3, #0
 80016fc:	f88d 3007 	strb.w	r3, [sp, #7]

	   sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8001700:	9302      	str	r3, [sp, #8]
	   sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8001702:	9303      	str	r3, [sp, #12]
	   sCommand.Instruction        = 0x1F;
 8001704:	221f      	movs	r2, #31
 8001706:	9204      	str	r2, [sp, #16]
	   sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8001708:	2201      	movs	r2, #1
 800170a:	9205      	str	r2, [sp, #20]
	   sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 800170c:	9306      	str	r3, [sp, #24]
	   sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800170e:	9307      	str	r3, [sp, #28]
	   sCommand.Address            = 0xA0;
 8001710:	21a0      	movs	r1, #160	; 0xa0
 8001712:	9108      	str	r1, [sp, #32]
	   sCommand.AddressMode        = HAL_OSPI_ADDRESS_1_LINE;
 8001714:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001718:	9109      	str	r1, [sp, #36]	; 0x24
	   sCommand.AddressSize        = HAL_OSPI_ADDRESS_8_BITS;
 800171a:	930a      	str	r3, [sp, #40]	; 0x28
	   sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 800171c:	930b      	str	r3, [sp, #44]	; 0x2c
	   sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800171e:	930d      	str	r3, [sp, #52]	; 0x34
	   sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 8001720:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8001724:	9110      	str	r1, [sp, #64]	; 0x40
	   sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 8001726:	9312      	str	r3, [sp, #72]	; 0x48
	   sCommand.NbData             = 1; //1 byte
 8001728:	9211      	str	r2, [sp, #68]	; 0x44
	   sCommand.DummyCycles        = 0;//DUMMY_CLOCK_CYCLES_READ_REG;
 800172a:	9313      	str	r3, [sp, #76]	; 0x4c
	   sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800172c:	9314      	str	r3, [sp, #80]	; 0x50
	   sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800172e:	9315      	str	r3, [sp, #84]	; 0x54

	   if(HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001730:	f241 3288 	movw	r2, #5000	; 0x1388
 8001734:	a902      	add	r1, sp, #8
 8001736:	f001 fc81 	bl	800303c <HAL_OSPI_Command>
 800173a:	b948      	cbnz	r0, 8001750 <OSPI_Set_Features+0x5c>
	   {
	   	      Error_Handler();
	   	}


	   if(HAL_OSPI_Transmit(hospi, &reg ,HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800173c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001740:	f10d 0107 	add.w	r1, sp, #7
 8001744:	4620      	mov	r0, r4
 8001746:	f001 fcd5 	bl	80030f4 <HAL_OSPI_Transmit>
 800174a:	b920      	cbnz	r0, 8001756 <OSPI_Set_Features+0x62>
	   	 {
	   	      Error_Handler();
	   	 }

}
 800174c:	b016      	add	sp, #88	; 0x58
 800174e:	bd10      	pop	{r4, pc}
	   	      Error_Handler();
 8001750:	f7ff f940 	bl	80009d4 <Error_Handler>
 8001754:	e7f2      	b.n	800173c <OSPI_Set_Features+0x48>
	   	      Error_Handler();
 8001756:	f7ff f93d 	bl	80009d4 <Error_Handler>
}
 800175a:	e7f7      	b.n	800174c <OSPI_Set_Features+0x58>

0800175c <OSPI_Program_Load>:

void OSPI_Program_Load(OSPI_HandleTypeDef *hospi)//address needed
{
 800175c:	b510      	push	{r4, lr}
 800175e:	b094      	sub	sp, #80	; 0x50
 8001760:	4604      	mov	r4, r0
	 OSPI_RegularCmdTypeDef  sCommand;

	 sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8001762:	2300      	movs	r3, #0
 8001764:	9300      	str	r3, [sp, #0]
	 sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8001766:	9301      	str	r3, [sp, #4]
	 sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8001768:	2201      	movs	r2, #1
 800176a:	9203      	str	r2, [sp, #12]
	 sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 800176c:	9304      	str	r3, [sp, #16]
	 sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800176e:	9305      	str	r3, [sp, #20]
	 sCommand.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8001770:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001774:	9208      	str	r2, [sp, #32]
	// sCommand.AddressSize        = HAL_OSPI_ADDRESS_24_BITS;
	 sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 8001776:	9309      	str	r3, [sp, #36]	; 0x24
	 sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8001778:	930b      	str	r3, [sp, #44]	; 0x2c
	 sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 800177a:	9310      	str	r3, [sp, #64]	; 0x40
	 sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800177c:	9312      	str	r3, [sp, #72]	; 0x48
	 sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800177e:	9313      	str	r3, [sp, #76]	; 0x4c

	 sCommand.Instruction = 0x02;//PROGRAM_LOAD_X4;
 8001780:	2202      	movs	r2, #2
 8001782:	9202      	str	r2, [sp, #8]
	 sCommand.AddressMode = HAL_OSPI_ADDRESS_1_LINE;
 8001784:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001788:	9207      	str	r2, [sp, #28]
	 sCommand.Address     = ADDR;//0x00;
 800178a:	4a0f      	ldr	r2, [pc, #60]	; (80017c8 <OSPI_Program_Load+0x6c>)
 800178c:	6812      	ldr	r2, [r2, #0]
 800178e:	9206      	str	r2, [sp, #24]
	 sCommand.DataMode    = HAL_OSPI_DATA_1_LINE;//HAL_OSPI_DATA_4_LINES;
 8001790:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001794:	920e      	str	r2, [sp, #56]	; 0x38
	 sCommand.NbData      = sizeof(aTxBuffer); // Hab edit was: BUFFERSIZE;
 8001796:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800179a:	920f      	str	r2, [sp, #60]	; 0x3c
	 sCommand.DummyCycles = 0;
 800179c:	9311      	str	r3, [sp, #68]	; 0x44

	 if(HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800179e:	f241 3288 	movw	r2, #5000	; 0x1388
 80017a2:	4669      	mov	r1, sp
 80017a4:	f001 fc4a 	bl	800303c <HAL_OSPI_Command>
 80017a8:	b940      	cbnz	r0, 80017bc <OSPI_Program_Load+0x60>
	 {
	      Error_Handler();
	 }

	 if(HAL_OSPI_Transmit(hospi, aTxBuffer,HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80017aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ae:	4907      	ldr	r1, [pc, #28]	; (80017cc <OSPI_Program_Load+0x70>)
 80017b0:	4620      	mov	r0, r4
 80017b2:	f001 fc9f 	bl	80030f4 <HAL_OSPI_Transmit>
 80017b6:	b920      	cbnz	r0, 80017c2 <OSPI_Program_Load+0x66>
	 {
	      Error_Handler();
	 }
}
 80017b8:	b014      	add	sp, #80	; 0x50
 80017ba:	bd10      	pop	{r4, pc}
	      Error_Handler();
 80017bc:	f7ff f90a 	bl	80009d4 <Error_Handler>
 80017c0:	e7f3      	b.n	80017aa <OSPI_Program_Load+0x4e>
	      Error_Handler();
 80017c2:	f7ff f907 	bl	80009d4 <Error_Handler>
}
 80017c6:	e7f7      	b.n	80017b8 <OSPI_Program_Load+0x5c>
 80017c8:	20000818 	.word	0x20000818
 80017cc:	20001020 	.word	0x20001020

080017d0 <OSPI_Program_Execute>:

void OSPI_Program_Execute(OSPI_HandleTypeDef *hospi)//address needed
{
 80017d0:	b500      	push	{lr}
 80017d2:	b095      	sub	sp, #84	; 0x54
	 	 OSPI_RegularCmdTypeDef  sCommand;

		 sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80017d4:	2300      	movs	r3, #0
 80017d6:	9300      	str	r3, [sp, #0]
		 sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 80017d8:	9301      	str	r3, [sp, #4]
		 sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 80017da:	2201      	movs	r2, #1
 80017dc:	9203      	str	r2, [sp, #12]
		 sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 80017de:	9304      	str	r3, [sp, #16]
		 sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80017e0:	9305      	str	r3, [sp, #20]
		 sCommand.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 80017e2:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80017e6:	9108      	str	r1, [sp, #32]
		// sCommand.AddressSize        = HAL_OSPI_ADDRESS_24_BITS;
		 sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 80017e8:	9309      	str	r3, [sp, #36]	; 0x24
		 sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80017ea:	930b      	str	r3, [sp, #44]	; 0x2c
		 sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 80017ec:	9310      	str	r3, [sp, #64]	; 0x40
		 sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80017ee:	9312      	str	r3, [sp, #72]	; 0x48
		 sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80017f0:	9313      	str	r3, [sp, #76]	; 0x4c

		 sCommand.Instruction = PROGRAM_EXECUTE;
 80017f2:	2110      	movs	r1, #16
 80017f4:	9102      	str	r1, [sp, #8]
		 sCommand.AddressMode = HAL_OSPI_ADDRESS_1_LINE;
 80017f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017fa:	9107      	str	r1, [sp, #28]
		 sCommand.Address     = ADDR;//0x00;
 80017fc:	4908      	ldr	r1, [pc, #32]	; (8001820 <OSPI_Program_Execute+0x50>)
 80017fe:	6809      	ldr	r1, [r1, #0]
 8001800:	9106      	str	r1, [sp, #24]
		 sCommand.DataMode    = HAL_OSPI_DATA_NONE;
 8001802:	930e      	str	r3, [sp, #56]	; 0x38
		 sCommand.NbData      = 1;
 8001804:	920f      	str	r2, [sp, #60]	; 0x3c
		 sCommand.DummyCycles = 0;
 8001806:	9311      	str	r3, [sp, #68]	; 0x44

		  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001808:	f241 3288 	movw	r2, #5000	; 0x1388
 800180c:	4669      	mov	r1, sp
 800180e:	f001 fc15 	bl	800303c <HAL_OSPI_Command>
 8001812:	b910      	cbnz	r0, 800181a <OSPI_Program_Execute+0x4a>
		  {
		      Error_Handler();

		  }
}
 8001814:	b015      	add	sp, #84	; 0x54
 8001816:	f85d fb04 	ldr.w	pc, [sp], #4
		      Error_Handler();
 800181a:	f7ff f8db 	bl	80009d4 <Error_Handler>
}
 800181e:	e7f9      	b.n	8001814 <OSPI_Program_Execute+0x44>
 8001820:	20000818 	.word	0x20000818

08001824 <OSPI_Page_Read>:

void OSPI_Page_Read(OSPI_HandleTypeDef *hospi)//address needed
{
 8001824:	b500      	push	{lr}
 8001826:	b095      	sub	sp, #84	; 0x54
	 OSPI_RegularCmdTypeDef  sCommand;

	 	sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8001828:	2300      	movs	r3, #0
 800182a:	9300      	str	r3, [sp, #0]
	 	sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 800182c:	9301      	str	r3, [sp, #4]
	 	sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 800182e:	2201      	movs	r2, #1
 8001830:	9203      	str	r2, [sp, #12]
	 	sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8001832:	9304      	str	r3, [sp, #16]
	 	sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8001834:	9305      	str	r3, [sp, #20]
	 	sCommand.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8001836:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800183a:	9208      	str	r2, [sp, #32]
		//sCommand.AddressSize        = HAL_OSPI_ADDRESS_24_BITS;
		sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 800183c:	9309      	str	r3, [sp, #36]	; 0x24
		sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800183e:	930b      	str	r3, [sp, #44]	; 0x2c
		sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 8001840:	9310      	str	r3, [sp, #64]	; 0x40
		sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8001842:	9312      	str	r3, [sp, #72]	; 0x48
		sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8001844:	9313      	str	r3, [sp, #76]	; 0x4c

		sCommand.Instruction = PAGE_READ;
 8001846:	2213      	movs	r2, #19
 8001848:	9202      	str	r2, [sp, #8]
		sCommand.AddressMode = HAL_OSPI_ADDRESS_1_LINE;
 800184a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800184e:	9207      	str	r2, [sp, #28]
		sCommand.Address     = ADDR;//0x00;
 8001850:	4a08      	ldr	r2, [pc, #32]	; (8001874 <OSPI_Page_Read+0x50>)
 8001852:	6812      	ldr	r2, [r2, #0]
 8001854:	9206      	str	r2, [sp, #24]
		sCommand.DataMode    = HAL_OSPI_DATA_NONE;
 8001856:	930e      	str	r3, [sp, #56]	; 0x38
		sCommand.NbData      = 0;
 8001858:	930f      	str	r3, [sp, #60]	; 0x3c
		sCommand.DummyCycles = 0;
 800185a:	9311      	str	r3, [sp, #68]	; 0x44

		 if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800185c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001860:	4669      	mov	r1, sp
 8001862:	f001 fbeb 	bl	800303c <HAL_OSPI_Command>
 8001866:	b910      	cbnz	r0, 800186e <OSPI_Page_Read+0x4a>
		{
			 Error_Handler();

		 }
}
 8001868:	b015      	add	sp, #84	; 0x54
 800186a:	f85d fb04 	ldr.w	pc, [sp], #4
			 Error_Handler();
 800186e:	f7ff f8b1 	bl	80009d4 <Error_Handler>
}
 8001872:	e7f9      	b.n	8001868 <OSPI_Page_Read+0x44>
 8001874:	20000818 	.word	0x20000818

08001878 <OSPI_Read_Cache_X4>:

void OSPI_Read_Cache_X4(OSPI_HandleTypeDef *hospi)//address needed
{
 8001878:	b510      	push	{r4, lr}
 800187a:	b094      	sub	sp, #80	; 0x50
 800187c:	4604      	mov	r4, r0
	 OSPI_RegularCmdTypeDef  sCommand;

	  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800187e:	2300      	movs	r3, #0
 8001880:	9300      	str	r3, [sp, #0]
	  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8001882:	9301      	str	r3, [sp, #4]
	  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8001884:	2201      	movs	r2, #1
 8001886:	9203      	str	r2, [sp, #12]
	  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8001888:	9304      	str	r3, [sp, #16]
	  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800188a:	9305      	str	r3, [sp, #20]
	  sCommand.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 800188c:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001890:	9208      	str	r2, [sp, #32]
	 // sCommand.AddressSize        = HAL_OSPI_ADDRESS_24_BITS;
	  sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 8001892:	9309      	str	r3, [sp, #36]	; 0x24
	  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8001894:	930b      	str	r3, [sp, #44]	; 0x2c
	  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 8001896:	9310      	str	r3, [sp, #64]	; 0x40
	  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8001898:	9312      	str	r3, [sp, #72]	; 0x48
	  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800189a:	9313      	str	r3, [sp, #76]	; 0x4c

      sCommand.Instruction = 0x0B;//READ_CACHE_X4;
 800189c:	230b      	movs	r3, #11
 800189e:	9302      	str	r3, [sp, #8]
      sCommand.AddressMode = HAL_OSPI_ADDRESS_1_LINE;
 80018a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018a4:	9307      	str	r3, [sp, #28]
      sCommand.Address     = ADDR;//0x00;
 80018a6:	4b0f      	ldr	r3, [pc, #60]	; (80018e4 <OSPI_Read_Cache_X4+0x6c>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	9306      	str	r3, [sp, #24]
      sCommand.DataMode    = HAL_OSPI_DATA_1_LINE;//HAL_OSPI_DATA_4_LINES;
 80018ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80018b0:	930e      	str	r3, [sp, #56]	; 0x38
      sCommand.NbData      = BUFFERSIZE+1;
 80018b2:	23f6      	movs	r3, #246	; 0xf6
 80018b4:	930f      	str	r3, [sp, #60]	; 0x3c
      sCommand.DummyCycles = 8;//DUMMY_CLOCK_CYCLES_READ;
 80018b6:	2308      	movs	r3, #8
 80018b8:	9311      	str	r3, [sp, #68]	; 0x44

    if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80018ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80018be:	4669      	mov	r1, sp
 80018c0:	f001 fbbc 	bl	800303c <HAL_OSPI_Command>
 80018c4:	b940      	cbnz	r0, 80018d8 <OSPI_Read_Cache_X4+0x60>
      {
        Error_Handler();
      }

      if (HAL_OSPI_Receive(hospi, aRxBuffer, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80018c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ca:	4907      	ldr	r1, [pc, #28]	; (80018e8 <OSPI_Read_Cache_X4+0x70>)
 80018cc:	4620      	mov	r0, r4
 80018ce:	f001 fc5e 	bl	800318e <HAL_OSPI_Receive>
 80018d2:	b920      	cbnz	r0, 80018de <OSPI_Read_Cache_X4+0x66>
        Error_Handler();
      }
//      printf("%s",aRxBuffer);


}
 80018d4:	b014      	add	sp, #80	; 0x50
 80018d6:	bd10      	pop	{r4, pc}
        Error_Handler();
 80018d8:	f7ff f87c 	bl	80009d4 <Error_Handler>
 80018dc:	e7f3      	b.n	80018c6 <OSPI_Read_Cache_X4+0x4e>
        Error_Handler();
 80018de:	f7ff f879 	bl	80009d4 <Error_Handler>
}
 80018e2:	e7f7      	b.n	80018d4 <OSPI_Read_Cache_X4+0x5c>
 80018e4:	20000818 	.word	0x20000818
 80018e8:	20000820 	.word	0x20000820

080018ec <OSPI_Reset>:
		 }
		 printf("%d",reg[1]);
}

void OSPI_Reset(OSPI_HandleTypeDef *hospi)
{
 80018ec:	b500      	push	{lr}
 80018ee:	b095      	sub	sp, #84	; 0x54
	OSPI_RegularCmdTypeDef  sCommand;
		 uint8_t reg[2];

		 	 sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80018f0:	2300      	movs	r3, #0
 80018f2:	9300      	str	r3, [sp, #0]
			  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 80018f4:	9301      	str	r3, [sp, #4]
			  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 80018f6:	2201      	movs	r2, #1
 80018f8:	9203      	str	r2, [sp, #12]
			  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 80018fa:	9304      	str	r3, [sp, #16]
			  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80018fc:	9305      	str	r3, [sp, #20]
			  sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 80018fe:	9309      	str	r3, [sp, #36]	; 0x24
			  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8001900:	930b      	str	r3, [sp, #44]	; 0x2c
			  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 8001902:	9310      	str	r3, [sp, #64]	; 0x40
			  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8001904:	9312      	str	r3, [sp, #72]	; 0x48
			  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8001906:	9313      	str	r3, [sp, #76]	; 0x4c

		      sCommand.Instruction = 0xFF;
 8001908:	22ff      	movs	r2, #255	; 0xff
 800190a:	9202      	str	r2, [sp, #8]
		      sCommand.AddressMode = HAL_OSPI_ADDRESS_NONE;
 800190c:	9307      	str	r3, [sp, #28]
		      sCommand.DataMode    = HAL_OSPI_DATA_NONE;
 800190e:	930e      	str	r3, [sp, #56]	; 0x38
		      sCommand.NbData      = 0;
 8001910:	930f      	str	r3, [sp, #60]	; 0x3c
		      sCommand.DummyCycles = 0;//DUMFERSIZMY_CLOCK_CYCLES_READ;
 8001912:	9311      	str	r3, [sp, #68]	; 0x44

			 if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001914:	f241 3288 	movw	r2, #5000	; 0x1388
 8001918:	4669      	mov	r1, sp
 800191a:	f001 fb8f 	bl	800303c <HAL_OSPI_Command>
 800191e:	b910      	cbnz	r0, 8001926 <OSPI_Reset+0x3a>
			 {
			 	  Error_Handler();
			 }

}
 8001920:	b015      	add	sp, #84	; 0x54
 8001922:	f85d fb04 	ldr.w	pc, [sp], #4
			 	  Error_Handler();
 8001926:	f7ff f855 	bl	80009d4 <Error_Handler>
}
 800192a:	e7f9      	b.n	8001920 <OSPI_Reset+0x34>

0800192c <readWriteCompare>:
    HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
}


bool readWriteCompare(void)
{
 800192c:	b508      	push	{r3, lr}
    if (strncmp((char *)aRxBuffer, (char *)aTxBuffer, sizeof(aTxBuffer)) == 0)
 800192e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001932:	4904      	ldr	r1, [pc, #16]	; (8001944 <readWriteCompare+0x18>)
 8001934:	4804      	ldr	r0, [pc, #16]	; (8001948 <readWriteCompare+0x1c>)
 8001936:	f007 fad9 	bl	8008eec <strncmp>
 800193a:	b908      	cbnz	r0, 8001940 <readWriteCompare+0x14>
        return(true);
 800193c:	2001      	movs	r0, #1
    else
        return(false);
}
 800193e:	bd08      	pop	{r3, pc}
        return(false);
 8001940:	2000      	movs	r0, #0
 8001942:	e7fc      	b.n	800193e <readWriteCompare+0x12>
 8001944:	20001020 	.word	0x20001020
 8001948:	20000820 	.word	0x20000820

0800194c <prepareForCompare>:

    prepareForCompare();
}

void prepareForCompare(void)
{
 800194c:	b508      	push	{r3, lr}
    memset(aRxBuffer, 0x00, sizeof(aRxBuffer));
 800194e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001952:	2100      	movs	r1, #0
 8001954:	4801      	ldr	r0, [pc, #4]	; (800195c <prepareForCompare+0x10>)
 8001956:	f007 fac1 	bl	8008edc <memset>
}
 800195a:	bd08      	pop	{r3, pc}
 800195c:	20000820 	.word	0x20000820

08001960 <initTest>:
{
 8001960:	b510      	push	{r4, lr}
    ReadWriteCount = 0;
 8001962:	2400      	movs	r4, #0
 8001964:	4b0c      	ldr	r3, [pc, #48]	; (8001998 <initTest+0x38>)
 8001966:	601c      	str	r4, [r3, #0]
    ADDR = 2048 * ReadWriteCount;
 8001968:	4b0c      	ldr	r3, [pc, #48]	; (800199c <initTest+0x3c>)
 800196a:	601c      	str	r4, [r3, #0]
    memset(aTxBuffer, 0x00, sizeof(aTxBuffer));
 800196c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001970:	4621      	mov	r1, r4
 8001972:	480b      	ldr	r0, [pc, #44]	; (80019a0 <initTest+0x40>)
 8001974:	f007 fab2 	bl	8008edc <memset>
    for (uint16_t Index = 0; Index < (sizeof(aTxBuffer) - 8); Index++)
 8001978:	4623      	mov	r3, r4
    uint8_t Value = 0;
 800197a:	4622      	mov	r2, r4
    for (uint16_t Index = 0; Index < (sizeof(aTxBuffer) - 8); Index++)
 800197c:	e005      	b.n	800198a <initTest+0x2a>
        aTxBuffer[Index] = Value;
 800197e:	4908      	ldr	r1, [pc, #32]	; (80019a0 <initTest+0x40>)
 8001980:	54ca      	strb	r2, [r1, r3]
        Value++;
 8001982:	3201      	adds	r2, #1
 8001984:	b2d2      	uxtb	r2, r2
    for (uint16_t Index = 0; Index < (sizeof(aTxBuffer) - 8); Index++)
 8001986:	3301      	adds	r3, #1
 8001988:	b29b      	uxth	r3, r3
 800198a:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 800198e:	d3f6      	bcc.n	800197e <initTest+0x1e>
    prepareForCompare();
 8001990:	f7ff ffdc 	bl	800194c <prepareForCompare>
}
 8001994:	bd10      	pop	{r4, pc}
 8001996:	bf00      	nop
 8001998:	2000081c 	.word	0x2000081c
 800199c:	20000818 	.word	0x20000818
 80019a0:	20001020 	.word	0x20001020

080019a4 <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80019a4:	4b10      	ldr	r3, [pc, #64]	; (80019e8 <HAL_InitTick+0x44>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	b90b      	cbnz	r3, 80019ae <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80019aa:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80019ac:	4770      	bx	lr
{
 80019ae:	b510      	push	{r4, lr}
 80019b0:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80019b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80019ba:	4a0c      	ldr	r2, [pc, #48]	; (80019ec <HAL_InitTick+0x48>)
 80019bc:	6810      	ldr	r0, [r2, #0]
 80019be:	fbb0 f0f3 	udiv	r0, r0, r3
 80019c2:	f000 f8a5 	bl	8001b10 <HAL_SYSTICK_Config>
 80019c6:	b968      	cbnz	r0, 80019e4 <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019c8:	2c0f      	cmp	r4, #15
 80019ca:	d901      	bls.n	80019d0 <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 80019cc:	2001      	movs	r0, #1
 80019ce:	e00a      	b.n	80019e6 <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019d0:	2200      	movs	r2, #0
 80019d2:	4621      	mov	r1, r4
 80019d4:	f04f 30ff 	mov.w	r0, #4294967295
 80019d8:	f000 f854 	bl	8001a84 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019dc:	4b04      	ldr	r3, [pc, #16]	; (80019f0 <HAL_InitTick+0x4c>)
 80019de:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 80019e0:	2000      	movs	r0, #0
 80019e2:	e000      	b.n	80019e6 <HAL_InitTick+0x42>
      status = HAL_ERROR;
 80019e4:	2001      	movs	r0, #1
}
 80019e6:	bd10      	pop	{r4, pc}
 80019e8:	20000004 	.word	0x20000004
 80019ec:	20000000 	.word	0x20000000
 80019f0:	20000008 	.word	0x20000008

080019f4 <HAL_Init>:
{
 80019f4:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019f6:	2003      	movs	r0, #3
 80019f8:	f000 f832 	bl	8001a60 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019fc:	200f      	movs	r0, #15
 80019fe:	f7ff ffd1 	bl	80019a4 <HAL_InitTick>
 8001a02:	b110      	cbz	r0, 8001a0a <HAL_Init+0x16>
    status = HAL_ERROR;
 8001a04:	2401      	movs	r4, #1
}
 8001a06:	4620      	mov	r0, r4
 8001a08:	bd10      	pop	{r4, pc}
 8001a0a:	4604      	mov	r4, r0
    HAL_MspInit();
 8001a0c:	f7ff f9a6 	bl	8000d5c <HAL_MspInit>
 8001a10:	e7f9      	b.n	8001a06 <HAL_Init+0x12>
	...

08001a14 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001a14:	4b03      	ldr	r3, [pc, #12]	; (8001a24 <HAL_IncTick+0x10>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	4a03      	ldr	r2, [pc, #12]	; (8001a28 <HAL_IncTick+0x14>)
 8001a1a:	6811      	ldr	r1, [r2, #0]
 8001a1c:	440b      	add	r3, r1
 8001a1e:	6013      	str	r3, [r2, #0]
}
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	20000004 	.word	0x20000004
 8001a28:	20001820 	.word	0x20001820

08001a2c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001a2c:	4b01      	ldr	r3, [pc, #4]	; (8001a34 <HAL_GetTick+0x8>)
 8001a2e:	6818      	ldr	r0, [r3, #0]
}
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	20001820 	.word	0x20001820

08001a38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a38:	b538      	push	{r3, r4, r5, lr}
 8001a3a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001a3c:	f7ff fff6 	bl	8001a2c <HAL_GetTick>
 8001a40:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a42:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001a46:	d002      	beq.n	8001a4e <HAL_Delay+0x16>
  {
    wait += (uint32_t)uwTickFreq;
 8001a48:	4b04      	ldr	r3, [pc, #16]	; (8001a5c <HAL_Delay+0x24>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a4e:	f7ff ffed 	bl	8001a2c <HAL_GetTick>
 8001a52:	1b40      	subs	r0, r0, r5
 8001a54:	42a0      	cmp	r0, r4
 8001a56:	d3fa      	bcc.n	8001a4e <HAL_Delay+0x16>
  {
  }
}
 8001a58:	bd38      	pop	{r3, r4, r5, pc}
 8001a5a:	bf00      	nop
 8001a5c:	20000004 	.word	0x20000004

08001a60 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a60:	4a07      	ldr	r2, [pc, #28]	; (8001a80 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001a62:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a64:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001a68:	041b      	lsls	r3, r3, #16
 8001a6a:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a6c:	0200      	lsls	r0, r0, #8
 8001a6e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a72:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001a74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001a7c:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001a7e:	4770      	bx	lr
 8001a80:	e000ed00 	.word	0xe000ed00

08001a84 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a84:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a86:	4b19      	ldr	r3, [pc, #100]	; (8001aec <HAL_NVIC_SetPriority+0x68>)
 8001a88:	68db      	ldr	r3, [r3, #12]
 8001a8a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a8e:	f1c3 0c07 	rsb	ip, r3, #7
 8001a92:	f1bc 0f04 	cmp.w	ip, #4
 8001a96:	bf28      	it	cs
 8001a98:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a9c:	f103 0e04 	add.w	lr, r3, #4
 8001aa0:	f1be 0f06 	cmp.w	lr, #6
 8001aa4:	d918      	bls.n	8001ad8 <HAL_NVIC_SetPriority+0x54>
 8001aa6:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa8:	f04f 3eff 	mov.w	lr, #4294967295
 8001aac:	fa0e fc0c 	lsl.w	ip, lr, ip
 8001ab0:	ea21 010c 	bic.w	r1, r1, ip
 8001ab4:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ab6:	fa0e fe03 	lsl.w	lr, lr, r3
 8001aba:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001abe:	430a      	orrs	r2, r1
  if ((int32_t)(IRQn) >= 0)
 8001ac0:	2800      	cmp	r0, #0
 8001ac2:	db0b      	blt.n	8001adc <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ac4:	0112      	lsls	r2, r2, #4
 8001ac6:	b2d2      	uxtb	r2, r2
 8001ac8:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001acc:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001ad0:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001ad4:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ad8:	2300      	movs	r3, #0
 8001ada:	e7e5      	b.n	8001aa8 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001adc:	f000 000f 	and.w	r0, r0, #15
 8001ae0:	0112      	lsls	r2, r2, #4
 8001ae2:	b2d2      	uxtb	r2, r2
 8001ae4:	4b02      	ldr	r3, [pc, #8]	; (8001af0 <HAL_NVIC_SetPriority+0x6c>)
 8001ae6:	541a      	strb	r2, [r3, r0]
 8001ae8:	e7f4      	b.n	8001ad4 <HAL_NVIC_SetPriority+0x50>
 8001aea:	bf00      	nop
 8001aec:	e000ed00 	.word	0xe000ed00
 8001af0:	e000ed14 	.word	0xe000ed14

08001af4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001af4:	2800      	cmp	r0, #0
 8001af6:	db07      	blt.n	8001b08 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001af8:	f000 021f 	and.w	r2, r0, #31
 8001afc:	0940      	lsrs	r0, r0, #5
 8001afe:	2301      	movs	r3, #1
 8001b00:	4093      	lsls	r3, r2
 8001b02:	4a02      	ldr	r2, [pc, #8]	; (8001b0c <HAL_NVIC_EnableIRQ+0x18>)
 8001b04:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	e000e100 	.word	0xe000e100

08001b10 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b10:	3801      	subs	r0, #1
 8001b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001b16:	d20b      	bcs.n	8001b30 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b18:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001b1c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b1e:	4a05      	ldr	r2, [pc, #20]	; (8001b34 <HAL_SYSTICK_Config+0x24>)
 8001b20:	21f0      	movs	r1, #240	; 0xf0
 8001b22:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b26:	2000      	movs	r0, #0
 8001b28:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b2a:	2207      	movs	r2, #7
 8001b2c:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b2e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001b30:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001b32:	4770      	bx	lr
 8001b34:	e000ed00 	.word	0xe000ed00

08001b38 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b38:	b430      	push	{r4, r5}
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b3a:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 8001b3c:	6d05      	ldr	r5, [r0, #80]	; 0x50
 8001b3e:	6065      	str	r5, [r4, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8001b40:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8001b42:	b114      	cbz	r4, 8001b4a <DMA_SetConfig+0x12>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b44:	6d84      	ldr	r4, [r0, #88]	; 0x58
 8001b46:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8001b48:	6065      	str	r5, [r4, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b4a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001b4c:	f004 0c1c 	and.w	ip, r4, #28
 8001b50:	2401      	movs	r4, #1
 8001b52:	fa04 f40c 	lsl.w	r4, r4, ip
 8001b56:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8001b58:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001b5a:	6804      	ldr	r4, [r0, #0]
 8001b5c:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b5e:	6883      	ldr	r3, [r0, #8]
 8001b60:	2b10      	cmp	r3, #16
 8001b62:	d005      	beq.n	8001b70 <DMA_SetConfig+0x38>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001b64:	6803      	ldr	r3, [r0, #0]
 8001b66:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001b68:	6803      	ldr	r3, [r0, #0]
 8001b6a:	60da      	str	r2, [r3, #12]
  }
}
 8001b6c:	bc30      	pop	{r4, r5}
 8001b6e:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8001b70:	6803      	ldr	r3, [r0, #0]
 8001b72:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001b74:	6803      	ldr	r3, [r0, #0]
 8001b76:	60d9      	str	r1, [r3, #12]
 8001b78:	e7f8      	b.n	8001b6c <DMA_SetConfig+0x34>
	...

08001b7c <DMA_CalcDMAMUXChannelBaseAndMask>:
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001b7c:	6803      	ldr	r3, [r0, #0]
 8001b7e:	4a10      	ldr	r2, [pc, #64]	; (8001bc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x44>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d815      	bhi.n	8001bb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x34>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001b84:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8001b86:	f022 0203 	bic.w	r2, r2, #3
 8001b8a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8001b8e:	f502 3202 	add.w	r2, r2, #133120	; 0x20800
 8001b92:	6482      	str	r2, [r0, #72]	; 0x48
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	3b08      	subs	r3, #8
 8001b98:	4a0a      	ldr	r2, [pc, #40]	; (8001bc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x48>)
 8001b9a:	fba2 2303 	umull	r2, r3, r2, r3
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001b9e:	4a0a      	ldr	r2, [pc, #40]	; (8001bc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x4c>)
 8001ba0:	64c2      	str	r2, [r0, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001ba2:	f3c3 1304 	ubfx	r3, r3, #4, #5
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	6503      	str	r3, [r0, #80]	; 0x50
}
 8001bae:	4770      	bx	lr
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001bb0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8001bb2:	f022 0103 	bic.w	r1, r2, #3
 8001bb6:	4a05      	ldr	r2, [pc, #20]	; (8001bcc <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8001bb8:	440a      	add	r2, r1
 8001bba:	6482      	str	r2, [r0, #72]	; 0x48
 8001bbc:	e7ea      	b.n	8001b94 <DMA_CalcDMAMUXChannelBaseAndMask+0x18>
 8001bbe:	bf00      	nop
 8001bc0:	40020407 	.word	0x40020407
 8001bc4:	cccccccd 	.word	0xcccccccd
 8001bc8:	40020880 	.word	0x40020880
 8001bcc:	4002081c 	.word	0x4002081c

08001bd0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001bd0:	7903      	ldrb	r3, [r0, #4]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001bd2:	4a07      	ldr	r2, [pc, #28]	; (8001bf0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x20>)
 8001bd4:	441a      	add	r2, r3
 8001bd6:	0092      	lsls	r2, r2, #2
 8001bd8:	6542      	str	r2, [r0, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001bda:	4a06      	ldr	r2, [pc, #24]	; (8001bf4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 8001bdc:	6582      	str	r2, [r0, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001bde:	3b01      	subs	r3, #1
 8001be0:	f003 0303 	and.w	r3, r3, #3
 8001be4:	2201      	movs	r2, #1
 8001be6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bea:	65c3      	str	r3, [r0, #92]	; 0x5c
}
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	1000823f 	.word	0x1000823f
 8001bf4:	40020940 	.word	0x40020940

08001bf8 <HAL_DMA_Init>:
  if(hdma == NULL)
 8001bf8:	2800      	cmp	r0, #0
 8001bfa:	d05b      	beq.n	8001cb4 <HAL_DMA_Init+0xbc>
{
 8001bfc:	b510      	push	{r4, lr}
 8001bfe:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001c00:	6801      	ldr	r1, [r0, #0]
 8001c02:	4b2d      	ldr	r3, [pc, #180]	; (8001cb8 <HAL_DMA_Init+0xc0>)
 8001c04:	4299      	cmp	r1, r3
 8001c06:	d83d      	bhi.n	8001c84 <HAL_DMA_Init+0x8c>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001c08:	4b2c      	ldr	r3, [pc, #176]	; (8001cbc <HAL_DMA_Init+0xc4>)
 8001c0a:	440b      	add	r3, r1
 8001c0c:	4a2c      	ldr	r2, [pc, #176]	; (8001cc0 <HAL_DMA_Init+0xc8>)
 8001c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c12:	091b      	lsrs	r3, r3, #4
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001c18:	4b2a      	ldr	r3, [pc, #168]	; (8001cc4 <HAL_DMA_Init+0xcc>)
 8001c1a:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  tmp = hdma->Instance->CCR;
 8001c22:	680a      	ldr	r2, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001c24:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8001c28:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmp |=  hdma->Init.Direction        |
 8001c2c:	68a3      	ldr	r3, [r4, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c2e:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Direction        |
 8001c30:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c32:	6920      	ldr	r0, [r4, #16]
 8001c34:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c36:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c38:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c3a:	69a0      	ldr	r0, [r4, #24]
 8001c3c:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c3e:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c40:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c42:	6a20      	ldr	r0, [r4, #32]
 8001c44:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 8001c46:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 8001c48:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001c4a:	4620      	mov	r0, r4
 8001c4c:	f7ff ff96 	bl	8001b7c <DMA_CalcDMAMUXChannelBaseAndMask>
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001c50:	68a3      	ldr	r3, [r4, #8]
 8001c52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c56:	d020      	beq.n	8001c9a <HAL_DMA_Init+0xa2>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001c58:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001c5a:	7922      	ldrb	r2, [r4, #4]
 8001c5c:	601a      	str	r2, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c5e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001c60:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001c62:	605a      	str	r2, [r3, #4]
  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001c64:	6863      	ldr	r3, [r4, #4]
 8001c66:	3b01      	subs	r3, #1
 8001c68:	2b03      	cmp	r3, #3
 8001c6a:	d919      	bls.n	8001ca0 <HAL_DMA_Init+0xa8>
    hdma->DMAmuxRequestGen = 0U;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001c70:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001c72:	65e3      	str	r3, [r4, #92]	; 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c74:	2000      	movs	r0, #0
 8001c76:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  hdma->Lock = HAL_UNLOCKED;
 8001c7e:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 8001c82:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001c84:	4b10      	ldr	r3, [pc, #64]	; (8001cc8 <HAL_DMA_Init+0xd0>)
 8001c86:	440b      	add	r3, r1
 8001c88:	4a0d      	ldr	r2, [pc, #52]	; (8001cc0 <HAL_DMA_Init+0xc8>)
 8001c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c8e:	091b      	lsrs	r3, r3, #4
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001c94:	4b0d      	ldr	r3, [pc, #52]	; (8001ccc <HAL_DMA_Init+0xd4>)
 8001c96:	6403      	str	r3, [r0, #64]	; 0x40
 8001c98:	e7c0      	b.n	8001c1c <HAL_DMA_Init+0x24>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	6063      	str	r3, [r4, #4]
 8001c9e:	e7db      	b.n	8001c58 <HAL_DMA_Init+0x60>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001ca0:	4620      	mov	r0, r4
 8001ca2:	f7ff ff95 	bl	8001bd0 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001ca6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001cac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001cae:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001cb0:	605a      	str	r2, [r3, #4]
 8001cb2:	e7df      	b.n	8001c74 <HAL_DMA_Init+0x7c>
    return HAL_ERROR;
 8001cb4:	2001      	movs	r0, #1
}
 8001cb6:	4770      	bx	lr
 8001cb8:	40020407 	.word	0x40020407
 8001cbc:	bffdfff8 	.word	0xbffdfff8
 8001cc0:	cccccccd 	.word	0xcccccccd
 8001cc4:	40020000 	.word	0x40020000
 8001cc8:	bffdfbf8 	.word	0xbffdfbf8
 8001ccc:	40020400 	.word	0x40020400

08001cd0 <HAL_DMA_Start_IT>:
{
 8001cd0:	b538      	push	{r3, r4, r5, lr}
 8001cd2:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8001cd4:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
 8001cd8:	2801      	cmp	r0, #1
 8001cda:	d041      	beq.n	8001d60 <HAL_DMA_Start_IT+0x90>
 8001cdc:	2001      	movs	r0, #1
 8001cde:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ce2:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
 8001ce6:	b2c0      	uxtb	r0, r0
 8001ce8:	2801      	cmp	r0, #1
 8001cea:	d004      	beq.n	8001cf6 <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);
 8001cec:	2300      	movs	r3, #0
 8001cee:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    status = HAL_BUSY;
 8001cf2:	2002      	movs	r0, #2
}
 8001cf4:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8001cf6:	2002      	movs	r0, #2
 8001cf8:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cfc:	2000      	movs	r0, #0
 8001cfe:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8001d00:	6825      	ldr	r5, [r4, #0]
 8001d02:	6828      	ldr	r0, [r5, #0]
 8001d04:	f020 0001 	bic.w	r0, r0, #1
 8001d08:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d0a:	4620      	mov	r0, r4
 8001d0c:	f7ff ff14 	bl	8001b38 <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback )
 8001d10:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001d12:	b1d3      	cbz	r3, 8001d4a <HAL_DMA_Start_IT+0x7a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d14:	6822      	ldr	r2, [r4, #0]
 8001d16:	6813      	ldr	r3, [r2, #0]
 8001d18:	f043 030e 	orr.w	r3, r3, #14
 8001d1c:	6013      	str	r3, [r2, #0]
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001d1e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8001d26:	d003      	beq.n	8001d30 <HAL_DMA_Start_IT+0x60>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d2e:	601a      	str	r2, [r3, #0]
    if(hdma->DMAmuxRequestGen != 0U)
 8001d30:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001d32:	b11b      	cbz	r3, 8001d3c <HAL_DMA_Start_IT+0x6c>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d3a:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8001d3c:	6822      	ldr	r2, [r4, #0]
 8001d3e:	6813      	ldr	r3, [r2, #0]
 8001d40:	f043 0301 	orr.w	r3, r3, #1
 8001d44:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d46:	2000      	movs	r0, #0
 8001d48:	e7d4      	b.n	8001cf4 <HAL_DMA_Start_IT+0x24>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d4a:	6822      	ldr	r2, [r4, #0]
 8001d4c:	6813      	ldr	r3, [r2, #0]
 8001d4e:	f023 0304 	bic.w	r3, r3, #4
 8001d52:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001d54:	6822      	ldr	r2, [r4, #0]
 8001d56:	6813      	ldr	r3, [r2, #0]
 8001d58:	f043 030a 	orr.w	r3, r3, #10
 8001d5c:	6013      	str	r3, [r2, #0]
 8001d5e:	e7de      	b.n	8001d1e <HAL_DMA_Start_IT+0x4e>
  __HAL_LOCK(hdma);
 8001d60:	2002      	movs	r0, #2
 8001d62:	e7c7      	b.n	8001cf4 <HAL_DMA_Start_IT+0x24>

08001d64 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d64:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d006      	beq.n	8001d7c <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d6e:	2304      	movs	r3, #4
 8001d70:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8001d72:	2300      	movs	r3, #0
 8001d74:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 8001d78:	2001      	movs	r0, #1
 8001d7a:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d7c:	6802      	ldr	r2, [r0, #0]
 8001d7e:	6813      	ldr	r3, [r2, #0]
 8001d80:	f023 030e 	bic.w	r3, r3, #14
 8001d84:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001d86:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8001d88:	6813      	ldr	r3, [r2, #0]
 8001d8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d8e:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001d90:	6802      	ldr	r2, [r0, #0]
 8001d92:	6813      	ldr	r3, [r2, #0]
 8001d94:	f023 0301 	bic.w	r3, r3, #1
 8001d98:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d9a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001d9c:	f003 021c 	and.w	r2, r3, #28
 8001da0:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001da2:	2301      	movs	r3, #1
 8001da4:	4093      	lsls	r3, r2
 8001da6:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001da8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001daa:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8001dac:	605a      	str	r2, [r3, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8001dae:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001db0:	b133      	cbz	r3, 8001dc0 <HAL_DMA_Abort+0x5c>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001db8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001dba:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8001dbc:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001dbe:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    return status;
 8001dcc:	4618      	mov	r0, r3
}
 8001dce:	4770      	bx	lr

08001dd0 <HAL_DMA_Abort_IT>:
{
 8001dd0:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001dd2:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d003      	beq.n	8001de4 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ddc:	2304      	movs	r3, #4
 8001dde:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8001de0:	2001      	movs	r0, #1
}
 8001de2:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001de4:	6802      	ldr	r2, [r0, #0]
 8001de6:	6813      	ldr	r3, [r2, #0]
 8001de8:	f023 030e 	bic.w	r3, r3, #14
 8001dec:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001dee:	6802      	ldr	r2, [r0, #0]
 8001df0:	6813      	ldr	r3, [r2, #0]
 8001df2:	f023 0301 	bic.w	r3, r3, #1
 8001df6:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001df8:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8001dfa:	6813      	ldr	r3, [r2, #0]
 8001dfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e00:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e02:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001e04:	f003 021c 	and.w	r2, r3, #28
 8001e08:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	4093      	lsls	r3, r2
 8001e0e:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e10:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001e12:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8001e14:	605a      	str	r2, [r3, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8001e16:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001e18:	b133      	cbz	r3, 8001e28 <HAL_DMA_Abort_IT+0x58>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e20:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e22:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8001e24:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001e26:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8001e2e:	2300      	movs	r3, #0
 8001e30:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferAbortCallback != NULL)
 8001e34:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001e36:	b113      	cbz	r3, 8001e3e <HAL_DMA_Abort_IT+0x6e>
      hdma->XferAbortCallback(hdma);
 8001e38:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8001e3a:	2000      	movs	r0, #0
 8001e3c:	e7d1      	b.n	8001de2 <HAL_DMA_Abort_IT+0x12>
 8001e3e:	2000      	movs	r0, #0
 8001e40:	e7cf      	b.n	8001de2 <HAL_DMA_Abort_IT+0x12>

08001e42 <HAL_DMA_IRQHandler>:
{
 8001e42:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001e44:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001e46:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001e48:	6804      	ldr	r4, [r0, #0]
 8001e4a:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001e4c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001e4e:	f003 031c 	and.w	r3, r3, #28
 8001e52:	2204      	movs	r2, #4
 8001e54:	409a      	lsls	r2, r3
 8001e56:	420a      	tst	r2, r1
 8001e58:	d015      	beq.n	8001e86 <HAL_DMA_IRQHandler+0x44>
 8001e5a:	f015 0f04 	tst.w	r5, #4
 8001e5e:	d012      	beq.n	8001e86 <HAL_DMA_IRQHandler+0x44>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e60:	6823      	ldr	r3, [r4, #0]
 8001e62:	f013 0f20 	tst.w	r3, #32
 8001e66:	d103      	bne.n	8001e70 <HAL_DMA_IRQHandler+0x2e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e68:	6823      	ldr	r3, [r4, #0]
 8001e6a:	f023 0304 	bic.w	r3, r3, #4
 8001e6e:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001e70:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001e72:	f003 021c 	and.w	r2, r3, #28
 8001e76:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001e78:	2304      	movs	r3, #4
 8001e7a:	4093      	lsls	r3, r2
 8001e7c:	604b      	str	r3, [r1, #4]
      if(hdma->XferHalfCpltCallback != NULL)
 8001e7e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001e80:	b103      	cbz	r3, 8001e84 <HAL_DMA_IRQHandler+0x42>
        hdma->XferHalfCpltCallback(hdma);
 8001e82:	4798      	blx	r3
}
 8001e84:	bd38      	pop	{r3, r4, r5, pc}
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001e86:	2202      	movs	r2, #2
 8001e88:	409a      	lsls	r2, r3
 8001e8a:	420a      	tst	r2, r1
 8001e8c:	d01c      	beq.n	8001ec8 <HAL_DMA_IRQHandler+0x86>
 8001e8e:	f015 0f02 	tst.w	r5, #2
 8001e92:	d019      	beq.n	8001ec8 <HAL_DMA_IRQHandler+0x86>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e94:	6823      	ldr	r3, [r4, #0]
 8001e96:	f013 0f20 	tst.w	r3, #32
 8001e9a:	d106      	bne.n	8001eaa <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001e9c:	6823      	ldr	r3, [r4, #0]
 8001e9e:	f023 030a 	bic.w	r3, r3, #10
 8001ea2:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001eaa:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001eac:	f003 021c 	and.w	r2, r3, #28
 8001eb0:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	4093      	lsls	r3, r2
 8001eb6:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);
 8001eb8:	2300      	movs	r3, #0
 8001eba:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferCpltCallback != NULL)
 8001ebe:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d0df      	beq.n	8001e84 <HAL_DMA_IRQHandler+0x42>
      hdma->XferCpltCallback(hdma);
 8001ec4:	4798      	blx	r3
 8001ec6:	e7dd      	b.n	8001e84 <HAL_DMA_IRQHandler+0x42>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001ec8:	2208      	movs	r2, #8
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	420b      	tst	r3, r1
 8001ed0:	d0d8      	beq.n	8001e84 <HAL_DMA_IRQHandler+0x42>
 8001ed2:	f015 0f08 	tst.w	r5, #8
 8001ed6:	d0d5      	beq.n	8001e84 <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ed8:	6823      	ldr	r3, [r4, #0]
 8001eda:	f023 030e 	bic.w	r3, r3, #14
 8001ede:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ee0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001ee2:	f003 031c 	and.w	r3, r3, #28
 8001ee6:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001ee8:	2201      	movs	r2, #1
 8001eea:	fa02 f303 	lsl.w	r3, r2, r3
 8001eee:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001ef0:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8001ef2:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8001efc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d0c0      	beq.n	8001e84 <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 8001f02:	4798      	blx	r3
  return;
 8001f04:	e7be      	b.n	8001e84 <HAL_DMA_IRQHandler+0x42>

08001f06 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8001f06:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
}
 8001f08:	4770      	bx	lr
	...

08001f0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f0e:	b083      	sub	sp, #12
  uint32_t position = 0x00u;
 8001f10:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f12:	e062      	b.n	8001fda <HAL_GPIO_Init+0xce>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f14:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001f16:	005e      	lsls	r6, r3, #1
 8001f18:	2403      	movs	r4, #3
 8001f1a:	40b4      	lsls	r4, r6
 8001f1c:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f20:	68cc      	ldr	r4, [r1, #12]
 8001f22:	40b4      	lsls	r4, r6
 8001f24:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8001f26:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f28:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f2a:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f2e:	684c      	ldr	r4, [r1, #4]
 8001f30:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8001f34:	409c      	lsls	r4, r3
 8001f36:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8001f38:	6044      	str	r4, [r0, #4]
 8001f3a:	e060      	b.n	8001ffe <HAL_GPIO_Init+0xf2>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f3c:	08dd      	lsrs	r5, r3, #3
 8001f3e:	3508      	adds	r5, #8
 8001f40:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f44:	f003 0c07 	and.w	ip, r3, #7
 8001f48:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001f4c:	f04f 0e0f 	mov.w	lr, #15
 8001f50:	fa0e fe0c 	lsl.w	lr, lr, ip
 8001f54:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f58:	690c      	ldr	r4, [r1, #16]
 8001f5a:	fa04 f40c 	lsl.w	r4, r4, ip
 8001f5e:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3u] = temp;
 8001f62:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8001f66:	e061      	b.n	800202c <HAL_GPIO_Init+0x120>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f68:	2407      	movs	r4, #7
 8001f6a:	e000      	b.n	8001f6e <HAL_GPIO_Init+0x62>
 8001f6c:	2400      	movs	r4, #0
 8001f6e:	fa04 f40e 	lsl.w	r4, r4, lr
 8001f72:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f74:	f10c 0c02 	add.w	ip, ip, #2
 8001f78:	4d5c      	ldr	r5, [pc, #368]	; (80020ec <HAL_GPIO_Init+0x1e0>)
 8001f7a:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f7e:	4c5c      	ldr	r4, [pc, #368]	; (80020f0 <HAL_GPIO_Init+0x1e4>)
 8001f80:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 8001f82:	43d4      	mvns	r4, r2
 8001f84:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f88:	684f      	ldr	r7, [r1, #4]
 8001f8a:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8001f8e:	d001      	beq.n	8001f94 <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 8001f90:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8001f94:	4d56      	ldr	r5, [pc, #344]	; (80020f0 <HAL_GPIO_Init+0x1e4>)
 8001f96:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 8001f98:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 8001f9a:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f9e:	684f      	ldr	r7, [r1, #4]
 8001fa0:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
 8001fa4:	d001      	beq.n	8001faa <HAL_GPIO_Init+0x9e>
        {
          temp |= iocurrent;
 8001fa6:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 8001faa:	4d51      	ldr	r5, [pc, #324]	; (80020f0 <HAL_GPIO_Init+0x1e4>)
 8001fac:	60ee      	str	r6, [r5, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001fae:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8001fb0:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001fb4:	684f      	ldr	r7, [r1, #4]
 8001fb6:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8001fba:	d001      	beq.n	8001fc0 <HAL_GPIO_Init+0xb4>
        {
          temp |= iocurrent;
 8001fbc:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 8001fc0:	4d4b      	ldr	r5, [pc, #300]	; (80020f0 <HAL_GPIO_Init+0x1e4>)
 8001fc2:	606e      	str	r6, [r5, #4]

        temp = EXTI->IMR1;
 8001fc4:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 8001fc6:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001fc8:	684e      	ldr	r6, [r1, #4]
 8001fca:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 8001fce:	d001      	beq.n	8001fd4 <HAL_GPIO_Init+0xc8>
        {
          temp |= iocurrent;
 8001fd0:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->IMR1 = temp;
 8001fd4:	4a46      	ldr	r2, [pc, #280]	; (80020f0 <HAL_GPIO_Init+0x1e4>)
 8001fd6:	6014      	str	r4, [r2, #0]
      }
    }

    position++;
 8001fd8:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fda:	680a      	ldr	r2, [r1, #0]
 8001fdc:	fa32 f403 	lsrs.w	r4, r2, r3
 8001fe0:	f000 8081 	beq.w	80020e6 <HAL_GPIO_Init+0x1da>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001fe4:	f04f 0c01 	mov.w	ip, #1
 8001fe8:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 8001fec:	ea1c 0202 	ands.w	r2, ip, r2
 8001ff0:	d0f2      	beq.n	8001fd8 <HAL_GPIO_Init+0xcc>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ff2:	684c      	ldr	r4, [r1, #4]
 8001ff4:	f004 0403 	and.w	r4, r4, #3
 8001ff8:	3c01      	subs	r4, #1
 8001ffa:	2c01      	cmp	r4, #1
 8001ffc:	d98a      	bls.n	8001f14 <HAL_GPIO_Init+0x8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ffe:	684c      	ldr	r4, [r1, #4]
 8002000:	f004 0403 	and.w	r4, r4, #3
 8002004:	2c03      	cmp	r4, #3
 8002006:	d00c      	beq.n	8002022 <HAL_GPIO_Init+0x116>
        temp = GPIOx->PUPDR;
 8002008:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800200a:	005d      	lsls	r5, r3, #1
 800200c:	f04f 0c03 	mov.w	ip, #3
 8002010:	fa0c fc05 	lsl.w	ip, ip, r5
 8002014:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002018:	688c      	ldr	r4, [r1, #8]
 800201a:	40ac      	lsls	r4, r5
 800201c:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 8002020:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002022:	684c      	ldr	r4, [r1, #4]
 8002024:	f004 0403 	and.w	r4, r4, #3
 8002028:	2c02      	cmp	r4, #2
 800202a:	d087      	beq.n	8001f3c <HAL_GPIO_Init+0x30>
      temp = GPIOx->MODER;
 800202c:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800202e:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8002032:	f04f 0c03 	mov.w	ip, #3
 8002036:	fa0c fc0e 	lsl.w	ip, ip, lr
 800203a:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800203e:	684c      	ldr	r4, [r1, #4]
 8002040:	f004 0403 	and.w	r4, r4, #3
 8002044:	fa04 f40e 	lsl.w	r4, r4, lr
 8002048:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 800204c:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800204e:	684c      	ldr	r4, [r1, #4]
 8002050:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 8002054:	d0c0      	beq.n	8001fd8 <HAL_GPIO_Init+0xcc>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002056:	4c27      	ldr	r4, [pc, #156]	; (80020f4 <HAL_GPIO_Init+0x1e8>)
 8002058:	6e25      	ldr	r5, [r4, #96]	; 0x60
 800205a:	f045 0501 	orr.w	r5, r5, #1
 800205e:	6625      	str	r5, [r4, #96]	; 0x60
 8002060:	6e24      	ldr	r4, [r4, #96]	; 0x60
 8002062:	f004 0401 	and.w	r4, r4, #1
 8002066:	9401      	str	r4, [sp, #4]
 8002068:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 800206a:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 800206e:	f10c 0502 	add.w	r5, ip, #2
 8002072:	4c1e      	ldr	r4, [pc, #120]	; (80020ec <HAL_GPIO_Init+0x1e0>)
 8002074:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002078:	f003 0e03 	and.w	lr, r3, #3
 800207c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8002080:	240f      	movs	r4, #15
 8002082:	fa04 f40e 	lsl.w	r4, r4, lr
 8002086:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800208a:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 800208e:	f43f af6d 	beq.w	8001f6c <HAL_GPIO_Init+0x60>
 8002092:	4c19      	ldr	r4, [pc, #100]	; (80020f8 <HAL_GPIO_Init+0x1ec>)
 8002094:	42a0      	cmp	r0, r4
 8002096:	d01a      	beq.n	80020ce <HAL_GPIO_Init+0x1c2>
 8002098:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800209c:	42a0      	cmp	r0, r4
 800209e:	d018      	beq.n	80020d2 <HAL_GPIO_Init+0x1c6>
 80020a0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80020a4:	42a0      	cmp	r0, r4
 80020a6:	d016      	beq.n	80020d6 <HAL_GPIO_Init+0x1ca>
 80020a8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80020ac:	42a0      	cmp	r0, r4
 80020ae:	d014      	beq.n	80020da <HAL_GPIO_Init+0x1ce>
 80020b0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80020b4:	42a0      	cmp	r0, r4
 80020b6:	d012      	beq.n	80020de <HAL_GPIO_Init+0x1d2>
 80020b8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80020bc:	42a0      	cmp	r0, r4
 80020be:	d010      	beq.n	80020e2 <HAL_GPIO_Init+0x1d6>
 80020c0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80020c4:	42a0      	cmp	r0, r4
 80020c6:	f43f af4f 	beq.w	8001f68 <HAL_GPIO_Init+0x5c>
 80020ca:	2408      	movs	r4, #8
 80020cc:	e74f      	b.n	8001f6e <HAL_GPIO_Init+0x62>
 80020ce:	2401      	movs	r4, #1
 80020d0:	e74d      	b.n	8001f6e <HAL_GPIO_Init+0x62>
 80020d2:	2402      	movs	r4, #2
 80020d4:	e74b      	b.n	8001f6e <HAL_GPIO_Init+0x62>
 80020d6:	2403      	movs	r4, #3
 80020d8:	e749      	b.n	8001f6e <HAL_GPIO_Init+0x62>
 80020da:	2404      	movs	r4, #4
 80020dc:	e747      	b.n	8001f6e <HAL_GPIO_Init+0x62>
 80020de:	2405      	movs	r4, #5
 80020e0:	e745      	b.n	8001f6e <HAL_GPIO_Init+0x62>
 80020e2:	2406      	movs	r4, #6
 80020e4:	e743      	b.n	8001f6e <HAL_GPIO_Init+0x62>
  }
}
 80020e6:	b003      	add	sp, #12
 80020e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020ea:	bf00      	nop
 80020ec:	40010000 	.word	0x40010000
 80020f0:	40010400 	.word	0x40010400
 80020f4:	40021000 	.word	0x40021000
 80020f8:	48000400 	.word	0x48000400

080020fc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020fc:	b10a      	cbz	r2, 8002102 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020fe:	6181      	str	r1, [r0, #24]
 8002100:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002102:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8002104:	4770      	bx	lr

08002106 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002106:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002108:	ea01 0203 	and.w	r2, r1, r3
 800210c:	ea21 0103 	bic.w	r1, r1, r3
 8002110:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8002114:	6181      	str	r1, [r0, #24]
}
 8002116:	4770      	bx	lr

08002118 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800211a:	6806      	ldr	r6, [r0, #0]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800211c:	6a34      	ldr	r4, [r6, #32]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800211e:	f004 070f 	and.w	r7, r4, #15
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002122:	f3c4 4343 	ubfx	r3, r4, #17, #4
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002126:	f3c4 140a 	ubfx	r4, r4, #4, #11

  switch (pktsts)
 800212a:	2b02      	cmp	r3, #2
 800212c:	d000      	beq.n	8002130 <HCD_RXQLVL_IRQHandler+0x18>
    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
  }
}
 800212e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002130:	4605      	mov	r5, r0
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002132:	2c00      	cmp	r4, #0
 8002134:	d0fb      	beq.n	800212e <HCD_RXQLVL_IRQHandler+0x16>
 8002136:	232c      	movs	r3, #44	; 0x2c
 8002138:	fb03 0307 	mla	r3, r3, r7, r0
 800213c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800213e:	2900      	cmp	r1, #0
 8002140:	d0f5      	beq.n	800212e <HCD_RXQLVL_IRQHandler+0x16>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002142:	232c      	movs	r3, #44	; 0x2c
 8002144:	fb03 0307 	mla	r3, r3, r7, r0
 8002148:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800214a:	4422      	add	r2, r4
 800214c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800214e:	429a      	cmp	r2, r3
 8002150:	d906      	bls.n	8002160 <HCD_RXQLVL_IRQHandler+0x48>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002152:	232c      	movs	r3, #44	; 0x2c
 8002154:	fb03 0507 	mla	r5, r3, r7, r0
 8002158:	2304      	movs	r3, #4
 800215a:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
}
 800215e:	e7e6      	b.n	800212e <HCD_RXQLVL_IRQHandler+0x16>
          (void)USB_ReadPacket(hhcd->Instance,
 8002160:	4622      	mov	r2, r4
 8002162:	4630      	mov	r0, r6
 8002164:	f003 ff0e 	bl	8005f84 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002168:	232c      	movs	r3, #44	; 0x2c
 800216a:	fb03 5307 	mla	r3, r3, r7, r5
 800216e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002170:	4422      	add	r2, r4
 8002172:	645a      	str	r2, [r3, #68]	; 0x44
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002174:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002176:	4422      	add	r2, r4
 8002178:	651a      	str	r2, [r3, #80]	; 0x50
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800217a:	eb06 1647 	add.w	r6, r6, r7, lsl #5
 800217e:	f8d6 2510 	ldr.w	r2, [r6, #1296]	; 0x510
 8002182:	f3c2 42c9 	ubfx	r2, r2, #19, #10
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002186:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800218a:	42a3      	cmp	r3, r4
 800218c:	d1cf      	bne.n	800212e <HCD_RXQLVL_IRQHandler+0x16>
 800218e:	2a00      	cmp	r2, #0
 8002190:	d0cd      	beq.n	800212e <HCD_RXQLVL_IRQHandler+0x16>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002192:	f8d6 3500 	ldr.w	r3, [r6, #1280]	; 0x500
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002196:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800219a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800219e:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80021a2:	232c      	movs	r3, #44	; 0x2c
 80021a4:	fb03 5307 	mla	r3, r3, r7, r5
 80021a8:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 80021ac:	f082 0201 	eor.w	r2, r2, #1
 80021b0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80021b4:	e7bb      	b.n	800212e <HCD_RXQLVL_IRQHandler+0x16>

080021b6 <HAL_HCD_HC_Init>:
{
 80021b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021b8:	b085      	sub	sp, #20
 80021ba:	4604      	mov	r4, r0
 80021bc:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
 80021c0:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
 80021c4:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
  __HAL_LOCK(hhcd);
 80021c8:	f890 02f8 	ldrb.w	r0, [r0, #760]	; 0x2f8
 80021cc:	2801      	cmp	r0, #1
 80021ce:	d037      	beq.n	8002240 <HAL_HCD_HC_Init+0x8a>
 80021d0:	2001      	movs	r0, #1
 80021d2:	f884 02f8 	strb.w	r0, [r4, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80021d6:	202c      	movs	r0, #44	; 0x2c
 80021d8:	fb00 4001 	mla	r0, r0, r1, r4
 80021dc:	f04f 0c00 	mov.w	ip, #0
 80021e0:	f880 c03d 	strb.w	ip, [r0, #61]	; 0x3d
  hhcd->hc[ch_num].dev_addr = dev_address;
 80021e4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hhcd->hc[ch_num].max_packet = mps;
 80021e8:	f8a0 7040 	strh.w	r7, [r0, #64]	; 0x40
  hhcd->hc[ch_num].ch_num = ch_num;
 80021ec:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
  hhcd->hc[ch_num].ep_type = ep_type;
 80021f0:	f880 603f 	strb.w	r6, [r0, #63]	; 0x3f
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80021f4:	f002 0c7f 	and.w	ip, r2, #127	; 0x7f
 80021f8:	f880 c03a 	strb.w	ip, [r0, #58]	; 0x3a
  if ((epnum & 0x80U) == 0x80U)
 80021fc:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002200:	d116      	bne.n	8002230 <HAL_HCD_HC_Init+0x7a>
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002202:	202c      	movs	r0, #44	; 0x2c
 8002204:	fb00 4001 	mla	r0, r0, r1, r4
 8002208:	f04f 0c00 	mov.w	ip, #0
 800220c:	f880 c03b 	strb.w	ip, [r0, #59]	; 0x3b
  hhcd->hc[ch_num].speed = speed;
 8002210:	202c      	movs	r0, #44	; 0x2c
 8002212:	fb00 4001 	mla	r0, r0, r1, r4
 8002216:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  status =  USB_HC_Init(hhcd->Instance,
 800221a:	9702      	str	r7, [sp, #8]
 800221c:	9601      	str	r6, [sp, #4]
 800221e:	9500      	str	r5, [sp, #0]
 8002220:	6820      	ldr	r0, [r4, #0]
 8002222:	f003 ffcc 	bl	80061be <USB_HC_Init>
  __HAL_UNLOCK(hhcd);
 8002226:	2300      	movs	r3, #0
 8002228:	f884 32f8 	strb.w	r3, [r4, #760]	; 0x2f8
}
 800222c:	b005      	add	sp, #20
 800222e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002230:	202c      	movs	r0, #44	; 0x2c
 8002232:	fb00 4001 	mla	r0, r0, r1, r4
 8002236:	f04f 0c01 	mov.w	ip, #1
 800223a:	f880 c03b 	strb.w	ip, [r0, #59]	; 0x3b
 800223e:	e7e7      	b.n	8002210 <HAL_HCD_HC_Init+0x5a>
  __HAL_LOCK(hhcd);
 8002240:	2002      	movs	r0, #2
 8002242:	e7f3      	b.n	800222c <HAL_HCD_HC_Init+0x76>

08002244 <HAL_HCD_HC_Halt>:
  __HAL_LOCK(hhcd);
 8002244:	f890 32f8 	ldrb.w	r3, [r0, #760]	; 0x2f8
 8002248:	2b01      	cmp	r3, #1
 800224a:	d00b      	beq.n	8002264 <HAL_HCD_HC_Halt+0x20>
{
 800224c:	b510      	push	{r4, lr}
 800224e:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8002250:	2301      	movs	r3, #1
 8002252:	f880 32f8 	strb.w	r3, [r0, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002256:	6800      	ldr	r0, [r0, #0]
 8002258:	f004 f8cf 	bl	80063fa <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800225c:	2000      	movs	r0, #0
 800225e:	f884 02f8 	strb.w	r0, [r4, #760]	; 0x2f8
}
 8002262:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8002264:	2002      	movs	r0, #2
}
 8002266:	4770      	bx	lr

08002268 <HAL_HCD_Init>:
  if (hhcd == NULL)
 8002268:	2800      	cmp	r0, #0
 800226a:	d04d      	beq.n	8002308 <HAL_HCD_Init+0xa0>
{
 800226c:	b570      	push	{r4, r5, r6, lr}
 800226e:	b08a      	sub	sp, #40	; 0x28
 8002270:	4604      	mov	r4, r0
  USBx = hhcd->Instance;
 8002272:	6805      	ldr	r5, [r0, #0]
  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002274:	f890 32f9 	ldrb.w	r3, [r0, #761]	; 0x2f9
 8002278:	2b00      	cmp	r3, #0
 800227a:	d040      	beq.n	80022fe <HAL_HCD_Init+0x96>
  hhcd->State = HAL_HCD_STATE_BUSY;
 800227c:	2303      	movs	r3, #3
 800227e:	f884 32f9 	strb.w	r3, [r4, #761]	; 0x2f9
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002282:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8002284:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002288:	d101      	bne.n	800228e <HAL_HCD_Init+0x26>
    hhcd->Init.dma_enable = 0U;
 800228a:	2300      	movs	r3, #0
 800228c:	6123      	str	r3, [r4, #16]
  __HAL_HCD_DISABLE(hhcd);
 800228e:	6820      	ldr	r0, [r4, #0]
 8002290:	f003 fe10 	bl	8005eb4 <USB_DisableGlobalInt>
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002294:	46a4      	mov	ip, r4
 8002296:	f85c 6b10 	ldr.w	r6, [ip], #16
 800229a:	46ee      	mov	lr, sp
 800229c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80022a0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80022a4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80022a8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80022ac:	e89c 0003 	ldmia.w	ip, {r0, r1}
 80022b0:	e88e 0003 	stmia.w	lr, {r0, r1}
 80022b4:	1d25      	adds	r5, r4, #4
 80022b6:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80022ba:	4630      	mov	r0, r6
 80022bc:	f003 fdd8 	bl	8005e70 <USB_CoreInit>
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80022c0:	2101      	movs	r1, #1
 80022c2:	6820      	ldr	r0, [r4, #0]
 80022c4:	f003 fe89 	bl	8005fda <USB_SetCurrentMode>
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80022c8:	46a4      	mov	ip, r4
 80022ca:	f85c 6b10 	ldr.w	r6, [ip], #16
 80022ce:	46ee      	mov	lr, sp
 80022d0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80022d4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80022d8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80022dc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80022e0:	e89c 0003 	ldmia.w	ip, {r0, r1}
 80022e4:	e88e 0003 	stmia.w	lr, {r0, r1}
 80022e8:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80022ec:	4630      	mov	r0, r6
 80022ee:	f003 fea5 	bl	800603c <USB_HostInit>
  hhcd->State = HAL_HCD_STATE_READY;
 80022f2:	2301      	movs	r3, #1
 80022f4:	f884 32f9 	strb.w	r3, [r4, #761]	; 0x2f9
  return HAL_OK;
 80022f8:	2000      	movs	r0, #0
}
 80022fa:	b00a      	add	sp, #40	; 0x28
 80022fc:	bd70      	pop	{r4, r5, r6, pc}
    hhcd->Lock = HAL_UNLOCKED;
 80022fe:	f880 32f8 	strb.w	r3, [r0, #760]	; 0x2f8
    HAL_HCD_MspInit(hhcd);
 8002302:	f006 f8fd 	bl	8008500 <HAL_HCD_MspInit>
 8002306:	e7b9      	b.n	800227c <HAL_HCD_Init+0x14>
    return HAL_ERROR;
 8002308:	2001      	movs	r0, #1
}
 800230a:	4770      	bx	lr

0800230c <HAL_HCD_HC_SubmitRequest>:
{
 800230c:	b570      	push	{r4, r5, r6, lr}
 800230e:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8002312:	f8bd 6018 	ldrh.w	r6, [sp, #24]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002316:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
 800231a:	fb0c 0c01 	mla	ip, ip, r1, r0
 800231e:	f88c 203b 	strb.w	r2, [ip, #59]	; 0x3b
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002322:	f88c 303f 	strb.w	r3, [ip, #63]	; 0x3f
  if (token == 0U)
 8002326:	b97d      	cbnz	r5, 8002348 <HAL_HCD_HC_SubmitRequest+0x3c>
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002328:	4664      	mov	r4, ip
 800232a:	f04f 0c03 	mov.w	ip, #3
 800232e:	f884 c042 	strb.w	ip, [r4, #66]	; 0x42
    hhcd->hc[ch_num].do_ping = do_ping;
 8002332:	f89d c01c 	ldrb.w	ip, [sp, #28]
 8002336:	f884 c03d 	strb.w	ip, [r4, #61]	; 0x3d
  switch (ep_type)
 800233a:	2b03      	cmp	r3, #3
 800233c:	f200 8081 	bhi.w	8002442 <HAL_HCD_HC_SubmitRequest+0x136>
 8002340:	e8df f003 	tbb	[pc, r3]
 8002344:	5129790a 	.word	0x5129790a
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002348:	242c      	movs	r4, #44	; 0x2c
 800234a:	fb04 0401 	mla	r4, r4, r1, r0
 800234e:	f04f 0c02 	mov.w	ip, #2
 8002352:	f884 c042 	strb.w	ip, [r4, #66]	; 0x42
 8002356:	e7f0      	b.n	800233a <HAL_HCD_HC_SubmitRequest+0x2e>
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002358:	2d01      	cmp	r5, #1
 800235a:	d172      	bne.n	8002442 <HAL_HCD_HC_SubmitRequest+0x136>
 800235c:	2a00      	cmp	r2, #0
 800235e:	d170      	bne.n	8002442 <HAL_HCD_HC_SubmitRequest+0x136>
        if (length == 0U)
 8002360:	b92e      	cbnz	r6, 800236e <HAL_HCD_HC_SubmitRequest+0x62>
          hhcd->hc[ch_num].toggle_out = 1U;
 8002362:	232c      	movs	r3, #44	; 0x2c
 8002364:	fb03 0301 	mla	r3, r3, r1, r0
 8002368:	2201      	movs	r2, #1
 800236a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800236e:	232c      	movs	r3, #44	; 0x2c
 8002370:	fb03 0301 	mla	r3, r3, r1, r0
 8002374:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002378:	b933      	cbnz	r3, 8002388 <HAL_HCD_HC_SubmitRequest+0x7c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800237a:	232c      	movs	r3, #44	; 0x2c
 800237c:	fb03 0301 	mla	r3, r3, r1, r0
 8002380:	2200      	movs	r2, #0
 8002382:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002386:	e05c      	b.n	8002442 <HAL_HCD_HC_SubmitRequest+0x136>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002388:	232c      	movs	r3, #44	; 0x2c
 800238a:	fb03 0301 	mla	r3, r3, r1, r0
 800238e:	2202      	movs	r2, #2
 8002390:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002394:	e055      	b.n	8002442 <HAL_HCD_HC_SubmitRequest+0x136>
      if (direction == 0U)
 8002396:	b992      	cbnz	r2, 80023be <HAL_HCD_HC_SubmitRequest+0xb2>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002398:	232c      	movs	r3, #44	; 0x2c
 800239a:	fb03 0301 	mla	r3, r3, r1, r0
 800239e:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80023a2:	b92b      	cbnz	r3, 80023b0 <HAL_HCD_HC_SubmitRequest+0xa4>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80023a4:	232c      	movs	r3, #44	; 0x2c
 80023a6:	fb03 0301 	mla	r3, r3, r1, r0
 80023aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023ae:	e048      	b.n	8002442 <HAL_HCD_HC_SubmitRequest+0x136>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023b0:	232c      	movs	r3, #44	; 0x2c
 80023b2:	fb03 0301 	mla	r3, r3, r1, r0
 80023b6:	2202      	movs	r2, #2
 80023b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023bc:	e041      	b.n	8002442 <HAL_HCD_HC_SubmitRequest+0x136>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80023be:	232c      	movs	r3, #44	; 0x2c
 80023c0:	fb03 0301 	mla	r3, r3, r1, r0
 80023c4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80023c8:	b933      	cbnz	r3, 80023d8 <HAL_HCD_HC_SubmitRequest+0xcc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80023ca:	232c      	movs	r3, #44	; 0x2c
 80023cc:	fb03 0301 	mla	r3, r3, r1, r0
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023d6:	e034      	b.n	8002442 <HAL_HCD_HC_SubmitRequest+0x136>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023d8:	232c      	movs	r3, #44	; 0x2c
 80023da:	fb03 0301 	mla	r3, r3, r1, r0
 80023de:	2202      	movs	r2, #2
 80023e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023e4:	e02d      	b.n	8002442 <HAL_HCD_HC_SubmitRequest+0x136>
      if (direction == 0U)
 80023e6:	b992      	cbnz	r2, 800240e <HAL_HCD_HC_SubmitRequest+0x102>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80023e8:	232c      	movs	r3, #44	; 0x2c
 80023ea:	fb03 0301 	mla	r3, r3, r1, r0
 80023ee:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80023f2:	b92b      	cbnz	r3, 8002400 <HAL_HCD_HC_SubmitRequest+0xf4>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80023f4:	232c      	movs	r3, #44	; 0x2c
 80023f6:	fb03 0301 	mla	r3, r3, r1, r0
 80023fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023fe:	e020      	b.n	8002442 <HAL_HCD_HC_SubmitRequest+0x136>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002400:	232c      	movs	r3, #44	; 0x2c
 8002402:	fb03 0301 	mla	r3, r3, r1, r0
 8002406:	2202      	movs	r2, #2
 8002408:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800240c:	e019      	b.n	8002442 <HAL_HCD_HC_SubmitRequest+0x136>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800240e:	232c      	movs	r3, #44	; 0x2c
 8002410:	fb03 0301 	mla	r3, r3, r1, r0
 8002414:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002418:	b933      	cbnz	r3, 8002428 <HAL_HCD_HC_SubmitRequest+0x11c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800241a:	232c      	movs	r3, #44	; 0x2c
 800241c:	fb03 0301 	mla	r3, r3, r1, r0
 8002420:	2200      	movs	r2, #0
 8002422:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002426:	e00c      	b.n	8002442 <HAL_HCD_HC_SubmitRequest+0x136>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002428:	232c      	movs	r3, #44	; 0x2c
 800242a:	fb03 0301 	mla	r3, r3, r1, r0
 800242e:	2202      	movs	r2, #2
 8002430:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002434:	e005      	b.n	8002442 <HAL_HCD_HC_SubmitRequest+0x136>
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002436:	232c      	movs	r3, #44	; 0x2c
 8002438:	fb03 0301 	mla	r3, r3, r1, r0
 800243c:	2200      	movs	r2, #0
 800243e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002442:	232c      	movs	r3, #44	; 0x2c
 8002444:	fb01 f303 	mul.w	r3, r1, r3
 8002448:	18c2      	adds	r2, r0, r3
 800244a:	9c05      	ldr	r4, [sp, #20]
 800244c:	6454      	str	r4, [r2, #68]	; 0x44
  hhcd->hc[ch_num].xfer_len  = length;
 800244e:	64d6      	str	r6, [r2, #76]	; 0x4c
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002450:	2400      	movs	r4, #0
 8002452:	f882 4060 	strb.w	r4, [r2, #96]	; 0x60
  hhcd->hc[ch_num].xfer_count = 0U;
 8002456:	6514      	str	r4, [r2, #80]	; 0x50
  hhcd->hc[ch_num].ch_num = ch_num;
 8002458:	f882 1039 	strb.w	r1, [r2, #57]	; 0x39
  hhcd->hc[ch_num].state = HC_IDLE;
 800245c:	f882 4061 	strb.w	r4, [r2, #97]	; 0x61
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num]);
 8002460:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8002464:	4401      	add	r1, r0
 8002466:	6800      	ldr	r0, [r0, #0]
 8002468:	f003 ff32 	bl	80062d0 <USB_HC_StartXfer>
}
 800246c:	bd70      	pop	{r4, r5, r6, pc}

0800246e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800246e:	b530      	push	{r4, r5, lr}
 8002470:	b083      	sub	sp, #12
 8002472:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002474:	6805      	ldr	r5, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002476:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 800247a:	9301      	str	r3, [sp, #4]
  hprt0_dup = USBx_HPRT0;
 800247c:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 8002480:	9300      	str	r3, [sp, #0]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002482:	9b00      	ldr	r3, [sp, #0]
 8002484:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002488:	9300      	str	r3, [sp, #0]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800248a:	9b01      	ldr	r3, [sp, #4]
 800248c:	f013 0f02 	tst.w	r3, #2
 8002490:	d007      	beq.n	80024a2 <HCD_Port_IRQHandler+0x34>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002492:	9b01      	ldr	r3, [sp, #4]
 8002494:	f013 0f01 	tst.w	r3, #1
 8002498:	d125      	bne.n	80024e6 <HCD_Port_IRQHandler+0x78>
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800249a:	9b00      	ldr	r3, [sp, #0]
 800249c:	f043 0302 	orr.w	r3, r3, #2
 80024a0:	9300      	str	r3, [sp, #0]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80024a2:	9b01      	ldr	r3, [sp, #4]
 80024a4:	f013 0f08 	tst.w	r3, #8
 80024a8:	d010      	beq.n	80024cc <HCD_Port_IRQHandler+0x5e>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80024aa:	9b00      	ldr	r3, [sp, #0]
 80024ac:	f043 0308 	orr.w	r3, r3, #8
 80024b0:	9300      	str	r3, [sp, #0]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80024b2:	9b01      	ldr	r3, [sp, #4]
 80024b4:	f013 0f04 	tst.w	r3, #4
 80024b8:	d02d      	beq.n	8002516 <HCD_Port_IRQHandler+0xa8>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80024ba:	69a3      	ldr	r3, [r4, #24]
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d015      	beq.n	80024ec <HCD_Port_IRQHandler+0x7e>
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80024c0:	68e3      	ldr	r3, [r4, #12]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d022      	beq.n	800250c <HCD_Port_IRQHandler+0x9e>
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80024c6:	4620      	mov	r0, r4
 80024c8:	f006 f89f 	bl	800860a <HAL_HCD_PortEnabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80024cc:	9b01      	ldr	r3, [sp, #4]
 80024ce:	f013 0f20 	tst.w	r3, #32
 80024d2:	d003      	beq.n	80024dc <HCD_Port_IRQHandler+0x6e>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80024d4:	9b00      	ldr	r3, [sp, #0]
 80024d6:	f043 0320 	orr.w	r3, r3, #32
 80024da:	9300      	str	r3, [sp, #0]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80024dc:	9b00      	ldr	r3, [sp, #0]
 80024de:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
}
 80024e2:	b003      	add	sp, #12
 80024e4:	bd30      	pop	{r4, r5, pc}
      HAL_HCD_Connect_Callback(hhcd);
 80024e6:	f006 f883 	bl	80085f0 <HAL_HCD_Connect_Callback>
 80024ea:	e7d6      	b.n	800249a <HCD_Port_IRQHandler+0x2c>
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80024ec:	9b01      	ldr	r3, [sp, #4]
 80024ee:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80024f2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80024f6:	d004      	beq.n	8002502 <HCD_Port_IRQHandler+0x94>
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80024f8:	2101      	movs	r1, #1
 80024fa:	6820      	ldr	r0, [r4, #0]
 80024fc:	f003 fdee 	bl	80060dc <USB_InitFSLSPClkSel>
 8002500:	e7e1      	b.n	80024c6 <HCD_Port_IRQHandler+0x58>
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002502:	2102      	movs	r1, #2
 8002504:	6820      	ldr	r0, [r4, #0]
 8002506:	f003 fde9 	bl	80060dc <USB_InitFSLSPClkSel>
 800250a:	e7dc      	b.n	80024c6 <HCD_Port_IRQHandler+0x58>
          USBx_HOST->HFIR = 60000U;
 800250c:	f64e 2260 	movw	r2, #60000	; 0xea60
 8002510:	f8c5 2404 	str.w	r2, [r5, #1028]	; 0x404
 8002514:	e7d7      	b.n	80024c6 <HCD_Port_IRQHandler+0x58>
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002516:	4620      	mov	r0, r4
 8002518:	f006 f87d 	bl	8008616 <HAL_HCD_PortDisabled_Callback>
 800251c:	e7d6      	b.n	80024cc <HCD_Port_IRQHandler+0x5e>

0800251e <HCD_HC_IN_IRQHandler>:
{
 800251e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002520:	4604      	mov	r4, r0
 8002522:	460e      	mov	r6, r1
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002524:	6807      	ldr	r7, [r0, #0]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002526:	eb07 1741 	add.w	r7, r7, r1, lsl #5
 800252a:	f507 65a0 	add.w	r5, r7, #1280	; 0x500
 800252e:	68ab      	ldr	r3, [r5, #8]
 8002530:	f013 0f04 	tst.w	r3, #4
 8002534:	d10a      	bne.n	800254c <HCD_HC_IN_IRQHandler+0x2e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002536:	68ab      	ldr	r3, [r5, #8]
 8002538:	f413 7f80 	tst.w	r3, #256	; 0x100
 800253c:	d13e      	bne.n	80025bc <HCD_HC_IN_IRQHandler+0x9e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800253e:	68ab      	ldr	r3, [r5, #8]
 8002540:	f013 0f20 	tst.w	r3, #32
 8002544:	d047      	beq.n	80025d6 <HCD_HC_IN_IRQHandler+0xb8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002546:	2320      	movs	r3, #32
 8002548:	60ab      	str	r3, [r5, #8]
 800254a:	e00a      	b.n	8002562 <HCD_HC_IN_IRQHandler+0x44>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800254c:	2304      	movs	r3, #4
 800254e:	60ab      	str	r3, [r5, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002550:	232c      	movs	r3, #44	; 0x2c
 8002552:	fb03 0301 	mla	r3, r3, r1, r0
 8002556:	2206      	movs	r2, #6
 8002558:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800255c:	6800      	ldr	r0, [r0, #0]
 800255e:	f003 ff4c 	bl	80063fa <USB_HC_Halt>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002562:	68ab      	ldr	r3, [r5, #8]
 8002564:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002568:	d166      	bne.n	8002638 <HCD_HC_IN_IRQHandler+0x11a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800256a:	68ab      	ldr	r3, [r5, #8]
 800256c:	f013 0f01 	tst.w	r3, #1
 8002570:	f000 8092 	beq.w	8002698 <HCD_HC_IN_IRQHandler+0x17a>
    hhcd->hc[ch_num].state = HC_XFRC;
 8002574:	232c      	movs	r3, #44	; 0x2c
 8002576:	fb03 4306 	mla	r3, r3, r6, r4
 800257a:	2201      	movs	r2, #1
 800257c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002580:	2100      	movs	r1, #0
 8002582:	65d9      	str	r1, [r3, #92]	; 0x5c
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002584:	60aa      	str	r2, [r5, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002586:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800258a:	2b00      	cmp	r3, #0
 800258c:	d05c      	beq.n	8002648 <HCD_HC_IN_IRQHandler+0x12a>
 800258e:	2b02      	cmp	r3, #2
 8002590:	d05a      	beq.n	8002648 <HCD_HC_IN_IRQHandler+0x12a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002592:	2b03      	cmp	r3, #3
 8002594:	d001      	beq.n	800259a <HCD_HC_IN_IRQHandler+0x7c>
 8002596:	2b01      	cmp	r3, #1
 8002598:	d15c      	bne.n	8002654 <HCD_HC_IN_IRQHandler+0x136>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800259a:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
 800259e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80025a2:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80025a6:	232c      	movs	r3, #44	; 0x2c
 80025a8:	fb03 4306 	mla	r3, r3, r6, r4
 80025ac:	2201      	movs	r2, #1
 80025ae:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80025b2:	4631      	mov	r1, r6
 80025b4:	4620      	mov	r0, r4
 80025b6:	f006 f827 	bl	8008608 <HAL_HCD_HC_NotifyURBChange_Callback>
 80025ba:	e04b      	b.n	8002654 <HCD_HC_IN_IRQHandler+0x136>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80025bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025c0:	60ab      	str	r3, [r5, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80025c2:	232c      	movs	r3, #44	; 0x2c
 80025c4:	fb03 0301 	mla	r3, r3, r1, r0
 80025c8:	2207      	movs	r2, #7
 80025ca:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025ce:	6800      	ldr	r0, [r0, #0]
 80025d0:	f003 ff13 	bl	80063fa <USB_HC_Halt>
 80025d4:	e7c5      	b.n	8002562 <HCD_HC_IN_IRQHandler+0x44>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80025d6:	68ab      	ldr	r3, [r5, #8]
 80025d8:	f013 0f08 	tst.w	r3, #8
 80025dc:	d113      	bne.n	8002606 <HCD_HC_IN_IRQHandler+0xe8>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80025de:	68ab      	ldr	r3, [r5, #8]
 80025e0:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80025e4:	d11b      	bne.n	800261e <HCD_HC_IN_IRQHandler+0x100>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80025e6:	68ab      	ldr	r3, [r5, #8]
 80025e8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80025ec:	d0b9      	beq.n	8002562 <HCD_HC_IN_IRQHandler+0x44>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80025ee:	2380      	movs	r3, #128	; 0x80
 80025f0:	60ab      	str	r3, [r5, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80025f2:	232c      	movs	r3, #44	; 0x2c
 80025f4:	fb03 0301 	mla	r3, r3, r1, r0
 80025f8:	2206      	movs	r2, #6
 80025fa:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025fe:	6800      	ldr	r0, [r0, #0]
 8002600:	f003 fefb 	bl	80063fa <USB_HC_Halt>
 8002604:	e7ad      	b.n	8002562 <HCD_HC_IN_IRQHandler+0x44>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002606:	2308      	movs	r3, #8
 8002608:	60ab      	str	r3, [r5, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800260a:	232c      	movs	r3, #44	; 0x2c
 800260c:	fb03 0301 	mla	r3, r3, r1, r0
 8002610:	2205      	movs	r2, #5
 8002612:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002616:	6800      	ldr	r0, [r0, #0]
 8002618:	f003 feef 	bl	80063fa <USB_HC_Halt>
 800261c:	e7a1      	b.n	8002562 <HCD_HC_IN_IRQHandler+0x44>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800261e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002622:	60ab      	str	r3, [r5, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002624:	232c      	movs	r3, #44	; 0x2c
 8002626:	fb03 0301 	mla	r3, r3, r1, r0
 800262a:	2208      	movs	r2, #8
 800262c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002630:	6800      	ldr	r0, [r0, #0]
 8002632:	f003 fee2 	bl	80063fa <USB_HC_Halt>
 8002636:	e794      	b.n	8002562 <HCD_HC_IN_IRQHandler+0x44>
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002638:	4631      	mov	r1, r6
 800263a:	6820      	ldr	r0, [r4, #0]
 800263c:	f003 fedd 	bl	80063fa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002640:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002644:	60ab      	str	r3, [r5, #8]
}
 8002646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002648:	4631      	mov	r1, r6
 800264a:	6820      	ldr	r0, [r4, #0]
 800264c:	f003 fed5 	bl	80063fa <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002650:	2310      	movs	r3, #16
 8002652:	60ab      	str	r3, [r5, #8]
    if (hhcd->Init.dma_enable == 1U)
 8002654:	6923      	ldr	r3, [r4, #16]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d009      	beq.n	800266e <HCD_HC_IN_IRQHandler+0x150>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800265a:	232c      	movs	r3, #44	; 0x2c
 800265c:	fb03 4306 	mla	r3, r3, r6, r4
 8002660:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8002664:	f082 0201 	eor.w	r2, r2, #1
 8002668:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800266c:	e7eb      	b.n	8002646 <HCD_HC_IN_IRQHandler+0x128>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800266e:	232c      	movs	r3, #44	; 0x2c
 8002670:	fb03 4306 	mla	r3, r3, r6, r4
 8002674:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002676:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800267a:	fbb2 f3f3 	udiv	r3, r2, r3
 800267e:	f013 0f01 	tst.w	r3, #1
 8002682:	d0e0      	beq.n	8002646 <HCD_HC_IN_IRQHandler+0x128>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002684:	232c      	movs	r3, #44	; 0x2c
 8002686:	fb03 4306 	mla	r3, r3, r6, r4
 800268a:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 800268e:	f082 0201 	eor.w	r2, r2, #1
 8002692:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8002696:	e7d6      	b.n	8002646 <HCD_HC_IN_IRQHandler+0x128>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002698:	68ab      	ldr	r3, [r5, #8]
 800269a:	f013 0f02 	tst.w	r3, #2
 800269e:	d05e      	beq.n	800275e <HCD_HC_IN_IRQHandler+0x240>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80026a0:	232c      	movs	r3, #44	; 0x2c
 80026a2:	fb03 4306 	mla	r3, r3, r6, r4
 80026a6:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d007      	beq.n	80026be <HCD_HC_IN_IRQHandler+0x1a0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80026ae:	3b03      	subs	r3, #3
 80026b0:	2b05      	cmp	r3, #5
 80026b2:	d80a      	bhi.n	80026ca <HCD_HC_IN_IRQHandler+0x1ac>
 80026b4:	e8df f003 	tbb	[pc, r3]
 80026b8:	1c15093a 	.word	0x1c15093a
 80026bc:	1c49      	.short	0x1c49
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80026be:	232c      	movs	r3, #44	; 0x2c
 80026c0:	fb03 4306 	mla	r3, r3, r6, r4
 80026c4:	2201      	movs	r2, #1
 80026c6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80026ca:	2302      	movs	r3, #2
 80026cc:	60ab      	str	r3, [r5, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80026ce:	232c      	movs	r3, #44	; 0x2c
 80026d0:	fb03 4306 	mla	r3, r3, r6, r4
 80026d4:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 80026d8:	4631      	mov	r1, r6
 80026da:	4620      	mov	r0, r4
 80026dc:	f005 ff94 	bl	8008608 <HAL_HCD_HC_NotifyURBChange_Callback>
 80026e0:	e7b1      	b.n	8002646 <HCD_HC_IN_IRQHandler+0x128>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80026e2:	232c      	movs	r3, #44	; 0x2c
 80026e4:	fb03 4306 	mla	r3, r3, r6, r4
 80026e8:	2205      	movs	r2, #5
 80026ea:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 80026ee:	e7ec      	b.n	80026ca <HCD_HC_IN_IRQHandler+0x1ac>
      hhcd->hc[ch_num].ErrCnt++;
 80026f0:	222c      	movs	r2, #44	; 0x2c
 80026f2:	fb02 4206 	mla	r2, r2, r6, r4
 80026f6:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 80026f8:	3301      	adds	r3, #1
 80026fa:	65d3      	str	r3, [r2, #92]	; 0x5c
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d906      	bls.n	800270e <HCD_HC_IN_IRQHandler+0x1f0>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002700:	4613      	mov	r3, r2
 8002702:	2200      	movs	r2, #0
 8002704:	65da      	str	r2, [r3, #92]	; 0x5c
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002706:	2204      	movs	r2, #4
 8002708:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 800270c:	e7dd      	b.n	80026ca <HCD_HC_IN_IRQHandler+0x1ac>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800270e:	232c      	movs	r3, #44	; 0x2c
 8002710:	fb03 4306 	mla	r3, r3, r6, r4
 8002714:	2202      	movs	r2, #2
 8002716:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800271a:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800271e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002722:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002726:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
 800272a:	e7ce      	b.n	80026ca <HCD_HC_IN_IRQHandler+0x1ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800272c:	232c      	movs	r3, #44	; 0x2c
 800272e:	fb03 4306 	mla	r3, r3, r6, r4
 8002732:	2202      	movs	r2, #2
 8002734:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002738:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800273c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002740:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002744:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
 8002748:	e7bf      	b.n	80026ca <HCD_HC_IN_IRQHandler+0x1ac>
      hhcd->hc[ch_num].ErrCnt++;
 800274a:	232c      	movs	r3, #44	; 0x2c
 800274c:	fb03 4306 	mla	r3, r3, r6, r4
 8002750:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002752:	3201      	adds	r2, #1
 8002754:	65da      	str	r2, [r3, #92]	; 0x5c
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002756:	2204      	movs	r2, #4
 8002758:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 800275c:	e7b5      	b.n	80026ca <HCD_HC_IN_IRQHandler+0x1ac>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800275e:	68ab      	ldr	r3, [r5, #8]
 8002760:	f013 0f10 	tst.w	r3, #16
 8002764:	f43f af6f 	beq.w	8002646 <HCD_HC_IN_IRQHandler+0x128>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002768:	232c      	movs	r3, #44	; 0x2c
 800276a:	fb03 4306 	mla	r3, r3, r6, r4
 800276e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002772:	2b03      	cmp	r3, #3
 8002774:	d011      	beq.n	800279a <HCD_HC_IN_IRQHandler+0x27c>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002776:	b10b      	cbz	r3, 800277c <HCD_HC_IN_IRQHandler+0x25e>
 8002778:	2b02      	cmp	r3, #2
 800277a:	d10b      	bne.n	8002794 <HCD_HC_IN_IRQHandler+0x276>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800277c:	232c      	movs	r3, #44	; 0x2c
 800277e:	fb03 4306 	mla	r3, r3, r6, r4
 8002782:	2200      	movs	r2, #0
 8002784:	65da      	str	r2, [r3, #92]	; 0x5c
      hhcd->hc[ch_num].state = HC_NAK;
 8002786:	2203      	movs	r2, #3
 8002788:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800278c:	4631      	mov	r1, r6
 800278e:	6820      	ldr	r0, [r4, #0]
 8002790:	f003 fe33 	bl	80063fa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002794:	2310      	movs	r3, #16
 8002796:	60ab      	str	r3, [r5, #8]
}
 8002798:	e755      	b.n	8002646 <HCD_HC_IN_IRQHandler+0x128>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800279a:	232c      	movs	r3, #44	; 0x2c
 800279c:	fb03 4306 	mla	r3, r3, r6, r4
 80027a0:	2200      	movs	r2, #0
 80027a2:	65da      	str	r2, [r3, #92]	; 0x5c
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027a4:	4631      	mov	r1, r6
 80027a6:	6820      	ldr	r0, [r4, #0]
 80027a8:	f003 fe27 	bl	80063fa <USB_HC_Halt>
 80027ac:	e7f2      	b.n	8002794 <HCD_HC_IN_IRQHandler+0x276>

080027ae <HCD_HC_OUT_IRQHandler>:
{
 80027ae:	b538      	push	{r3, r4, r5, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80027b0:	6803      	ldr	r3, [r0, #0]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80027b2:	eb03 1241 	add.w	r2, r3, r1, lsl #5
 80027b6:	f502 65a0 	add.w	r5, r2, #1280	; 0x500
 80027ba:	68ac      	ldr	r4, [r5, #8]
 80027bc:	f014 0f04 	tst.w	r4, #4
 80027c0:	d119      	bne.n	80027f6 <HCD_HC_OUT_IRQHandler+0x48>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80027c2:	68ac      	ldr	r4, [r5, #8]
 80027c4:	f014 0f20 	tst.w	r4, #32
 80027c8:	d021      	beq.n	800280e <HCD_HC_OUT_IRQHandler+0x60>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80027ca:	2320      	movs	r3, #32
 80027cc:	60ab      	str	r3, [r5, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80027ce:	232c      	movs	r3, #44	; 0x2c
 80027d0:	fb03 0301 	mla	r3, r3, r1, r0
 80027d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d117      	bne.n	800280c <HCD_HC_OUT_IRQHandler+0x5e>
      hhcd->hc[ch_num].do_ping = 0U;
 80027dc:	232c      	movs	r3, #44	; 0x2c
 80027de:	fb03 0301 	mla	r3, r3, r1, r0
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80027e8:	2202      	movs	r2, #2
 80027ea:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027ee:	6800      	ldr	r0, [r0, #0]
 80027f0:	f003 fe03 	bl	80063fa <USB_HC_Halt>
 80027f4:	e00a      	b.n	800280c <HCD_HC_OUT_IRQHandler+0x5e>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80027f6:	2304      	movs	r3, #4
 80027f8:	60ab      	str	r3, [r5, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80027fa:	232c      	movs	r3, #44	; 0x2c
 80027fc:	fb03 0301 	mla	r3, r3, r1, r0
 8002800:	2206      	movs	r2, #6
 8002802:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002806:	6800      	ldr	r0, [r0, #0]
 8002808:	f003 fdf7 	bl	80063fa <USB_HC_Halt>
}
 800280c:	bd38      	pop	{r3, r4, r5, pc}
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800280e:	68ac      	ldr	r4, [r5, #8]
 8002810:	f414 7f00 	tst.w	r4, #512	; 0x200
 8002814:	d11f      	bne.n	8002856 <HCD_HC_OUT_IRQHandler+0xa8>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002816:	68ac      	ldr	r4, [r5, #8]
 8002818:	f014 0f01 	tst.w	r4, #1
 800281c:	d022      	beq.n	8002864 <HCD_HC_OUT_IRQHandler+0xb6>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800281e:	232c      	movs	r3, #44	; 0x2c
 8002820:	fb03 0301 	mla	r3, r3, r1, r0
 8002824:	2200      	movs	r2, #0
 8002826:	65da      	str	r2, [r3, #92]	; 0x5c
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002828:	68ab      	ldr	r3, [r5, #8]
 800282a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800282e:	d007      	beq.n	8002840 <HCD_HC_OUT_IRQHandler+0x92>
      hhcd->hc[ch_num].do_ping = 1U;
 8002830:	232c      	movs	r3, #44	; 0x2c
 8002832:	fb03 0301 	mla	r3, r3, r1, r0
 8002836:	2201      	movs	r2, #1
 8002838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800283c:	2340      	movs	r3, #64	; 0x40
 800283e:	60ab      	str	r3, [r5, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002840:	2201      	movs	r2, #1
 8002842:	60aa      	str	r2, [r5, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002844:	232c      	movs	r3, #44	; 0x2c
 8002846:	fb03 0301 	mla	r3, r3, r1, r0
 800284a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800284e:	6800      	ldr	r0, [r0, #0]
 8002850:	f003 fdd3 	bl	80063fa <USB_HC_Halt>
 8002854:	e7da      	b.n	800280c <HCD_HC_OUT_IRQHandler+0x5e>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002856:	f44f 7300 	mov.w	r3, #512	; 0x200
 800285a:	60ab      	str	r3, [r5, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800285c:	6800      	ldr	r0, [r0, #0]
 800285e:	f003 fdcc 	bl	80063fa <USB_HC_Halt>
 8002862:	e7d3      	b.n	800280c <HCD_HC_OUT_IRQHandler+0x5e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002864:	68ac      	ldr	r4, [r5, #8]
 8002866:	f014 0f40 	tst.w	r4, #64	; 0x40
 800286a:	d122      	bne.n	80028b2 <HCD_HC_OUT_IRQHandler+0x104>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800286c:	68ac      	ldr	r4, [r5, #8]
 800286e:	f014 0f08 	tst.w	r4, #8
 8002872:	d12f      	bne.n	80028d4 <HCD_HC_OUT_IRQHandler+0x126>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002874:	68ac      	ldr	r4, [r5, #8]
 8002876:	f014 0f10 	tst.w	r4, #16
 800287a:	d137      	bne.n	80028ec <HCD_HC_OUT_IRQHandler+0x13e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800287c:	68ac      	ldr	r4, [r5, #8]
 800287e:	f014 0f80 	tst.w	r4, #128	; 0x80
 8002882:	d141      	bne.n	8002908 <HCD_HC_OUT_IRQHandler+0x15a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002884:	68ac      	ldr	r4, [r5, #8]
 8002886:	f414 6f80 	tst.w	r4, #1024	; 0x400
 800288a:	d149      	bne.n	8002920 <HCD_HC_OUT_IRQHandler+0x172>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800288c:	68ab      	ldr	r3, [r5, #8]
 800288e:	f013 0f02 	tst.w	r3, #2
 8002892:	d0bb      	beq.n	800280c <HCD_HC_OUT_IRQHandler+0x5e>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002894:	232c      	movs	r3, #44	; 0x2c
 8002896:	fb03 0301 	mla	r3, r3, r1, r0
 800289a:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d04b      	beq.n	800293a <HCD_HC_OUT_IRQHandler+0x18c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80028a2:	3b03      	subs	r3, #3
 80028a4:	2b05      	cmp	r3, #5
 80028a6:	d854      	bhi.n	8002952 <HCD_HC_OUT_IRQHandler+0x1a4>
 80028a8:	e8df f003 	tbb	[pc, r3]
 80028ac:	9b948d86 	.word	0x9b948d86
 80028b0:	9b53      	.short	0x9b53
    hhcd->hc[ch_num].state = HC_NYET;
 80028b2:	222c      	movs	r2, #44	; 0x2c
 80028b4:	fb02 0201 	mla	r2, r2, r1, r0
 80028b8:	2004      	movs	r0, #4
 80028ba:	f882 0061 	strb.w	r0, [r2, #97]	; 0x61
    hhcd->hc[ch_num].do_ping = 1U;
 80028be:	2001      	movs	r0, #1
 80028c0:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
    hhcd->hc[ch_num].ErrCnt = 0U;
 80028c4:	2000      	movs	r0, #0
 80028c6:	65d0      	str	r0, [r2, #92]	; 0x5c
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028c8:	4618      	mov	r0, r3
 80028ca:	f003 fd96 	bl	80063fa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80028ce:	2340      	movs	r3, #64	; 0x40
 80028d0:	60ab      	str	r3, [r5, #8]
 80028d2:	e79b      	b.n	800280c <HCD_HC_OUT_IRQHandler+0x5e>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80028d4:	2308      	movs	r3, #8
 80028d6:	60ab      	str	r3, [r5, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80028d8:	232c      	movs	r3, #44	; 0x2c
 80028da:	fb03 0301 	mla	r3, r3, r1, r0
 80028de:	2205      	movs	r2, #5
 80028e0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028e4:	6800      	ldr	r0, [r0, #0]
 80028e6:	f003 fd88 	bl	80063fa <USB_HC_Halt>
 80028ea:	e78f      	b.n	800280c <HCD_HC_OUT_IRQHandler+0x5e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80028ec:	222c      	movs	r2, #44	; 0x2c
 80028ee:	fb02 0201 	mla	r2, r2, r1, r0
 80028f2:	2000      	movs	r0, #0
 80028f4:	65d0      	str	r0, [r2, #92]	; 0x5c
    hhcd->hc[ch_num].state = HC_NAK;
 80028f6:	2003      	movs	r0, #3
 80028f8:	f882 0061 	strb.w	r0, [r2, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028fc:	4618      	mov	r0, r3
 80028fe:	f003 fd7c 	bl	80063fa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002902:	2310      	movs	r3, #16
 8002904:	60ab      	str	r3, [r5, #8]
 8002906:	e781      	b.n	800280c <HCD_HC_OUT_IRQHandler+0x5e>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002908:	222c      	movs	r2, #44	; 0x2c
 800290a:	fb02 0201 	mla	r2, r2, r1, r0
 800290e:	2006      	movs	r0, #6
 8002910:	f882 0061 	strb.w	r0, [r2, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002914:	4618      	mov	r0, r3
 8002916:	f003 fd70 	bl	80063fa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800291a:	2380      	movs	r3, #128	; 0x80
 800291c:	60ab      	str	r3, [r5, #8]
 800291e:	e775      	b.n	800280c <HCD_HC_OUT_IRQHandler+0x5e>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002920:	222c      	movs	r2, #44	; 0x2c
 8002922:	fb02 0201 	mla	r2, r2, r1, r0
 8002926:	2008      	movs	r0, #8
 8002928:	f882 0061 	strb.w	r0, [r2, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800292c:	4618      	mov	r0, r3
 800292e:	f003 fd64 	bl	80063fa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002932:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002936:	60ab      	str	r3, [r5, #8]
 8002938:	e768      	b.n	800280c <HCD_HC_OUT_IRQHandler+0x5e>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800293a:	232c      	movs	r3, #44	; 0x2c
 800293c:	fb03 0301 	mla	r3, r3, r1, r0
 8002940:	2201      	movs	r2, #1
 8002942:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002946:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800294a:	3b02      	subs	r3, #2
 800294c:	b2db      	uxtb	r3, r3
 800294e:	4293      	cmp	r3, r2
 8002950:	d909      	bls.n	8002966 <HCD_HC_OUT_IRQHandler+0x1b8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002952:	2302      	movs	r3, #2
 8002954:	60ab      	str	r3, [r5, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002956:	232c      	movs	r3, #44	; 0x2c
 8002958:	fb03 0301 	mla	r3, r3, r1, r0
 800295c:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 8002960:	f005 fe52 	bl	8008608 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002964:	e752      	b.n	800280c <HCD_HC_OUT_IRQHandler+0x5e>
        if (hhcd->Init.dma_enable == 0U)
 8002966:	6904      	ldr	r4, [r0, #16]
 8002968:	b944      	cbnz	r4, 800297c <HCD_HC_OUT_IRQHandler+0x1ce>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800296a:	232c      	movs	r3, #44	; 0x2c
 800296c:	fb03 0301 	mla	r3, r3, r1, r0
 8002970:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 8002974:	f082 0201 	eor.w	r2, r2, #1
 8002978:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800297c:	2c01      	cmp	r4, #1
 800297e:	d1e8      	bne.n	8002952 <HCD_HC_OUT_IRQHandler+0x1a4>
 8002980:	232c      	movs	r3, #44	; 0x2c
 8002982:	fb03 0301 	mla	r3, r3, r1, r0
 8002986:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002988:	2b00      	cmp	r3, #0
 800298a:	d0e2      	beq.n	8002952 <HCD_HC_OUT_IRQHandler+0x1a4>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800298c:	222c      	movs	r2, #44	; 0x2c
 800298e:	fb02 0201 	mla	r2, r2, r1, r0
 8002992:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8002996:	4413      	add	r3, r2
 8002998:	3b01      	subs	r3, #1
 800299a:	fbb3 f3f2 	udiv	r3, r3, r2
          if ((num_packets & 1U) != 0U)
 800299e:	f013 0f01 	tst.w	r3, #1
 80029a2:	d0d6      	beq.n	8002952 <HCD_HC_OUT_IRQHandler+0x1a4>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80029a4:	232c      	movs	r3, #44	; 0x2c
 80029a6:	fb03 0301 	mla	r3, r3, r1, r0
 80029aa:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 80029ae:	f082 0201 	eor.w	r2, r2, #1
 80029b2:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 80029b6:	e7cc      	b.n	8002952 <HCD_HC_OUT_IRQHandler+0x1a4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80029b8:	232c      	movs	r3, #44	; 0x2c
 80029ba:	fb03 0301 	mla	r3, r3, r1, r0
 80029be:	2202      	movs	r2, #2
 80029c0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 80029c4:	e7c5      	b.n	8002952 <HCD_HC_OUT_IRQHandler+0x1a4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80029c6:	232c      	movs	r3, #44	; 0x2c
 80029c8:	fb03 0301 	mla	r3, r3, r1, r0
 80029cc:	2202      	movs	r2, #2
 80029ce:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 80029d2:	e7be      	b.n	8002952 <HCD_HC_OUT_IRQHandler+0x1a4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80029d4:	232c      	movs	r3, #44	; 0x2c
 80029d6:	fb03 0301 	mla	r3, r3, r1, r0
 80029da:	2205      	movs	r2, #5
 80029dc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 80029e0:	e7b7      	b.n	8002952 <HCD_HC_OUT_IRQHandler+0x1a4>
      hhcd->hc[ch_num].ErrCnt++;
 80029e2:	242c      	movs	r4, #44	; 0x2c
 80029e4:	fb04 0401 	mla	r4, r4, r1, r0
 80029e8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80029ea:	3301      	adds	r3, #1
 80029ec:	65e3      	str	r3, [r4, #92]	; 0x5c
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d905      	bls.n	80029fe <HCD_HC_OUT_IRQHandler+0x250>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80029f2:	2200      	movs	r2, #0
 80029f4:	65e2      	str	r2, [r4, #92]	; 0x5c
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80029f6:	2204      	movs	r2, #4
 80029f8:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
 80029fc:	e7a9      	b.n	8002952 <HCD_HC_OUT_IRQHandler+0x1a4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80029fe:	232c      	movs	r3, #44	; 0x2c
 8002a00:	fb03 0301 	mla	r3, r3, r1, r0
 8002a04:	2402      	movs	r4, #2
 8002a06:	f883 4060 	strb.w	r4, [r3, #96]	; 0x60
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002a0a:	f8d2 3500 	ldr.w	r3, [r2, #1280]	; 0x500
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a0e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002a16:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
 8002a1a:	e79a      	b.n	8002952 <HCD_HC_OUT_IRQHandler+0x1a4>

08002a1c <HAL_HCD_IRQHandler>:
{
 8002a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a1e:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a20:	6805      	ldr	r5, [r0, #0]
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002a22:	4628      	mov	r0, r5
 8002a24:	f003 fad5 	bl	8005fd2 <USB_GetMode>
 8002a28:	2801      	cmp	r0, #1
 8002a2a:	d000      	beq.n	8002a2e <HAL_HCD_IRQHandler+0x12>
}
 8002a2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002a2e:	6820      	ldr	r0, [r4, #0]
 8002a30:	f003 facb 	bl	8005fca <USB_ReadInterrupts>
 8002a34:	2800      	cmp	r0, #0
 8002a36:	d0f9      	beq.n	8002a2c <HAL_HCD_IRQHandler+0x10>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002a38:	6820      	ldr	r0, [r4, #0]
 8002a3a:	f003 fac6 	bl	8005fca <USB_ReadInterrupts>
 8002a3e:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 8002a42:	d003      	beq.n	8002a4c <HAL_HCD_IRQHandler+0x30>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002a44:	6823      	ldr	r3, [r4, #0]
 8002a46:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002a4a:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002a4c:	6820      	ldr	r0, [r4, #0]
 8002a4e:	f003 fabc 	bl	8005fca <USB_ReadInterrupts>
 8002a52:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 8002a56:	d003      	beq.n	8002a60 <HAL_HCD_IRQHandler+0x44>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002a58:	6823      	ldr	r3, [r4, #0]
 8002a5a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002a5e:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002a60:	6820      	ldr	r0, [r4, #0]
 8002a62:	f003 fab2 	bl	8005fca <USB_ReadInterrupts>
 8002a66:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 8002a6a:	d003      	beq.n	8002a74 <HAL_HCD_IRQHandler+0x58>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002a6c:	6823      	ldr	r3, [r4, #0]
 8002a6e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002a72:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002a74:	6820      	ldr	r0, [r4, #0]
 8002a76:	f003 faa8 	bl	8005fca <USB_ReadInterrupts>
 8002a7a:	f010 0f02 	tst.w	r0, #2
 8002a7e:	d002      	beq.n	8002a86 <HAL_HCD_IRQHandler+0x6a>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002a80:	6823      	ldr	r3, [r4, #0]
 8002a82:	2202      	movs	r2, #2
 8002a84:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002a86:	6820      	ldr	r0, [r4, #0]
 8002a88:	f003 fa9f 	bl	8005fca <USB_ReadInterrupts>
 8002a8c:	f010 5f00 	tst.w	r0, #536870912	; 0x20000000
 8002a90:	d008      	beq.n	8002aa4 <HAL_HCD_IRQHandler+0x88>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002a92:	6823      	ldr	r3, [r4, #0]
 8002a94:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002a98:	615a      	str	r2, [r3, #20]
      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002a9a:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 8002a9e:	f013 0f01 	tst.w	r3, #1
 8002aa2:	d01d      	beq.n	8002ae0 <HAL_HCD_IRQHandler+0xc4>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002aa4:	6820      	ldr	r0, [r4, #0]
 8002aa6:	f003 fa90 	bl	8005fca <USB_ReadInterrupts>
 8002aaa:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 8002aae:	d126      	bne.n	8002afe <HAL_HCD_IRQHandler+0xe2>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002ab0:	6820      	ldr	r0, [r4, #0]
 8002ab2:	f003 fa8a 	bl	8005fca <USB_ReadInterrupts>
 8002ab6:	f010 0f08 	tst.w	r0, #8
 8002aba:	d124      	bne.n	8002b06 <HAL_HCD_IRQHandler+0xea>
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002abc:	6820      	ldr	r0, [r4, #0]
 8002abe:	f003 fa84 	bl	8005fca <USB_ReadInterrupts>
 8002ac2:	f010 0f10 	tst.w	r0, #16
 8002ac6:	d125      	bne.n	8002b14 <HAL_HCD_IRQHandler+0xf8>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002ac8:	6820      	ldr	r0, [r4, #0]
 8002aca:	f003 fa7e 	bl	8005fca <USB_ReadInterrupts>
 8002ace:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8002ad2:	d0ab      	beq.n	8002a2c <HAL_HCD_IRQHandler+0x10>
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002ad4:	6820      	ldr	r0, [r4, #0]
 8002ad6:	f003 fc8b 	bl	80063f0 <USB_HC_ReadInterrupt>
 8002ada:	4607      	mov	r7, r0
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002adc:	2600      	movs	r6, #0
 8002ade:	e02c      	b.n	8002b3a <HAL_HCD_IRQHandler+0x11e>
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002ae0:	2110      	movs	r1, #16
 8002ae2:	4628      	mov	r0, r5
 8002ae4:	f003 f9ec 	bl	8005ec0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002ae8:	4628      	mov	r0, r5
 8002aea:	f003 fa11 	bl	8005f10 <USB_FlushRxFifo>
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002aee:	2101      	movs	r1, #1
 8002af0:	6820      	ldr	r0, [r4, #0]
 8002af2:	f003 faf3 	bl	80060dc <USB_InitFSLSPClkSel>
        HAL_HCD_Disconnect_Callback(hhcd);
 8002af6:	4620      	mov	r0, r4
 8002af8:	f005 fd80 	bl	80085fc <HAL_HCD_Disconnect_Callback>
 8002afc:	e7d2      	b.n	8002aa4 <HAL_HCD_IRQHandler+0x88>
      HCD_Port_IRQHandler(hhcd);
 8002afe:	4620      	mov	r0, r4
 8002b00:	f7ff fcb5 	bl	800246e <HCD_Port_IRQHandler>
 8002b04:	e7d4      	b.n	8002ab0 <HAL_HCD_IRQHandler+0x94>
      HAL_HCD_SOF_Callback(hhcd);
 8002b06:	4620      	mov	r0, r4
 8002b08:	f005 fd6c 	bl	80085e4 <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002b0c:	6823      	ldr	r3, [r4, #0]
 8002b0e:	2208      	movs	r2, #8
 8002b10:	615a      	str	r2, [r3, #20]
 8002b12:	e7d3      	b.n	8002abc <HAL_HCD_IRQHandler+0xa0>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b14:	6822      	ldr	r2, [r4, #0]
 8002b16:	6993      	ldr	r3, [r2, #24]
 8002b18:	f023 0310 	bic.w	r3, r3, #16
 8002b1c:	6193      	str	r3, [r2, #24]
      HCD_RXQLVL_IRQHandler(hhcd);
 8002b1e:	4620      	mov	r0, r4
 8002b20:	f7ff fafa 	bl	8002118 <HCD_RXQLVL_IRQHandler>
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b24:	6822      	ldr	r2, [r4, #0]
 8002b26:	6993      	ldr	r3, [r2, #24]
 8002b28:	f043 0310 	orr.w	r3, r3, #16
 8002b2c:	6193      	str	r3, [r2, #24]
 8002b2e:	e7cb      	b.n	8002ac8 <HAL_HCD_IRQHandler+0xac>
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002b30:	b2f1      	uxtb	r1, r6
 8002b32:	4620      	mov	r0, r4
 8002b34:	f7ff fe3b 	bl	80027ae <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002b38:	3601      	adds	r6, #1
 8002b3a:	68a3      	ldr	r3, [r4, #8]
 8002b3c:	42b3      	cmp	r3, r6
 8002b3e:	d912      	bls.n	8002b66 <HAL_HCD_IRQHandler+0x14a>
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002b40:	f006 030f 	and.w	r3, r6, #15
 8002b44:	fa27 f303 	lsr.w	r3, r7, r3
 8002b48:	f013 0f01 	tst.w	r3, #1
 8002b4c:	d0f4      	beq.n	8002b38 <HAL_HCD_IRQHandler+0x11c>
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002b4e:	eb05 1346 	add.w	r3, r5, r6, lsl #5
 8002b52:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8002b56:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002b5a:	d0e9      	beq.n	8002b30 <HAL_HCD_IRQHandler+0x114>
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002b5c:	b2f1      	uxtb	r1, r6
 8002b5e:	4620      	mov	r0, r4
 8002b60:	f7ff fcdd 	bl	800251e <HCD_HC_IN_IRQHandler>
 8002b64:	e7e8      	b.n	8002b38 <HAL_HCD_IRQHandler+0x11c>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002b66:	6823      	ldr	r3, [r4, #0]
 8002b68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b6c:	615a      	str	r2, [r3, #20]
 8002b6e:	e75d      	b.n	8002a2c <HAL_HCD_IRQHandler+0x10>

08002b70 <HAL_HCD_Start>:
  __HAL_LOCK(hhcd);
 8002b70:	f890 32f8 	ldrb.w	r3, [r0, #760]	; 0x2f8
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d00e      	beq.n	8002b96 <HAL_HCD_Start+0x26>
{
 8002b78:	b510      	push	{r4, lr}
 8002b7a:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8002b7c:	2101      	movs	r1, #1
 8002b7e:	f880 12f8 	strb.w	r1, [r0, #760]	; 0x2f8
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002b82:	6800      	ldr	r0, [r0, #0]
 8002b84:	f003 fae8 	bl	8006158 <USB_DriveVbus>
  __HAL_HCD_ENABLE(hhcd);
 8002b88:	6820      	ldr	r0, [r4, #0]
 8002b8a:	f003 f98d 	bl	8005ea8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002b8e:	2000      	movs	r0, #0
 8002b90:	f884 02f8 	strb.w	r0, [r4, #760]	; 0x2f8
}
 8002b94:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8002b96:	2002      	movs	r0, #2
}
 8002b98:	4770      	bx	lr

08002b9a <HAL_HCD_Stop>:
  __HAL_LOCK(hhcd);
 8002b9a:	f890 32f8 	ldrb.w	r3, [r0, #760]	; 0x2f8
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d00b      	beq.n	8002bba <HAL_HCD_Stop+0x20>
{
 8002ba2:	b510      	push	{r4, lr}
 8002ba4:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	f880 32f8 	strb.w	r3, [r0, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002bac:	6800      	ldr	r0, [r0, #0]
 8002bae:	f003 fc97 	bl	80064e0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002bb2:	2000      	movs	r0, #0
 8002bb4:	f884 02f8 	strb.w	r0, [r4, #760]	; 0x2f8
}
 8002bb8:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8002bba:	2002      	movs	r0, #2
}
 8002bbc:	4770      	bx	lr

08002bbe <HAL_HCD_ResetPort>:
{
 8002bbe:	b508      	push	{r3, lr}
  return (USB_ResetPort(hhcd->Instance));
 8002bc0:	6800      	ldr	r0, [r0, #0]
 8002bc2:	f003 faaa 	bl	800611a <USB_ResetPort>
}
 8002bc6:	bd08      	pop	{r3, pc}

08002bc8 <HAL_HCD_HC_GetURBState>:
  return hhcd->hc[chnum].urb_state;
 8002bc8:	232c      	movs	r3, #44	; 0x2c
 8002bca:	fb03 0001 	mla	r0, r3, r1, r0
}
 8002bce:	f890 0060 	ldrb.w	r0, [r0, #96]	; 0x60
 8002bd2:	4770      	bx	lr

08002bd4 <HAL_HCD_HC_GetXferCount>:
  return hhcd->hc[chnum].xfer_count;
 8002bd4:	232c      	movs	r3, #44	; 0x2c
 8002bd6:	fb03 0001 	mla	r0, r3, r1, r0
}
 8002bda:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8002bdc:	4770      	bx	lr

08002bde <HAL_HCD_GetCurrentFrame>:
{
 8002bde:	b508      	push	{r3, lr}
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002be0:	6800      	ldr	r0, [r0, #0]
 8002be2:	f003 fae7 	bl	80061b4 <USB_GetCurrentFrame>
}
 8002be6:	bd08      	pop	{r3, pc}

08002be8 <HAL_HCD_GetCurrentSpeed>:
{
 8002be8:	b508      	push	{r3, lr}
  return (USB_GetHostSpeed(hhcd->Instance));
 8002bea:	6800      	ldr	r0, [r0, #0]
 8002bec:	f003 fad7 	bl	800619e <USB_GetHostSpeed>
}
 8002bf0:	bd08      	pop	{r3, pc}

08002bf2 <HAL_I2C_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bf2:	2800      	cmp	r0, #0
 8002bf4:	d059      	beq.n	8002caa <HAL_I2C_Init+0xb8>
{
 8002bf6:	b510      	push	{r4, lr}
 8002bf8:	4604      	mov	r4, r0
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002bfa:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d043      	beq.n	8002c8a <HAL_I2C_Init+0x98>
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c02:	2324      	movs	r3, #36	; 0x24
 8002c04:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c08:	6822      	ldr	r2, [r4, #0]
 8002c0a:	6813      	ldr	r3, [r2, #0]
 8002c0c:	f023 0301 	bic.w	r3, r3, #1
 8002c10:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002c12:	6863      	ldr	r3, [r4, #4]
 8002c14:	6822      	ldr	r2, [r4, #0]
 8002c16:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8002c1a:	6113      	str	r3, [r2, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002c1c:	6822      	ldr	r2, [r4, #0]
 8002c1e:	6893      	ldr	r3, [r2, #8]
 8002c20:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002c24:	6093      	str	r3, [r2, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c26:	68e3      	ldr	r3, [r4, #12]
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d033      	beq.n	8002c94 <HAL_I2C_Init+0xa2>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002c2c:	68a3      	ldr	r3, [r4, #8]
 8002c2e:	6822      	ldr	r2, [r4, #0]
 8002c30:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8002c34:	6093      	str	r3, [r2, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c36:	68e3      	ldr	r3, [r4, #12]
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d031      	beq.n	8002ca0 <HAL_I2C_Init+0xae>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002c3c:	6822      	ldr	r2, [r4, #0]
 8002c3e:	6853      	ldr	r3, [r2, #4]
 8002c40:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c48:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002c4a:	6822      	ldr	r2, [r4, #0]
 8002c4c:	68d3      	ldr	r3, [r2, #12]
 8002c4e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002c52:	60d3      	str	r3, [r2, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c54:	6923      	ldr	r3, [r4, #16]
 8002c56:	6962      	ldr	r2, [r4, #20]
 8002c58:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002c5a:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c5c:	6822      	ldr	r2, [r4, #0]
 8002c5e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002c62:	60d3      	str	r3, [r2, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002c64:	69e3      	ldr	r3, [r4, #28]
 8002c66:	6a21      	ldr	r1, [r4, #32]
 8002c68:	6822      	ldr	r2, [r4, #0]
 8002c6a:	430b      	orrs	r3, r1
 8002c6c:	6013      	str	r3, [r2, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c6e:	6822      	ldr	r2, [r4, #0]
 8002c70:	6813      	ldr	r3, [r2, #0]
 8002c72:	f043 0301 	orr.w	r3, r3, #1
 8002c76:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c78:	2000      	movs	r0, #0
 8002c7a:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002c7c:	2320      	movs	r3, #32
 8002c7e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c82:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c84:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42

  return HAL_OK;
}
 8002c88:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8002c8a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8002c8e:	f7fd fe5d 	bl	800094c <HAL_I2C_MspInit>
 8002c92:	e7b6      	b.n	8002c02 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002c94:	68a3      	ldr	r3, [r4, #8]
 8002c96:	6822      	ldr	r2, [r4, #0]
 8002c98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c9c:	6093      	str	r3, [r2, #8]
 8002c9e:	e7ca      	b.n	8002c36 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002ca0:	6823      	ldr	r3, [r4, #0]
 8002ca2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ca6:	605a      	str	r2, [r3, #4]
 8002ca8:	e7c8      	b.n	8002c3c <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8002caa:	2001      	movs	r0, #1
}
 8002cac:	4770      	bx	lr

08002cae <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002cae:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cb0:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8002cb4:	b2d2      	uxtb	r2, r2
 8002cb6:	2a20      	cmp	r2, #32
 8002cb8:	d123      	bne.n	8002d02 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cba:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8002cbe:	2a01      	cmp	r2, #1
 8002cc0:	d021      	beq.n	8002d06 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002cc8:	2224      	movs	r2, #36	; 0x24
 8002cca:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002cce:	6800      	ldr	r0, [r0, #0]
 8002cd0:	6802      	ldr	r2, [r0, #0]
 8002cd2:	f022 0201 	bic.w	r2, r2, #1
 8002cd6:	6002      	str	r2, [r0, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002cd8:	6818      	ldr	r0, [r3, #0]
 8002cda:	6802      	ldr	r2, [r0, #0]
 8002cdc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002ce0:	6002      	str	r2, [r0, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002ce2:	6818      	ldr	r0, [r3, #0]
 8002ce4:	6802      	ldr	r2, [r0, #0]
 8002ce6:	4311      	orrs	r1, r2
 8002ce8:	6001      	str	r1, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002cea:	6819      	ldr	r1, [r3, #0]
 8002cec:	680a      	ldr	r2, [r1, #0]
 8002cee:	f042 0201 	orr.w	r2, r2, #1
 8002cf2:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cf4:	2220      	movs	r2, #32
 8002cf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cfa:	2000      	movs	r0, #0
 8002cfc:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40

    return HAL_OK;
 8002d00:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8002d02:	2002      	movs	r0, #2
 8002d04:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8002d06:	2002      	movs	r0, #2
  }
}
 8002d08:	4770      	bx	lr

08002d0a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002d0a:	4603      	mov	r3, r0

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d0c:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8002d10:	b2d2      	uxtb	r2, r2
 8002d12:	2a20      	cmp	r2, #32
 8002d14:	d121      	bne.n	8002d5a <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d16:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8002d1a:	2a01      	cmp	r2, #1
 8002d1c:	d01f      	beq.n	8002d5e <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d24:	2224      	movs	r2, #36	; 0x24
 8002d26:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d2a:	6800      	ldr	r0, [r0, #0]
 8002d2c:	6802      	ldr	r2, [r0, #0]
 8002d2e:	f022 0201 	bic.w	r2, r2, #1
 8002d32:	6002      	str	r2, [r0, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002d34:	6818      	ldr	r0, [r3, #0]
 8002d36:	6802      	ldr	r2, [r0, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002d38:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002d3c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002d40:	6002      	str	r2, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d42:	6819      	ldr	r1, [r3, #0]
 8002d44:	680a      	ldr	r2, [r1, #0]
 8002d46:	f042 0201 	orr.w	r2, r2, #1
 8002d4a:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d4c:	2220      	movs	r2, #32
 8002d4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d52:	2000      	movs	r0, #0
 8002d54:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40

    return HAL_OK;
 8002d58:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8002d5a:	2002      	movs	r0, #2
 8002d5c:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8002d5e:	2002      	movs	r0, #2
  }
}
 8002d60:	4770      	bx	lr
	...

08002d64 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 8002d64:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 8002d66:	6802      	ldr	r2, [r0, #0]
 8002d68:	6813      	ldr	r3, [r2, #0]
 8002d6a:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002d6e:	6013      	str	r3, [r2, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 8002d70:	6883      	ldr	r3, [r0, #8]
 8002d72:	b933      	cbnz	r3, 8002d82 <OSPI_ConfigCmd+0x1e>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 8002d74:	6802      	ldr	r2, [r0, #0]
 8002d76:	6813      	ldr	r3, [r2, #0]
 8002d78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d7c:	684c      	ldr	r4, [r1, #4]
 8002d7e:	4323      	orrs	r3, r4
 8002d80:	6013      	str	r3, [r2, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8002d82:	680b      	ldr	r3, [r1, #0]
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d04b      	beq.n	8002e20 <OSPI_ConfigCmd+0xbc>
    ir_reg  = &(hospi->Instance->WIR);
    abr_reg = &(hospi->Instance->WABR);
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 8002d88:	6803      	ldr	r3, [r0, #0]
 8002d8a:	f503 7280 	add.w	r2, r3, #256	; 0x100
    tcr_reg = &(hospi->Instance->TCR);
 8002d8e:	f503 7e84 	add.w	lr, r3, #264	; 0x108
    ir_reg  = &(hospi->Instance->IR);
 8002d92:	f503 7c88 	add.w	ip, r3, #272	; 0x110
    abr_reg = &(hospi->Instance->ABR);
 8002d96:	f503 7390 	add.w	r3, r3, #288	; 0x120
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 8002d9a:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 8002d9c:	6c8d      	ldr	r5, [r1, #72]	; 0x48
 8002d9e:	432c      	orrs	r4, r5
 8002da0:	6014      	str	r4, [r2, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 8002da2:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8002da4:	b15c      	cbz	r4, 8002dbe <OSPI_ConfigCmd+0x5a>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 8002da6:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8002da8:	601c      	str	r4, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 8002daa:	6813      	ldr	r3, [r2, #0]
 8002dac:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8002db0:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8002db2:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 8002db4:	432c      	orrs	r4, r5
 8002db6:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 8002db8:	432c      	orrs	r4, r5
 8002dba:	4323      	orrs	r3, r4
 8002dbc:	6013      	str	r3, [r2, #0]
                           (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 8002dbe:	f8de 3000 	ldr.w	r3, [lr]
 8002dc2:	f023 031f 	bic.w	r3, r3, #31
 8002dc6:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 8002dc8:	4323      	orrs	r3, r4
 8002dca:	f8ce 3000 	str.w	r3, [lr]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8002dce:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8002dd0:	b12b      	cbz	r3, 8002dde <OSPI_ConfigCmd+0x7a>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8002dd2:	680b      	ldr	r3, [r1, #0]
 8002dd4:	b91b      	cbnz	r3, 8002dde <OSPI_ConfigCmd+0x7a>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 8002dd6:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8002dd8:	6804      	ldr	r4, [r0, #0]
 8002dda:	3b01      	subs	r3, #1
 8002ddc:	6423      	str	r3, [r4, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 8002dde:	68cb      	ldr	r3, [r1, #12]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d06d      	beq.n	8002ec0 <OSPI_ConfigCmd+0x15c>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8002de4:	69cc      	ldr	r4, [r1, #28]
 8002de6:	2c00      	cmp	r4, #0
 8002de8:	d040      	beq.n	8002e6c <OSPI_ConfigCmd+0x108>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8002dea:	6b8d      	ldr	r5, [r1, #56]	; 0x38
 8002dec:	b315      	cbz	r5, 8002e34 <OSPI_ConfigCmd+0xd0>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8002dee:	6817      	ldr	r7, [r2, #0]
 8002df0:	4e46      	ldr	r6, [pc, #280]	; (8002f0c <OSPI_ConfigCmd+0x1a8>)
 8002df2:	403e      	ands	r6, r7
 8002df4:	694f      	ldr	r7, [r1, #20]
 8002df6:	433b      	orrs	r3, r7
 8002df8:	690f      	ldr	r7, [r1, #16]
 8002dfa:	433b      	orrs	r3, r7
 8002dfc:	4323      	orrs	r3, r4
 8002dfe:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8002e00:	4323      	orrs	r3, r4
 8002e02:	6a0c      	ldr	r4, [r1, #32]
 8002e04:	4323      	orrs	r3, r4
 8002e06:	431d      	orrs	r5, r3
 8002e08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002e0a:	431d      	orrs	r5, r3
 8002e0c:	432e      	orrs	r6, r5
 8002e0e:	6016      	str	r6, [r2, #0]
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8002e10:	688b      	ldr	r3, [r1, #8]
 8002e12:	f8cc 3000 	str.w	r3, [ip]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 8002e16:	6803      	ldr	r3, [r0, #0]
 8002e18:	698a      	ldr	r2, [r1, #24]
 8002e1a:	649a      	str	r2, [r3, #72]	; 0x48
  HAL_StatusTypeDef status = HAL_OK;
 8002e1c:	2000      	movs	r0, #0
    }
  }

  /* Return function status */
  return status;
}
 8002e1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ccr_reg = &(hospi->Instance->WCCR);
 8002e20:	6803      	ldr	r3, [r0, #0]
 8002e22:	f503 72c0 	add.w	r2, r3, #384	; 0x180
    tcr_reg = &(hospi->Instance->WTCR);
 8002e26:	f503 7ec4 	add.w	lr, r3, #392	; 0x188
    ir_reg  = &(hospi->Instance->WIR);
 8002e2a:	f503 7cc8 	add.w	ip, r3, #400	; 0x190
    abr_reg = &(hospi->Instance->WABR);
 8002e2e:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8002e32:	e7b2      	b.n	8002d9a <OSPI_ConfigCmd+0x36>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8002e34:	6815      	ldr	r5, [r2, #0]
 8002e36:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
 8002e3a:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8002e3e:	694e      	ldr	r6, [r1, #20]
 8002e40:	431e      	orrs	r6, r3
 8002e42:	690b      	ldr	r3, [r1, #16]
 8002e44:	431e      	orrs	r6, r3
 8002e46:	4334      	orrs	r4, r6
 8002e48:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8002e4a:	431c      	orrs	r4, r3
 8002e4c:	6a0b      	ldr	r3, [r1, #32]
 8002e4e:	431c      	orrs	r4, r3
 8002e50:	4325      	orrs	r5, r4
 8002e52:	6015      	str	r5, [r2, #0]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8002e54:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002e56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e5a:	d1d9      	bne.n	8002e10 <OSPI_ConfigCmd+0xac>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8002e5c:	694b      	ldr	r3, [r1, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8002e5e:	2b08      	cmp	r3, #8
 8002e60:	d1d6      	bne.n	8002e10 <OSPI_ConfigCmd+0xac>
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8002e62:	6813      	ldr	r3, [r2, #0]
 8002e64:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002e68:	6013      	str	r3, [r2, #0]
 8002e6a:	e7d1      	b.n	8002e10 <OSPI_ConfigCmd+0xac>
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8002e6c:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 8002e6e:	b194      	cbz	r4, 8002e96 <OSPI_ConfigCmd+0x132>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 8002e70:	6810      	ldr	r0, [r2, #0]
 8002e72:	f020 6070 	bic.w	r0, r0, #251658240	; 0xf000000
 8002e76:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 8002e7a:	694d      	ldr	r5, [r1, #20]
 8002e7c:	431d      	orrs	r5, r3
 8002e7e:	690b      	ldr	r3, [r1, #16]
 8002e80:	431d      	orrs	r5, r3
 8002e82:	432c      	orrs	r4, r5
 8002e84:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002e86:	431c      	orrs	r4, r3
 8002e88:	4320      	orrs	r0, r4
 8002e8a:	6010      	str	r0, [r2, #0]
      *ir_reg = cmd->Instruction;
 8002e8c:	688b      	ldr	r3, [r1, #8]
 8002e8e:	f8cc 3000 	str.w	r3, [ip]
  HAL_StatusTypeDef status = HAL_OK;
 8002e92:	2000      	movs	r0, #0
 8002e94:	e7c3      	b.n	8002e1e <OSPI_ConfigCmd+0xba>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 8002e96:	6814      	ldr	r4, [r2, #0]
 8002e98:	f024 043f 	bic.w	r4, r4, #63	; 0x3f
 8002e9c:	694d      	ldr	r5, [r1, #20]
 8002e9e:	432b      	orrs	r3, r5
 8002ea0:	690d      	ldr	r5, [r1, #16]
 8002ea2:	432b      	orrs	r3, r5
 8002ea4:	4323      	orrs	r3, r4
 8002ea6:	6013      	str	r3, [r2, #0]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8002ea8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002eaa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002eae:	d1ed      	bne.n	8002e8c <OSPI_ConfigCmd+0x128>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8002eb0:	694b      	ldr	r3, [r1, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8002eb2:	2b08      	cmp	r3, #8
 8002eb4:	d1ea      	bne.n	8002e8c <OSPI_ConfigCmd+0x128>
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8002eb6:	6813      	ldr	r3, [r2, #0]
 8002eb8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002ebc:	6013      	str	r3, [r2, #0]
 8002ebe:	e7e5      	b.n	8002e8c <OSPI_ConfigCmd+0x128>
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8002ec0:	69cb      	ldr	r3, [r1, #28]
 8002ec2:	b1f3      	cbz	r3, 8002f02 <OSPI_ConfigCmd+0x19e>
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8002ec4:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 8002ec6:	b194      	cbz	r4, 8002eee <OSPI_ConfigCmd+0x18a>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 8002ec8:	6815      	ldr	r5, [r2, #0]
 8002eca:	f025 6570 	bic.w	r5, r5, #251658240	; 0xf000000
 8002ece:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
 8002ed2:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 8002ed4:	4333      	orrs	r3, r6
 8002ed6:	6a0e      	ldr	r6, [r1, #32]
 8002ed8:	4333      	orrs	r3, r6
 8002eda:	431c      	orrs	r4, r3
 8002edc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002ede:	431c      	orrs	r4, r3
 8002ee0:	4325      	orrs	r5, r4
 8002ee2:	6015      	str	r5, [r2, #0]
      hospi->Instance->AR = cmd->Address;
 8002ee4:	6803      	ldr	r3, [r0, #0]
 8002ee6:	698a      	ldr	r2, [r1, #24]
 8002ee8:	649a      	str	r2, [r3, #72]	; 0x48
  HAL_StatusTypeDef status = HAL_OK;
 8002eea:	2000      	movs	r0, #0
 8002eec:	e797      	b.n	8002e1e <OSPI_ConfigCmd+0xba>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 8002eee:	6814      	ldr	r4, [r2, #0]
 8002ef0:	f424 547c 	bic.w	r4, r4, #16128	; 0x3f00
 8002ef4:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 8002ef6:	432b      	orrs	r3, r5
 8002ef8:	6a0d      	ldr	r5, [r1, #32]
 8002efa:	432b      	orrs	r3, r5
 8002efc:	4323      	orrs	r3, r4
 8002efe:	6013      	str	r3, [r2, #0]
 8002f00:	e7f0      	b.n	8002ee4 <OSPI_ConfigCmd+0x180>
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8002f02:	2308      	movs	r3, #8
 8002f04:	6483      	str	r3, [r0, #72]	; 0x48
      status = HAL_ERROR;
 8002f06:	2001      	movs	r0, #1
 8002f08:	e789      	b.n	8002e1e <OSPI_ConfigCmd+0xba>
 8002f0a:	bf00      	nop
 8002f0c:	f0ffc0c0 	.word	0xf0ffc0c0

08002f10 <OSPIM_GetConfig>:
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t reg;
  uint32_t value = 0U;
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8002f10:	1e43      	subs	r3, r0, #1
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d901      	bls.n	8002f1c <OSPIM_GetConfig+0xc>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8002f18:	2001      	movs	r0, #1
 8002f1a:	4770      	bx	lr
  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8002f1c:	2900      	cmp	r1, #0
 8002f1e:	d05d      	beq.n	8002fdc <OSPIM_GetConfig+0xcc>
{
 8002f20:	b410      	push	{r4}
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8002f22:	2300      	movs	r3, #0
 8002f24:	600b      	str	r3, [r1, #0]
    cfg->DQSPort    = 0U;
 8002f26:	604b      	str	r3, [r1, #4]
    cfg->NCSPort    = 0U;
 8002f28:	608b      	str	r3, [r1, #8]
    cfg->IOLowPort  = 0U;
 8002f2a:	60cb      	str	r3, [r1, #12]
    cfg->IOHighPort = 0U;
 8002f2c:	610b      	str	r3, [r1, #16]

    if (instance_nb == 2U)
 8002f2e:	2802      	cmp	r0, #2
 8002f30:	d002      	beq.n	8002f38 <OSPIM_GetConfig+0x28>
  uint32_t value = 0U;
 8002f32:	461c      	mov	r4, r3
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8002f34:	2200      	movs	r2, #0
 8002f36:	e00b      	b.n	8002f50 <OSPIM_GetConfig+0x40>
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8002f38:	4c29      	ldr	r4, [pc, #164]	; (8002fe0 <OSPIM_GetConfig+0xd0>)
 8002f3a:	e7fb      	b.n	8002f34 <OSPIM_GetConfig+0x24>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8002f3c:	1c50      	adds	r0, r2, #1
 8002f3e:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
 8002f42:	60c8      	str	r0, [r1, #12]
 8002f44:	e036      	b.n	8002fb4 <OSPIM_GetConfig+0xa4>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8002f46:	1c53      	adds	r3, r2, #1
 8002f48:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f4c:	610b      	str	r3, [r1, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8002f4e:	3201      	adds	r2, #1
 8002f50:	2a01      	cmp	r2, #1
 8002f52:	d83f      	bhi.n	8002fd4 <OSPIM_GetConfig+0xc4>
      reg = OCTOSPIM->PCR[index];
 8002f54:	0090      	lsls	r0, r2, #2
 8002f56:	4b23      	ldr	r3, [pc, #140]	; (8002fe4 <OSPIM_GetConfig+0xd4>)
 8002f58:	581b      	ldr	r3, [r3, r0]
      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8002f5a:	f013 0f01 	tst.w	r3, #1
 8002f5e:	d006      	beq.n	8002f6e <OSPIM_GetConfig+0x5e>
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8002f60:	ea84 0003 	eor.w	r0, r4, r3
 8002f64:	f010 0f02 	tst.w	r0, #2
 8002f68:	d101      	bne.n	8002f6e <OSPIM_GetConfig+0x5e>
          cfg->ClkPort = index+1U;
 8002f6a:	1c50      	adds	r0, r2, #1
 8002f6c:	6008      	str	r0, [r1, #0]
      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8002f6e:	f013 0f10 	tst.w	r3, #16
 8002f72:	d006      	beq.n	8002f82 <OSPIM_GetConfig+0x72>
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8002f74:	ea84 0003 	eor.w	r0, r4, r3
 8002f78:	f010 0f20 	tst.w	r0, #32
 8002f7c:	d101      	bne.n	8002f82 <OSPIM_GetConfig+0x72>
          cfg->DQSPort = index+1U;
 8002f7e:	1c50      	adds	r0, r2, #1
 8002f80:	6048      	str	r0, [r1, #4]
      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8002f82:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002f86:	d006      	beq.n	8002f96 <OSPIM_GetConfig+0x86>
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8002f88:	ea84 0003 	eor.w	r0, r4, r3
 8002f8c:	f410 7f00 	tst.w	r0, #512	; 0x200
 8002f90:	d101      	bne.n	8002f96 <OSPIM_GetConfig+0x86>
          cfg->NCSPort = index+1U;
 8002f92:	1c50      	adds	r0, r2, #1
 8002f94:	6088      	str	r0, [r1, #8]
      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8002f96:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002f9a:	d00b      	beq.n	8002fb4 <OSPIM_GetConfig+0xa4>
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8002f9c:	ea84 0003 	eor.w	r0, r4, r3
 8002fa0:	f410 2f80 	tst.w	r0, #262144	; 0x40000
 8002fa4:	d106      	bne.n	8002fb4 <OSPIM_GetConfig+0xa4>
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8002fa6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002faa:	d1c7      	bne.n	8002f3c <OSPIM_GetConfig+0x2c>
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8002fac:	1c50      	adds	r0, r2, #1
 8002fae:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8002fb2:	60c8      	str	r0, [r1, #12]
      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8002fb4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8002fb8:	d0c9      	beq.n	8002f4e <OSPIM_GetConfig+0x3e>
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8002fba:	ea84 0003 	eor.w	r0, r4, r3
 8002fbe:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 8002fc2:	d1c4      	bne.n	8002f4e <OSPIM_GetConfig+0x3e>
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8002fc4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002fc8:	d1bd      	bne.n	8002f46 <OSPIM_GetConfig+0x36>
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8002fca:	1c53      	adds	r3, r2, #1
 8002fcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fd0:	610b      	str	r3, [r1, #16]
 8002fd2:	e7bc      	b.n	8002f4e <OSPIM_GetConfig+0x3e>
  HAL_StatusTypeDef status = HAL_OK;
 8002fd4:	2000      	movs	r0, #0
    }
  }

  /* Return function status */
  return status;
}
 8002fd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002fda:	4770      	bx	lr
    status = HAL_ERROR;
 8002fdc:	2001      	movs	r0, #1
}
 8002fde:	4770      	bx	lr
 8002fe0:	04040222 	.word	0x04040222
 8002fe4:	50061c04 	.word	0x50061c04

08002fe8 <OSPI_WaitFlagStateUntilTimeout>:
{
 8002fe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002fec:	4605      	mov	r5, r0
 8002fee:	460f      	mov	r7, r1
 8002ff0:	4616      	mov	r6, r2
 8002ff2:	4699      	mov	r9, r3
 8002ff4:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8002ff8:	682c      	ldr	r4, [r5, #0]
 8002ffa:	6a24      	ldr	r4, [r4, #32]
 8002ffc:	423c      	tst	r4, r7
 8002ffe:	bf14      	ite	ne
 8003000:	f04f 0c01 	movne.w	ip, #1
 8003004:	f04f 0c00 	moveq.w	ip, #0
 8003008:	45b4      	cmp	ip, r6
 800300a:	d014      	beq.n	8003036 <OSPI_WaitFlagStateUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 800300c:	f1b8 3fff 	cmp.w	r8, #4294967295
 8003010:	d0f2      	beq.n	8002ff8 <OSPI_WaitFlagStateUntilTimeout+0x10>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003012:	f7fe fd0b 	bl	8001a2c <HAL_GetTick>
 8003016:	eba0 0009 	sub.w	r0, r0, r9
 800301a:	4540      	cmp	r0, r8
 800301c:	d802      	bhi.n	8003024 <OSPI_WaitFlagStateUntilTimeout+0x3c>
 800301e:	f1b8 0f00 	cmp.w	r8, #0
 8003022:	d1e9      	bne.n	8002ff8 <OSPI_WaitFlagStateUntilTimeout+0x10>
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8003024:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003028:	646b      	str	r3, [r5, #68]	; 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 800302a:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800302c:	f043 0301 	orr.w	r3, r3, #1
 8003030:	64ab      	str	r3, [r5, #72]	; 0x48
        return HAL_ERROR;
 8003032:	2001      	movs	r0, #1
 8003034:	e000      	b.n	8003038 <OSPI_WaitFlagStateUntilTimeout+0x50>
  return HAL_OK;
 8003036:	2000      	movs	r0, #0
}
 8003038:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800303c <HAL_OSPI_Command>:
{
 800303c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003040:	b082      	sub	sp, #8
 8003042:	4604      	mov	r4, r0
 8003044:	4688      	mov	r8, r1
 8003046:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
 8003048:	f7fe fcf0 	bl	8001a2c <HAL_GetTick>
 800304c:	4606      	mov	r6, r0
  state = hospi->State;
 800304e:	6c65      	ldr	r5, [r4, #68]	; 0x44
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 8003050:	2d02      	cmp	r5, #2
 8003052:	d009      	beq.n	8003068 <HAL_OSPI_Command+0x2c>
 8003054:	2d14      	cmp	r5, #20
 8003056:	d024      	beq.n	80030a2 <HAL_OSPI_Command+0x66>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG))     ||
 8003058:	2d24      	cmp	r5, #36	; 0x24
 800305a:	d027      	beq.n	80030ac <HAL_OSPI_Command+0x70>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800305c:	2310      	movs	r3, #16
 800305e:	64a3      	str	r3, [r4, #72]	; 0x48
    status = HAL_ERROR;
 8003060:	2001      	movs	r0, #1
}
 8003062:	b002      	add	sp, #8
 8003064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 8003068:	68e3      	ldr	r3, [r4, #12]
 800306a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800306e:	d0f1      	beq.n	8003054 <HAL_OSPI_Command+0x18>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8003070:	9700      	str	r7, [sp, #0]
 8003072:	4633      	mov	r3, r6
 8003074:	2200      	movs	r2, #0
 8003076:	2120      	movs	r1, #32
 8003078:	4620      	mov	r0, r4
 800307a:	f7ff ffb5 	bl	8002fe8 <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800307e:	2800      	cmp	r0, #0
 8003080:	d1ef      	bne.n	8003062 <HAL_OSPI_Command+0x26>
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8003082:	64a0      	str	r0, [r4, #72]	; 0x48
      status = OSPI_ConfigCmd(hospi, cmd);
 8003084:	4641      	mov	r1, r8
 8003086:	4620      	mov	r0, r4
 8003088:	f7ff fe6c 	bl	8002d64 <OSPI_ConfigCmd>
      if (status == HAL_OK)
 800308c:	2800      	cmp	r0, #0
 800308e:	d1e8      	bne.n	8003062 <HAL_OSPI_Command+0x26>
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 8003090:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
 8003094:	b17b      	cbz	r3, 80030b6 <HAL_OSPI_Command+0x7a>
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8003096:	f8d8 3000 	ldr.w	r3, [r8]
 800309a:	b9bb      	cbnz	r3, 80030cc <HAL_OSPI_Command+0x90>
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800309c:	2304      	movs	r3, #4
 800309e:	6463      	str	r3, [r4, #68]	; 0x44
 80030a0:	e7df      	b.n	8003062 <HAL_OSPI_Command+0x26>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG))     ||
 80030a2:	f8d8 3000 	ldr.w	r3, [r8]
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d1d6      	bne.n	8003058 <HAL_OSPI_Command+0x1c>
 80030aa:	e7e1      	b.n	8003070 <HAL_OSPI_Command+0x34>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)))
 80030ac:	f8d8 3000 	ldr.w	r3, [r8]
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d1d3      	bne.n	800305c <HAL_OSPI_Command+0x20>
 80030b4:	e7dc      	b.n	8003070 <HAL_OSPI_Command+0x34>
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 80030b6:	9700      	str	r7, [sp, #0]
 80030b8:	4633      	mov	r3, r6
 80030ba:	2201      	movs	r2, #1
 80030bc:	2102      	movs	r1, #2
 80030be:	4620      	mov	r0, r4
 80030c0:	f7ff ff92 	bl	8002fe8 <OSPI_WaitFlagStateUntilTimeout>
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80030c4:	6823      	ldr	r3, [r4, #0]
 80030c6:	2202      	movs	r2, #2
 80030c8:	625a      	str	r2, [r3, #36]	; 0x24
 80030ca:	e7ca      	b.n	8003062 <HAL_OSPI_Command+0x26>
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d005      	beq.n	80030dc <HAL_OSPI_Command+0xa0>
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 80030d0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80030d2:	2b14      	cmp	r3, #20
 80030d4:	d00b      	beq.n	80030ee <HAL_OSPI_Command+0xb2>
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 80030d6:	2324      	movs	r3, #36	; 0x24
 80030d8:	6463      	str	r3, [r4, #68]	; 0x44
 80030da:	e7c2      	b.n	8003062 <HAL_OSPI_Command+0x26>
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 80030dc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80030de:	2b24      	cmp	r3, #36	; 0x24
 80030e0:	d002      	beq.n	80030e8 <HAL_OSPI_Command+0xac>
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 80030e2:	2314      	movs	r3, #20
 80030e4:	6463      	str	r3, [r4, #68]	; 0x44
 80030e6:	e7bc      	b.n	8003062 <HAL_OSPI_Command+0x26>
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80030e8:	2304      	movs	r3, #4
 80030ea:	6463      	str	r3, [r4, #68]	; 0x44
 80030ec:	e7b9      	b.n	8003062 <HAL_OSPI_Command+0x26>
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80030ee:	2304      	movs	r3, #4
 80030f0:	6463      	str	r3, [r4, #68]	; 0x44
 80030f2:	e7b6      	b.n	8003062 <HAL_OSPI_Command+0x26>

080030f4 <HAL_OSPI_Transmit>:
{
 80030f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030f8:	b082      	sub	sp, #8
 80030fa:	4604      	mov	r4, r0
 80030fc:	4688      	mov	r8, r1
 80030fe:	4616      	mov	r6, r2
  uint32_t tickstart = HAL_GetTick();
 8003100:	f7fe fc94 	bl	8001a2c <HAL_GetTick>
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8003104:	6827      	ldr	r7, [r4, #0]
  if (pData == NULL)
 8003106:	f1b8 0f00 	cmp.w	r8, #0
 800310a:	d00a      	beq.n	8003122 <HAL_OSPI_Transmit+0x2e>
 800310c:	4605      	mov	r5, r0
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800310e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003110:	2b04      	cmp	r3, #4
 8003112:	d00a      	beq.n	800312a <HAL_OSPI_Transmit+0x36>
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8003114:	2310      	movs	r3, #16
 8003116:	64a3      	str	r3, [r4, #72]	; 0x48
      status = HAL_ERROR;
 8003118:	2301      	movs	r3, #1
}
 800311a:	4618      	mov	r0, r3
 800311c:	b002      	add	sp, #8
 800311e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8003122:	2308      	movs	r3, #8
 8003124:	64a3      	str	r3, [r4, #72]	; 0x48
    status = HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e7f7      	b.n	800311a <HAL_OSPI_Transmit+0x26>
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 800312a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800312c:	3301      	adds	r3, #1
 800312e:	63e3      	str	r3, [r4, #60]	; 0x3c
      hospi->XferSize  = hospi->XferCount;
 8003130:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003132:	63a3      	str	r3, [r4, #56]	; 0x38
      hospi->pBuffPtr  = pData;
 8003134:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800313e:	603b      	str	r3, [r7, #0]
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 8003140:	9600      	str	r6, [sp, #0]
 8003142:	462b      	mov	r3, r5
 8003144:	2201      	movs	r2, #1
 8003146:	2104      	movs	r1, #4
 8003148:	4620      	mov	r0, r4
 800314a:	f7ff ff4d 	bl	8002fe8 <OSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 800314e:	4603      	mov	r3, r0
 8003150:	b960      	cbnz	r0, 800316c <HAL_OSPI_Transmit+0x78>
        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 8003152:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003154:	7812      	ldrb	r2, [r2, #0]
 8003156:	f887 2050 	strb.w	r2, [r7, #80]	; 0x50
        hospi->pBuffPtr++;
 800315a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800315c:	3101      	adds	r1, #1
 800315e:	6361      	str	r1, [r4, #52]	; 0x34
        hospi->XferCount--;
 8003160:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8003162:	3901      	subs	r1, #1
 8003164:	63e1      	str	r1, [r4, #60]	; 0x3c
      } while (hospi->XferCount > 0U);
 8003166:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003168:	2a00      	cmp	r2, #0
 800316a:	d1e9      	bne.n	8003140 <HAL_OSPI_Transmit+0x4c>
      if (status == HAL_OK)
 800316c:	2b00      	cmp	r3, #0
 800316e:	d1d4      	bne.n	800311a <HAL_OSPI_Transmit+0x26>
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8003170:	9600      	str	r6, [sp, #0]
 8003172:	462b      	mov	r3, r5
 8003174:	2201      	movs	r2, #1
 8003176:	2102      	movs	r1, #2
 8003178:	4620      	mov	r0, r4
 800317a:	f7ff ff35 	bl	8002fe8 <OSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800317e:	4603      	mov	r3, r0
 8003180:	2800      	cmp	r0, #0
 8003182:	d1ca      	bne.n	800311a <HAL_OSPI_Transmit+0x26>
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8003184:	6821      	ldr	r1, [r4, #0]
 8003186:	2202      	movs	r2, #2
 8003188:	624a      	str	r2, [r1, #36]	; 0x24
          hospi->State = HAL_OSPI_STATE_READY;
 800318a:	6462      	str	r2, [r4, #68]	; 0x44
 800318c:	e7c5      	b.n	800311a <HAL_OSPI_Transmit+0x26>

0800318e <HAL_OSPI_Receive>:
{
 800318e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	4604      	mov	r4, r0
 8003196:	4688      	mov	r8, r1
 8003198:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
 800319a:	f7fe fc47 	bl	8001a2c <HAL_GetTick>
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 800319e:	6825      	ldr	r5, [r4, #0]
  uint32_t addr_reg = hospi->Instance->AR;
 80031a0:	6caa      	ldr	r2, [r5, #72]	; 0x48
  uint32_t ir_reg = hospi->Instance->IR;
 80031a2:	f8d5 1110 	ldr.w	r1, [r5, #272]	; 0x110
  if (pData == NULL)
 80031a6:	f1b8 0f00 	cmp.w	r8, #0
 80031aa:	d00a      	beq.n	80031c2 <HAL_OSPI_Receive+0x34>
 80031ac:	4606      	mov	r6, r0
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 80031ae:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80031b0:	2b04      	cmp	r3, #4
 80031b2:	d00a      	beq.n	80031ca <HAL_OSPI_Receive+0x3c>
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80031b4:	2310      	movs	r3, #16
 80031b6:	64a3      	str	r3, [r4, #72]	; 0x48
      status = HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	b002      	add	sp, #8
 80031be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80031c2:	2308      	movs	r3, #8
 80031c4:	64a3      	str	r3, [r4, #72]	; 0x48
    status = HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e7f7      	b.n	80031ba <HAL_OSPI_Receive+0x2c>
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 80031ca:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80031cc:	3301      	adds	r3, #1
 80031ce:	63e3      	str	r3, [r4, #60]	; 0x3c
      hospi->XferSize  = hospi->XferCount;
 80031d0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80031d2:	63a3      	str	r3, [r4, #56]	; 0x38
      hospi->pBuffPtr  = pData;
 80031d4:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 80031d8:	682b      	ldr	r3, [r5, #0]
 80031da:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80031de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031e2:	602b      	str	r3, [r5, #0]
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80031e4:	68e3      	ldr	r3, [r4, #12]
 80031e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80031ea:	d007      	beq.n	80031fc <HAL_OSPI_Receive+0x6e>
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 80031ec:	6823      	ldr	r3, [r4, #0]
 80031ee:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
 80031f2:	f410 6fe0 	tst.w	r0, #1792	; 0x700
 80031f6:	d02a      	beq.n	800324e <HAL_OSPI_Receive+0xc0>
          WRITE_REG(hospi->Instance->AR, addr_reg);
 80031f8:	649a      	str	r2, [r3, #72]	; 0x48
 80031fa:	e001      	b.n	8003200 <HAL_OSPI_Receive+0x72>
        WRITE_REG(hospi->Instance->AR, addr_reg);
 80031fc:	6823      	ldr	r3, [r4, #0]
 80031fe:	649a      	str	r2, [r3, #72]	; 0x48
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 8003200:	9700      	str	r7, [sp, #0]
 8003202:	4633      	mov	r3, r6
 8003204:	2201      	movs	r2, #1
 8003206:	2106      	movs	r1, #6
 8003208:	4620      	mov	r0, r4
 800320a:	f7ff feed 	bl	8002fe8 <OSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 800320e:	4603      	mov	r3, r0
 8003210:	b960      	cbnz	r0, 800322c <HAL_OSPI_Receive+0x9e>
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8003212:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003214:	f895 1050 	ldrb.w	r1, [r5, #80]	; 0x50
 8003218:	7011      	strb	r1, [r2, #0]
        hospi->pBuffPtr++;
 800321a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800321c:	3101      	adds	r1, #1
 800321e:	6361      	str	r1, [r4, #52]	; 0x34
        hospi->XferCount--;
 8003220:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8003222:	3901      	subs	r1, #1
 8003224:	63e1      	str	r1, [r4, #60]	; 0x3c
      } while(hospi->XferCount > 0U);
 8003226:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003228:	2a00      	cmp	r2, #0
 800322a:	d1e9      	bne.n	8003200 <HAL_OSPI_Receive+0x72>
      if (status == HAL_OK)
 800322c:	2b00      	cmp	r3, #0
 800322e:	d1c4      	bne.n	80031ba <HAL_OSPI_Receive+0x2c>
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8003230:	9700      	str	r7, [sp, #0]
 8003232:	4633      	mov	r3, r6
 8003234:	2201      	movs	r2, #1
 8003236:	2102      	movs	r1, #2
 8003238:	4620      	mov	r0, r4
 800323a:	f7ff fed5 	bl	8002fe8 <OSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800323e:	4603      	mov	r3, r0
 8003240:	2800      	cmp	r0, #0
 8003242:	d1ba      	bne.n	80031ba <HAL_OSPI_Receive+0x2c>
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8003244:	6821      	ldr	r1, [r4, #0]
 8003246:	2202      	movs	r2, #2
 8003248:	624a      	str	r2, [r1, #36]	; 0x24
          hospi->State = HAL_OSPI_STATE_READY;
 800324a:	6462      	str	r2, [r4, #68]	; 0x44
 800324c:	e7b5      	b.n	80031ba <HAL_OSPI_Receive+0x2c>
          WRITE_REG(hospi->Instance->IR, ir_reg);
 800324e:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
 8003252:	e7d5      	b.n	8003200 <HAL_OSPI_Receive+0x72>

08003254 <HAL_OSPI_ErrorCallback>:
}
 8003254:	4770      	bx	lr

08003256 <HAL_OSPI_AbortCpltCallback>:
}
 8003256:	4770      	bx	lr

08003258 <OSPI_DMAAbortCplt>:
{
 8003258:	b508      	push	{r3, lr}
  OSPI_HandleTypeDef* hospi = ( OSPI_HandleTypeDef* )(hdma->Parent);
 800325a:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hospi->XferCount = 0;
 800325c:	2300      	movs	r3, #0
 800325e:	63c3      	str	r3, [r0, #60]	; 0x3c
  if (hospi->State == HAL_OSPI_STATE_ABORT)
 8003260:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003262:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003266:	d116      	bne.n	8003296 <OSPI_DMAAbortCplt+0x3e>
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8003268:	6803      	ldr	r3, [r0, #0]
 800326a:	6a1a      	ldr	r2, [r3, #32]
 800326c:	f012 0f20 	tst.w	r2, #32
 8003270:	d00c      	beq.n	800328c <OSPI_DMAAbortCplt+0x34>
      __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8003272:	2202      	movs	r2, #2
 8003274:	625a      	str	r2, [r3, #36]	; 0x24
      __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TC);
 8003276:	6802      	ldr	r2, [r0, #0]
 8003278:	6813      	ldr	r3, [r2, #0]
 800327a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800327e:	6013      	str	r3, [r2, #0]
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 8003280:	6802      	ldr	r2, [r0, #0]
 8003282:	6813      	ldr	r3, [r2, #0]
 8003284:	f043 0302 	orr.w	r3, r3, #2
 8003288:	6013      	str	r3, [r2, #0]
 800328a:	e008      	b.n	800329e <OSPI_DMAAbortCplt+0x46>
      hospi->State = HAL_OSPI_STATE_READY;
 800328c:	2302      	movs	r3, #2
 800328e:	6443      	str	r3, [r0, #68]	; 0x44
      HAL_OSPI_AbortCpltCallback(hospi);
 8003290:	f7ff ffe1 	bl	8003256 <HAL_OSPI_AbortCpltCallback>
 8003294:	e003      	b.n	800329e <OSPI_DMAAbortCplt+0x46>
    hospi->State = HAL_OSPI_STATE_READY;
 8003296:	2302      	movs	r3, #2
 8003298:	6443      	str	r3, [r0, #68]	; 0x44
    HAL_OSPI_ErrorCallback(hospi);
 800329a:	f7ff ffdb 	bl	8003254 <HAL_OSPI_ErrorCallback>
}
 800329e:	bd08      	pop	{r3, pc}

080032a0 <HAL_OSPI_FifoThresholdCallback>:
}
 80032a0:	4770      	bx	lr

080032a2 <HAL_OSPI_CmdCpltCallback>:
}
 80032a2:	4770      	bx	lr

080032a4 <HAL_OSPI_RxCpltCallback>:
}
 80032a4:	4770      	bx	lr

080032a6 <HAL_OSPI_TxCpltCallback>:
}
 80032a6:	4770      	bx	lr

080032a8 <HAL_OSPI_StatusMatchCallback>:
}
 80032a8:	4770      	bx	lr

080032aa <HAL_OSPI_TimeOutCallback>:
}
 80032aa:	4770      	bx	lr

080032ac <HAL_OSPI_IRQHandler>:
{
 80032ac:	b510      	push	{r4, lr}
 80032ae:	4604      	mov	r4, r0
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 80032b0:	6802      	ldr	r2, [r0, #0]
  uint32_t flag           = hospi->Instance->SR;
 80032b2:	6a13      	ldr	r3, [r2, #32]
  uint32_t itsource       = hospi->Instance->CR;
 80032b4:	6811      	ldr	r1, [r2, #0]
  uint32_t currentstate   = hospi->State;
 80032b6:	6c40      	ldr	r0, [r0, #68]	; 0x44
  if (((flag & HAL_OSPI_FLAG_FT) != 0U) && ((itsource & HAL_OSPI_IT_FT) != 0U))
 80032b8:	f013 0f04 	tst.w	r3, #4
 80032bc:	d027      	beq.n	800330e <HAL_OSPI_IRQHandler+0x62>
 80032be:	f411 2f80 	tst.w	r1, #262144	; 0x40000
 80032c2:	d024      	beq.n	800330e <HAL_OSPI_IRQHandler+0x62>
    if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 80032c4:	2818      	cmp	r0, #24
 80032c6:	d00c      	beq.n	80032e2 <HAL_OSPI_IRQHandler+0x36>
    else if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 80032c8:	2828      	cmp	r0, #40	; 0x28
 80032ca:	d015      	beq.n	80032f8 <HAL_OSPI_IRQHandler+0x4c>
    if (hospi->XferCount == 0U)
 80032cc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80032ce:	b923      	cbnz	r3, 80032da <HAL_OSPI_IRQHandler+0x2e>
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_FT);
 80032d0:	6822      	ldr	r2, [r4, #0]
 80032d2:	6813      	ldr	r3, [r2, #0]
 80032d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032d8:	6013      	str	r3, [r2, #0]
    HAL_OSPI_FifoThresholdCallback(hospi);
 80032da:	4620      	mov	r0, r4
 80032dc:	f7ff ffe0 	bl	80032a0 <HAL_OSPI_FifoThresholdCallback>
}
 80032e0:	bd10      	pop	{r4, pc}
      *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 80032e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
      hospi->pBuffPtr++;
 80032ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80032ec:	3301      	adds	r3, #1
 80032ee:	6363      	str	r3, [r4, #52]	; 0x34
      hospi->XferCount--;
 80032f0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80032f2:	3b01      	subs	r3, #1
 80032f4:	63e3      	str	r3, [r4, #60]	; 0x3c
 80032f6:	e7e9      	b.n	80032cc <HAL_OSPI_IRQHandler+0x20>
      *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 80032f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80032fa:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 80032fe:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 8003300:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003302:	3301      	adds	r3, #1
 8003304:	6363      	str	r3, [r4, #52]	; 0x34
      hospi->XferCount--;
 8003306:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003308:	3b01      	subs	r3, #1
 800330a:	63e3      	str	r3, [r4, #60]	; 0x3c
 800330c:	e7de      	b.n	80032cc <HAL_OSPI_IRQHandler+0x20>
  else if (((flag & HAL_OSPI_FLAG_TC) != 0U) && ((itsource & HAL_OSPI_IT_TC) != 0U))
 800330e:	f013 0f02 	tst.w	r3, #2
 8003312:	d044      	beq.n	800339e <HAL_OSPI_IRQHandler+0xf2>
 8003314:	f411 3f00 	tst.w	r1, #131072	; 0x20000
 8003318:	d041      	beq.n	800339e <HAL_OSPI_IRQHandler+0xf2>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800331a:	2828      	cmp	r0, #40	; 0x28
 800331c:	d014      	beq.n	8003348 <HAL_OSPI_IRQHandler+0x9c>
      hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 800331e:	2102      	movs	r1, #2
 8003320:	6251      	str	r1, [r2, #36]	; 0x24
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 8003322:	6822      	ldr	r2, [r4, #0]
 8003324:	6813      	ldr	r3, [r2, #0]
 8003326:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800332a:	6013      	str	r3, [r2, #0]
      hospi->State = HAL_OSPI_STATE_READY;
 800332c:	6461      	str	r1, [r4, #68]	; 0x44
      if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 800332e:	2818      	cmp	r0, #24
 8003330:	d029      	beq.n	8003386 <HAL_OSPI_IRQHandler+0xda>
      else if (currentstate == HAL_OSPI_STATE_BUSY_CMD)
 8003332:	2808      	cmp	r0, #8
 8003334:	d02b      	beq.n	800338e <HAL_OSPI_IRQHandler+0xe2>
      else if (currentstate == HAL_OSPI_STATE_ABORT)
 8003336:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800333a:	d1d1      	bne.n	80032e0 <HAL_OSPI_IRQHandler+0x34>
        if (hospi->ErrorCode == HAL_OSPI_ERROR_NONE)
 800333c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800333e:	bb53      	cbnz	r3, 8003396 <HAL_OSPI_IRQHandler+0xea>
          HAL_OSPI_AbortCpltCallback(hospi);
 8003340:	4620      	mov	r0, r4
 8003342:	f7ff ff88 	bl	8003256 <HAL_OSPI_AbortCpltCallback>
 8003346:	e7cb      	b.n	80032e0 <HAL_OSPI_IRQHandler+0x34>
      if ((hospi->XferCount > 0U) && ((flag & OCTOSPI_SR_FLEVEL) != 0U))
 8003348:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800334a:	b169      	cbz	r1, 8003368 <HAL_OSPI_IRQHandler+0xbc>
 800334c:	f413 5f7c 	tst.w	r3, #16128	; 0x3f00
 8003350:	d00a      	beq.n	8003368 <HAL_OSPI_IRQHandler+0xbc>
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8003352:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003354:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 8003358:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 800335a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800335c:	3301      	adds	r3, #1
 800335e:	6363      	str	r3, [r4, #52]	; 0x34
        hospi->XferCount--;
 8003360:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003362:	3b01      	subs	r3, #1
 8003364:	63e3      	str	r3, [r4, #60]	; 0x3c
 8003366:	e7bb      	b.n	80032e0 <HAL_OSPI_IRQHandler+0x34>
      else if(hospi->XferCount == 0U)
 8003368:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800336a:	2b00      	cmp	r3, #0
 800336c:	d1b8      	bne.n	80032e0 <HAL_OSPI_IRQHandler+0x34>
        hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 800336e:	2102      	movs	r1, #2
 8003370:	6251      	str	r1, [r2, #36]	; 0x24
        __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 8003372:	6822      	ldr	r2, [r4, #0]
 8003374:	6813      	ldr	r3, [r2, #0]
 8003376:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800337a:	6013      	str	r3, [r2, #0]
        hospi->State = HAL_OSPI_STATE_READY;
 800337c:	6461      	str	r1, [r4, #68]	; 0x44
        HAL_OSPI_RxCpltCallback(hospi);
 800337e:	4620      	mov	r0, r4
 8003380:	f7ff ff90 	bl	80032a4 <HAL_OSPI_RxCpltCallback>
 8003384:	e7ac      	b.n	80032e0 <HAL_OSPI_IRQHandler+0x34>
        HAL_OSPI_TxCpltCallback(hospi);
 8003386:	4620      	mov	r0, r4
 8003388:	f7ff ff8d 	bl	80032a6 <HAL_OSPI_TxCpltCallback>
 800338c:	e7a8      	b.n	80032e0 <HAL_OSPI_IRQHandler+0x34>
        HAL_OSPI_CmdCpltCallback(hospi);
 800338e:	4620      	mov	r0, r4
 8003390:	f7ff ff87 	bl	80032a2 <HAL_OSPI_CmdCpltCallback>
 8003394:	e7a4      	b.n	80032e0 <HAL_OSPI_IRQHandler+0x34>
          HAL_OSPI_ErrorCallback(hospi);
 8003396:	4620      	mov	r0, r4
 8003398:	f7ff ff5c 	bl	8003254 <HAL_OSPI_ErrorCallback>
 800339c:	e7a0      	b.n	80032e0 <HAL_OSPI_IRQHandler+0x34>
  else if (((flag & HAL_OSPI_FLAG_SM) != 0U) && ((itsource & HAL_OSPI_IT_SM) != 0U))
 800339e:	f013 0f08 	tst.w	r3, #8
 80033a2:	d013      	beq.n	80033cc <HAL_OSPI_IRQHandler+0x120>
 80033a4:	f411 2f00 	tst.w	r1, #524288	; 0x80000
 80033a8:	d010      	beq.n	80033cc <HAL_OSPI_IRQHandler+0x120>
    hospi->Instance->FCR = HAL_OSPI_FLAG_SM;
 80033aa:	2308      	movs	r3, #8
 80033ac:	6253      	str	r3, [r2, #36]	; 0x24
    if ((hospi->Instance->CR & OCTOSPI_CR_APMS) != 0U)
 80033ae:	6823      	ldr	r3, [r4, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 80033b6:	d005      	beq.n	80033c4 <HAL_OSPI_IRQHandler+0x118>
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_SM | HAL_OSPI_IT_TE);
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 80033be:	601a      	str	r2, [r3, #0]
      hospi->State = HAL_OSPI_STATE_READY;
 80033c0:	2302      	movs	r3, #2
 80033c2:	6463      	str	r3, [r4, #68]	; 0x44
    HAL_OSPI_StatusMatchCallback(hospi);
 80033c4:	4620      	mov	r0, r4
 80033c6:	f7ff ff6f 	bl	80032a8 <HAL_OSPI_StatusMatchCallback>
 80033ca:	e789      	b.n	80032e0 <HAL_OSPI_IRQHandler+0x34>
  else if (((flag & HAL_OSPI_FLAG_TE) != 0U) && ((itsource & HAL_OSPI_IT_TE) != 0U))
 80033cc:	f013 0f01 	tst.w	r3, #1
 80033d0:	d029      	beq.n	8003426 <HAL_OSPI_IRQHandler+0x17a>
 80033d2:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 80033d6:	d026      	beq.n	8003426 <HAL_OSPI_IRQHandler+0x17a>
    hospi->Instance->FCR = HAL_OSPI_FLAG_TE;
 80033d8:	2301      	movs	r3, #1
 80033da:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_OSPI_DISABLE_IT(hospi, (HAL_OSPI_IT_TO | HAL_OSPI_IT_SM | HAL_OSPI_IT_FT | HAL_OSPI_IT_TC | HAL_OSPI_IT_TE));
 80033dc:	6822      	ldr	r2, [r4, #0]
 80033de:	6813      	ldr	r3, [r2, #0]
 80033e0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80033e4:	6013      	str	r3, [r2, #0]
    hospi->ErrorCode = HAL_OSPI_ERROR_TRANSFER;
 80033e6:	2302      	movs	r3, #2
 80033e8:	64a3      	str	r3, [r4, #72]	; 0x48
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 80033ea:	6823      	ldr	r3, [r4, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	f012 0f04 	tst.w	r2, #4
 80033f2:	d012      	beq.n	800341a <HAL_OSPI_IRQHandler+0x16e>
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	f022 0204 	bic.w	r2, r2, #4
 80033fa:	601a      	str	r2, [r3, #0]
      hospi->hdma->XferAbortCallback = OSPI_DMAAbortCplt;
 80033fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80033fe:	4a11      	ldr	r2, [pc, #68]	; (8003444 <HAL_OSPI_IRQHandler+0x198>)
 8003400:	639a      	str	r2, [r3, #56]	; 0x38
      if (HAL_DMA_Abort_IT(hospi->hdma) != HAL_OK)
 8003402:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003404:	f7fe fce4 	bl	8001dd0 <HAL_DMA_Abort_IT>
 8003408:	2800      	cmp	r0, #0
 800340a:	f43f af69 	beq.w	80032e0 <HAL_OSPI_IRQHandler+0x34>
        hospi->State = HAL_OSPI_STATE_READY;
 800340e:	2302      	movs	r3, #2
 8003410:	6463      	str	r3, [r4, #68]	; 0x44
        HAL_OSPI_ErrorCallback(hospi);
 8003412:	4620      	mov	r0, r4
 8003414:	f7ff ff1e 	bl	8003254 <HAL_OSPI_ErrorCallback>
 8003418:	e762      	b.n	80032e0 <HAL_OSPI_IRQHandler+0x34>
      hospi->State = HAL_OSPI_STATE_READY;
 800341a:	2302      	movs	r3, #2
 800341c:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_OSPI_ErrorCallback(hospi);
 800341e:	4620      	mov	r0, r4
 8003420:	f7ff ff18 	bl	8003254 <HAL_OSPI_ErrorCallback>
 8003424:	e75c      	b.n	80032e0 <HAL_OSPI_IRQHandler+0x34>
  else if (((flag & HAL_OSPI_FLAG_TO) != 0U) && ((itsource & HAL_OSPI_IT_TO) != 0U))
 8003426:	f013 0f10 	tst.w	r3, #16
 800342a:	f43f af59 	beq.w	80032e0 <HAL_OSPI_IRQHandler+0x34>
 800342e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8003432:	f43f af55 	beq.w	80032e0 <HAL_OSPI_IRQHandler+0x34>
    hospi->Instance->FCR = HAL_OSPI_FLAG_TO;
 8003436:	2310      	movs	r3, #16
 8003438:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_OSPI_TimeOutCallback(hospi);
 800343a:	4620      	mov	r0, r4
 800343c:	f7ff ff35 	bl	80032aa <HAL_OSPI_TimeOutCallback>
}
 8003440:	e74e      	b.n	80032e0 <HAL_OSPI_IRQHandler+0x34>
 8003442:	bf00      	nop
 8003444:	08003259 	.word	0x08003259

08003448 <HAL_OSPI_SetTimeout>:
  hospi->Timeout = Timeout;
 8003448:	64c1      	str	r1, [r0, #76]	; 0x4c
}
 800344a:	2000      	movs	r0, #0
 800344c:	4770      	bx	lr
	...

08003450 <HAL_OSPI_Init>:
{
 8003450:	b530      	push	{r4, r5, lr}
 8003452:	b083      	sub	sp, #12
 8003454:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003456:	f7fe fae9 	bl	8001a2c <HAL_GetTick>
  if (hospi == NULL)
 800345a:	2c00      	cmp	r4, #0
 800345c:	d06b      	beq.n	8003536 <HAL_OSPI_Init+0xe6>
 800345e:	4605      	mov	r5, r0
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8003460:	2300      	movs	r3, #0
 8003462:	64a3      	str	r3, [r4, #72]	; 0x48
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8003464:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003466:	b113      	cbz	r3, 800346e <HAL_OSPI_Init+0x1e>
  HAL_StatusTypeDef status = HAL_OK;
 8003468:	2000      	movs	r0, #0
}
 800346a:	b003      	add	sp, #12
 800346c:	bd30      	pop	{r4, r5, pc}
      HAL_OSPI_MspInit(hospi);
 800346e:	4620      	mov	r0, r4
 8003470:	f7fd fb4e 	bl	8000b10 <HAL_OSPI_MspInit>
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8003474:	f241 3188 	movw	r1, #5000	; 0x1388
 8003478:	4620      	mov	r0, r4
 800347a:	f7ff ffe5 	bl	8003448 <HAL_OSPI_SetTimeout>
      MODIFY_REG(hospi->Instance->DCR1,
 800347e:	6820      	ldr	r0, [r4, #0]
 8003480:	6882      	ldr	r2, [r0, #8]
 8003482:	4b2e      	ldr	r3, [pc, #184]	; (800353c <HAL_OSPI_Init+0xec>)
 8003484:	4013      	ands	r3, r2
 8003486:	68e2      	ldr	r2, [r4, #12]
 8003488:	6921      	ldr	r1, [r4, #16]
 800348a:	3901      	subs	r1, #1
 800348c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003490:	6961      	ldr	r1, [r4, #20]
 8003492:	3901      	subs	r1, #1
 8003494:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003498:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800349a:	430a      	orrs	r2, r1
 800349c:	69e1      	ldr	r1, [r4, #28]
 800349e:	430a      	orrs	r2, r1
 80034a0:	4313      	orrs	r3, r2
 80034a2:	6083      	str	r3, [r0, #8]
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 80034a4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80034a6:	6822      	ldr	r2, [r4, #0]
 80034a8:	041b      	lsls	r3, r3, #16
 80034aa:	6113      	str	r3, [r2, #16]
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 80034ac:	6821      	ldr	r1, [r4, #0]
 80034ae:	680b      	ldr	r3, [r1, #0]
 80034b0:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80034b4:	6862      	ldr	r2, [r4, #4]
 80034b6:	3a01      	subs	r2, #1
 80034b8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80034bc:	600b      	str	r3, [r1, #0]
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80034be:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80034c0:	9300      	str	r3, [sp, #0]
 80034c2:	462b      	mov	r3, r5
 80034c4:	2200      	movs	r2, #0
 80034c6:	2120      	movs	r1, #32
 80034c8:	4620      	mov	r0, r4
 80034ca:	f7ff fd8d 	bl	8002fe8 <OSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 80034ce:	2800      	cmp	r0, #0
 80034d0:	d1cb      	bne.n	800346a <HAL_OSPI_Init+0x1a>
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 80034d2:	6821      	ldr	r1, [r4, #0]
 80034d4:	68cb      	ldr	r3, [r1, #12]
 80034d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80034da:	6a22      	ldr	r2, [r4, #32]
 80034dc:	3a01      	subs	r2, #1
 80034de:	4313      	orrs	r3, r2
 80034e0:	60cb      	str	r3, [r1, #12]
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 80034e2:	6822      	ldr	r2, [r4, #0]
 80034e4:	6813      	ldr	r3, [r2, #0]
 80034e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034ea:	68a1      	ldr	r1, [r4, #8]
 80034ec:	430b      	orrs	r3, r1
 80034ee:	6013      	str	r3, [r2, #0]
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 80034f0:	6821      	ldr	r1, [r4, #0]
 80034f2:	f8d1 3108 	ldr.w	r3, [r1, #264]	; 0x108
 80034f6:	f023 43a0 	bic.w	r3, r3, #1342177280	; 0x50000000
 80034fa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80034fc:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80034fe:	432a      	orrs	r2, r5
 8003500:	4313      	orrs	r3, r2
 8003502:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
        __HAL_OSPI_ENABLE(hospi);
 8003506:	6822      	ldr	r2, [r4, #0]
 8003508:	6813      	ldr	r3, [r2, #0]
 800350a:	f043 0301 	orr.w	r3, r3, #1
 800350e:	6013      	str	r3, [r2, #0]
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8003510:	69a3      	ldr	r3, [r4, #24]
 8003512:	2b02      	cmp	r3, #2
 8003514:	d006      	beq.n	8003524 <HAL_OSPI_Init+0xd4>
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8003516:	68e3      	ldr	r3, [r4, #12]
 8003518:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800351c:	d008      	beq.n	8003530 <HAL_OSPI_Init+0xe0>
          hospi->State = HAL_OSPI_STATE_READY;
 800351e:	2302      	movs	r3, #2
 8003520:	6463      	str	r3, [r4, #68]	; 0x44
 8003522:	e7a2      	b.n	800346a <HAL_OSPI_Init+0x1a>
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8003524:	6822      	ldr	r2, [r4, #0]
 8003526:	6893      	ldr	r3, [r2, #8]
 8003528:	f043 0302 	orr.w	r3, r3, #2
 800352c:	6093      	str	r3, [r2, #8]
 800352e:	e7f2      	b.n	8003516 <HAL_OSPI_Init+0xc6>
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8003530:	2301      	movs	r3, #1
 8003532:	6463      	str	r3, [r4, #68]	; 0x44
 8003534:	e799      	b.n	800346a <HAL_OSPI_Init+0x1a>
    status = HAL_ERROR;
 8003536:	2001      	movs	r0, #1
 8003538:	e797      	b.n	800346a <HAL_OSPI_Init+0x1a>
 800353a:	bf00      	nop
 800353c:	f8e0f8f4 	.word	0xf8e0f8f4

08003540 <HAL_OSPIM_Config>:
{
 8003540:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003544:	b08b      	sub	sp, #44	; 0x2c
 8003546:	4681      	mov	r9, r0
 8003548:	460d      	mov	r5, r1
  if (hospi->Instance == OCTOSPI1)
 800354a:	6802      	ldr	r2, [r0, #0]
 800354c:	4bb2      	ldr	r3, [pc, #712]	; (8003818 <HAL_OSPIM_Config+0x2d8>)
 800354e:	429a      	cmp	r2, r3
 8003550:	d005      	beq.n	800355e <HAL_OSPIM_Config+0x1e>
    other_instance = 0U;
 8003552:	f04f 0800 	mov.w	r8, #0
    instance = 1U;
 8003556:	2601      	movs	r6, #1
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8003558:	2300      	movs	r3, #0
  HAL_StatusTypeDef status = HAL_OK;
 800355a:	461f      	mov	r7, r3
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 800355c:	e004      	b.n	8003568 <HAL_OSPIM_Config+0x28>
    other_instance = 1U;
 800355e:	f04f 0801 	mov.w	r8, #1
    instance = 0U;
 8003562:	2600      	movs	r6, #0
 8003564:	e7f8      	b.n	8003558 <HAL_OSPIM_Config+0x18>
      status = HAL_ERROR;
 8003566:	4623      	mov	r3, r4
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8003568:	2b01      	cmp	r3, #1
 800356a:	d80f      	bhi.n	800358c <HAL_OSPIM_Config+0x4c>
    if (OSPIM_GetConfig(index+1U, &(IOM_cfg[index])) != HAL_OK)
 800356c:	1c5c      	adds	r4, r3, #1
 800356e:	b2e4      	uxtb	r4, r4
 8003570:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003574:	eb0d 0183 	add.w	r1, sp, r3, lsl #2
 8003578:	4620      	mov	r0, r4
 800357a:	f7ff fcc9 	bl	8002f10 <OSPIM_GetConfig>
 800357e:	2800      	cmp	r0, #0
 8003580:	d0f1      	beq.n	8003566 <HAL_OSPIM_Config+0x26>
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8003582:	2308      	movs	r3, #8
 8003584:	f8c9 3048 	str.w	r3, [r9, #72]	; 0x48
      status = HAL_ERROR;
 8003588:	2701      	movs	r7, #1
 800358a:	e7ec      	b.n	8003566 <HAL_OSPIM_Config+0x26>
  if (status == HAL_OK)
 800358c:	2f00      	cmp	r7, #0
 800358e:	f040 812c 	bne.w	80037ea <HAL_OSPIM_Config+0x2aa>
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8003592:	4ba1      	ldr	r3, [pc, #644]	; (8003818 <HAL_OSPIM_Config+0x2d8>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f013 0f01 	tst.w	r3, #1
 800359a:	f000 812a 	beq.w	80037f2 <HAL_OSPIM_Config+0x2b2>
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800359e:	4a9e      	ldr	r2, [pc, #632]	; (8003818 <HAL_OSPIM_Config+0x2d8>)
 80035a0:	6813      	ldr	r3, [r2, #0]
 80035a2:	f023 0301 	bic.w	r3, r3, #1
 80035a6:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 80035a8:	2101      	movs	r1, #1
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 80035aa:	4b9c      	ldr	r3, [pc, #624]	; (800381c <HAL_OSPIM_Config+0x2dc>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f013 0f01 	tst.w	r3, #1
 80035b2:	d007      	beq.n	80035c4 <HAL_OSPIM_Config+0x84>
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 80035b4:	4a99      	ldr	r2, [pc, #612]	; (800381c <HAL_OSPIM_Config+0x2dc>)
 80035b6:	6813      	ldr	r3, [r2, #0]
 80035b8:	f023 0301 	bic.w	r3, r3, #1
 80035bc:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 80035be:	f041 0102 	orr.w	r1, r1, #2
 80035c2:	b2c9      	uxtb	r1, r1
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 80035c4:	eb06 0286 	add.w	r2, r6, r6, lsl #2
 80035c8:	ab0a      	add	r3, sp, #40	; 0x28
 80035ca:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80035ce:	f852 3c20 	ldr.w	r3, [r2, #-32]
 80035d2:	3b01      	subs	r3, #1
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	4892      	ldr	r0, [pc, #584]	; (8003820 <HAL_OSPIM_Config+0x2e0>)
 80035d8:	4418      	add	r0, r3
 80035da:	6843      	ldr	r3, [r0, #4]
 80035dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035e0:	6043      	str	r3, [r0, #4]
      if (IOM_cfg[instance].ClkPort != 0U)
 80035e2:	f852 3c28 	ldr.w	r3, [r2, #-40]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d03b      	beq.n	8003662 <HAL_OSPIM_Config+0x122>
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 80035ea:	3b01      	subs	r3, #1
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	4a8c      	ldr	r2, [pc, #560]	; (8003820 <HAL_OSPIM_Config+0x2e0>)
 80035f0:	441a      	add	r2, r3
 80035f2:	6853      	ldr	r3, [r2, #4]
 80035f4:	f023 0301 	bic.w	r3, r3, #1
 80035f8:	6053      	str	r3, [r2, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 80035fa:	eb06 0386 	add.w	r3, r6, r6, lsl #2
 80035fe:	aa0a      	add	r2, sp, #40	; 0x28
 8003600:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003604:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8003608:	b13b      	cbz	r3, 800361a <HAL_OSPIM_Config+0xda>
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 800360a:	3b01      	subs	r3, #1
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	4a84      	ldr	r2, [pc, #528]	; (8003820 <HAL_OSPIM_Config+0x2e0>)
 8003610:	441a      	add	r2, r3
 8003612:	6853      	ldr	r3, [r2, #4]
 8003614:	f023 0310 	bic.w	r3, r3, #16
 8003618:	6053      	str	r3, [r2, #4]
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800361a:	eb06 0386 	add.w	r3, r6, r6, lsl #2
 800361e:	aa0a      	add	r2, sp, #40	; 0x28
 8003620:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003624:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8003628:	b14b      	cbz	r3, 800363e <HAL_OSPIM_Config+0xfe>
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 800362a:	3b01      	subs	r3, #1
 800362c:	f003 0301 	and.w	r3, r3, #1
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	4a7b      	ldr	r2, [pc, #492]	; (8003820 <HAL_OSPIM_Config+0x2e0>)
 8003634:	441a      	add	r2, r3
 8003636:	6853      	ldr	r3, [r2, #4]
 8003638:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800363c:	6053      	str	r3, [r2, #4]
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800363e:	eb06 0386 	add.w	r3, r6, r6, lsl #2
 8003642:	aa0a      	add	r2, sp, #40	; 0x28
 8003644:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003648:	f853 3c18 	ldr.w	r3, [r3, #-24]
 800364c:	b14b      	cbz	r3, 8003662 <HAL_OSPIM_Config+0x122>
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 800364e:	3b01      	subs	r3, #1
 8003650:	f003 0301 	and.w	r3, r3, #1
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	4a72      	ldr	r2, [pc, #456]	; (8003820 <HAL_OSPIM_Config+0x2e0>)
 8003658:	441a      	add	r2, r3
 800365a:	6853      	ldr	r3, [r2, #4]
 800365c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003660:	6053      	str	r3, [r2, #4]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8003662:	682a      	ldr	r2, [r5, #0]
 8003664:	4643      	mov	r3, r8
 8003666:	eb08 0088 	add.w	r0, r8, r8, lsl #2
 800366a:	ac0a      	add	r4, sp, #40	; 0x28
 800366c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8003670:	f850 0c28 	ldr.w	r0, [r0, #-40]
 8003674:	4282      	cmp	r2, r0
 8003676:	d017      	beq.n	80036a8 <HAL_OSPIM_Config+0x168>
 8003678:	686a      	ldr	r2, [r5, #4]
 800367a:	eb08 0888 	add.w	r8, r8, r8, lsl #2
 800367e:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 8003682:	f858 4c24 	ldr.w	r4, [r8, #-36]
 8003686:	42a2      	cmp	r2, r4
 8003688:	d00e      	beq.n	80036a8 <HAL_OSPIM_Config+0x168>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800368a:	68ac      	ldr	r4, [r5, #8]
 800368c:	f858 2c20 	ldr.w	r2, [r8, #-32]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8003690:	4294      	cmp	r4, r2
 8003692:	d009      	beq.n	80036a8 <HAL_OSPIM_Config+0x168>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8003694:	68ec      	ldr	r4, [r5, #12]
 8003696:	f858 2c1c 	ldr.w	r2, [r8, #-28]
 800369a:	4294      	cmp	r4, r2
 800369c:	d004      	beq.n	80036a8 <HAL_OSPIM_Config+0x168>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800369e:	692c      	ldr	r4, [r5, #16]
 80036a0:	f858 2c18 	ldr.w	r2, [r8, #-24]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80036a4:	4294      	cmp	r4, r2
 80036a6:	d145      	bne.n	8003734 <HAL_OSPIM_Config+0x1f4>
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 80036a8:	3801      	subs	r0, #1
 80036aa:	0080      	lsls	r0, r0, #2
 80036ac:	4a5c      	ldr	r2, [pc, #368]	; (8003820 <HAL_OSPIM_Config+0x2e0>)
 80036ae:	4402      	add	r2, r0
 80036b0:	6850      	ldr	r0, [r2, #4]
 80036b2:	f020 0001 	bic.w	r0, r0, #1
 80036b6:	6050      	str	r0, [r2, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 80036b8:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80036bc:	a80a      	add	r0, sp, #40	; 0x28
 80036be:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80036c2:	f852 2c24 	ldr.w	r2, [r2, #-36]
 80036c6:	b13a      	cbz	r2, 80036d8 <HAL_OSPIM_Config+0x198>
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 80036c8:	3a01      	subs	r2, #1
 80036ca:	0092      	lsls	r2, r2, #2
 80036cc:	4854      	ldr	r0, [pc, #336]	; (8003820 <HAL_OSPIM_Config+0x2e0>)
 80036ce:	4410      	add	r0, r2
 80036d0:	6842      	ldr	r2, [r0, #4]
 80036d2:	f022 0210 	bic.w	r2, r2, #16
 80036d6:	6042      	str	r2, [r0, #4]
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 80036d8:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 80036dc:	aa0a      	add	r2, sp, #40	; 0x28
 80036de:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 80036e2:	f850 2c20 	ldr.w	r2, [r0, #-32]
 80036e6:	3a01      	subs	r2, #1
 80036e8:	0092      	lsls	r2, r2, #2
 80036ea:	4c4d      	ldr	r4, [pc, #308]	; (8003820 <HAL_OSPIM_Config+0x2e0>)
 80036ec:	4414      	add	r4, r2
 80036ee:	6862      	ldr	r2, [r4, #4]
 80036f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036f4:	6062      	str	r2, [r4, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80036f6:	f850 2c1c 	ldr.w	r2, [r0, #-28]
 80036fa:	b14a      	cbz	r2, 8003710 <HAL_OSPIM_Config+0x1d0>
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 80036fc:	3a01      	subs	r2, #1
 80036fe:	f002 0201 	and.w	r2, r2, #1
 8003702:	0092      	lsls	r2, r2, #2
 8003704:	4846      	ldr	r0, [pc, #280]	; (8003820 <HAL_OSPIM_Config+0x2e0>)
 8003706:	4410      	add	r0, r2
 8003708:	6842      	ldr	r2, [r0, #4]
 800370a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800370e:	6042      	str	r2, [r0, #4]
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003710:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003714:	aa0a      	add	r2, sp, #40	; 0x28
 8003716:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800371a:	f853 3c18 	ldr.w	r3, [r3, #-24]
 800371e:	b14b      	cbz	r3, 8003734 <HAL_OSPIM_Config+0x1f4>
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8003720:	3b01      	subs	r3, #1
 8003722:	f003 0301 	and.w	r3, r3, #1
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	4a3d      	ldr	r2, [pc, #244]	; (8003820 <HAL_OSPIM_Config+0x2e0>)
 800372a:	441a      	add	r2, r3
 800372c:	6853      	ldr	r3, [r2, #4]
 800372e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003732:	6053      	str	r3, [r2, #4]
        MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8003734:	68aa      	ldr	r2, [r5, #8]
 8003736:	3a01      	subs	r2, #1
 8003738:	4839      	ldr	r0, [pc, #228]	; (8003820 <HAL_OSPIM_Config+0x2e0>)
 800373a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800373e:	6853      	ldr	r3, [r2, #4]
 8003740:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003744:	ea43 2346 	orr.w	r3, r3, r6, lsl #9
 8003748:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800374c:	6053      	str	r3, [r2, #4]
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 800374e:	682b      	ldr	r3, [r5, #0]
 8003750:	3b01      	subs	r3, #1
 8003752:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 8003756:	6853      	ldr	r3, [r2, #4]
 8003758:	f023 0303 	bic.w	r3, r3, #3
 800375c:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
 8003760:	f043 0301 	orr.w	r3, r3, #1
 8003764:	6053      	str	r3, [r2, #4]
      if (cfg->DQSPort != 0U)
 8003766:	686b      	ldr	r3, [r5, #4]
 8003768:	b15b      	cbz	r3, 8003782 <HAL_OSPIM_Config+0x242>
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 800376a:	3b01      	subs	r3, #1
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	4602      	mov	r2, r0
 8003770:	441a      	add	r2, r3
 8003772:	6853      	ldr	r3, [r2, #4]
 8003774:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003778:	ea43 1346 	orr.w	r3, r3, r6, lsl #5
 800377c:	f043 0310 	orr.w	r3, r3, #16
 8003780:	6053      	str	r3, [r2, #4]
      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8003782:	68eb      	ldr	r3, [r5, #12]
 8003784:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003788:	d035      	beq.n	80037f6 <HAL_OSPIM_Config+0x2b6>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 800378a:	3b01      	subs	r3, #1
 800378c:	f003 0301 	and.w	r3, r3, #1
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	4a23      	ldr	r2, [pc, #140]	; (8003820 <HAL_OSPIM_Config+0x2e0>)
 8003794:	441a      	add	r2, r3
 8003796:	6853      	ldr	r3, [r2, #4]
 8003798:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800379c:	ea43 4386 	orr.w	r3, r3, r6, lsl #18
 80037a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037a4:	6053      	str	r3, [r2, #4]
      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80037a6:	692b      	ldr	r3, [r5, #16]
 80037a8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80037ac:	d03a      	beq.n	8003824 <HAL_OSPIM_Config+0x2e4>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 80037ae:	3b01      	subs	r3, #1
 80037b0:	f003 0301 	and.w	r3, r3, #1
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	4a1a      	ldr	r2, [pc, #104]	; (8003820 <HAL_OSPIM_Config+0x2e0>)
 80037b8:	441a      	add	r2, r3
 80037ba:	6853      	ldr	r3, [r2, #4]
 80037bc:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80037c0:	ea43 4386 	orr.w	r3, r3, r6, lsl #18
 80037c4:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 80037c8:	6053      	str	r3, [r2, #4]
    if ((ospi_enabled & 0x1U) != 0U)
 80037ca:	f011 0f01 	tst.w	r1, #1
 80037ce:	d004      	beq.n	80037da <HAL_OSPIM_Config+0x29a>
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80037d0:	4a11      	ldr	r2, [pc, #68]	; (8003818 <HAL_OSPIM_Config+0x2d8>)
 80037d2:	6813      	ldr	r3, [r2, #0]
 80037d4:	f043 0301 	orr.w	r3, r3, #1
 80037d8:	6013      	str	r3, [r2, #0]
    if ((ospi_enabled & 0x2U) != 0U)
 80037da:	f011 0f02 	tst.w	r1, #2
 80037de:	d004      	beq.n	80037ea <HAL_OSPIM_Config+0x2aa>
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 80037e0:	4a0e      	ldr	r2, [pc, #56]	; (800381c <HAL_OSPIM_Config+0x2dc>)
 80037e2:	6813      	ldr	r3, [r2, #0]
 80037e4:	f043 0301 	orr.w	r3, r3, #1
 80037e8:	6013      	str	r3, [r2, #0]
}
 80037ea:	4638      	mov	r0, r7
 80037ec:	b00b      	add	sp, #44	; 0x2c
 80037ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  uint8_t ospi_enabled = 0U;
 80037f2:	4639      	mov	r1, r7
 80037f4:	e6d9      	b.n	80035aa <HAL_OSPIM_Config+0x6a>
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d0d5      	beq.n	80037a6 <HAL_OSPIM_Config+0x266>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 80037fa:	3b01      	subs	r3, #1
 80037fc:	f003 0301 	and.w	r3, r3, #1
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	4a07      	ldr	r2, [pc, #28]	; (8003820 <HAL_OSPIM_Config+0x2e0>)
 8003804:	441a      	add	r2, r3
 8003806:	6853      	ldr	r3, [r2, #4]
 8003808:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800380c:	ea43 6386 	orr.w	r3, r3, r6, lsl #26
 8003810:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003814:	6053      	str	r3, [r2, #4]
 8003816:	e7c6      	b.n	80037a6 <HAL_OSPIM_Config+0x266>
 8003818:	a0001000 	.word	0xa0001000
 800381c:	a0001400 	.word	0xa0001400
 8003820:	50061c00 	.word	0x50061c00
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003824:	2b00      	cmp	r3, #0
 8003826:	d0d0      	beq.n	80037ca <HAL_OSPIM_Config+0x28a>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8003828:	3b01      	subs	r3, #1
 800382a:	f003 0301 	and.w	r3, r3, #1
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	4a05      	ldr	r2, [pc, #20]	; (8003848 <HAL_OSPIM_Config+0x308>)
 8003832:	441a      	add	r2, r3
 8003834:	6853      	ldr	r3, [r2, #4]
 8003836:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800383a:	ea43 6386 	orr.w	r3, r3, r6, lsl #26
 800383e:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8003842:	6053      	str	r3, [r2, #4]
 8003844:	e7c1      	b.n	80037ca <HAL_OSPIM_Config+0x28a>
 8003846:	bf00      	nop
 8003848:	50061c00 	.word	0x50061c00

0800384c <HAL_PWREx_GetVoltageRange>:
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800384c:	4b07      	ldr	r3, [pc, #28]	; (800386c <HAL_PWREx_GetVoltageRange+0x20>)
 800384e:	6818      	ldr	r0, [r3, #0]
 8003850:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8003854:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8003858:	d004      	beq.n	8003864 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800385a:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800385e:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 8003862:	d100      	bne.n	8003866 <HAL_PWREx_GetVoltageRange+0x1a>
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003864:	4770      	bx	lr
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003866:	f44f 7000 	mov.w	r0, #512	; 0x200
 800386a:	e7fb      	b.n	8003864 <HAL_PWREx_GetVoltageRange+0x18>
 800386c:	40007000 	.word	0x40007000

08003870 <HAL_PWREx_ControlVoltageScaling>:
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003870:	2800      	cmp	r0, #0
 8003872:	d136      	bne.n	80038e2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003874:	4b3e      	ldr	r3, [pc, #248]	; (8003970 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800387c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003880:	d008      	beq.n	8003894 <HAL_PWREx_ControlVoltageScaling+0x24>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003882:	4a3b      	ldr	r2, [pc, #236]	; (8003970 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8003884:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8003888:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800388c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003890:	2000      	movs	r0, #0
 8003892:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003894:	4a36      	ldr	r2, [pc, #216]	; (8003970 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8003896:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 800389a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800389e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80038a2:	6813      	ldr	r3, [r2, #0]
 80038a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80038a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038ac:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80038ae:	4b31      	ldr	r3, [pc, #196]	; (8003974 <HAL_PWREx_ControlVoltageScaling+0x104>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2232      	movs	r2, #50	; 0x32
 80038b4:	fb02 f303 	mul.w	r3, r2, r3
 80038b8:	4a2f      	ldr	r2, [pc, #188]	; (8003978 <HAL_PWREx_ControlVoltageScaling+0x108>)
 80038ba:	fba2 2303 	umull	r2, r3, r2, r3
 80038be:	0c9b      	lsrs	r3, r3, #18
 80038c0:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038c2:	e000      	b.n	80038c6 <HAL_PWREx_ControlVoltageScaling+0x56>
        wait_loop_index--;
 80038c4:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038c6:	4a2a      	ldr	r2, [pc, #168]	; (8003970 <HAL_PWREx_ControlVoltageScaling+0x100>)
 80038c8:	6952      	ldr	r2, [r2, #20]
 80038ca:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80038ce:	d001      	beq.n	80038d4 <HAL_PWREx_ControlVoltageScaling+0x64>
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d1f7      	bne.n	80038c4 <HAL_PWREx_ControlVoltageScaling+0x54>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80038d4:	4b26      	ldr	r3, [pc, #152]	; (8003970 <HAL_PWREx_ControlVoltageScaling+0x100>)
 80038d6:	695b      	ldr	r3, [r3, #20]
 80038d8:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80038dc:	d144      	bne.n	8003968 <HAL_PWREx_ControlVoltageScaling+0xf8>
  return HAL_OK;
 80038de:	2000      	movs	r0, #0
 80038e0:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038e2:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80038e6:	d008      	beq.n	80038fa <HAL_PWREx_ControlVoltageScaling+0x8a>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80038e8:	4a21      	ldr	r2, [pc, #132]	; (8003970 <HAL_PWREx_ControlVoltageScaling+0x100>)
 80038ea:	6813      	ldr	r3, [r2, #0]
 80038ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80038f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038f4:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80038f6:	2000      	movs	r0, #0
 80038f8:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80038fa:	4b1d      	ldr	r3, [pc, #116]	; (8003970 <HAL_PWREx_ControlVoltageScaling+0x100>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003902:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003906:	d008      	beq.n	800391a <HAL_PWREx_ControlVoltageScaling+0xaa>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003908:	4a19      	ldr	r2, [pc, #100]	; (8003970 <HAL_PWREx_ControlVoltageScaling+0x100>)
 800390a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 800390e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003912:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  return HAL_OK;
 8003916:	2000      	movs	r0, #0
 8003918:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800391a:	4a15      	ldr	r2, [pc, #84]	; (8003970 <HAL_PWREx_ControlVoltageScaling+0x100>)
 800391c:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8003920:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003924:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003928:	6813      	ldr	r3, [r2, #0]
 800392a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800392e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003932:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003934:	4b0f      	ldr	r3, [pc, #60]	; (8003974 <HAL_PWREx_ControlVoltageScaling+0x104>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2232      	movs	r2, #50	; 0x32
 800393a:	fb02 f303 	mul.w	r3, r2, r3
 800393e:	4a0e      	ldr	r2, [pc, #56]	; (8003978 <HAL_PWREx_ControlVoltageScaling+0x108>)
 8003940:	fba2 2303 	umull	r2, r3, r2, r3
 8003944:	0c9b      	lsrs	r3, r3, #18
 8003946:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003948:	e000      	b.n	800394c <HAL_PWREx_ControlVoltageScaling+0xdc>
        wait_loop_index--;
 800394a:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800394c:	4a08      	ldr	r2, [pc, #32]	; (8003970 <HAL_PWREx_ControlVoltageScaling+0x100>)
 800394e:	6952      	ldr	r2, [r2, #20]
 8003950:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8003954:	d001      	beq.n	800395a <HAL_PWREx_ControlVoltageScaling+0xea>
 8003956:	2b00      	cmp	r3, #0
 8003958:	d1f7      	bne.n	800394a <HAL_PWREx_ControlVoltageScaling+0xda>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800395a:	4b05      	ldr	r3, [pc, #20]	; (8003970 <HAL_PWREx_ControlVoltageScaling+0x100>)
 800395c:	695b      	ldr	r3, [r3, #20]
 800395e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003962:	d103      	bne.n	800396c <HAL_PWREx_ControlVoltageScaling+0xfc>
  return HAL_OK;
 8003964:	2000      	movs	r0, #0
 8003966:	4770      	bx	lr
        return HAL_TIMEOUT;
 8003968:	2003      	movs	r0, #3
 800396a:	4770      	bx	lr
        return HAL_TIMEOUT;
 800396c:	2003      	movs	r0, #3
}
 800396e:	4770      	bx	lr
 8003970:	40007000 	.word	0x40007000
 8003974:	20000000 	.word	0x20000000
 8003978:	431bde83 	.word	0x431bde83

0800397c <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800397c:	4a02      	ldr	r2, [pc, #8]	; (8003988 <HAL_PWREx_EnableVddUSB+0xc>)
 800397e:	6853      	ldr	r3, [r2, #4]
 8003980:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003984:	6053      	str	r3, [r2, #4]
}
 8003986:	4770      	bx	lr
 8003988:	40007000 	.word	0x40007000

0800398c <RCC_GetSysClockFreqFromPLLSource>:
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800398c:	4b1a      	ldr	r3, [pc, #104]	; (80039f8 <RCC_GetSysClockFreqFromPLLSource+0x6c>)
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	f003 0303 	and.w	r3, r3, #3

  switch (pllsource)
 8003994:	2b02      	cmp	r3, #2
 8003996:	d02b      	beq.n	80039f0 <RCC_GetSysClockFreqFromPLLSource+0x64>
 8003998:	2b03      	cmp	r3, #3
 800399a:	d02b      	beq.n	80039f4 <RCC_GetSysClockFreqFromPLLSource+0x68>
 800399c:	2b01      	cmp	r3, #1
 800399e:	d014      	beq.n	80039ca <RCC_GetSysClockFreqFromPLLSource+0x3e>
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
    break;
  default:
    /* unexpected */
    pllvco = 0;
 80039a0:	2100      	movs	r1, #0
    break;
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80039a2:	4a15      	ldr	r2, [pc, #84]	; (80039f8 <RCC_GetSysClockFreqFromPLLSource+0x6c>)
 80039a4:	68d3      	ldr	r3, [r2, #12]
 80039a6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80039aa:	3301      	adds	r3, #1
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80039ac:	68d0      	ldr	r0, [r2, #12]
 80039ae:	f3c0 2006 	ubfx	r0, r0, #8, #7
 80039b2:	fb01 f000 	mul.w	r0, r1, r0
 80039b6:	fbb0 f0f3 	udiv	r0, r0, r3
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80039ba:	68d3      	ldr	r3, [r2, #12]
 80039bc:	f3c3 6341 	ubfx	r3, r3, #25, #2
 80039c0:	3301      	adds	r3, #1
 80039c2:	005b      	lsls	r3, r3, #1
  sysclockfreq = pllvco / pllr;

  return sysclockfreq;
}
 80039c4:	fbb0 f0f3 	udiv	r0, r0, r3
 80039c8:	4770      	bx	lr
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80039ca:	4b0b      	ldr	r3, [pc, #44]	; (80039f8 <RCC_GetSysClockFreqFromPLLSource+0x6c>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f013 0f08 	tst.w	r3, #8
 80039d2:	d108      	bne.n	80039e6 <RCC_GetSysClockFreqFromPLLSource+0x5a>
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80039d4:	4b08      	ldr	r3, [pc, #32]	; (80039f8 <RCC_GetSysClockFreqFromPLLSource+0x6c>)
 80039d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039da:	f3c3 2303 	ubfx	r3, r3, #8, #4
    pllvco = MSIRangeTable[msirange];
 80039de:	4a07      	ldr	r2, [pc, #28]	; (80039fc <RCC_GetSysClockFreqFromPLLSource+0x70>)
 80039e0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    break;
 80039e4:	e7dd      	b.n	80039a2 <RCC_GetSysClockFreqFromPLLSource+0x16>
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80039e6:	4b04      	ldr	r3, [pc, #16]	; (80039f8 <RCC_GetSysClockFreqFromPLLSource+0x6c>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80039ee:	e7f6      	b.n	80039de <RCC_GetSysClockFreqFromPLLSource+0x52>
  switch (pllsource)
 80039f0:	4903      	ldr	r1, [pc, #12]	; (8003a00 <RCC_GetSysClockFreqFromPLLSource+0x74>)
 80039f2:	e7d6      	b.n	80039a2 <RCC_GetSysClockFreqFromPLLSource+0x16>
    pllvco = HSE_VALUE;
 80039f4:	4903      	ldr	r1, [pc, #12]	; (8003a04 <RCC_GetSysClockFreqFromPLLSource+0x78>)
 80039f6:	e7d4      	b.n	80039a2 <RCC_GetSysClockFreqFromPLLSource+0x16>
 80039f8:	40021000 	.word	0x40021000
 80039fc:	08009824 	.word	0x08009824
 8003a00:	00f42400 	.word	0x00f42400
 8003a04:	007a1200 	.word	0x007a1200

08003a08 <RCC_SetFlashLatencyFromMSIRange>:
{
 8003a08:	b530      	push	{r4, r5, lr}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003a0e:	4b1f      	ldr	r3, [pc, #124]	; (8003a8c <RCC_SetFlashLatencyFromMSIRange+0x84>)
 8003a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a12:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003a16:	d00a      	beq.n	8003a2e <RCC_SetFlashLatencyFromMSIRange+0x26>
    vos = HAL_PWREx_GetVoltageRange();
 8003a18:	f7ff ff18 	bl	800384c <HAL_PWREx_GetVoltageRange>
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a1c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8003a20:	d016      	beq.n	8003a50 <RCC_SetFlashLatencyFromMSIRange+0x48>
    if(msirange >= RCC_MSIRANGE_8)
 8003a22:	2c7f      	cmp	r4, #127	; 0x7f
 8003a24:	d81e      	bhi.n	8003a64 <RCC_SetFlashLatencyFromMSIRange+0x5c>
      if(msirange == RCC_MSIRANGE_7)
 8003a26:	2c70      	cmp	r4, #112	; 0x70
 8003a28:	d02b      	beq.n	8003a82 <RCC_SetFlashLatencyFromMSIRange+0x7a>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003a2a:	2100      	movs	r1, #0
 8003a2c:	e01b      	b.n	8003a66 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a2e:	4d17      	ldr	r5, [pc, #92]	; (8003a8c <RCC_SetFlashLatencyFromMSIRange+0x84>)
 8003a30:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003a32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a36:	65ab      	str	r3, [r5, #88]	; 0x58
 8003a38:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a3e:	9301      	str	r3, [sp, #4]
 8003a40:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8003a42:	f7ff ff03 	bl	800384c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8003a46:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003a48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a4c:	65ab      	str	r3, [r5, #88]	; 0x58
 8003a4e:	e7e5      	b.n	8003a1c <RCC_SetFlashLatencyFromMSIRange+0x14>
    if(msirange > RCC_MSIRANGE_8)
 8003a50:	2c80      	cmp	r4, #128	; 0x80
 8003a52:	d903      	bls.n	8003a5c <RCC_SetFlashLatencyFromMSIRange+0x54>
      if(msirange > RCC_MSIRANGE_10)
 8003a54:	2ca0      	cmp	r4, #160	; 0xa0
 8003a56:	d903      	bls.n	8003a60 <RCC_SetFlashLatencyFromMSIRange+0x58>
        latency = FLASH_LATENCY_2; /* 2WS */
 8003a58:	2102      	movs	r1, #2
 8003a5a:	e004      	b.n	8003a66 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003a5c:	2100      	movs	r1, #0
 8003a5e:	e002      	b.n	8003a66 <RCC_SetFlashLatencyFromMSIRange+0x5e>
        latency = FLASH_LATENCY_1; /* 1WS */
 8003a60:	2101      	movs	r1, #1
 8003a62:	e000      	b.n	8003a66 <RCC_SetFlashLatencyFromMSIRange+0x5e>
      latency = FLASH_LATENCY_2; /* 2WS */
 8003a64:	2102      	movs	r1, #2
  __HAL_FLASH_SET_LATENCY(latency);
 8003a66:	4a0a      	ldr	r2, [pc, #40]	; (8003a90 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8003a68:	6813      	ldr	r3, [r2, #0]
 8003a6a:	f023 030f 	bic.w	r3, r3, #15
 8003a6e:	430b      	orrs	r3, r1
 8003a70:	6013      	str	r3, [r2, #0]
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003a72:	6813      	ldr	r3, [r2, #0]
 8003a74:	f003 030f 	and.w	r3, r3, #15
 8003a78:	428b      	cmp	r3, r1
 8003a7a:	d104      	bne.n	8003a86 <RCC_SetFlashLatencyFromMSIRange+0x7e>
  return HAL_OK;
 8003a7c:	2000      	movs	r0, #0
}
 8003a7e:	b003      	add	sp, #12
 8003a80:	bd30      	pop	{r4, r5, pc}
        latency = FLASH_LATENCY_1; /* 1WS */
 8003a82:	2101      	movs	r1, #1
 8003a84:	e7ef      	b.n	8003a66 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    return HAL_ERROR;
 8003a86:	2001      	movs	r0, #1
 8003a88:	e7f9      	b.n	8003a7e <RCC_SetFlashLatencyFromMSIRange+0x76>
 8003a8a:	bf00      	nop
 8003a8c:	40021000 	.word	0x40021000
 8003a90:	40022000 	.word	0x40022000

08003a94 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a94:	4a28      	ldr	r2, [pc, #160]	; (8003b38 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003a96:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a98:	68d2      	ldr	r2, [r2, #12]
 8003a9a:	f002 0203 	and.w	r2, r2, #3
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a9e:	f013 030c 	ands.w	r3, r3, #12
 8003aa2:	d00a      	beq.n	8003aba <HAL_RCC_GetSysClockFreq+0x26>
 8003aa4:	2b0c      	cmp	r3, #12
 8003aa6:	d006      	beq.n	8003ab6 <HAL_RCC_GetSysClockFreq+0x22>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003aa8:	2b04      	cmp	r3, #4
 8003aaa:	d01f      	beq.n	8003aec <HAL_RCC_GetSysClockFreq+0x58>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003aac:	2b08      	cmp	r3, #8
 8003aae:	d020      	beq.n	8003af2 <HAL_RCC_GetSysClockFreq+0x5e>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003ab0:	2000      	movs	r0, #0
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	e010      	b.n	8003ad8 <HAL_RCC_GetSysClockFreq+0x44>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003ab6:	2a01      	cmp	r2, #1
 8003ab8:	d1f6      	bne.n	8003aa8 <HAL_RCC_GetSysClockFreq+0x14>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003aba:	4a1f      	ldr	r2, [pc, #124]	; (8003b38 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003abc:	6812      	ldr	r2, [r2, #0]
 8003abe:	f012 0f08 	tst.w	r2, #8
 8003ac2:	d10c      	bne.n	8003ade <HAL_RCC_GetSysClockFreq+0x4a>
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003ac4:	4a1c      	ldr	r2, [pc, #112]	; (8003b38 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003ac6:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 8003aca:	f3c2 2203 	ubfx	r2, r2, #8, #4
    msirange = MSIRangeTable[msirange];
 8003ace:	491b      	ldr	r1, [pc, #108]	; (8003b3c <HAL_RCC_GetSysClockFreq+0xa8>)
 8003ad0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ad4:	b143      	cbz	r3, 8003ae8 <HAL_RCC_GetSysClockFreq+0x54>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003ad6:	2000      	movs	r0, #0
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003ad8:	2b0c      	cmp	r3, #12
 8003ada:	d00d      	beq.n	8003af8 <HAL_RCC_GetSysClockFreq+0x64>
}
 8003adc:	4770      	bx	lr
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003ade:	4a16      	ldr	r2, [pc, #88]	; (8003b38 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003ae0:	6812      	ldr	r2, [r2, #0]
 8003ae2:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8003ae6:	e7f2      	b.n	8003ace <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = msirange;
 8003ae8:	4610      	mov	r0, r2
 8003aea:	e7f5      	b.n	8003ad8 <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSI_VALUE;
 8003aec:	4814      	ldr	r0, [pc, #80]	; (8003b40 <HAL_RCC_GetSysClockFreq+0xac>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003aee:	2200      	movs	r2, #0
 8003af0:	e7f2      	b.n	8003ad8 <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSE_VALUE;
 8003af2:	4814      	ldr	r0, [pc, #80]	; (8003b44 <HAL_RCC_GetSysClockFreq+0xb0>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003af4:	2200      	movs	r2, #0
 8003af6:	e7ef      	b.n	8003ad8 <HAL_RCC_GetSysClockFreq+0x44>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003af8:	4b0f      	ldr	r3, [pc, #60]	; (8003b38 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d016      	beq.n	8003b32 <HAL_RCC_GetSysClockFreq+0x9e>
 8003b04:	2b03      	cmp	r3, #3
 8003b06:	d100      	bne.n	8003b0a <HAL_RCC_GetSysClockFreq+0x76>
      pllvco = HSE_VALUE;
 8003b08:	4a0e      	ldr	r2, [pc, #56]	; (8003b44 <HAL_RCC_GetSysClockFreq+0xb0>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b0a:	490b      	ldr	r1, [pc, #44]	; (8003b38 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003b0c:	68cb      	ldr	r3, [r1, #12]
 8003b0e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003b12:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003b14:	68c8      	ldr	r0, [r1, #12]
 8003b16:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8003b1a:	fb02 f000 	mul.w	r0, r2, r0
 8003b1e:	fbb0 f0f3 	udiv	r0, r0, r3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b22:	68cb      	ldr	r3, [r1, #12]
 8003b24:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8003b28:	3301      	adds	r3, #1
 8003b2a:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco / pllr;
 8003b2c:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8003b30:	e7d4      	b.n	8003adc <HAL_RCC_GetSysClockFreq+0x48>
    switch (pllsource)
 8003b32:	4a03      	ldr	r2, [pc, #12]	; (8003b40 <HAL_RCC_GetSysClockFreq+0xac>)
 8003b34:	e7e9      	b.n	8003b0a <HAL_RCC_GetSysClockFreq+0x76>
 8003b36:	bf00      	nop
 8003b38:	40021000 	.word	0x40021000
 8003b3c:	08009824 	.word	0x08009824
 8003b40:	00f42400 	.word	0x00f42400
 8003b44:	007a1200 	.word	0x007a1200

08003b48 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8003b48:	2800      	cmp	r0, #0
 8003b4a:	f000 8322 	beq.w	8004192 <HAL_RCC_OscConfig+0x64a>
{
 8003b4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b50:	b083      	sub	sp, #12
 8003b52:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b54:	4b96      	ldr	r3, [pc, #600]	; (8003db0 <HAL_RCC_OscConfig+0x268>)
 8003b56:	689d      	ldr	r5, [r3, #8]
 8003b58:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b5c:	68de      	ldr	r6, [r3, #12]
 8003b5e:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003b62:	6803      	ldr	r3, [r0, #0]
 8003b64:	f013 0f10 	tst.w	r3, #16
 8003b68:	d05a      	beq.n	8003c20 <HAL_RCC_OscConfig+0xd8>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003b6a:	b1e5      	cbz	r5, 8003ba6 <HAL_RCC_OscConfig+0x5e>
 8003b6c:	2d0c      	cmp	r5, #12
 8003b6e:	d018      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x5a>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003b70:	69a3      	ldr	r3, [r4, #24]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	f000 80bb 	beq.w	8003cee <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_MSI_ENABLE();
 8003b78:	4a8d      	ldr	r2, [pc, #564]	; (8003db0 <HAL_RCC_OscConfig+0x268>)
 8003b7a:	6813      	ldr	r3, [r2, #0]
 8003b7c:	f043 0301 	orr.w	r3, r3, #1
 8003b80:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003b82:	f7fd ff53 	bl	8001a2c <HAL_GetTick>
 8003b86:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b88:	4b89      	ldr	r3, [pc, #548]	; (8003db0 <HAL_RCC_OscConfig+0x268>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f013 0f02 	tst.w	r3, #2
 8003b90:	f040 809a 	bne.w	8003cc8 <HAL_RCC_OscConfig+0x180>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b94:	f7fd ff4a 	bl	8001a2c <HAL_GetTick>
 8003b98:	1bc0      	subs	r0, r0, r7
 8003b9a:	2802      	cmp	r0, #2
 8003b9c:	d9f4      	bls.n	8003b88 <HAL_RCC_OscConfig+0x40>
            return HAL_TIMEOUT;
 8003b9e:	2003      	movs	r0, #3
 8003ba0:	e302      	b.n	80041a8 <HAL_RCC_OscConfig+0x660>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003ba2:	2e01      	cmp	r6, #1
 8003ba4:	d1e4      	bne.n	8003b70 <HAL_RCC_OscConfig+0x28>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ba6:	4b82      	ldr	r3, [pc, #520]	; (8003db0 <HAL_RCC_OscConfig+0x268>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f013 0f02 	tst.w	r3, #2
 8003bae:	d003      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x70>
 8003bb0:	69a3      	ldr	r3, [r4, #24]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	f000 82ef 	beq.w	8004196 <HAL_RCC_OscConfig+0x64e>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003bb8:	6a20      	ldr	r0, [r4, #32]
 8003bba:	4b7d      	ldr	r3, [pc, #500]	; (8003db0 <HAL_RCC_OscConfig+0x268>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f013 0f08 	tst.w	r3, #8
 8003bc2:	d05b      	beq.n	8003c7c <HAL_RCC_OscConfig+0x134>
 8003bc4:	4b7a      	ldr	r3, [pc, #488]	; (8003db0 <HAL_RCC_OscConfig+0x268>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bcc:	4298      	cmp	r0, r3
 8003bce:	d85c      	bhi.n	8003c8a <HAL_RCC_OscConfig+0x142>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003bd0:	4b77      	ldr	r3, [pc, #476]	; (8003db0 <HAL_RCC_OscConfig+0x268>)
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	f042 0208 	orr.w	r2, r2, #8
 8003bd8:	601a      	str	r2, [r3, #0]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003be0:	6a21      	ldr	r1, [r4, #32]
 8003be2:	430a      	orrs	r2, r1
 8003be4:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003be6:	685a      	ldr	r2, [r3, #4]
 8003be8:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003bec:	69e1      	ldr	r1, [r4, #28]
 8003bee:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003bf2:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003bf4:	2d00      	cmp	r5, #0
 8003bf6:	d060      	beq.n	8003cba <HAL_RCC_OscConfig+0x172>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003bf8:	f7ff ff4c 	bl	8003a94 <HAL_RCC_GetSysClockFreq>
 8003bfc:	4b6c      	ldr	r3, [pc, #432]	; (8003db0 <HAL_RCC_OscConfig+0x268>)
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003c04:	4a6b      	ldr	r2, [pc, #428]	; (8003db4 <HAL_RCC_OscConfig+0x26c>)
 8003c06:	5cd3      	ldrb	r3, [r2, r3]
 8003c08:	f003 031f 	and.w	r3, r3, #31
 8003c0c:	40d8      	lsrs	r0, r3
 8003c0e:	4b6a      	ldr	r3, [pc, #424]	; (8003db8 <HAL_RCC_OscConfig+0x270>)
 8003c10:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8003c12:	4b6a      	ldr	r3, [pc, #424]	; (8003dbc <HAL_RCC_OscConfig+0x274>)
 8003c14:	6818      	ldr	r0, [r3, #0]
 8003c16:	f7fd fec5 	bl	80019a4 <HAL_InitTick>
        if(status != HAL_OK)
 8003c1a:	2800      	cmp	r0, #0
 8003c1c:	f040 82c4 	bne.w	80041a8 <HAL_RCC_OscConfig+0x660>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c20:	6823      	ldr	r3, [r4, #0]
 8003c22:	f013 0f01 	tst.w	r3, #1
 8003c26:	f000 8081 	beq.w	8003d2c <HAL_RCC_OscConfig+0x1e4>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003c2a:	2d08      	cmp	r5, #8
 8003c2c:	d075      	beq.n	8003d1a <HAL_RCC_OscConfig+0x1d2>
 8003c2e:	2d0c      	cmp	r5, #12
 8003c30:	d071      	beq.n	8003d16 <HAL_RCC_OscConfig+0x1ce>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c32:	6863      	ldr	r3, [r4, #4]
 8003c34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c38:	f000 8097 	beq.w	8003d6a <HAL_RCC_OscConfig+0x222>
 8003c3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c40:	f000 8099 	beq.w	8003d76 <HAL_RCC_OscConfig+0x22e>
 8003c44:	4b5a      	ldr	r3, [pc, #360]	; (8003db0 <HAL_RCC_OscConfig+0x268>)
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003c4c:	601a      	str	r2, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003c54:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c56:	6863      	ldr	r3, [r4, #4]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	f000 8099 	beq.w	8003d90 <HAL_RCC_OscConfig+0x248>
        tickstart = HAL_GetTick();
 8003c5e:	f7fd fee5 	bl	8001a2c <HAL_GetTick>
 8003c62:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c64:	4b52      	ldr	r3, [pc, #328]	; (8003db0 <HAL_RCC_OscConfig+0x268>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003c6c:	d15e      	bne.n	8003d2c <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c6e:	f7fd fedd 	bl	8001a2c <HAL_GetTick>
 8003c72:	1bc0      	subs	r0, r0, r7
 8003c74:	2864      	cmp	r0, #100	; 0x64
 8003c76:	d9f5      	bls.n	8003c64 <HAL_RCC_OscConfig+0x11c>
            return HAL_TIMEOUT;
 8003c78:	2003      	movs	r0, #3
 8003c7a:	e295      	b.n	80041a8 <HAL_RCC_OscConfig+0x660>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003c7c:	4b4c      	ldr	r3, [pc, #304]	; (8003db0 <HAL_RCC_OscConfig+0x268>)
 8003c7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c82:	091b      	lsrs	r3, r3, #4
 8003c84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c88:	e7a0      	b.n	8003bcc <HAL_RCC_OscConfig+0x84>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c8a:	f7ff febd 	bl	8003a08 <RCC_SetFlashLatencyFromMSIRange>
 8003c8e:	2800      	cmp	r0, #0
 8003c90:	f040 8283 	bne.w	800419a <HAL_RCC_OscConfig+0x652>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c94:	4b46      	ldr	r3, [pc, #280]	; (8003db0 <HAL_RCC_OscConfig+0x268>)
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	f042 0208 	orr.w	r2, r2, #8
 8003c9c:	601a      	str	r2, [r3, #0]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003ca4:	6a21      	ldr	r1, [r4, #32]
 8003ca6:	430a      	orrs	r2, r1
 8003ca8:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003caa:	685a      	ldr	r2, [r3, #4]
 8003cac:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003cb0:	69e1      	ldr	r1, [r4, #28]
 8003cb2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003cb6:	605a      	str	r2, [r3, #4]
 8003cb8:	e79e      	b.n	8003bf8 <HAL_RCC_OscConfig+0xb0>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003cba:	6a20      	ldr	r0, [r4, #32]
 8003cbc:	f7ff fea4 	bl	8003a08 <RCC_SetFlashLatencyFromMSIRange>
 8003cc0:	2800      	cmp	r0, #0
 8003cc2:	d099      	beq.n	8003bf8 <HAL_RCC_OscConfig+0xb0>
              return HAL_ERROR;
 8003cc4:	2001      	movs	r0, #1
 8003cc6:	e26f      	b.n	80041a8 <HAL_RCC_OscConfig+0x660>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003cc8:	4b39      	ldr	r3, [pc, #228]	; (8003db0 <HAL_RCC_OscConfig+0x268>)
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	f042 0208 	orr.w	r2, r2, #8
 8003cd0:	601a      	str	r2, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003cd8:	6a21      	ldr	r1, [r4, #32]
 8003cda:	430a      	orrs	r2, r1
 8003cdc:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003cde:	685a      	ldr	r2, [r3, #4]
 8003ce0:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003ce4:	69e1      	ldr	r1, [r4, #28]
 8003ce6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003cea:	605a      	str	r2, [r3, #4]
 8003cec:	e798      	b.n	8003c20 <HAL_RCC_OscConfig+0xd8>
        __HAL_RCC_MSI_DISABLE();
 8003cee:	4a30      	ldr	r2, [pc, #192]	; (8003db0 <HAL_RCC_OscConfig+0x268>)
 8003cf0:	6813      	ldr	r3, [r2, #0]
 8003cf2:	f023 0301 	bic.w	r3, r3, #1
 8003cf6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003cf8:	f7fd fe98 	bl	8001a2c <HAL_GetTick>
 8003cfc:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003cfe:	4b2c      	ldr	r3, [pc, #176]	; (8003db0 <HAL_RCC_OscConfig+0x268>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f013 0f02 	tst.w	r3, #2
 8003d06:	d08b      	beq.n	8003c20 <HAL_RCC_OscConfig+0xd8>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d08:	f7fd fe90 	bl	8001a2c <HAL_GetTick>
 8003d0c:	1bc0      	subs	r0, r0, r7
 8003d0e:	2802      	cmp	r0, #2
 8003d10:	d9f5      	bls.n	8003cfe <HAL_RCC_OscConfig+0x1b6>
            return HAL_TIMEOUT;
 8003d12:	2003      	movs	r0, #3
 8003d14:	e248      	b.n	80041a8 <HAL_RCC_OscConfig+0x660>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003d16:	2e03      	cmp	r6, #3
 8003d18:	d18b      	bne.n	8003c32 <HAL_RCC_OscConfig+0xea>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d1a:	4b25      	ldr	r3, [pc, #148]	; (8003db0 <HAL_RCC_OscConfig+0x268>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003d22:	d003      	beq.n	8003d2c <HAL_RCC_OscConfig+0x1e4>
 8003d24:	6863      	ldr	r3, [r4, #4]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	f000 8239 	beq.w	800419e <HAL_RCC_OscConfig+0x656>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d2c:	6823      	ldr	r3, [r4, #0]
 8003d2e:	f013 0f02 	tst.w	r3, #2
 8003d32:	d058      	beq.n	8003de6 <HAL_RCC_OscConfig+0x29e>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003d34:	2d04      	cmp	r5, #4
 8003d36:	d045      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x27c>
 8003d38:	2d0c      	cmp	r5, #12
 8003d3a:	d041      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x278>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d3c:	68e3      	ldr	r3, [r4, #12]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d077      	beq.n	8003e32 <HAL_RCC_OscConfig+0x2ea>
        __HAL_RCC_HSI_ENABLE();
 8003d42:	4a1b      	ldr	r2, [pc, #108]	; (8003db0 <HAL_RCC_OscConfig+0x268>)
 8003d44:	6813      	ldr	r3, [r2, #0]
 8003d46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d4a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003d4c:	f7fd fe6e 	bl	8001a2c <HAL_GetTick>
 8003d50:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d52:	4b17      	ldr	r3, [pc, #92]	; (8003db0 <HAL_RCC_OscConfig+0x268>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003d5a:	d161      	bne.n	8003e20 <HAL_RCC_OscConfig+0x2d8>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d5c:	f7fd fe66 	bl	8001a2c <HAL_GetTick>
 8003d60:	1b80      	subs	r0, r0, r6
 8003d62:	2802      	cmp	r0, #2
 8003d64:	d9f5      	bls.n	8003d52 <HAL_RCC_OscConfig+0x20a>
            return HAL_TIMEOUT;
 8003d66:	2003      	movs	r0, #3
 8003d68:	e21e      	b.n	80041a8 <HAL_RCC_OscConfig+0x660>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d6a:	4a11      	ldr	r2, [pc, #68]	; (8003db0 <HAL_RCC_OscConfig+0x268>)
 8003d6c:	6813      	ldr	r3, [r2, #0]
 8003d6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d72:	6013      	str	r3, [r2, #0]
 8003d74:	e76f      	b.n	8003c56 <HAL_RCC_OscConfig+0x10e>
 8003d76:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003d7a:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003d84:	601a      	str	r2, [r3, #0]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003d8c:	601a      	str	r2, [r3, #0]
 8003d8e:	e762      	b.n	8003c56 <HAL_RCC_OscConfig+0x10e>
        tickstart = HAL_GetTick();
 8003d90:	f7fd fe4c 	bl	8001a2c <HAL_GetTick>
 8003d94:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d96:	4b06      	ldr	r3, [pc, #24]	; (8003db0 <HAL_RCC_OscConfig+0x268>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003d9e:	d0c5      	beq.n	8003d2c <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003da0:	f7fd fe44 	bl	8001a2c <HAL_GetTick>
 8003da4:	1bc0      	subs	r0, r0, r7
 8003da6:	2864      	cmp	r0, #100	; 0x64
 8003da8:	d9f5      	bls.n	8003d96 <HAL_RCC_OscConfig+0x24e>
            return HAL_TIMEOUT;
 8003daa:	2003      	movs	r0, #3
 8003dac:	e1fc      	b.n	80041a8 <HAL_RCC_OscConfig+0x660>
 8003dae:	bf00      	nop
 8003db0:	40021000 	.word	0x40021000
 8003db4:	0800980c 	.word	0x0800980c
 8003db8:	20000000 	.word	0x20000000
 8003dbc:	20000008 	.word	0x20000008
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003dc0:	2e02      	cmp	r6, #2
 8003dc2:	d1bb      	bne.n	8003d3c <HAL_RCC_OscConfig+0x1f4>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003dc4:	4ba7      	ldr	r3, [pc, #668]	; (8004064 <HAL_RCC_OscConfig+0x51c>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003dcc:	d003      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x28e>
 8003dce:	68e3      	ldr	r3, [r4, #12]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	f000 81e6 	beq.w	80041a2 <HAL_RCC_OscConfig+0x65a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dd6:	4aa3      	ldr	r2, [pc, #652]	; (8004064 <HAL_RCC_OscConfig+0x51c>)
 8003dd8:	6853      	ldr	r3, [r2, #4]
 8003dda:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003dde:	6921      	ldr	r1, [r4, #16]
 8003de0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003de4:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003de6:	6823      	ldr	r3, [r4, #0]
 8003de8:	f013 0f08 	tst.w	r3, #8
 8003dec:	d04c      	beq.n	8003e88 <HAL_RCC_OscConfig+0x340>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003dee:	6963      	ldr	r3, [r4, #20]
 8003df0:	b39b      	cbz	r3, 8003e5a <HAL_RCC_OscConfig+0x312>
      __HAL_RCC_LSI_ENABLE();
 8003df2:	4a9c      	ldr	r2, [pc, #624]	; (8004064 <HAL_RCC_OscConfig+0x51c>)
 8003df4:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8003df8:	f043 0301 	orr.w	r3, r3, #1
 8003dfc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8003e00:	f7fd fe14 	bl	8001a2c <HAL_GetTick>
 8003e04:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e06:	4b97      	ldr	r3, [pc, #604]	; (8004064 <HAL_RCC_OscConfig+0x51c>)
 8003e08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e0c:	f013 0f02 	tst.w	r3, #2
 8003e10:	d13a      	bne.n	8003e88 <HAL_RCC_OscConfig+0x340>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e12:	f7fd fe0b 	bl	8001a2c <HAL_GetTick>
 8003e16:	1b80      	subs	r0, r0, r6
 8003e18:	2802      	cmp	r0, #2
 8003e1a:	d9f4      	bls.n	8003e06 <HAL_RCC_OscConfig+0x2be>
          return HAL_TIMEOUT;
 8003e1c:	2003      	movs	r0, #3
 8003e1e:	e1c3      	b.n	80041a8 <HAL_RCC_OscConfig+0x660>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e20:	4a90      	ldr	r2, [pc, #576]	; (8004064 <HAL_RCC_OscConfig+0x51c>)
 8003e22:	6853      	ldr	r3, [r2, #4]
 8003e24:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003e28:	6921      	ldr	r1, [r4, #16]
 8003e2a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003e2e:	6053      	str	r3, [r2, #4]
 8003e30:	e7d9      	b.n	8003de6 <HAL_RCC_OscConfig+0x29e>
        __HAL_RCC_HSI_DISABLE();
 8003e32:	4a8c      	ldr	r2, [pc, #560]	; (8004064 <HAL_RCC_OscConfig+0x51c>)
 8003e34:	6813      	ldr	r3, [r2, #0]
 8003e36:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e3a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003e3c:	f7fd fdf6 	bl	8001a2c <HAL_GetTick>
 8003e40:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e42:	4b88      	ldr	r3, [pc, #544]	; (8004064 <HAL_RCC_OscConfig+0x51c>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003e4a:	d0cc      	beq.n	8003de6 <HAL_RCC_OscConfig+0x29e>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e4c:	f7fd fdee 	bl	8001a2c <HAL_GetTick>
 8003e50:	1b80      	subs	r0, r0, r6
 8003e52:	2802      	cmp	r0, #2
 8003e54:	d9f5      	bls.n	8003e42 <HAL_RCC_OscConfig+0x2fa>
            return HAL_TIMEOUT;
 8003e56:	2003      	movs	r0, #3
 8003e58:	e1a6      	b.n	80041a8 <HAL_RCC_OscConfig+0x660>
      __HAL_RCC_LSI_DISABLE();
 8003e5a:	4a82      	ldr	r2, [pc, #520]	; (8004064 <HAL_RCC_OscConfig+0x51c>)
 8003e5c:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8003e60:	f023 0301 	bic.w	r3, r3, #1
 8003e64:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8003e68:	f7fd fde0 	bl	8001a2c <HAL_GetTick>
 8003e6c:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e6e:	4b7d      	ldr	r3, [pc, #500]	; (8004064 <HAL_RCC_OscConfig+0x51c>)
 8003e70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e74:	f013 0f02 	tst.w	r3, #2
 8003e78:	d006      	beq.n	8003e88 <HAL_RCC_OscConfig+0x340>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e7a:	f7fd fdd7 	bl	8001a2c <HAL_GetTick>
 8003e7e:	1b80      	subs	r0, r0, r6
 8003e80:	2802      	cmp	r0, #2
 8003e82:	d9f4      	bls.n	8003e6e <HAL_RCC_OscConfig+0x326>
          return HAL_TIMEOUT;
 8003e84:	2003      	movs	r0, #3
 8003e86:	e18f      	b.n	80041a8 <HAL_RCC_OscConfig+0x660>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e88:	6823      	ldr	r3, [r4, #0]
 8003e8a:	f013 0f04 	tst.w	r3, #4
 8003e8e:	d07a      	beq.n	8003f86 <HAL_RCC_OscConfig+0x43e>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003e90:	4b74      	ldr	r3, [pc, #464]	; (8004064 <HAL_RCC_OscConfig+0x51c>)
 8003e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e94:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003e98:	d136      	bne.n	8003f08 <HAL_RCC_OscConfig+0x3c0>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e9a:	4b72      	ldr	r3, [pc, #456]	; (8004064 <HAL_RCC_OscConfig+0x51c>)
 8003e9c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003e9e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003ea2:	659a      	str	r2, [r3, #88]	; 0x58
 8003ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eaa:	9301      	str	r3, [sp, #4]
 8003eac:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003eae:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003eb0:	4b6d      	ldr	r3, [pc, #436]	; (8004068 <HAL_RCC_OscConfig+0x520>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003eb8:	d028      	beq.n	8003f0c <HAL_RCC_OscConfig+0x3c4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003eba:	68a3      	ldr	r3, [r4, #8]
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d039      	beq.n	8003f34 <HAL_RCC_OscConfig+0x3ec>
 8003ec0:	2b05      	cmp	r3, #5
 8003ec2:	d03f      	beq.n	8003f44 <HAL_RCC_OscConfig+0x3fc>
 8003ec4:	4b67      	ldr	r3, [pc, #412]	; (8004064 <HAL_RCC_OscConfig+0x51c>)
 8003ec6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003eca:	f022 0201 	bic.w	r2, r2, #1
 8003ece:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8003ed2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003ed6:	f022 0204 	bic.w	r2, r2, #4
 8003eda:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ede:	68a3      	ldr	r3, [r4, #8]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d03d      	beq.n	8003f60 <HAL_RCC_OscConfig+0x418>
      tickstart = HAL_GetTick();
 8003ee4:	f7fd fda2 	bl	8001a2c <HAL_GetTick>
 8003ee8:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003eea:	4b5e      	ldr	r3, [pc, #376]	; (8004064 <HAL_RCC_OscConfig+0x51c>)
 8003eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ef0:	f013 0f02 	tst.w	r3, #2
 8003ef4:	d146      	bne.n	8003f84 <HAL_RCC_OscConfig+0x43c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ef6:	f7fd fd99 	bl	8001a2c <HAL_GetTick>
 8003efa:	1bc0      	subs	r0, r0, r7
 8003efc:	f241 3388 	movw	r3, #5000	; 0x1388
 8003f00:	4298      	cmp	r0, r3
 8003f02:	d9f2      	bls.n	8003eea <HAL_RCC_OscConfig+0x3a2>
          return HAL_TIMEOUT;
 8003f04:	2003      	movs	r0, #3
 8003f06:	e14f      	b.n	80041a8 <HAL_RCC_OscConfig+0x660>
    FlagStatus       pwrclkchanged = RESET;
 8003f08:	2600      	movs	r6, #0
 8003f0a:	e7d1      	b.n	8003eb0 <HAL_RCC_OscConfig+0x368>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f0c:	4a56      	ldr	r2, [pc, #344]	; (8004068 <HAL_RCC_OscConfig+0x520>)
 8003f0e:	6813      	ldr	r3, [r2, #0]
 8003f10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f14:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003f16:	f7fd fd89 	bl	8001a2c <HAL_GetTick>
 8003f1a:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f1c:	4b52      	ldr	r3, [pc, #328]	; (8004068 <HAL_RCC_OscConfig+0x520>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003f24:	d1c9      	bne.n	8003eba <HAL_RCC_OscConfig+0x372>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f26:	f7fd fd81 	bl	8001a2c <HAL_GetTick>
 8003f2a:	1bc0      	subs	r0, r0, r7
 8003f2c:	2802      	cmp	r0, #2
 8003f2e:	d9f5      	bls.n	8003f1c <HAL_RCC_OscConfig+0x3d4>
          return HAL_TIMEOUT;
 8003f30:	2003      	movs	r0, #3
 8003f32:	e139      	b.n	80041a8 <HAL_RCC_OscConfig+0x660>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f34:	4a4b      	ldr	r2, [pc, #300]	; (8004064 <HAL_RCC_OscConfig+0x51c>)
 8003f36:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003f3a:	f043 0301 	orr.w	r3, r3, #1
 8003f3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f42:	e7cc      	b.n	8003ede <HAL_RCC_OscConfig+0x396>
 8003f44:	4b47      	ldr	r3, [pc, #284]	; (8004064 <HAL_RCC_OscConfig+0x51c>)
 8003f46:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003f4a:	f042 0204 	orr.w	r2, r2, #4
 8003f4e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8003f52:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003f56:	f042 0201 	orr.w	r2, r2, #1
 8003f5a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8003f5e:	e7be      	b.n	8003ede <HAL_RCC_OscConfig+0x396>
      tickstart = HAL_GetTick();
 8003f60:	f7fd fd64 	bl	8001a2c <HAL_GetTick>
 8003f64:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f66:	4b3f      	ldr	r3, [pc, #252]	; (8004064 <HAL_RCC_OscConfig+0x51c>)
 8003f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f6c:	f013 0f02 	tst.w	r3, #2
 8003f70:	d008      	beq.n	8003f84 <HAL_RCC_OscConfig+0x43c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f72:	f7fd fd5b 	bl	8001a2c <HAL_GetTick>
 8003f76:	1bc0      	subs	r0, r0, r7
 8003f78:	f241 3388 	movw	r3, #5000	; 0x1388
 8003f7c:	4298      	cmp	r0, r3
 8003f7e:	d9f2      	bls.n	8003f66 <HAL_RCC_OscConfig+0x41e>
          return HAL_TIMEOUT;
 8003f80:	2003      	movs	r0, #3
 8003f82:	e111      	b.n	80041a8 <HAL_RCC_OscConfig+0x660>
    if(pwrclkchanged == SET)
 8003f84:	b9e6      	cbnz	r6, 8003fc0 <HAL_RCC_OscConfig+0x478>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003f86:	6823      	ldr	r3, [r4, #0]
 8003f88:	f013 0f20 	tst.w	r3, #32
 8003f8c:	d035      	beq.n	8003ffa <HAL_RCC_OscConfig+0x4b2>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003f8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003f90:	b1e3      	cbz	r3, 8003fcc <HAL_RCC_OscConfig+0x484>
      __HAL_RCC_HSI48_ENABLE();
 8003f92:	4a34      	ldr	r2, [pc, #208]	; (8004064 <HAL_RCC_OscConfig+0x51c>)
 8003f94:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8003f98:	f043 0301 	orr.w	r3, r3, #1
 8003f9c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8003fa0:	f7fd fd44 	bl	8001a2c <HAL_GetTick>
 8003fa4:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003fa6:	4b2f      	ldr	r3, [pc, #188]	; (8004064 <HAL_RCC_OscConfig+0x51c>)
 8003fa8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003fac:	f013 0f02 	tst.w	r3, #2
 8003fb0:	d123      	bne.n	8003ffa <HAL_RCC_OscConfig+0x4b2>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003fb2:	f7fd fd3b 	bl	8001a2c <HAL_GetTick>
 8003fb6:	1b80      	subs	r0, r0, r6
 8003fb8:	2802      	cmp	r0, #2
 8003fba:	d9f4      	bls.n	8003fa6 <HAL_RCC_OscConfig+0x45e>
          return HAL_TIMEOUT;
 8003fbc:	2003      	movs	r0, #3
 8003fbe:	e0f3      	b.n	80041a8 <HAL_RCC_OscConfig+0x660>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fc0:	4a28      	ldr	r2, [pc, #160]	; (8004064 <HAL_RCC_OscConfig+0x51c>)
 8003fc2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003fc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fc8:	6593      	str	r3, [r2, #88]	; 0x58
 8003fca:	e7dc      	b.n	8003f86 <HAL_RCC_OscConfig+0x43e>
      __HAL_RCC_HSI48_DISABLE();
 8003fcc:	4a25      	ldr	r2, [pc, #148]	; (8004064 <HAL_RCC_OscConfig+0x51c>)
 8003fce:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8003fd2:	f023 0301 	bic.w	r3, r3, #1
 8003fd6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8003fda:	f7fd fd27 	bl	8001a2c <HAL_GetTick>
 8003fde:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003fe0:	4b20      	ldr	r3, [pc, #128]	; (8004064 <HAL_RCC_OscConfig+0x51c>)
 8003fe2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003fe6:	f013 0f02 	tst.w	r3, #2
 8003fea:	d006      	beq.n	8003ffa <HAL_RCC_OscConfig+0x4b2>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003fec:	f7fd fd1e 	bl	8001a2c <HAL_GetTick>
 8003ff0:	1b80      	subs	r0, r0, r6
 8003ff2:	2802      	cmp	r0, #2
 8003ff4:	d9f4      	bls.n	8003fe0 <HAL_RCC_OscConfig+0x498>
          return HAL_TIMEOUT;
 8003ff6:	2003      	movs	r0, #3
 8003ff8:	e0d6      	b.n	80041a8 <HAL_RCC_OscConfig+0x660>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003ffa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	f000 80d2 	beq.w	80041a6 <HAL_RCC_OscConfig+0x65e>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004002:	2b02      	cmp	r3, #2
 8004004:	d017      	beq.n	8004036 <HAL_RCC_OscConfig+0x4ee>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004006:	2d0c      	cmp	r5, #12
 8004008:	f000 80d4 	beq.w	80041b4 <HAL_RCC_OscConfig+0x66c>
        __HAL_RCC_PLL_DISABLE();
 800400c:	4a15      	ldr	r2, [pc, #84]	; (8004064 <HAL_RCC_OscConfig+0x51c>)
 800400e:	6813      	ldr	r3, [r2, #0]
 8004010:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004014:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004016:	f7fd fd09 	bl	8001a2c <HAL_GetTick>
 800401a:	4604      	mov	r4, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800401c:	4b11      	ldr	r3, [pc, #68]	; (8004064 <HAL_RCC_OscConfig+0x51c>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004024:	f000 80ae 	beq.w	8004184 <HAL_RCC_OscConfig+0x63c>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004028:	f7fd fd00 	bl	8001a2c <HAL_GetTick>
 800402c:	1b00      	subs	r0, r0, r4
 800402e:	2802      	cmp	r0, #2
 8004030:	d9f4      	bls.n	800401c <HAL_RCC_OscConfig+0x4d4>
            return HAL_TIMEOUT;
 8004032:	2003      	movs	r0, #3
 8004034:	e0b8      	b.n	80041a8 <HAL_RCC_OscConfig+0x660>
      pll_config = RCC->PLLCFGR;
 8004036:	4b0b      	ldr	r3, [pc, #44]	; (8004064 <HAL_RCC_OscConfig+0x51c>)
 8004038:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800403a:	f003 0103 	and.w	r1, r3, #3
 800403e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004040:	4291      	cmp	r1, r2
 8004042:	d013      	beq.n	800406c <HAL_RCC_OscConfig+0x524>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004044:	2d0c      	cmp	r5, #12
 8004046:	f000 80b1 	beq.w	80041ac <HAL_RCC_OscConfig+0x664>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800404a:	4b06      	ldr	r3, [pc, #24]	; (8004064 <HAL_RCC_OscConfig+0x51c>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8004052:	f040 80ad 	bne.w	80041b0 <HAL_RCC_OscConfig+0x668>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004056:	4b03      	ldr	r3, [pc, #12]	; (8004064 <HAL_RCC_OscConfig+0x51c>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800405e:	d02f      	beq.n	80040c0 <HAL_RCC_OscConfig+0x578>
            return HAL_ERROR;
 8004060:	2001      	movs	r0, #1
 8004062:	e0a1      	b.n	80041a8 <HAL_RCC_OscConfig+0x660>
 8004064:	40021000 	.word	0x40021000
 8004068:	40007000 	.word	0x40007000
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800406c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004070:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004072:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004074:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8004078:	d1e4      	bne.n	8004044 <HAL_RCC_OscConfig+0x4fc>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800407a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800407e:	6b61      	ldr	r1, [r4, #52]	; 0x34
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004080:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8004084:	d1de      	bne.n	8004044 <HAL_RCC_OscConfig+0x4fc>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004086:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800408a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800408c:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8004090:	d1d8      	bne.n	8004044 <HAL_RCC_OscConfig+0x4fc>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004092:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8004096:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004098:	0852      	lsrs	r2, r2, #1
 800409a:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800409c:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 80040a0:	d1d0      	bne.n	8004044 <HAL_RCC_OscConfig+0x4fc>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80040a2:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 80040a6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80040a8:	0852      	lsrs	r2, r2, #1
 80040aa:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040ac:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 80040b0:	d1c8      	bne.n	8004044 <HAL_RCC_OscConfig+0x4fc>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040b2:	4b41      	ldr	r3, [pc, #260]	; (80041b8 <HAL_RCC_OscConfig+0x670>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80040ba:	d049      	beq.n	8004150 <HAL_RCC_OscConfig+0x608>
  return HAL_OK;
 80040bc:	2000      	movs	r0, #0
 80040be:	e073      	b.n	80041a8 <HAL_RCC_OscConfig+0x660>
            __HAL_RCC_PLL_DISABLE();
 80040c0:	4a3d      	ldr	r2, [pc, #244]	; (80041b8 <HAL_RCC_OscConfig+0x670>)
 80040c2:	6813      	ldr	r3, [r2, #0]
 80040c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040c8:	6013      	str	r3, [r2, #0]
            tickstart = HAL_GetTick();
 80040ca:	f7fd fcaf 	bl	8001a2c <HAL_GetTick>
 80040ce:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040d0:	4b39      	ldr	r3, [pc, #228]	; (80041b8 <HAL_RCC_OscConfig+0x670>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80040d8:	d006      	beq.n	80040e8 <HAL_RCC_OscConfig+0x5a0>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040da:	f7fd fca7 	bl	8001a2c <HAL_GetTick>
 80040de:	1b40      	subs	r0, r0, r5
 80040e0:	2802      	cmp	r0, #2
 80040e2:	d9f5      	bls.n	80040d0 <HAL_RCC_OscConfig+0x588>
                return HAL_TIMEOUT;
 80040e4:	2003      	movs	r0, #3
 80040e6:	e05f      	b.n	80041a8 <HAL_RCC_OscConfig+0x660>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040e8:	4a33      	ldr	r2, [pc, #204]	; (80041b8 <HAL_RCC_OscConfig+0x670>)
 80040ea:	68d3      	ldr	r3, [r2, #12]
 80040ec:	4933      	ldr	r1, [pc, #204]	; (80041bc <HAL_RCC_OscConfig+0x674>)
 80040ee:	4019      	ands	r1, r3
 80040f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80040f2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80040f4:	3801      	subs	r0, #1
 80040f6:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 80040fa:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80040fc:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8004100:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004102:	0840      	lsrs	r0, r0, #1
 8004104:	3801      	subs	r0, #1
 8004106:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 800410a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800410c:	0840      	lsrs	r0, r0, #1
 800410e:	3801      	subs	r0, #1
 8004110:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8004114:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004116:	ea43 63c0 	orr.w	r3, r3, r0, lsl #27
 800411a:	4319      	orrs	r1, r3
 800411c:	60d1      	str	r1, [r2, #12]
            __HAL_RCC_PLL_ENABLE();
 800411e:	6813      	ldr	r3, [r2, #0]
 8004120:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004124:	6013      	str	r3, [r2, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004126:	68d3      	ldr	r3, [r2, #12]
 8004128:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800412c:	60d3      	str	r3, [r2, #12]
            tickstart = HAL_GetTick();
 800412e:	f7fd fc7d 	bl	8001a2c <HAL_GetTick>
 8004132:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004134:	4b20      	ldr	r3, [pc, #128]	; (80041b8 <HAL_RCC_OscConfig+0x670>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800413c:	d106      	bne.n	800414c <HAL_RCC_OscConfig+0x604>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800413e:	f7fd fc75 	bl	8001a2c <HAL_GetTick>
 8004142:	1b00      	subs	r0, r0, r4
 8004144:	2802      	cmp	r0, #2
 8004146:	d9f5      	bls.n	8004134 <HAL_RCC_OscConfig+0x5ec>
                return HAL_TIMEOUT;
 8004148:	2003      	movs	r0, #3
 800414a:	e02d      	b.n	80041a8 <HAL_RCC_OscConfig+0x660>
  return HAL_OK;
 800414c:	2000      	movs	r0, #0
 800414e:	e02b      	b.n	80041a8 <HAL_RCC_OscConfig+0x660>
          __HAL_RCC_PLL_ENABLE();
 8004150:	4b19      	ldr	r3, [pc, #100]	; (80041b8 <HAL_RCC_OscConfig+0x670>)
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8004158:	601a      	str	r2, [r3, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800415a:	68da      	ldr	r2, [r3, #12]
 800415c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8004160:	60da      	str	r2, [r3, #12]
          tickstart = HAL_GetTick();
 8004162:	f7fd fc63 	bl	8001a2c <HAL_GetTick>
 8004166:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004168:	4b13      	ldr	r3, [pc, #76]	; (80041b8 <HAL_RCC_OscConfig+0x670>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004170:	d106      	bne.n	8004180 <HAL_RCC_OscConfig+0x638>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004172:	f7fd fc5b 	bl	8001a2c <HAL_GetTick>
 8004176:	1b03      	subs	r3, r0, r4
 8004178:	2b02      	cmp	r3, #2
 800417a:	d9f5      	bls.n	8004168 <HAL_RCC_OscConfig+0x620>
              return HAL_TIMEOUT;
 800417c:	2003      	movs	r0, #3
 800417e:	e013      	b.n	80041a8 <HAL_RCC_OscConfig+0x660>
  return HAL_OK;
 8004180:	2000      	movs	r0, #0
 8004182:	e011      	b.n	80041a8 <HAL_RCC_OscConfig+0x660>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004184:	4a0c      	ldr	r2, [pc, #48]	; (80041b8 <HAL_RCC_OscConfig+0x670>)
 8004186:	68d1      	ldr	r1, [r2, #12]
 8004188:	4b0d      	ldr	r3, [pc, #52]	; (80041c0 <HAL_RCC_OscConfig+0x678>)
 800418a:	400b      	ands	r3, r1
 800418c:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 800418e:	2000      	movs	r0, #0
 8004190:	e00a      	b.n	80041a8 <HAL_RCC_OscConfig+0x660>
    return HAL_ERROR;
 8004192:	2001      	movs	r0, #1
}
 8004194:	4770      	bx	lr
        return HAL_ERROR;
 8004196:	2001      	movs	r0, #1
 8004198:	e006      	b.n	80041a8 <HAL_RCC_OscConfig+0x660>
            return HAL_ERROR;
 800419a:	2001      	movs	r0, #1
 800419c:	e004      	b.n	80041a8 <HAL_RCC_OscConfig+0x660>
        return HAL_ERROR;
 800419e:	2001      	movs	r0, #1
 80041a0:	e002      	b.n	80041a8 <HAL_RCC_OscConfig+0x660>
        return HAL_ERROR;
 80041a2:	2001      	movs	r0, #1
 80041a4:	e000      	b.n	80041a8 <HAL_RCC_OscConfig+0x660>
  return HAL_OK;
 80041a6:	2000      	movs	r0, #0
}
 80041a8:	b003      	add	sp, #12
 80041aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
          return HAL_ERROR;
 80041ac:	2001      	movs	r0, #1
 80041ae:	e7fb      	b.n	80041a8 <HAL_RCC_OscConfig+0x660>
            return HAL_ERROR;
 80041b0:	2001      	movs	r0, #1
 80041b2:	e7f9      	b.n	80041a8 <HAL_RCC_OscConfig+0x660>
        return HAL_ERROR;
 80041b4:	2001      	movs	r0, #1
 80041b6:	e7f7      	b.n	80041a8 <HAL_RCC_OscConfig+0x660>
 80041b8:	40021000 	.word	0x40021000
 80041bc:	019d800c 	.word	0x019d800c
 80041c0:	feeefffc 	.word	0xfeeefffc

080041c4 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80041c4:	2800      	cmp	r0, #0
 80041c6:	f000 80ea 	beq.w	800439e <HAL_RCC_ClockConfig+0x1da>
{
 80041ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041cc:	460d      	mov	r5, r1
 80041ce:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041d0:	4b77      	ldr	r3, [pc, #476]	; (80043b0 <HAL_RCC_ClockConfig+0x1ec>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 030f 	and.w	r3, r3, #15
 80041d8:	428b      	cmp	r3, r1
 80041da:	d20b      	bcs.n	80041f4 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041dc:	4a74      	ldr	r2, [pc, #464]	; (80043b0 <HAL_RCC_ClockConfig+0x1ec>)
 80041de:	6813      	ldr	r3, [r2, #0]
 80041e0:	f023 030f 	bic.w	r3, r3, #15
 80041e4:	430b      	orrs	r3, r1
 80041e6:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041e8:	6813      	ldr	r3, [r2, #0]
 80041ea:	f003 030f 	and.w	r3, r3, #15
 80041ee:	428b      	cmp	r3, r1
 80041f0:	f040 80d7 	bne.w	80043a2 <HAL_RCC_ClockConfig+0x1de>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041f4:	6823      	ldr	r3, [r4, #0]
 80041f6:	f013 0f02 	tst.w	r3, #2
 80041fa:	d00c      	beq.n	8004216 <HAL_RCC_ClockConfig+0x52>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80041fc:	68a2      	ldr	r2, [r4, #8]
 80041fe:	4b6d      	ldr	r3, [pc, #436]	; (80043b4 <HAL_RCC_ClockConfig+0x1f0>)
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004206:	429a      	cmp	r2, r3
 8004208:	d905      	bls.n	8004216 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800420a:	496a      	ldr	r1, [pc, #424]	; (80043b4 <HAL_RCC_ClockConfig+0x1f0>)
 800420c:	688b      	ldr	r3, [r1, #8]
 800420e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004212:	431a      	orrs	r2, r3
 8004214:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004216:	6823      	ldr	r3, [r4, #0]
 8004218:	f013 0f01 	tst.w	r3, #1
 800421c:	d06e      	beq.n	80042fc <HAL_RCC_ClockConfig+0x138>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800421e:	6863      	ldr	r3, [r4, #4]
 8004220:	2b03      	cmp	r3, #3
 8004222:	d00d      	beq.n	8004240 <HAL_RCC_ClockConfig+0x7c>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004224:	2b02      	cmp	r3, #2
 8004226:	d025      	beq.n	8004274 <HAL_RCC_ClockConfig+0xb0>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004228:	2b00      	cmp	r3, #0
 800422a:	d13c      	bne.n	80042a6 <HAL_RCC_ClockConfig+0xe2>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800422c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004230:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f013 0f02 	tst.w	r3, #2
 800423a:	d121      	bne.n	8004280 <HAL_RCC_ClockConfig+0xbc>
          return HAL_ERROR;
 800423c:	2001      	movs	r0, #1
 800423e:	e0a7      	b.n	8004390 <HAL_RCC_ClockConfig+0x1cc>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004240:	4b5c      	ldr	r3, [pc, #368]	; (80043b4 <HAL_RCC_ClockConfig+0x1f0>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004248:	d101      	bne.n	800424e <HAL_RCC_ClockConfig+0x8a>
        return HAL_ERROR;
 800424a:	2001      	movs	r0, #1
 800424c:	e0a0      	b.n	8004390 <HAL_RCC_ClockConfig+0x1cc>
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800424e:	f7ff fb9d 	bl	800398c <RCC_GetSysClockFreqFromPLLSource>
 8004252:	4b59      	ldr	r3, [pc, #356]	; (80043b8 <HAL_RCC_ClockConfig+0x1f4>)
 8004254:	4298      	cmp	r0, r3
 8004256:	d92d      	bls.n	80042b4 <HAL_RCC_ClockConfig+0xf0>
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004258:	4b56      	ldr	r3, [pc, #344]	; (80043b4 <HAL_RCC_ClockConfig+0x1f0>)
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 8004260:	d12a      	bne.n	80042b8 <HAL_RCC_ClockConfig+0xf4>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004262:	4a54      	ldr	r2, [pc, #336]	; (80043b4 <HAL_RCC_ClockConfig+0x1f0>)
 8004264:	6893      	ldr	r3, [r2, #8]
 8004266:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800426a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800426e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004270:	2780      	movs	r7, #128	; 0x80
 8004272:	e024      	b.n	80042be <HAL_RCC_ClockConfig+0xfa>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004274:	4b4f      	ldr	r3, [pc, #316]	; (80043b4 <HAL_RCC_ClockConfig+0x1f0>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800427c:	f000 8093 	beq.w	80043a6 <HAL_RCC_ClockConfig+0x1e2>
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004280:	f7ff fc08 	bl	8003a94 <HAL_RCC_GetSysClockFreq>
 8004284:	4b4c      	ldr	r3, [pc, #304]	; (80043b8 <HAL_RCC_ClockConfig+0x1f4>)
 8004286:	4298      	cmp	r0, r3
 8004288:	d918      	bls.n	80042bc <HAL_RCC_ClockConfig+0xf8>
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800428a:	4b4a      	ldr	r3, [pc, #296]	; (80043b4 <HAL_RCC_ClockConfig+0x1f0>)
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 8004292:	d12f      	bne.n	80042f4 <HAL_RCC_ClockConfig+0x130>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004294:	4a47      	ldr	r2, [pc, #284]	; (80043b4 <HAL_RCC_ClockConfig+0x1f0>)
 8004296:	6893      	ldr	r3, [r2, #8]
 8004298:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800429c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042a0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80042a2:	2780      	movs	r7, #128	; 0x80
 80042a4:	e00b      	b.n	80042be <HAL_RCC_ClockConfig+0xfa>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042a6:	4b43      	ldr	r3, [pc, #268]	; (80043b4 <HAL_RCC_ClockConfig+0x1f0>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80042ae:	d1e7      	bne.n	8004280 <HAL_RCC_ClockConfig+0xbc>
          return HAL_ERROR;
 80042b0:	2001      	movs	r0, #1
 80042b2:	e06d      	b.n	8004390 <HAL_RCC_ClockConfig+0x1cc>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80042b4:	2700      	movs	r7, #0
 80042b6:	e002      	b.n	80042be <HAL_RCC_ClockConfig+0xfa>
 80042b8:	2700      	movs	r7, #0
 80042ba:	e000      	b.n	80042be <HAL_RCC_ClockConfig+0xfa>
 80042bc:	2700      	movs	r7, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80042be:	4a3d      	ldr	r2, [pc, #244]	; (80043b4 <HAL_RCC_ClockConfig+0x1f0>)
 80042c0:	6893      	ldr	r3, [r2, #8]
 80042c2:	f023 0303 	bic.w	r3, r3, #3
 80042c6:	6861      	ldr	r1, [r4, #4]
 80042c8:	430b      	orrs	r3, r1
 80042ca:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 80042cc:	f7fd fbae 	bl	8001a2c <HAL_GetTick>
 80042d0:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042d2:	4b38      	ldr	r3, [pc, #224]	; (80043b4 <HAL_RCC_ClockConfig+0x1f0>)
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f003 030c 	and.w	r3, r3, #12
 80042da:	6862      	ldr	r2, [r4, #4]
 80042dc:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80042e0:	d00a      	beq.n	80042f8 <HAL_RCC_ClockConfig+0x134>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042e2:	f7fd fba3 	bl	8001a2c <HAL_GetTick>
 80042e6:	1b80      	subs	r0, r0, r6
 80042e8:	f241 3388 	movw	r3, #5000	; 0x1388
 80042ec:	4298      	cmp	r0, r3
 80042ee:	d9f0      	bls.n	80042d2 <HAL_RCC_ClockConfig+0x10e>
        return HAL_TIMEOUT;
 80042f0:	2003      	movs	r0, #3
 80042f2:	e04d      	b.n	8004390 <HAL_RCC_ClockConfig+0x1cc>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80042f4:	2700      	movs	r7, #0
 80042f6:	e7e2      	b.n	80042be <HAL_RCC_ClockConfig+0xfa>
  if(hpre == RCC_SYSCLK_DIV2)
 80042f8:	2f00      	cmp	r7, #0
 80042fa:	d14a      	bne.n	8004392 <HAL_RCC_ClockConfig+0x1ce>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042fc:	6823      	ldr	r3, [r4, #0]
 80042fe:	f013 0f02 	tst.w	r3, #2
 8004302:	d00c      	beq.n	800431e <HAL_RCC_ClockConfig+0x15a>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004304:	68a2      	ldr	r2, [r4, #8]
 8004306:	4b2b      	ldr	r3, [pc, #172]	; (80043b4 <HAL_RCC_ClockConfig+0x1f0>)
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800430e:	429a      	cmp	r2, r3
 8004310:	d205      	bcs.n	800431e <HAL_RCC_ClockConfig+0x15a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004312:	4928      	ldr	r1, [pc, #160]	; (80043b4 <HAL_RCC_ClockConfig+0x1f0>)
 8004314:	688b      	ldr	r3, [r1, #8]
 8004316:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800431a:	431a      	orrs	r2, r3
 800431c:	608a      	str	r2, [r1, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800431e:	4b24      	ldr	r3, [pc, #144]	; (80043b0 <HAL_RCC_ClockConfig+0x1ec>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 030f 	and.w	r3, r3, #15
 8004326:	42ab      	cmp	r3, r5
 8004328:	d90a      	bls.n	8004340 <HAL_RCC_ClockConfig+0x17c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800432a:	4a21      	ldr	r2, [pc, #132]	; (80043b0 <HAL_RCC_ClockConfig+0x1ec>)
 800432c:	6813      	ldr	r3, [r2, #0]
 800432e:	f023 030f 	bic.w	r3, r3, #15
 8004332:	432b      	orrs	r3, r5
 8004334:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004336:	6813      	ldr	r3, [r2, #0]
 8004338:	f003 030f 	and.w	r3, r3, #15
 800433c:	42ab      	cmp	r3, r5
 800433e:	d134      	bne.n	80043aa <HAL_RCC_ClockConfig+0x1e6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004340:	6823      	ldr	r3, [r4, #0]
 8004342:	f013 0f04 	tst.w	r3, #4
 8004346:	d006      	beq.n	8004356 <HAL_RCC_ClockConfig+0x192>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004348:	4a1a      	ldr	r2, [pc, #104]	; (80043b4 <HAL_RCC_ClockConfig+0x1f0>)
 800434a:	6893      	ldr	r3, [r2, #8]
 800434c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004350:	68e1      	ldr	r1, [r4, #12]
 8004352:	430b      	orrs	r3, r1
 8004354:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004356:	6823      	ldr	r3, [r4, #0]
 8004358:	f013 0f08 	tst.w	r3, #8
 800435c:	d007      	beq.n	800436e <HAL_RCC_ClockConfig+0x1aa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800435e:	4a15      	ldr	r2, [pc, #84]	; (80043b4 <HAL_RCC_ClockConfig+0x1f0>)
 8004360:	6893      	ldr	r3, [r2, #8]
 8004362:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8004366:	6921      	ldr	r1, [r4, #16]
 8004368:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800436c:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800436e:	f7ff fb91 	bl	8003a94 <HAL_RCC_GetSysClockFreq>
 8004372:	4b10      	ldr	r3, [pc, #64]	; (80043b4 <HAL_RCC_ClockConfig+0x1f0>)
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800437a:	4a10      	ldr	r2, [pc, #64]	; (80043bc <HAL_RCC_ClockConfig+0x1f8>)
 800437c:	5cd3      	ldrb	r3, [r2, r3]
 800437e:	f003 031f 	and.w	r3, r3, #31
 8004382:	40d8      	lsrs	r0, r3
 8004384:	4b0e      	ldr	r3, [pc, #56]	; (80043c0 <HAL_RCC_ClockConfig+0x1fc>)
 8004386:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8004388:	4b0e      	ldr	r3, [pc, #56]	; (80043c4 <HAL_RCC_ClockConfig+0x200>)
 800438a:	6818      	ldr	r0, [r3, #0]
 800438c:	f7fd fb0a 	bl	80019a4 <HAL_InitTick>
}
 8004390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004392:	4a08      	ldr	r2, [pc, #32]	; (80043b4 <HAL_RCC_ClockConfig+0x1f0>)
 8004394:	6893      	ldr	r3, [r2, #8]
 8004396:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800439a:	6093      	str	r3, [r2, #8]
 800439c:	e7ae      	b.n	80042fc <HAL_RCC_ClockConfig+0x138>
    return HAL_ERROR;
 800439e:	2001      	movs	r0, #1
}
 80043a0:	4770      	bx	lr
      return HAL_ERROR;
 80043a2:	2001      	movs	r0, #1
 80043a4:	e7f4      	b.n	8004390 <HAL_RCC_ClockConfig+0x1cc>
          return HAL_ERROR;
 80043a6:	2001      	movs	r0, #1
 80043a8:	e7f2      	b.n	8004390 <HAL_RCC_ClockConfig+0x1cc>
      return HAL_ERROR;
 80043aa:	2001      	movs	r0, #1
 80043ac:	e7f0      	b.n	8004390 <HAL_RCC_ClockConfig+0x1cc>
 80043ae:	bf00      	nop
 80043b0:	40022000 	.word	0x40022000
 80043b4:	40021000 	.word	0x40021000
 80043b8:	04c4b400 	.word	0x04c4b400
 80043bc:	0800980c 	.word	0x0800980c
 80043c0:	20000000 	.word	0x20000000
 80043c4:	20000008 	.word	0x20000008

080043c8 <HAL_RCC_GetHCLKFreq>:
}
 80043c8:	4b01      	ldr	r3, [pc, #4]	; (80043d0 <HAL_RCC_GetHCLKFreq+0x8>)
 80043ca:	6818      	ldr	r0, [r3, #0]
 80043cc:	4770      	bx	lr
 80043ce:	bf00      	nop
 80043d0:	20000000 	.word	0x20000000

080043d4 <HAL_RCC_GetPCLK1Freq>:
{
 80043d4:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80043d6:	f7ff fff7 	bl	80043c8 <HAL_RCC_GetHCLKFreq>
 80043da:	4b05      	ldr	r3, [pc, #20]	; (80043f0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80043e2:	4a04      	ldr	r2, [pc, #16]	; (80043f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80043e4:	5cd3      	ldrb	r3, [r2, r3]
 80043e6:	f003 031f 	and.w	r3, r3, #31
}
 80043ea:	40d8      	lsrs	r0, r3
 80043ec:	bd08      	pop	{r3, pc}
 80043ee:	bf00      	nop
 80043f0:	40021000 	.word	0x40021000
 80043f4:	0800981c 	.word	0x0800981c

080043f8 <HAL_RCC_GetPCLK2Freq>:
{
 80043f8:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80043fa:	f7ff ffe5 	bl	80043c8 <HAL_RCC_GetHCLKFreq>
 80043fe:	4b05      	ldr	r3, [pc, #20]	; (8004414 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8004406:	4a04      	ldr	r2, [pc, #16]	; (8004418 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004408:	5cd3      	ldrb	r3, [r2, r3]
 800440a:	f003 031f 	and.w	r3, r3, #31
}
 800440e:	40d8      	lsrs	r0, r3
 8004410:	bd08      	pop	{r3, pc}
 8004412:	bf00      	nop
 8004414:	40021000 	.word	0x40021000
 8004418:	0800981c 	.word	0x0800981c

0800441c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800441c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800441e:	4604      	mov	r4, r0
 8004420:	460f      	mov	r7, r1
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004422:	4b54      	ldr	r3, [pc, #336]	; (8004574 <RCCEx_PLLSAI2_Config+0x158>)
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	f013 0f03 	tst.w	r3, #3
 800442a:	d00e      	beq.n	800444a <RCCEx_PLLSAI2_Config+0x2e>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800442c:	4b51      	ldr	r3, [pc, #324]	; (8004574 <RCCEx_PLLSAI2_Config+0x158>)
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	f003 0303 	and.w	r3, r3, #3
 8004434:	6802      	ldr	r2, [r0, #0]
 8004436:	4293      	cmp	r3, r2
 8004438:	d002      	beq.n	8004440 <RCCEx_PLLSAI2_Config+0x24>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800443a:	2501      	movs	r5, #1
      }
    }
  }

  return status;
}
 800443c:	4628      	mov	r0, r5
 800443e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 8004440:	2a00      	cmp	r2, #0
 8004442:	f000 8095 	beq.w	8004570 <RCCEx_PLLSAI2_Config+0x154>
  HAL_StatusTypeDef status = HAL_OK;
 8004446:	2500      	movs	r5, #0
 8004448:	e009      	b.n	800445e <RCCEx_PLLSAI2_Config+0x42>
    switch(PllSai2->PLLSAI2Source)
 800444a:	6803      	ldr	r3, [r0, #0]
 800444c:	2b02      	cmp	r3, #2
 800444e:	d054      	beq.n	80044fa <RCCEx_PLLSAI2_Config+0xde>
 8004450:	2b03      	cmp	r3, #3
 8004452:	d059      	beq.n	8004508 <RCCEx_PLLSAI2_Config+0xec>
 8004454:	2b01      	cmp	r3, #1
 8004456:	d043      	beq.n	80044e0 <RCCEx_PLLSAI2_Config+0xc4>
 8004458:	2501      	movs	r5, #1
  if(status == HAL_OK)
 800445a:	2d00      	cmp	r5, #0
 800445c:	d1ee      	bne.n	800443c <RCCEx_PLLSAI2_Config+0x20>
    __HAL_RCC_PLLSAI2_DISABLE();
 800445e:	4a45      	ldr	r2, [pc, #276]	; (8004574 <RCCEx_PLLSAI2_Config+0x158>)
 8004460:	6813      	ldr	r3, [r2, #0]
 8004462:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004466:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004468:	f7fd fae0 	bl	8001a2c <HAL_GetTick>
 800446c:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800446e:	4b41      	ldr	r3, [pc, #260]	; (8004574 <RCCEx_PLLSAI2_Config+0x158>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8004476:	d005      	beq.n	8004484 <RCCEx_PLLSAI2_Config+0x68>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004478:	f7fd fad8 	bl	8001a2c <HAL_GetTick>
 800447c:	1b83      	subs	r3, r0, r6
 800447e:	2b02      	cmp	r3, #2
 8004480:	d9f5      	bls.n	800446e <RCCEx_PLLSAI2_Config+0x52>
        status = HAL_TIMEOUT;
 8004482:	2503      	movs	r5, #3
    if(status == HAL_OK)
 8004484:	2d00      	cmp	r5, #0
 8004486:	d1d9      	bne.n	800443c <RCCEx_PLLSAI2_Config+0x20>
      if(Divider == DIVIDER_P_UPDATE)
 8004488:	2f00      	cmp	r7, #0
 800448a:	d14b      	bne.n	8004524 <RCCEx_PLLSAI2_Config+0x108>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800448c:	4839      	ldr	r0, [pc, #228]	; (8004574 <RCCEx_PLLSAI2_Config+0x158>)
 800448e:	6943      	ldr	r3, [r0, #20]
 8004490:	4a39      	ldr	r2, [pc, #228]	; (8004578 <RCCEx_PLLSAI2_Config+0x15c>)
 8004492:	401a      	ands	r2, r3
 8004494:	68a1      	ldr	r1, [r4, #8]
 8004496:	68e3      	ldr	r3, [r4, #12]
 8004498:	06db      	lsls	r3, r3, #27
 800449a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800449e:	6861      	ldr	r1, [r4, #4]
 80044a0:	3901      	subs	r1, #1
 80044a2:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 80044a6:	431a      	orrs	r2, r3
 80044a8:	6142      	str	r2, [r0, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 80044aa:	4a32      	ldr	r2, [pc, #200]	; (8004574 <RCCEx_PLLSAI2_Config+0x158>)
 80044ac:	6813      	ldr	r3, [r2, #0]
 80044ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044b2:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80044b4:	f7fd faba 	bl	8001a2c <HAL_GetTick>
 80044b8:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80044ba:	4b2e      	ldr	r3, [pc, #184]	; (8004574 <RCCEx_PLLSAI2_Config+0x158>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80044c2:	d105      	bne.n	80044d0 <RCCEx_PLLSAI2_Config+0xb4>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80044c4:	f7fd fab2 	bl	8001a2c <HAL_GetTick>
 80044c8:	1b83      	subs	r3, r0, r6
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d9f5      	bls.n	80044ba <RCCEx_PLLSAI2_Config+0x9e>
          status = HAL_TIMEOUT;
 80044ce:	2503      	movs	r5, #3
      if(status == HAL_OK)
 80044d0:	2d00      	cmp	r5, #0
 80044d2:	d1b3      	bne.n	800443c <RCCEx_PLLSAI2_Config+0x20>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80044d4:	4a27      	ldr	r2, [pc, #156]	; (8004574 <RCCEx_PLLSAI2_Config+0x158>)
 80044d6:	6953      	ldr	r3, [r2, #20]
 80044d8:	69a1      	ldr	r1, [r4, #24]
 80044da:	430b      	orrs	r3, r1
 80044dc:	6153      	str	r3, [r2, #20]
 80044de:	e7ad      	b.n	800443c <RCCEx_PLLSAI2_Config+0x20>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80044e0:	4a24      	ldr	r2, [pc, #144]	; (8004574 <RCCEx_PLLSAI2_Config+0x158>)
 80044e2:	6812      	ldr	r2, [r2, #0]
 80044e4:	f012 0f02 	tst.w	r2, #2
 80044e8:	d01a      	beq.n	8004520 <RCCEx_PLLSAI2_Config+0x104>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80044ea:	4922      	ldr	r1, [pc, #136]	; (8004574 <RCCEx_PLLSAI2_Config+0x158>)
 80044ec:	68ca      	ldr	r2, [r1, #12]
 80044ee:	f022 0203 	bic.w	r2, r2, #3
 80044f2:	4313      	orrs	r3, r2
 80044f4:	60cb      	str	r3, [r1, #12]
 80044f6:	2500      	movs	r5, #0
 80044f8:	e7af      	b.n	800445a <RCCEx_PLLSAI2_Config+0x3e>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80044fa:	4a1e      	ldr	r2, [pc, #120]	; (8004574 <RCCEx_PLLSAI2_Config+0x158>)
 80044fc:	6812      	ldr	r2, [r2, #0]
 80044fe:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8004502:	d1f2      	bne.n	80044ea <RCCEx_PLLSAI2_Config+0xce>
        status = HAL_ERROR;
 8004504:	2501      	movs	r5, #1
 8004506:	e7a8      	b.n	800445a <RCCEx_PLLSAI2_Config+0x3e>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004508:	4a1a      	ldr	r2, [pc, #104]	; (8004574 <RCCEx_PLLSAI2_Config+0x158>)
 800450a:	6812      	ldr	r2, [r2, #0]
 800450c:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8004510:	d1eb      	bne.n	80044ea <RCCEx_PLLSAI2_Config+0xce>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004512:	4a18      	ldr	r2, [pc, #96]	; (8004574 <RCCEx_PLLSAI2_Config+0x158>)
 8004514:	6812      	ldr	r2, [r2, #0]
 8004516:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 800451a:	d1e6      	bne.n	80044ea <RCCEx_PLLSAI2_Config+0xce>
          status = HAL_ERROR;
 800451c:	2501      	movs	r5, #1
 800451e:	e79c      	b.n	800445a <RCCEx_PLLSAI2_Config+0x3e>
        status = HAL_ERROR;
 8004520:	2501      	movs	r5, #1
 8004522:	e79a      	b.n	800445a <RCCEx_PLLSAI2_Config+0x3e>
      else if(Divider == DIVIDER_Q_UPDATE)
 8004524:	2f01      	cmp	r7, #1
 8004526:	d011      	beq.n	800454c <RCCEx_PLLSAI2_Config+0x130>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004528:	4812      	ldr	r0, [pc, #72]	; (8004574 <RCCEx_PLLSAI2_Config+0x158>)
 800452a:	6943      	ldr	r3, [r0, #20]
 800452c:	4a13      	ldr	r2, [pc, #76]	; (800457c <RCCEx_PLLSAI2_Config+0x160>)
 800452e:	401a      	ands	r2, r3
 8004530:	68a1      	ldr	r1, [r4, #8]
 8004532:	6963      	ldr	r3, [r4, #20]
 8004534:	085b      	lsrs	r3, r3, #1
 8004536:	3b01      	subs	r3, #1
 8004538:	065b      	lsls	r3, r3, #25
 800453a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800453e:	6861      	ldr	r1, [r4, #4]
 8004540:	3901      	subs	r1, #1
 8004542:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8004546:	431a      	orrs	r2, r3
 8004548:	6142      	str	r2, [r0, #20]
 800454a:	e7ae      	b.n	80044aa <RCCEx_PLLSAI2_Config+0x8e>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800454c:	4809      	ldr	r0, [pc, #36]	; (8004574 <RCCEx_PLLSAI2_Config+0x158>)
 800454e:	6943      	ldr	r3, [r0, #20]
 8004550:	4a0b      	ldr	r2, [pc, #44]	; (8004580 <RCCEx_PLLSAI2_Config+0x164>)
 8004552:	401a      	ands	r2, r3
 8004554:	68a1      	ldr	r1, [r4, #8]
 8004556:	6923      	ldr	r3, [r4, #16]
 8004558:	085b      	lsrs	r3, r3, #1
 800455a:	3b01      	subs	r3, #1
 800455c:	055b      	lsls	r3, r3, #21
 800455e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004562:	6861      	ldr	r1, [r4, #4]
 8004564:	3901      	subs	r1, #1
 8004566:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 800456a:	431a      	orrs	r2, r3
 800456c:	6142      	str	r2, [r0, #20]
 800456e:	e79c      	b.n	80044aa <RCCEx_PLLSAI2_Config+0x8e>
      status = HAL_ERROR;
 8004570:	2501      	movs	r5, #1
 8004572:	e763      	b.n	800443c <RCCEx_PLLSAI2_Config+0x20>
 8004574:	40021000 	.word	0x40021000
 8004578:	07ff800f 	.word	0x07ff800f
 800457c:	f9ff800f 	.word	0xf9ff800f
 8004580:	ff9f800f 	.word	0xff9f800f

08004584 <RCCEx_PLLSAI1_Config>:
{
 8004584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004586:	4604      	mov	r4, r0
 8004588:	460f      	mov	r7, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800458a:	4b54      	ldr	r3, [pc, #336]	; (80046dc <RCCEx_PLLSAI1_Config+0x158>)
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	f013 0f03 	tst.w	r3, #3
 8004592:	d00e      	beq.n	80045b2 <RCCEx_PLLSAI1_Config+0x2e>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004594:	4b51      	ldr	r3, [pc, #324]	; (80046dc <RCCEx_PLLSAI1_Config+0x158>)
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	f003 0303 	and.w	r3, r3, #3
 800459c:	6802      	ldr	r2, [r0, #0]
 800459e:	4293      	cmp	r3, r2
 80045a0:	d002      	beq.n	80045a8 <RCCEx_PLLSAI1_Config+0x24>
      status = HAL_ERROR;
 80045a2:	2501      	movs	r5, #1
}
 80045a4:	4628      	mov	r0, r5
 80045a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 80045a8:	2a00      	cmp	r2, #0
 80045aa:	f000 8095 	beq.w	80046d8 <RCCEx_PLLSAI1_Config+0x154>
  HAL_StatusTypeDef status = HAL_OK;
 80045ae:	2500      	movs	r5, #0
 80045b0:	e009      	b.n	80045c6 <RCCEx_PLLSAI1_Config+0x42>
    switch(PllSai1->PLLSAI1Source)
 80045b2:	6803      	ldr	r3, [r0, #0]
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d054      	beq.n	8004662 <RCCEx_PLLSAI1_Config+0xde>
 80045b8:	2b03      	cmp	r3, #3
 80045ba:	d059      	beq.n	8004670 <RCCEx_PLLSAI1_Config+0xec>
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d043      	beq.n	8004648 <RCCEx_PLLSAI1_Config+0xc4>
 80045c0:	2501      	movs	r5, #1
  if(status == HAL_OK)
 80045c2:	2d00      	cmp	r5, #0
 80045c4:	d1ee      	bne.n	80045a4 <RCCEx_PLLSAI1_Config+0x20>
    __HAL_RCC_PLLSAI1_DISABLE();
 80045c6:	4a45      	ldr	r2, [pc, #276]	; (80046dc <RCCEx_PLLSAI1_Config+0x158>)
 80045c8:	6813      	ldr	r3, [r2, #0]
 80045ca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80045ce:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80045d0:	f7fd fa2c 	bl	8001a2c <HAL_GetTick>
 80045d4:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80045d6:	4b41      	ldr	r3, [pc, #260]	; (80046dc <RCCEx_PLLSAI1_Config+0x158>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80045de:	d005      	beq.n	80045ec <RCCEx_PLLSAI1_Config+0x68>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045e0:	f7fd fa24 	bl	8001a2c <HAL_GetTick>
 80045e4:	1b83      	subs	r3, r0, r6
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d9f5      	bls.n	80045d6 <RCCEx_PLLSAI1_Config+0x52>
        status = HAL_TIMEOUT;
 80045ea:	2503      	movs	r5, #3
    if(status == HAL_OK)
 80045ec:	2d00      	cmp	r5, #0
 80045ee:	d1d9      	bne.n	80045a4 <RCCEx_PLLSAI1_Config+0x20>
      if(Divider == DIVIDER_P_UPDATE)
 80045f0:	2f00      	cmp	r7, #0
 80045f2:	d14b      	bne.n	800468c <RCCEx_PLLSAI1_Config+0x108>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045f4:	4839      	ldr	r0, [pc, #228]	; (80046dc <RCCEx_PLLSAI1_Config+0x158>)
 80045f6:	6903      	ldr	r3, [r0, #16]
 80045f8:	4a39      	ldr	r2, [pc, #228]	; (80046e0 <RCCEx_PLLSAI1_Config+0x15c>)
 80045fa:	401a      	ands	r2, r3
 80045fc:	68a1      	ldr	r1, [r4, #8]
 80045fe:	68e3      	ldr	r3, [r4, #12]
 8004600:	06db      	lsls	r3, r3, #27
 8004602:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004606:	6861      	ldr	r1, [r4, #4]
 8004608:	3901      	subs	r1, #1
 800460a:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 800460e:	431a      	orrs	r2, r3
 8004610:	6102      	str	r2, [r0, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 8004612:	4a32      	ldr	r2, [pc, #200]	; (80046dc <RCCEx_PLLSAI1_Config+0x158>)
 8004614:	6813      	ldr	r3, [r2, #0]
 8004616:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800461a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800461c:	f7fd fa06 	bl	8001a2c <HAL_GetTick>
 8004620:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004622:	4b2e      	ldr	r3, [pc, #184]	; (80046dc <RCCEx_PLLSAI1_Config+0x158>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800462a:	d105      	bne.n	8004638 <RCCEx_PLLSAI1_Config+0xb4>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800462c:	f7fd f9fe 	bl	8001a2c <HAL_GetTick>
 8004630:	1b83      	subs	r3, r0, r6
 8004632:	2b02      	cmp	r3, #2
 8004634:	d9f5      	bls.n	8004622 <RCCEx_PLLSAI1_Config+0x9e>
          status = HAL_TIMEOUT;
 8004636:	2503      	movs	r5, #3
      if(status == HAL_OK)
 8004638:	2d00      	cmp	r5, #0
 800463a:	d1b3      	bne.n	80045a4 <RCCEx_PLLSAI1_Config+0x20>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800463c:	4a27      	ldr	r2, [pc, #156]	; (80046dc <RCCEx_PLLSAI1_Config+0x158>)
 800463e:	6913      	ldr	r3, [r2, #16]
 8004640:	69a1      	ldr	r1, [r4, #24]
 8004642:	430b      	orrs	r3, r1
 8004644:	6113      	str	r3, [r2, #16]
 8004646:	e7ad      	b.n	80045a4 <RCCEx_PLLSAI1_Config+0x20>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004648:	4a24      	ldr	r2, [pc, #144]	; (80046dc <RCCEx_PLLSAI1_Config+0x158>)
 800464a:	6812      	ldr	r2, [r2, #0]
 800464c:	f012 0f02 	tst.w	r2, #2
 8004650:	d01a      	beq.n	8004688 <RCCEx_PLLSAI1_Config+0x104>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004652:	4922      	ldr	r1, [pc, #136]	; (80046dc <RCCEx_PLLSAI1_Config+0x158>)
 8004654:	68ca      	ldr	r2, [r1, #12]
 8004656:	f022 0203 	bic.w	r2, r2, #3
 800465a:	4313      	orrs	r3, r2
 800465c:	60cb      	str	r3, [r1, #12]
 800465e:	2500      	movs	r5, #0
 8004660:	e7af      	b.n	80045c2 <RCCEx_PLLSAI1_Config+0x3e>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004662:	4a1e      	ldr	r2, [pc, #120]	; (80046dc <RCCEx_PLLSAI1_Config+0x158>)
 8004664:	6812      	ldr	r2, [r2, #0]
 8004666:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800466a:	d1f2      	bne.n	8004652 <RCCEx_PLLSAI1_Config+0xce>
        status = HAL_ERROR;
 800466c:	2501      	movs	r5, #1
 800466e:	e7a8      	b.n	80045c2 <RCCEx_PLLSAI1_Config+0x3e>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004670:	4a1a      	ldr	r2, [pc, #104]	; (80046dc <RCCEx_PLLSAI1_Config+0x158>)
 8004672:	6812      	ldr	r2, [r2, #0]
 8004674:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8004678:	d1eb      	bne.n	8004652 <RCCEx_PLLSAI1_Config+0xce>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800467a:	4a18      	ldr	r2, [pc, #96]	; (80046dc <RCCEx_PLLSAI1_Config+0x158>)
 800467c:	6812      	ldr	r2, [r2, #0]
 800467e:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8004682:	d1e6      	bne.n	8004652 <RCCEx_PLLSAI1_Config+0xce>
          status = HAL_ERROR;
 8004684:	2501      	movs	r5, #1
 8004686:	e79c      	b.n	80045c2 <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_ERROR;
 8004688:	2501      	movs	r5, #1
 800468a:	e79a      	b.n	80045c2 <RCCEx_PLLSAI1_Config+0x3e>
      else if(Divider == DIVIDER_Q_UPDATE)
 800468c:	2f01      	cmp	r7, #1
 800468e:	d011      	beq.n	80046b4 <RCCEx_PLLSAI1_Config+0x130>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004690:	4812      	ldr	r0, [pc, #72]	; (80046dc <RCCEx_PLLSAI1_Config+0x158>)
 8004692:	6903      	ldr	r3, [r0, #16]
 8004694:	4a13      	ldr	r2, [pc, #76]	; (80046e4 <RCCEx_PLLSAI1_Config+0x160>)
 8004696:	401a      	ands	r2, r3
 8004698:	68a1      	ldr	r1, [r4, #8]
 800469a:	6963      	ldr	r3, [r4, #20]
 800469c:	085b      	lsrs	r3, r3, #1
 800469e:	3b01      	subs	r3, #1
 80046a0:	065b      	lsls	r3, r3, #25
 80046a2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80046a6:	6861      	ldr	r1, [r4, #4]
 80046a8:	3901      	subs	r1, #1
 80046aa:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 80046ae:	431a      	orrs	r2, r3
 80046b0:	6102      	str	r2, [r0, #16]
 80046b2:	e7ae      	b.n	8004612 <RCCEx_PLLSAI1_Config+0x8e>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80046b4:	4809      	ldr	r0, [pc, #36]	; (80046dc <RCCEx_PLLSAI1_Config+0x158>)
 80046b6:	6903      	ldr	r3, [r0, #16]
 80046b8:	4a0b      	ldr	r2, [pc, #44]	; (80046e8 <RCCEx_PLLSAI1_Config+0x164>)
 80046ba:	401a      	ands	r2, r3
 80046bc:	68a1      	ldr	r1, [r4, #8]
 80046be:	6923      	ldr	r3, [r4, #16]
 80046c0:	085b      	lsrs	r3, r3, #1
 80046c2:	3b01      	subs	r3, #1
 80046c4:	055b      	lsls	r3, r3, #21
 80046c6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80046ca:	6861      	ldr	r1, [r4, #4]
 80046cc:	3901      	subs	r1, #1
 80046ce:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 80046d2:	431a      	orrs	r2, r3
 80046d4:	6102      	str	r2, [r0, #16]
 80046d6:	e79c      	b.n	8004612 <RCCEx_PLLSAI1_Config+0x8e>
      status = HAL_ERROR;
 80046d8:	2501      	movs	r5, #1
 80046da:	e763      	b.n	80045a4 <RCCEx_PLLSAI1_Config+0x20>
 80046dc:	40021000 	.word	0x40021000
 80046e0:	07ff800f 	.word	0x07ff800f
 80046e4:	f9ff800f 	.word	0xf9ff800f
 80046e8:	ff9f800f 	.word	0xff9f800f

080046ec <HAL_RCCEx_PeriphCLKConfig>:
{
 80046ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046f0:	b082      	sub	sp, #8
 80046f2:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80046f4:	6803      	ldr	r3, [r0, #0]
 80046f6:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80046fa:	d034      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    switch(PeriphClkInit->Sai1ClockSelection)
 80046fc:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80046fe:	2b40      	cmp	r3, #64	; 0x40
 8004700:	d01f      	beq.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004702:	d80b      	bhi.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x30>
 8004704:	b323      	cbz	r3, 8004750 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004706:	2b20      	cmp	r3, #32
 8004708:	d105      	bne.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800470a:	2100      	movs	r1, #0
 800470c:	3020      	adds	r0, #32
 800470e:	f7ff fe85 	bl	800441c <RCCEx_PLLSAI2_Config>
 8004712:	4606      	mov	r6, r0
      break;
 8004714:	e021      	b.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch(PeriphClkInit->Sai1ClockSelection)
 8004716:	2701      	movs	r7, #1
 8004718:	463e      	mov	r6, r7
 800471a:	e026      	b.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x7e>
 800471c:	2b60      	cmp	r3, #96	; 0x60
 800471e:	d020      	beq.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004720:	2b80      	cmp	r3, #128	; 0x80
 8004722:	d10b      	bne.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004724:	2600      	movs	r6, #0
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004726:	4a63      	ldr	r2, [pc, #396]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004728:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 800472c:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8004730:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8004732:	430b      	orrs	r3, r1
 8004734:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004738:	2700      	movs	r7, #0
 800473a:	e016      	b.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    switch(PeriphClkInit->Sai1ClockSelection)
 800473c:	2701      	movs	r7, #1
 800473e:	463e      	mov	r6, r7
 8004740:	e013      	b.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004742:	4a5c      	ldr	r2, [pc, #368]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004744:	68d3      	ldr	r3, [r2, #12]
 8004746:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800474a:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800474c:	2600      	movs	r6, #0
 800474e:	e7ea      	b.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x3a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004750:	2100      	movs	r1, #0
 8004752:	3004      	adds	r0, #4
 8004754:	f7ff ff16 	bl	8004584 <RCCEx_PLLSAI1_Config>
 8004758:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 800475a:	2e00      	cmp	r6, #0
 800475c:	d0e3      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x3a>
 800475e:	4637      	mov	r7, r6
 8004760:	e003      	b.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    switch(PeriphClkInit->Sai1ClockSelection)
 8004762:	2600      	movs	r6, #0
 8004764:	e7df      	b.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x3a>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004766:	2700      	movs	r7, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004768:	463e      	mov	r6, r7
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800476a:	6823      	ldr	r3, [r4, #0]
 800476c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8004770:	d033      	beq.n	80047da <HAL_RCCEx_PeriphCLKConfig+0xee>
    switch(PeriphClkInit->Sai2ClockSelection)
 8004772:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8004774:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004778:	d022      	beq.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800477a:	d80d      	bhi.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0xac>
 800477c:	b333      	cbz	r3, 80047cc <HAL_RCCEx_PeriphCLKConfig+0xe0>
 800477e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004782:	d106      	bne.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0xa6>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004784:	2100      	movs	r1, #0
 8004786:	f104 0020 	add.w	r0, r4, #32
 800478a:	f7ff fe47 	bl	800441c <RCCEx_PLLSAI2_Config>
 800478e:	4606      	mov	r6, r0
      break;
 8004790:	e008      	b.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    switch(PeriphClkInit->Sai2ClockSelection)
 8004792:	2701      	movs	r7, #1
 8004794:	463e      	mov	r6, r7
 8004796:	e020      	b.n	80047da <HAL_RCCEx_PeriphCLKConfig+0xee>
 8004798:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800479c:	d002      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
 800479e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047a2:	d10a      	bne.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0xce>
    if(ret == HAL_OK)
 80047a4:	b9c6      	cbnz	r6, 80047d8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80047a6:	4a43      	ldr	r2, [pc, #268]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80047a8:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 80047ac:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80047b0:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80047b2:	430b      	orrs	r3, r1
 80047b4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80047b8:	e00f      	b.n	80047da <HAL_RCCEx_PeriphCLKConfig+0xee>
    switch(PeriphClkInit->Sai2ClockSelection)
 80047ba:	2701      	movs	r7, #1
 80047bc:	463e      	mov	r6, r7
 80047be:	e00c      	b.n	80047da <HAL_RCCEx_PeriphCLKConfig+0xee>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80047c0:	4a3c      	ldr	r2, [pc, #240]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80047c2:	68d3      	ldr	r3, [r2, #12]
 80047c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047c8:	60d3      	str	r3, [r2, #12]
      break;
 80047ca:	e7eb      	b.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80047cc:	2100      	movs	r1, #0
 80047ce:	1d20      	adds	r0, r4, #4
 80047d0:	f7ff fed8 	bl	8004584 <RCCEx_PLLSAI1_Config>
 80047d4:	4606      	mov	r6, r0
      break;
 80047d6:	e7e5      	b.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
 80047d8:	4637      	mov	r7, r6
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80047da:	6823      	ldr	r3, [r4, #0]
 80047dc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80047e0:	d071      	beq.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x1da>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80047e2:	4b34      	ldr	r3, [pc, #208]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80047e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047e6:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80047ea:	d14e      	bne.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x19e>
      __HAL_RCC_PWR_CLK_ENABLE();
 80047ec:	4b31      	ldr	r3, [pc, #196]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80047ee:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80047f0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80047f4:	659a      	str	r2, [r3, #88]	; 0x58
 80047f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047fc:	9301      	str	r3, [sp, #4]
 80047fe:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004800:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004804:	4a2c      	ldr	r2, [pc, #176]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004806:	6813      	ldr	r3, [r2, #0]
 8004808:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800480c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800480e:	f7fd f90d 	bl	8001a2c <HAL_GetTick>
 8004812:	4605      	mov	r5, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004814:	4b28      	ldr	r3, [pc, #160]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f413 7f80 	tst.w	r3, #256	; 0x100
 800481c:	d105      	bne.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800481e:	f7fd f905 	bl	8001a2c <HAL_GetTick>
 8004822:	1b40      	subs	r0, r0, r5
 8004824:	2802      	cmp	r0, #2
 8004826:	d9f5      	bls.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x128>
        ret = HAL_TIMEOUT;
 8004828:	2603      	movs	r6, #3
    if(ret == HAL_OK)
 800482a:	2e00      	cmp	r6, #0
 800482c:	d146      	bne.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800482e:	4b21      	ldr	r3, [pc, #132]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004834:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8004838:	d016      	beq.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800483a:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800483e:	429a      	cmp	r2, r3
 8004840:	d012      	beq.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x17c>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004842:	4a1c      	ldr	r2, [pc, #112]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004844:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004848:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800484c:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8004850:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8004854:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004858:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 800485c:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8004860:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8004864:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004868:	f013 0f01 	tst.w	r3, #1
 800486c:	d110      	bne.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      if(ret == HAL_OK)
 800486e:	2e00      	cmp	r6, #0
 8004870:	f040 8159 	bne.w	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x43a>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004874:	4a0f      	ldr	r2, [pc, #60]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004876:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800487a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800487e:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8004882:	430b      	orrs	r3, r1
 8004884:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004888:	e019      	b.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    FlagStatus       pwrclkchanged = RESET;
 800488a:	f04f 0800 	mov.w	r8, #0
 800488e:	e7b9      	b.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x118>
        tickstart = HAL_GetTick();
 8004890:	f7fd f8cc 	bl	8001a2c <HAL_GetTick>
 8004894:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004896:	4b07      	ldr	r3, [pc, #28]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004898:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800489c:	f013 0f02 	tst.w	r3, #2
 80048a0:	d1e5      	bne.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x182>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048a2:	f7fd f8c3 	bl	8001a2c <HAL_GetTick>
 80048a6:	1b40      	subs	r0, r0, r5
 80048a8:	f241 3388 	movw	r3, #5000	; 0x1388
 80048ac:	4298      	cmp	r0, r3
 80048ae:	d9f2      	bls.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
            ret = HAL_TIMEOUT;
 80048b0:	2603      	movs	r6, #3
 80048b2:	e7dc      	b.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x182>
 80048b4:	40021000 	.word	0x40021000
 80048b8:	40007000 	.word	0x40007000
      status = ret;
 80048bc:	4637      	mov	r7, r6
    if(pwrclkchanged == SET)
 80048be:	f1b8 0f00 	cmp.w	r8, #0
 80048c2:	f040 8132 	bne.w	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x43e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80048c6:	6823      	ldr	r3, [r4, #0]
 80048c8:	f013 0f01 	tst.w	r3, #1
 80048cc:	d008      	beq.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80048ce:	4ab6      	ldr	r2, [pc, #728]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80048d0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80048d4:	f023 0303 	bic.w	r3, r3, #3
 80048d8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80048da:	430b      	orrs	r3, r1
 80048dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80048e0:	6823      	ldr	r3, [r4, #0]
 80048e2:	f013 0f02 	tst.w	r3, #2
 80048e6:	d008      	beq.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x20e>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80048e8:	4aaf      	ldr	r2, [pc, #700]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80048ea:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80048ee:	f023 030c 	bic.w	r3, r3, #12
 80048f2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80048f4:	430b      	orrs	r3, r1
 80048f6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80048fa:	6823      	ldr	r3, [r4, #0]
 80048fc:	f013 0f04 	tst.w	r3, #4
 8004900:	d008      	beq.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x228>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004902:	4aa9      	ldr	r2, [pc, #676]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8004904:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004908:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800490c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800490e:	430b      	orrs	r3, r1
 8004910:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004914:	6823      	ldr	r3, [r4, #0]
 8004916:	f013 0f08 	tst.w	r3, #8
 800491a:	d008      	beq.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x242>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800491c:	4aa2      	ldr	r2, [pc, #648]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800491e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004922:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004926:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004928:	430b      	orrs	r3, r1
 800492a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800492e:	6823      	ldr	r3, [r4, #0]
 8004930:	f013 0f10 	tst.w	r3, #16
 8004934:	d008      	beq.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x25c>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004936:	4a9c      	ldr	r2, [pc, #624]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8004938:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800493c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004940:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8004942:	430b      	orrs	r3, r1
 8004944:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004948:	6823      	ldr	r3, [r4, #0]
 800494a:	f013 0f20 	tst.w	r3, #32
 800494e:	d008      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x276>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004950:	4a95      	ldr	r2, [pc, #596]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8004952:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004956:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800495a:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800495c:	430b      	orrs	r3, r1
 800495e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004962:	6823      	ldr	r3, [r4, #0]
 8004964:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004968:	d008      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x290>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800496a:	4a8f      	ldr	r2, [pc, #572]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800496c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004970:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8004974:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8004976:	430b      	orrs	r3, r1
 8004978:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800497c:	6823      	ldr	r3, [r4, #0]
 800497e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004982:	d008      	beq.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004984:	4a88      	ldr	r2, [pc, #544]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8004986:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800498a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800498e:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8004990:	430b      	orrs	r3, r1
 8004992:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004996:	6823      	ldr	r3, [r4, #0]
 8004998:	f013 0f40 	tst.w	r3, #64	; 0x40
 800499c:	d008      	beq.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800499e:	4a82      	ldr	r2, [pc, #520]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80049a0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80049a4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80049a8:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80049aa:	430b      	orrs	r3, r1
 80049ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80049b0:	6823      	ldr	r3, [r4, #0]
 80049b2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80049b6:	d008      	beq.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x2de>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80049b8:	4a7b      	ldr	r2, [pc, #492]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80049ba:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80049be:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80049c2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80049c4:	430b      	orrs	r3, r1
 80049c6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80049ca:	6823      	ldr	r3, [r4, #0]
 80049cc:	f413 7f80 	tst.w	r3, #256	; 0x100
 80049d0:	d008      	beq.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80049d2:	4a75      	ldr	r2, [pc, #468]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80049d4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80049d8:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80049dc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80049de:	430b      	orrs	r3, r1
 80049e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80049e4:	6823      	ldr	r3, [r4, #0]
 80049e6:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80049ea:	d008      	beq.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x312>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80049ec:	4a6e      	ldr	r2, [pc, #440]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80049ee:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 80049f2:	f023 0303 	bic.w	r3, r3, #3
 80049f6:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80049f8:	430b      	orrs	r3, r1
 80049fa:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80049fe:	6823      	ldr	r3, [r4, #0]
 8004a00:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8004a04:	d011      	beq.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x33e>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a06:	4a68      	ldr	r2, [pc, #416]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8004a08:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004a0c:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8004a10:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8004a12:	430b      	orrs	r3, r1
 8004a14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004a18:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8004a1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a1e:	f000 808a 	beq.w	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004a22:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a26:	f000 808b 	beq.w	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x454>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004a2a:	6823      	ldr	r3, [r4, #0]
 8004a2c:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8004a30:	d01f      	beq.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x386>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004a32:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8004a34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a38:	f000 808b 	beq.w	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8004a3c:	4a5a      	ldr	r2, [pc, #360]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8004a3e:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8004a42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a46:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004a4a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004a4e:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8004a52:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8004a54:	430b      	orrs	r3, r1
 8004a56:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004a5a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8004a5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a60:	d07f      	beq.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x476>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004a62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a66:	f000 8082 	beq.w	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x482>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004a6a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a6e:	f000 8084 	beq.w	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x48e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004a72:	6823      	ldr	r3, [r4, #0]
 8004a74:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8004a78:	d00f      	beq.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a7a:	4a4b      	ldr	r2, [pc, #300]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8004a7c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004a80:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8004a84:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8004a86:	430b      	orrs	r3, r1
 8004a88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004a8c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8004a8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a92:	d07b      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004a94:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a98:	d07d      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a9a:	6823      	ldr	r3, [r4, #0]
 8004a9c:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8004aa0:	d00e      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004aa2:	4a41      	ldr	r2, [pc, #260]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8004aa4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004aa8:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8004aac:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8004ab0:	430b      	orrs	r3, r1
 8004ab2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004ab6:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8004aba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004abe:	d075      	beq.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x4c0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004ac0:	6823      	ldr	r3, [r4, #0]
 8004ac2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004ac6:	d009      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x3f0>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004ac8:	4a37      	ldr	r2, [pc, #220]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8004aca:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8004ace:	f023 0304 	bic.w	r3, r3, #4
 8004ad2:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8004ad6:	430b      	orrs	r3, r1
 8004ad8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004adc:	6823      	ldr	r3, [r4, #0]
 8004ade:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8004ae2:	d009      	beq.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x40c>
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004ae4:	4a30      	ldr	r2, [pc, #192]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8004ae6:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8004aea:	f023 0318 	bic.w	r3, r3, #24
 8004aee:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8004af2:	430b      	orrs	r3, r1
 8004af4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004af8:	6823      	ldr	r3, [r4, #0]
 8004afa:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8004afe:	d00e      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x432>
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004b00:	4a29      	ldr	r2, [pc, #164]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8004b02:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8004b06:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004b0a:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8004b0e:	430b      	orrs	r3, r1
 8004b10:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004b14:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8004b18:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b1c:	d04e      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x4d0>
}
 8004b1e:	4638      	mov	r0, r7
 8004b20:	b002      	add	sp, #8
 8004b22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = ret;
 8004b26:	4637      	mov	r7, r6
 8004b28:	e6c9      	b.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x1d2>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b2a:	4a1f      	ldr	r2, [pc, #124]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8004b2c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004b2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b32:	6593      	str	r3, [r2, #88]	; 0x58
 8004b34:	e6c7      	b.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x1da>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b36:	68d3      	ldr	r3, [r2, #12]
 8004b38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b3c:	60d3      	str	r3, [r2, #12]
 8004b3e:	e774      	b.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x33e>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b40:	2101      	movs	r1, #1
 8004b42:	1d20      	adds	r0, r4, #4
 8004b44:	f7ff fd1e 	bl	8004584 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8004b48:	2800      	cmp	r0, #0
 8004b4a:	f43f af6e 	beq.w	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x33e>
          status = ret;
 8004b4e:	4607      	mov	r7, r0
 8004b50:	e76b      	b.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x33e>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004b52:	4a15      	ldr	r2, [pc, #84]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8004b54:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8004b58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b5c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004b60:	e77b      	b.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x36e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b62:	4a11      	ldr	r2, [pc, #68]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8004b64:	68d3      	ldr	r3, [r2, #12]
 8004b66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b6a:	60d3      	str	r3, [r2, #12]
 8004b6c:	e781      	b.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x386>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004b6e:	4a0e      	ldr	r2, [pc, #56]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8004b70:	68d3      	ldr	r3, [r2, #12]
 8004b72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b76:	60d3      	str	r3, [r2, #12]
 8004b78:	e77b      	b.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x386>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b7a:	2101      	movs	r1, #1
 8004b7c:	1d20      	adds	r0, r4, #4
 8004b7e:	f7ff fd01 	bl	8004584 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8004b82:	2800      	cmp	r0, #0
 8004b84:	f43f af75 	beq.w	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x386>
        status = ret;
 8004b88:	4607      	mov	r7, r0
 8004b8a:	e772      	b.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x386>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b8c:	68d3      	ldr	r3, [r2, #12]
 8004b8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b92:	60d3      	str	r3, [r2, #12]
 8004b94:	e781      	b.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b96:	2101      	movs	r1, #1
 8004b98:	1d20      	adds	r0, r4, #4
 8004b9a:	f7ff fcf3 	bl	8004584 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8004b9e:	2800      	cmp	r0, #0
 8004ba0:	f43f af7b 	beq.w	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
        status = ret;
 8004ba4:	4607      	mov	r7, r0
 8004ba6:	e778      	b.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8004ba8:	40021000 	.word	0x40021000
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004bac:	2102      	movs	r1, #2
 8004bae:	1d20      	adds	r0, r4, #4
 8004bb0:	f7ff fce8 	bl	8004584 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8004bb4:	2800      	cmp	r0, #0
 8004bb6:	d083      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
        status = ret;
 8004bb8:	4607      	mov	r7, r0
 8004bba:	e781      	b.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bbc:	68d3      	ldr	r3, [r2, #12]
 8004bbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bc2:	60d3      	str	r3, [r2, #12]
 8004bc4:	e7ab      	b.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x432>
 8004bc6:	bf00      	nop

08004bc8 <HAL_SPI_Init>:
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004bc8:	2800      	cmp	r0, #0
 8004bca:	d06a      	beq.n	8004ca2 <HAL_SPI_Init+0xda>
{
 8004bcc:	b510      	push	{r4, lr}
 8004bce:	4604      	mov	r4, r0
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004bd0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004bd2:	b933      	cbnz	r3, 8004be2 <HAL_SPI_Init+0x1a>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004bd4:	6843      	ldr	r3, [r0, #4]
 8004bd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bda:	d005      	beq.n	8004be8 <HAL_SPI_Init+0x20>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	61c3      	str	r3, [r0, #28]
 8004be0:	e002      	b.n	8004be8 <HAL_SPI_Init+0x20>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004be2:	2300      	movs	r3, #0
 8004be4:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004be6:	6143      	str	r3, [r0, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004be8:	2300      	movs	r3, #0
 8004bea:	62a3      	str	r3, [r4, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004bec:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d04d      	beq.n	8004c90 <HAL_SPI_Init+0xc8>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004bf4:	2302      	movs	r3, #2
 8004bf6:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004bfa:	6822      	ldr	r2, [r4, #0]
 8004bfc:	6813      	ldr	r3, [r2, #0]
 8004bfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c02:	6013      	str	r3, [r2, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c04:	68e3      	ldr	r3, [r4, #12]
 8004c06:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c0a:	d947      	bls.n	8004c9c <HAL_SPI_Init+0xd4>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004c0c:	2200      	movs	r2, #0
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004c0e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004c12:	d004      	beq.n	8004c1e <HAL_SPI_Init+0x56>
 8004c14:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c18:	d001      	beq.n	8004c1e <HAL_SPI_Init+0x56>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	62a3      	str	r3, [r4, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c1e:	6863      	ldr	r3, [r4, #4]
 8004c20:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8004c24:	68a1      	ldr	r1, [r4, #8]
 8004c26:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 8004c2a:	430b      	orrs	r3, r1
 8004c2c:	6921      	ldr	r1, [r4, #16]
 8004c2e:	f001 0102 	and.w	r1, r1, #2
 8004c32:	430b      	orrs	r3, r1
 8004c34:	6961      	ldr	r1, [r4, #20]
 8004c36:	f001 0101 	and.w	r1, r1, #1
 8004c3a:	430b      	orrs	r3, r1
 8004c3c:	69a1      	ldr	r1, [r4, #24]
 8004c3e:	f401 7100 	and.w	r1, r1, #512	; 0x200
 8004c42:	430b      	orrs	r3, r1
 8004c44:	69e1      	ldr	r1, [r4, #28]
 8004c46:	f001 0138 	and.w	r1, r1, #56	; 0x38
 8004c4a:	430b      	orrs	r3, r1
 8004c4c:	6a21      	ldr	r1, [r4, #32]
 8004c4e:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8004c52:	430b      	orrs	r3, r1
 8004c54:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004c56:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 8004c5a:	6820      	ldr	r0, [r4, #0]
 8004c5c:	430b      	orrs	r3, r1
 8004c5e:	6003      	str	r3, [r0, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004c60:	8b63      	ldrh	r3, [r4, #26]
 8004c62:	f003 0304 	and.w	r3, r3, #4
 8004c66:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004c68:	f001 0110 	and.w	r1, r1, #16
 8004c6c:	430b      	orrs	r3, r1
 8004c6e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c70:	f001 0108 	and.w	r1, r1, #8
 8004c74:	430b      	orrs	r3, r1
 8004c76:	68e1      	ldr	r1, [r4, #12]
 8004c78:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 8004c7c:	430b      	orrs	r3, r1
 8004c7e:	6821      	ldr	r1, [r4, #0]
 8004c80:	431a      	orrs	r2, r3
 8004c82:	604a      	str	r2, [r1, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c84:	2000      	movs	r0, #0
 8004c86:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
}
 8004c8e:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8004c90:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8004c94:	4620      	mov	r0, r4
 8004c96:	f7fb ffe7 	bl	8000c68 <HAL_SPI_MspInit>
 8004c9a:	e7ab      	b.n	8004bf4 <HAL_SPI_Init+0x2c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004c9c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004ca0:	e7b5      	b.n	8004c0e <HAL_SPI_Init+0x46>
    return HAL_ERROR;
 8004ca2:	2001      	movs	r0, #1
}
 8004ca4:	4770      	bx	lr

08004ca6 <HAL_SPI_ErrorCallback>:
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004ca6:	4770      	bx	lr

08004ca8 <HAL_SPI_IRQHandler>:
{
 8004ca8:	b510      	push	{r4, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 8004cae:	6802      	ldr	r2, [r0, #0]
 8004cb0:	6851      	ldr	r1, [r2, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8004cb2:	6893      	ldr	r3, [r2, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004cb4:	f003 0041 	and.w	r0, r3, #65	; 0x41
 8004cb8:	2801      	cmp	r0, #1
 8004cba:	d067      	beq.n	8004d8c <HAL_SPI_IRQHandler+0xe4>
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004cbc:	f013 0f02 	tst.w	r3, #2
 8004cc0:	d002      	beq.n	8004cc8 <HAL_SPI_IRQHandler+0x20>
 8004cc2:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004cc6:	d168      	bne.n	8004d9a <HAL_SPI_IRQHandler+0xf2>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004cc8:	f413 7fb0 	tst.w	r3, #352	; 0x160
 8004ccc:	d068      	beq.n	8004da0 <HAL_SPI_IRQHandler+0xf8>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004cce:	f011 0f20 	tst.w	r1, #32
 8004cd2:	d065      	beq.n	8004da0 <HAL_SPI_IRQHandler+0xf8>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004cd4:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004cd8:	d00f      	beq.n	8004cfa <HAL_SPI_IRQHandler+0x52>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004cda:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8004cde:	b2c0      	uxtb	r0, r0
 8004ce0:	2803      	cmp	r0, #3
 8004ce2:	d05f      	beq.n	8004da4 <HAL_SPI_IRQHandler+0xfc>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004ce4:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8004ce6:	f040 0004 	orr.w	r0, r0, #4
 8004cea:	6620      	str	r0, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004cec:	2000      	movs	r0, #0
 8004cee:	9000      	str	r0, [sp, #0]
 8004cf0:	68d0      	ldr	r0, [r2, #12]
 8004cf2:	9000      	str	r0, [sp, #0]
 8004cf4:	6890      	ldr	r0, [r2, #8]
 8004cf6:	9000      	str	r0, [sp, #0]
 8004cf8:	9800      	ldr	r0, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004cfa:	f013 0f20 	tst.w	r3, #32
 8004cfe:	d00c      	beq.n	8004d1a <HAL_SPI_IRQHandler+0x72>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004d00:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8004d02:	f040 0001 	orr.w	r0, r0, #1
 8004d06:	6620      	str	r0, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004d08:	2000      	movs	r0, #0
 8004d0a:	9002      	str	r0, [sp, #8]
 8004d0c:	6890      	ldr	r0, [r2, #8]
 8004d0e:	9002      	str	r0, [sp, #8]
 8004d10:	6810      	ldr	r0, [r2, #0]
 8004d12:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8004d16:	6010      	str	r0, [r2, #0]
 8004d18:	9a02      	ldr	r2, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004d1a:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004d1e:	d009      	beq.n	8004d34 <HAL_SPI_IRQHandler+0x8c>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004d20:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004d22:	f043 0308 	orr.w	r3, r3, #8
 8004d26:	6623      	str	r3, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004d28:	2300      	movs	r3, #0
 8004d2a:	9303      	str	r3, [sp, #12]
 8004d2c:	6823      	ldr	r3, [r4, #0]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	9303      	str	r3, [sp, #12]
 8004d32:	9b03      	ldr	r3, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d34:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d032      	beq.n	8004da0 <HAL_SPI_IRQHandler+0xf8>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004d3a:	6822      	ldr	r2, [r4, #0]
 8004d3c:	6853      	ldr	r3, [r2, #4]
 8004d3e:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8004d42:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8004d44:	2301      	movs	r3, #1
 8004d46:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004d4a:	f011 0f03 	tst.w	r1, #3
 8004d4e:	d031      	beq.n	8004db4 <HAL_SPI_IRQHandler+0x10c>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004d50:	6822      	ldr	r2, [r4, #0]
 8004d52:	6853      	ldr	r3, [r2, #4]
 8004d54:	f023 0303 	bic.w	r3, r3, #3
 8004d58:	6053      	str	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 8004d5a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004d5c:	b14b      	cbz	r3, 8004d72 <HAL_SPI_IRQHandler+0xca>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004d5e:	4a17      	ldr	r2, [pc, #92]	; (8004dbc <HAL_SPI_IRQHandler+0x114>)
 8004d60:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004d62:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d64:	f7fd f834 	bl	8001dd0 <HAL_DMA_Abort_IT>
 8004d68:	b118      	cbz	r0, 8004d72 <HAL_SPI_IRQHandler+0xca>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004d6a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004d6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d70:	6623      	str	r3, [r4, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8004d72:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004d74:	b1a3      	cbz	r3, 8004da0 <HAL_SPI_IRQHandler+0xf8>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004d76:	4a11      	ldr	r2, [pc, #68]	; (8004dbc <HAL_SPI_IRQHandler+0x114>)
 8004d78:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004d7a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004d7c:	f7fd f828 	bl	8001dd0 <HAL_DMA_Abort_IT>
 8004d80:	b170      	cbz	r0, 8004da0 <HAL_SPI_IRQHandler+0xf8>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004d82:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004d84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d88:	6623      	str	r3, [r4, #96]	; 0x60
 8004d8a:	e009      	b.n	8004da0 <HAL_SPI_IRQHandler+0xf8>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004d8c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8004d90:	d094      	beq.n	8004cbc <HAL_SPI_IRQHandler+0x14>
    hspi->RxISR(hspi);
 8004d92:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004d94:	4620      	mov	r0, r4
 8004d96:	4798      	blx	r3
    return;
 8004d98:	e002      	b.n	8004da0 <HAL_SPI_IRQHandler+0xf8>
    hspi->TxISR(hspi);
 8004d9a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004d9c:	4620      	mov	r0, r4
 8004d9e:	4798      	blx	r3
}
 8004da0:	b004      	add	sp, #16
 8004da2:	bd10      	pop	{r4, pc}
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004da4:	2300      	movs	r3, #0
 8004da6:	9301      	str	r3, [sp, #4]
 8004da8:	68d3      	ldr	r3, [r2, #12]
 8004daa:	9301      	str	r3, [sp, #4]
 8004dac:	6893      	ldr	r3, [r2, #8]
 8004dae:	9301      	str	r3, [sp, #4]
 8004db0:	9b01      	ldr	r3, [sp, #4]
        return;
 8004db2:	e7f5      	b.n	8004da0 <HAL_SPI_IRQHandler+0xf8>
        HAL_SPI_ErrorCallback(hspi);
 8004db4:	4620      	mov	r0, r4
 8004db6:	f7ff ff76 	bl	8004ca6 <HAL_SPI_ErrorCallback>
    return;
 8004dba:	e7f1      	b.n	8004da0 <HAL_SPI_IRQHandler+0xf8>
 8004dbc:	08004dc1 	.word	0x08004dc1

08004dc0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004dc0:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004dc2:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hspi->RxXferCount = 0U;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8004dca:	87c3      	strh	r3, [r0, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004dcc:	f7ff ff6b 	bl	8004ca6 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004dd0:	bd08      	pop	{r3, pc}

08004dd2 <UART_EndTxTransfer>:
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
#if defined(USART_CR1_FIFOEN)
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8004dd2:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd4:	e852 3f00 	ldrex	r3, [r2]
 8004dd8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ddc:	e842 3100 	strex	r1, r3, [r2]
 8004de0:	2900      	cmp	r1, #0
 8004de2:	d1f6      	bne.n	8004dd2 <UART_EndTxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8004de4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de6:	f102 0308 	add.w	r3, r2, #8
 8004dea:	e853 3f00 	ldrex	r3, [r3]
 8004dee:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df2:	3208      	adds	r2, #8
 8004df4:	e842 3100 	strex	r1, r3, [r2]
 8004df8:	2900      	cmp	r1, #0
 8004dfa:	d1f3      	bne.n	8004de4 <UART_EndTxTransfer+0x12>
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004dfc:	2320      	movs	r3, #32
 8004dfe:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
}
 8004e02:	4770      	bx	lr

08004e04 <UART_EndRxTransfer>:
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e04:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e06:	e852 3f00 	ldrex	r3, [r2]
 8004e0a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e0e:	e842 3100 	strex	r1, r3, [r2]
 8004e12:	2900      	cmp	r1, #0
 8004e14:	d1f6      	bne.n	8004e04 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004e16:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e18:	f102 0308 	add.w	r3, r2, #8
 8004e1c:	e853 3f00 	ldrex	r3, [r3]
 8004e20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e24:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e28:	3208      	adds	r2, #8
 8004e2a:	e842 3100 	strex	r1, r3, [r2]
 8004e2e:	2900      	cmp	r1, #0
 8004e30:	d1f1      	bne.n	8004e16 <UART_EndRxTransfer+0x12>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e32:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d006      	beq.n	8004e46 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e38:	2320      	movs	r3, #32
 8004e3a:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004e42:	6703      	str	r3, [r0, #112]	; 0x70
}
 8004e44:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e46:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e48:	e852 3f00 	ldrex	r3, [r2]
 8004e4c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e50:	e842 3100 	strex	r1, r3, [r2]
 8004e54:	2900      	cmp	r1, #0
 8004e56:	d1f6      	bne.n	8004e46 <UART_EndRxTransfer+0x42>
 8004e58:	e7ee      	b.n	8004e38 <UART_EndRxTransfer+0x34>

08004e5a <UART_TxISR_8BIT>:
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004e5a:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8004e5e:	2b21      	cmp	r3, #33	; 0x21
 8004e60:	d000      	beq.n	8004e64 <UART_TxISR_8BIT+0xa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004e62:	4770      	bx	lr
    if (huart->TxXferCount == 0U)
 8004e64:	f8b0 3056 	ldrh.w	r3, [r0, #86]	; 0x56
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	b993      	cbnz	r3, 8004e92 <UART_TxISR_8BIT+0x38>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004e6c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e6e:	e852 3f00 	ldrex	r3, [r2]
 8004e72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e76:	e842 3100 	strex	r1, r3, [r2]
 8004e7a:	2900      	cmp	r1, #0
 8004e7c:	d1f6      	bne.n	8004e6c <UART_TxISR_8BIT+0x12>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004e7e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e80:	e852 3f00 	ldrex	r3, [r2]
 8004e84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e88:	e842 3100 	strex	r1, r3, [r2]
 8004e8c:	2900      	cmp	r1, #0
 8004e8e:	d1f6      	bne.n	8004e7e <UART_TxISR_8BIT+0x24>
 8004e90:	4770      	bx	lr
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004e92:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8004e94:	6803      	ldr	r3, [r0, #0]
 8004e96:	7812      	ldrb	r2, [r2, #0]
 8004e98:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8004e9a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8004e9c:	3301      	adds	r3, #1
 8004e9e:	6503      	str	r3, [r0, #80]	; 0x50
      huart->TxXferCount--;
 8004ea0:	f8b0 3056 	ldrh.w	r3, [r0, #86]	; 0x56
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
}
 8004eae:	e7d8      	b.n	8004e62 <UART_TxISR_8BIT+0x8>

08004eb0 <UART_TxISR_16BIT>:
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004eb0:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8004eb4:	2b21      	cmp	r3, #33	; 0x21
 8004eb6:	d000      	beq.n	8004eba <UART_TxISR_16BIT+0xa>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004eb8:	4770      	bx	lr
    if (huart->TxXferCount == 0U)
 8004eba:	f8b0 3056 	ldrh.w	r3, [r0, #86]	; 0x56
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	b993      	cbnz	r3, 8004ee8 <UART_TxISR_16BIT+0x38>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004ec2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec4:	e852 3f00 	ldrex	r3, [r2]
 8004ec8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ecc:	e842 3100 	strex	r1, r3, [r2]
 8004ed0:	2900      	cmp	r1, #0
 8004ed2:	d1f6      	bne.n	8004ec2 <UART_TxISR_16BIT+0x12>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004ed4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed6:	e852 3f00 	ldrex	r3, [r2]
 8004eda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ede:	e842 3100 	strex	r1, r3, [r2]
 8004ee2:	2900      	cmp	r1, #0
 8004ee4:	d1f6      	bne.n	8004ed4 <UART_TxISR_16BIT+0x24>
 8004ee6:	4770      	bx	lr
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004ee8:	6d03      	ldr	r3, [r0, #80]	; 0x50
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004eea:	881b      	ldrh	r3, [r3, #0]
 8004eec:	6802      	ldr	r2, [r0, #0]
 8004eee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ef2:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8004ef4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8004ef6:	3302      	adds	r3, #2
 8004ef8:	6503      	str	r3, [r0, #80]	; 0x50
      huart->TxXferCount--;
 8004efa:	f8b0 3056 	ldrh.w	r3, [r0, #86]	; 0x56
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	3b01      	subs	r3, #1
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
}
 8004f08:	e7d6      	b.n	8004eb8 <UART_TxISR_16BIT+0x8>

08004f0a <UART_TxISR_8BIT_FIFOEN>:
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004f0a:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8004f0e:	2b21      	cmp	r3, #33	; 0x21
 8004f10:	d000      	beq.n	8004f14 <UART_TxISR_8BIT_FIFOEN+0xa>
      {
        /* Nothing to do */
      }
    }
  }
}
 8004f12:	4770      	bx	lr
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004f14:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 8004f18:	e017      	b.n	8004f4a <UART_TxISR_8BIT_FIFOEN+0x40>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8004f1a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f1c:	f102 0308 	add.w	r3, r2, #8
 8004f20:	e853 3f00 	ldrex	r3, [r3]
 8004f24:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f28:	3208      	adds	r2, #8
 8004f2a:	e842 3100 	strex	r1, r3, [r2]
 8004f2e:	2900      	cmp	r1, #0
 8004f30:	d1f3      	bne.n	8004f1a <UART_TxISR_8BIT_FIFOEN+0x10>
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004f32:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f34:	e852 3f00 	ldrex	r3, [r2]
 8004f38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f3c:	e842 3100 	strex	r1, r3, [r2]
 8004f40:	2900      	cmp	r1, #0
 8004f42:	d1f6      	bne.n	8004f32 <UART_TxISR_8BIT_FIFOEN+0x28>
 8004f44:	4770      	bx	lr
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004f46:	3b01      	subs	r3, #1
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d0e1      	beq.n	8004f12 <UART_TxISR_8BIT_FIFOEN+0x8>
      if (huart->TxXferCount == 0U)
 8004f4e:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
 8004f52:	b292      	uxth	r2, r2
 8004f54:	2a00      	cmp	r2, #0
 8004f56:	d0e0      	beq.n	8004f1a <UART_TxISR_8BIT_FIFOEN+0x10>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8004f58:	6802      	ldr	r2, [r0, #0]
 8004f5a:	69d1      	ldr	r1, [r2, #28]
 8004f5c:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004f60:	d0f1      	beq.n	8004f46 <UART_TxISR_8BIT_FIFOEN+0x3c>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004f62:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8004f64:	7809      	ldrb	r1, [r1, #0]
 8004f66:	8511      	strh	r1, [r2, #40]	; 0x28
        huart->pTxBuffPtr++;
 8004f68:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8004f6a:	3201      	adds	r2, #1
 8004f6c:	6502      	str	r2, [r0, #80]	; 0x50
        huart->TxXferCount--;
 8004f6e:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
 8004f72:	b292      	uxth	r2, r2
 8004f74:	3a01      	subs	r2, #1
 8004f76:	b292      	uxth	r2, r2
 8004f78:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
 8004f7c:	e7e3      	b.n	8004f46 <UART_TxISR_8BIT_FIFOEN+0x3c>

08004f7e <UART_TxISR_16BIT_FIFOEN>:
{
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004f7e:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8004f82:	2b21      	cmp	r3, #33	; 0x21
 8004f84:	d000      	beq.n	8004f88 <UART_TxISR_16BIT_FIFOEN+0xa>
      {
        /* Nothing to do */
      }
    }
  }
}
 8004f86:	4770      	bx	lr
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004f88:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 8004f8c:	e017      	b.n	8004fbe <UART_TxISR_16BIT_FIFOEN+0x40>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8004f8e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f90:	f102 0308 	add.w	r3, r2, #8
 8004f94:	e853 3f00 	ldrex	r3, [r3]
 8004f98:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f9c:	3208      	adds	r2, #8
 8004f9e:	e842 3100 	strex	r1, r3, [r2]
 8004fa2:	2900      	cmp	r1, #0
 8004fa4:	d1f3      	bne.n	8004f8e <UART_TxISR_16BIT_FIFOEN+0x10>
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004fa6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa8:	e852 3f00 	ldrex	r3, [r2]
 8004fac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb0:	e842 3100 	strex	r1, r3, [r2]
 8004fb4:	2900      	cmp	r1, #0
 8004fb6:	d1f6      	bne.n	8004fa6 <UART_TxISR_16BIT_FIFOEN+0x28>
 8004fb8:	4770      	bx	lr
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004fba:	3b01      	subs	r3, #1
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d0e1      	beq.n	8004f86 <UART_TxISR_16BIT_FIFOEN+0x8>
      if (huart->TxXferCount == 0U)
 8004fc2:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
 8004fc6:	b292      	uxth	r2, r2
 8004fc8:	2a00      	cmp	r2, #0
 8004fca:	d0e0      	beq.n	8004f8e <UART_TxISR_16BIT_FIFOEN+0x10>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8004fcc:	6802      	ldr	r2, [r0, #0]
 8004fce:	69d1      	ldr	r1, [r2, #28]
 8004fd0:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004fd4:	d0f1      	beq.n	8004fba <UART_TxISR_16BIT_FIFOEN+0x3c>
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004fd6:	6d01      	ldr	r1, [r0, #80]	; 0x50
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004fd8:	8809      	ldrh	r1, [r1, #0]
 8004fda:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8004fde:	8511      	strh	r1, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8004fe0:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8004fe2:	3202      	adds	r2, #2
 8004fe4:	6502      	str	r2, [r0, #80]	; 0x50
        huart->TxXferCount--;
 8004fe6:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
 8004fea:	b292      	uxth	r2, r2
 8004fec:	3a01      	subs	r2, #1
 8004fee:	b292      	uxth	r2, r2
 8004ff0:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
 8004ff4:	e7e1      	b.n	8004fba <UART_TxISR_16BIT_FIFOEN+0x3c>
	...

08004ff8 <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 8004ff8:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8004ffc:	2b20      	cmp	r3, #32
 8004ffe:	d150      	bne.n	80050a2 <HAL_UART_Transmit_IT+0xaa>
    if ((pData == NULL) || (Size == 0U))
 8005000:	2900      	cmp	r1, #0
 8005002:	d050      	beq.n	80050a6 <HAL_UART_Transmit_IT+0xae>
 8005004:	2a00      	cmp	r2, #0
 8005006:	d050      	beq.n	80050aa <HAL_UART_Transmit_IT+0xb2>
    __HAL_LOCK(huart);
 8005008:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800500c:	2b01      	cmp	r3, #1
 800500e:	d04e      	beq.n	80050ae <HAL_UART_Transmit_IT+0xb6>
 8005010:	2301      	movs	r3, #1
 8005012:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->pTxBuffPtr  = pData;
 8005016:	6501      	str	r1, [r0, #80]	; 0x50
    huart->TxXferSize  = Size;
 8005018:	f8a0 2054 	strh.w	r2, [r0, #84]	; 0x54
    huart->TxXferCount = Size;
 800501c:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
    huart->TxISR       = NULL;
 8005020:	2300      	movs	r3, #0
 8005022:	6743      	str	r3, [r0, #116]	; 0x74
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005024:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005028:	2321      	movs	r3, #33	; 0x21
 800502a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800502e:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8005030:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005034:	d013      	beq.n	800505e <HAL_UART_Transmit_IT+0x66>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005036:	6883      	ldr	r3, [r0, #8]
 8005038:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800503c:	d02b      	beq.n	8005096 <HAL_UART_Transmit_IT+0x9e>
        huart->TxISR = UART_TxISR_8BIT;
 800503e:	4b1d      	ldr	r3, [pc, #116]	; (80050b4 <HAL_UART_Transmit_IT+0xbc>)
 8005040:	6743      	str	r3, [r0, #116]	; 0x74
      __HAL_UNLOCK(huart);
 8005042:	2300      	movs	r3, #0
 8005044:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8005048:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800504a:	e852 3f00 	ldrex	r3, [r2]
 800504e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005052:	e842 3100 	strex	r1, r3, [r2]
 8005056:	2900      	cmp	r1, #0
 8005058:	d1f6      	bne.n	8005048 <HAL_UART_Transmit_IT+0x50>
    return HAL_OK;
 800505a:	2000      	movs	r0, #0
 800505c:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800505e:	6883      	ldr	r3, [r0, #8]
 8005060:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005064:	d011      	beq.n	800508a <HAL_UART_Transmit_IT+0x92>
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8005066:	4b14      	ldr	r3, [pc, #80]	; (80050b8 <HAL_UART_Transmit_IT+0xc0>)
 8005068:	6743      	str	r3, [r0, #116]	; 0x74
      __HAL_UNLOCK(huart);
 800506a:	2300      	movs	r3, #0
 800506c:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8005070:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005072:	f102 0308 	add.w	r3, r2, #8
 8005076:	e853 3f00 	ldrex	r3, [r3]
 800507a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800507e:	3208      	adds	r2, #8
 8005080:	e842 3100 	strex	r1, r3, [r2]
 8005084:	2900      	cmp	r1, #0
 8005086:	d1f3      	bne.n	8005070 <HAL_UART_Transmit_IT+0x78>
 8005088:	e7e7      	b.n	800505a <HAL_UART_Transmit_IT+0x62>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800508a:	6903      	ldr	r3, [r0, #16]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d1ea      	bne.n	8005066 <HAL_UART_Transmit_IT+0x6e>
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8005090:	4b0a      	ldr	r3, [pc, #40]	; (80050bc <HAL_UART_Transmit_IT+0xc4>)
 8005092:	6743      	str	r3, [r0, #116]	; 0x74
 8005094:	e7e9      	b.n	800506a <HAL_UART_Transmit_IT+0x72>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005096:	6903      	ldr	r3, [r0, #16]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d1d0      	bne.n	800503e <HAL_UART_Transmit_IT+0x46>
        huart->TxISR = UART_TxISR_16BIT;
 800509c:	4b08      	ldr	r3, [pc, #32]	; (80050c0 <HAL_UART_Transmit_IT+0xc8>)
 800509e:	6743      	str	r3, [r0, #116]	; 0x74
 80050a0:	e7cf      	b.n	8005042 <HAL_UART_Transmit_IT+0x4a>
    return HAL_BUSY;
 80050a2:	2002      	movs	r0, #2
 80050a4:	4770      	bx	lr
      return HAL_ERROR;
 80050a6:	2001      	movs	r0, #1
 80050a8:	4770      	bx	lr
 80050aa:	2001      	movs	r0, #1
 80050ac:	4770      	bx	lr
    __HAL_LOCK(huart);
 80050ae:	2002      	movs	r0, #2
}
 80050b0:	4770      	bx	lr
 80050b2:	bf00      	nop
 80050b4:	08004e5b 	.word	0x08004e5b
 80050b8:	08004f0b 	.word	0x08004f0b
 80050bc:	08004f7f 	.word	0x08004f7f
 80050c0:	08004eb1 	.word	0x08004eb1

080050c4 <HAL_UART_DMAStop>:
{
 80050c4:	b538      	push	{r3, r4, r5, lr}
 80050c6:	4604      	mov	r4, r0
  const HAL_UART_StateTypeDef gstate = huart->gState;
 80050c8:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80050cc:	f8d0 5088 	ldr.w	r5, [r0, #136]	; 0x88
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80050d0:	6803      	ldr	r3, [r0, #0]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80050d8:	d001      	beq.n	80050de <HAL_UART_DMAStop+0x1a>
 80050da:	2a21      	cmp	r2, #33	; 0x21
 80050dc:	d008      	beq.n	80050f0 <HAL_UART_DMAStop+0x2c>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80050de:	6823      	ldr	r3, [r4, #0]
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80050e6:	d042      	beq.n	800516e <HAL_UART_DMAStop+0xaa>
 80050e8:	2d22      	cmp	r5, #34	; 0x22
 80050ea:	d020      	beq.n	800512e <HAL_UART_DMAStop+0x6a>
  return HAL_OK;
 80050ec:	2000      	movs	r0, #0
 80050ee:	e03f      	b.n	8005170 <HAL_UART_DMAStop+0xac>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80050f0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f2:	f102 0308 	add.w	r3, r2, #8
 80050f6:	e853 3f00 	ldrex	r3, [r3]
 80050fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050fe:	3208      	adds	r2, #8
 8005100:	e842 3100 	strex	r1, r3, [r2]
 8005104:	2900      	cmp	r1, #0
 8005106:	d1f3      	bne.n	80050f0 <HAL_UART_DMAStop+0x2c>
    if (huart->hdmatx != NULL)
 8005108:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800510a:	b110      	cbz	r0, 8005112 <HAL_UART_DMAStop+0x4e>
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800510c:	f7fc fe2a 	bl	8001d64 <HAL_DMA_Abort>
 8005110:	b918      	cbnz	r0, 800511a <HAL_UART_DMAStop+0x56>
    UART_EndTxTransfer(huart);
 8005112:	4620      	mov	r0, r4
 8005114:	f7ff fe5d 	bl	8004dd2 <UART_EndTxTransfer>
 8005118:	e7e1      	b.n	80050de <HAL_UART_DMAStop+0x1a>
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800511a:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800511c:	f7fc fef3 	bl	8001f06 <HAL_DMA_GetError>
 8005120:	2820      	cmp	r0, #32
 8005122:	d1f6      	bne.n	8005112 <HAL_UART_DMAStop+0x4e>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005124:	2310      	movs	r3, #16
 8005126:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
          return HAL_TIMEOUT;
 800512a:	2003      	movs	r0, #3
 800512c:	e020      	b.n	8005170 <HAL_UART_DMAStop+0xac>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800512e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005130:	f102 0308 	add.w	r3, r2, #8
 8005134:	e853 3f00 	ldrex	r3, [r3]
 8005138:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800513c:	3208      	adds	r2, #8
 800513e:	e842 3100 	strex	r1, r3, [r2]
 8005142:	2900      	cmp	r1, #0
 8005144:	d1f3      	bne.n	800512e <HAL_UART_DMAStop+0x6a>
    if (huart->hdmarx != NULL)
 8005146:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8005148:	b110      	cbz	r0, 8005150 <HAL_UART_DMAStop+0x8c>
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800514a:	f7fc fe0b 	bl	8001d64 <HAL_DMA_Abort>
 800514e:	b920      	cbnz	r0, 800515a <HAL_UART_DMAStop+0x96>
    UART_EndRxTransfer(huart);
 8005150:	4620      	mov	r0, r4
 8005152:	f7ff fe57 	bl	8004e04 <UART_EndRxTransfer>
  return HAL_OK;
 8005156:	2000      	movs	r0, #0
 8005158:	e00a      	b.n	8005170 <HAL_UART_DMAStop+0xac>
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800515a:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800515c:	f7fc fed3 	bl	8001f06 <HAL_DMA_GetError>
 8005160:	2820      	cmp	r0, #32
 8005162:	d1f5      	bne.n	8005150 <HAL_UART_DMAStop+0x8c>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005164:	2310      	movs	r3, #16
 8005166:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
          return HAL_TIMEOUT;
 800516a:	2003      	movs	r0, #3
 800516c:	e000      	b.n	8005170 <HAL_UART_DMAStop+0xac>
  return HAL_OK;
 800516e:	2000      	movs	r0, #0
}
 8005170:	bd38      	pop	{r3, r4, r5, pc}

08005172 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005172:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005174:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005176:	e852 3f00 	ldrex	r3, [r2]
 800517a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800517e:	e842 3100 	strex	r1, r3, [r2]
 8005182:	2900      	cmp	r1, #0
 8005184:	d1f6      	bne.n	8005174 <UART_EndTransmit_IT+0x2>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005186:	2320      	movs	r3, #32
 8005188:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800518c:	2300      	movs	r3, #0
 800518e:	6743      	str	r3, [r0, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005190:	f003 f930 	bl	80083f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005194:	bd08      	pop	{r3, pc}

08005196 <HAL_UART_RxHalfCpltCallback>:
}
 8005196:	4770      	bx	lr

08005198 <UART_DMAError>:
{
 8005198:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800519a:	6a84      	ldr	r4, [r0, #40]	; 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800519c:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80051a0:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80051a4:	6823      	ldr	r3, [r4, #0]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80051ac:	d001      	beq.n	80051b2 <UART_DMAError+0x1a>
 80051ae:	2a21      	cmp	r2, #33	; 0x21
 80051b0:	d010      	beq.n	80051d4 <UART_DMAError+0x3c>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80051b2:	6823      	ldr	r3, [r4, #0]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80051ba:	d001      	beq.n	80051c0 <UART_DMAError+0x28>
 80051bc:	2d22      	cmp	r5, #34	; 0x22
 80051be:	d010      	beq.n	80051e2 <UART_DMAError+0x4a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80051c0:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80051c4:	f043 0310 	orr.w	r3, r3, #16
 80051c8:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  HAL_UART_ErrorCallback(huart);
 80051cc:	4620      	mov	r0, r4
 80051ce:	f003 f929 	bl	8008424 <HAL_UART_ErrorCallback>
}
 80051d2:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 80051d4:	2300      	movs	r3, #0
 80051d6:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80051da:	4620      	mov	r0, r4
 80051dc:	f7ff fdf9 	bl	8004dd2 <UART_EndTxTransfer>
 80051e0:	e7e7      	b.n	80051b2 <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 80051e2:	2300      	movs	r3, #0
 80051e4:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80051e8:	4620      	mov	r0, r4
 80051ea:	f7ff fe0b 	bl	8004e04 <UART_EndRxTransfer>
 80051ee:	e7e7      	b.n	80051c0 <UART_DMAError+0x28>

080051f0 <UART_DMAAbortOnError>:
{
 80051f0:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80051f2:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 80051f4:	2300      	movs	r3, #0
 80051f6:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80051fa:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 80051fe:	f003 f911 	bl	8008424 <HAL_UART_ErrorCallback>
}
 8005202:	bd08      	pop	{r3, pc}

08005204 <HAL_UARTEx_RxEventCallback>:
}
 8005204:	4770      	bx	lr
	...

08005208 <HAL_UART_IRQHandler>:
{
 8005208:	b570      	push	{r4, r5, r6, lr}
 800520a:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800520c:	6801      	ldr	r1, [r0, #0]
 800520e:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005210:	6808      	ldr	r0, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005212:	688d      	ldr	r5, [r1, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005214:	f640 020f 	movw	r2, #2063	; 0x80f
  if (errorflags == 0U)
 8005218:	401a      	ands	r2, r3
 800521a:	d108      	bne.n	800522e <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800521c:	f013 0f20 	tst.w	r3, #32
 8005220:	d005      	beq.n	800522e <HAL_UART_IRQHandler+0x26>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005222:	f010 0f20 	tst.w	r0, #32
 8005226:	d134      	bne.n	8005292 <HAL_UART_IRQHandler+0x8a>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005228:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 800522c:	d131      	bne.n	8005292 <HAL_UART_IRQHandler+0x8a>
  if ((errorflags != 0U)
 800522e:	b12a      	cbz	r2, 800523c <HAL_UART_IRQHandler+0x34>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005230:	4a95      	ldr	r2, [pc, #596]	; (8005488 <HAL_UART_IRQHandler+0x280>)
 8005232:	402a      	ands	r2, r5
 8005234:	d133      	bne.n	800529e <HAL_UART_IRQHandler+0x96>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005236:	4e95      	ldr	r6, [pc, #596]	; (800548c <HAL_UART_IRQHandler+0x284>)
 8005238:	4230      	tst	r0, r6
 800523a:	d130      	bne.n	800529e <HAL_UART_IRQHandler+0x96>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800523c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800523e:	2a01      	cmp	r2, #1
 8005240:	f000 80c3 	beq.w	80053ca <HAL_UART_IRQHandler+0x1c2>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005244:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8005248:	d003      	beq.n	8005252 <HAL_UART_IRQHandler+0x4a>
 800524a:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
 800524e:	f040 815b 	bne.w	8005508 <HAL_UART_IRQHandler+0x300>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005252:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005256:	d007      	beq.n	8005268 <HAL_UART_IRQHandler+0x60>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005258:	f010 0f80 	tst.w	r0, #128	; 0x80
 800525c:	f040 815b 	bne.w	8005516 <HAL_UART_IRQHandler+0x30e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005260:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
 8005264:	f040 8157 	bne.w	8005516 <HAL_UART_IRQHandler+0x30e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005268:	f013 0f40 	tst.w	r3, #64	; 0x40
 800526c:	d003      	beq.n	8005276 <HAL_UART_IRQHandler+0x6e>
 800526e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005272:	f040 8157 	bne.w	8005524 <HAL_UART_IRQHandler+0x31c>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005276:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800527a:	d003      	beq.n	8005284 <HAL_UART_IRQHandler+0x7c>
 800527c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005280:	f040 8154 	bne.w	800552c <HAL_UART_IRQHandler+0x324>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005284:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8005288:	d002      	beq.n	8005290 <HAL_UART_IRQHandler+0x88>
 800528a:	2800      	cmp	r0, #0
 800528c:	f2c0 8152 	blt.w	8005534 <HAL_UART_IRQHandler+0x32c>
}
 8005290:	bd70      	pop	{r4, r5, r6, pc}
      if (huart->RxISR != NULL)
 8005292:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8005294:	2b00      	cmp	r3, #0
 8005296:	d0fb      	beq.n	8005290 <HAL_UART_IRQHandler+0x88>
        huart->RxISR(huart);
 8005298:	4620      	mov	r0, r4
 800529a:	4798      	blx	r3
      return;
 800529c:	e7f8      	b.n	8005290 <HAL_UART_IRQHandler+0x88>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800529e:	f013 0f01 	tst.w	r3, #1
 80052a2:	d009      	beq.n	80052b8 <HAL_UART_IRQHandler+0xb0>
 80052a4:	f410 7f80 	tst.w	r0, #256	; 0x100
 80052a8:	d006      	beq.n	80052b8 <HAL_UART_IRQHandler+0xb0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80052aa:	2601      	movs	r6, #1
 80052ac:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80052ae:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80052b2:	4331      	orrs	r1, r6
 80052b4:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80052b8:	f013 0f02 	tst.w	r3, #2
 80052bc:	d00b      	beq.n	80052d6 <HAL_UART_IRQHandler+0xce>
 80052be:	f015 0f01 	tst.w	r5, #1
 80052c2:	d008      	beq.n	80052d6 <HAL_UART_IRQHandler+0xce>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80052c4:	6821      	ldr	r1, [r4, #0]
 80052c6:	2602      	movs	r6, #2
 80052c8:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80052ca:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80052ce:	f041 0104 	orr.w	r1, r1, #4
 80052d2:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80052d6:	f013 0f04 	tst.w	r3, #4
 80052da:	d00b      	beq.n	80052f4 <HAL_UART_IRQHandler+0xec>
 80052dc:	f015 0f01 	tst.w	r5, #1
 80052e0:	d008      	beq.n	80052f4 <HAL_UART_IRQHandler+0xec>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80052e2:	6821      	ldr	r1, [r4, #0]
 80052e4:	2604      	movs	r6, #4
 80052e6:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80052e8:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80052ec:	f041 0102 	orr.w	r1, r1, #2
 80052f0:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_ORE) != 0U)
 80052f4:	f013 0f08 	tst.w	r3, #8
 80052f8:	d00b      	beq.n	8005312 <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80052fa:	f010 0f20 	tst.w	r0, #32
 80052fe:	d100      	bne.n	8005302 <HAL_UART_IRQHandler+0xfa>
 8005300:	b13a      	cbz	r2, 8005312 <HAL_UART_IRQHandler+0x10a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005302:	6822      	ldr	r2, [r4, #0]
 8005304:	2108      	movs	r1, #8
 8005306:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005308:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800530c:	430a      	orrs	r2, r1
 800530e:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005312:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8005316:	d00c      	beq.n	8005332 <HAL_UART_IRQHandler+0x12a>
 8005318:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 800531c:	d009      	beq.n	8005332 <HAL_UART_IRQHandler+0x12a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800531e:	6822      	ldr	r2, [r4, #0]
 8005320:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005324:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005326:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800532a:	f042 0220 	orr.w	r2, r2, #32
 800532e:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005332:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8005336:	2a00      	cmp	r2, #0
 8005338:	d0aa      	beq.n	8005290 <HAL_UART_IRQHandler+0x88>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800533a:	f013 0f20 	tst.w	r3, #32
 800533e:	d009      	beq.n	8005354 <HAL_UART_IRQHandler+0x14c>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005340:	f010 0f20 	tst.w	r0, #32
 8005344:	d102      	bne.n	800534c <HAL_UART_IRQHandler+0x144>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005346:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 800534a:	d003      	beq.n	8005354 <HAL_UART_IRQHandler+0x14c>
        if (huart->RxISR != NULL)
 800534c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800534e:	b10b      	cbz	r3, 8005354 <HAL_UART_IRQHandler+0x14c>
          huart->RxISR(huart);
 8005350:	4620      	mov	r0, r4
 8005352:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8005354:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005358:	6823      	ldr	r3, [r4, #0]
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005360:	d102      	bne.n	8005368 <HAL_UART_IRQHandler+0x160>
 8005362:	f012 0f28 	tst.w	r2, #40	; 0x28
 8005366:	d029      	beq.n	80053bc <HAL_UART_IRQHandler+0x1b4>
        UART_EndRxTransfer(huart);
 8005368:	4620      	mov	r0, r4
 800536a:	f7ff fd4b 	bl	8004e04 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800536e:	6823      	ldr	r3, [r4, #0]
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005376:	d01d      	beq.n	80053b4 <HAL_UART_IRQHandler+0x1ac>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005378:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800537a:	f102 0308 	add.w	r3, r2, #8
 800537e:	e853 3f00 	ldrex	r3, [r3]
 8005382:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005386:	3208      	adds	r2, #8
 8005388:	e842 3100 	strex	r1, r3, [r2]
 800538c:	2900      	cmp	r1, #0
 800538e:	d1f3      	bne.n	8005378 <HAL_UART_IRQHandler+0x170>
          if (huart->hdmarx != NULL)
 8005390:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8005392:	b15b      	cbz	r3, 80053ac <HAL_UART_IRQHandler+0x1a4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005394:	4a3e      	ldr	r2, [pc, #248]	; (8005490 <HAL_UART_IRQHandler+0x288>)
 8005396:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005398:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800539a:	f7fc fd19 	bl	8001dd0 <HAL_DMA_Abort_IT>
 800539e:	2800      	cmp	r0, #0
 80053a0:	f43f af76 	beq.w	8005290 <HAL_UART_IRQHandler+0x88>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80053a4:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80053a6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80053a8:	4798      	blx	r3
 80053aa:	e771      	b.n	8005290 <HAL_UART_IRQHandler+0x88>
            HAL_UART_ErrorCallback(huart);
 80053ac:	4620      	mov	r0, r4
 80053ae:	f003 f839 	bl	8008424 <HAL_UART_ErrorCallback>
 80053b2:	e76d      	b.n	8005290 <HAL_UART_IRQHandler+0x88>
          HAL_UART_ErrorCallback(huart);
 80053b4:	4620      	mov	r0, r4
 80053b6:	f003 f835 	bl	8008424 <HAL_UART_ErrorCallback>
 80053ba:	e769      	b.n	8005290 <HAL_UART_IRQHandler+0x88>
        HAL_UART_ErrorCallback(huart);
 80053bc:	4620      	mov	r0, r4
 80053be:	f003 f831 	bl	8008424 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053c2:	2300      	movs	r3, #0
 80053c4:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    return;
 80053c8:	e762      	b.n	8005290 <HAL_UART_IRQHandler+0x88>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80053ca:	f013 0f10 	tst.w	r3, #16
 80053ce:	f43f af39 	beq.w	8005244 <HAL_UART_IRQHandler+0x3c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80053d2:	f010 0f10 	tst.w	r0, #16
 80053d6:	f43f af35 	beq.w	8005244 <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80053da:	2310      	movs	r3, #16
 80053dc:	620b      	str	r3, [r1, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053de:	6823      	ldr	r3, [r4, #0]
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80053e6:	d055      	beq.n	8005494 <HAL_UART_IRQHandler+0x28c>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80053e8:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80053ea:	6813      	ldr	r3, [r2, #0]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	f43f af4d 	beq.w	8005290 <HAL_UART_IRQHandler+0x88>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80053f6:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80053fa:	4299      	cmp	r1, r3
 80053fc:	f67f af48 	bls.w	8005290 <HAL_UART_IRQHandler+0x88>
        huart->RxXferCount = nb_remaining_rx_data;
 8005400:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005404:	6813      	ldr	r3, [r2, #0]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f013 0f20 	tst.w	r3, #32
 800540c:	d131      	bne.n	8005472 <HAL_UART_IRQHandler+0x26a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800540e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005410:	e852 3f00 	ldrex	r3, [r2]
 8005414:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005418:	e842 3100 	strex	r1, r3, [r2]
 800541c:	2900      	cmp	r1, #0
 800541e:	d1f6      	bne.n	800540e <HAL_UART_IRQHandler+0x206>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005420:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005422:	f102 0308 	add.w	r3, r2, #8
 8005426:	e853 3f00 	ldrex	r3, [r3]
 800542a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800542e:	3208      	adds	r2, #8
 8005430:	e842 3100 	strex	r1, r3, [r2]
 8005434:	2900      	cmp	r1, #0
 8005436:	d1f3      	bne.n	8005420 <HAL_UART_IRQHandler+0x218>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005438:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800543a:	f102 0308 	add.w	r3, r2, #8
 800543e:	e853 3f00 	ldrex	r3, [r3]
 8005442:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005446:	3208      	adds	r2, #8
 8005448:	e842 3100 	strex	r1, r3, [r2]
 800544c:	2900      	cmp	r1, #0
 800544e:	d1f3      	bne.n	8005438 <HAL_UART_IRQHandler+0x230>
          huart->RxState = HAL_UART_STATE_READY;
 8005450:	2320      	movs	r3, #32
 8005452:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005456:	2300      	movs	r3, #0
 8005458:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800545a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800545c:	e852 3f00 	ldrex	r3, [r2]
 8005460:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005464:	e842 3100 	strex	r1, r3, [r2]
 8005468:	2900      	cmp	r1, #0
 800546a:	d1f6      	bne.n	800545a <HAL_UART_IRQHandler+0x252>
          (void)HAL_DMA_Abort(huart->hdmarx);
 800546c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800546e:	f7fc fc79 	bl	8001d64 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005472:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8005476:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800547a:	b29b      	uxth	r3, r3
 800547c:	1ac9      	subs	r1, r1, r3
 800547e:	b289      	uxth	r1, r1
 8005480:	4620      	mov	r0, r4
 8005482:	f7ff febf 	bl	8005204 <HAL_UARTEx_RxEventCallback>
      return;
 8005486:	e703      	b.n	8005290 <HAL_UART_IRQHandler+0x88>
 8005488:	10000001 	.word	0x10000001
 800548c:	04000120 	.word	0x04000120
 8005490:	080051f1 	.word	0x080051f1
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005494:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8005498:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800549c:	b29b      	uxth	r3, r3
 800549e:	1ac9      	subs	r1, r1, r3
 80054a0:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 80054a2:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	f43f aef1 	beq.w	8005290 <HAL_UART_IRQHandler+0x88>
          && (nb_rx_data > 0U))
 80054ae:	2900      	cmp	r1, #0
 80054b0:	f43f aeee 	beq.w	8005290 <HAL_UART_IRQHandler+0x88>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80054b4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b6:	e852 3f00 	ldrex	r3, [r2]
 80054ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054be:	e842 3000 	strex	r0, r3, [r2]
 80054c2:	2800      	cmp	r0, #0
 80054c4:	d1f6      	bne.n	80054b4 <HAL_UART_IRQHandler+0x2ac>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80054c6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c8:	f102 0308 	add.w	r3, r2, #8
 80054cc:	e853 3f00 	ldrex	r3, [r3]
 80054d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054d4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054d8:	3208      	adds	r2, #8
 80054da:	e842 3000 	strex	r0, r3, [r2]
 80054de:	2800      	cmp	r0, #0
 80054e0:	d1f1      	bne.n	80054c6 <HAL_UART_IRQHandler+0x2be>
        huart->RxState = HAL_UART_STATE_READY;
 80054e2:	2320      	movs	r3, #32
 80054e4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054e8:	2300      	movs	r3, #0
 80054ea:	66e3      	str	r3, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 80054ec:	6723      	str	r3, [r4, #112]	; 0x70
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054ee:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f0:	e852 3f00 	ldrex	r3, [r2]
 80054f4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f8:	e842 3000 	strex	r0, r3, [r2]
 80054fc:	2800      	cmp	r0, #0
 80054fe:	d1f6      	bne.n	80054ee <HAL_UART_IRQHandler+0x2e6>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005500:	4620      	mov	r0, r4
 8005502:	f7ff fe7f 	bl	8005204 <HAL_UARTEx_RxEventCallback>
      return;
 8005506:	e6c3      	b.n	8005290 <HAL_UART_IRQHandler+0x88>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005508:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800550c:	620b      	str	r3, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 800550e:	4620      	mov	r0, r4
 8005510:	f000 fc1a 	bl	8005d48 <HAL_UARTEx_WakeupCallback>
    return;
 8005514:	e6bc      	b.n	8005290 <HAL_UART_IRQHandler+0x88>
    if (huart->TxISR != NULL)
 8005516:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8005518:	2b00      	cmp	r3, #0
 800551a:	f43f aeb9 	beq.w	8005290 <HAL_UART_IRQHandler+0x88>
      huart->TxISR(huart);
 800551e:	4620      	mov	r0, r4
 8005520:	4798      	blx	r3
    return;
 8005522:	e6b5      	b.n	8005290 <HAL_UART_IRQHandler+0x88>
    UART_EndTransmit_IT(huart);
 8005524:	4620      	mov	r0, r4
 8005526:	f7ff fe24 	bl	8005172 <UART_EndTransmit_IT>
    return;
 800552a:	e6b1      	b.n	8005290 <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800552c:	4620      	mov	r0, r4
 800552e:	f000 fc0d 	bl	8005d4c <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 8005532:	e6ad      	b.n	8005290 <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005534:	4620      	mov	r0, r4
 8005536:	f000 fc08 	bl	8005d4a <HAL_UARTEx_RxFifoFullCallback>
    return;
 800553a:	e6a9      	b.n	8005290 <HAL_UART_IRQHandler+0x88>

0800553c <UART_DMARxHalfCplt>:
{
 800553c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800553e:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005540:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8005542:	2b01      	cmp	r3, #1
 8005544:	d002      	beq.n	800554c <UART_DMARxHalfCplt+0x10>
    HAL_UART_RxHalfCpltCallback(huart);
 8005546:	f7ff fe26 	bl	8005196 <HAL_UART_RxHalfCpltCallback>
}
 800554a:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800554c:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8005550:	0849      	lsrs	r1, r1, #1
 8005552:	f7ff fe57 	bl	8005204 <HAL_UARTEx_RxEventCallback>
 8005556:	e7f8      	b.n	800554a <UART_DMARxHalfCplt+0xe>

08005558 <UART_DMAReceiveCplt>:
{
 8005558:	b508      	push	{r3, lr}
 800555a:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800555c:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f013 0f20 	tst.w	r3, #32
 8005566:	d129      	bne.n	80055bc <UART_DMAReceiveCplt+0x64>
    huart->RxXferCount = 0U;
 8005568:	2300      	movs	r3, #0
 800556a:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800556e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005570:	e852 3f00 	ldrex	r3, [r2]
 8005574:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005578:	e842 3100 	strex	r1, r3, [r2]
 800557c:	2900      	cmp	r1, #0
 800557e:	d1f6      	bne.n	800556e <UART_DMAReceiveCplt+0x16>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005580:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005582:	f102 0308 	add.w	r3, r2, #8
 8005586:	e853 3f00 	ldrex	r3, [r3]
 800558a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800558e:	3208      	adds	r2, #8
 8005590:	e842 3100 	strex	r1, r3, [r2]
 8005594:	2900      	cmp	r1, #0
 8005596:	d1f3      	bne.n	8005580 <UART_DMAReceiveCplt+0x28>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005598:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800559a:	f102 0308 	add.w	r3, r2, #8
 800559e:	e853 3f00 	ldrex	r3, [r3]
 80055a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a6:	3208      	adds	r2, #8
 80055a8:	e842 3100 	strex	r1, r3, [r2]
 80055ac:	2900      	cmp	r1, #0
 80055ae:	d1f3      	bne.n	8005598 <UART_DMAReceiveCplt+0x40>
    huart->RxState = HAL_UART_STATE_READY;
 80055b0:	2320      	movs	r3, #32
 80055b2:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055b6:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d005      	beq.n	80055c8 <UART_DMAReceiveCplt+0x70>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055bc:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d00c      	beq.n	80055dc <UART_DMAReceiveCplt+0x84>
    HAL_UART_RxCpltCallback(huart);
 80055c2:	f002 ff2d 	bl	8008420 <HAL_UART_RxCpltCallback>
}
 80055c6:	bd08      	pop	{r3, pc}
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055c8:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ca:	e852 3f00 	ldrex	r3, [r2]
 80055ce:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d2:	e842 3100 	strex	r1, r3, [r2]
 80055d6:	2900      	cmp	r1, #0
 80055d8:	d1f6      	bne.n	80055c8 <UART_DMAReceiveCplt+0x70>
 80055da:	e7ef      	b.n	80055bc <UART_DMAReceiveCplt+0x64>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80055dc:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 80055e0:	f7ff fe10 	bl	8005204 <HAL_UARTEx_RxEventCallback>
 80055e4:	e7ef      	b.n	80055c6 <UART_DMAReceiveCplt+0x6e>
	...

080055e8 <UART_SetConfig>:
{
 80055e8:	b570      	push	{r4, r5, r6, lr}
 80055ea:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 80055ec:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80055ee:	6883      	ldr	r3, [r0, #8]
 80055f0:	6902      	ldr	r2, [r0, #16]
 80055f2:	4313      	orrs	r3, r2
 80055f4:	6942      	ldr	r2, [r0, #20]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	69c2      	ldr	r2, [r0, #28]
 80055fa:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80055fc:	6808      	ldr	r0, [r1, #0]
 80055fe:	4a96      	ldr	r2, [pc, #600]	; (8005858 <UART_SetConfig+0x270>)
 8005600:	4002      	ands	r2, r0
 8005602:	431a      	orrs	r2, r3
 8005604:	600a      	str	r2, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005606:	6822      	ldr	r2, [r4, #0]
 8005608:	6853      	ldr	r3, [r2, #4]
 800560a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800560e:	68e1      	ldr	r1, [r4, #12]
 8005610:	430b      	orrs	r3, r1
 8005612:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005614:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005616:	6822      	ldr	r2, [r4, #0]
 8005618:	4b90      	ldr	r3, [pc, #576]	; (800585c <UART_SetConfig+0x274>)
 800561a:	429a      	cmp	r2, r3
 800561c:	d001      	beq.n	8005622 <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 800561e:	6a23      	ldr	r3, [r4, #32]
 8005620:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005622:	6893      	ldr	r3, [r2, #8]
 8005624:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005628:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800562c:	430b      	orrs	r3, r1
 800562e:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005630:	6822      	ldr	r2, [r4, #0]
 8005632:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005634:	f023 030f 	bic.w	r3, r3, #15
 8005638:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800563a:	430b      	orrs	r3, r1
 800563c:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800563e:	6823      	ldr	r3, [r4, #0]
 8005640:	4a87      	ldr	r2, [pc, #540]	; (8005860 <UART_SetConfig+0x278>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d010      	beq.n	8005668 <UART_SetConfig+0x80>
 8005646:	4a87      	ldr	r2, [pc, #540]	; (8005864 <UART_SetConfig+0x27c>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d021      	beq.n	8005690 <UART_SetConfig+0xa8>
 800564c:	4a86      	ldr	r2, [pc, #536]	; (8005868 <UART_SetConfig+0x280>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d037      	beq.n	80056c2 <UART_SetConfig+0xda>
 8005652:	4a86      	ldr	r2, [pc, #536]	; (800586c <UART_SetConfig+0x284>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d05c      	beq.n	8005712 <UART_SetConfig+0x12a>
 8005658:	4a85      	ldr	r2, [pc, #532]	; (8005870 <UART_SetConfig+0x288>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d06b      	beq.n	8005736 <UART_SetConfig+0x14e>
 800565e:	4a7f      	ldr	r2, [pc, #508]	; (800585c <UART_SetConfig+0x274>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d07d      	beq.n	8005760 <UART_SetConfig+0x178>
 8005664:	2210      	movs	r2, #16
 8005666:	e03a      	b.n	80056de <UART_SetConfig+0xf6>
 8005668:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 800566c:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8005670:	f002 0203 	and.w	r2, r2, #3
 8005674:	2a03      	cmp	r2, #3
 8005676:	d809      	bhi.n	800568c <UART_SetConfig+0xa4>
 8005678:	e8df f002 	tbb	[pc, r2]
 800567c:	06870402 	.word	0x06870402
 8005680:	2201      	movs	r2, #1
 8005682:	e02c      	b.n	80056de <UART_SetConfig+0xf6>
 8005684:	2204      	movs	r2, #4
 8005686:	e02a      	b.n	80056de <UART_SetConfig+0xf6>
 8005688:	2208      	movs	r2, #8
 800568a:	e028      	b.n	80056de <UART_SetConfig+0xf6>
 800568c:	2210      	movs	r2, #16
 800568e:	e026      	b.n	80056de <UART_SetConfig+0xf6>
 8005690:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 8005694:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8005698:	f002 020c 	and.w	r2, r2, #12
 800569c:	2a0c      	cmp	r2, #12
 800569e:	d80e      	bhi.n	80056be <UART_SetConfig+0xd6>
 80056a0:	e8df f002 	tbb	[pc, r2]
 80056a4:	0d0d0d07 	.word	0x0d0d0d07
 80056a8:	0d0d0d09 	.word	0x0d0d0d09
 80056ac:	0d0d0d75 	.word	0x0d0d0d75
 80056b0:	0b          	.byte	0x0b
 80056b1:	00          	.byte	0x00
 80056b2:	2200      	movs	r2, #0
 80056b4:	e013      	b.n	80056de <UART_SetConfig+0xf6>
 80056b6:	2204      	movs	r2, #4
 80056b8:	e011      	b.n	80056de <UART_SetConfig+0xf6>
 80056ba:	2208      	movs	r2, #8
 80056bc:	e00f      	b.n	80056de <UART_SetConfig+0xf6>
 80056be:	2210      	movs	r2, #16
 80056c0:	e00d      	b.n	80056de <UART_SetConfig+0xf6>
 80056c2:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 80056c6:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80056ca:	f002 0230 	and.w	r2, r2, #48	; 0x30
 80056ce:	2a20      	cmp	r2, #32
 80056d0:	d05f      	beq.n	8005792 <UART_SetConfig+0x1aa>
 80056d2:	d81a      	bhi.n	800570a <UART_SetConfig+0x122>
 80056d4:	2a00      	cmp	r2, #0
 80056d6:	d05e      	beq.n	8005796 <UART_SetConfig+0x1ae>
 80056d8:	2a10      	cmp	r2, #16
 80056da:	d15e      	bne.n	800579a <UART_SetConfig+0x1b2>
 80056dc:	2204      	movs	r2, #4
  if (UART_INSTANCE_LOWPOWER(huart))
 80056de:	495f      	ldr	r1, [pc, #380]	; (800585c <UART_SetConfig+0x274>)
 80056e0:	428b      	cmp	r3, r1
 80056e2:	d076      	beq.n	80057d2 <UART_SetConfig+0x1ea>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056e4:	69e0      	ldr	r0, [r4, #28]
 80056e6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80056ea:	f000 80c9 	beq.w	8005880 <UART_SetConfig+0x298>
    switch (clocksource)
 80056ee:	2a08      	cmp	r2, #8
 80056f0:	f200 8134 	bhi.w	800595c <UART_SetConfig+0x374>
 80056f4:	e8df f012 	tbh	[pc, r2, lsl #1]
 80056f8:	011900f7 	.word	0x011900f7
 80056fc:	013200f5 	.word	0x013200f5
 8005700:	0132011c 	.word	0x0132011c
 8005704:	01320132 	.word	0x01320132
 8005708:	011f      	.short	0x011f
  UART_GETCLOCKSOURCE(huart, clocksource);
 800570a:	2a30      	cmp	r2, #48	; 0x30
 800570c:	d147      	bne.n	800579e <UART_SetConfig+0x1b6>
 800570e:	2208      	movs	r2, #8
 8005710:	e7e5      	b.n	80056de <UART_SetConfig+0xf6>
 8005712:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 8005716:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800571a:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 800571e:	2a80      	cmp	r2, #128	; 0x80
 8005720:	d03f      	beq.n	80057a2 <UART_SetConfig+0x1ba>
 8005722:	d804      	bhi.n	800572e <UART_SetConfig+0x146>
 8005724:	b3fa      	cbz	r2, 80057a6 <UART_SetConfig+0x1be>
 8005726:	2a40      	cmp	r2, #64	; 0x40
 8005728:	d13f      	bne.n	80057aa <UART_SetConfig+0x1c2>
 800572a:	2204      	movs	r2, #4
 800572c:	e7d7      	b.n	80056de <UART_SetConfig+0xf6>
 800572e:	2ac0      	cmp	r2, #192	; 0xc0
 8005730:	d13d      	bne.n	80057ae <UART_SetConfig+0x1c6>
 8005732:	2208      	movs	r2, #8
 8005734:	e7d3      	b.n	80056de <UART_SetConfig+0xf6>
 8005736:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 800573a:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800573e:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8005742:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8005746:	d034      	beq.n	80057b2 <UART_SetConfig+0x1ca>
 8005748:	d805      	bhi.n	8005756 <UART_SetConfig+0x16e>
 800574a:	b3a2      	cbz	r2, 80057b6 <UART_SetConfig+0x1ce>
 800574c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8005750:	d133      	bne.n	80057ba <UART_SetConfig+0x1d2>
 8005752:	2204      	movs	r2, #4
 8005754:	e7c3      	b.n	80056de <UART_SetConfig+0xf6>
 8005756:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800575a:	d130      	bne.n	80057be <UART_SetConfig+0x1d6>
 800575c:	2208      	movs	r2, #8
 800575e:	e7be      	b.n	80056de <UART_SetConfig+0xf6>
 8005760:	f502 32c8 	add.w	r2, r2, #102400	; 0x19000
 8005764:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8005768:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 800576c:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8005770:	d027      	beq.n	80057c2 <UART_SetConfig+0x1da>
 8005772:	d805      	bhi.n	8005780 <UART_SetConfig+0x198>
 8005774:	b33a      	cbz	r2, 80057c6 <UART_SetConfig+0x1de>
 8005776:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800577a:	d126      	bne.n	80057ca <UART_SetConfig+0x1e2>
 800577c:	2204      	movs	r2, #4
 800577e:	e7ae      	b.n	80056de <UART_SetConfig+0xf6>
 8005780:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8005784:	d123      	bne.n	80057ce <UART_SetConfig+0x1e6>
 8005786:	2208      	movs	r2, #8
 8005788:	e7a9      	b.n	80056de <UART_SetConfig+0xf6>
 800578a:	2202      	movs	r2, #2
 800578c:	e7a7      	b.n	80056de <UART_SetConfig+0xf6>
 800578e:	2202      	movs	r2, #2
 8005790:	e7a5      	b.n	80056de <UART_SetConfig+0xf6>
 8005792:	2202      	movs	r2, #2
 8005794:	e7a3      	b.n	80056de <UART_SetConfig+0xf6>
 8005796:	2200      	movs	r2, #0
 8005798:	e7a1      	b.n	80056de <UART_SetConfig+0xf6>
 800579a:	2210      	movs	r2, #16
 800579c:	e79f      	b.n	80056de <UART_SetConfig+0xf6>
 800579e:	2210      	movs	r2, #16
 80057a0:	e79d      	b.n	80056de <UART_SetConfig+0xf6>
 80057a2:	2202      	movs	r2, #2
 80057a4:	e79b      	b.n	80056de <UART_SetConfig+0xf6>
 80057a6:	2200      	movs	r2, #0
 80057a8:	e799      	b.n	80056de <UART_SetConfig+0xf6>
 80057aa:	2210      	movs	r2, #16
 80057ac:	e797      	b.n	80056de <UART_SetConfig+0xf6>
 80057ae:	2210      	movs	r2, #16
 80057b0:	e795      	b.n	80056de <UART_SetConfig+0xf6>
 80057b2:	2202      	movs	r2, #2
 80057b4:	e793      	b.n	80056de <UART_SetConfig+0xf6>
 80057b6:	2200      	movs	r2, #0
 80057b8:	e791      	b.n	80056de <UART_SetConfig+0xf6>
 80057ba:	2210      	movs	r2, #16
 80057bc:	e78f      	b.n	80056de <UART_SetConfig+0xf6>
 80057be:	2210      	movs	r2, #16
 80057c0:	e78d      	b.n	80056de <UART_SetConfig+0xf6>
 80057c2:	2202      	movs	r2, #2
 80057c4:	e78b      	b.n	80056de <UART_SetConfig+0xf6>
 80057c6:	2200      	movs	r2, #0
 80057c8:	e789      	b.n	80056de <UART_SetConfig+0xf6>
 80057ca:	2210      	movs	r2, #16
 80057cc:	e787      	b.n	80056de <UART_SetConfig+0xf6>
 80057ce:	2210      	movs	r2, #16
 80057d0:	e785      	b.n	80056de <UART_SetConfig+0xf6>
    switch (clocksource)
 80057d2:	2a08      	cmp	r2, #8
 80057d4:	f200 80b2 	bhi.w	800593c <UART_SetConfig+0x354>
 80057d8:	e8df f002 	tbb	[pc, r2]
 80057dc:	b03bb008 	.word	0xb03bb008
 80057e0:	b0b0b038 	.word	0xb0b0b038
 80057e4:	05          	.byte	0x05
 80057e5:	00          	.byte	0x00
 80057e6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80057ea:	e004      	b.n	80057f6 <UART_SetConfig+0x20e>
        pclk = HAL_RCC_GetPCLK1Freq();
 80057ec:	f7fe fdf2 	bl	80043d4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80057f0:	2800      	cmp	r0, #0
 80057f2:	f000 80a5 	beq.w	8005940 <UART_SetConfig+0x358>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80057f6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80057f8:	4b1e      	ldr	r3, [pc, #120]	; (8005874 <UART_SetConfig+0x28c>)
 80057fa:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80057fe:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005802:	6865      	ldr	r5, [r4, #4]
 8005804:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8005808:	4299      	cmp	r1, r3
 800580a:	f200 809b 	bhi.w	8005944 <UART_SetConfig+0x35c>
 800580e:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8005812:	f200 8099 	bhi.w	8005948 <UART_SetConfig+0x360>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005816:	2600      	movs	r6, #0
 8005818:	4633      	mov	r3, r6
 800581a:	4631      	mov	r1, r6
 800581c:	f7fa fd40 	bl	80002a0 <__aeabi_uldivmod>
 8005820:	0209      	lsls	r1, r1, #8
 8005822:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8005826:	0200      	lsls	r0, r0, #8
 8005828:	086b      	lsrs	r3, r5, #1
 800582a:	18c0      	adds	r0, r0, r3
 800582c:	462a      	mov	r2, r5
 800582e:	4633      	mov	r3, r6
 8005830:	f141 0100 	adc.w	r1, r1, #0
 8005834:	f7fa fd34 	bl	80002a0 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005838:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 800583c:	4b0e      	ldr	r3, [pc, #56]	; (8005878 <UART_SetConfig+0x290>)
 800583e:	429a      	cmp	r2, r3
 8005840:	f200 8084 	bhi.w	800594c <UART_SetConfig+0x364>
          huart->Instance->BRR = usartdiv;
 8005844:	6823      	ldr	r3, [r4, #0]
 8005846:	60d8      	str	r0, [r3, #12]
 8005848:	4630      	mov	r0, r6
 800584a:	e065      	b.n	8005918 <UART_SetConfig+0x330>
        pclk = HAL_RCC_GetSysClockFreq();
 800584c:	f7fe f922 	bl	8003a94 <HAL_RCC_GetSysClockFreq>
        break;
 8005850:	e7ce      	b.n	80057f0 <UART_SetConfig+0x208>
        pclk = (uint32_t) HSI_VALUE;
 8005852:	480a      	ldr	r0, [pc, #40]	; (800587c <UART_SetConfig+0x294>)
 8005854:	e7cf      	b.n	80057f6 <UART_SetConfig+0x20e>
 8005856:	bf00      	nop
 8005858:	cfff69f3 	.word	0xcfff69f3
 800585c:	40008000 	.word	0x40008000
 8005860:	40013800 	.word	0x40013800
 8005864:	40004400 	.word	0x40004400
 8005868:	40004800 	.word	0x40004800
 800586c:	40004c00 	.word	0x40004c00
 8005870:	40005000 	.word	0x40005000
 8005874:	08009854 	.word	0x08009854
 8005878:	000ffcff 	.word	0x000ffcff
 800587c:	00f42400 	.word	0x00f42400
    switch (clocksource)
 8005880:	2a08      	cmp	r2, #8
 8005882:	d865      	bhi.n	8005950 <UART_SetConfig+0x368>
 8005884:	e8df f002 	tbb	[pc, r2]
 8005888:	64052707 	.word	0x64052707
 800588c:	6464642a 	.word	0x6464642a
 8005890:	0b          	.byte	0x0b
 8005891:	00          	.byte	0x00
 8005892:	4835      	ldr	r0, [pc, #212]	; (8005968 <UART_SetConfig+0x380>)
 8005894:	e003      	b.n	800589e <UART_SetConfig+0x2b6>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005896:	f7fe fd9d 	bl	80043d4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800589a:	2800      	cmp	r0, #0
 800589c:	d05a      	beq.n	8005954 <UART_SetConfig+0x36c>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800589e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80058a0:	4b32      	ldr	r3, [pc, #200]	; (800596c <UART_SetConfig+0x384>)
 80058a2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80058a6:	fbb0 f0f3 	udiv	r0, r0, r3
 80058aa:	6862      	ldr	r2, [r4, #4]
 80058ac:	0853      	lsrs	r3, r2, #1
 80058ae:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80058b2:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058b6:	f1a3 0110 	sub.w	r1, r3, #16
 80058ba:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80058be:	4291      	cmp	r1, r2
 80058c0:	d84a      	bhi.n	8005958 <UART_SetConfig+0x370>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80058c2:	b29a      	uxth	r2, r3
 80058c4:	f022 020f 	bic.w	r2, r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80058c8:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80058cc:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 80058ce:	6822      	ldr	r2, [r4, #0]
 80058d0:	60d3      	str	r3, [r2, #12]
 80058d2:	2000      	movs	r0, #0
 80058d4:	e020      	b.n	8005918 <UART_SetConfig+0x330>
        pclk = HAL_RCC_GetPCLK2Freq();
 80058d6:	f7fe fd8f 	bl	80043f8 <HAL_RCC_GetPCLK2Freq>
        break;
 80058da:	e7de      	b.n	800589a <UART_SetConfig+0x2b2>
        pclk = HAL_RCC_GetSysClockFreq();
 80058dc:	f7fe f8da 	bl	8003a94 <HAL_RCC_GetSysClockFreq>
        break;
 80058e0:	e7db      	b.n	800589a <UART_SetConfig+0x2b2>
    switch (clocksource)
 80058e2:	4821      	ldr	r0, [pc, #132]	; (8005968 <UART_SetConfig+0x380>)
 80058e4:	e003      	b.n	80058ee <UART_SetConfig+0x306>
        pclk = HAL_RCC_GetPCLK1Freq();
 80058e6:	f7fe fd75 	bl	80043d4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80058ea:	2800      	cmp	r0, #0
 80058ec:	d038      	beq.n	8005960 <UART_SetConfig+0x378>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058ee:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80058f0:	4b1e      	ldr	r3, [pc, #120]	; (800596c <UART_SetConfig+0x384>)
 80058f2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80058f6:	fbb0 f0f3 	udiv	r0, r0, r3
 80058fa:	6863      	ldr	r3, [r4, #4]
 80058fc:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8005900:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005904:	f1a0 0210 	sub.w	r2, r0, #16
 8005908:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800590c:	429a      	cmp	r2, r3
 800590e:	d829      	bhi.n	8005964 <UART_SetConfig+0x37c>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005910:	6823      	ldr	r3, [r4, #0]
 8005912:	b280      	uxth	r0, r0
 8005914:	60d8      	str	r0, [r3, #12]
 8005916:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 8005918:	2301      	movs	r3, #1
 800591a:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800591e:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 8005922:	2300      	movs	r3, #0
 8005924:	6723      	str	r3, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 8005926:	6763      	str	r3, [r4, #116]	; 0x74
}
 8005928:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 800592a:	f7fe fd65 	bl	80043f8 <HAL_RCC_GetPCLK2Freq>
        break;
 800592e:	e7dc      	b.n	80058ea <UART_SetConfig+0x302>
        pclk = HAL_RCC_GetSysClockFreq();
 8005930:	f7fe f8b0 	bl	8003a94 <HAL_RCC_GetSysClockFreq>
        break;
 8005934:	e7d9      	b.n	80058ea <UART_SetConfig+0x302>
        pclk = (uint32_t) LSE_VALUE;
 8005936:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800593a:	e7d8      	b.n	80058ee <UART_SetConfig+0x306>
    switch (clocksource)
 800593c:	2001      	movs	r0, #1
 800593e:	e7eb      	b.n	8005918 <UART_SetConfig+0x330>
 8005940:	2000      	movs	r0, #0
 8005942:	e7e9      	b.n	8005918 <UART_SetConfig+0x330>
        ret = HAL_ERROR;
 8005944:	2001      	movs	r0, #1
 8005946:	e7e7      	b.n	8005918 <UART_SetConfig+0x330>
 8005948:	2001      	movs	r0, #1
 800594a:	e7e5      	b.n	8005918 <UART_SetConfig+0x330>
          ret = HAL_ERROR;
 800594c:	2001      	movs	r0, #1
 800594e:	e7e3      	b.n	8005918 <UART_SetConfig+0x330>
    switch (clocksource)
 8005950:	2001      	movs	r0, #1
 8005952:	e7e1      	b.n	8005918 <UART_SetConfig+0x330>
 8005954:	2000      	movs	r0, #0
 8005956:	e7df      	b.n	8005918 <UART_SetConfig+0x330>
        ret = HAL_ERROR;
 8005958:	2001      	movs	r0, #1
 800595a:	e7dd      	b.n	8005918 <UART_SetConfig+0x330>
    switch (clocksource)
 800595c:	2001      	movs	r0, #1
 800595e:	e7db      	b.n	8005918 <UART_SetConfig+0x330>
 8005960:	2000      	movs	r0, #0
 8005962:	e7d9      	b.n	8005918 <UART_SetConfig+0x330>
        ret = HAL_ERROR;
 8005964:	2001      	movs	r0, #1
 8005966:	e7d7      	b.n	8005918 <UART_SetConfig+0x330>
 8005968:	00f42400 	.word	0x00f42400
 800596c:	08009854 	.word	0x08009854

08005970 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005970:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005972:	f013 0f01 	tst.w	r3, #1
 8005976:	d006      	beq.n	8005986 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005978:	6802      	ldr	r2, [r0, #0]
 800597a:	6853      	ldr	r3, [r2, #4]
 800597c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005980:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8005982:	430b      	orrs	r3, r1
 8005984:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005986:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005988:	f013 0f02 	tst.w	r3, #2
 800598c:	d006      	beq.n	800599c <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800598e:	6802      	ldr	r2, [r0, #0]
 8005990:	6853      	ldr	r3, [r2, #4]
 8005992:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005996:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8005998:	430b      	orrs	r3, r1
 800599a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800599c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800599e:	f013 0f04 	tst.w	r3, #4
 80059a2:	d006      	beq.n	80059b2 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80059a4:	6802      	ldr	r2, [r0, #0]
 80059a6:	6853      	ldr	r3, [r2, #4]
 80059a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059ac:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80059ae:	430b      	orrs	r3, r1
 80059b0:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80059b2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80059b4:	f013 0f08 	tst.w	r3, #8
 80059b8:	d006      	beq.n	80059c8 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80059ba:	6802      	ldr	r2, [r0, #0]
 80059bc:	6853      	ldr	r3, [r2, #4]
 80059be:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80059c2:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80059c4:	430b      	orrs	r3, r1
 80059c6:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80059c8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80059ca:	f013 0f10 	tst.w	r3, #16
 80059ce:	d006      	beq.n	80059de <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80059d0:	6802      	ldr	r2, [r0, #0]
 80059d2:	6893      	ldr	r3, [r2, #8]
 80059d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80059d8:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80059da:	430b      	orrs	r3, r1
 80059dc:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80059de:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80059e0:	f013 0f20 	tst.w	r3, #32
 80059e4:	d006      	beq.n	80059f4 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80059e6:	6802      	ldr	r2, [r0, #0]
 80059e8:	6893      	ldr	r3, [r2, #8]
 80059ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80059ee:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80059f0:	430b      	orrs	r3, r1
 80059f2:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80059f4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80059f6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80059fa:	d00a      	beq.n	8005a12 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80059fc:	6802      	ldr	r2, [r0, #0]
 80059fe:	6853      	ldr	r3, [r2, #4]
 8005a00:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005a04:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8005a06:	430b      	orrs	r3, r1
 8005a08:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a0a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005a0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a10:	d00b      	beq.n	8005a2a <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a12:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005a14:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005a18:	d006      	beq.n	8005a28 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a1a:	6802      	ldr	r2, [r0, #0]
 8005a1c:	6853      	ldr	r3, [r2, #4]
 8005a1e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8005a22:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8005a24:	430b      	orrs	r3, r1
 8005a26:	6053      	str	r3, [r2, #4]
}
 8005a28:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a2a:	6802      	ldr	r2, [r0, #0]
 8005a2c:	6853      	ldr	r3, [r2, #4]
 8005a2e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005a32:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8005a34:	430b      	orrs	r3, r1
 8005a36:	6053      	str	r3, [r2, #4]
 8005a38:	e7eb      	b.n	8005a12 <UART_AdvFeatureConfig+0xa2>

08005a3a <UART_WaitOnFlagUntilTimeout>:
{
 8005a3a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a3e:	4605      	mov	r5, r0
 8005a40:	460f      	mov	r7, r1
 8005a42:	4616      	mov	r6, r2
 8005a44:	4699      	mov	r9, r3
 8005a46:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a4a:	682b      	ldr	r3, [r5, #0]
 8005a4c:	69dc      	ldr	r4, [r3, #28]
 8005a4e:	ea37 0404 	bics.w	r4, r7, r4
 8005a52:	bf0c      	ite	eq
 8005a54:	2401      	moveq	r4, #1
 8005a56:	2400      	movne	r4, #0
 8005a58:	42b4      	cmp	r4, r6
 8005a5a:	d157      	bne.n	8005b0c <UART_WaitOnFlagUntilTimeout+0xd2>
    if (Timeout != HAL_MAX_DELAY)
 8005a5c:	f1b8 3fff 	cmp.w	r8, #4294967295
 8005a60:	d0f3      	beq.n	8005a4a <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a62:	f7fb ffe3 	bl	8001a2c <HAL_GetTick>
 8005a66:	eba0 0009 	sub.w	r0, r0, r9
 8005a6a:	4540      	cmp	r0, r8
 8005a6c:	d82f      	bhi.n	8005ace <UART_WaitOnFlagUntilTimeout+0x94>
 8005a6e:	f1b8 0f00 	cmp.w	r8, #0
 8005a72:	d02c      	beq.n	8005ace <UART_WaitOnFlagUntilTimeout+0x94>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005a74:	682b      	ldr	r3, [r5, #0]
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	f012 0f04 	tst.w	r2, #4
 8005a7c:	d0e5      	beq.n	8005a4a <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a7e:	69da      	ldr	r2, [r3, #28]
 8005a80:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8005a84:	d0e1      	beq.n	8005a4a <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a86:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a8a:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005a8c:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a8e:	e852 3f00 	ldrex	r3, [r2]
 8005a92:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a96:	e842 3100 	strex	r1, r3, [r2]
 8005a9a:	2900      	cmp	r1, #0
 8005a9c:	d1f6      	bne.n	8005a8c <UART_WaitOnFlagUntilTimeout+0x52>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a9e:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa0:	f102 0308 	add.w	r3, r2, #8
 8005aa4:	e853 3f00 	ldrex	r3, [r3]
 8005aa8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aac:	3208      	adds	r2, #8
 8005aae:	e842 3100 	strex	r1, r3, [r2]
 8005ab2:	2900      	cmp	r1, #0
 8005ab4:	d1f3      	bne.n	8005a9e <UART_WaitOnFlagUntilTimeout+0x64>
          huart->gState = HAL_UART_STATE_READY;
 8005ab6:	2320      	movs	r3, #32
 8005ab8:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005abc:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005ac0:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
          __HAL_UNLOCK(huart);
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
          return HAL_TIMEOUT;
 8005aca:	2003      	movs	r0, #3
 8005acc:	e01f      	b.n	8005b0e <UART_WaitOnFlagUntilTimeout+0xd4>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005ace:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad0:	e852 3f00 	ldrex	r3, [r2]
 8005ad4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad8:	e842 3100 	strex	r1, r3, [r2]
 8005adc:	2900      	cmp	r1, #0
 8005ade:	d1f6      	bne.n	8005ace <UART_WaitOnFlagUntilTimeout+0x94>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ae0:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae2:	f102 0308 	add.w	r3, r2, #8
 8005ae6:	e853 3f00 	ldrex	r3, [r3]
 8005aea:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aee:	3208      	adds	r2, #8
 8005af0:	e842 3100 	strex	r1, r3, [r2]
 8005af4:	2900      	cmp	r1, #0
 8005af6:	d1f3      	bne.n	8005ae0 <UART_WaitOnFlagUntilTimeout+0xa6>
        huart->gState = HAL_UART_STATE_READY;
 8005af8:	2320      	movs	r3, #32
 8005afa:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005afe:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        __HAL_UNLOCK(huart);
 8005b02:	2300      	movs	r3, #0
 8005b04:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
        return HAL_TIMEOUT;
 8005b08:	2003      	movs	r0, #3
 8005b0a:	e000      	b.n	8005b0e <UART_WaitOnFlagUntilTimeout+0xd4>
  return HAL_OK;
 8005b0c:	2000      	movs	r0, #0
}
 8005b0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08005b12 <UART_CheckIdleState>:
{
 8005b12:	b530      	push	{r4, r5, lr}
 8005b14:	b083      	sub	sp, #12
 8005b16:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 8005b1e:	f7fb ff85 	bl	8001a2c <HAL_GetTick>
 8005b22:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b24:	6822      	ldr	r2, [r4, #0]
 8005b26:	6812      	ldr	r2, [r2, #0]
 8005b28:	f012 0f08 	tst.w	r2, #8
 8005b2c:	d10f      	bne.n	8005b4e <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b2e:	6823      	ldr	r3, [r4, #0]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f013 0f04 	tst.w	r3, #4
 8005b36:	d118      	bne.n	8005b6a <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 8005b38:	2320      	movs	r3, #32
 8005b3a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005b3e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b42:	2000      	movs	r0, #0
 8005b44:	66e0      	str	r0, [r4, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 8005b46:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8005b4a:	b003      	add	sp, #12
 8005b4c:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b4e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b52:	9300      	str	r3, [sp, #0]
 8005b54:	4603      	mov	r3, r0
 8005b56:	2200      	movs	r2, #0
 8005b58:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005b5c:	4620      	mov	r0, r4
 8005b5e:	f7ff ff6c 	bl	8005a3a <UART_WaitOnFlagUntilTimeout>
 8005b62:	2800      	cmp	r0, #0
 8005b64:	d0e3      	beq.n	8005b2e <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 8005b66:	2003      	movs	r0, #3
 8005b68:	e7ef      	b.n	8005b4a <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b6a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b6e:	9300      	str	r3, [sp, #0]
 8005b70:	462b      	mov	r3, r5
 8005b72:	2200      	movs	r2, #0
 8005b74:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005b78:	4620      	mov	r0, r4
 8005b7a:	f7ff ff5e 	bl	8005a3a <UART_WaitOnFlagUntilTimeout>
 8005b7e:	2800      	cmp	r0, #0
 8005b80:	d0da      	beq.n	8005b38 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 8005b82:	2003      	movs	r0, #3
 8005b84:	e7e1      	b.n	8005b4a <UART_CheckIdleState+0x38>

08005b86 <HAL_UART_Init>:
  if (huart == NULL)
 8005b86:	b378      	cbz	r0, 8005be8 <HAL_UART_Init+0x62>
{
 8005b88:	b510      	push	{r4, lr}
 8005b8a:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8005b8c:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8005b90:	b30b      	cbz	r3, 8005bd6 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8005b92:	2324      	movs	r3, #36	; 0x24
 8005b94:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8005b98:	6822      	ldr	r2, [r4, #0]
 8005b9a:	6813      	ldr	r3, [r2, #0]
 8005b9c:	f023 0301 	bic.w	r3, r3, #1
 8005ba0:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ba2:	4620      	mov	r0, r4
 8005ba4:	f7ff fd20 	bl	80055e8 <UART_SetConfig>
 8005ba8:	2801      	cmp	r0, #1
 8005baa:	d013      	beq.n	8005bd4 <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005bac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005bae:	b9bb      	cbnz	r3, 8005be0 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005bb0:	6822      	ldr	r2, [r4, #0]
 8005bb2:	6853      	ldr	r3, [r2, #4]
 8005bb4:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8005bb8:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005bba:	6822      	ldr	r2, [r4, #0]
 8005bbc:	6893      	ldr	r3, [r2, #8]
 8005bbe:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8005bc2:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8005bc4:	6822      	ldr	r2, [r4, #0]
 8005bc6:	6813      	ldr	r3, [r2, #0]
 8005bc8:	f043 0301 	orr.w	r3, r3, #1
 8005bcc:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8005bce:	4620      	mov	r0, r4
 8005bd0:	f7ff ff9f 	bl	8005b12 <UART_CheckIdleState>
}
 8005bd4:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8005bd6:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 8005bda:	f7fb fa8f 	bl	80010fc <HAL_UART_MspInit>
 8005bde:	e7d8      	b.n	8005b92 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8005be0:	4620      	mov	r0, r4
 8005be2:	f7ff fec5 	bl	8005970 <UART_AdvFeatureConfig>
 8005be6:	e7e3      	b.n	8005bb0 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8005be8:	2001      	movs	r0, #1
}
 8005bea:	4770      	bx	lr

08005bec <UART_Start_Receive_DMA>:
{
 8005bec:	b510      	push	{r4, lr}
 8005bee:	4604      	mov	r4, r0
 8005bf0:	4613      	mov	r3, r2
  huart->pRxBuffPtr = pData;
 8005bf2:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxXferSize = Size;
 8005bf4:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005bfe:	2222      	movs	r2, #34	; 0x22
 8005c00:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  if (huart->hdmarx != NULL)
 8005c04:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8005c06:	b18a      	cbz	r2, 8005c2c <UART_Start_Receive_DMA+0x40>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005c08:	4922      	ldr	r1, [pc, #136]	; (8005c94 <UART_Start_Receive_DMA+0xa8>)
 8005c0a:	62d1      	str	r1, [r2, #44]	; 0x2c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005c0c:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8005c0e:	4922      	ldr	r1, [pc, #136]	; (8005c98 <UART_Start_Receive_DMA+0xac>)
 8005c10:	6311      	str	r1, [r2, #48]	; 0x30
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005c12:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8005c14:	4921      	ldr	r1, [pc, #132]	; (8005c9c <UART_Start_Receive_DMA+0xb0>)
 8005c16:	6351      	str	r1, [r2, #52]	; 0x34
    huart->hdmarx->XferAbortCallback = NULL;
 8005c18:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8005c1a:	2100      	movs	r1, #0
 8005c1c:	6391      	str	r1, [r2, #56]	; 0x38
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005c1e:	6801      	ldr	r1, [r0, #0]
 8005c20:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8005c22:	3124      	adds	r1, #36	; 0x24
 8005c24:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 8005c26:	f7fc f853 	bl	8001cd0 <HAL_DMA_Start_IT>
 8005c2a:	bb38      	cbnz	r0, 8005c7c <UART_Start_Receive_DMA+0x90>
  __HAL_UNLOCK(huart);
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005c32:	6923      	ldr	r3, [r4, #16]
 8005c34:	b143      	cbz	r3, 8005c48 <UART_Start_Receive_DMA+0x5c>
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c36:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c38:	e852 3f00 	ldrex	r3, [r2]
 8005c3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c40:	e842 3100 	strex	r1, r3, [r2]
 8005c44:	2900      	cmp	r1, #0
 8005c46:	d1f6      	bne.n	8005c36 <UART_Start_Receive_DMA+0x4a>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c48:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c4a:	f102 0308 	add.w	r3, r2, #8
 8005c4e:	e853 3f00 	ldrex	r3, [r3]
 8005c52:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c56:	3208      	adds	r2, #8
 8005c58:	e842 3100 	strex	r1, r3, [r2]
 8005c5c:	2900      	cmp	r1, #0
 8005c5e:	d1f3      	bne.n	8005c48 <UART_Start_Receive_DMA+0x5c>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c60:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c62:	f102 0308 	add.w	r3, r2, #8
 8005c66:	e853 3f00 	ldrex	r3, [r3]
 8005c6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c6e:	3208      	adds	r2, #8
 8005c70:	e842 3100 	strex	r1, r3, [r2]
 8005c74:	2900      	cmp	r1, #0
 8005c76:	d1f3      	bne.n	8005c60 <UART_Start_Receive_DMA+0x74>
  return HAL_OK;
 8005c78:	2000      	movs	r0, #0
}
 8005c7a:	bd10      	pop	{r4, pc}
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005c7c:	2310      	movs	r3, #16
 8005c7e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      __HAL_UNLOCK(huart);
 8005c82:	2300      	movs	r3, #0
 8005c84:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
      huart->RxState = HAL_UART_STATE_READY;
 8005c88:	2320      	movs	r3, #32
 8005c8a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
      return HAL_ERROR;
 8005c8e:	2001      	movs	r0, #1
 8005c90:	e7f3      	b.n	8005c7a <UART_Start_Receive_DMA+0x8e>
 8005c92:	bf00      	nop
 8005c94:	08005559 	.word	0x08005559
 8005c98:	0800553d 	.word	0x0800553d
 8005c9c:	08005199 	.word	0x08005199

08005ca0 <HAL_UART_Receive_DMA>:
{
 8005ca0:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8005ca2:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8005ca6:	2b20      	cmp	r3, #32
 8005ca8:	d11e      	bne.n	8005ce8 <HAL_UART_Receive_DMA+0x48>
    if ((pData == NULL) || (Size == 0U))
 8005caa:	b1f9      	cbz	r1, 8005cec <HAL_UART_Receive_DMA+0x4c>
 8005cac:	b302      	cbz	r2, 8005cf0 <HAL_UART_Receive_DMA+0x50>
    __HAL_LOCK(huart);
 8005cae:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d01e      	beq.n	8005cf4 <HAL_UART_Receive_DMA+0x54>
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	66c3      	str	r3, [r0, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005cc0:	6803      	ldr	r3, [r0, #0]
 8005cc2:	4c0d      	ldr	r4, [pc, #52]	; (8005cf8 <HAL_UART_Receive_DMA+0x58>)
 8005cc4:	42a3      	cmp	r3, r4
 8005cc6:	d00c      	beq.n	8005ce2 <HAL_UART_Receive_DMA+0x42>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8005cce:	d008      	beq.n	8005ce2 <HAL_UART_Receive_DMA+0x42>
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005cd0:	6804      	ldr	r4, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd2:	e854 3f00 	ldrex	r3, [r4]
 8005cd6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cda:	e844 3500 	strex	r5, r3, [r4]
 8005cde:	2d00      	cmp	r5, #0
 8005ce0:	d1f6      	bne.n	8005cd0 <HAL_UART_Receive_DMA+0x30>
    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005ce2:	f7ff ff83 	bl	8005bec <UART_Start_Receive_DMA>
 8005ce6:	e000      	b.n	8005cea <HAL_UART_Receive_DMA+0x4a>
    return HAL_BUSY;
 8005ce8:	2002      	movs	r0, #2
}
 8005cea:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8005cec:	2001      	movs	r0, #1
 8005cee:	e7fc      	b.n	8005cea <HAL_UART_Receive_DMA+0x4a>
 8005cf0:	2001      	movs	r0, #1
 8005cf2:	e7fa      	b.n	8005cea <HAL_UART_Receive_DMA+0x4a>
    __HAL_LOCK(huart);
 8005cf4:	2002      	movs	r0, #2
 8005cf6:	e7f8      	b.n	8005cea <HAL_UART_Receive_DMA+0x4a>
 8005cf8:	40008000 	.word	0x40008000

08005cfc <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005cfc:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8005cfe:	b92b      	cbnz	r3, 8005d0c <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 8005d00:	2301      	movs	r3, #1
 8005d02:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005d06:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 8005d0a:	4770      	bx	lr
{
 8005d0c:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005d0e:	6803      	ldr	r3, [r0, #0]
 8005d10:	689a      	ldr	r2, [r3, #8]
 8005d12:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005d16:	6899      	ldr	r1, [r3, #8]
 8005d18:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005d1a:	4d09      	ldr	r5, [pc, #36]	; (8005d40 <UARTEx_SetNbDataToProcess+0x44>)
 8005d1c:	5c6b      	ldrb	r3, [r5, r1]
 8005d1e:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005d20:	4c08      	ldr	r4, [pc, #32]	; (8005d44 <UARTEx_SetNbDataToProcess+0x48>)
 8005d22:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005d24:	fb93 f3f1 	sdiv	r3, r3, r1
 8005d28:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005d2c:	5cab      	ldrb	r3, [r5, r2]
 8005d2e:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005d30:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005d32:	fb93 f3f2 	sdiv	r3, r3, r2
 8005d36:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 8005d3a:	bc30      	pop	{r4, r5}
 8005d3c:	4770      	bx	lr
 8005d3e:	bf00      	nop
 8005d40:	08009874 	.word	0x08009874
 8005d44:	0800986c 	.word	0x0800986c

08005d48 <HAL_UARTEx_WakeupCallback>:
}
 8005d48:	4770      	bx	lr

08005d4a <HAL_UARTEx_RxFifoFullCallback>:
}
 8005d4a:	4770      	bx	lr

08005d4c <HAL_UARTEx_TxFifoEmptyCallback>:
}
 8005d4c:	4770      	bx	lr

08005d4e <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8005d4e:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d018      	beq.n	8005d88 <HAL_UARTEx_DisableFifoMode+0x3a>
 8005d56:	2301      	movs	r3, #1
 8005d58:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8005d5c:	2324      	movs	r3, #36	; 0x24
 8005d5e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d62:	6803      	ldr	r3, [r0, #0]
 8005d64:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8005d66:	6819      	ldr	r1, [r3, #0]
 8005d68:	f021 0101 	bic.w	r1, r1, #1
 8005d6c:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005d6e:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005d72:	2300      	movs	r3, #0
 8005d74:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d76:	6801      	ldr	r1, [r0, #0]
 8005d78:	600a      	str	r2, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 8005d7a:	2220      	movs	r2, #32
 8005d7c:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8005d80:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return HAL_OK;
 8005d84:	4618      	mov	r0, r3
 8005d86:	4770      	bx	lr
  __HAL_LOCK(huart);
 8005d88:	2002      	movs	r0, #2
}
 8005d8a:	4770      	bx	lr

08005d8c <HAL_UARTEx_SetTxFifoThreshold>:
{
 8005d8c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8005d8e:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d01d      	beq.n	8005dd2 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8005d96:	4604      	mov	r4, r0
 8005d98:	2301      	movs	r3, #1
 8005d9a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8005d9e:	2324      	movs	r3, #36	; 0x24
 8005da0:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005da4:	6803      	ldr	r3, [r0, #0]
 8005da6:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	f022 0201 	bic.w	r2, r2, #1
 8005dae:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005db0:	6802      	ldr	r2, [r0, #0]
 8005db2:	6893      	ldr	r3, [r2, #8]
 8005db4:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8005db8:	4319      	orrs	r1, r3
 8005dba:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8005dbc:	f7ff ff9e 	bl	8005cfc <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005dc0:	6823      	ldr	r3, [r4, #0]
 8005dc2:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8005dc4:	2320      	movs	r3, #32
 8005dc6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8005dca:	2000      	movs	r0, #0
 8005dcc:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8005dd0:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8005dd2:	2002      	movs	r0, #2
 8005dd4:	e7fc      	b.n	8005dd0 <HAL_UARTEx_SetTxFifoThreshold+0x44>

08005dd6 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8005dd6:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8005dd8:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d01d      	beq.n	8005e1c <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8005de0:	4604      	mov	r4, r0
 8005de2:	2301      	movs	r3, #1
 8005de4:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8005de8:	2324      	movs	r3, #36	; 0x24
 8005dea:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005dee:	6803      	ldr	r3, [r0, #0]
 8005df0:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	f022 0201 	bic.w	r2, r2, #1
 8005df8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005dfa:	6802      	ldr	r2, [r0, #0]
 8005dfc:	6893      	ldr	r3, [r2, #8]
 8005dfe:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8005e02:	4319      	orrs	r1, r3
 8005e04:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8005e06:	f7ff ff79 	bl	8005cfc <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e0a:	6823      	ldr	r3, [r4, #0]
 8005e0c:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8005e0e:	2320      	movs	r3, #32
 8005e10:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8005e14:	2000      	movs	r0, #0
 8005e16:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8005e1a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8005e1c:	2002      	movs	r0, #2
 8005e1e:	e7fc      	b.n	8005e1a <HAL_UARTEx_SetRxFifoThreshold+0x44>

08005e20 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005e20:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8005e22:	2300      	movs	r3, #0
 8005e24:	9301      	str	r3, [sp, #4]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005e26:	9b01      	ldr	r3, [sp, #4]
 8005e28:	3301      	adds	r3, #1
 8005e2a:	9301      	str	r3, [sp, #4]

    if (count > 200000U)
 8005e2c:	9a01      	ldr	r2, [sp, #4]
 8005e2e:	4b0f      	ldr	r3, [pc, #60]	; (8005e6c <USB_CoreReset+0x4c>)
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d815      	bhi.n	8005e60 <USB_CoreReset+0x40>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e34:	6903      	ldr	r3, [r0, #16]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	daf5      	bge.n	8005e26 <USB_CoreReset+0x6>

  /* Core Soft Reset */
  count = 0U;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005e3e:	6903      	ldr	r3, [r0, #16]
 8005e40:	f043 0301 	orr.w	r3, r3, #1
 8005e44:	6103      	str	r3, [r0, #16]

  do
  {
    count++;
 8005e46:	9b01      	ldr	r3, [sp, #4]
 8005e48:	3301      	adds	r3, #1
 8005e4a:	9301      	str	r3, [sp, #4]

    if (count > 200000U)
 8005e4c:	9a01      	ldr	r2, [sp, #4]
 8005e4e:	4b07      	ldr	r3, [pc, #28]	; (8005e6c <USB_CoreReset+0x4c>)
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d808      	bhi.n	8005e66 <USB_CoreReset+0x46>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005e54:	6903      	ldr	r3, [r0, #16]
 8005e56:	f013 0f01 	tst.w	r3, #1
 8005e5a:	d1f4      	bne.n	8005e46 <USB_CoreReset+0x26>

  return HAL_OK;
 8005e5c:	2000      	movs	r0, #0
 8005e5e:	e000      	b.n	8005e62 <USB_CoreReset+0x42>
      return HAL_TIMEOUT;
 8005e60:	2003      	movs	r0, #3
}
 8005e62:	b002      	add	sp, #8
 8005e64:	4770      	bx	lr
      return HAL_TIMEOUT;
 8005e66:	2003      	movs	r0, #3
 8005e68:	e7fb      	b.n	8005e62 <USB_CoreReset+0x42>
 8005e6a:	bf00      	nop
 8005e6c:	00030d40 	.word	0x00030d40

08005e70 <USB_CoreInit>:
{
 8005e70:	b084      	sub	sp, #16
 8005e72:	b510      	push	{r4, lr}
 8005e74:	4604      	mov	r4, r0
 8005e76:	f10d 0c0c 	add.w	ip, sp, #12
 8005e7a:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005e7e:	68c3      	ldr	r3, [r0, #12]
 8005e80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e84:	60c3      	str	r3, [r0, #12]
  ret = USB_CoreReset(USBx);
 8005e86:	f7ff ffcb 	bl	8005e20 <USB_CoreReset>
  if (cfg.battery_charging_enable == 0U)
 8005e8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005e8c:	b93b      	cbnz	r3, 8005e9e <USB_CoreInit+0x2e>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005e8e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005e90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e94:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8005e96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e9a:	b004      	add	sp, #16
 8005e9c:	4770      	bx	lr
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005e9e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005ea0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ea4:	63a3      	str	r3, [r4, #56]	; 0x38
 8005ea6:	e7f6      	b.n	8005e96 <USB_CoreInit+0x26>

08005ea8 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005ea8:	6883      	ldr	r3, [r0, #8]
 8005eaa:	f043 0301 	orr.w	r3, r3, #1
 8005eae:	6083      	str	r3, [r0, #8]
}
 8005eb0:	2000      	movs	r0, #0
 8005eb2:	4770      	bx	lr

08005eb4 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005eb4:	6883      	ldr	r3, [r0, #8]
 8005eb6:	f023 0301 	bic.w	r3, r3, #1
 8005eba:	6083      	str	r3, [r0, #8]
}
 8005ebc:	2000      	movs	r0, #0
 8005ebe:	4770      	bx	lr

08005ec0 <USB_FlushTxFifo>:
{
 8005ec0:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	9301      	str	r3, [sp, #4]
    count++;
 8005ec6:	9b01      	ldr	r3, [sp, #4]
 8005ec8:	3301      	adds	r3, #1
 8005eca:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8005ecc:	9a01      	ldr	r2, [sp, #4]
 8005ece:	4b0f      	ldr	r3, [pc, #60]	; (8005f0c <USB_FlushTxFifo+0x4c>)
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d815      	bhi.n	8005f00 <USB_FlushTxFifo+0x40>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ed4:	6903      	ldr	r3, [r0, #16]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	daf5      	bge.n	8005ec6 <USB_FlushTxFifo+0x6>
  count = 0U;
 8005eda:	2300      	movs	r3, #0
 8005edc:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005ede:	0189      	lsls	r1, r1, #6
 8005ee0:	f041 0120 	orr.w	r1, r1, #32
 8005ee4:	6101      	str	r1, [r0, #16]
    count++;
 8005ee6:	9b01      	ldr	r3, [sp, #4]
 8005ee8:	3301      	adds	r3, #1
 8005eea:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8005eec:	9a01      	ldr	r2, [sp, #4]
 8005eee:	4b07      	ldr	r3, [pc, #28]	; (8005f0c <USB_FlushTxFifo+0x4c>)
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d808      	bhi.n	8005f06 <USB_FlushTxFifo+0x46>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005ef4:	6903      	ldr	r3, [r0, #16]
 8005ef6:	f013 0f20 	tst.w	r3, #32
 8005efa:	d1f4      	bne.n	8005ee6 <USB_FlushTxFifo+0x26>
  return HAL_OK;
 8005efc:	2000      	movs	r0, #0
 8005efe:	e000      	b.n	8005f02 <USB_FlushTxFifo+0x42>
      return HAL_TIMEOUT;
 8005f00:	2003      	movs	r0, #3
}
 8005f02:	b002      	add	sp, #8
 8005f04:	4770      	bx	lr
      return HAL_TIMEOUT;
 8005f06:	2003      	movs	r0, #3
 8005f08:	e7fb      	b.n	8005f02 <USB_FlushTxFifo+0x42>
 8005f0a:	bf00      	nop
 8005f0c:	00030d40 	.word	0x00030d40

08005f10 <USB_FlushRxFifo>:
{
 8005f10:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8005f12:	2300      	movs	r3, #0
 8005f14:	9301      	str	r3, [sp, #4]
    count++;
 8005f16:	9b01      	ldr	r3, [sp, #4]
 8005f18:	3301      	adds	r3, #1
 8005f1a:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8005f1c:	9a01      	ldr	r2, [sp, #4]
 8005f1e:	4b0e      	ldr	r3, [pc, #56]	; (8005f58 <USB_FlushRxFifo+0x48>)
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d813      	bhi.n	8005f4c <USB_FlushRxFifo+0x3c>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f24:	6903      	ldr	r3, [r0, #16]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	daf5      	bge.n	8005f16 <USB_FlushRxFifo+0x6>
  count = 0U;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005f2e:	2310      	movs	r3, #16
 8005f30:	6103      	str	r3, [r0, #16]
    count++;
 8005f32:	9b01      	ldr	r3, [sp, #4]
 8005f34:	3301      	adds	r3, #1
 8005f36:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8005f38:	9a01      	ldr	r2, [sp, #4]
 8005f3a:	4b07      	ldr	r3, [pc, #28]	; (8005f58 <USB_FlushRxFifo+0x48>)
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d808      	bhi.n	8005f52 <USB_FlushRxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005f40:	6903      	ldr	r3, [r0, #16]
 8005f42:	f013 0f10 	tst.w	r3, #16
 8005f46:	d1f4      	bne.n	8005f32 <USB_FlushRxFifo+0x22>
  return HAL_OK;
 8005f48:	2000      	movs	r0, #0
 8005f4a:	e000      	b.n	8005f4e <USB_FlushRxFifo+0x3e>
      return HAL_TIMEOUT;
 8005f4c:	2003      	movs	r0, #3
}
 8005f4e:	b002      	add	sp, #8
 8005f50:	4770      	bx	lr
      return HAL_TIMEOUT;
 8005f52:	2003      	movs	r0, #3
 8005f54:	e7fb      	b.n	8005f4e <USB_FlushRxFifo+0x3e>
 8005f56:	bf00      	nop
 8005f58:	00030d40 	.word	0x00030d40

08005f5c <USB_WritePacket>:
{
 8005f5c:	b510      	push	{r4, lr}
  count32b = ((uint32_t)len + 3U) / 4U;
 8005f5e:	1cdc      	adds	r4, r3, #3
 8005f60:	08a4      	lsrs	r4, r4, #2
  for (i = 0U; i < count32b; i++)
 8005f62:	f04f 0e00 	mov.w	lr, #0
 8005f66:	e009      	b.n	8005f7c <USB_WritePacket+0x20>
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005f68:	eb00 3c02 	add.w	ip, r0, r2, lsl #12
 8005f6c:	f50c 5c80 	add.w	ip, ip, #4096	; 0x1000
 8005f70:	f851 3b04 	ldr.w	r3, [r1], #4
 8005f74:	f8cc 3000 	str.w	r3, [ip]
  for (i = 0U; i < count32b; i++)
 8005f78:	f10e 0e01 	add.w	lr, lr, #1
 8005f7c:	45a6      	cmp	lr, r4
 8005f7e:	d3f3      	bcc.n	8005f68 <USB_WritePacket+0xc>
}
 8005f80:	2000      	movs	r0, #0
 8005f82:	bd10      	pop	{r4, pc}

08005f84 <USB_ReadPacket>:
{
 8005f84:	b510      	push	{r4, lr}
 8005f86:	4684      	mov	ip, r0
 8005f88:	4608      	mov	r0, r1
  uint32_t count32b = (uint32_t)len >> 2U;
 8005f8a:	ea4f 0e92 	mov.w	lr, r2, lsr #2
  uint16_t remaining_bytes = len % 4U;
 8005f8e:	f002 0203 	and.w	r2, r2, #3
  for (i = 0U; i < count32b; i++)
 8005f92:	2300      	movs	r3, #0
 8005f94:	e005      	b.n	8005fa2 <USB_ReadPacket+0x1e>
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005f96:	f50c 5180 	add.w	r1, ip, #4096	; 0x1000
 8005f9a:	6809      	ldr	r1, [r1, #0]
 8005f9c:	f840 1b04 	str.w	r1, [r0], #4
  for (i = 0U; i < count32b; i++)
 8005fa0:	3301      	adds	r3, #1
 8005fa2:	4573      	cmp	r3, lr
 8005fa4:	d3f7      	bcc.n	8005f96 <USB_ReadPacket+0x12>
  if (remaining_bytes != 0U)
 8005fa6:	b17a      	cbz	r2, 8005fc8 <USB_ReadPacket+0x44>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005fa8:	f50c 5c80 	add.w	ip, ip, #4096	; 0x1000
 8005fac:	f8dc 4000 	ldr.w	r4, [ip]
    i = 0U;
 8005fb0:	2100      	movs	r1, #0
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005fb2:	b2cb      	uxtb	r3, r1
 8005fb4:	00db      	lsls	r3, r3, #3
 8005fb6:	fa24 f303 	lsr.w	r3, r4, r3
 8005fba:	f800 3b01 	strb.w	r3, [r0], #1
      i++;
 8005fbe:	3101      	adds	r1, #1
      remaining_bytes--;
 8005fc0:	3a01      	subs	r2, #1
 8005fc2:	b292      	uxth	r2, r2
    } while (remaining_bytes != 0U);
 8005fc4:	2a00      	cmp	r2, #0
 8005fc6:	d1f4      	bne.n	8005fb2 <USB_ReadPacket+0x2e>
}
 8005fc8:	bd10      	pop	{r4, pc}

08005fca <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8005fca:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8005fcc:	6980      	ldr	r0, [r0, #24]
}
 8005fce:	4010      	ands	r0, r2
 8005fd0:	4770      	bx	lr

08005fd2 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8005fd2:	6940      	ldr	r0, [r0, #20]
}
 8005fd4:	f000 0001 	and.w	r0, r0, #1
 8005fd8:	4770      	bx	lr

08005fda <USB_SetCurrentMode>:
{
 8005fda:	b538      	push	{r3, r4, r5, lr}
 8005fdc:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005fde:	68c3      	ldr	r3, [r0, #12]
 8005fe0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005fe4:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8005fe6:	2901      	cmp	r1, #1
 8005fe8:	d013      	beq.n	8006012 <USB_SetCurrentMode+0x38>
  else if (mode == USB_DEVICE_MODE)
 8005fea:	bb19      	cbnz	r1, 8006034 <USB_SetCurrentMode+0x5a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005fec:	68c3      	ldr	r3, [r0, #12]
 8005fee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ff2:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 8005ff4:	2400      	movs	r4, #0
      HAL_Delay(1U);
 8005ff6:	2001      	movs	r0, #1
 8005ff8:	f7fb fd1e 	bl	8001a38 <HAL_Delay>
      ms++;
 8005ffc:	3401      	adds	r4, #1
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005ffe:	4628      	mov	r0, r5
 8006000:	f7ff ffe7 	bl	8005fd2 <USB_GetMode>
 8006004:	b108      	cbz	r0, 800600a <USB_SetCurrentMode+0x30>
 8006006:	2c31      	cmp	r4, #49	; 0x31
 8006008:	d9f5      	bls.n	8005ff6 <USB_SetCurrentMode+0x1c>
  if (ms == 50U)
 800600a:	2c32      	cmp	r4, #50	; 0x32
 800600c:	d014      	beq.n	8006038 <USB_SetCurrentMode+0x5e>
  return HAL_OK;
 800600e:	2000      	movs	r0, #0
}
 8006010:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006012:	68c3      	ldr	r3, [r0, #12]
 8006014:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006018:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 800601a:	2400      	movs	r4, #0
      HAL_Delay(1U);
 800601c:	2001      	movs	r0, #1
 800601e:	f7fb fd0b 	bl	8001a38 <HAL_Delay>
      ms++;
 8006022:	3401      	adds	r4, #1
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006024:	4628      	mov	r0, r5
 8006026:	f7ff ffd4 	bl	8005fd2 <USB_GetMode>
 800602a:	2801      	cmp	r0, #1
 800602c:	d0ed      	beq.n	800600a <USB_SetCurrentMode+0x30>
 800602e:	2c31      	cmp	r4, #49	; 0x31
 8006030:	d9f4      	bls.n	800601c <USB_SetCurrentMode+0x42>
 8006032:	e7ea      	b.n	800600a <USB_SetCurrentMode+0x30>
    return HAL_ERROR;
 8006034:	2001      	movs	r0, #1
 8006036:	e7eb      	b.n	8006010 <USB_SetCurrentMode+0x36>
    return HAL_ERROR;
 8006038:	2001      	movs	r0, #1
 800603a:	e7e9      	b.n	8006010 <USB_SetCurrentMode+0x36>

0800603c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800603c:	b084      	sub	sp, #16
 800603e:	b538      	push	{r3, r4, r5, lr}
 8006040:	4604      	mov	r4, r0
 8006042:	ad05      	add	r5, sp, #20
 8006044:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006048:	2300      	movs	r3, #0
 800604a:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800604e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006050:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006054:	6383      	str	r3, [r0, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 8006056:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006058:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800605c:	6383      	str	r3, [r0, #56]	; 0x38

  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800605e:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 8006062:	f023 0304 	bic.w	r3, r3, #4
 8006066:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800606a:	2110      	movs	r1, #16
 800606c:	f7ff ff28 	bl	8005ec0 <USB_FlushTxFifo>
 8006070:	4605      	mov	r5, r0
 8006072:	b100      	cbz	r0, 8006076 <USB_HostInit+0x3a>
  {
    ret = HAL_ERROR;
 8006074:	2501      	movs	r5, #1
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006076:	4620      	mov	r0, r4
 8006078:	f7ff ff4a 	bl	8005f10 <USB_FlushRxFifo>
 800607c:	b100      	cbz	r0, 8006080 <USB_HostInit+0x44>
  {
    ret = HAL_ERROR;
 800607e:	2501      	movs	r5, #1
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006080:	2200      	movs	r2, #0
 8006082:	e009      	b.n	8006098 <USB_HostInit+0x5c>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006084:	eb04 1342 	add.w	r3, r4, r2, lsl #5
 8006088:	f04f 31ff 	mov.w	r1, #4294967295
 800608c:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    USBx_HC(i)->HCINTMSK = 0U;
 8006090:	2100      	movs	r1, #0
 8006092:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
  for (i = 0U; i < cfg.Host_channels; i++)
 8006096:	3201      	adds	r2, #1
 8006098:	9b06      	ldr	r3, [sp, #24]
 800609a:	4293      	cmp	r3, r2
 800609c:	d8f2      	bhi.n	8006084 <USB_HostInit+0x48>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800609e:	2300      	movs	r3, #0
 80060a0:	61a3      	str	r3, [r4, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80060a2:	f04f 33ff 	mov.w	r3, #4294967295
 80060a6:	6163      	str	r3, [r4, #20]

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 80060a8:	2380      	movs	r3, #128	; 0x80
 80060aa:	6263      	str	r3, [r4, #36]	; 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80060ac:	f503 03c0 	add.w	r3, r3, #6291456	; 0x600000
 80060b0:	62a3      	str	r3, [r4, #40]	; 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80060b2:	4b08      	ldr	r3, [pc, #32]	; (80060d4 <USB_HostInit+0x98>)
 80060b4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80060b8:	69a3      	ldr	r3, [r4, #24]
 80060ba:	f043 0310 	orr.w	r3, r3, #16
 80060be:	61a3      	str	r3, [r4, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80060c0:	69a2      	ldr	r2, [r4, #24]
 80060c2:	4b05      	ldr	r3, [pc, #20]	; (80060d8 <USB_HostInit+0x9c>)
 80060c4:	4313      	orrs	r3, r2
 80060c6:	61a3      	str	r3, [r4, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
}
 80060c8:	4628      	mov	r0, r5
 80060ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80060ce:	b004      	add	sp, #16
 80060d0:	4770      	bx	lr
 80060d2:	bf00      	nop
 80060d4:	004000e0 	.word	0x004000e0
 80060d8:	a3200008 	.word	0xa3200008

080060dc <USB_InitFSLSPClkSel>:
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80060dc:	f500 6c80 	add.w	ip, r0, #1024	; 0x400
 80060e0:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 80060e4:	f023 0303 	bic.w	r3, r3, #3
 80060e8:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80060ec:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 80060f0:	f001 0203 	and.w	r2, r1, #3
 80060f4:	4313      	orrs	r3, r2
 80060f6:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400

  if (freq == HCFG_48_MHZ)
 80060fa:	2901      	cmp	r1, #1
 80060fc:	d003      	beq.n	8006106 <USB_InitFSLSPClkSel+0x2a>
  {
    USBx_HOST->HFIR = 48000U;
  }
  else if (freq == HCFG_6_MHZ)
 80060fe:	2902      	cmp	r1, #2
 8006100:	d006      	beq.n	8006110 <USB_InitFSLSPClkSel+0x34>
  {
    /* ... */
  }

  return HAL_OK;
}
 8006102:	2000      	movs	r0, #0
 8006104:	4770      	bx	lr
    USBx_HOST->HFIR = 48000U;
 8006106:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800610a:	f8cc 3004 	str.w	r3, [ip, #4]
 800610e:	e7f8      	b.n	8006102 <USB_InitFSLSPClkSel+0x26>
    USBx_HOST->HFIR = 6000U;
 8006110:	f241 7370 	movw	r3, #6000	; 0x1770
 8006114:	f8cc 3004 	str.w	r3, [ip, #4]
 8006118:	e7f3      	b.n	8006102 <USB_InitFSLSPClkSel+0x26>

0800611a <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800611a:	b530      	push	{r4, r5, lr}
 800611c:	b083      	sub	sp, #12
 800611e:	4604      	mov	r4, r0
  uint32_t USBx_BASE = (uint32_t)USBx;

  __IO uint32_t hprt0 = 0U;
 8006120:	2500      	movs	r5, #0
 8006122:	9501      	str	r5, [sp, #4]

  hprt0 = USBx_HPRT0;
 8006124:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8006128:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800612a:	9b01      	ldr	r3, [sp, #4]
 800612c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006130:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006132:	9b01      	ldr	r3, [sp, #4]
 8006134:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006138:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  HAL_Delay(100U);                                 /* See Note #1 */
 800613c:	2064      	movs	r0, #100	; 0x64
 800613e:	f7fb fc7b 	bl	8001a38 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006142:	9b01      	ldr	r3, [sp, #4]
 8006144:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006148:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
  HAL_Delay(10U);
 800614c:	200a      	movs	r0, #10
 800614e:	f7fb fc73 	bl	8001a38 <HAL_Delay>

  return HAL_OK;
}
 8006152:	4628      	mov	r0, r5
 8006154:	b003      	add	sp, #12
 8006156:	bd30      	pop	{r4, r5, pc}

08006158 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006158:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 800615a:	2300      	movs	r3, #0
 800615c:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 800615e:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8006162:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006164:	9b01      	ldr	r3, [sp, #4]
 8006166:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800616a:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800616c:	9b01      	ldr	r3, [sp, #4]
 800616e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8006172:	d101      	bne.n	8006178 <USB_DriveVbus+0x20>
 8006174:	2901      	cmp	r1, #1
 8006176:	d00c      	beq.n	8006192 <USB_DriveVbus+0x3a>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006178:	9b01      	ldr	r3, [sp, #4]
 800617a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800617e:	d005      	beq.n	800618c <USB_DriveVbus+0x34>
 8006180:	b921      	cbnz	r1, 800618c <USB_DriveVbus+0x34>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006182:	9b01      	ldr	r3, [sp, #4]
 8006184:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006188:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  return HAL_OK;
}
 800618c:	2000      	movs	r0, #0
 800618e:	b002      	add	sp, #8
 8006190:	4770      	bx	lr
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006192:	9b01      	ldr	r3, [sp, #4]
 8006194:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006198:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
 800619c:	e7ec      	b.n	8006178 <USB_DriveVbus+0x20>

0800619e <USB_GetHostSpeed>:
  *          This parameter can be one of these values:
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800619e:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 80061a0:	2300      	movs	r3, #0
 80061a2:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 80061a4:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 80061a8:	9301      	str	r3, [sp, #4]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80061aa:	9801      	ldr	r0, [sp, #4]
}
 80061ac:	f3c0 4041 	ubfx	r0, r0, #17, #2
 80061b0:	b002      	add	sp, #8
 80061b2:	4770      	bx	lr

080061b4 <USB_GetCurrentFrame>:
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80061b4:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80061b8:	6880      	ldr	r0, [r0, #8]
}
 80061ba:	b280      	uxth	r0, r0
 80061bc:	4770      	bx	lr

080061be <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80061be:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061c2:	4691      	mov	r9, r2
 80061c4:	461c      	mov	r4, r3
 80061c6:	f89d 5024 	ldrb.w	r5, [sp, #36]	; 0x24
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80061ca:	eb00 1641 	add.w	r6, r0, r1, lsl #5
 80061ce:	f506 63a0 	add.w	r3, r6, #1280	; 0x500
 80061d2:	f04f 32ff 	mov.w	r2, #4294967295
 80061d6:	609a      	str	r2, [r3, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80061d8:	2d03      	cmp	r5, #3
 80061da:	d86d      	bhi.n	80062b8 <USB_HC_Init+0xfa>
 80061dc:	e8df f005 	tbb	[pc, r5]
 80061e0:	50025e02 	.word	0x50025e02
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80061e4:	f240 429d 	movw	r2, #1181	; 0x49d
 80061e8:	60da      	str	r2, [r3, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80061ea:	f019 0f80 	tst.w	r9, #128	; 0x80
 80061ee:	d141      	bne.n	8006274 <USB_HC_Init+0xb6>
  HAL_StatusTypeDef ret = HAL_OK;
 80061f0:	2700      	movs	r7, #0
      ret = HAL_ERROR;
      break;
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80061f2:	68da      	ldr	r2, [r3, #12]
 80061f4:	f042 0202 	orr.w	r2, r2, #2
 80061f8:	60da      	str	r2, [r3, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80061fa:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
 80061fe:	f001 010f 	and.w	r1, r1, #15
 8006202:	2201      	movs	r2, #1
 8006204:	408a      	lsls	r2, r1
 8006206:	4313      	orrs	r3, r2
 8006208:	f8c0 3418 	str.w	r3, [r0, #1048]	; 0x418

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800620c:	6983      	ldr	r3, [r0, #24]
 800620e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006212:	6183      	str	r3, [r0, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006214:	f019 0f80 	tst.w	r9, #128	; 0x80
 8006218:	d150      	bne.n	80062bc <USB_HC_Init+0xfe>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
  }
  else
  {
    HCcharEpDir = 0U;
 800621a:	f04f 0800 	mov.w	r8, #0
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800621e:	f7ff ffbe 	bl	800619e <USB_GetHostSpeed>

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006222:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8006226:	2b02      	cmp	r3, #2
 8006228:	d04b      	beq.n	80062c2 <USB_HC_Init+0x104>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
  }
  else
  {
    HCcharLowSpeed = 0U;
 800622a:	2200      	movs	r2, #0
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800622c:	05a3      	lsls	r3, r4, #22
 800622e:	f003 53fe 	and.w	r3, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006232:	ea4f 29c9 	mov.w	r9, r9, lsl #11
 8006236:	f409 49f0 	and.w	r9, r9, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800623a:	ea43 0309 	orr.w	r3, r3, r9
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800623e:	04a9      	lsls	r1, r5, #18
 8006240:	f401 2140 	and.w	r1, r1, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006244:	430b      	orrs	r3, r1
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006246:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 800624a:	f3c1 010a 	ubfx	r1, r1, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800624e:	430b      	orrs	r3, r1
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006250:	ea43 0308 	orr.w	r3, r3, r8
 8006254:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006256:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800625a:	2d03      	cmp	r5, #3
 800625c:	d001      	beq.n	8006262 <USB_HC_Init+0xa4>
 800625e:	2d01      	cmp	r5, #1
 8006260:	d105      	bne.n	800626e <USB_HC_Init+0xb0>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006262:	f8d6 3500 	ldr.w	r3, [r6, #1280]	; 0x500
 8006266:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800626a:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
  }

  return ret;
}
 800626e:	4638      	mov	r0, r7
 8006270:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006274:	68da      	ldr	r2, [r3, #12]
 8006276:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800627a:	60da      	str	r2, [r3, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800627c:	2700      	movs	r7, #0
 800627e:	e7b8      	b.n	80061f2 <USB_HC_Init+0x34>
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006280:	f240 629d 	movw	r2, #1693	; 0x69d
 8006284:	60da      	str	r2, [r3, #12]
      if ((epnum & 0x80U) == 0x80U)
 8006286:	f019 0f80 	tst.w	r9, #128	; 0x80
 800628a:	d101      	bne.n	8006290 <USB_HC_Init+0xd2>
  HAL_StatusTypeDef ret = HAL_OK;
 800628c:	2700      	movs	r7, #0
 800628e:	e7b0      	b.n	80061f2 <USB_HC_Init+0x34>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006290:	68da      	ldr	r2, [r3, #12]
 8006292:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006296:	60da      	str	r2, [r3, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006298:	2700      	movs	r7, #0
 800629a:	e7aa      	b.n	80061f2 <USB_HC_Init+0x34>
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800629c:	f240 2225 	movw	r2, #549	; 0x225
 80062a0:	60da      	str	r2, [r3, #12]
      if ((epnum & 0x80U) == 0x80U)
 80062a2:	f019 0f80 	tst.w	r9, #128	; 0x80
 80062a6:	d101      	bne.n	80062ac <USB_HC_Init+0xee>
  HAL_StatusTypeDef ret = HAL_OK;
 80062a8:	2700      	movs	r7, #0
 80062aa:	e7a2      	b.n	80061f2 <USB_HC_Init+0x34>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80062ac:	68da      	ldr	r2, [r3, #12]
 80062ae:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80062b2:	60da      	str	r2, [r3, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80062b4:	2700      	movs	r7, #0
 80062b6:	e79c      	b.n	80061f2 <USB_HC_Init+0x34>
  switch (ep_type)
 80062b8:	2701      	movs	r7, #1
 80062ba:	e79a      	b.n	80061f2 <USB_HC_Init+0x34>
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80062bc:	f44f 4800 	mov.w	r8, #32768	; 0x8000
 80062c0:	e7ad      	b.n	800621e <USB_HC_Init+0x60>
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80062c2:	2802      	cmp	r0, #2
 80062c4:	d002      	beq.n	80062cc <USB_HC_Init+0x10e>
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80062c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80062ca:	e7af      	b.n	800622c <USB_HC_Init+0x6e>
    HCcharLowSpeed = 0U;
 80062cc:	2200      	movs	r2, #0
 80062ce:	e7ad      	b.n	800622c <USB_HC_Init+0x6e>

080062d0 <USB_HC_StartXfer>:
  * @param  USBx  Selected device
  * @param  hc  pointer to host channel structure
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc)
{
 80062d0:	b510      	push	{r4, lr}
 80062d2:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80062d4:	784b      	ldrb	r3, [r1, #1]
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80062d6:	694a      	ldr	r2, [r1, #20]
 80062d8:	b182      	cbz	r2, 80062fc <USB_HC_StartXfer+0x2c>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80062da:	890c      	ldrh	r4, [r1, #8]
 80062dc:	eb02 0c04 	add.w	ip, r2, r4
 80062e0:	f10c 3cff 	add.w	ip, ip, #4294967295
 80062e4:	fbbc fcf4 	udiv	ip, ip, r4
 80062e8:	fa1f fc8c 	uxth.w	ip, ip

    if (num_packets > max_hc_pkt_count)
 80062ec:	f5bc 7f80 	cmp.w	ip, #256	; 0x100
 80062f0:	d906      	bls.n	8006300 <USB_HC_StartXfer+0x30>
    {
      num_packets = max_hc_pkt_count;
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80062f2:	0224      	lsls	r4, r4, #8
 80062f4:	610c      	str	r4, [r1, #16]
      num_packets = max_hc_pkt_count;
 80062f6:	f44f 7c80 	mov.w	ip, #256	; 0x100
 80062fa:	e001      	b.n	8006300 <USB_HC_StartXfer+0x30>
    }
  }
  else
  {
    num_packets = 1U;
 80062fc:	f04f 0c01 	mov.w	ip, #1

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006300:	78cc      	ldrb	r4, [r1, #3]
 8006302:	2c00      	cmp	r4, #0
 8006304:	d04c      	beq.n	80063a0 <USB_HC_StartXfer+0xd0>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006306:	890a      	ldrh	r2, [r1, #8]
 8006308:	fb02 f20c 	mul.w	r2, r2, ip
 800630c:	610a      	str	r2, [r1, #16]
  {
    hc->XferSize = hc->xfer_len;
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800630e:	690a      	ldr	r2, [r1, #16]
 8006310:	f3c2 0212 	ubfx	r2, r2, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006314:	4c35      	ldr	r4, [pc, #212]	; (80063ec <USB_HC_StartXfer+0x11c>)
 8006316:	ea04 4ccc 	and.w	ip, r4, ip, lsl #19
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800631a:	ea42 020c 	orr.w	r2, r2, ip
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800631e:	f891 c00a 	ldrb.w	ip, [r1, #10]
 8006322:	ea4f 7c4c 	mov.w	ip, ip, lsl #29
 8006326:	f00c 4cc0 	and.w	ip, ip, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800632a:	eb00 1343 	add.w	r3, r0, r3, lsl #5
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800632e:	ea42 020c 	orr.w	r2, r2, ip
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006332:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006336:	f500 6480 	add.w	r4, r0, #1024	; 0x400
 800633a:	68a2      	ldr	r2, [r4, #8]
 800633c:	f012 0f01 	tst.w	r2, #1
 8006340:	bf0c      	ite	eq
 8006342:	f04f 0c01 	moveq.w	ip, #1
 8006346:	f04f 0c00 	movne.w	ip, #0
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800634a:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
 800634e:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8006352:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006356:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
 800635a:	ea42 724c 	orr.w	r2, r2, ip, lsl #29
 800635e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006362:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
 8006366:	9201      	str	r2, [sp, #4]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006368:	9a01      	ldr	r2, [sp, #4]
 800636a:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 800636e:	9201      	str	r2, [sp, #4]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006370:	78ca      	ldrb	r2, [r1, #3]
 8006372:	b1ba      	cbz	r2, 80063a4 <USB_HC_StartXfer+0xd4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006374:	9a01      	ldr	r2, [sp, #4]
 8006376:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800637a:	9201      	str	r2, [sp, #4]
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800637c:	9a01      	ldr	r2, [sp, #4]
 800637e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8006382:	9201      	str	r2, [sp, #4]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006384:	9a01      	ldr	r2, [sp, #4]
 8006386:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800638a:	78cb      	ldrb	r3, [r1, #3]
 800638c:	b9fb      	cbnz	r3, 80063ce <USB_HC_StartXfer+0xfe>
 800638e:	694b      	ldr	r3, [r1, #20]
 8006390:	b1eb      	cbz	r3, 80063ce <USB_HC_StartXfer+0xfe>
  {
    switch (hc->ep_type)
 8006392:	79ca      	ldrb	r2, [r1, #7]
 8006394:	2a03      	cmp	r2, #3
 8006396:	d815      	bhi.n	80063c4 <USB_HC_StartXfer+0xf4>
 8006398:	e8df f002 	tbb	[pc, r2]
 800639c:	1c091c09 	.word	0x1c091c09
    hc->XferSize = hc->xfer_len;
 80063a0:	610a      	str	r2, [r1, #16]
 80063a2:	e7b4      	b.n	800630e <USB_HC_StartXfer+0x3e>
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80063a4:	9a01      	ldr	r2, [sp, #4]
 80063a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80063aa:	9201      	str	r2, [sp, #4]
 80063ac:	e7e6      	b.n	800637c <USB_HC_StartXfer+0xac>
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80063ae:	3303      	adds	r3, #3

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80063b0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80063b2:	b292      	uxth	r2, r2
 80063b4:	f3c3 038f 	ubfx	r3, r3, #2, #16
 80063b8:	429a      	cmp	r2, r3
 80063ba:	d203      	bcs.n	80063c4 <USB_HC_StartXfer+0xf4>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80063bc:	6983      	ldr	r3, [r0, #24]
 80063be:	f043 0320 	orr.w	r3, r3, #32
 80063c2:	6183      	str	r3, [r0, #24]
      default:
        break;
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len);
 80063c4:	8a8b      	ldrh	r3, [r1, #20]
 80063c6:	784a      	ldrb	r2, [r1, #1]
 80063c8:	68c9      	ldr	r1, [r1, #12]
 80063ca:	f7ff fdc7 	bl	8005f5c <USB_WritePacket>
  }

  return HAL_OK;
}
 80063ce:	2000      	movs	r0, #0
 80063d0:	b002      	add	sp, #8
 80063d2:	bd10      	pop	{r4, pc}
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80063d4:	3303      	adds	r3, #3
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80063d6:	6922      	ldr	r2, [r4, #16]
 80063d8:	b292      	uxth	r2, r2
 80063da:	f3c3 038f 	ubfx	r3, r3, #2, #16
 80063de:	429a      	cmp	r2, r3
 80063e0:	d2f0      	bcs.n	80063c4 <USB_HC_StartXfer+0xf4>
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80063e2:	6983      	ldr	r3, [r0, #24]
 80063e4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80063e8:	6183      	str	r3, [r0, #24]
 80063ea:	e7eb      	b.n	80063c4 <USB_HC_StartXfer+0xf4>
 80063ec:	1ff80000 	.word	0x1ff80000

080063f0 <USB_HC_ReadInterrupt>:
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80063f0:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80063f4:	6940      	ldr	r0, [r0, #20]
}
 80063f6:	b280      	uxth	r0, r0
 80063f8:	4770      	bx	lr

080063fa <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80063fa:	b410      	push	{r4}
 80063fc:	b083      	sub	sp, #12
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t hcnum = (uint32_t)hc_num;
  __IO uint32_t count = 0U;
 80063fe:	2300      	movs	r3, #0
 8006400:	9301      	str	r3, [sp, #4]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006402:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8006406:	f501 6ca0 	add.w	ip, r1, #1280	; 0x500
 800640a:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 800640e:	f3c3 4381 	ubfx	r3, r3, #18, #2
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006412:	f8d1 2500 	ldr.w	r2, [r1, #1280]	; 0x500

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8006416:	6884      	ldr	r4, [r0, #8]
 8006418:	f014 0f20 	tst.w	r4, #32
 800641c:	d002      	beq.n	8006424 <USB_HC_Halt+0x2a>
 800641e:	0fd2      	lsrs	r2, r2, #31
 8006420:	2a00      	cmp	r2, #0
 8006422:	d051      	beq.n	80064c8 <USB_HC_Halt+0xce>
  {
    return HAL_OK;
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006424:	b323      	cbz	r3, 8006470 <USB_HC_Halt+0x76>
 8006426:	2b02      	cmp	r3, #2
 8006428:	d022      	beq.n	8006470 <USB_HC_Halt+0x76>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800642a:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 800642e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006432:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006436:	f8d0 3410 	ldr.w	r3, [r0, #1040]	; 0x410
 800643a:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
 800643e:	d148      	bne.n	80064d2 <USB_HC_Halt+0xd8>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006440:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8006444:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006448:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800644c:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8006450:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006454:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      do
      {
        count++;
 8006458:	9b01      	ldr	r3, [sp, #4]
 800645a:	3301      	adds	r3, #1
 800645c:	9301      	str	r3, [sp, #4]

        if (count > 1000U)
 800645e:	9b01      	ldr	r3, [sp, #4]
 8006460:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006464:	d830      	bhi.n	80064c8 <USB_HC_Halt+0xce>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006466:	f8dc 3000 	ldr.w	r3, [ip]
 800646a:	2b00      	cmp	r3, #0
 800646c:	dbf4      	blt.n	8006458 <USB_HC_Halt+0x5e>
 800646e:	e02b      	b.n	80064c8 <USB_HC_Halt+0xce>
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006470:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8006474:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006478:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800647c:	6883      	ldr	r3, [r0, #8]
 800647e:	f013 0f20 	tst.w	r3, #32
 8006482:	d121      	bne.n	80064c8 <USB_HC_Halt+0xce>
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006484:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8006486:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
 800648a:	d117      	bne.n	80064bc <USB_HC_Halt+0xc2>
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800648c:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8006490:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006494:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006498:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 800649c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80064a0:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
          count++;
 80064a4:	9b01      	ldr	r3, [sp, #4]
 80064a6:	3301      	adds	r3, #1
 80064a8:	9301      	str	r3, [sp, #4]
          if (count > 1000U)
 80064aa:	9b01      	ldr	r3, [sp, #4]
 80064ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80064b0:	d80a      	bhi.n	80064c8 <USB_HC_Halt+0xce>
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80064b2:	f8dc 3000 	ldr.w	r3, [ip]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	dbf4      	blt.n	80064a4 <USB_HC_Halt+0xaa>
 80064ba:	e005      	b.n	80064c8 <USB_HC_Halt+0xce>
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80064bc:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 80064c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80064c4:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
    }
  }

  return HAL_OK;
}
 80064c8:	2000      	movs	r0, #0
 80064ca:	b003      	add	sp, #12
 80064cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80064d0:	4770      	bx	lr
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80064d2:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 80064d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80064da:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 80064de:	e7f3      	b.n	80064c8 <USB_HC_Halt+0xce>

080064e0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80064e0:	b530      	push	{r4, r5, lr}
 80064e2:	b083      	sub	sp, #12
 80064e4:	4604      	mov	r4, r0
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t count = 0U;
 80064e6:	2300      	movs	r3, #0
 80064e8:	9301      	str	r3, [sp, #4]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80064ea:	f7ff fce3 	bl	8005eb4 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80064ee:	2110      	movs	r1, #16
 80064f0:	4620      	mov	r0, r4
 80064f2:	f7ff fce5 	bl	8005ec0 <USB_FlushTxFifo>
 80064f6:	4605      	mov	r5, r0
 80064f8:	b100      	cbz	r0, 80064fc <USB_StopHost+0x1c>
  {
    ret = HAL_ERROR;
 80064fa:	2501      	movs	r5, #1
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80064fc:	4620      	mov	r0, r4
 80064fe:	f7ff fd07 	bl	8005f10 <USB_FlushRxFifo>
 8006502:	b100      	cbz	r0, 8006506 <USB_StopHost+0x26>
  {
    ret = HAL_ERROR;
 8006504:	2501      	movs	r5, #1
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006506:	2200      	movs	r2, #0
 8006508:	e00a      	b.n	8006520 <USB_StopHost+0x40>
  {
    value = USBx_HC(i)->HCCHAR;
 800650a:	eb04 1142 	add.w	r1, r4, r2, lsl #5
 800650e:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    value |=  USB_OTG_HCCHAR_CHDIS;
    value &= ~USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006512:	f023 2380 	bic.w	r3, r3, #2147516416	; 0x80008000
 8006516:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 800651a:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
  for (i = 0U; i <= 15U; i++)
 800651e:	3201      	adds	r2, #1
 8006520:	2a0f      	cmp	r2, #15
 8006522:	d9f2      	bls.n	800650a <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006524:	2100      	movs	r1, #0
 8006526:	e000      	b.n	800652a <USB_StopHost+0x4a>
 8006528:	3101      	adds	r1, #1
 800652a:	290f      	cmp	r1, #15
 800652c:	d816      	bhi.n	800655c <USB_StopHost+0x7c>
  {
    value = USBx_HC(i)->HCCHAR;
 800652e:	eb04 1041 	add.w	r0, r4, r1, lsl #5
 8006532:	f500 62a0 	add.w	r2, r0, #1280	; 0x500
 8006536:	f8d0 3500 	ldr.w	r3, [r0, #1280]	; 0x500
    value |= USB_OTG_HCCHAR_CHDIS;
    value |= USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800653a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800653e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    USBx_HC(i)->HCCHAR = value;
 8006542:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500

    do
    {
      count++;
 8006546:	9b01      	ldr	r3, [sp, #4]
 8006548:	3301      	adds	r3, #1
 800654a:	9301      	str	r3, [sp, #4]

      if (count > 1000U)
 800654c:	9b01      	ldr	r3, [sp, #4]
 800654e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006552:	d8e9      	bhi.n	8006528 <USB_StopHost+0x48>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006554:	6813      	ldr	r3, [r2, #0]
 8006556:	2b00      	cmp	r3, #0
 8006558:	dbf5      	blt.n	8006546 <USB_StopHost+0x66>
 800655a:	e7e5      	b.n	8006528 <USB_StopHost+0x48>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800655c:	f04f 33ff 	mov.w	r3, #4294967295
 8006560:	f8c4 3414 	str.w	r3, [r4, #1044]	; 0x414
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006564:	6163      	str	r3, [r4, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006566:	4620      	mov	r0, r4
 8006568:	f7ff fc9e 	bl	8005ea8 <USB_EnableGlobalInt>

  return ret;
}
 800656c:	4628      	mov	r0, r5
 800656e:	b003      	add	sp, #12
 8006570:	bd30      	pop	{r4, r5, pc}
	...

08006574 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006574:	b508      	push	{r3, lr}
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8006576:	4903      	ldr	r1, [pc, #12]	; (8006584 <MX_FATFS_Init+0x10>)
 8006578:	4803      	ldr	r0, [pc, #12]	; (8006588 <MX_FATFS_Init+0x14>)
 800657a:	f001 ff35 	bl	80083e8 <FATFS_LinkDriver>
 800657e:	4b03      	ldr	r3, [pc, #12]	; (800658c <MX_FATFS_Init+0x18>)
 8006580:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006582:	bd08      	pop	{r3, pc}
 8006584:	20001824 	.word	0x20001824
 8006588:	0800987c 	.word	0x0800987c
 800658c:	20001828 	.word	0x20001828

08006590 <USBH_initialize>:
DSTATUS USBH_initialize(BYTE lun)
{
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
}
 8006590:	2000      	movs	r0, #0
 8006592:	4770      	bx	lr

08006594 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8006594:	b508      	push	{r3, lr}
 8006596:	4601      	mov	r1, r0
  DRESULT res = RES_ERROR;

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8006598:	4803      	ldr	r0, [pc, #12]	; (80065a8 <USBH_status+0x14>)
 800659a:	f000 fb7e 	bl	8006c9a <USBH_MSC_UnitIsReady>
 800659e:	b108      	cbz	r0, 80065a4 <USBH_status+0x10>
  {
    res = RES_OK;
 80065a0:	2000      	movs	r0, #0
  {
    res = RES_ERROR;
  }

  return res;
}
 80065a2:	bd08      	pop	{r3, pc}
    res = RES_ERROR;
 80065a4:	2001      	movs	r0, #1
 80065a6:	e7fc      	b.n	80065a2 <USBH_status+0xe>
 80065a8:	20001858 	.word	0x20001858

080065ac <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80065ac:	b510      	push	{r4, lr}
 80065ae:	b090      	sub	sp, #64	; 0x40
 80065b0:	4604      	mov	r4, r0
  DRESULT res = RES_ERROR;
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 80065b2:	9300      	str	r3, [sp, #0]
 80065b4:	460b      	mov	r3, r1
 80065b6:	4601      	mov	r1, r0
 80065b8:	480d      	ldr	r0, [pc, #52]	; (80065f0 <USBH_read+0x44>)
 80065ba:	f000 fba6 	bl	8006d0a <USBH_MSC_Read>
 80065be:	b908      	cbnz	r0, 80065c4 <USBH_read+0x18>
      break;
    }
  }

  return res;
}
 80065c0:	b010      	add	sp, #64	; 0x40
 80065c2:	bd10      	pop	{r4, pc}
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 80065c4:	aa03      	add	r2, sp, #12
 80065c6:	4621      	mov	r1, r4
 80065c8:	4809      	ldr	r0, [pc, #36]	; (80065f0 <USBH_read+0x44>)
 80065ca:	f000 fb79 	bl	8006cc0 <USBH_MSC_GetLUNInfo>
    switch (info.sense.asc)
 80065ce:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80065d2:	2b28      	cmp	r3, #40	; 0x28
 80065d4:	d007      	beq.n	80065e6 <USBH_read+0x3a>
 80065d6:	2b3a      	cmp	r3, #58	; 0x3a
 80065d8:	d007      	beq.n	80065ea <USBH_read+0x3e>
 80065da:	2b04      	cmp	r3, #4
 80065dc:	d001      	beq.n	80065e2 <USBH_read+0x36>
      res = RES_ERROR;
 80065de:	2001      	movs	r0, #1
 80065e0:	e7ee      	b.n	80065c0 <USBH_read+0x14>
    switch (info.sense.asc)
 80065e2:	2003      	movs	r0, #3
 80065e4:	e7ec      	b.n	80065c0 <USBH_read+0x14>
 80065e6:	2003      	movs	r0, #3
 80065e8:	e7ea      	b.n	80065c0 <USBH_read+0x14>
 80065ea:	2003      	movs	r0, #3
 80065ec:	e7e8      	b.n	80065c0 <USBH_read+0x14>
 80065ee:	bf00      	nop
 80065f0:	20001858 	.word	0x20001858

080065f4 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80065f4:	b530      	push	{r4, r5, lr}
 80065f6:	b08f      	sub	sp, #60	; 0x3c
 80065f8:	460c      	mov	r4, r1
 80065fa:	4615      	mov	r5, r2
  DRESULT res = RES_ERROR;
  MSC_LUNTypeDef info;

  switch (cmd)
 80065fc:	2903      	cmp	r1, #3
 80065fe:	d824      	bhi.n	800664a <USBH_ioctl+0x56>
 8006600:	e8df f001 	tbb	[pc, r1]
 8006604:	180e0502 	.word	0x180e0502
 8006608:	4608      	mov	r0, r1
  default:
    res = RES_PARERR;
  }

  return res;
}
 800660a:	b00f      	add	sp, #60	; 0x3c
 800660c:	bd30      	pop	{r4, r5, pc}
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800660e:	aa01      	add	r2, sp, #4
 8006610:	4601      	mov	r1, r0
 8006612:	4812      	ldr	r0, [pc, #72]	; (800665c <USBH_ioctl+0x68>)
 8006614:	f000 fb54 	bl	8006cc0 <USBH_MSC_GetLUNInfo>
 8006618:	b9c8      	cbnz	r0, 800664e <USBH_ioctl+0x5a>
      *(DWORD*)buff = info.capacity.block_nbr;
 800661a:	9b02      	ldr	r3, [sp, #8]
 800661c:	602b      	str	r3, [r5, #0]
      res = RES_OK;
 800661e:	e7f4      	b.n	800660a <USBH_ioctl+0x16>
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8006620:	aa01      	add	r2, sp, #4
 8006622:	4601      	mov	r1, r0
 8006624:	480d      	ldr	r0, [pc, #52]	; (800665c <USBH_ioctl+0x68>)
 8006626:	f000 fb4b 	bl	8006cc0 <USBH_MSC_GetLUNInfo>
 800662a:	b990      	cbnz	r0, 8006652 <USBH_ioctl+0x5e>
      *(DWORD*)buff = info.capacity.block_size;
 800662c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8006630:	602b      	str	r3, [r5, #0]
      res = RES_OK;
 8006632:	e7ea      	b.n	800660a <USBH_ioctl+0x16>
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8006634:	aa01      	add	r2, sp, #4
 8006636:	4601      	mov	r1, r0
 8006638:	4808      	ldr	r0, [pc, #32]	; (800665c <USBH_ioctl+0x68>)
 800663a:	f000 fb41 	bl	8006cc0 <USBH_MSC_GetLUNInfo>
 800663e:	b950      	cbnz	r0, 8006656 <USBH_ioctl+0x62>
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8006640:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8006644:	0a5b      	lsrs	r3, r3, #9
 8006646:	602b      	str	r3, [r5, #0]
      res = RES_OK;
 8006648:	e7df      	b.n	800660a <USBH_ioctl+0x16>
    res = RES_PARERR;
 800664a:	2004      	movs	r0, #4
 800664c:	e7dd      	b.n	800660a <USBH_ioctl+0x16>
      res = RES_ERROR;
 800664e:	4620      	mov	r0, r4
 8006650:	e7db      	b.n	800660a <USBH_ioctl+0x16>
      res = RES_ERROR;
 8006652:	2001      	movs	r0, #1
 8006654:	e7d9      	b.n	800660a <USBH_ioctl+0x16>
      res = RES_ERROR;
 8006656:	2001      	movs	r0, #1
 8006658:	e7d7      	b.n	800660a <USBH_ioctl+0x16>
 800665a:	bf00      	nop
 800665c:	20001858 	.word	0x20001858

08006660 <USBH_write>:
{
 8006660:	b510      	push	{r4, lr}
 8006662:	b090      	sub	sp, #64	; 0x40
 8006664:	4604      	mov	r4, r0
  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8006666:	9300      	str	r3, [sp, #0]
 8006668:	460b      	mov	r3, r1
 800666a:	4601      	mov	r1, r0
 800666c:	4810      	ldr	r0, [pc, #64]	; (80066b0 <USBH_write+0x50>)
 800666e:	f000 fb97 	bl	8006da0 <USBH_MSC_Write>
 8006672:	b908      	cbnz	r0, 8006678 <USBH_write+0x18>
}
 8006674:	b010      	add	sp, #64	; 0x40
 8006676:	bd10      	pop	{r4, pc}
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8006678:	aa03      	add	r2, sp, #12
 800667a:	4621      	mov	r1, r4
 800667c:	480c      	ldr	r0, [pc, #48]	; (80066b0 <USBH_write+0x50>)
 800667e:	f000 fb1f 	bl	8006cc0 <USBH_MSC_GetLUNInfo>
    switch (info.sense.asc)
 8006682:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8006686:	2b27      	cmp	r3, #39	; 0x27
 8006688:	d00c      	beq.n	80066a4 <USBH_write+0x44>
 800668a:	d905      	bls.n	8006698 <USBH_write+0x38>
 800668c:	2b28      	cmp	r3, #40	; 0x28
 800668e:	d00b      	beq.n	80066a8 <USBH_write+0x48>
 8006690:	2b3a      	cmp	r3, #58	; 0x3a
 8006692:	d10b      	bne.n	80066ac <USBH_write+0x4c>
      res = RES_NOTRDY;
 8006694:	2003      	movs	r0, #3
 8006696:	e7ed      	b.n	8006674 <USBH_write+0x14>
    switch (info.sense.asc)
 8006698:	2b04      	cmp	r3, #4
 800669a:	d001      	beq.n	80066a0 <USBH_write+0x40>
      res = RES_ERROR;
 800669c:	2001      	movs	r0, #1
 800669e:	e7e9      	b.n	8006674 <USBH_write+0x14>
      res = RES_NOTRDY;
 80066a0:	2003      	movs	r0, #3
 80066a2:	e7e7      	b.n	8006674 <USBH_write+0x14>
    switch (info.sense.asc)
 80066a4:	2002      	movs	r0, #2
 80066a6:	e7e5      	b.n	8006674 <USBH_write+0x14>
      res = RES_NOTRDY;
 80066a8:	2003      	movs	r0, #3
 80066aa:	e7e3      	b.n	8006674 <USBH_write+0x14>
      res = RES_ERROR;
 80066ac:	2001      	movs	r0, #1
 80066ae:	e7e1      	b.n	8006674 <USBH_write+0x14>
 80066b0:	20001858 	.word	0x20001858

080066b4 <Prep_Queue>:
#include <stdlib.h>
#include <stdio.h>

void Prep_Queue(Queue * que)
{
	que->Head = NULL;
 80066b4:	2300      	movs	r3, #0
 80066b6:	6003      	str	r3, [r0, #0]
	que->Tail = NULL;
 80066b8:	6043      	str	r3, [r0, #4]
	que->Size = 0;
 80066ba:	6083      	str	r3, [r0, #8]
}
 80066bc:	4770      	bx	lr
	...

080066c0 <Enqueue>:

uint8_t Enqueue(Queue * que, void * data)
{
 80066c0:	b538      	push	{r3, r4, r5, lr}
 80066c2:	4604      	mov	r4, r0
 80066c4:	460d      	mov	r5, r1
	Node * node = (Node *)malloc(sizeof(Node));
 80066c6:	2008      	movs	r0, #8
 80066c8:	f002 f88e 	bl	80087e8 <malloc>

	if(node != NULL)
 80066cc:	b178      	cbz	r0, 80066ee <Enqueue+0x2e>
	{
		node->Next = NULL;
 80066ce:	2200      	movs	r2, #0
 80066d0:	6042      	str	r2, [r0, #4]
		node->Data = data;
 80066d2:	6005      	str	r5, [r0, #0]

		if(que->Size == 0)
 80066d4:	68a2      	ldr	r2, [r4, #8]
 80066d6:	b932      	cbnz	r2, 80066e6 <Enqueue+0x26>
		{
			que->Head = node;
 80066d8:	6020      	str	r0, [r4, #0]
			que->Tail = node;
 80066da:	6060      	str	r0, [r4, #4]
		{
			que->Tail->Next = (Node *)node;
			que->Tail = node;
		}

		que->Size++;
 80066dc:	68a3      	ldr	r3, [r4, #8]
 80066de:	3301      	adds	r3, #1
 80066e0:	60a3      	str	r3, [r4, #8]
		return 1;
 80066e2:	2001      	movs	r0, #1
	else
	{
		printf("Enqueue malloc error\r\n");
		return 0;
	}
}
 80066e4:	bd38      	pop	{r3, r4, r5, pc}
			que->Tail->Next = (Node *)node;
 80066e6:	6862      	ldr	r2, [r4, #4]
 80066e8:	6050      	str	r0, [r2, #4]
			que->Tail = node;
 80066ea:	6060      	str	r0, [r4, #4]
 80066ec:	e7f6      	b.n	80066dc <Enqueue+0x1c>
		printf("Enqueue malloc error\r\n");
 80066ee:	4802      	ldr	r0, [pc, #8]	; (80066f8 <Enqueue+0x38>)
 80066f0:	f002 fb14 	bl	8008d1c <puts>
		return 0;
 80066f4:	2000      	movs	r0, #0
 80066f6:	e7f5      	b.n	80066e4 <Enqueue+0x24>
 80066f8:	08009890 	.word	0x08009890

080066fc <Queue_Peek>:
		return NULL;
}

void * Queue_Peek(Queue * que, uint32_t index)
{
	if(index < que->Size)
 80066fc:	6883      	ldr	r3, [r0, #8]
 80066fe:	428b      	cmp	r3, r1
 8006700:	d908      	bls.n	8006714 <Queue_Peek+0x18>
	{
		Node * travler = que->Head;
 8006702:	6802      	ldr	r2, [r0, #0]
		uint32_t counter = 0;
 8006704:	2300      	movs	r3, #0
		for(; counter < index; counter++)
 8006706:	e001      	b.n	800670c <Queue_Peek+0x10>
			travler = (Node *)travler->Next;
 8006708:	6852      	ldr	r2, [r2, #4]
		for(; counter < index; counter++)
 800670a:	3301      	adds	r3, #1
 800670c:	428b      	cmp	r3, r1
 800670e:	d3fb      	bcc.n	8006708 <Queue_Peek+0xc>

		return travler->Data;
 8006710:	6810      	ldr	r0, [r2, #0]
 8006712:	4770      	bx	lr
	}
	else
		return NULL;
 8006714:	2000      	movs	r0, #0
}
 8006716:	4770      	bx	lr

08006718 <USBH_MSC_SOFProcess>:
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
}
 8006718:	2000      	movs	r0, #0
 800671a:	4770      	bx	lr

0800671c <USBH_MSC_Process>:
{
 800671c:	b570      	push	{r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800671e:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8006722:	69de      	ldr	r6, [r3, #28]
  switch (MSC_Handle->state)
 8006724:	7b33      	ldrb	r3, [r6, #12]
 8006726:	b123      	cbz	r3, 8006732 <USBH_MSC_Process+0x16>
 8006728:	2b01      	cmp	r3, #1
 800672a:	f040 8145 	bne.w	80069b8 <USBH_MSC_Process+0x29c>
      error = USBH_OK;
 800672e:	2000      	movs	r0, #0
}
 8006730:	bd70      	pop	{r4, r5, r6, pc}
 8006732:	4604      	mov	r4, r0
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8006734:	f8b6 10f8 	ldrh.w	r1, [r6, #248]	; 0xf8
 8006738:	7833      	ldrb	r3, [r6, #0]
 800673a:	4299      	cmp	r1, r3
 800673c:	f080 8131 	bcs.w	80069a2 <USBH_MSC_Process+0x286>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8006740:	2334      	movs	r3, #52	; 0x34
 8006742:	fb03 6301 	mla	r3, r3, r1, r6
 8006746:	2201      	movs	r2, #1
 8006748:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 800674c:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8006750:	2b08      	cmp	r3, #8
 8006752:	f200 8133 	bhi.w	80069bc <USBH_MSC_Process+0x2a0>
 8006756:	e8df f013 	tbh	[pc, r3, lsl #1]
 800675a:	0009      	.short	0x0009
 800675c:	00440131 	.word	0x00440131
 8006760:	0015009e 	.word	0x0015009e
 8006764:	013100d3 	.word	0x013100d3
 8006768:	011f0131 	.word	0x011f0131
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 800676c:	2334      	movs	r3, #52	; 0x34
 800676e:	fb03 6301 	mla	r3, r3, r1, r6
 8006772:	2204      	movs	r2, #4
 8006774:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
            MSC_Handle->timer = phost->Timer;
 8006778:	f8d0 33c4 	ldr.w	r3, [r0, #964]	; 0x3c4
 800677c:	f8c6 30fc 	str.w	r3, [r6, #252]	; 0xfc
  USBH_StatusTypeDef error = USBH_BUSY;
 8006780:	2001      	movs	r0, #1
            break;
 8006782:	e7d5      	b.n	8006730 <USBH_MSC_Process+0x14>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8006784:	2234      	movs	r2, #52	; 0x34
 8006786:	fb01 f202 	mul.w	r2, r1, r2
 800678a:	3298      	adds	r2, #152	; 0x98
 800678c:	4432      	add	r2, r6
 800678e:	3207      	adds	r2, #7
 8006790:	b2c9      	uxtb	r1, r1
 8006792:	f000 fd4c 	bl	800722e <USBH_MSC_SCSI_Inquiry>
            if (scsi_status == USBH_OK)
 8006796:	4603      	mov	r3, r0
 8006798:	b938      	cbnz	r0, 80067aa <USBH_MSC_Process+0x8e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800679a:	f8b6 20f8 	ldrh.w	r2, [r6, #248]	; 0xf8
 800679e:	2134      	movs	r1, #52	; 0x34
 80067a0:	fb01 6202 	mla	r2, r1, r2, r6
 80067a4:	2102      	movs	r1, #2
 80067a6:	f882 1090 	strb.w	r1, [r2, #144]	; 0x90
            if (scsi_status == USBH_FAIL)
 80067aa:	2b02      	cmp	r3, #2
 80067ac:	d003      	beq.n	80067b6 <USBH_MSC_Process+0x9a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80067ae:	2b04      	cmp	r3, #4
 80067b0:	d00b      	beq.n	80067ca <USBH_MSC_Process+0xae>
  USBH_StatusTypeDef error = USBH_BUSY;
 80067b2:	2001      	movs	r0, #1
 80067b4:	e7bc      	b.n	8006730 <USBH_MSC_Process+0x14>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80067b6:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 80067ba:	2234      	movs	r2, #52	; 0x34
 80067bc:	fb02 6303 	mla	r3, r2, r3, r6
 80067c0:	2205      	movs	r2, #5
 80067c2:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  USBH_StatusTypeDef error = USBH_BUSY;
 80067c6:	2001      	movs	r0, #1
 80067c8:	e7b2      	b.n	8006730 <USBH_MSC_Process+0x14>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80067ca:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 80067ce:	2234      	movs	r2, #52	; 0x34
 80067d0:	fb02 6303 	mla	r3, r2, r3, r6
 80067d4:	2001      	movs	r0, #1
 80067d6:	f883 0090 	strb.w	r0, [r3, #144]	; 0x90
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80067da:	2202      	movs	r2, #2
 80067dc:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
 80067e0:	e7a6      	b.n	8006730 <USBH_MSC_Process+0x14>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 80067e2:	b2c9      	uxtb	r1, r1
 80067e4:	f000 fcb5 	bl	8007152 <USBH_MSC_SCSI_TestUnitReady>
            if (ready_status == USBH_OK)
 80067e8:	4602      	mov	r2, r0
 80067ea:	b9c0      	cbnz	r0, 800681e <USBH_MSC_Process+0x102>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 80067ec:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 80067f0:	2134      	movs	r1, #52	; 0x34
 80067f2:	fb01 6103 	mla	r1, r1, r3, r6
 80067f6:	f891 1092 	ldrb.w	r1, [r1, #146]	; 0x92
 80067fa:	b1b1      	cbz	r1, 800682a <USBH_MSC_Process+0x10e>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 80067fc:	2134      	movs	r1, #52	; 0x34
 80067fe:	fb01 6103 	mla	r1, r1, r3, r6
 8006802:	2001      	movs	r0, #1
 8006804:	f881 00c1 	strb.w	r0, [r1, #193]	; 0xc1
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8006808:	2134      	movs	r1, #52	; 0x34
 800680a:	fb01 6303 	mla	r3, r1, r3, r6
 800680e:	2103      	movs	r1, #3
 8006810:	f883 1090 	strb.w	r1, [r3, #144]	; 0x90
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8006814:	2100      	movs	r1, #0
 8006816:	f883 1091 	strb.w	r1, [r3, #145]	; 0x91
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800681a:	f883 1092 	strb.w	r1, [r3, #146]	; 0x92
            if (ready_status == USBH_FAIL)
 800681e:	2a02      	cmp	r2, #2
 8006820:	d00a      	beq.n	8006838 <USBH_MSC_Process+0x11c>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8006822:	2a04      	cmp	r2, #4
 8006824:	d02b      	beq.n	800687e <USBH_MSC_Process+0x162>
  USBH_StatusTypeDef error = USBH_BUSY;
 8006826:	2001      	movs	r0, #1
 8006828:	e782      	b.n	8006730 <USBH_MSC_Process+0x14>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800682a:	2134      	movs	r1, #52	; 0x34
 800682c:	fb01 6103 	mla	r1, r1, r3, r6
 8006830:	2000      	movs	r0, #0
 8006832:	f881 00c1 	strb.w	r0, [r1, #193]	; 0xc1
 8006836:	e7e7      	b.n	8006808 <USBH_MSC_Process+0xec>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8006838:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 800683c:	2234      	movs	r2, #52	; 0x34
 800683e:	fb02 6203 	mla	r2, r2, r3, r6
 8006842:	f892 2092 	ldrb.w	r2, [r2, #146]	; 0x92
 8006846:	2a02      	cmp	r2, #2
 8006848:	d012      	beq.n	8006870 <USBH_MSC_Process+0x154>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800684a:	2234      	movs	r2, #52	; 0x34
 800684c:	fb02 6203 	mla	r2, r2, r3, r6
 8006850:	2101      	movs	r1, #1
 8006852:	f882 10c1 	strb.w	r1, [r2, #193]	; 0xc1
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8006856:	2234      	movs	r2, #52	; 0x34
 8006858:	fb02 6303 	mla	r3, r2, r3, r6
 800685c:	2205      	movs	r2, #5
 800685e:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8006862:	2001      	movs	r0, #1
 8006864:	f883 0091 	strb.w	r0, [r3, #145]	; 0x91
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8006868:	2202      	movs	r2, #2
 800686a:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
 800686e:	e75f      	b.n	8006730 <USBH_MSC_Process+0x14>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8006870:	2234      	movs	r2, #52	; 0x34
 8006872:	fb02 6203 	mla	r2, r2, r3, r6
 8006876:	2100      	movs	r1, #0
 8006878:	f882 10c1 	strb.w	r1, [r2, #193]	; 0xc1
 800687c:	e7eb      	b.n	8006856 <USBH_MSC_Process+0x13a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800687e:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 8006882:	2234      	movs	r2, #52	; 0x34
 8006884:	fb02 6303 	mla	r3, r2, r3, r6
 8006888:	2001      	movs	r0, #1
 800688a:	f883 0090 	strb.w	r0, [r3, #144]	; 0x90
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800688e:	2202      	movs	r2, #2
 8006890:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
 8006894:	e74c      	b.n	8006730 <USBH_MSC_Process+0x14>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8006896:	2234      	movs	r2, #52	; 0x34
 8006898:	fb01 f202 	mul.w	r2, r1, r2
 800689c:	3290      	adds	r2, #144	; 0x90
 800689e:	4432      	add	r2, r6
 80068a0:	3204      	adds	r2, #4
 80068a2:	b2c9      	uxtb	r1, r1
 80068a4:	f000 fc7c 	bl	80071a0 <USBH_MSC_SCSI_ReadCapacity>
            if (scsi_status == USBH_OK)
 80068a8:	b970      	cbnz	r0, 80068c8 <USBH_MSC_Process+0x1ac>
              if (MSC_Handle->unit[MSC_Handle->current_lun].state_changed == 1U)
 80068aa:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80068ae:	2234      	movs	r2, #52	; 0x34
 80068b0:	fb02 6203 	mla	r2, r2, r3, r6
 80068b4:	2001      	movs	r0, #1
 80068b6:	f882 0090 	strb.w	r0, [r2, #144]	; 0x90
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80068ba:	2100      	movs	r1, #0
 80068bc:	f882 1091 	strb.w	r1, [r2, #145]	; 0x91
              MSC_Handle->current_lun++;
 80068c0:	4403      	add	r3, r0
 80068c2:	f8a6 30f8 	strh.w	r3, [r6, #248]	; 0xf8
 80068c6:	e733      	b.n	8006730 <USBH_MSC_Process+0x14>
            else if (scsi_status == USBH_FAIL)
 80068c8:	2802      	cmp	r0, #2
 80068ca:	d003      	beq.n	80068d4 <USBH_MSC_Process+0x1b8>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80068cc:	2804      	cmp	r0, #4
 80068ce:	d00b      	beq.n	80068e8 <USBH_MSC_Process+0x1cc>
  USBH_StatusTypeDef error = USBH_BUSY;
 80068d0:	2001      	movs	r0, #1
 80068d2:	e72d      	b.n	8006730 <USBH_MSC_Process+0x14>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80068d4:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 80068d8:	2234      	movs	r2, #52	; 0x34
 80068da:	fb02 6303 	mla	r3, r2, r3, r6
 80068de:	2205      	movs	r2, #5
 80068e0:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  USBH_StatusTypeDef error = USBH_BUSY;
 80068e4:	2001      	movs	r0, #1
 80068e6:	e723      	b.n	8006730 <USBH_MSC_Process+0x14>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80068e8:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 80068ec:	2234      	movs	r2, #52	; 0x34
 80068ee:	fb02 6303 	mla	r3, r2, r3, r6
 80068f2:	2001      	movs	r0, #1
 80068f4:	f883 0090 	strb.w	r0, [r3, #144]	; 0x90
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80068f8:	2202      	movs	r2, #2
 80068fa:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
 80068fe:	e717      	b.n	8006730 <USBH_MSC_Process+0x14>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8006900:	2234      	movs	r2, #52	; 0x34
 8006902:	fb01 f202 	mul.w	r2, r1, r2
 8006906:	3298      	adds	r2, #152	; 0x98
 8006908:	4432      	add	r2, r6
 800690a:	3204      	adds	r2, #4
 800690c:	b2c9      	uxtb	r1, r1
 800690e:	f000 fcf4 	bl	80072fa <USBH_MSC_SCSI_RequestSense>
            if (scsi_status == USBH_OK)
 8006912:	4602      	mov	r2, r0
 8006914:	b998      	cbnz	r0, 800693e <USBH_MSC_Process+0x222>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8006916:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 800691a:	2134      	movs	r1, #52	; 0x34
 800691c:	fb01 6103 	mla	r1, r1, r3, r6
 8006920:	f891 109c 	ldrb.w	r1, [r1, #156]	; 0x9c
 8006924:	2906      	cmp	r1, #6
 8006926:	d010      	beq.n	800694a <USBH_MSC_Process+0x22e>
 8006928:	2902      	cmp	r1, #2
 800692a:	d00e      	beq.n	800694a <USBH_MSC_Process+0x22e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800692c:	2134      	movs	r1, #52	; 0x34
 800692e:	fb01 6103 	mla	r1, r1, r3, r6
 8006932:	2001      	movs	r0, #1
 8006934:	f881 0090 	strb.w	r0, [r1, #144]	; 0x90
              MSC_Handle->current_lun++;
 8006938:	4403      	add	r3, r0
 800693a:	f8a6 30f8 	strh.w	r3, [r6, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 800693e:	2a02      	cmp	r2, #2
 8006940:	d014      	beq.n	800696c <USBH_MSC_Process+0x250>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8006942:	2a04      	cmp	r2, #4
 8006944:	d01c      	beq.n	8006980 <USBH_MSC_Process+0x264>
  USBH_StatusTypeDef error = USBH_BUSY;
 8006946:	2001      	movs	r0, #1
 8006948:	e6f2      	b.n	8006730 <USBH_MSC_Process+0x14>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 800694a:	f8d4 13c4 	ldr.w	r1, [r4, #964]	; 0x3c4
 800694e:	f8d6 00fc 	ldr.w	r0, [r6, #252]	; 0xfc
 8006952:	1a09      	subs	r1, r1, r0
 8006954:	f242 700f 	movw	r0, #9999	; 0x270f
 8006958:	4281      	cmp	r1, r0
 800695a:	d8e7      	bhi.n	800692c <USBH_MSC_Process+0x210>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800695c:	2234      	movs	r2, #52	; 0x34
 800695e:	fb02 6303 	mla	r3, r2, r3, r6
 8006962:	2202      	movs	r2, #2
 8006964:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  USBH_StatusTypeDef error = USBH_BUSY;
 8006968:	2001      	movs	r0, #1
                  break;
 800696a:	e6e1      	b.n	8006730 <USBH_MSC_Process+0x14>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800696c:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 8006970:	2234      	movs	r2, #52	; 0x34
 8006972:	fb02 6303 	mla	r3, r2, r3, r6
 8006976:	2208      	movs	r2, #8
 8006978:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  USBH_StatusTypeDef error = USBH_BUSY;
 800697c:	2001      	movs	r0, #1
 800697e:	e6d7      	b.n	8006730 <USBH_MSC_Process+0x14>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8006980:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 8006984:	2234      	movs	r2, #52	; 0x34
 8006986:	fb02 6303 	mla	r3, r2, r3, r6
 800698a:	2001      	movs	r0, #1
 800698c:	f883 0090 	strb.w	r0, [r3, #144]	; 0x90
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8006990:	2202      	movs	r2, #2
 8006992:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
 8006996:	e6cb      	b.n	8006730 <USBH_MSC_Process+0x14>
            MSC_Handle->current_lun++;
 8006998:	3101      	adds	r1, #1
 800699a:	f8a6 10f8 	strh.w	r1, [r6, #248]	; 0xf8
  USBH_StatusTypeDef error = USBH_BUSY;
 800699e:	2001      	movs	r0, #1
            break;
 80069a0:	e6c6      	b.n	8006730 <USBH_MSC_Process+0x14>
        MSC_Handle->current_lun = 0U;
 80069a2:	2300      	movs	r3, #0
 80069a4:	f8a6 30f8 	strh.w	r3, [r6, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 80069a8:	2501      	movs	r5, #1
 80069aa:	7335      	strb	r5, [r6, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80069ac:	f8d0 33d4 	ldr.w	r3, [r0, #980]	; 0x3d4
 80069b0:	2102      	movs	r1, #2
 80069b2:	4798      	blx	r3
  USBH_StatusTypeDef error = USBH_BUSY;
 80069b4:	4628      	mov	r0, r5
 80069b6:	e6bb      	b.n	8006730 <USBH_MSC_Process+0x14>
  switch (MSC_Handle->state)
 80069b8:	2001      	movs	r0, #1
 80069ba:	e6b9      	b.n	8006730 <USBH_MSC_Process+0x14>
 80069bc:	2001      	movs	r0, #1
 80069be:	e6b7      	b.n	8006730 <USBH_MSC_Process+0x14>

080069c0 <USBH_MSC_ClassRequest>:
{
 80069c0:	b510      	push	{r4, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80069c2:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 80069c6:	69dc      	ldr	r4, [r3, #28]
  switch (MSC_Handle->req_state)
 80069c8:	7ba3      	ldrb	r3, [r4, #14]
 80069ca:	2b02      	cmp	r3, #2
 80069cc:	d004      	beq.n	80069d8 <USBH_MSC_ClassRequest+0x18>
 80069ce:	2b03      	cmp	r3, #3
 80069d0:	d025      	beq.n	8006a1e <USBH_MSC_ClassRequest+0x5e>
 80069d2:	b10b      	cbz	r3, 80069d8 <USBH_MSC_ClassRequest+0x18>
 80069d4:	2001      	movs	r0, #1
}
 80069d6:	bd10      	pop	{r4, pc}
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 80069d8:	4621      	mov	r1, r4
 80069da:	f000 fa6f 	bl	8006ebc <USBH_MSC_BOT_REQ_GetMaxLUN>
      if (status == USBH_NOT_SUPPORTED)
 80069de:	2803      	cmp	r0, #3
 80069e0:	d002      	beq.n	80069e8 <USBH_MSC_ClassRequest+0x28>
      if (status == USBH_OK)
 80069e2:	2800      	cmp	r0, #0
 80069e4:	d1f7      	bne.n	80069d6 <USBH_MSC_ClassRequest+0x16>
 80069e6:	e001      	b.n	80069ec <USBH_MSC_ClassRequest+0x2c>
        MSC_Handle->max_lun = 0U;
 80069e8:	2000      	movs	r0, #0
 80069ea:	7020      	strb	r0, [r4, #0]
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 80069ec:	7821      	ldrb	r1, [r4, #0]
 80069ee:	2902      	cmp	r1, #2
 80069f0:	d813      	bhi.n	8006a1a <USBH_MSC_ClassRequest+0x5a>
 80069f2:	3101      	adds	r1, #1
 80069f4:	b2c9      	uxtb	r1, r1
 80069f6:	7021      	strb	r1, [r4, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 80069f8:	2300      	movs	r3, #0
 80069fa:	428b      	cmp	r3, r1
 80069fc:	d2eb      	bcs.n	80069d6 <USBH_MSC_ClassRequest+0x16>
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 80069fe:	2234      	movs	r2, #52	; 0x34
 8006a00:	fb02 4203 	mla	r2, r2, r3, r4
 8006a04:	f04f 0c02 	mov.w	ip, #2
 8006a08:	f882 c092 	strb.w	ip, [r2, #146]	; 0x92
          MSC_Handle->unit[i].state_changed = 0U;
 8006a0c:	f04f 0c00 	mov.w	ip, #0
 8006a10:	f882 c0c1 	strb.w	ip, [r2, #193]	; 0xc1
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8006a14:	3301      	adds	r3, #1
 8006a16:	b2db      	uxtb	r3, r3
 8006a18:	e7ef      	b.n	80069fa <USBH_MSC_ClassRequest+0x3a>
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8006a1a:	2102      	movs	r1, #2
 8006a1c:	e7eb      	b.n	80069f6 <USBH_MSC_ClassRequest+0x36>
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8006a1e:	2100      	movs	r1, #0
 8006a20:	f001 fb09 	bl	8008036 <USBH_ClrFeature>
 8006a24:	b918      	cbnz	r0, 8006a2e <USBH_MSC_ClassRequest+0x6e>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8006a26:	7be3      	ldrb	r3, [r4, #15]
 8006a28:	73a3      	strb	r3, [r4, #14]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006a2a:	2001      	movs	r0, #1
 8006a2c:	e7d3      	b.n	80069d6 <USBH_MSC_ClassRequest+0x16>
 8006a2e:	2001      	movs	r0, #1
 8006a30:	e7d1      	b.n	80069d6 <USBH_MSC_ClassRequest+0x16>

08006a32 <USBH_MSC_InterfaceDeInit>:
{
 8006a32:	b538      	push	{r3, r4, r5, lr}
 8006a34:	4604      	mov	r4, r0
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a36:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8006a3a:	69dd      	ldr	r5, [r3, #28]
  if (MSC_Handle->OutPipe)
 8006a3c:	7969      	ldrb	r1, [r5, #5]
 8006a3e:	b969      	cbnz	r1, 8006a5c <USBH_MSC_InterfaceDeInit+0x2a>
  if (MSC_Handle->InPipe)
 8006a40:	7929      	ldrb	r1, [r5, #4]
 8006a42:	b9a1      	cbnz	r1, 8006a6e <USBH_MSC_InterfaceDeInit+0x3c>
  if (phost->pActiveClass->pData)
 8006a44:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 8006a48:	69d8      	ldr	r0, [r3, #28]
 8006a4a:	b128      	cbz	r0, 8006a58 <USBH_MSC_InterfaceDeInit+0x26>
    USBH_free(phost->pActiveClass->pData);
 8006a4c:	f001 fed4 	bl	80087f8 <free>
    phost->pActiveClass->pData = 0U;
 8006a50:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 8006a54:	2200      	movs	r2, #0
 8006a56:	61da      	str	r2, [r3, #28]
}
 8006a58:	2000      	movs	r0, #0
 8006a5a:	bd38      	pop	{r3, r4, r5, pc}
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8006a5c:	f001 fb7d 	bl	800815a <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8006a60:	7969      	ldrb	r1, [r5, #5]
 8006a62:	4620      	mov	r0, r4
 8006a64:	f001 fb91 	bl	800818a <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8006a68:	2300      	movs	r3, #0
 8006a6a:	716b      	strb	r3, [r5, #5]
 8006a6c:	e7e8      	b.n	8006a40 <USBH_MSC_InterfaceDeInit+0xe>
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8006a6e:	4620      	mov	r0, r4
 8006a70:	f001 fb73 	bl	800815a <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 8006a74:	7929      	ldrb	r1, [r5, #4]
 8006a76:	4620      	mov	r0, r4
 8006a78:	f001 fb87 	bl	800818a <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	712b      	strb	r3, [r5, #4]
 8006a80:	e7e0      	b.n	8006a44 <USBH_MSC_InterfaceDeInit+0x12>

08006a82 <USBH_MSC_InterfaceInit>:
{
 8006a82:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a84:	b085      	sub	sp, #20
 8006a86:	4604      	mov	r4, r0
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8006a88:	f8d0 137c 	ldr.w	r1, [r0, #892]	; 0x37c
 8006a8c:	2350      	movs	r3, #80	; 0x50
 8006a8e:	2206      	movs	r2, #6
 8006a90:	7909      	ldrb	r1, [r1, #4]
 8006a92:	f000 feb3 	bl	80077fc <USBH_FindInterface>
  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8006a96:	2801      	cmp	r0, #1
 8006a98:	d87c      	bhi.n	8006b94 <USBH_MSC_InterfaceInit+0x112>
 8006a9a:	4605      	mov	r5, r0
  status = USBH_SelectInterface(phost, interface);
 8006a9c:	4601      	mov	r1, r0
 8006a9e:	4620      	mov	r0, r4
 8006aa0:	f000 fea2 	bl	80077e8 <USBH_SelectInterface>
  if (status != USBH_OK)
 8006aa4:	4607      	mov	r7, r0
 8006aa6:	2800      	cmp	r0, #0
 8006aa8:	d178      	bne.n	8006b9c <USBH_MSC_InterfaceInit+0x11a>
  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8006aaa:	f8d4 637c 	ldr.w	r6, [r4, #892]	; 0x37c
 8006aae:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006ab2:	f001 fe99 	bl	80087e8 <malloc>
 8006ab6:	61f0      	str	r0, [r6, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ab8:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 8006abc:	69de      	ldr	r6, [r3, #28]
  if (MSC_Handle == NULL)
 8006abe:	2e00      	cmp	r6, #0
 8006ac0:	d06e      	beq.n	8006ba0 <USBH_MSC_InterfaceInit+0x11e>
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8006ac2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006ac6:	2100      	movs	r1, #0
 8006ac8:	4630      	mov	r0, r6
 8006aca:	f002 fa07 	bl	8008edc <memset>
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006ace:	231a      	movs	r3, #26
 8006ad0:	fb03 4305 	mla	r3, r3, r5, r4
 8006ad4:	f893 234e 	ldrb.w	r2, [r3, #846]	; 0x34e
 8006ad8:	f993 334e 	ldrsb.w	r3, [r3, #846]	; 0x34e
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	db49      	blt.n	8006b74 <USBH_MSC_InterfaceInit+0xf2>
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8006ae0:	71b2      	strb	r2, [r6, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006ae2:	231a      	movs	r3, #26
 8006ae4:	fb03 4305 	mla	r3, r3, r5, r4
 8006ae8:	f8b3 3350 	ldrh.w	r3, [r3, #848]	; 0x350
 8006aec:	8133      	strh	r3, [r6, #8]
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8006aee:	231a      	movs	r3, #26
 8006af0:	fb03 4305 	mla	r3, r3, r5, r4
 8006af4:	f893 2356 	ldrb.w	r2, [r3, #854]	; 0x356
 8006af8:	f993 3356 	ldrsb.w	r3, [r3, #854]	; 0x356
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	db41      	blt.n	8006b84 <USBH_MSC_InterfaceInit+0x102>
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8006b00:	71b2      	strb	r2, [r6, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006b02:	231a      	movs	r3, #26
 8006b04:	fb03 4505 	mla	r5, r3, r5, r4
 8006b08:	f8b5 3358 	ldrh.w	r3, [r5, #856]	; 0x358
 8006b0c:	8133      	strh	r3, [r6, #8]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8006b0e:	79b1      	ldrb	r1, [r6, #6]
 8006b10:	4620      	mov	r0, r4
 8006b12:	f001 fb27 	bl	8008164 <USBH_AllocPipe>
 8006b16:	7170      	strb	r0, [r6, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8006b18:	79f1      	ldrb	r1, [r6, #7]
 8006b1a:	4620      	mov	r0, r4
 8006b1c:	f001 fb22 	bl	8008164 <USBH_AllocPipe>
 8006b20:	7130      	strb	r0, [r6, #4]
  USBH_MSC_BOT_Init(phost);
 8006b22:	4620      	mov	r0, r4
 8006b24:	f000 f9d8 	bl	8006ed8 <USBH_MSC_BOT_Init>
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8006b28:	79b2      	ldrb	r2, [r6, #6]
 8006b2a:	7971      	ldrb	r1, [r6, #5]
 8006b2c:	8933      	ldrh	r3, [r6, #8]
 8006b2e:	9302      	str	r3, [sp, #8]
 8006b30:	2502      	movs	r5, #2
 8006b32:	9501      	str	r5, [sp, #4]
 8006b34:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 8006b38:	9300      	str	r3, [sp, #0]
 8006b3a:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8006b3e:	4620      	mov	r0, r4
 8006b40:	f001 fafb 	bl	800813a <USBH_OpenPipe>
  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8006b44:	79f2      	ldrb	r2, [r6, #7]
 8006b46:	7931      	ldrb	r1, [r6, #4]
 8006b48:	8973      	ldrh	r3, [r6, #10]
 8006b4a:	9302      	str	r3, [sp, #8]
 8006b4c:	9501      	str	r5, [sp, #4]
 8006b4e:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 8006b52:	9300      	str	r3, [sp, #0]
 8006b54:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8006b58:	4620      	mov	r0, r4
 8006b5a:	f001 faee 	bl	800813a <USBH_OpenPipe>
  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8006b5e:	2200      	movs	r2, #0
 8006b60:	7931      	ldrb	r1, [r6, #4]
 8006b62:	4620      	mov	r0, r4
 8006b64:	f001 fdb4 	bl	80086d0 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8006b68:	2200      	movs	r2, #0
 8006b6a:	7971      	ldrb	r1, [r6, #5]
 8006b6c:	4620      	mov	r0, r4
 8006b6e:	f001 fdaf 	bl	80086d0 <USBH_LL_SetToggle>
  return USBH_OK;
 8006b72:	e010      	b.n	8006b96 <USBH_MSC_InterfaceInit+0x114>
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8006b74:	71f2      	strb	r2, [r6, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006b76:	231a      	movs	r3, #26
 8006b78:	fb03 4305 	mla	r3, r3, r5, r4
 8006b7c:	f8b3 3350 	ldrh.w	r3, [r3, #848]	; 0x350
 8006b80:	8173      	strh	r3, [r6, #10]
 8006b82:	e7b4      	b.n	8006aee <USBH_MSC_InterfaceInit+0x6c>
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8006b84:	71f2      	strb	r2, [r6, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006b86:	231a      	movs	r3, #26
 8006b88:	fb03 4305 	mla	r3, r3, r5, r4
 8006b8c:	f8b3 3358 	ldrh.w	r3, [r3, #856]	; 0x358
 8006b90:	8173      	strh	r3, [r6, #10]
 8006b92:	e7bc      	b.n	8006b0e <USBH_MSC_InterfaceInit+0x8c>
    return USBH_FAIL;
 8006b94:	2702      	movs	r7, #2
}
 8006b96:	4638      	mov	r0, r7
 8006b98:	b005      	add	sp, #20
 8006b9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return USBH_FAIL;
 8006b9c:	2702      	movs	r7, #2
 8006b9e:	e7fa      	b.n	8006b96 <USBH_MSC_InterfaceInit+0x114>
    return USBH_FAIL;
 8006ba0:	2702      	movs	r7, #2
 8006ba2:	e7f8      	b.n	8006b96 <USBH_MSC_InterfaceInit+0x114>

08006ba4 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8006ba4:	b530      	push	{r4, r5, lr}
 8006ba6:	b083      	sub	sp, #12
 8006ba8:	460c      	mov	r4, r1
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006baa:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8006bae:	69dd      	ldr	r5, [r3, #28]
  USBH_StatusTypeDef error = USBH_BUSY ;
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8006bb0:	2334      	movs	r3, #52	; 0x34
 8006bb2:	fb03 5301 	mla	r3, r3, r1, r5
 8006bb6:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8006bba:	2b06      	cmp	r3, #6
 8006bbc:	d006      	beq.n	8006bcc <USBH_MSC_RdWrProcess+0x28>
 8006bbe:	2b07      	cmp	r3, #7
 8006bc0:	d027      	beq.n	8006c12 <USBH_MSC_RdWrProcess+0x6e>
 8006bc2:	2b05      	cmp	r3, #5
 8006bc4:	d048      	beq.n	8006c58 <USBH_MSC_RdWrProcess+0xb4>
 8006bc6:	2001      	movs	r0, #1
    default:
      break;

  }
  return error;
}
 8006bc8:	b003      	add	sp, #12
 8006bca:	bd30      	pop	{r4, r5, pc}
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 8006bcc:	2200      	movs	r2, #0
 8006bce:	9200      	str	r2, [sp, #0]
 8006bd0:	4613      	mov	r3, r2
 8006bd2:	f000 fc1e 	bl	8007412 <USBH_MSC_SCSI_Read>
      if (scsi_status == USBH_OK)
 8006bd6:	b930      	cbnz	r0, 8006be6 <USBH_MSC_RdWrProcess+0x42>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8006bd8:	2334      	movs	r3, #52	; 0x34
 8006bda:	fb03 5304 	mla	r3, r3, r4, r5
 8006bde:	2201      	movs	r2, #1
 8006be0:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        error = USBH_OK;
 8006be4:	e7f0      	b.n	8006bc8 <USBH_MSC_RdWrProcess+0x24>
      else if (scsi_status == USBH_FAIL)
 8006be6:	2802      	cmp	r0, #2
 8006be8:	d003      	beq.n	8006bf2 <USBH_MSC_RdWrProcess+0x4e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8006bea:	2804      	cmp	r0, #4
 8006bec:	d009      	beq.n	8006c02 <USBH_MSC_RdWrProcess+0x5e>
  USBH_StatusTypeDef error = USBH_BUSY ;
 8006bee:	2001      	movs	r0, #1
 8006bf0:	e7ea      	b.n	8006bc8 <USBH_MSC_RdWrProcess+0x24>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8006bf2:	2334      	movs	r3, #52	; 0x34
 8006bf4:	fb03 5304 	mla	r3, r3, r4, r5
 8006bf8:	2205      	movs	r2, #5
 8006bfa:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  USBH_StatusTypeDef error = USBH_BUSY ;
 8006bfe:	2001      	movs	r0, #1
 8006c00:	e7e2      	b.n	8006bc8 <USBH_MSC_RdWrProcess+0x24>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8006c02:	2334      	movs	r3, #52	; 0x34
 8006c04:	fb03 5304 	mla	r3, r3, r4, r5
 8006c08:	2208      	movs	r2, #8
 8006c0a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
          error = USBH_FAIL;
 8006c0e:	2002      	movs	r0, #2
 8006c10:	e7da      	b.n	8006bc8 <USBH_MSC_RdWrProcess+0x24>
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8006c12:	2200      	movs	r2, #0
 8006c14:	9200      	str	r2, [sp, #0]
 8006c16:	4613      	mov	r3, r2
 8006c18:	f000 fbb5 	bl	8007386 <USBH_MSC_SCSI_Write>
      if (scsi_status == USBH_OK)
 8006c1c:	b930      	cbnz	r0, 8006c2c <USBH_MSC_RdWrProcess+0x88>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8006c1e:	2334      	movs	r3, #52	; 0x34
 8006c20:	fb03 5304 	mla	r3, r3, r4, r5
 8006c24:	2201      	movs	r2, #1
 8006c26:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        error = USBH_OK;
 8006c2a:	e7cd      	b.n	8006bc8 <USBH_MSC_RdWrProcess+0x24>
      else if (scsi_status == USBH_FAIL)
 8006c2c:	2802      	cmp	r0, #2
 8006c2e:	d003      	beq.n	8006c38 <USBH_MSC_RdWrProcess+0x94>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8006c30:	2804      	cmp	r0, #4
 8006c32:	d009      	beq.n	8006c48 <USBH_MSC_RdWrProcess+0xa4>
  USBH_StatusTypeDef error = USBH_BUSY ;
 8006c34:	2001      	movs	r0, #1
 8006c36:	e7c7      	b.n	8006bc8 <USBH_MSC_RdWrProcess+0x24>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8006c38:	2334      	movs	r3, #52	; 0x34
 8006c3a:	fb03 5304 	mla	r3, r3, r4, r5
 8006c3e:	2205      	movs	r2, #5
 8006c40:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  USBH_StatusTypeDef error = USBH_BUSY ;
 8006c44:	2001      	movs	r0, #1
 8006c46:	e7bf      	b.n	8006bc8 <USBH_MSC_RdWrProcess+0x24>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8006c48:	2334      	movs	r3, #52	; 0x34
 8006c4a:	fb03 5304 	mla	r3, r3, r4, r5
 8006c4e:	2208      	movs	r2, #8
 8006c50:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
          error = USBH_FAIL;
 8006c54:	2002      	movs	r0, #2
 8006c56:	e7b7      	b.n	8006bc8 <USBH_MSC_RdWrProcess+0x24>
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8006c58:	2234      	movs	r2, #52	; 0x34
 8006c5a:	fb01 f202 	mul.w	r2, r1, r2
 8006c5e:	3298      	adds	r2, #152	; 0x98
 8006c60:	442a      	add	r2, r5
 8006c62:	3204      	adds	r2, #4
 8006c64:	f000 fb49 	bl	80072fa <USBH_MSC_SCSI_RequestSense>
      if (scsi_status == USBH_OK)
 8006c68:	4603      	mov	r3, r0
 8006c6a:	b9a0      	cbnz	r0, 8006c96 <USBH_MSC_RdWrProcess+0xf2>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8006c6c:	2234      	movs	r2, #52	; 0x34
 8006c6e:	fb02 5204 	mla	r2, r2, r4, r5
 8006c72:	2101      	movs	r1, #1
 8006c74:	f882 1090 	strb.w	r1, [r2, #144]	; 0x90
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8006c78:	2002      	movs	r0, #2
 8006c7a:	f882 0091 	strb.w	r0, [r2, #145]	; 0x91
      if (scsi_status == USBH_FAIL)
 8006c7e:	2b02      	cmp	r3, #2
 8006c80:	d0a2      	beq.n	8006bc8 <USBH_MSC_RdWrProcess+0x24>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8006c82:	2b04      	cmp	r3, #4
 8006c84:	d1a0      	bne.n	8006bc8 <USBH_MSC_RdWrProcess+0x24>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8006c86:	2334      	movs	r3, #52	; 0x34
 8006c88:	fb03 5504 	mla	r5, r3, r4, r5
 8006c8c:	2308      	movs	r3, #8
 8006c8e:	f885 3090 	strb.w	r3, [r5, #144]	; 0x90
          error = USBH_FAIL;
 8006c92:	2002      	movs	r0, #2
 8006c94:	e798      	b.n	8006bc8 <USBH_MSC_RdWrProcess+0x24>
  USBH_StatusTypeDef error = USBH_BUSY ;
 8006c96:	2001      	movs	r0, #1
 8006c98:	e7f1      	b.n	8006c7e <USBH_MSC_RdWrProcess+0xda>

08006c9a <USBH_MSC_UnitIsReady>:
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c9a:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8006c9e:	69da      	ldr	r2, [r3, #28]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8006ca0:	7803      	ldrb	r3, [r0, #0]
 8006ca2:	b2db      	uxtb	r3, r3
 8006ca4:	2b0b      	cmp	r3, #11
 8006ca6:	d001      	beq.n	8006cac <USBH_MSC_UnitIsReady+0x12>
  {
    res = 1U;
  }
  else
  {
    res = 0U;
 8006ca8:	2000      	movs	r0, #0
 8006caa:	4770      	bx	lr
  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8006cac:	2334      	movs	r3, #52	; 0x34
 8006cae:	fb03 2201 	mla	r2, r3, r1, r2
 8006cb2:	f892 3091 	ldrb.w	r3, [r2, #145]	; 0x91
 8006cb6:	b10b      	cbz	r3, 8006cbc <USBH_MSC_UnitIsReady+0x22>
    res = 0U;
 8006cb8:	2000      	movs	r0, #0
 8006cba:	4770      	bx	lr
    res = 1U;
 8006cbc:	2001      	movs	r0, #1
  }

  return res;
}
 8006cbe:	4770      	bx	lr

08006cc0 <USBH_MSC_GetLUNInfo>:
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006cc0:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8006cc4:	69db      	ldr	r3, [r3, #28]
  if (phost->gState == HOST_CLASS)
 8006cc6:	7800      	ldrb	r0, [r0, #0]
 8006cc8:	b2c0      	uxtb	r0, r0
 8006cca:	280b      	cmp	r0, #11
 8006ccc:	d001      	beq.n	8006cd2 <USBH_MSC_GetLUNInfo+0x12>
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
    return USBH_OK;
  }
  else
  {
    return USBH_FAIL;
 8006cce:	2002      	movs	r0, #2
  }
}
 8006cd0:	4770      	bx	lr
{
 8006cd2:	b510      	push	{r4, lr}
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8006cd4:	2034      	movs	r0, #52	; 0x34
 8006cd6:	fb00 f101 	mul.w	r1, r0, r1
 8006cda:	3190      	adds	r1, #144	; 0x90
 8006cdc:	440b      	add	r3, r1
 8006cde:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8006ce2:	f8d3 e000 	ldr.w	lr, [r3]
 8006ce6:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8006cea:	6898      	ldr	r0, [r3, #8]
 8006cec:	68d9      	ldr	r1, [r3, #12]
 8006cee:	f8c2 e000 	str.w	lr, [r2]
 8006cf2:	f8c2 c004 	str.w	ip, [r2, #4]
 8006cf6:	6090      	str	r0, [r2, #8]
 8006cf8:	60d1      	str	r1, [r2, #12]
 8006cfa:	3310      	adds	r3, #16
 8006cfc:	3210      	adds	r2, #16
 8006cfe:	42a3      	cmp	r3, r4
 8006d00:	d1ef      	bne.n	8006ce2 <USBH_MSC_GetLUNInfo+0x22>
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	6013      	str	r3, [r2, #0]
    return USBH_OK;
 8006d06:	2000      	movs	r0, #0
}
 8006d08:	bd10      	pop	{r4, pc}

08006d0a <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 8006d0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d0e:	b082      	sub	sp, #8
 8006d10:	460d      	mov	r5, r1
 8006d12:	9e08      	ldr	r6, [sp, #32]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d14:	f8d0 137c 	ldr.w	r1, [r0, #892]	; 0x37c
 8006d18:	69cf      	ldr	r7, [r1, #28]

  if ((phost->device.is_connected == 0U) ||
 8006d1a:	f890 1320 	ldrb.w	r1, [r0, #800]	; 0x320
 8006d1e:	b3c9      	cbz	r1, 8006d94 <USBH_MSC_Read+0x8a>
 8006d20:	4604      	mov	r4, r0
      (phost->gState != HOST_CLASS) ||
 8006d22:	7801      	ldrb	r1, [r0, #0]
 8006d24:	b2c9      	uxtb	r1, r1
  if ((phost->device.is_connected == 0U) ||
 8006d26:	290b      	cmp	r1, #11
 8006d28:	d136      	bne.n	8006d98 <USBH_MSC_Read+0x8e>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8006d2a:	2134      	movs	r1, #52	; 0x34
 8006d2c:	fb01 7105 	mla	r1, r1, r5, r7
 8006d30:	f891 1090 	ldrb.w	r1, [r1, #144]	; 0x90
      (phost->gState != HOST_CLASS) ||
 8006d34:	2901      	cmp	r1, #1
 8006d36:	d001      	beq.n	8006d3c <USBH_MSC_Read+0x32>
  {
    return  USBH_FAIL;
 8006d38:	2002      	movs	r0, #2
 8006d3a:	e02e      	b.n	8006d9a <USBH_MSC_Read+0x90>
  }

  MSC_Handle->state = MSC_READ;
 8006d3c:	2006      	movs	r0, #6
 8006d3e:	7338      	strb	r0, [r7, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8006d40:	2134      	movs	r1, #52	; 0x34
 8006d42:	fb01 7105 	mla	r1, r1, r5, r7
 8006d46:	f881 0090 	strb.w	r0, [r1, #144]	; 0x90
  MSC_Handle->rw_lun = lun;
 8006d4a:	f8a7 50fa 	strh.w	r5, [r7, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8006d4e:	9600      	str	r6, [sp, #0]
 8006d50:	4629      	mov	r1, r5
 8006d52:	4620      	mov	r0, r4
 8006d54:	f000 fb5d 	bl	8007412 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 8006d58:	f8d4 83c4 	ldr.w	r8, [r4, #964]	; 0x3c4

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8006d5c:	4629      	mov	r1, r5
 8006d5e:	4620      	mov	r0, r4
 8006d60:	f7ff ff20 	bl	8006ba4 <USBH_MSC_RdWrProcess>
 8006d64:	2801      	cmp	r0, #1
 8006d66:	d111      	bne.n	8006d8c <USBH_MSC_Read+0x82>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8006d68:	f8d4 23c4 	ldr.w	r2, [r4, #964]	; 0x3c4
 8006d6c:	eba2 0208 	sub.w	r2, r2, r8
 8006d70:	f242 7310 	movw	r3, #10000	; 0x2710
 8006d74:	fb06 f303 	mul.w	r3, r6, r3
 8006d78:	429a      	cmp	r2, r3
 8006d7a:	d803      	bhi.n	8006d84 <USBH_MSC_Read+0x7a>
 8006d7c:	f894 3320 	ldrb.w	r3, [r4, #800]	; 0x320
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d1eb      	bne.n	8006d5c <USBH_MSC_Read+0x52>
    {
      MSC_Handle->state = MSC_IDLE;
 8006d84:	2301      	movs	r3, #1
 8006d86:	733b      	strb	r3, [r7, #12]
      return USBH_FAIL;
 8006d88:	2002      	movs	r0, #2
 8006d8a:	e006      	b.n	8006d9a <USBH_MSC_Read+0x90>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	733b      	strb	r3, [r7, #12]

  return USBH_OK;
 8006d90:	2000      	movs	r0, #0
 8006d92:	e002      	b.n	8006d9a <USBH_MSC_Read+0x90>
    return  USBH_FAIL;
 8006d94:	2002      	movs	r0, #2
 8006d96:	e000      	b.n	8006d9a <USBH_MSC_Read+0x90>
 8006d98:	2002      	movs	r0, #2
}
 8006d9a:	b002      	add	sp, #8
 8006d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006da0 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 8006da0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006da4:	b082      	sub	sp, #8
 8006da6:	460d      	mov	r5, r1
 8006da8:	9e08      	ldr	r6, [sp, #32]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006daa:	f8d0 137c 	ldr.w	r1, [r0, #892]	; 0x37c
 8006dae:	69cf      	ldr	r7, [r1, #28]

  if ((phost->device.is_connected == 0U) ||
 8006db0:	f890 1320 	ldrb.w	r1, [r0, #800]	; 0x320
 8006db4:	b3c9      	cbz	r1, 8006e2a <USBH_MSC_Write+0x8a>
 8006db6:	4604      	mov	r4, r0
      (phost->gState != HOST_CLASS) ||
 8006db8:	7801      	ldrb	r1, [r0, #0]
 8006dba:	b2c9      	uxtb	r1, r1
  if ((phost->device.is_connected == 0U) ||
 8006dbc:	290b      	cmp	r1, #11
 8006dbe:	d136      	bne.n	8006e2e <USBH_MSC_Write+0x8e>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8006dc0:	2134      	movs	r1, #52	; 0x34
 8006dc2:	fb01 7105 	mla	r1, r1, r5, r7
 8006dc6:	f891 1090 	ldrb.w	r1, [r1, #144]	; 0x90
      (phost->gState != HOST_CLASS) ||
 8006dca:	2901      	cmp	r1, #1
 8006dcc:	d001      	beq.n	8006dd2 <USBH_MSC_Write+0x32>
  {
    return  USBH_FAIL;
 8006dce:	2002      	movs	r0, #2
 8006dd0:	e02e      	b.n	8006e30 <USBH_MSC_Write+0x90>
  }

  MSC_Handle->state = MSC_WRITE;
 8006dd2:	2007      	movs	r0, #7
 8006dd4:	7338      	strb	r0, [r7, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 8006dd6:	2134      	movs	r1, #52	; 0x34
 8006dd8:	fb01 7105 	mla	r1, r1, r5, r7
 8006ddc:	f881 0090 	strb.w	r0, [r1, #144]	; 0x90
  MSC_Handle->rw_lun = lun;
 8006de0:	f8a7 50fa 	strh.w	r5, [r7, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8006de4:	9600      	str	r6, [sp, #0]
 8006de6:	4629      	mov	r1, r5
 8006de8:	4620      	mov	r0, r4
 8006dea:	f000 facc 	bl	8007386 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8006dee:	f8d4 83c4 	ldr.w	r8, [r4, #964]	; 0x3c4
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8006df2:	4629      	mov	r1, r5
 8006df4:	4620      	mov	r0, r4
 8006df6:	f7ff fed5 	bl	8006ba4 <USBH_MSC_RdWrProcess>
 8006dfa:	2801      	cmp	r0, #1
 8006dfc:	d111      	bne.n	8006e22 <USBH_MSC_Write+0x82>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8006dfe:	f8d4 23c4 	ldr.w	r2, [r4, #964]	; 0x3c4
 8006e02:	eba2 0208 	sub.w	r2, r2, r8
 8006e06:	f242 7310 	movw	r3, #10000	; 0x2710
 8006e0a:	fb06 f303 	mul.w	r3, r6, r3
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	d803      	bhi.n	8006e1a <USBH_MSC_Write+0x7a>
 8006e12:	f894 3320 	ldrb.w	r3, [r4, #800]	; 0x320
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d1eb      	bne.n	8006df2 <USBH_MSC_Write+0x52>
    {
      MSC_Handle->state = MSC_IDLE;
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	733b      	strb	r3, [r7, #12]
      return USBH_FAIL;
 8006e1e:	2002      	movs	r0, #2
 8006e20:	e006      	b.n	8006e30 <USBH_MSC_Write+0x90>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8006e22:	2301      	movs	r3, #1
 8006e24:	733b      	strb	r3, [r7, #12]
  return USBH_OK;
 8006e26:	2000      	movs	r0, #0
 8006e28:	e002      	b.n	8006e30 <USBH_MSC_Write+0x90>
    return  USBH_FAIL;
 8006e2a:	2002      	movs	r0, #2
 8006e2c:	e000      	b.n	8006e30 <USBH_MSC_Write+0x90>
 8006e2e:	2002      	movs	r0, #2
}
 8006e30:	b002      	add	sp, #8
 8006e32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08006e38 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8006e38:	b510      	push	{r4, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e3a:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8006e3e:	69dc      	ldr	r4, [r3, #28]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8006e40:	7921      	ldrb	r1, [r4, #4]
 8006e42:	f001 fc2b 	bl	800869c <USBH_LL_GetLastXferSize>
 8006e46:	280d      	cmp	r0, #13
 8006e48:	d001      	beq.n	8006e4e <USBH_MSC_DecodeCSW+0x16>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 8006e4a:	2002      	movs	r0, #2
      status = BOT_CSW_PHASE_ERROR;
    }
  } /* CSW Length Check*/

  return status;
}
 8006e4c:	bd10      	pop	{r4, pc}
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8006e4e:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8006e50:	4b0a      	ldr	r3, [pc, #40]	; (8006e7c <USBH_MSC_DecodeCSW+0x44>)
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d001      	beq.n	8006e5a <USBH_MSC_DecodeCSW+0x22>
      status = BOT_CSW_PHASE_ERROR;
 8006e56:	2002      	movs	r0, #2
 8006e58:	e7f8      	b.n	8006e4c <USBH_MSC_DecodeCSW+0x14>
      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8006e5a:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8006e5c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006e5e:	429a      	cmp	r2, r3
 8006e60:	d001      	beq.n	8006e66 <USBH_MSC_DecodeCSW+0x2e>
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8006e62:	2001      	movs	r0, #1
 8006e64:	e7f2      	b.n	8006e4c <USBH_MSC_DecodeCSW+0x14>
        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8006e66:	f894 0084 	ldrb.w	r0, [r4, #132]	; 0x84
 8006e6a:	2800      	cmp	r0, #0
 8006e6c:	d0ee      	beq.n	8006e4c <USBH_MSC_DecodeCSW+0x14>
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8006e6e:	2801      	cmp	r0, #1
 8006e70:	d0ec      	beq.n	8006e4c <USBH_MSC_DecodeCSW+0x14>
        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 8006e72:	2802      	cmp	r0, #2
 8006e74:	d0ea      	beq.n	8006e4c <USBH_MSC_DecodeCSW+0x14>
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8006e76:	2001      	movs	r0, #1
 8006e78:	e7e8      	b.n	8006e4c <USBH_MSC_DecodeCSW+0x14>
 8006e7a:	bf00      	nop
 8006e7c:	53425355 	.word	0x53425355

08006e80 <USBH_MSC_BOT_Abort>:
{
 8006e80:	b508      	push	{r3, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e82:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8006e86:	69d9      	ldr	r1, [r3, #28]
  switch (dir)
 8006e88:	b11a      	cbz	r2, 8006e92 <USBH_MSC_BOT_Abort+0x12>
 8006e8a:	2a01      	cmp	r2, #1
 8006e8c:	d005      	beq.n	8006e9a <USBH_MSC_BOT_Abort+0x1a>
 8006e8e:	2002      	movs	r0, #2
}
 8006e90:	bd08      	pop	{r3, pc}
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8006e92:	79c9      	ldrb	r1, [r1, #7]
 8006e94:	f001 f8cf 	bl	8008036 <USBH_ClrFeature>
      break;
 8006e98:	e7fa      	b.n	8006e90 <USBH_MSC_BOT_Abort+0x10>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8006e9a:	7989      	ldrb	r1, [r1, #6]
 8006e9c:	f001 f8cb 	bl	8008036 <USBH_ClrFeature>
      break;
 8006ea0:	e7f6      	b.n	8006e90 <USBH_MSC_BOT_Abort+0x10>

08006ea2 <USBH_MSC_BOT_REQ_Reset>:
{
 8006ea2:	b508      	push	{r3, lr}
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8006ea4:	2221      	movs	r2, #33	; 0x21
 8006ea6:	7402      	strb	r2, [r0, #16]
  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8006ea8:	22ff      	movs	r2, #255	; 0xff
 8006eaa:	7442      	strb	r2, [r0, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006eac:	2100      	movs	r1, #0
 8006eae:	8241      	strh	r1, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006eb0:	8281      	strh	r1, [r0, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8006eb2:	82c1      	strh	r1, [r0, #22]
  return USBH_CtlReq(phost, 0U, 0U);
 8006eb4:	460a      	mov	r2, r1
 8006eb6:	f001 f800 	bl	8007eba <USBH_CtlReq>
}
 8006eba:	bd08      	pop	{r3, pc}

08006ebc <USBH_MSC_BOT_REQ_GetMaxLUN>:
{
 8006ebc:	b508      	push	{r3, lr}
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8006ebe:	22a1      	movs	r2, #161	; 0xa1
 8006ec0:	7402      	strb	r2, [r0, #16]
  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8006ec2:	22fe      	movs	r2, #254	; 0xfe
 8006ec4:	7442      	strb	r2, [r0, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	8242      	strh	r2, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006eca:	8282      	strh	r2, [r0, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8006ecc:	2201      	movs	r2, #1
 8006ece:	82c2      	strh	r2, [r0, #22]
  return USBH_CtlReq(phost, Maxlun, 1U);
 8006ed0:	f000 fff3 	bl	8007eba <USBH_CtlReq>
}
 8006ed4:	bd08      	pop	{r3, pc}
	...

08006ed8 <USBH_MSC_BOT_Init>:
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ed8:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8006edc:	69db      	ldr	r3, [r3, #28]
  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8006ede:	4a05      	ldr	r2, [pc, #20]	; (8006ef4 <USBH_MSC_BOT_Init+0x1c>)
 8006ee0:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8006ee2:	4a05      	ldr	r2, [pc, #20]	; (8006ef8 <USBH_MSC_BOT_Init+0x20>)
 8006ee4:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8006eec:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
}
 8006ef0:	2000      	movs	r0, #0
 8006ef2:	4770      	bx	lr
 8006ef4:	43425355 	.word	0x43425355
 8006ef8:	20304050 	.word	0x20304050

08006efc <USBH_MSC_BOT_Process>:
{
 8006efc:	b570      	push	{r4, r5, r6, lr}
 8006efe:	b082      	sub	sp, #8
 8006f00:	4605      	mov	r5, r0
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006f02:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8006f06:	69de      	ldr	r6, [r3, #28]
  switch (MSC_Handle->hbot.state)
 8006f08:	f896 4050 	ldrb.w	r4, [r6, #80]	; 0x50
 8006f0c:	1e63      	subs	r3, r4, #1
 8006f0e:	2b0a      	cmp	r3, #10
 8006f10:	f200 811d 	bhi.w	800714e <USBH_MSC_BOT_Process+0x252>
 8006f14:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006f18:	001b000b 	.word	0x001b000b
 8006f1c:	004d0042 	.word	0x004d0042
 8006f20:	00830077 	.word	0x00830077
 8006f24:	00c100b6 	.word	0x00c100b6
 8006f28:	00ef00dd 	.word	0x00ef00dd
 8006f2c:	0111      	.short	0x0111
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8006f2e:	f886 1061 	strb.w	r1, [r6, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8006f32:	2302      	movs	r3, #2
 8006f34:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8006f38:	7973      	ldrb	r3, [r6, #5]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	9200      	str	r2, [sp, #0]
 8006f3e:	221f      	movs	r2, #31
 8006f40:	f106 0154 	add.w	r1, r6, #84	; 0x54
 8006f44:	f001 f8c0 	bl	80080c8 <USBH_BulkSendData>
}
 8006f48:	4620      	mov	r0, r4
 8006f4a:	b002      	add	sp, #8
 8006f4c:	bd70      	pop	{r4, r5, r6, pc}
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8006f4e:	7971      	ldrb	r1, [r6, #5]
 8006f50:	f001 fbaa 	bl	80086a8 <USBH_LL_GetURBState>
 8006f54:	4604      	mov	r4, r0
      if (URB_Status == USBH_URB_DONE)
 8006f56:	2801      	cmp	r0, #1
 8006f58:	d005      	beq.n	8006f66 <USBH_MSC_BOT_Process+0x6a>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006f5a:	2802      	cmp	r0, #2
 8006f5c:	d015      	beq.n	8006f8a <USBH_MSC_BOT_Process+0x8e>
        if (URB_Status == USBH_URB_STALL)
 8006f5e:	2805      	cmp	r0, #5
 8006f60:	d017      	beq.n	8006f92 <USBH_MSC_BOT_Process+0x96>
  USBH_StatusTypeDef   status = USBH_BUSY;
 8006f62:	2401      	movs	r4, #1
 8006f64:	e7f0      	b.n	8006f48 <USBH_MSC_BOT_Process+0x4c>
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8006f66:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 8006f68:	b15b      	cbz	r3, 8006f82 <USBH_MSC_BOT_Process+0x86>
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8006f6a:	f996 3060 	ldrsb.w	r3, [r6, #96]	; 0x60
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	db03      	blt.n	8006f7a <USBH_MSC_BOT_Process+0x7e>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8006f72:	2305      	movs	r3, #5
 8006f74:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
 8006f78:	e7e6      	b.n	8006f48 <USBH_MSC_BOT_Process+0x4c>
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8006f7a:	2303      	movs	r3, #3
 8006f7c:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
 8006f80:	e7e2      	b.n	8006f48 <USBH_MSC_BOT_Process+0x4c>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8006f82:	2307      	movs	r3, #7
 8006f84:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
 8006f88:	e7de      	b.n	8006f48 <USBH_MSC_BOT_Process+0x4c>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006f8a:	2401      	movs	r4, #1
 8006f8c:	f886 4050 	strb.w	r4, [r6, #80]	; 0x50
 8006f90:	e7da      	b.n	8006f48 <USBH_MSC_BOT_Process+0x4c>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8006f92:	230a      	movs	r3, #10
 8006f94:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 8006f98:	2401      	movs	r4, #1
 8006f9a:	e7d5      	b.n	8006f48 <USBH_MSC_BOT_Process+0x4c>
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8006f9c:	7933      	ldrb	r3, [r6, #4]
 8006f9e:	8972      	ldrh	r2, [r6, #10]
 8006fa0:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 8006fa4:	f001 f8a6 	bl	80080f4 <USBH_BulkReceiveData>
      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8006fa8:	2304      	movs	r3, #4
 8006faa:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 8006fae:	2401      	movs	r4, #1
      break;
 8006fb0:	e7ca      	b.n	8006f48 <USBH_MSC_BOT_Process+0x4c>
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8006fb2:	7931      	ldrb	r1, [r6, #4]
 8006fb4:	f001 fb78 	bl	80086a8 <USBH_LL_GetURBState>
 8006fb8:	4604      	mov	r4, r0
      if (URB_Status == USBH_URB_DONE)
 8006fba:	2801      	cmp	r0, #1
 8006fbc:	d003      	beq.n	8006fc6 <USBH_MSC_BOT_Process+0xca>
      else if (URB_Status == USBH_URB_STALL)
 8006fbe:	2805      	cmp	r0, #5
 8006fc0:	d01c      	beq.n	8006ffc <USBH_MSC_BOT_Process+0x100>
  USBH_StatusTypeDef   status = USBH_BUSY;
 8006fc2:	2401      	movs	r4, #1
 8006fc4:	e7c0      	b.n	8006f48 <USBH_MSC_BOT_Process+0x4c>
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8006fc6:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 8006fc8:	8972      	ldrh	r2, [r6, #10]
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d90c      	bls.n	8006fe8 <USBH_MSC_BOT_Process+0xec>
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8006fce:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 8006fd2:	4411      	add	r1, r2
 8006fd4:	f8c6 108c 	str.w	r1, [r6, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8006fd8:	1a9b      	subs	r3, r3, r2
 8006fda:	65f3      	str	r3, [r6, #92]	; 0x5c
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8006fdc:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 8006fde:	b933      	cbnz	r3, 8006fee <USBH_MSC_BOT_Process+0xf2>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8006fe0:	2307      	movs	r3, #7
 8006fe2:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
 8006fe6:	e7af      	b.n	8006f48 <USBH_MSC_BOT_Process+0x4c>
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	65f3      	str	r3, [r6, #92]	; 0x5c
 8006fec:	e7f6      	b.n	8006fdc <USBH_MSC_BOT_Process+0xe0>
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8006fee:	7933      	ldrb	r3, [r6, #4]
 8006ff0:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 8006ff4:	4628      	mov	r0, r5
 8006ff6:	f001 f87d 	bl	80080f4 <USBH_BulkReceiveData>
 8006ffa:	e7a5      	b.n	8006f48 <USBH_MSC_BOT_Process+0x4c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8006ffc:	2309      	movs	r3, #9
 8006ffe:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 8007002:	2401      	movs	r4, #1
 8007004:	e7a0      	b.n	8006f48 <USBH_MSC_BOT_Process+0x4c>
      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8007006:	7973      	ldrb	r3, [r6, #5]
 8007008:	8932      	ldrh	r2, [r6, #8]
 800700a:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 800700e:	2401      	movs	r4, #1
 8007010:	9400      	str	r4, [sp, #0]
 8007012:	f001 f859 	bl	80080c8 <USBH_BulkSendData>
      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8007016:	2306      	movs	r3, #6
 8007018:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
      break;
 800701c:	e794      	b.n	8006f48 <USBH_MSC_BOT_Process+0x4c>
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800701e:	7971      	ldrb	r1, [r6, #5]
 8007020:	f001 fb42 	bl	80086a8 <USBH_LL_GetURBState>
 8007024:	4604      	mov	r4, r0
      if (URB_Status == USBH_URB_DONE)
 8007026:	2801      	cmp	r0, #1
 8007028:	d005      	beq.n	8007036 <USBH_MSC_BOT_Process+0x13a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800702a:	2802      	cmp	r0, #2
 800702c:	d020      	beq.n	8007070 <USBH_MSC_BOT_Process+0x174>
      else if (URB_Status == USBH_URB_STALL)
 800702e:	2805      	cmp	r0, #5
 8007030:	d023      	beq.n	800707a <USBH_MSC_BOT_Process+0x17e>
  USBH_StatusTypeDef   status = USBH_BUSY;
 8007032:	2401      	movs	r4, #1
 8007034:	e788      	b.n	8006f48 <USBH_MSC_BOT_Process+0x4c>
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8007036:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 8007038:	8932      	ldrh	r2, [r6, #8]
 800703a:	4293      	cmp	r3, r2
 800703c:	d90c      	bls.n	8007058 <USBH_MSC_BOT_Process+0x15c>
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800703e:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 8007042:	4411      	add	r1, r2
 8007044:	f8c6 108c 	str.w	r1, [r6, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8007048:	1a9b      	subs	r3, r3, r2
 800704a:	65f3      	str	r3, [r6, #92]	; 0x5c
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800704c:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 800704e:	b933      	cbnz	r3, 800705e <USBH_MSC_BOT_Process+0x162>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8007050:	2307      	movs	r3, #7
 8007052:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
 8007056:	e777      	b.n	8006f48 <USBH_MSC_BOT_Process+0x4c>
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8007058:	2300      	movs	r3, #0
 800705a:	65f3      	str	r3, [r6, #92]	; 0x5c
 800705c:	e7f6      	b.n	800704c <USBH_MSC_BOT_Process+0x150>
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800705e:	7973      	ldrb	r3, [r6, #5]
 8007060:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 8007064:	2001      	movs	r0, #1
 8007066:	9000      	str	r0, [sp, #0]
 8007068:	4628      	mov	r0, r5
 800706a:	f001 f82d 	bl	80080c8 <USBH_BulkSendData>
 800706e:	e76b      	b.n	8006f48 <USBH_MSC_BOT_Process+0x4c>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8007070:	2305      	movs	r3, #5
 8007072:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 8007076:	2401      	movs	r4, #1
 8007078:	e766      	b.n	8006f48 <USBH_MSC_BOT_Process+0x4c>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800707a:	230a      	movs	r3, #10
 800707c:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 8007080:	2401      	movs	r4, #1
 8007082:	e761      	b.n	8006f48 <USBH_MSC_BOT_Process+0x4c>
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8007084:	7933      	ldrb	r3, [r6, #4]
 8007086:	220d      	movs	r2, #13
 8007088:	f106 0178 	add.w	r1, r6, #120	; 0x78
 800708c:	f001 f832 	bl	80080f4 <USBH_BulkReceiveData>
      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8007090:	2308      	movs	r3, #8
 8007092:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 8007096:	2401      	movs	r4, #1
      break;
 8007098:	e756      	b.n	8006f48 <USBH_MSC_BOT_Process+0x4c>
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800709a:	7931      	ldrb	r1, [r6, #4]
 800709c:	f001 fb04 	bl	80086a8 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 80070a0:	2801      	cmp	r0, #1
 80070a2:	d003      	beq.n	80070ac <USBH_MSC_BOT_Process+0x1b0>
      else if (URB_Status == USBH_URB_STALL)
 80070a4:	2805      	cmp	r0, #5
 80070a6:	d00f      	beq.n	80070c8 <USBH_MSC_BOT_Process+0x1cc>
  USBH_StatusTypeDef   status = USBH_BUSY;
 80070a8:	2401      	movs	r4, #1
 80070aa:	e74d      	b.n	8006f48 <USBH_MSC_BOT_Process+0x4c>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80070ac:	2301      	movs	r3, #1
 80070ae:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 80070b2:	f886 3052 	strb.w	r3, [r6, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 80070b6:	4628      	mov	r0, r5
 80070b8:	f7ff febe 	bl	8006e38 <USBH_MSC_DecodeCSW>
        if (CSW_Status == BOT_CSW_CMD_PASSED)
 80070bc:	4604      	mov	r4, r0
 80070be:	2800      	cmp	r0, #0
 80070c0:	f43f af42 	beq.w	8006f48 <USBH_MSC_BOT_Process+0x4c>
          status = USBH_FAIL;
 80070c4:	2402      	movs	r4, #2
 80070c6:	e73f      	b.n	8006f48 <USBH_MSC_BOT_Process+0x4c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 80070c8:	2309      	movs	r3, #9
 80070ca:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 80070ce:	2401      	movs	r4, #1
 80070d0:	e73a      	b.n	8006f48 <USBH_MSC_BOT_Process+0x4c>
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 80070d2:	2200      	movs	r2, #0
 80070d4:	f7ff fed4 	bl	8006e80 <USBH_MSC_BOT_Abort>
      if (error == USBH_OK)
 80070d8:	b920      	cbnz	r0, 80070e4 <USBH_MSC_BOT_Process+0x1e8>
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 80070da:	2307      	movs	r3, #7
 80070dc:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 80070e0:	2401      	movs	r4, #1
 80070e2:	e731      	b.n	8006f48 <USBH_MSC_BOT_Process+0x4c>
      else if (error == USBH_UNRECOVERED_ERROR)
 80070e4:	2804      	cmp	r0, #4
 80070e6:	d001      	beq.n	80070ec <USBH_MSC_BOT_Process+0x1f0>
  USBH_StatusTypeDef   status = USBH_BUSY;
 80070e8:	2401      	movs	r4, #1
 80070ea:	e72d      	b.n	8006f48 <USBH_MSC_BOT_Process+0x4c>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 80070ec:	230b      	movs	r3, #11
 80070ee:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 80070f2:	2401      	movs	r4, #1
 80070f4:	e728      	b.n	8006f48 <USBH_MSC_BOT_Process+0x4c>
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 80070f6:	2201      	movs	r2, #1
 80070f8:	f7ff fec2 	bl	8006e80 <USBH_MSC_BOT_Abort>
      if (error == USBH_OK)
 80070fc:	b118      	cbz	r0, 8007106 <USBH_MSC_BOT_Process+0x20a>
        if (error == USBH_UNRECOVERED_ERROR)
 80070fe:	2804      	cmp	r0, #4
 8007100:	d016      	beq.n	8007130 <USBH_MSC_BOT_Process+0x234>
  USBH_StatusTypeDef   status = USBH_BUSY;
 8007102:	2401      	movs	r4, #1
 8007104:	e720      	b.n	8006f48 <USBH_MSC_BOT_Process+0x4c>
        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8007106:	7971      	ldrb	r1, [r6, #5]
 8007108:	4628      	mov	r0, r5
 800710a:	f001 faf6 	bl	80086fa <USBH_LL_GetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800710e:	f1c0 0201 	rsb	r2, r0, #1
 8007112:	b2d2      	uxtb	r2, r2
 8007114:	7971      	ldrb	r1, [r6, #5]
 8007116:	4628      	mov	r0, r5
 8007118:	f001 fada 	bl	80086d0 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800711c:	2200      	movs	r2, #0
 800711e:	7931      	ldrb	r1, [r6, #4]
 8007120:	4628      	mov	r0, r5
 8007122:	f001 fad5 	bl	80086d0 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8007126:	2309      	movs	r3, #9
 8007128:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 800712c:	2401      	movs	r4, #1
 800712e:	e70b      	b.n	8006f48 <USBH_MSC_BOT_Process+0x4c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8007130:	230b      	movs	r3, #11
 8007132:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 8007136:	2401      	movs	r4, #1
 8007138:	e706      	b.n	8006f48 <USBH_MSC_BOT_Process+0x4c>
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800713a:	f7ff feb2 	bl	8006ea2 <USBH_MSC_BOT_REQ_Reset>
      if (status == USBH_OK)
 800713e:	4604      	mov	r4, r0
 8007140:	2800      	cmp	r0, #0
 8007142:	f47f af01 	bne.w	8006f48 <USBH_MSC_BOT_Process+0x4c>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007146:	2301      	movs	r3, #1
 8007148:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
 800714c:	e6fc      	b.n	8006f48 <USBH_MSC_BOT_Process+0x4c>
  switch (MSC_Handle->hbot.state)
 800714e:	2401      	movs	r4, #1
 8007150:	e6fa      	b.n	8006f48 <USBH_MSC_BOT_Process+0x4c>

08007152 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 8007152:	b508      	push	{r3, lr}
 8007154:	4602      	mov	r2, r0
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007156:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 800715a:	69db      	ldr	r3, [r3, #28]

  switch (MSC_Handle->hbot.cmd_state)
 800715c:	f893 0052 	ldrb.w	r0, [r3, #82]	; 0x52
 8007160:	2801      	cmp	r0, #1
 8007162:	d003      	beq.n	800716c <USBH_MSC_SCSI_TestUnitReady+0x1a>
 8007164:	2802      	cmp	r0, #2
 8007166:	d017      	beq.n	8007198 <USBH_MSC_SCSI_TestUnitReady+0x46>
 8007168:	2002      	movs	r0, #2
    default:
      break;
  }

  return error;
}
 800716a:	bd08      	pop	{r3, pc}
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800716c:	2200      	movs	r2, #0
 800716e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8007170:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007174:	210a      	movs	r1, #10
 8007176:	f883 1062 	strb.w	r1, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800717a:	f8c3 2063 	str.w	r2, [r3, #99]	; 0x63
 800717e:	f8c3 2067 	str.w	r2, [r3, #103]	; 0x67
 8007182:	f8c3 206b 	str.w	r2, [r3, #107]	; 0x6b
 8007186:	f8c3 206f 	str.w	r2, [r3, #111]	; 0x6f
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800718a:	2201      	movs	r2, #1
 800718c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007190:	2202      	movs	r2, #2
 8007192:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      break;
 8007196:	e7e8      	b.n	800716a <USBH_MSC_SCSI_TestUnitReady+0x18>
      error = USBH_MSC_BOT_Process(phost, lun);
 8007198:	4610      	mov	r0, r2
 800719a:	f7ff feaf 	bl	8006efc <USBH_MSC_BOT_Process>
      break;
 800719e:	e7e4      	b.n	800716a <USBH_MSC_SCSI_TestUnitReady+0x18>

080071a0 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 80071a0:	b538      	push	{r3, r4, r5, lr}
 80071a2:	4603      	mov	r3, r0
  USBH_StatusTypeDef    error = USBH_BUSY ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80071a4:	f8d0 037c 	ldr.w	r0, [r0, #892]	; 0x37c
 80071a8:	69c4      	ldr	r4, [r0, #28]

  switch (MSC_Handle->hbot.cmd_state)
 80071aa:	f894 0052 	ldrb.w	r0, [r4, #82]	; 0x52
 80071ae:	2801      	cmp	r0, #1
 80071b0:	d004      	beq.n	80071bc <USBH_MSC_SCSI_ReadCapacity+0x1c>
 80071b2:	4615      	mov	r5, r2
 80071b4:	2802      	cmp	r0, #2
 80071b6:	d020      	beq.n	80071fa <USBH_MSC_SCSI_ReadCapacity+0x5a>
 80071b8:	2001      	movs	r0, #1
    default:
      break;
  }

  return error;
}
 80071ba:	bd38      	pop	{r3, r4, r5, pc}
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 80071bc:	2308      	movs	r3, #8
 80071be:	65e3      	str	r3, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80071c0:	2380      	movs	r3, #128	; 0x80
 80071c2:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80071c6:	230a      	movs	r3, #10
 80071c8:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80071cc:	2300      	movs	r3, #0
 80071ce:	f8c4 3063 	str.w	r3, [r4, #99]	; 0x63
 80071d2:	f8c4 3067 	str.w	r3, [r4, #103]	; 0x67
 80071d6:	f8c4 306b 	str.w	r3, [r4, #107]	; 0x6b
 80071da:	f8c4 306f 	str.w	r3, [r4, #111]	; 0x6f
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 80071de:	2325      	movs	r3, #37	; 0x25
 80071e0:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80071e4:	2301      	movs	r3, #1
 80071e6:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80071ea:	2302      	movs	r3, #2
 80071ec:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80071f0:	f104 0310 	add.w	r3, r4, #16
 80071f4:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      break;
 80071f8:	e7df      	b.n	80071ba <USBH_MSC_SCSI_ReadCapacity+0x1a>
      error = USBH_MSC_BOT_Process(phost, lun);
 80071fa:	4618      	mov	r0, r3
 80071fc:	f7ff fe7e 	bl	8006efc <USBH_MSC_BOT_Process>
      if (error == USBH_OK)
 8007200:	2800      	cmp	r0, #0
 8007202:	d1da      	bne.n	80071ba <USBH_MSC_SCSI_ReadCapacity+0x1a>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8007204:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8007208:	78d3      	ldrb	r3, [r2, #3]
 800720a:	7891      	ldrb	r1, [r2, #2]
 800720c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8007210:	7851      	ldrb	r1, [r2, #1]
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8007212:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8007216:	7812      	ldrb	r2, [r2, #0]
 8007218:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800721c:	602b      	str	r3, [r5, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800721e:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8007222:	79d3      	ldrb	r3, [r2, #7]
 8007224:	7992      	ldrb	r2, [r2, #6]
 8007226:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800722a:	80ab      	strh	r3, [r5, #4]
 800722c:	e7c5      	b.n	80071ba <USBH_MSC_SCSI_ReadCapacity+0x1a>

0800722e <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800722e:	b570      	push	{r4, r5, r6, lr}
  USBH_StatusTypeDef error = USBH_FAIL;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007230:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8007234:	69dc      	ldr	r4, [r3, #28]

  switch (MSC_Handle->hbot.cmd_state)
 8007236:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 800723a:	2d01      	cmp	r5, #1
 800723c:	d005      	beq.n	800724a <USBH_MSC_SCSI_Inquiry+0x1c>
 800723e:	4616      	mov	r6, r2
 8007240:	2d02      	cmp	r5, #2
 8007242:	d024      	beq.n	800728e <USBH_MSC_SCSI_Inquiry+0x60>
 8007244:	2502      	movs	r5, #2
    default:
      break;
  }

  return error;
}
 8007246:	4628      	mov	r0, r5
 8007248:	bd70      	pop	{r4, r5, r6, pc}
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800724a:	2224      	movs	r2, #36	; 0x24
 800724c:	65e2      	str	r2, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800724e:	2380      	movs	r3, #128	; 0x80
 8007250:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007254:	230a      	movs	r3, #10
 8007256:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800725a:	2300      	movs	r3, #0
 800725c:	f8c4 3063 	str.w	r3, [r4, #99]	; 0x63
 8007260:	f8c4 3067 	str.w	r3, [r4, #103]	; 0x67
 8007264:	f8a4 306b 	strh.w	r3, [r4, #107]	; 0x6b
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 8007268:	2312      	movs	r3, #18
 800726a:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800726e:	0149      	lsls	r1, r1, #5
 8007270:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 8007274:	f884 2067 	strb.w	r2, [r4, #103]	; 0x67
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007278:	2301      	movs	r3, #1
 800727a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800727e:	2302      	movs	r3, #2
 8007280:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8007284:	f104 0310 	add.w	r3, r4, #16
 8007288:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      break;
 800728c:	e7db      	b.n	8007246 <USBH_MSC_SCSI_Inquiry+0x18>
      error = USBH_MSC_BOT_Process(phost, lun);
 800728e:	f7ff fe35 	bl	8006efc <USBH_MSC_BOT_Process>
      if (error == USBH_OK)
 8007292:	4605      	mov	r5, r0
 8007294:	2800      	cmp	r0, #0
 8007296:	d1d6      	bne.n	8007246 <USBH_MSC_SCSI_Inquiry+0x18>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8007298:	2222      	movs	r2, #34	; 0x22
 800729a:	2100      	movs	r1, #0
 800729c:	4630      	mov	r0, r6
 800729e:	f001 fe1d 	bl	8008edc <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 80072a2:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80072a6:	781b      	ldrb	r3, [r3, #0]
 80072a8:	f003 031f 	and.w	r3, r3, #31
 80072ac:	7073      	strb	r3, [r6, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 80072ae:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80072b2:	781b      	ldrb	r3, [r3, #0]
 80072b4:	095b      	lsrs	r3, r3, #5
 80072b6:	7033      	strb	r3, [r6, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 80072b8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80072bc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	db17      	blt.n	80072f4 <USBH_MSC_SCSI_Inquiry+0xc6>
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 80072c4:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80072c8:	689a      	ldr	r2, [r3, #8]
 80072ca:	68db      	ldr	r3, [r3, #12]
 80072cc:	f8c6 2003 	str.w	r2, [r6, #3]
 80072d0:	f8c6 3007 	str.w	r3, [r6, #7]
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 80072d4:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80072d8:	6918      	ldr	r0, [r3, #16]
 80072da:	6959      	ldr	r1, [r3, #20]
 80072dc:	699a      	ldr	r2, [r3, #24]
 80072de:	69db      	ldr	r3, [r3, #28]
 80072e0:	60f0      	str	r0, [r6, #12]
 80072e2:	6131      	str	r1, [r6, #16]
 80072e4:	6172      	str	r2, [r6, #20]
 80072e6:	61b3      	str	r3, [r6, #24]
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 80072e8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80072ec:	6a1b      	ldr	r3, [r3, #32]
 80072ee:	f8c6 301d 	str.w	r3, [r6, #29]
 80072f2:	e7a8      	b.n	8007246 <USBH_MSC_SCSI_Inquiry+0x18>
          inquiry->RemovableMedia = 1U;
 80072f4:	2301      	movs	r3, #1
 80072f6:	70b3      	strb	r3, [r6, #2]
 80072f8:	e7e4      	b.n	80072c4 <USBH_MSC_SCSI_Inquiry+0x96>

080072fa <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 80072fa:	b538      	push	{r3, r4, r5, lr}
 80072fc:	4603      	mov	r3, r0
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80072fe:	f8d0 037c 	ldr.w	r0, [r0, #892]	; 0x37c
 8007302:	69c4      	ldr	r4, [r0, #28]

  switch (MSC_Handle->hbot.cmd_state)
 8007304:	f894 0052 	ldrb.w	r0, [r4, #82]	; 0x52
 8007308:	2801      	cmp	r0, #1
 800730a:	d004      	beq.n	8007316 <USBH_MSC_SCSI_RequestSense+0x1c>
 800730c:	4615      	mov	r5, r2
 800730e:	2802      	cmp	r0, #2
 8007310:	d025      	beq.n	800735e <USBH_MSC_SCSI_RequestSense+0x64>
 8007312:	2002      	movs	r0, #2
    default:
      break;
  }

  return error;
}
 8007314:	bd38      	pop	{r3, r4, r5, pc}
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8007316:	220e      	movs	r2, #14
 8007318:	65e2      	str	r2, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800731a:	2380      	movs	r3, #128	; 0x80
 800731c:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007320:	230a      	movs	r3, #10
 8007322:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8007326:	2300      	movs	r3, #0
 8007328:	f8c4 3063 	str.w	r3, [r4, #99]	; 0x63
 800732c:	f8c4 3067 	str.w	r3, [r4, #103]	; 0x67
 8007330:	f8c4 306b 	str.w	r3, [r4, #107]	; 0x6b
 8007334:	f8c4 306f 	str.w	r3, [r4, #111]	; 0x6f
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 8007338:	2303      	movs	r3, #3
 800733a:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800733e:	0149      	lsls	r1, r1, #5
 8007340:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 8007344:	f884 2067 	strb.w	r2, [r4, #103]	; 0x67
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007348:	2301      	movs	r3, #1
 800734a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800734e:	2302      	movs	r3, #2
 8007350:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8007354:	f104 0310 	add.w	r3, r4, #16
 8007358:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      break;
 800735c:	e7da      	b.n	8007314 <USBH_MSC_SCSI_RequestSense+0x1a>
      error = USBH_MSC_BOT_Process(phost, lun);
 800735e:	4618      	mov	r0, r3
 8007360:	f7ff fdcc 	bl	8006efc <USBH_MSC_BOT_Process>
      if (error == USBH_OK)
 8007364:	2800      	cmp	r0, #0
 8007366:	d1d5      	bne.n	8007314 <USBH_MSC_SCSI_RequestSense+0x1a>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 8007368:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800736c:	789b      	ldrb	r3, [r3, #2]
 800736e:	f003 030f 	and.w	r3, r3, #15
 8007372:	702b      	strb	r3, [r5, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8007374:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8007378:	7b1b      	ldrb	r3, [r3, #12]
 800737a:	706b      	strb	r3, [r5, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800737c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8007380:	7b5b      	ldrb	r3, [r3, #13]
 8007382:	70ab      	strb	r3, [r5, #2]
 8007384:	e7c6      	b.n	8007314 <USBH_MSC_SCSI_RequestSense+0x1a>

08007386 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 8007386:	b538      	push	{r3, r4, r5, lr}
 8007388:	4684      	mov	ip, r0
  USBH_StatusTypeDef    error = USBH_FAIL ;

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800738a:	f8d0 037c 	ldr.w	r0, [r0, #892]	; 0x37c
 800738e:	69c4      	ldr	r4, [r0, #28]

  switch (MSC_Handle->hbot.cmd_state)
 8007390:	f894 0052 	ldrb.w	r0, [r4, #82]	; 0x52
 8007394:	2801      	cmp	r0, #1
 8007396:	d003      	beq.n	80073a0 <USBH_MSC_SCSI_Write+0x1a>
 8007398:	2802      	cmp	r0, #2
 800739a:	d036      	beq.n	800740a <USBH_MSC_SCSI_Write+0x84>
 800739c:	2002      	movs	r0, #2
    default:
      break;
  }

  return error;
}
 800739e:	bd38      	pop	{r3, r4, r5, pc}
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 80073a0:	f8b4 1098 	ldrh.w	r1, [r4, #152]	; 0x98
 80073a4:	9d04      	ldr	r5, [sp, #16]
 80073a6:	fb05 f101 	mul.w	r1, r5, r1
 80073aa:	65e1      	str	r1, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 80073ac:	2100      	movs	r1, #0
 80073ae:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80073b2:	f04f 0c0a 	mov.w	ip, #10
 80073b6:	f884 c062 	strb.w	ip, [r4, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80073ba:	f8c4 1063 	str.w	r1, [r4, #99]	; 0x63
 80073be:	f8c4 1067 	str.w	r1, [r4, #103]	; 0x67
 80073c2:	f8c4 106b 	str.w	r1, [r4, #107]	; 0x6b
 80073c6:	f8c4 106f 	str.w	r1, [r4, #111]	; 0x6f
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 80073ca:	212a      	movs	r1, #42	; 0x2a
 80073cc:	f884 1063 	strb.w	r1, [r4, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 80073d0:	f3c2 6107 	ubfx	r1, r2, #24, #8
 80073d4:	f884 1065 	strb.w	r1, [r4, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 80073d8:	f3c2 4107 	ubfx	r1, r2, #16, #8
 80073dc:	f884 1066 	strb.w	r1, [r4, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 80073e0:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80073e4:	f884 1067 	strb.w	r1, [r4, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 80073e8:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 80073ec:	f3c5 2207 	ubfx	r2, r5, #8, #8
 80073f0:	f884 206a 	strb.w	r2, [r4, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 80073f4:	f884 506b 	strb.w	r5, [r4, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80073f8:	2201      	movs	r2, #1
 80073fa:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80073fe:	2202      	movs	r2, #2
 8007400:	f884 2052 	strb.w	r2, [r4, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8007404:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      break;
 8007408:	e7c9      	b.n	800739e <USBH_MSC_SCSI_Write+0x18>
      error = USBH_MSC_BOT_Process(phost, lun);
 800740a:	4660      	mov	r0, ip
 800740c:	f7ff fd76 	bl	8006efc <USBH_MSC_BOT_Process>
      break;
 8007410:	e7c5      	b.n	800739e <USBH_MSC_SCSI_Write+0x18>

08007412 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 8007412:	b538      	push	{r3, r4, r5, lr}
 8007414:	4684      	mov	ip, r0
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007416:	f8d0 037c 	ldr.w	r0, [r0, #892]	; 0x37c
 800741a:	69c4      	ldr	r4, [r0, #28]

  switch (MSC_Handle->hbot.cmd_state)
 800741c:	f894 0052 	ldrb.w	r0, [r4, #82]	; 0x52
 8007420:	2801      	cmp	r0, #1
 8007422:	d003      	beq.n	800742c <USBH_MSC_SCSI_Read+0x1a>
 8007424:	2802      	cmp	r0, #2
 8007426:	d036      	beq.n	8007496 <USBH_MSC_SCSI_Read+0x84>
 8007428:	2002      	movs	r0, #2
    default:
      break;
  }

  return error;
}
 800742a:	bd38      	pop	{r3, r4, r5, pc}
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800742c:	f8b4 1098 	ldrh.w	r1, [r4, #152]	; 0x98
 8007430:	9d04      	ldr	r5, [sp, #16]
 8007432:	fb05 f101 	mul.w	r1, r5, r1
 8007436:	65e1      	str	r1, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8007438:	2180      	movs	r1, #128	; 0x80
 800743a:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800743e:	210a      	movs	r1, #10
 8007440:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8007444:	2100      	movs	r1, #0
 8007446:	f8c4 1063 	str.w	r1, [r4, #99]	; 0x63
 800744a:	f8c4 1067 	str.w	r1, [r4, #103]	; 0x67
 800744e:	f8c4 106b 	str.w	r1, [r4, #107]	; 0x6b
 8007452:	f8c4 106f 	str.w	r1, [r4, #111]	; 0x6f
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 8007456:	2128      	movs	r1, #40	; 0x28
 8007458:	f884 1063 	strb.w	r1, [r4, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800745c:	f3c2 6107 	ubfx	r1, r2, #24, #8
 8007460:	f884 1065 	strb.w	r1, [r4, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8007464:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8007468:	f884 1066 	strb.w	r1, [r4, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800746c:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8007470:	f884 1067 	strb.w	r1, [r4, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8007474:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8007478:	f3c5 2207 	ubfx	r2, r5, #8, #8
 800747c:	f884 206a 	strb.w	r2, [r4, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8007480:	f884 506b 	strb.w	r5, [r4, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007484:	2201      	movs	r2, #1
 8007486:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800748a:	2202      	movs	r2, #2
 800748c:	f884 2052 	strb.w	r2, [r4, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8007490:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      break;
 8007494:	e7c9      	b.n	800742a <USBH_MSC_SCSI_Read+0x18>
      error = USBH_MSC_BOT_Process(phost, lun);
 8007496:	4660      	mov	r0, ip
 8007498:	f7ff fd30 	bl	8006efc <USBH_MSC_BOT_Process>
      break;
 800749c:	e7c5      	b.n	800742a <USBH_MSC_SCSI_Read+0x18>

0800749e <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800749e:	4684      	mov	ip, r0
  uint32_t i = 0U;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80074a0:	2300      	movs	r3, #0
 80074a2:	e006      	b.n	80074b2 <DeInitStateMachine+0x14>
  {
    phost->Pipes[i] = 0U;
 80074a4:	f103 02e0 	add.w	r2, r3, #224	; 0xe0
 80074a8:	eb0c 0282 	add.w	r2, ip, r2, lsl #2
 80074ac:	2100      	movs	r1, #0
 80074ae:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80074b0:	3301      	adds	r3, #1
 80074b2:	2b0e      	cmp	r3, #14
 80074b4:	d9f6      	bls.n	80074a4 <DeInitStateMachine+0x6>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80074b6:	2300      	movs	r3, #0
 80074b8:	e005      	b.n	80074c6 <DeInitStateMachine+0x28>
  {
    phost->device.Data[i] = 0U;
 80074ba:	eb0c 0203 	add.w	r2, ip, r3
 80074be:	2100      	movs	r1, #0
 80074c0:	f882 111c 	strb.w	r1, [r2, #284]	; 0x11c
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80074c4:	3301      	adds	r3, #1
 80074c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074ca:	d3f6      	bcc.n	80074ba <DeInitStateMachine+0x1c>
  }

  phost->gState = HOST_IDLE;
 80074cc:	2000      	movs	r0, #0
 80074ce:	f88c 0000 	strb.w	r0, [ip]
  phost->EnumState = ENUM_IDLE;
 80074d2:	f88c 0001 	strb.w	r0, [ip, #1]
  phost->RequestState = CMD_SEND;
 80074d6:	2301      	movs	r3, #1
 80074d8:	f88c 3002 	strb.w	r3, [ip, #2]
  phost->Timer = 0U;
 80074dc:	f8cc 03c4 	str.w	r0, [ip, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80074e0:	f88c 3018 	strb.w	r3, [ip, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80074e4:	2240      	movs	r2, #64	; 0x40
 80074e6:	f88c 2006 	strb.w	r2, [ip, #6]
  phost->Control.errorcount = 0U;
 80074ea:	f88c 0019 	strb.w	r0, [ip, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80074ee:	f88c 031c 	strb.w	r0, [ip, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 80074f2:	f88c 331d 	strb.w	r3, [ip, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80074f6:	f88c 031f 	strb.w	r0, [ip, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80074fa:	f88c 031e 	strb.w	r0, [ip, #798]	; 0x31e

  return USBH_OK;
}
 80074fe:	4770      	bx	lr

08007500 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007500:	b508      	push	{r3, lr}
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007502:	7803      	ldrb	r3, [r0, #0]
 8007504:	b2db      	uxtb	r3, r3
 8007506:	2b0b      	cmp	r3, #11
 8007508:	d000      	beq.n	800750c <USBH_HandleSof+0xc>
  {
    phost->pActiveClass->SOFProcess(phost);
  }
}
 800750a:	bd08      	pop	{r3, pc}
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800750c:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8007510:	2b00      	cmp	r3, #0
 8007512:	d0fa      	beq.n	800750a <USBH_HandleSof+0xa>
    phost->pActiveClass->SOFProcess(phost);
 8007514:	699b      	ldr	r3, [r3, #24]
 8007516:	4798      	blx	r3
}
 8007518:	e7f7      	b.n	800750a <USBH_HandleSof+0xa>

0800751a <USBH_HandleEnum>:
{
 800751a:	b570      	push	{r4, r5, r6, lr}
 800751c:	b084      	sub	sp, #16
 800751e:	4604      	mov	r4, r0
  switch (phost->EnumState)
 8007520:	7845      	ldrb	r5, [r0, #1]
 8007522:	2d07      	cmp	r5, #7
 8007524:	f200 812c 	bhi.w	8007780 <USBH_HandleEnum+0x266>
 8007528:	e8df f015 	tbh	[pc, r5, lsl #1]
 800752c:	00480008 	.word	0x00480008
 8007530:	009a0069 	.word	0x009a0069
 8007534:	00e500bf 	.word	0x00e500bf
 8007538:	011700fe 	.word	0x011700fe
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800753c:	2108      	movs	r1, #8
 800753e:	f000 fcfd 	bl	8007f3c <USBH_Get_DevDesc>
      if (ReqStatus == USBH_OK)
 8007542:	b118      	cbz	r0, 800754c <USBH_HandleEnum+0x32>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007544:	2803      	cmp	r0, #3
 8007546:	d021      	beq.n	800758c <USBH_HandleEnum+0x72>
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007548:	2501      	movs	r5, #1
 800754a:	e109      	b.n	8007760 <USBH_HandleEnum+0x246>
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800754c:	f894 332d 	ldrb.w	r3, [r4, #813]	; 0x32d
 8007550:	71a3      	strb	r3, [r4, #6]
        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007552:	2501      	movs	r5, #1
 8007554:	7065      	strb	r5, [r4, #1]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007556:	9302      	str	r3, [sp, #8]
 8007558:	2600      	movs	r6, #0
 800755a:	9601      	str	r6, [sp, #4]
 800755c:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 8007560:	9300      	str	r3, [sp, #0]
 8007562:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8007566:	2280      	movs	r2, #128	; 0x80
 8007568:	7921      	ldrb	r1, [r4, #4]
 800756a:	4620      	mov	r0, r4
 800756c:	f000 fde5 	bl	800813a <USBH_OpenPipe>
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007570:	79a3      	ldrb	r3, [r4, #6]
 8007572:	9302      	str	r3, [sp, #8]
 8007574:	9601      	str	r6, [sp, #4]
 8007576:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 800757a:	9300      	str	r3, [sp, #0]
 800757c:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8007580:	4632      	mov	r2, r6
 8007582:	7961      	ldrb	r1, [r4, #5]
 8007584:	4620      	mov	r0, r4
 8007586:	f000 fdd8 	bl	800813a <USBH_OpenPipe>
 800758a:	e0e9      	b.n	8007760 <USBH_HandleEnum+0x246>
        phost->device.EnumCnt++;
 800758c:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 8007590:	3301      	adds	r3, #1
 8007592:	b2db      	uxtb	r3, r3
 8007594:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007598:	2b03      	cmp	r3, #3
 800759a:	d903      	bls.n	80075a4 <USBH_HandleEnum+0x8a>
          phost->gState = HOST_ABORT_STATE;
 800759c:	230d      	movs	r3, #13
 800759e:	7023      	strb	r3, [r4, #0]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80075a0:	2501      	movs	r5, #1
 80075a2:	e0dd      	b.n	8007760 <USBH_HandleEnum+0x246>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80075a4:	7961      	ldrb	r1, [r4, #5]
 80075a6:	4620      	mov	r0, r4
 80075a8:	f000 fdef 	bl	800818a <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80075ac:	7921      	ldrb	r1, [r4, #4]
 80075ae:	4620      	mov	r0, r4
 80075b0:	f000 fdeb 	bl	800818a <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80075b4:	2300      	movs	r3, #0
 80075b6:	7023      	strb	r3, [r4, #0]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80075b8:	2501      	movs	r5, #1
 80075ba:	e0d1      	b.n	8007760 <USBH_HandleEnum+0x246>
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80075bc:	2112      	movs	r1, #18
 80075be:	f000 fcbd 	bl	8007f3c <USBH_Get_DevDesc>
      if (ReqStatus == USBH_OK)
 80075c2:	b910      	cbnz	r0, 80075ca <USBH_HandleEnum+0xb0>
        phost->EnumState = ENUM_SET_ADDR;
 80075c4:	2302      	movs	r3, #2
 80075c6:	7063      	strb	r3, [r4, #1]
 80075c8:	e0ca      	b.n	8007760 <USBH_HandleEnum+0x246>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80075ca:	2803      	cmp	r0, #3
 80075cc:	f040 80c8 	bne.w	8007760 <USBH_HandleEnum+0x246>
        phost->device.EnumCnt++;
 80075d0:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 80075d4:	3301      	adds	r3, #1
 80075d6:	b2db      	uxtb	r3, r3
 80075d8:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80075dc:	2b03      	cmp	r3, #3
 80075de:	d902      	bls.n	80075e6 <USBH_HandleEnum+0xcc>
          phost->gState = HOST_ABORT_STATE;
 80075e0:	230d      	movs	r3, #13
 80075e2:	7023      	strb	r3, [r4, #0]
 80075e4:	e0bc      	b.n	8007760 <USBH_HandleEnum+0x246>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80075e6:	7961      	ldrb	r1, [r4, #5]
 80075e8:	4620      	mov	r0, r4
 80075ea:	f000 fdce 	bl	800818a <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80075ee:	7921      	ldrb	r1, [r4, #4]
 80075f0:	4620      	mov	r0, r4
 80075f2:	f000 fdca 	bl	800818a <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80075f6:	2300      	movs	r3, #0
 80075f8:	7063      	strb	r3, [r4, #1]
          phost->gState = HOST_IDLE;
 80075fa:	7023      	strb	r3, [r4, #0]
 80075fc:	e0b0      	b.n	8007760 <USBH_HandleEnum+0x246>
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80075fe:	2101      	movs	r1, #1
 8007600:	f000 fce6 	bl	8007fd0 <USBH_SetAddress>
      if (ReqStatus == USBH_OK)
 8007604:	b118      	cbz	r0, 800760e <USBH_HandleEnum+0xf4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007606:	2803      	cmp	r0, #3
 8007608:	d024      	beq.n	8007654 <USBH_HandleEnum+0x13a>
  USBH_StatusTypeDef Status = USBH_BUSY;
 800760a:	2501      	movs	r5, #1
 800760c:	e0a8      	b.n	8007760 <USBH_HandleEnum+0x246>
        USBH_Delay(2U);
 800760e:	2002      	movs	r0, #2
 8007610:	f001 f887 	bl	8008722 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007614:	2501      	movs	r5, #1
 8007616:	f884 531c 	strb.w	r5, [r4, #796]	; 0x31c
        phost->EnumState = ENUM_GET_CFG_DESC;
 800761a:	2303      	movs	r3, #3
 800761c:	7063      	strb	r3, [r4, #1]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800761e:	79a3      	ldrb	r3, [r4, #6]
 8007620:	9302      	str	r3, [sp, #8]
 8007622:	2600      	movs	r6, #0
 8007624:	9601      	str	r6, [sp, #4]
 8007626:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 800762a:	9300      	str	r3, [sp, #0]
 800762c:	462b      	mov	r3, r5
 800762e:	2280      	movs	r2, #128	; 0x80
 8007630:	7921      	ldrb	r1, [r4, #4]
 8007632:	4620      	mov	r0, r4
 8007634:	f000 fd81 	bl	800813a <USBH_OpenPipe>
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007638:	79a3      	ldrb	r3, [r4, #6]
 800763a:	9302      	str	r3, [sp, #8]
 800763c:	9601      	str	r6, [sp, #4]
 800763e:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 8007642:	9300      	str	r3, [sp, #0]
 8007644:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8007648:	4632      	mov	r2, r6
 800764a:	7961      	ldrb	r1, [r4, #5]
 800764c:	4620      	mov	r0, r4
 800764e:	f000 fd74 	bl	800813a <USBH_OpenPipe>
 8007652:	e085      	b.n	8007760 <USBH_HandleEnum+0x246>
        phost->gState = HOST_ABORT_STATE;
 8007654:	230d      	movs	r3, #13
 8007656:	7023      	strb	r3, [r4, #0]
        phost->EnumState = ENUM_IDLE;
 8007658:	2300      	movs	r3, #0
 800765a:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800765c:	2501      	movs	r5, #1
 800765e:	e07f      	b.n	8007760 <USBH_HandleEnum+0x246>
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007660:	2109      	movs	r1, #9
 8007662:	f000 fc84 	bl	8007f6e <USBH_Get_CfgDesc>
      if (ReqStatus == USBH_OK)
 8007666:	b918      	cbnz	r0, 8007670 <USBH_HandleEnum+0x156>
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007668:	2304      	movs	r3, #4
 800766a:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800766c:	2501      	movs	r5, #1
 800766e:	e077      	b.n	8007760 <USBH_HandleEnum+0x246>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007670:	2803      	cmp	r0, #3
 8007672:	d001      	beq.n	8007678 <USBH_HandleEnum+0x15e>
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007674:	2501      	movs	r5, #1
 8007676:	e073      	b.n	8007760 <USBH_HandleEnum+0x246>
        phost->device.EnumCnt++;
 8007678:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 800767c:	3301      	adds	r3, #1
 800767e:	b2db      	uxtb	r3, r3
 8007680:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007684:	2b03      	cmp	r3, #3
 8007686:	d903      	bls.n	8007690 <USBH_HandleEnum+0x176>
          phost->gState = HOST_ABORT_STATE;
 8007688:	230d      	movs	r3, #13
 800768a:	7023      	strb	r3, [r4, #0]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800768c:	2501      	movs	r5, #1
 800768e:	e067      	b.n	8007760 <USBH_HandleEnum+0x246>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007690:	7961      	ldrb	r1, [r4, #5]
 8007692:	4620      	mov	r0, r4
 8007694:	f000 fd79 	bl	800818a <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007698:	7921      	ldrb	r1, [r4, #4]
 800769a:	4620      	mov	r0, r4
 800769c:	f000 fd75 	bl	800818a <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80076a0:	2300      	movs	r3, #0
 80076a2:	7063      	strb	r3, [r4, #1]
          phost->gState = HOST_IDLE;
 80076a4:	7023      	strb	r3, [r4, #0]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80076a6:	2501      	movs	r5, #1
 80076a8:	e05a      	b.n	8007760 <USBH_HandleEnum+0x246>
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80076aa:	f8b0 133a 	ldrh.w	r1, [r0, #826]	; 0x33a
 80076ae:	f000 fc5e 	bl	8007f6e <USBH_Get_CfgDesc>
      if (ReqStatus == USBH_OK)
 80076b2:	b918      	cbnz	r0, 80076bc <USBH_HandleEnum+0x1a2>
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80076b4:	2305      	movs	r3, #5
 80076b6:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80076b8:	2501      	movs	r5, #1
 80076ba:	e051      	b.n	8007760 <USBH_HandleEnum+0x246>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80076bc:	2803      	cmp	r0, #3
 80076be:	d001      	beq.n	80076c4 <USBH_HandleEnum+0x1aa>
  USBH_StatusTypeDef Status = USBH_BUSY;
 80076c0:	2501      	movs	r5, #1
 80076c2:	e04d      	b.n	8007760 <USBH_HandleEnum+0x246>
        phost->device.EnumCnt++;
 80076c4:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 80076c8:	3301      	adds	r3, #1
 80076ca:	b2db      	uxtb	r3, r3
 80076cc:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80076d0:	2b03      	cmp	r3, #3
 80076d2:	d903      	bls.n	80076dc <USBH_HandleEnum+0x1c2>
          phost->gState = HOST_ABORT_STATE;
 80076d4:	230d      	movs	r3, #13
 80076d6:	7023      	strb	r3, [r4, #0]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80076d8:	2501      	movs	r5, #1
 80076da:	e041      	b.n	8007760 <USBH_HandleEnum+0x246>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80076dc:	7961      	ldrb	r1, [r4, #5]
 80076de:	4620      	mov	r0, r4
 80076e0:	f000 fd53 	bl	800818a <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80076e4:	7921      	ldrb	r1, [r4, #4]
 80076e6:	4620      	mov	r0, r4
 80076e8:	f000 fd4f 	bl	800818a <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80076ec:	2300      	movs	r3, #0
 80076ee:	7063      	strb	r3, [r4, #1]
          phost->gState = HOST_IDLE;
 80076f0:	7023      	strb	r3, [r4, #0]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80076f2:	2501      	movs	r5, #1
 80076f4:	e034      	b.n	8007760 <USBH_HandleEnum+0x246>
      if (phost->device.DevDesc.iManufacturer != 0U)
 80076f6:	f890 1334 	ldrb.w	r1, [r0, #820]	; 0x334
 80076fa:	b919      	cbnz	r1, 8007704 <USBH_HandleEnum+0x1ea>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80076fc:	2306      	movs	r3, #6
 80076fe:	7043      	strb	r3, [r0, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007700:	2501      	movs	r5, #1
 8007702:	e02d      	b.n	8007760 <USBH_HandleEnum+0x246>
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007704:	23ff      	movs	r3, #255	; 0xff
 8007706:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 800770a:	f000 fc49 	bl	8007fa0 <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
 800770e:	b918      	cbnz	r0, 8007718 <USBH_HandleEnum+0x1fe>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007710:	2306      	movs	r3, #6
 8007712:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007714:	2501      	movs	r5, #1
 8007716:	e023      	b.n	8007760 <USBH_HandleEnum+0x246>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007718:	2803      	cmp	r0, #3
 800771a:	d001      	beq.n	8007720 <USBH_HandleEnum+0x206>
  USBH_StatusTypeDef Status = USBH_BUSY;
 800771c:	2501      	movs	r5, #1
 800771e:	e01f      	b.n	8007760 <USBH_HandleEnum+0x246>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007720:	2306      	movs	r3, #6
 8007722:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007724:	2501      	movs	r5, #1
 8007726:	e01b      	b.n	8007760 <USBH_HandleEnum+0x246>
      if (phost->device.DevDesc.iProduct != 0U)
 8007728:	f890 1335 	ldrb.w	r1, [r0, #821]	; 0x335
 800772c:	b919      	cbnz	r1, 8007736 <USBH_HandleEnum+0x21c>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800772e:	2307      	movs	r3, #7
 8007730:	7043      	strb	r3, [r0, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007732:	2501      	movs	r5, #1
 8007734:	e014      	b.n	8007760 <USBH_HandleEnum+0x246>
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007736:	23ff      	movs	r3, #255	; 0xff
 8007738:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 800773c:	f000 fc30 	bl	8007fa0 <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
 8007740:	b918      	cbnz	r0, 800774a <USBH_HandleEnum+0x230>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007742:	2307      	movs	r3, #7
 8007744:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007746:	2501      	movs	r5, #1
 8007748:	e00a      	b.n	8007760 <USBH_HandleEnum+0x246>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800774a:	2803      	cmp	r0, #3
 800774c:	d001      	beq.n	8007752 <USBH_HandleEnum+0x238>
  USBH_StatusTypeDef Status = USBH_BUSY;
 800774e:	2501      	movs	r5, #1
 8007750:	e006      	b.n	8007760 <USBH_HandleEnum+0x246>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007752:	2307      	movs	r3, #7
 8007754:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007756:	2501      	movs	r5, #1
 8007758:	e002      	b.n	8007760 <USBH_HandleEnum+0x246>
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800775a:	f890 5336 	ldrb.w	r5, [r0, #822]	; 0x336
 800775e:	b915      	cbnz	r5, 8007766 <USBH_HandleEnum+0x24c>
}
 8007760:	4628      	mov	r0, r5
 8007762:	b004      	add	sp, #16
 8007764:	bd70      	pop	{r4, r5, r6, pc}
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007766:	23ff      	movs	r3, #255	; 0xff
 8007768:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 800776c:	4629      	mov	r1, r5
 800776e:	f000 fc17 	bl	8007fa0 <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
 8007772:	4605      	mov	r5, r0
 8007774:	2800      	cmp	r0, #0
 8007776:	d0f3      	beq.n	8007760 <USBH_HandleEnum+0x246>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007778:	2803      	cmp	r0, #3
 800777a:	d003      	beq.n	8007784 <USBH_HandleEnum+0x26a>
  USBH_StatusTypeDef Status = USBH_BUSY;
 800777c:	2501      	movs	r5, #1
 800777e:	e7ef      	b.n	8007760 <USBH_HandleEnum+0x246>
  switch (phost->EnumState)
 8007780:	2501      	movs	r5, #1
 8007782:	e7ed      	b.n	8007760 <USBH_HandleEnum+0x246>
          Status = USBH_OK;
 8007784:	2500      	movs	r5, #0
 8007786:	e7eb      	b.n	8007760 <USBH_HandleEnum+0x246>

08007788 <USBH_Init>:
  if (phost == NULL)
 8007788:	b1d8      	cbz	r0, 80077c2 <USBH_Init+0x3a>
{
 800778a:	b570      	push	{r4, r5, r6, lr}
 800778c:	460e      	mov	r6, r1
 800778e:	4604      	mov	r4, r0
  phost->id = id;
 8007790:	f880 23cc 	strb.w	r2, [r0, #972]	; 0x3cc
  phost->pActiveClass = NULL;
 8007794:	2500      	movs	r5, #0
 8007796:	f8c0 537c 	str.w	r5, [r0, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800779a:	f8c0 5380 	str.w	r5, [r0, #896]	; 0x380
  DeInitStateMachine(phost);
 800779e:	f7ff fe7e 	bl	800749e <DeInitStateMachine>
  phost->device.PortEnabled = 0U;
 80077a2:	f884 5323 	strb.w	r5, [r4, #803]	; 0x323
  phost->device.is_connected = 0U;
 80077a6:	f884 5320 	strb.w	r5, [r4, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80077aa:	f884 5321 	strb.w	r5, [r4, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80077ae:	f884 5322 	strb.w	r5, [r4, #802]	; 0x322
  if (pUsrFunc != NULL)
 80077b2:	b10e      	cbz	r6, 80077b8 <USBH_Init+0x30>
    phost->pUser = pUsrFunc;
 80077b4:	f8c4 63d4 	str.w	r6, [r4, #980]	; 0x3d4
  USBH_LL_Init(phost);
 80077b8:	4620      	mov	r0, r4
 80077ba:	f000 ff33 	bl	8008624 <USBH_LL_Init>
  return USBH_OK;
 80077be:	2000      	movs	r0, #0
}
 80077c0:	bd70      	pop	{r4, r5, r6, pc}
    return USBH_FAIL;
 80077c2:	2002      	movs	r0, #2
}
 80077c4:	4770      	bx	lr

080077c6 <USBH_RegisterClass>:
  if (pclass != NULL)
 80077c6:	460a      	mov	r2, r1
 80077c8:	b151      	cbz	r1, 80077e0 <USBH_RegisterClass+0x1a>
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80077ca:	f8d0 3380 	ldr.w	r3, [r0, #896]	; 0x380
 80077ce:	b94b      	cbnz	r3, 80077e4 <USBH_RegisterClass+0x1e>
      phost->pClass[phost->ClassNumber++] = pclass;
 80077d0:	1c59      	adds	r1, r3, #1
 80077d2:	f8c0 1380 	str.w	r1, [r0, #896]	; 0x380
 80077d6:	33de      	adds	r3, #222	; 0xde
 80077d8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      status = USBH_OK;
 80077dc:	2000      	movs	r0, #0
 80077de:	4770      	bx	lr
    status = USBH_FAIL;
 80077e0:	2002      	movs	r0, #2
 80077e2:	4770      	bx	lr
      status = USBH_FAIL;
 80077e4:	2002      	movs	r0, #2
}
 80077e6:	4770      	bx	lr

080077e8 <USBH_SelectInterface>:
  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80077e8:	f890 333c 	ldrb.w	r3, [r0, #828]	; 0x33c
 80077ec:	428b      	cmp	r3, r1
 80077ee:	d903      	bls.n	80077f8 <USBH_SelectInterface+0x10>
    phost->device.current_interface = interface;
 80077f0:	f880 1324 	strb.w	r1, [r0, #804]	; 0x324
  USBH_StatusTypeDef status = USBH_OK;
 80077f4:	2000      	movs	r0, #0
 80077f6:	4770      	bx	lr
    status = USBH_FAIL;
 80077f8:	2002      	movs	r0, #2
}
 80077fa:	4770      	bx	lr

080077fc <USBH_FindInterface>:
{
 80077fc:	b510      	push	{r4, lr}
 80077fe:	4604      	mov	r4, r0
  uint8_t if_ix = 0U;
 8007800:	2000      	movs	r0, #0
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007802:	e00b      	b.n	800781c <USBH_FindInterface+0x20>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007804:	f04f 0c1a 	mov.w	ip, #26
 8007808:	fb0c 4e0e 	mla	lr, ip, lr, r4
 800780c:	f89e c349 	ldrb.w	ip, [lr, #841]	; 0x349
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007810:	459c      	cmp	ip, r3
 8007812:	d01c      	beq.n	800784e <USBH_FindInterface+0x52>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007814:	2bff      	cmp	r3, #255	; 0xff
 8007816:	d01a      	beq.n	800784e <USBH_FindInterface+0x52>
    if_ix++;
 8007818:	3001      	adds	r0, #1
 800781a:	b2c0      	uxtb	r0, r0
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800781c:	2801      	cmp	r0, #1
 800781e:	d815      	bhi.n	800784c <USBH_FindInterface+0x50>
    pif = &pcfg->Itf_Desc[if_ix];
 8007820:	4686      	mov	lr, r0
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007822:	f04f 0c1a 	mov.w	ip, #26
 8007826:	fb0c 4c00 	mla	ip, ip, r0, r4
 800782a:	f89c c347 	ldrb.w	ip, [ip, #839]	; 0x347
 800782e:	458c      	cmp	ip, r1
 8007830:	d001      	beq.n	8007836 <USBH_FindInterface+0x3a>
 8007832:	29ff      	cmp	r1, #255	; 0xff
 8007834:	d1f0      	bne.n	8007818 <USBH_FindInterface+0x1c>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007836:	f04f 0c1a 	mov.w	ip, #26
 800783a:	fb0c 4c0e 	mla	ip, ip, lr, r4
 800783e:	f89c c348 	ldrb.w	ip, [ip, #840]	; 0x348
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007842:	4594      	cmp	ip, r2
 8007844:	d0de      	beq.n	8007804 <USBH_FindInterface+0x8>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007846:	2aff      	cmp	r2, #255	; 0xff
 8007848:	d1e6      	bne.n	8007818 <USBH_FindInterface+0x1c>
 800784a:	e7db      	b.n	8007804 <USBH_FindInterface+0x8>
  return 0xFFU;
 800784c:	20ff      	movs	r0, #255	; 0xff
}
 800784e:	bd10      	pop	{r4, pc}

08007850 <USBH_Start>:
{
 8007850:	b510      	push	{r4, lr}
 8007852:	4604      	mov	r4, r0
  USBH_LL_Start(phost);
 8007854:	f000 ff73 	bl	800873e <USBH_LL_Start>
  USBH_LL_DriverVBUS(phost, TRUE);
 8007858:	2101      	movs	r1, #1
 800785a:	4620      	mov	r0, r4
 800785c:	f000 ff2a 	bl	80086b4 <USBH_LL_DriverVBUS>
}
 8007860:	2000      	movs	r0, #0
 8007862:	bd10      	pop	{r4, pc}

08007864 <USBH_Process>:
{
 8007864:	b530      	push	{r4, r5, lr}
 8007866:	b087      	sub	sp, #28
 8007868:	4604      	mov	r4, r0
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800786a:	2302      	movs	r3, #2
 800786c:	f88d 3017 	strb.w	r3, [sp, #23]
  if (phost->device.is_disconnected == 1U)
 8007870:	f890 3321 	ldrb.w	r3, [r0, #801]	; 0x321
 8007874:	b2db      	uxtb	r3, r3
 8007876:	2b01      	cmp	r3, #1
 8007878:	d011      	beq.n	800789e <USBH_Process+0x3a>
  switch (phost->gState)
 800787a:	7823      	ldrb	r3, [r4, #0]
 800787c:	b2db      	uxtb	r3, r3
 800787e:	2b0b      	cmp	r3, #11
 8007880:	d87b      	bhi.n	800797a <USBH_Process+0x116>
 8007882:	e8df f013 	tbh	[pc, r3, lsl #1]
 8007886:	000f      	.short	0x000f
 8007888:	00450021 	.word	0x00450021
 800788c:	007a0105 	.word	0x007a0105
 8007890:	00e3007d 	.word	0x00e3007d
 8007894:	009c0092 	.word	0x009c0092
 8007898:	00b700a6 	.word	0x00b700a6
 800789c:	00fc      	.short	0x00fc
    phost->gState = HOST_DEV_DISCONNECTED;
 800789e:	2303      	movs	r3, #3
 80078a0:	7003      	strb	r3, [r0, #0]
 80078a2:	e7ea      	b.n	800787a <USBH_Process+0x16>
      if (phost->device.is_connected)
 80078a4:	f894 3320 	ldrb.w	r3, [r4, #800]	; 0x320
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d066      	beq.n	800797a <USBH_Process+0x116>
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80078ac:	2301      	movs	r3, #1
 80078ae:	7023      	strb	r3, [r4, #0]
        USBH_Delay(200U);
 80078b0:	20c8      	movs	r0, #200	; 0xc8
 80078b2:	f000 ff36 	bl	8008722 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 80078b6:	4620      	mov	r0, r4
 80078b8:	f000 ff51 	bl	800875e <USBH_LL_ResetPort>
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80078bc:	2300      	movs	r3, #0
 80078be:	f884 331c 	strb.w	r3, [r4, #796]	; 0x31c
        phost->Timeout = 0U;
 80078c2:	f8c4 33c8 	str.w	r3, [r4, #968]	; 0x3c8
 80078c6:	e058      	b.n	800797a <USBH_Process+0x116>
      if (phost->device.PortEnabled == 1U)
 80078c8:	f894 3323 	ldrb.w	r3, [r4, #803]	; 0x323
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	d00f      	beq.n	80078f0 <USBH_Process+0x8c>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80078d0:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 80078d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80078d8:	d913      	bls.n	8007902 <USBH_Process+0x9e>
          phost->device.RstCnt++;
 80078da:	f894 331f 	ldrb.w	r3, [r4, #799]	; 0x31f
 80078de:	3301      	adds	r3, #1
 80078e0:	b2db      	uxtb	r3, r3
 80078e2:	f884 331f 	strb.w	r3, [r4, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80078e6:	2b03      	cmp	r3, #3
 80078e8:	d908      	bls.n	80078fc <USBH_Process+0x98>
            phost->gState = HOST_ABORT_STATE;
 80078ea:	230d      	movs	r3, #13
 80078ec:	7023      	strb	r3, [r4, #0]
 80078ee:	e044      	b.n	800797a <USBH_Process+0x116>
        phost->device.RstCnt = 0U;
 80078f0:	2300      	movs	r3, #0
 80078f2:	f884 331f 	strb.w	r3, [r4, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80078f6:	2302      	movs	r3, #2
 80078f8:	7023      	strb	r3, [r4, #0]
 80078fa:	e03e      	b.n	800797a <USBH_Process+0x116>
            phost->gState = HOST_IDLE;
 80078fc:	2300      	movs	r3, #0
 80078fe:	7023      	strb	r3, [r4, #0]
 8007900:	e03b      	b.n	800797a <USBH_Process+0x116>
          phost->Timeout += 10U;
 8007902:	330a      	adds	r3, #10
 8007904:	f8c4 33c8 	str.w	r3, [r4, #968]	; 0x3c8
          USBH_Delay(10U);
 8007908:	200a      	movs	r0, #10
 800790a:	f000 ff0a 	bl	8008722 <USBH_Delay>
 800790e:	e034      	b.n	800797a <USBH_Process+0x116>
      if (phost->pUser != NULL)
 8007910:	f8d4 33d4 	ldr.w	r3, [r4, #980]	; 0x3d4
 8007914:	b113      	cbz	r3, 800791c <USBH_Process+0xb8>
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007916:	2104      	movs	r1, #4
 8007918:	4620      	mov	r0, r4
 800791a:	4798      	blx	r3
      USBH_Delay(100U);
 800791c:	2064      	movs	r0, #100	; 0x64
 800791e:	f000 ff00 	bl	8008722 <USBH_Delay>
      phost->device.speed = USBH_LL_GetSpeed(phost);
 8007922:	4620      	mov	r0, r4
 8007924:	f000 feaa 	bl	800867c <USBH_LL_GetSpeed>
 8007928:	f884 031d 	strb.w	r0, [r4, #797]	; 0x31d
      phost->gState = HOST_ENUMERATION;
 800792c:	2305      	movs	r3, #5
 800792e:	7023      	strb	r3, [r4, #0]
      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007930:	2100      	movs	r1, #0
 8007932:	4620      	mov	r0, r4
 8007934:	f000 fc16 	bl	8008164 <USBH_AllocPipe>
 8007938:	7160      	strb	r0, [r4, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800793a:	2180      	movs	r1, #128	; 0x80
 800793c:	4620      	mov	r0, r4
 800793e:	f000 fc11 	bl	8008164 <USBH_AllocPipe>
 8007942:	4601      	mov	r1, r0
 8007944:	7120      	strb	r0, [r4, #4]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007946:	79a3      	ldrb	r3, [r4, #6]
 8007948:	9302      	str	r3, [sp, #8]
 800794a:	2500      	movs	r5, #0
 800794c:	9501      	str	r5, [sp, #4]
 800794e:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 8007952:	9300      	str	r3, [sp, #0]
 8007954:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8007958:	2280      	movs	r2, #128	; 0x80
 800795a:	4620      	mov	r0, r4
 800795c:	f000 fbed 	bl	800813a <USBH_OpenPipe>
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007960:	79a3      	ldrb	r3, [r4, #6]
 8007962:	9302      	str	r3, [sp, #8]
 8007964:	9501      	str	r5, [sp, #4]
 8007966:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 800796a:	9300      	str	r3, [sp, #0]
 800796c:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8007970:	462a      	mov	r2, r5
 8007972:	7961      	ldrb	r1, [r4, #5]
 8007974:	4620      	mov	r0, r4
 8007976:	f000 fbe0 	bl	800813a <USBH_OpenPipe>
}
 800797a:	2000      	movs	r0, #0
 800797c:	b007      	add	sp, #28
 800797e:	bd30      	pop	{r4, r5, pc}
      status = USBH_HandleEnum(phost);
 8007980:	4620      	mov	r0, r4
 8007982:	f7ff fdca 	bl	800751a <USBH_HandleEnum>
 8007986:	f88d 0017 	strb.w	r0, [sp, #23]
      if (status == USBH_OK)
 800798a:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d1f3      	bne.n	800797a <USBH_Process+0x116>
        phost->device.current_interface = 0U;
 8007992:	f884 3324 	strb.w	r3, [r4, #804]	; 0x324
        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007996:	f894 3337 	ldrb.w	r3, [r4, #823]	; 0x337
 800799a:	2b01      	cmp	r3, #1
 800799c:	d002      	beq.n	80079a4 <USBH_Process+0x140>
          phost->gState = HOST_INPUT;
 800799e:	2307      	movs	r3, #7
 80079a0:	7023      	strb	r3, [r4, #0]
 80079a2:	e7ea      	b.n	800797a <USBH_Process+0x116>
          phost->gState = HOST_SET_CONFIGURATION;
 80079a4:	2308      	movs	r3, #8
 80079a6:	7023      	strb	r3, [r4, #0]
 80079a8:	e7e7      	b.n	800797a <USBH_Process+0x116>
      if (phost->pUser != NULL)
 80079aa:	f8d4 33d4 	ldr.w	r3, [r4, #980]	; 0x3d4
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d0e3      	beq.n	800797a <USBH_Process+0x116>
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80079b2:	2101      	movs	r1, #1
 80079b4:	4620      	mov	r0, r4
 80079b6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80079b8:	2308      	movs	r3, #8
 80079ba:	7023      	strb	r3, [r4, #0]
 80079bc:	e7dd      	b.n	800797a <USBH_Process+0x116>
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80079be:	f894 133d 	ldrb.w	r1, [r4, #829]	; 0x33d
 80079c2:	4620      	mov	r0, r4
 80079c4:	f000 fb15 	bl	8007ff2 <USBH_SetCfg>
 80079c8:	2800      	cmp	r0, #0
 80079ca:	d1d6      	bne.n	800797a <USBH_Process+0x116>
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80079cc:	2309      	movs	r3, #9
 80079ce:	7023      	strb	r3, [r4, #0]
 80079d0:	e7d3      	b.n	800797a <USBH_Process+0x116>
      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 80079d2:	f894 333f 	ldrb.w	r3, [r4, #831]	; 0x33f
 80079d6:	f013 0f20 	tst.w	r3, #32
 80079da:	d102      	bne.n	80079e2 <USBH_Process+0x17e>
        phost->gState = HOST_CHECK_CLASS;
 80079dc:	230a      	movs	r3, #10
 80079de:	7023      	strb	r3, [r4, #0]
 80079e0:	e7cb      	b.n	800797a <USBH_Process+0x116>
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 80079e2:	2101      	movs	r1, #1
 80079e4:	4620      	mov	r0, r4
 80079e6:	f000 fb15 	bl	8008014 <USBH_SetFeature>
 80079ea:	2800      	cmp	r0, #0
 80079ec:	d1c5      	bne.n	800797a <USBH_Process+0x116>
          phost->gState = HOST_CHECK_CLASS;
 80079ee:	230a      	movs	r3, #10
 80079f0:	7023      	strb	r3, [r4, #0]
 80079f2:	e7c2      	b.n	800797a <USBH_Process+0x116>
      if (phost->ClassNumber == 0U)
 80079f4:	f8d4 3380 	ldr.w	r3, [r4, #896]	; 0x380
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d0be      	beq.n	800797a <USBH_Process+0x116>
        phost->pActiveClass = NULL;
 80079fc:	2300      	movs	r3, #0
 80079fe:	f8c4 337c 	str.w	r3, [r4, #892]	; 0x37c
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007a02:	b173      	cbz	r3, 8007a22 <USBH_Process+0x1be>
        if (phost->pActiveClass != NULL)
 8007a04:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 8007a08:	b1eb      	cbz	r3, 8007a46 <USBH_Process+0x1e2>
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007a0a:	689b      	ldr	r3, [r3, #8]
 8007a0c:	4620      	mov	r0, r4
 8007a0e:	4798      	blx	r3
 8007a10:	b9b0      	cbnz	r0, 8007a40 <USBH_Process+0x1dc>
            phost->gState = HOST_CLASS_REQUEST;
 8007a12:	2306      	movs	r3, #6
 8007a14:	7023      	strb	r3, [r4, #0]
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007a16:	f8d4 33d4 	ldr.w	r3, [r4, #980]	; 0x3d4
 8007a1a:	2103      	movs	r1, #3
 8007a1c:	4620      	mov	r0, r4
 8007a1e:	4798      	blx	r3
 8007a20:	e7ab      	b.n	800797a <USBH_Process+0x116>
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007a22:	f103 02de 	add.w	r2, r3, #222	; 0xde
 8007a26:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007a2a:	7910      	ldrb	r0, [r2, #4]
 8007a2c:	f894 1347 	ldrb.w	r1, [r4, #839]	; 0x347
 8007a30:	4288      	cmp	r0, r1
 8007a32:	d002      	beq.n	8007a3a <USBH_Process+0x1d6>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007a34:	3301      	adds	r3, #1
 8007a36:	b2db      	uxtb	r3, r3
 8007a38:	e7e3      	b.n	8007a02 <USBH_Process+0x19e>
            phost->pActiveClass = phost->pClass[idx];
 8007a3a:	f8c4 237c 	str.w	r2, [r4, #892]	; 0x37c
            break;
 8007a3e:	e7e1      	b.n	8007a04 <USBH_Process+0x1a0>
            phost->gState = HOST_ABORT_STATE;
 8007a40:	230d      	movs	r3, #13
 8007a42:	7023      	strb	r3, [r4, #0]
 8007a44:	e799      	b.n	800797a <USBH_Process+0x116>
          phost->gState = HOST_ABORT_STATE;
 8007a46:	230d      	movs	r3, #13
 8007a48:	7023      	strb	r3, [r4, #0]
 8007a4a:	e796      	b.n	800797a <USBH_Process+0x116>
      if (phost->pActiveClass != NULL)
 8007a4c:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 8007a50:	b193      	cbz	r3, 8007a78 <USBH_Process+0x214>
        status = phost->pActiveClass->Requests(phost);
 8007a52:	691b      	ldr	r3, [r3, #16]
 8007a54:	4620      	mov	r0, r4
 8007a56:	4798      	blx	r3
 8007a58:	f88d 0017 	strb.w	r0, [sp, #23]
        if (status == USBH_OK)
 8007a5c:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8007a60:	b913      	cbnz	r3, 8007a68 <USBH_Process+0x204>
          phost->gState = HOST_CLASS;
 8007a62:	230b      	movs	r3, #11
 8007a64:	7023      	strb	r3, [r4, #0]
 8007a66:	e788      	b.n	800797a <USBH_Process+0x116>
        else if (status == USBH_FAIL)
 8007a68:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8007a6c:	b2db      	uxtb	r3, r3
 8007a6e:	2b02      	cmp	r3, #2
 8007a70:	d183      	bne.n	800797a <USBH_Process+0x116>
          phost->gState = HOST_ABORT_STATE;
 8007a72:	230d      	movs	r3, #13
 8007a74:	7023      	strb	r3, [r4, #0]
          USBH_ErrLog("Device not responding Please Unplug.");
 8007a76:	e780      	b.n	800797a <USBH_Process+0x116>
        phost->gState = HOST_ABORT_STATE;
 8007a78:	230d      	movs	r3, #13
 8007a7a:	7023      	strb	r3, [r4, #0]
 8007a7c:	e77d      	b.n	800797a <USBH_Process+0x116>
      if (phost->pActiveClass != NULL)
 8007a7e:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	f43f af79 	beq.w	800797a <USBH_Process+0x116>
        phost->pActiveClass->BgndProcess(phost);
 8007a88:	695b      	ldr	r3, [r3, #20]
 8007a8a:	4620      	mov	r0, r4
 8007a8c:	4798      	blx	r3
 8007a8e:	e774      	b.n	800797a <USBH_Process+0x116>
      phost->device.is_disconnected = 0U;
 8007a90:	2300      	movs	r3, #0
 8007a92:	f884 3321 	strb.w	r3, [r4, #801]	; 0x321
      DeInitStateMachine(phost);
 8007a96:	4620      	mov	r0, r4
 8007a98:	f7ff fd01 	bl	800749e <DeInitStateMachine>
      if (phost->pActiveClass != NULL)
 8007a9c:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 8007aa0:	b12b      	cbz	r3, 8007aae <USBH_Process+0x24a>
        phost->pActiveClass->DeInit(phost);
 8007aa2:	68db      	ldr	r3, [r3, #12]
 8007aa4:	4620      	mov	r0, r4
 8007aa6:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	f8c4 337c 	str.w	r3, [r4, #892]	; 0x37c
      if (phost->pUser != NULL)
 8007aae:	f8d4 33d4 	ldr.w	r3, [r4, #980]	; 0x3d4
 8007ab2:	b113      	cbz	r3, 8007aba <USBH_Process+0x256>
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007ab4:	2105      	movs	r1, #5
 8007ab6:	4620      	mov	r0, r4
 8007ab8:	4798      	blx	r3
      if (phost->device.is_ReEnumerated == 1U)
 8007aba:	f894 3322 	ldrb.w	r3, [r4, #802]	; 0x322
 8007abe:	b2db      	uxtb	r3, r3
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	d003      	beq.n	8007acc <USBH_Process+0x268>
        USBH_LL_Start(phost);
 8007ac4:	4620      	mov	r0, r4
 8007ac6:	f000 fe3a 	bl	800873e <USBH_LL_Start>
 8007aca:	e756      	b.n	800797a <USBH_Process+0x116>
        phost->device.is_ReEnumerated = 0U;
 8007acc:	2300      	movs	r3, #0
 8007ace:	f884 3322 	strb.w	r3, [r4, #802]	; 0x322
        USBH_Start(phost);
 8007ad2:	4620      	mov	r0, r4
 8007ad4:	f7ff febc 	bl	8007850 <USBH_Start>
 8007ad8:	e74f      	b.n	800797a <USBH_Process+0x116>

08007ada <USBH_LL_SetTimer>:
  phost->Timer = time;
 8007ada:	f8c0 13c4 	str.w	r1, [r0, #964]	; 0x3c4
}
 8007ade:	4770      	bx	lr

08007ae0 <USBH_LL_IncTimer>:
{
 8007ae0:	b508      	push	{r3, lr}
  phost->Timer++;
 8007ae2:	f8d0 23c4 	ldr.w	r2, [r0, #964]	; 0x3c4
 8007ae6:	3201      	adds	r2, #1
 8007ae8:	f8c0 23c4 	str.w	r2, [r0, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007aec:	f7ff fd08 	bl	8007500 <USBH_HandleSof>
}
 8007af0:	bd08      	pop	{r3, pc}

08007af2 <USBH_LL_PortEnabled>:
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
  phost->device.PortEnabled = 1U;
 8007af2:	2301      	movs	r3, #1
 8007af4:	f880 3323 	strb.w	r3, [r0, #803]	; 0x323
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
}
 8007af8:	4770      	bx	lr

08007afa <USBH_LL_PortDisabled>:
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
  phost->device.PortEnabled = 0U;
 8007afa:	2300      	movs	r3, #0
 8007afc:	f880 3323 	strb.w	r3, [r0, #803]	; 0x323

  return;
}
 8007b00:	4770      	bx	lr

08007b02 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007b02:	4603      	mov	r3, r0
  phost->device.is_connected = 1U;
 8007b04:	2201      	movs	r2, #1
 8007b06:	f880 2320 	strb.w	r2, [r0, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007b0a:	2000      	movs	r0, #0
 8007b0c:	f883 0321 	strb.w	r0, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007b10:	f883 0322 	strb.w	r0, [r3, #802]	; 0x322
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
}
 8007b14:	4770      	bx	lr

08007b16 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007b16:	b538      	push	{r3, r4, r5, lr}
 8007b18:	4604      	mov	r4, r0
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	f880 3321 	strb.w	r3, [r0, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007b20:	2500      	movs	r5, #0
 8007b22:	f880 5320 	strb.w	r5, [r0, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007b26:	f880 5323 	strb.w	r5, [r0, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8007b2a:	f000 fe10 	bl	800874e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8007b2e:	7921      	ldrb	r1, [r4, #4]
 8007b30:	4620      	mov	r0, r4
 8007b32:	f000 fb2a 	bl	800818a <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8007b36:	7961      	ldrb	r1, [r4, #5]
 8007b38:	4620      	mov	r0, r4
 8007b3a:	f000 fb26 	bl	800818a <USBH_FreePipe>
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
}
 8007b3e:	4628      	mov	r0, r5
 8007b40:	bd38      	pop	{r3, r4, r5, pc}

08007b42 <USBH_ParseDevDesc>:
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007b42:	780b      	ldrb	r3, [r1, #0]
 8007b44:	7003      	strb	r3, [r0, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007b46:	784b      	ldrb	r3, [r1, #1]
 8007b48:	7043      	strb	r3, [r0, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007b4a:	788b      	ldrb	r3, [r1, #2]
 8007b4c:	f891 c003 	ldrb.w	ip, [r1, #3]
 8007b50:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8007b54:	8043      	strh	r3, [r0, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007b56:	790b      	ldrb	r3, [r1, #4]
 8007b58:	7103      	strb	r3, [r0, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007b5a:	794b      	ldrb	r3, [r1, #5]
 8007b5c:	7143      	strb	r3, [r0, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007b5e:	798b      	ldrb	r3, [r1, #6]
 8007b60:	7183      	strb	r3, [r0, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007b62:	79cb      	ldrb	r3, [r1, #7]
 8007b64:	71c3      	strb	r3, [r0, #7]

  if (length > 8U)
 8007b66:	2a08      	cmp	r2, #8
 8007b68:	d916      	bls.n	8007b98 <USBH_ParseDevDesc+0x56>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007b6a:	7a0b      	ldrb	r3, [r1, #8]
 8007b6c:	7a4a      	ldrb	r2, [r1, #9]
 8007b6e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007b72:	8103      	strh	r3, [r0, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007b74:	7a8b      	ldrb	r3, [r1, #10]
 8007b76:	7aca      	ldrb	r2, [r1, #11]
 8007b78:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007b7c:	8143      	strh	r3, [r0, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007b7e:	7b0b      	ldrb	r3, [r1, #12]
 8007b80:	7b4a      	ldrb	r2, [r1, #13]
 8007b82:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007b86:	8183      	strh	r3, [r0, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007b88:	7b8b      	ldrb	r3, [r1, #14]
 8007b8a:	7383      	strb	r3, [r0, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007b8c:	7bcb      	ldrb	r3, [r1, #15]
 8007b8e:	73c3      	strb	r3, [r0, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007b90:	7c0b      	ldrb	r3, [r1, #16]
 8007b92:	7403      	strb	r3, [r0, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007b94:	7c4b      	ldrb	r3, [r1, #17]
 8007b96:	7443      	strb	r3, [r0, #17]
  }
}
 8007b98:	4770      	bx	lr

08007b9a <USBH_ParseInterfaceDesc>:
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007b9a:	780b      	ldrb	r3, [r1, #0]
 8007b9c:	7003      	strb	r3, [r0, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007b9e:	784b      	ldrb	r3, [r1, #1]
 8007ba0:	7043      	strb	r3, [r0, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007ba2:	788b      	ldrb	r3, [r1, #2]
 8007ba4:	7083      	strb	r3, [r0, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007ba6:	78cb      	ldrb	r3, [r1, #3]
 8007ba8:	70c3      	strb	r3, [r0, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007baa:	790b      	ldrb	r3, [r1, #4]
 8007bac:	7103      	strb	r3, [r0, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007bae:	794b      	ldrb	r3, [r1, #5]
 8007bb0:	7143      	strb	r3, [r0, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007bb2:	798b      	ldrb	r3, [r1, #6]
 8007bb4:	7183      	strb	r3, [r0, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007bb6:	79cb      	ldrb	r3, [r1, #7]
 8007bb8:	71c3      	strb	r3, [r0, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007bba:	7a0b      	ldrb	r3, [r1, #8]
 8007bbc:	7203      	strb	r3, [r0, #8]
}
 8007bbe:	4770      	bx	lr

08007bc0 <USBH_ParseEPDesc>:
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007bc0:	780b      	ldrb	r3, [r1, #0]
 8007bc2:	7003      	strb	r3, [r0, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007bc4:	784b      	ldrb	r3, [r1, #1]
 8007bc6:	7043      	strb	r3, [r0, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007bc8:	788b      	ldrb	r3, [r1, #2]
 8007bca:	7083      	strb	r3, [r0, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007bcc:	78cb      	ldrb	r3, [r1, #3]
 8007bce:	70c3      	strb	r3, [r0, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007bd0:	790b      	ldrb	r3, [r1, #4]
 8007bd2:	794a      	ldrb	r2, [r1, #5]
 8007bd4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007bd8:	8083      	strh	r3, [r0, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007bda:	798b      	ldrb	r3, [r1, #6]
 8007bdc:	7183      	strb	r3, [r0, #6]
}
 8007bde:	4770      	bx	lr

08007be0 <USBH_ParseStringDesc>:
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007be0:	7843      	ldrb	r3, [r0, #1]
 8007be2:	2b03      	cmp	r3, #3
 8007be4:	d000      	beq.n	8007be8 <USBH_ParseStringDesc+0x8>
      *pdest =  psrc[idx];
      pdest++;
    }
    *pdest = 0U; /* mark end of string */
  }
}
 8007be6:	4770      	bx	lr
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007be8:	7803      	ldrb	r3, [r0, #0]
 8007bea:	3b02      	subs	r3, #2
 8007bec:	429a      	cmp	r2, r3
 8007bee:	bf28      	it	cs
 8007bf0:	461a      	movcs	r2, r3
 8007bf2:	b292      	uxth	r2, r2
    for (idx = 0U; idx < strlength; idx += 2U)
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	e007      	b.n	8007c08 <USBH_ParseStringDesc+0x28>
      *pdest =  psrc[idx];
 8007bf8:	eb00 0c03 	add.w	ip, r0, r3
 8007bfc:	f89c c002 	ldrb.w	ip, [ip, #2]
 8007c00:	f801 cb01 	strb.w	ip, [r1], #1
    for (idx = 0U; idx < strlength; idx += 2U)
 8007c04:	3302      	adds	r3, #2
 8007c06:	b29b      	uxth	r3, r3
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d3f5      	bcc.n	8007bf8 <USBH_ParseStringDesc+0x18>
    *pdest = 0U; /* mark end of string */
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	700b      	strb	r3, [r1, #0]
}
 8007c10:	e7e9      	b.n	8007be6 <USBH_ParseStringDesc+0x6>

08007c12 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007c12:	b530      	push	{r4, r5, lr}
 8007c14:	b083      	sub	sp, #12
 8007c16:	4604      	mov	r4, r0
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;

  switch (phost->Control.state)
 8007c18:	7e05      	ldrb	r5, [r0, #24]
 8007c1a:	1e6b      	subs	r3, r5, #1
 8007c1c:	2b0a      	cmp	r3, #10
 8007c1e:	f200 80de 	bhi.w	8007dde <USBH_HandleControl+0x1cc>
 8007c22:	e8df f003 	tbb	[pc, r3]
 8007c26:	1006      	.short	0x1006
 8007c28:	61544135 	.word	0x61544135
 8007c2c:	aa9d8a7e 	.word	0xaa9d8a7e
 8007c30:	c1          	.byte	0xc1
 8007c31:	00          	.byte	0x00
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007c32:	7942      	ldrb	r2, [r0, #5]
 8007c34:	f100 0110 	add.w	r1, r0, #16
 8007c38:	f000 fa0f 	bl	800805a <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007c3c:	2302      	movs	r3, #2
 8007c3e:	7623      	strb	r3, [r4, #24]
    default:
      break;
  }

  return status;
}
 8007c40:	4628      	mov	r0, r5
 8007c42:	b003      	add	sp, #12
 8007c44:	bd30      	pop	{r4, r5, pc}
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007c46:	7941      	ldrb	r1, [r0, #5]
 8007c48:	f000 fd2e 	bl	80086a8 <USBH_LL_GetURBState>
 8007c4c:	4605      	mov	r5, r0
      if (URB_Status == USBH_URB_DONE)
 8007c4e:	2801      	cmp	r0, #1
 8007c50:	d005      	beq.n	8007c5e <USBH_HandleControl+0x4c>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007c52:	2804      	cmp	r0, #4
 8007c54:	d018      	beq.n	8007c88 <USBH_HandleControl+0x76>
 8007c56:	2802      	cmp	r0, #2
 8007c58:	d016      	beq.n	8007c88 <USBH_HandleControl+0x76>
  USBH_StatusTypeDef status = USBH_BUSY;
 8007c5a:	2501      	movs	r5, #1
 8007c5c:	e7f0      	b.n	8007c40 <USBH_HandleControl+0x2e>
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007c5e:	7c23      	ldrb	r3, [r4, #16]
        if (phost->Control.setup.b.wLength.w != 0U)
 8007c60:	8ae2      	ldrh	r2, [r4, #22]
 8007c62:	b142      	cbz	r2, 8007c76 <USBH_HandleControl+0x64>
          if (direction == USB_D2H)
 8007c64:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007c68:	d102      	bne.n	8007c70 <USBH_HandleControl+0x5e>
            phost->Control.state = CTRL_DATA_OUT;
 8007c6a:	2305      	movs	r3, #5
 8007c6c:	7623      	strb	r3, [r4, #24]
 8007c6e:	e7e7      	b.n	8007c40 <USBH_HandleControl+0x2e>
            phost->Control.state = CTRL_DATA_IN;
 8007c70:	2303      	movs	r3, #3
 8007c72:	7623      	strb	r3, [r4, #24]
 8007c74:	e7e4      	b.n	8007c40 <USBH_HandleControl+0x2e>
          if (direction == USB_D2H)
 8007c76:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007c7a:	d102      	bne.n	8007c82 <USBH_HandleControl+0x70>
            phost->Control.state = CTRL_STATUS_IN;
 8007c7c:	2307      	movs	r3, #7
 8007c7e:	7623      	strb	r3, [r4, #24]
 8007c80:	e7de      	b.n	8007c40 <USBH_HandleControl+0x2e>
            phost->Control.state = CTRL_STATUS_OUT;
 8007c82:	2309      	movs	r3, #9
 8007c84:	7623      	strb	r3, [r4, #24]
 8007c86:	e7db      	b.n	8007c40 <USBH_HandleControl+0x2e>
          phost->Control.state = CTRL_ERROR;
 8007c88:	230b      	movs	r3, #11
 8007c8a:	7623      	strb	r3, [r4, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007c8c:	2501      	movs	r5, #1
 8007c8e:	e7d7      	b.n	8007c40 <USBH_HandleControl+0x2e>
      phost->Control.timer = (uint16_t)phost->Timer;
 8007c90:	f8d0 33c4 	ldr.w	r3, [r0, #964]	; 0x3c4
 8007c94:	81c3      	strh	r3, [r0, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8007c96:	7903      	ldrb	r3, [r0, #4]
 8007c98:	8982      	ldrh	r2, [r0, #12]
 8007c9a:	6881      	ldr	r1, [r0, #8]
 8007c9c:	f000 fa04 	bl	80080a8 <USBH_CtlReceiveData>
      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007ca0:	2304      	movs	r3, #4
 8007ca2:	7623      	strb	r3, [r4, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007ca4:	2501      	movs	r5, #1
      break;
 8007ca6:	e7cb      	b.n	8007c40 <USBH_HandleControl+0x2e>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007ca8:	7901      	ldrb	r1, [r0, #4]
 8007caa:	f000 fcfd 	bl	80086a8 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8007cae:	2801      	cmp	r0, #1
 8007cb0:	d006      	beq.n	8007cc0 <USBH_HandleControl+0xae>
      if (URB_Status == USBH_URB_STALL)
 8007cb2:	2805      	cmp	r0, #5
 8007cb4:	f000 8095 	beq.w	8007de2 <USBH_HandleControl+0x1d0>
        if (URB_Status == USBH_URB_ERROR)
 8007cb8:	2804      	cmp	r0, #4
 8007cba:	d004      	beq.n	8007cc6 <USBH_HandleControl+0xb4>
  USBH_StatusTypeDef status = USBH_BUSY;
 8007cbc:	2501      	movs	r5, #1
 8007cbe:	e7bf      	b.n	8007c40 <USBH_HandleControl+0x2e>
        phost->Control.state = CTRL_STATUS_OUT;
 8007cc0:	2309      	movs	r3, #9
 8007cc2:	7623      	strb	r3, [r4, #24]
 8007cc4:	e7f5      	b.n	8007cb2 <USBH_HandleControl+0xa0>
          phost->Control.state = CTRL_ERROR;
 8007cc6:	230b      	movs	r3, #11
 8007cc8:	7623      	strb	r3, [r4, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007cca:	2501      	movs	r5, #1
 8007ccc:	e7b8      	b.n	8007c40 <USBH_HandleControl+0x2e>
      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007cce:	2501      	movs	r5, #1
 8007cd0:	9500      	str	r5, [sp, #0]
 8007cd2:	7943      	ldrb	r3, [r0, #5]
 8007cd4:	8982      	ldrh	r2, [r0, #12]
 8007cd6:	6881      	ldr	r1, [r0, #8]
 8007cd8:	f000 f9d0 	bl	800807c <USBH_CtlSendData>
      phost->Control.timer = (uint16_t)phost->Timer;
 8007cdc:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 8007ce0:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007ce2:	2306      	movs	r3, #6
 8007ce4:	7623      	strb	r3, [r4, #24]
      break;
 8007ce6:	e7ab      	b.n	8007c40 <USBH_HandleControl+0x2e>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007ce8:	7941      	ldrb	r1, [r0, #5]
 8007cea:	f000 fcdd 	bl	80086a8 <USBH_LL_GetURBState>
 8007cee:	4605      	mov	r5, r0
      if (URB_Status == USBH_URB_DONE)
 8007cf0:	2801      	cmp	r0, #1
 8007cf2:	d007      	beq.n	8007d04 <USBH_HandleControl+0xf2>
      else if (URB_Status == USBH_URB_STALL)
 8007cf4:	2805      	cmp	r0, #5
 8007cf6:	d008      	beq.n	8007d0a <USBH_HandleControl+0xf8>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007cf8:	2802      	cmp	r0, #2
 8007cfa:	d00a      	beq.n	8007d12 <USBH_HandleControl+0x100>
        if (URB_Status == USBH_URB_ERROR)
 8007cfc:	2804      	cmp	r0, #4
 8007cfe:	d00c      	beq.n	8007d1a <USBH_HandleControl+0x108>
  USBH_StatusTypeDef status = USBH_BUSY;
 8007d00:	2501      	movs	r5, #1
 8007d02:	e79d      	b.n	8007c40 <USBH_HandleControl+0x2e>
        phost->Control.state = CTRL_STATUS_IN;
 8007d04:	2307      	movs	r3, #7
 8007d06:	7623      	strb	r3, [r4, #24]
 8007d08:	e79a      	b.n	8007c40 <USBH_HandleControl+0x2e>
        phost->Control.state = CTRL_STALLED;
 8007d0a:	230c      	movs	r3, #12
 8007d0c:	7623      	strb	r3, [r4, #24]
        status = USBH_NOT_SUPPORTED;
 8007d0e:	2503      	movs	r5, #3
 8007d10:	e796      	b.n	8007c40 <USBH_HandleControl+0x2e>
        phost->Control.state = CTRL_DATA_OUT;
 8007d12:	2305      	movs	r3, #5
 8007d14:	7623      	strb	r3, [r4, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007d16:	2501      	movs	r5, #1
 8007d18:	e792      	b.n	8007c40 <USBH_HandleControl+0x2e>
          phost->Control.state = CTRL_ERROR;
 8007d1a:	230b      	movs	r3, #11
 8007d1c:	7623      	strb	r3, [r4, #24]
          status = USBH_FAIL;
 8007d1e:	2502      	movs	r5, #2
 8007d20:	e78e      	b.n	8007c40 <USBH_HandleControl+0x2e>
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8007d22:	7903      	ldrb	r3, [r0, #4]
 8007d24:	2200      	movs	r2, #0
 8007d26:	4611      	mov	r1, r2
 8007d28:	f000 f9be 	bl	80080a8 <USBH_CtlReceiveData>
      phost->Control.timer = (uint16_t)phost->Timer;
 8007d2c:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 8007d30:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007d32:	2308      	movs	r3, #8
 8007d34:	7623      	strb	r3, [r4, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007d36:	2501      	movs	r5, #1
      break;
 8007d38:	e782      	b.n	8007c40 <USBH_HandleControl+0x2e>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007d3a:	7901      	ldrb	r1, [r0, #4]
 8007d3c:	f000 fcb4 	bl	80086a8 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8007d40:	2801      	cmp	r0, #1
 8007d42:	d005      	beq.n	8007d50 <USBH_HandleControl+0x13e>
      else if (URB_Status == USBH_URB_ERROR)
 8007d44:	2804      	cmp	r0, #4
 8007d46:	d007      	beq.n	8007d58 <USBH_HandleControl+0x146>
        if (URB_Status == USBH_URB_STALL)
 8007d48:	2805      	cmp	r0, #5
 8007d4a:	d04c      	beq.n	8007de6 <USBH_HandleControl+0x1d4>
  USBH_StatusTypeDef status = USBH_BUSY;
 8007d4c:	2501      	movs	r5, #1
 8007d4e:	e777      	b.n	8007c40 <USBH_HandleControl+0x2e>
        phost->Control.state = CTRL_COMPLETE;
 8007d50:	230d      	movs	r3, #13
 8007d52:	7623      	strb	r3, [r4, #24]
        status = USBH_OK;
 8007d54:	2500      	movs	r5, #0
 8007d56:	e773      	b.n	8007c40 <USBH_HandleControl+0x2e>
        phost->Control.state = CTRL_ERROR;
 8007d58:	230b      	movs	r3, #11
 8007d5a:	7623      	strb	r3, [r4, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007d5c:	2501      	movs	r5, #1
 8007d5e:	e76f      	b.n	8007c40 <USBH_HandleControl+0x2e>
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8007d60:	2501      	movs	r5, #1
 8007d62:	9500      	str	r5, [sp, #0]
 8007d64:	7943      	ldrb	r3, [r0, #5]
 8007d66:	2200      	movs	r2, #0
 8007d68:	4611      	mov	r1, r2
 8007d6a:	f000 f987 	bl	800807c <USBH_CtlSendData>
      phost->Control.timer = (uint16_t)phost->Timer;
 8007d6e:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 8007d72:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007d74:	230a      	movs	r3, #10
 8007d76:	7623      	strb	r3, [r4, #24]
      break;
 8007d78:	e762      	b.n	8007c40 <USBH_HandleControl+0x2e>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007d7a:	7941      	ldrb	r1, [r0, #5]
 8007d7c:	f000 fc94 	bl	80086a8 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8007d80:	2801      	cmp	r0, #1
 8007d82:	d005      	beq.n	8007d90 <USBH_HandleControl+0x17e>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007d84:	2802      	cmp	r0, #2
 8007d86:	d007      	beq.n	8007d98 <USBH_HandleControl+0x186>
        if (URB_Status == USBH_URB_ERROR)
 8007d88:	2804      	cmp	r0, #4
 8007d8a:	d009      	beq.n	8007da0 <USBH_HandleControl+0x18e>
  USBH_StatusTypeDef status = USBH_BUSY;
 8007d8c:	2501      	movs	r5, #1
 8007d8e:	e757      	b.n	8007c40 <USBH_HandleControl+0x2e>
        phost->Control.state = CTRL_COMPLETE;
 8007d90:	230d      	movs	r3, #13
 8007d92:	7623      	strb	r3, [r4, #24]
        status = USBH_OK;
 8007d94:	2500      	movs	r5, #0
 8007d96:	e753      	b.n	8007c40 <USBH_HandleControl+0x2e>
        phost->Control.state = CTRL_STATUS_OUT;
 8007d98:	2309      	movs	r3, #9
 8007d9a:	7623      	strb	r3, [r4, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007d9c:	2501      	movs	r5, #1
 8007d9e:	e74f      	b.n	8007c40 <USBH_HandleControl+0x2e>
          phost->Control.state = CTRL_ERROR;
 8007da0:	230b      	movs	r3, #11
 8007da2:	7623      	strb	r3, [r4, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007da4:	2501      	movs	r5, #1
 8007da6:	e74b      	b.n	8007c40 <USBH_HandleControl+0x2e>
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007da8:	7e43      	ldrb	r3, [r0, #25]
 8007daa:	3301      	adds	r3, #1
 8007dac:	b2db      	uxtb	r3, r3
 8007dae:	7643      	strb	r3, [r0, #25]
 8007db0:	2b02      	cmp	r3, #2
 8007db2:	d803      	bhi.n	8007dbc <USBH_HandleControl+0x1aa>
        phost->Control.state = CTRL_SETUP;
 8007db4:	2501      	movs	r5, #1
 8007db6:	7605      	strb	r5, [r0, #24]
        phost->RequestState = CMD_SEND;
 8007db8:	7085      	strb	r5, [r0, #2]
 8007dba:	e741      	b.n	8007c40 <USBH_HandleControl+0x2e>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007dbc:	f8d0 33d4 	ldr.w	r3, [r0, #980]	; 0x3d4
 8007dc0:	2106      	movs	r1, #6
 8007dc2:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007dc4:	2500      	movs	r5, #0
 8007dc6:	7665      	strb	r5, [r4, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8007dc8:	7961      	ldrb	r1, [r4, #5]
 8007dca:	4620      	mov	r0, r4
 8007dcc:	f000 f9dd 	bl	800818a <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8007dd0:	7921      	ldrb	r1, [r4, #4]
 8007dd2:	4620      	mov	r0, r4
 8007dd4:	f000 f9d9 	bl	800818a <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007dd8:	7025      	strb	r5, [r4, #0]
        status = USBH_FAIL;
 8007dda:	2502      	movs	r5, #2
 8007ddc:	e730      	b.n	8007c40 <USBH_HandleControl+0x2e>
  switch (phost->Control.state)
 8007dde:	2501      	movs	r5, #1
 8007de0:	e72e      	b.n	8007c40 <USBH_HandleControl+0x2e>
        status = USBH_NOT_SUPPORTED;
 8007de2:	2503      	movs	r5, #3
 8007de4:	e72c      	b.n	8007c40 <USBH_HandleControl+0x2e>
          status = USBH_NOT_SUPPORTED;
 8007de6:	2503      	movs	r5, #3
 8007de8:	e72a      	b.n	8007c40 <USBH_HandleControl+0x2e>

08007dea <USBH_GetNextDesc>:
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007dea:	7803      	ldrb	r3, [r0, #0]
 8007dec:	880a      	ldrh	r2, [r1, #0]
 8007dee:	4413      	add	r3, r2
 8007df0:	800b      	strh	r3, [r1, #0]
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007df2:	7803      	ldrb	r3, [r0, #0]
}
 8007df4:	4418      	add	r0, r3
 8007df6:	4770      	bx	lr

08007df8 <USBH_ParseCfgDesc>:
{
 8007df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dfc:	b082      	sub	sp, #8
 8007dfe:	460c      	mov	r4, r1
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007e00:	780b      	ldrb	r3, [r1, #0]
 8007e02:	7003      	strb	r3, [r0, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007e04:	784b      	ldrb	r3, [r1, #1]
 8007e06:	7043      	strb	r3, [r0, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8007e08:	788b      	ldrb	r3, [r1, #2]
 8007e0a:	78c9      	ldrb	r1, [r1, #3]
 8007e0c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007e10:	8043      	strh	r3, [r0, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007e12:	7923      	ldrb	r3, [r4, #4]
 8007e14:	7103      	strb	r3, [r0, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007e16:	7963      	ldrb	r3, [r4, #5]
 8007e18:	7143      	strb	r3, [r0, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007e1a:	79a3      	ldrb	r3, [r4, #6]
 8007e1c:	7183      	strb	r3, [r0, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007e1e:	79e3      	ldrb	r3, [r4, #7]
 8007e20:	71c3      	strb	r3, [r0, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007e22:	7a23      	ldrb	r3, [r4, #8]
 8007e24:	7203      	strb	r3, [r0, #8]
  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007e26:	2a09      	cmp	r2, #9
 8007e28:	d944      	bls.n	8007eb4 <USBH_ParseCfgDesc+0xbc>
 8007e2a:	4605      	mov	r5, r0
    ptr = USB_LEN_CFG_DESC;
 8007e2c:	2309      	movs	r3, #9
 8007e2e:	f8ad 3006 	strh.w	r3, [sp, #6]
  uint8_t                      if_ix = 0U;
 8007e32:	2600      	movs	r6, #0
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007e34:	2e01      	cmp	r6, #1
 8007e36:	d83d      	bhi.n	8007eb4 <USBH_ParseCfgDesc+0xbc>
 8007e38:	886a      	ldrh	r2, [r5, #2]
 8007e3a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8007e3e:	429a      	cmp	r2, r3
 8007e40:	d938      	bls.n	8007eb4 <USBH_ParseCfgDesc+0xbc>
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007e42:	f10d 0106 	add.w	r1, sp, #6
 8007e46:	4620      	mov	r0, r4
 8007e48:	f7ff ffcf 	bl	8007dea <USBH_GetNextDesc>
 8007e4c:	4604      	mov	r4, r0
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8007e4e:	7843      	ldrb	r3, [r0, #1]
 8007e50:	2b04      	cmp	r3, #4
 8007e52:	d1ef      	bne.n	8007e34 <USBH_ParseCfgDesc+0x3c>
        pif = &cfg_desc->Itf_Desc[if_ix];
 8007e54:	46b0      	mov	r8, r6
 8007e56:	201a      	movs	r0, #26
 8007e58:	fb06 f000 	mul.w	r0, r6, r0
 8007e5c:	3008      	adds	r0, #8
 8007e5e:	4428      	add	r0, r5
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007e60:	4621      	mov	r1, r4
 8007e62:	3002      	adds	r0, #2
 8007e64:	f7ff fe99 	bl	8007b9a <USBH_ParseInterfaceDesc>
        ep_ix = 0U;
 8007e68:	2700      	movs	r7, #0
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007e6a:	231a      	movs	r3, #26
 8007e6c:	fb03 5308 	mla	r3, r3, r8, r5
 8007e70:	7b9b      	ldrb	r3, [r3, #14]
 8007e72:	42bb      	cmp	r3, r7
 8007e74:	d91b      	bls.n	8007eae <USBH_ParseCfgDesc+0xb6>
 8007e76:	886a      	ldrh	r2, [r5, #2]
 8007e78:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8007e7c:	429a      	cmp	r2, r3
 8007e7e:	d916      	bls.n	8007eae <USBH_ParseCfgDesc+0xb6>
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007e80:	f10d 0106 	add.w	r1, sp, #6
 8007e84:	4620      	mov	r0, r4
 8007e86:	f7ff ffb0 	bl	8007dea <USBH_GetNextDesc>
 8007e8a:	4604      	mov	r4, r0
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8007e8c:	7843      	ldrb	r3, [r0, #1]
 8007e8e:	2b05      	cmp	r3, #5
 8007e90:	d1eb      	bne.n	8007e6a <USBH_ParseCfgDesc+0x72>
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007e92:	3701      	adds	r7, #1
 8007e94:	201a      	movs	r0, #26
 8007e96:	fb00 f008 	mul.w	r0, r0, r8
 8007e9a:	eb00 00c7 	add.w	r0, r0, r7, lsl #3
 8007e9e:	3008      	adds	r0, #8
 8007ea0:	4428      	add	r0, r5
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8007ea2:	4621      	mov	r1, r4
 8007ea4:	3004      	adds	r0, #4
 8007ea6:	f7ff fe8b 	bl	8007bc0 <USBH_ParseEPDesc>
            ep_ix++;
 8007eaa:	b2ff      	uxtb	r7, r7
 8007eac:	e7dd      	b.n	8007e6a <USBH_ParseCfgDesc+0x72>
        if_ix++;
 8007eae:	3601      	adds	r6, #1
 8007eb0:	b2f6      	uxtb	r6, r6
 8007eb2:	e7bf      	b.n	8007e34 <USBH_ParseCfgDesc+0x3c>
}
 8007eb4:	b002      	add	sp, #8
 8007eb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007eba <USBH_CtlReq>:
{
 8007eba:	b510      	push	{r4, lr}
 8007ebc:	4604      	mov	r4, r0
  switch (phost->RequestState)
 8007ebe:	7880      	ldrb	r0, [r0, #2]
 8007ec0:	2801      	cmp	r0, #1
 8007ec2:	d003      	beq.n	8007ecc <USBH_CtlReq+0x12>
 8007ec4:	2802      	cmp	r0, #2
 8007ec6:	d008      	beq.n	8007eda <USBH_CtlReq+0x20>
 8007ec8:	2001      	movs	r0, #1
}
 8007eca:	bd10      	pop	{r4, pc}
      phost->Control.buff = buff;
 8007ecc:	60a1      	str	r1, [r4, #8]
      phost->Control.length = length;
 8007ece:	81a2      	strh	r2, [r4, #12]
      phost->Control.state = CTRL_SETUP;
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	7623      	strb	r3, [r4, #24]
      phost->RequestState = CMD_WAIT;
 8007ed4:	2302      	movs	r3, #2
 8007ed6:	70a3      	strb	r3, [r4, #2]
      break;
 8007ed8:	e7f7      	b.n	8007eca <USBH_CtlReq+0x10>
      status = USBH_HandleControl(phost);
 8007eda:	4620      	mov	r0, r4
 8007edc:	f7ff fe99 	bl	8007c12 <USBH_HandleControl>
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007ee0:	b130      	cbz	r0, 8007ef0 <USBH_CtlReq+0x36>
 8007ee2:	2803      	cmp	r0, #3
 8007ee4:	d004      	beq.n	8007ef0 <USBH_CtlReq+0x36>
      else if (status == USBH_FAIL)
 8007ee6:	2802      	cmp	r0, #2
 8007ee8:	d1ef      	bne.n	8007eca <USBH_CtlReq+0x10>
        phost->RequestState = CMD_SEND;
 8007eea:	2301      	movs	r3, #1
 8007eec:	70a3      	strb	r3, [r4, #2]
 8007eee:	e7ec      	b.n	8007eca <USBH_CtlReq+0x10>
        phost->RequestState = CMD_SEND;
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	70a3      	strb	r3, [r4, #2]
        phost->Control.state = CTRL_IDLE;
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	7623      	strb	r3, [r4, #24]
 8007ef8:	e7e7      	b.n	8007eca <USBH_CtlReq+0x10>

08007efa <USBH_GetDescriptor>:
{
 8007efa:	b508      	push	{r3, lr}
 8007efc:	468e      	mov	lr, r1
 8007efe:	4694      	mov	ip, r2
 8007f00:	4619      	mov	r1, r3
 8007f02:	f8bd 2008 	ldrh.w	r2, [sp, #8]
  if (phost->RequestState == CMD_SEND)
 8007f06:	7883      	ldrb	r3, [r0, #2]
 8007f08:	2b01      	cmp	r3, #1
 8007f0a:	d002      	beq.n	8007f12 <USBH_GetDescriptor+0x18>
  return USBH_CtlReq(phost, buff, length);
 8007f0c:	f7ff ffd5 	bl	8007eba <USBH_CtlReq>
}
 8007f10:	bd08      	pop	{r3, pc}
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007f12:	f06e 0e7f 	orn	lr, lr, #127	; 0x7f
 8007f16:	f880 e010 	strb.w	lr, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007f1a:	2306      	movs	r3, #6
 8007f1c:	7443      	strb	r3, [r0, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007f1e:	f8a0 c012 	strh.w	ip, [r0, #18]
    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007f22:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8007f26:	f5bc 7f40 	cmp.w	ip, #768	; 0x300
 8007f2a:	d003      	beq.n	8007f34 <USBH_GetDescriptor+0x3a>
      phost->Control.setup.b.wIndex.w = 0U;
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = length;
 8007f30:	82c2      	strh	r2, [r0, #22]
 8007f32:	e7eb      	b.n	8007f0c <USBH_GetDescriptor+0x12>
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007f34:	f240 4309 	movw	r3, #1033	; 0x409
 8007f38:	8283      	strh	r3, [r0, #20]
 8007f3a:	e7f9      	b.n	8007f30 <USBH_GetDescriptor+0x36>

08007f3c <USBH_Get_DevDesc>:
{
 8007f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f3e:	b083      	sub	sp, #12
 8007f40:	4604      	mov	r4, r0
                                   USB_DESC_DEVICE, phost->device.Data,
 8007f42:	f500 768e 	add.w	r6, r0, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007f46:	460d      	mov	r5, r1
 8007f48:	9100      	str	r1, [sp, #0]
 8007f4a:	4633      	mov	r3, r6
 8007f4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007f50:	2100      	movs	r1, #0
 8007f52:	f7ff ffd2 	bl	8007efa <USBH_GetDescriptor>
 8007f56:	4607      	mov	r7, r0
 8007f58:	b110      	cbz	r0, 8007f60 <USBH_Get_DevDesc+0x24>
}
 8007f5a:	4638      	mov	r0, r7
 8007f5c:	b003      	add	sp, #12
 8007f5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007f60:	462a      	mov	r2, r5
 8007f62:	4631      	mov	r1, r6
 8007f64:	f204 3026 	addw	r0, r4, #806	; 0x326
 8007f68:	f7ff fdeb 	bl	8007b42 <USBH_ParseDevDesc>
 8007f6c:	e7f5      	b.n	8007f5a <USBH_Get_DevDesc+0x1e>

08007f6e <USBH_Get_CfgDesc>:
{
 8007f6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f70:	b083      	sub	sp, #12
 8007f72:	4604      	mov	r4, r0
 8007f74:	460d      	mov	r5, r1
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8007f76:	f100 061c 	add.w	r6, r0, #28
  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007f7a:	9100      	str	r1, [sp, #0]
 8007f7c:	4633      	mov	r3, r6
 8007f7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f82:	2100      	movs	r1, #0
 8007f84:	f7ff ffb9 	bl	8007efa <USBH_GetDescriptor>
 8007f88:	4607      	mov	r7, r0
 8007f8a:	b110      	cbz	r0, 8007f92 <USBH_Get_CfgDesc+0x24>
}
 8007f8c:	4638      	mov	r0, r7
 8007f8e:	b003      	add	sp, #12
 8007f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8007f92:	462a      	mov	r2, r5
 8007f94:	4631      	mov	r1, r6
 8007f96:	f504 704e 	add.w	r0, r4, #824	; 0x338
 8007f9a:	f7ff ff2d 	bl	8007df8 <USBH_ParseCfgDesc>
 8007f9e:	e7f5      	b.n	8007f8c <USBH_Get_CfgDesc+0x1e>

08007fa0 <USBH_Get_StringDesc>:
{
 8007fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fa2:	b083      	sub	sp, #12
 8007fa4:	4616      	mov	r6, r2
 8007fa6:	461d      	mov	r5, r3
                                   phost->device.Data, length)) == USBH_OK)
 8007fa8:	f500 748e 	add.w	r4, r0, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007fac:	9300      	str	r3, [sp, #0]
 8007fae:	4623      	mov	r3, r4
 8007fb0:	f441 7240 	orr.w	r2, r1, #768	; 0x300
 8007fb4:	2100      	movs	r1, #0
 8007fb6:	f7ff ffa0 	bl	8007efa <USBH_GetDescriptor>
 8007fba:	4607      	mov	r7, r0
 8007fbc:	b110      	cbz	r0, 8007fc4 <USBH_Get_StringDesc+0x24>
}
 8007fbe:	4638      	mov	r0, r7
 8007fc0:	b003      	add	sp, #12
 8007fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007fc4:	462a      	mov	r2, r5
 8007fc6:	4631      	mov	r1, r6
 8007fc8:	4620      	mov	r0, r4
 8007fca:	f7ff fe09 	bl	8007be0 <USBH_ParseStringDesc>
 8007fce:	e7f6      	b.n	8007fbe <USBH_Get_StringDesc+0x1e>

08007fd0 <USBH_SetAddress>:
{
 8007fd0:	b508      	push	{r3, lr}
  if (phost->RequestState == CMD_SEND)
 8007fd2:	7883      	ldrb	r3, [r0, #2]
 8007fd4:	2b01      	cmp	r3, #1
 8007fd6:	d004      	beq.n	8007fe2 <USBH_SetAddress+0x12>
  return USBH_CtlReq(phost, 0U, 0U);
 8007fd8:	2200      	movs	r2, #0
 8007fda:	4611      	mov	r1, r2
 8007fdc:	f7ff ff6d 	bl	8007eba <USBH_CtlReq>
}
 8007fe0:	bd08      	pop	{r3, pc}
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007fe6:	2205      	movs	r2, #5
 8007fe8:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007fea:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007fec:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007fee:	82c3      	strh	r3, [r0, #22]
 8007ff0:	e7f2      	b.n	8007fd8 <USBH_SetAddress+0x8>

08007ff2 <USBH_SetCfg>:
{
 8007ff2:	b508      	push	{r3, lr}
  if (phost->RequestState == CMD_SEND)
 8007ff4:	7883      	ldrb	r3, [r0, #2]
 8007ff6:	2b01      	cmp	r3, #1
 8007ff8:	d004      	beq.n	8008004 <USBH_SetCfg+0x12>
  return USBH_CtlReq(phost, 0U, 0U);
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	4611      	mov	r1, r2
 8007ffe:	f7ff ff5c 	bl	8007eba <USBH_CtlReq>
}
 8008002:	bd08      	pop	{r3, pc}
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008004:	2300      	movs	r3, #0
 8008006:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008008:	2209      	movs	r2, #9
 800800a:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800800c:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800800e:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008010:	82c3      	strh	r3, [r0, #22]
 8008012:	e7f2      	b.n	8007ffa <USBH_SetCfg+0x8>

08008014 <USBH_SetFeature>:
{
 8008014:	b508      	push	{r3, lr}
  if (phost->RequestState == CMD_SEND)
 8008016:	7883      	ldrb	r3, [r0, #2]
 8008018:	2b01      	cmp	r3, #1
 800801a:	d004      	beq.n	8008026 <USBH_SetFeature+0x12>
  return USBH_CtlReq(phost, 0U, 0U);
 800801c:	2200      	movs	r2, #0
 800801e:	4611      	mov	r1, r2
 8008020:	f7ff ff4b 	bl	8007eba <USBH_CtlReq>
}
 8008024:	bd08      	pop	{r3, pc}
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008026:	2300      	movs	r3, #0
 8008028:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800802a:	2203      	movs	r2, #3
 800802c:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800802e:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008030:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008032:	82c3      	strh	r3, [r0, #22]
 8008034:	e7f2      	b.n	800801c <USBH_SetFeature+0x8>

08008036 <USBH_ClrFeature>:
{
 8008036:	b508      	push	{r3, lr}
  if (phost->RequestState == CMD_SEND)
 8008038:	7883      	ldrb	r3, [r0, #2]
 800803a:	2b01      	cmp	r3, #1
 800803c:	d004      	beq.n	8008048 <USBH_ClrFeature+0x12>
  return USBH_CtlReq(phost, 0U, 0U);
 800803e:	2200      	movs	r2, #0
 8008040:	4611      	mov	r1, r2
 8008042:	f7ff ff3a 	bl	8007eba <USBH_CtlReq>
}
 8008046:	bd08      	pop	{r3, pc}
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008048:	2302      	movs	r3, #2
 800804a:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800804c:	2301      	movs	r3, #1
 800804e:	7443      	strb	r3, [r0, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008050:	2300      	movs	r3, #0
 8008052:	8243      	strh	r3, [r0, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008054:	8281      	strh	r1, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008056:	82c3      	strh	r3, [r0, #22]
 8008058:	e7f1      	b.n	800803e <USBH_ClrFeature+0x8>

0800805a <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800805a:	b510      	push	{r4, lr}
 800805c:	b084      	sub	sp, #16
 800805e:	460b      	mov	r3, r1
 8008060:	4611      	mov	r1, r2

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008062:	2400      	movs	r4, #0
 8008064:	9403      	str	r4, [sp, #12]
 8008066:	2208      	movs	r2, #8
 8008068:	9202      	str	r2, [sp, #8]
 800806a:	9301      	str	r3, [sp, #4]
 800806c:	9400      	str	r4, [sp, #0]
 800806e:	4623      	mov	r3, r4
 8008070:	4622      	mov	r2, r4
 8008072:	f000 fb97 	bl	80087a4 <USBH_LL_SubmitURB>
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
}
 8008076:	4620      	mov	r0, r4
 8008078:	b004      	add	sp, #16
 800807a:	bd10      	pop	{r4, pc}

0800807c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800807c:	b530      	push	{r4, r5, lr}
 800807e:	b085      	sub	sp, #20
 8008080:	460c      	mov	r4, r1
 8008082:	4619      	mov	r1, r3
 8008084:	f89d 3020 	ldrb.w	r3, [sp, #32]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008088:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
 800808c:	b105      	cbz	r5, 8008090 <USBH_CtlSendData+0x14>
  {
    do_ping = 0U;
 800808e:	2300      	movs	r3, #0
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008090:	9303      	str	r3, [sp, #12]
 8008092:	9202      	str	r2, [sp, #8]
 8008094:	9401      	str	r4, [sp, #4]
 8008096:	2301      	movs	r3, #1
 8008098:	9300      	str	r3, [sp, #0]
 800809a:	2300      	movs	r3, #0
 800809c:	461a      	mov	r2, r3
 800809e:	f000 fb81 	bl	80087a4 <USBH_LL_SubmitURB>
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
}
 80080a2:	2000      	movs	r0, #0
 80080a4:	b005      	add	sp, #20
 80080a6:	bd30      	pop	{r4, r5, pc}

080080a8 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80080a8:	b530      	push	{r4, r5, lr}
 80080aa:	b085      	sub	sp, #20
 80080ac:	460d      	mov	r5, r1
 80080ae:	4619      	mov	r1, r3
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80080b0:	2400      	movs	r4, #0
 80080b2:	9403      	str	r4, [sp, #12]
 80080b4:	9202      	str	r2, [sp, #8]
 80080b6:	9501      	str	r5, [sp, #4]
 80080b8:	2201      	movs	r2, #1
 80080ba:	9200      	str	r2, [sp, #0]
 80080bc:	4623      	mov	r3, r4
 80080be:	f000 fb71 	bl	80087a4 <USBH_LL_SubmitURB>
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;

}
 80080c2:	4620      	mov	r0, r4
 80080c4:	b005      	add	sp, #20
 80080c6:	bd30      	pop	{r4, r5, pc}

080080c8 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80080c8:	b530      	push	{r4, r5, lr}
 80080ca:	b085      	sub	sp, #20
 80080cc:	460c      	mov	r4, r1
 80080ce:	4619      	mov	r1, r3
 80080d0:	f89d 3020 	ldrb.w	r3, [sp, #32]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80080d4:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
 80080d8:	b105      	cbz	r5, 80080dc <USBH_BulkSendData+0x14>
  {
    do_ping = 0U;
 80080da:	2300      	movs	r3, #0
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80080dc:	9303      	str	r3, [sp, #12]
 80080de:	9202      	str	r2, [sp, #8]
 80080e0:	9401      	str	r4, [sp, #4]
 80080e2:	2301      	movs	r3, #1
 80080e4:	9300      	str	r3, [sp, #0]
 80080e6:	2302      	movs	r3, #2
 80080e8:	2200      	movs	r2, #0
 80080ea:	f000 fb5b 	bl	80087a4 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
}
 80080ee:	2000      	movs	r0, #0
 80080f0:	b005      	add	sp, #20
 80080f2:	bd30      	pop	{r4, r5, pc}

080080f4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80080f4:	b530      	push	{r4, r5, lr}
 80080f6:	b085      	sub	sp, #20
 80080f8:	460d      	mov	r5, r1
 80080fa:	4619      	mov	r1, r3
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80080fc:	2400      	movs	r4, #0
 80080fe:	9403      	str	r4, [sp, #12]
 8008100:	9202      	str	r2, [sp, #8]
 8008102:	9501      	str	r5, [sp, #4]
 8008104:	2201      	movs	r2, #1
 8008106:	9200      	str	r2, [sp, #0]
 8008108:	2302      	movs	r3, #2
 800810a:	f000 fb4b 	bl	80087a4 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
}
 800810e:	4620      	mov	r0, r4
 8008110:	b005      	add	sp, #20
 8008112:	bd30      	pop	{r4, r5, pc}

08008114 <USBH_GetFreePipe>:
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
  uint8_t idx = 0U;

  for (idx = 0U ; idx < 11U ; idx++)
 8008114:	2300      	movs	r3, #0
 8008116:	2b0a      	cmp	r3, #10
 8008118:	d80c      	bhi.n	8008134 <USBH_GetFreePipe+0x20>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800811a:	f103 02e0 	add.w	r2, r3, #224	; 0xe0
 800811e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8008122:	6852      	ldr	r2, [r2, #4]
 8008124:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8008128:	d002      	beq.n	8008130 <USBH_GetFreePipe+0x1c>
  for (idx = 0U ; idx < 11U ; idx++)
 800812a:	3301      	adds	r3, #1
 800812c:	b2db      	uxtb	r3, r3
 800812e:	e7f2      	b.n	8008116 <USBH_GetFreePipe+0x2>
    {
      return (uint16_t)idx;
 8008130:	b298      	uxth	r0, r3
 8008132:	4770      	bx	lr
    }
  }

  return 0xFFFFU;
 8008134:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 8008138:	4770      	bx	lr

0800813a <USBH_OpenPipe>:
{
 800813a:	b510      	push	{r4, lr}
 800813c:	b084      	sub	sp, #16
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800813e:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8008142:	9402      	str	r4, [sp, #8]
 8008144:	f89d 401c 	ldrb.w	r4, [sp, #28]
 8008148:	9401      	str	r4, [sp, #4]
 800814a:	f89d 4018 	ldrb.w	r4, [sp, #24]
 800814e:	9400      	str	r4, [sp, #0]
 8008150:	f000 fb0d 	bl	800876e <USBH_LL_OpenPipe>
}
 8008154:	2000      	movs	r0, #0
 8008156:	b004      	add	sp, #16
 8008158:	bd10      	pop	{r4, pc}

0800815a <USBH_ClosePipe>:
{
 800815a:	b508      	push	{r3, lr}
  USBH_LL_ClosePipe(phost, pipe_num);
 800815c:	f000 fb1a 	bl	8008794 <USBH_LL_ClosePipe>
}
 8008160:	2000      	movs	r0, #0
 8008162:	bd08      	pop	{r3, pc}

08008164 <USBH_AllocPipe>:
{
 8008164:	b538      	push	{r3, r4, r5, lr}
 8008166:	4604      	mov	r4, r0
 8008168:	460d      	mov	r5, r1
  pipe =  USBH_GetFreePipe(phost);
 800816a:	f7ff ffd3 	bl	8008114 <USBH_GetFreePipe>
  if (pipe != 0xFFFFU)
 800816e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008172:	4298      	cmp	r0, r3
 8008174:	d007      	beq.n	8008186 <USBH_AllocPipe+0x22>
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8008176:	f000 030f 	and.w	r3, r0, #15
 800817a:	f445 4500 	orr.w	r5, r5, #32768	; 0x8000
 800817e:	33e0      	adds	r3, #224	; 0xe0
 8008180:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8008184:	6065      	str	r5, [r4, #4]
}
 8008186:	b2c0      	uxtb	r0, r0
 8008188:	bd38      	pop	{r3, r4, r5, pc}

0800818a <USBH_FreePipe>:
  if (idx < 11U)
 800818a:	290a      	cmp	r1, #10
 800818c:	d806      	bhi.n	800819c <USBH_FreePipe+0x12>
    phost->Pipes[idx] &= 0x7FFFU;
 800818e:	31e0      	adds	r1, #224	; 0xe0
 8008190:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8008194:	6843      	ldr	r3, [r0, #4]
 8008196:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800819a:	6043      	str	r3, [r0, #4]
}
 800819c:	2000      	movs	r0, #0
 800819e:	4770      	bx	lr

080081a0 <Scheduler_Tasks>:
	tTask * t = (tTask *)Queue_Peek(&Scheduler.Tasks,Task_ID - 1);
	Task_Add_Heap_Size(Task_ID, t);
}

static void Scheduler_Tasks(void * task_data)
{
 80081a0:	b510      	push	{r4, lr}
		Console_Commands_Added = true;
	}
#endif

	tTask * task;
	uint32_t counter = 0;
 80081a2:	2400      	movs	r4, #0
	for(; counter < Scheduler.Tasks.Size; counter++)
 80081a4:	e017      	b.n	80081d6 <Scheduler_Tasks+0x36>
	{
		task = (tTask *)Queue_Peek(&Scheduler.Tasks,counter);
 80081a6:	4621      	mov	r1, r4
 80081a8:	480d      	ldr	r0, [pc, #52]	; (80081e0 <Scheduler_Tasks+0x40>)
 80081aa:	f7fe faa7 	bl	80066fc <Queue_Peek>

		float percent = (float)task->Task_Running_Time / 1000.0;
 80081ae:	edd0 7a04 	vldr	s15, [r0, #16]
 80081b2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80081b6:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80081e4 <Scheduler_Tasks+0x44>
 80081ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
		task->Task_Running_Percentage = percent * 100;
 80081be:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80081e8 <Scheduler_Tasks+0x48>
 80081c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80081c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80081ca:	ee17 3a90 	vmov	r3, s15
 80081ce:	7503      	strb	r3, [r0, #20]

		task->Task_Running_Time = 0;
 80081d0:	2300      	movs	r3, #0
 80081d2:	6103      	str	r3, [r0, #16]
	for(; counter < Scheduler.Tasks.Size; counter++)
 80081d4:	3401      	adds	r4, #1
 80081d6:	4b02      	ldr	r3, [pc, #8]	; (80081e0 <Scheduler_Tasks+0x40>)
 80081d8:	689b      	ldr	r3, [r3, #8]
 80081da:	42a3      	cmp	r3, r4
 80081dc:	d8e3      	bhi.n	80081a6 <Scheduler_Tasks+0x6>
	}
}
 80081de:	bd10      	pop	{r4, pc}
 80081e0:	2000182c 	.word	0x2000182c
 80081e4:	447a0000 	.word	0x447a0000
 80081e8:	42c80000 	.word	0x42c80000

080081ec <Run_Scheduler_Tasks>:

void Run_Scheduler_Tasks(void)
{
	if(Scheduler.Tasks.Size > 0)
 80081ec:	4b15      	ldr	r3, [pc, #84]	; (8008244 <Run_Scheduler_Tasks+0x58>)
 80081ee:	689b      	ldr	r3, [r3, #8]
 80081f0:	bb23      	cbnz	r3, 800823c <Run_Scheduler_Tasks+0x50>
 80081f2:	4770      	bx	lr
					task->Task_Exe(task->Task_Data);
					uint32_t stop = HAL_GetTick();
					task->Task_Running_Time += (stop - start);
				}

				task->Start_Time = HAL_GetTick();
 80081f4:	f7f9 fc1a 	bl	8001a2c <HAL_GetTick>
 80081f8:	6060      	str	r0, [r4, #4]
		for(; counter < Scheduler.Tasks.Size; counter++)
 80081fa:	3501      	adds	r5, #1
 80081fc:	4b11      	ldr	r3, [pc, #68]	; (8008244 <Run_Scheduler_Tasks+0x58>)
 80081fe:	689b      	ldr	r3, [r3, #8]
 8008200:	42ab      	cmp	r3, r5
 8008202:	d91e      	bls.n	8008242 <Run_Scheduler_Tasks+0x56>
			task = (tTask *)Queue_Peek(&Scheduler.Tasks,counter);
 8008204:	4629      	mov	r1, r5
 8008206:	480f      	ldr	r0, [pc, #60]	; (8008244 <Run_Scheduler_Tasks+0x58>)
 8008208:	f7fe fa78 	bl	80066fc <Queue_Peek>
 800820c:	4604      	mov	r4, r0
			if((HAL_GetTick() - task->Start_Time) > task->Timeout)
 800820e:	f7f9 fc0d 	bl	8001a2c <HAL_GetTick>
 8008212:	6863      	ldr	r3, [r4, #4]
 8008214:	1ac0      	subs	r0, r0, r3
 8008216:	68a3      	ldr	r3, [r4, #8]
 8008218:	4298      	cmp	r0, r3
 800821a:	d9ee      	bls.n	80081fa <Run_Scheduler_Tasks+0xe>
				if(!task->Task_Halted)
 800821c:	7b23      	ldrb	r3, [r4, #12]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d1e8      	bne.n	80081f4 <Run_Scheduler_Tasks+0x8>
					uint32_t start = HAL_GetTick();
 8008222:	f7f9 fc03 	bl	8001a2c <HAL_GetTick>
 8008226:	4606      	mov	r6, r0
					task->Task_Exe(task->Task_Data);
 8008228:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800822a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800822c:	4798      	blx	r3
					uint32_t stop = HAL_GetTick();
 800822e:	f7f9 fbfd 	bl	8001a2c <HAL_GetTick>
					task->Task_Running_Time += (stop - start);
 8008232:	1b80      	subs	r0, r0, r6
 8008234:	6923      	ldr	r3, [r4, #16]
 8008236:	4403      	add	r3, r0
 8008238:	6123      	str	r3, [r4, #16]
 800823a:	e7db      	b.n	80081f4 <Run_Scheduler_Tasks+0x8>
{
 800823c:	b570      	push	{r4, r5, r6, lr}
		uint32_t counter = 0;
 800823e:	2500      	movs	r5, #0
 8008240:	e7dc      	b.n	80081fc <Run_Scheduler_Tasks+0x10>
			}
		}
	}
}
 8008242:	bd70      	pop	{r4, r5, r6, pc}
 8008244:	2000182c 	.word	0x2000182c

08008248 <Set_Task_Name>:
	}
	counter = 0;
}

void Set_Task_Name(uint32_t task, const char * name)
{
 8008248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800824a:	4606      	mov	r6, r0
 800824c:	460f      	mov	r7, r1
	// Loop through all of the tasks
	tTask * t;
	uint32_t counter = 0;
 800824e:	2400      	movs	r4, #0
	for(; counter < Scheduler.Tasks.Size; counter++)
 8008250:	e000      	b.n	8008254 <Set_Task_Name+0xc>
 8008252:	3401      	adds	r4, #1
 8008254:	4b09      	ldr	r3, [pc, #36]	; (800827c <Set_Task_Name+0x34>)
 8008256:	689b      	ldr	r3, [r3, #8]
 8008258:	42a3      	cmp	r3, r4
 800825a:	d90e      	bls.n	800827a <Set_Task_Name+0x32>
	{
		t = (tTask *)Queue_Peek(&Scheduler.Tasks,counter);
 800825c:	4621      	mov	r1, r4
 800825e:	4807      	ldr	r0, [pc, #28]	; (800827c <Set_Task_Name+0x34>)
 8008260:	f7fe fa4c 	bl	80066fc <Queue_Peek>
 8008264:	4605      	mov	r5, r0

		//if(t->TID == task)
			if(7 == task)
 8008266:	2e07      	cmp	r6, #7
 8008268:	d1f3      	bne.n	8008252 <Set_Task_Name+0xa>
		{
			strncpy((char *)t->Task_Name,name,15);
 800826a:	220f      	movs	r2, #15
 800826c:	4639      	mov	r1, r7
 800826e:	3015      	adds	r0, #21
 8008270:	f000 fe4e 	bl	8008f10 <strncpy>
			t->Task_Name[15] = '\0';
 8008274:	2300      	movs	r3, #0
 8008276:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24

			return;
		}
	}
}
 800827a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800827c:	2000182c 	.word	0x2000182c

08008280 <Task_Add_Heap_Size>:
		}
	}
}

void Task_Add_Heap_Size(uint32_t task, void * data_ptr)
{
 8008280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008282:	4606      	mov	r6, r0
 8008284:	460f      	mov	r7, r1
	tTask * t;
	for(int counter = 0; counter < Scheduler.Tasks.Size; counter++)
 8008286:	2500      	movs	r5, #0
 8008288:	e000      	b.n	800828c <Task_Add_Heap_Size+0xc>
 800828a:	3501      	adds	r5, #1
 800828c:	4b09      	ldr	r3, [pc, #36]	; (80082b4 <Task_Add_Heap_Size+0x34>)
 800828e:	689b      	ldr	r3, [r3, #8]
 8008290:	42ab      	cmp	r3, r5
 8008292:	d90d      	bls.n	80082b0 <Task_Add_Heap_Size+0x30>
	{
		t = (tTask *)Queue_Peek(&Scheduler.Tasks,counter);
 8008294:	4629      	mov	r1, r5
 8008296:	4807      	ldr	r0, [pc, #28]	; (80082b4 <Task_Add_Heap_Size+0x34>)
 8008298:	f7fe fa30 	bl	80066fc <Queue_Peek>
 800829c:	4604      	mov	r4, r0

		if(t->TID == task)
 800829e:	6803      	ldr	r3, [r0, #0]
 80082a0:	42b3      	cmp	r3, r6
 80082a2:	d1f2      	bne.n	800828a <Task_Add_Heap_Size+0xa>
		{
			t->Task_Heap_Usage += malloc_usable_size(data_ptr);
 80082a4:	4638      	mov	r0, r7
 80082a6:	f000 fb5b 	bl	8008960 <malloc_usable_size>
 80082aa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80082ac:	4403      	add	r3, r0
 80082ae:	6323      	str	r3, [r4, #48]	; 0x30
			break;
		}
	}
}
 80082b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082b2:	bf00      	nop
 80082b4:	2000182c 	.word	0x2000182c

080082b8 <Start_Task>:
{
 80082b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082bc:	4607      	mov	r7, r0
 80082be:	460e      	mov	r6, r1
 80082c0:	4615      	mov	r5, r2
	tTask * task = (tTask *)malloc(sizeof(tTask));
 80082c2:	2034      	movs	r0, #52	; 0x34
 80082c4:	f000 fa90 	bl	80087e8 <malloc>
 80082c8:	4604      	mov	r4, r0
	if(Task_ID != 0xFFFFFFFF)
 80082ca:	4b1c      	ldr	r3, [pc, #112]	; (800833c <Start_Task+0x84>)
 80082cc:	6818      	ldr	r0, [r3, #0]
 80082ce:	f1b0 3fff 	cmp.w	r0, #4294967295
 80082d2:	d127      	bne.n	8008324 <Start_Task+0x6c>
	if(task != NULL)
 80082d4:	b354      	cbz	r4, 800832c <Start_Task+0x74>
		task->TID = Scheduler.Next_TID;
 80082d6:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8008348 <Start_Task+0x90>
 80082da:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80082de:	6023      	str	r3, [r4, #0]
		Scheduler.Next_TID++;
 80082e0:	3301      	adds	r3, #1
 80082e2:	f8c8 300c 	str.w	r3, [r8, #12]
		task->Task_Halted = 0;
 80082e6:	f04f 0900 	mov.w	r9, #0
 80082ea:	f884 900c 	strb.w	r9, [r4, #12]
		task->Start_Time = HAL_GetTick();
 80082ee:	f7f9 fb9d 	bl	8001a2c <HAL_GetTick>
 80082f2:	6060      	str	r0, [r4, #4]
		task->Timeout = timeout;
 80082f4:	60a5      	str	r5, [r4, #8]
		task->Task_Running_Time = 0;
 80082f6:	f8c4 9010 	str.w	r9, [r4, #16]
		strcpy((char *)task->Task_Name,"               ");
 80082fa:	4d11      	ldr	r5, [pc, #68]	; (8008340 <Start_Task+0x88>)
 80082fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80082fe:	f8c4 0015 	str.w	r0, [r4, #21]
 8008302:	f8c4 1019 	str.w	r1, [r4, #25]
 8008306:	f8c4 201d 	str.w	r2, [r4, #29]
 800830a:	f8c4 3021 	str.w	r3, [r4, #33]	; 0x21
		task->Task_Exe = Task_CallBack;
 800830e:	62a7      	str	r7, [r4, #40]	; 0x28
		task->Task_Data = Data;
 8008310:	62e6      	str	r6, [r4, #44]	; 0x2c
		task->Task_Heap_Usage = 0;
 8008312:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
		if(Enqueue(&Scheduler.Tasks,(void *)task))
 8008316:	4621      	mov	r1, r4
 8008318:	4640      	mov	r0, r8
 800831a:	f7fe f9d1 	bl	80066c0 <Enqueue>
 800831e:	b150      	cbz	r0, 8008336 <Start_Task+0x7e>
			return task->TID;
 8008320:	6820      	ldr	r0, [r4, #0]
 8008322:	e009      	b.n	8008338 <Start_Task+0x80>
		Task_Add_Heap_Size(Task_ID, task);
 8008324:	4621      	mov	r1, r4
 8008326:	f7ff ffab 	bl	8008280 <Task_Add_Heap_Size>
 800832a:	e7d3      	b.n	80082d4 <Start_Task+0x1c>
		printf("Task start malloc error\r\n");
 800832c:	4805      	ldr	r0, [pc, #20]	; (8008344 <Start_Task+0x8c>)
 800832e:	f000 fcf5 	bl	8008d1c <puts>
		return 0;
 8008332:	2000      	movs	r0, #0
 8008334:	e000      	b.n	8008338 <Start_Task+0x80>
			return 0;
 8008336:	2000      	movs	r0, #0
}
 8008338:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800833c:	2000002c 	.word	0x2000002c
 8008340:	080098ac 	.word	0x080098ac
 8008344:	080098bc 	.word	0x080098bc
 8008348:	2000182c 	.word	0x2000182c

0800834c <Start_Scheduler>:
{
 800834c:	b538      	push	{r3, r4, r5, lr}
	Prep_Queue(&Scheduler.Tasks);
 800834e:	4d0d      	ldr	r5, [pc, #52]	; (8008384 <Start_Scheduler+0x38>)
 8008350:	4628      	mov	r0, r5
 8008352:	f7fe f9af 	bl	80066b4 <Prep_Queue>
	Scheduler.Next_TID = 1;
 8008356:	2301      	movs	r3, #1
 8008358:	60eb      	str	r3, [r5, #12]
	Task_ID = Start_Task(Scheduler_Tasks,NULL,1000);
 800835a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800835e:	2100      	movs	r1, #0
 8008360:	4809      	ldr	r0, [pc, #36]	; (8008388 <Start_Scheduler+0x3c>)
 8008362:	f7ff ffa9 	bl	80082b8 <Start_Task>
 8008366:	4c09      	ldr	r4, [pc, #36]	; (800838c <Start_Scheduler+0x40>)
 8008368:	6020      	str	r0, [r4, #0]
	Set_Task_Name(Task_ID,"Scheduler");
 800836a:	4909      	ldr	r1, [pc, #36]	; (8008390 <Start_Scheduler+0x44>)
 800836c:	f7ff ff6c 	bl	8008248 <Set_Task_Name>
	tTask * t = (tTask *)Queue_Peek(&Scheduler.Tasks,Task_ID - 1);
 8008370:	6821      	ldr	r1, [r4, #0]
 8008372:	3901      	subs	r1, #1
 8008374:	4628      	mov	r0, r5
 8008376:	f7fe f9c1 	bl	80066fc <Queue_Peek>
 800837a:	4601      	mov	r1, r0
	Task_Add_Heap_Size(Task_ID, t);
 800837c:	6820      	ldr	r0, [r4, #0]
 800837e:	f7ff ff7f 	bl	8008280 <Task_Add_Heap_Size>
}
 8008382:	bd38      	pop	{r3, r4, r5, pc}
 8008384:	2000182c 	.word	0x2000182c
 8008388:	080081a1 	.word	0x080081a1
 800838c:	2000002c 	.word	0x2000002c
 8008390:	080098d8 	.word	0x080098d8

08008394 <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8008394:	4b13      	ldr	r3, [pc, #76]	; (80083e4 <FATFS_LinkDriverEx+0x50>)
 8008396:	7a5b      	ldrb	r3, [r3, #9]
 8008398:	bb13      	cbnz	r3, 80083e0 <FATFS_LinkDriverEx+0x4c>
{
 800839a:	b510      	push	{r4, lr}
 800839c:	4604      	mov	r4, r0
 800839e:	f003 00ff 	and.w	r0, r3, #255	; 0xff
  {
    disk.is_initialized[disk.nbr] = 0;
 80083a2:	4b10      	ldr	r3, [pc, #64]	; (80083e4 <FATFS_LinkDriverEx+0x50>)
 80083a4:	f893 c009 	ldrb.w	ip, [r3, #9]
 80083a8:	fa5f fc8c 	uxtb.w	ip, ip
 80083ac:	f04f 0e00 	mov.w	lr, #0
 80083b0:	f803 e00c 	strb.w	lr, [r3, ip]
    disk.drv[disk.nbr] = drv;
 80083b4:	f893 c009 	ldrb.w	ip, [r3, #9]
 80083b8:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 80083bc:	f8cc 4004 	str.w	r4, [ip, #4]
    disk.lun[disk.nbr] = lun;
 80083c0:	7a5c      	ldrb	r4, [r3, #9]
 80083c2:	441c      	add	r4, r3
 80083c4:	7222      	strb	r2, [r4, #8]
    DiskNum = disk.nbr++;
 80083c6:	7a5a      	ldrb	r2, [r3, #9]
 80083c8:	1c54      	adds	r4, r2, #1
 80083ca:	b2e4      	uxtb	r4, r4
 80083cc:	725c      	strb	r4, [r3, #9]
    path[0] = DiskNum + '0';
 80083ce:	3230      	adds	r2, #48	; 0x30
 80083d0:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 80083d2:	233a      	movs	r3, #58	; 0x3a
 80083d4:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 80083d6:	232f      	movs	r3, #47	; 0x2f
 80083d8:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 80083da:	f881 e003 	strb.w	lr, [r1, #3]
    ret = 0;
  }

  return ret;
}
 80083de:	bd10      	pop	{r4, pc}
  uint8_t ret = 1;
 80083e0:	2001      	movs	r0, #1
}
 80083e2:	4770      	bx	lr
 80083e4:	2000183c 	.word	0x2000183c

080083e8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80083e8:	b508      	push	{r3, lr}
  return FATFS_LinkDriverEx(drv, path, 0);
 80083ea:	2200      	movs	r2, #0
 80083ec:	f7ff ffd2 	bl	8008394 <FATFS_LinkDriverEx>
}
 80083f0:	bd08      	pop	{r3, pc}
	...

080083f4 <HAL_UART_TxCpltCallback>:
		UART_Tasks((void *)uart);
	}
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80083f4:	b538      	push	{r3, r4, r5, lr}
 80083f6:	4605      	mov	r5, r0
	// Find who the callback is for
	int c = 0;
 80083f8:	2400      	movs	r4, #0
	for(; c < UART_Callback_Handles.Size; c++)
 80083fa:	e000      	b.n	80083fe <HAL_UART_TxCpltCallback+0xa>
 80083fc:	3401      	adds	r4, #1
 80083fe:	4b07      	ldr	r3, [pc, #28]	; (800841c <HAL_UART_TxCpltCallback+0x28>)
 8008400:	689b      	ldr	r3, [r3, #8]
 8008402:	42a3      	cmp	r3, r4
 8008404:	d909      	bls.n	800841a <HAL_UART_TxCpltCallback+0x26>
	{
		UART * uart = (UART *)Queue_Peek(&UART_Callback_Handles, c);
 8008406:	4621      	mov	r1, r4
 8008408:	4804      	ldr	r0, [pc, #16]	; (800841c <HAL_UART_TxCpltCallback+0x28>)
 800840a:	f7fe f977 	bl	80066fc <Queue_Peek>

		if(uart->UART_Handle == huart)
 800840e:	6803      	ldr	r3, [r0, #0]
 8008410:	42ab      	cmp	r3, r5
 8008412:	d1f3      	bne.n	80083fc <HAL_UART_TxCpltCallback+0x8>
		{
			uart->Currently_Transmitting = false;
 8008414:	2300      	movs	r3, #0
 8008416:	f880 321c 	strb.w	r3, [r0, #540]	; 0x21c
			return;
		}
	}
}
 800841a:	bd38      	pop	{r3, r4, r5, pc}
 800841c:	20001848 	.word	0x20001848

08008420 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	UNUSED(huart);
}
 8008420:	4770      	bx	lr
	...

08008424 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008424:	b570      	push	{r4, r5, r6, lr}
 8008426:	4606      	mov	r6, r0
	// Find who the callback is for
	int c = 0;
 8008428:	2500      	movs	r5, #0
	for(; c < UART_Callback_Handles.Size; c++)
 800842a:	e000      	b.n	800842e <HAL_UART_ErrorCallback+0xa>
 800842c:	3501      	adds	r5, #1
 800842e:	4b10      	ldr	r3, [pc, #64]	; (8008470 <HAL_UART_ErrorCallback+0x4c>)
 8008430:	689b      	ldr	r3, [r3, #8]
 8008432:	42ab      	cmp	r3, r5
 8008434:	d91a      	bls.n	800846c <HAL_UART_ErrorCallback+0x48>
	{
		UART * uart = (UART *)Queue_Peek(&UART_Callback_Handles, c);
 8008436:	4629      	mov	r1, r5
 8008438:	480d      	ldr	r0, [pc, #52]	; (8008470 <HAL_UART_ErrorCallback+0x4c>)
 800843a:	f7fe f95f 	bl	80066fc <Queue_Peek>
 800843e:	4604      	mov	r4, r0

		if(uart->UART_Handle == huart)
 8008440:	6803      	ldr	r3, [r0, #0]
 8008442:	42b3      	cmp	r3, r6
 8008444:	d1f2      	bne.n	800842c <HAL_UART_ErrorCallback+0x8>
		{
			uart->RX_Buff_Tail_Ptr = 0;
 8008446:	2200      	movs	r2, #0
 8008448:	f8c0 2208 	str.w	r2, [r0, #520]	; 0x208
			uart->Currently_Transmitting = false;
 800844c:	f880 221c 	strb.w	r2, [r0, #540]	; 0x21c
			HAL_DMA_Abort_IT(uart->UART_Handle->hdmarx);
 8008450:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8008452:	f7f9 fcbd 	bl	8001dd0 <HAL_DMA_Abort_IT>
			HAL_UART_DMAStop(uart->UART_Handle);
 8008456:	6820      	ldr	r0, [r4, #0]
 8008458:	f7fc fe34 	bl	80050c4 <HAL_UART_DMAStop>
			HAL_UART_Receive_DMA(uart->UART_Handle, uart->RX_Buffer, UART_RX_BUFF_SIZE);
 800845c:	4621      	mov	r1, r4
 800845e:	f851 0b06 	ldr.w	r0, [r1], #6
 8008462:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008466:	f7fd fc1b 	bl	8005ca0 <HAL_UART_Receive_DMA>
 800846a:	e7df      	b.n	800842c <HAL_UART_ErrorCallback+0x8>
		}
	}
}
 800846c:	bd70      	pop	{r4, r5, r6, pc}
 800846e:	bf00      	nop
 8008470:	20001848 	.word	0x20001848

08008474 <USBH_UserProcess>:
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008474:	2904      	cmp	r1, #4
 8008476:	d012      	beq.n	800849e <USBH_UserProcess+0x2a>
 8008478:	2905      	cmp	r1, #5
 800847a:	d002      	beq.n	8008482 <USBH_UserProcess+0xe>
 800847c:	2902      	cmp	r1, #2
 800847e:	d007      	beq.n	8008490 <USBH_UserProcess+0x1c>

  default:
  break;
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008480:	4770      	bx	lr
	  USB_MSD_Mounted = 0;
 8008482:	4b09      	ldr	r3, [pc, #36]	; (80084a8 <USBH_UserProcess+0x34>)
 8008484:	2200      	movs	r2, #0
 8008486:	701a      	strb	r2, [r3, #0]
  Appli_state = APPLICATION_DISCONNECT;
 8008488:	4b08      	ldr	r3, [pc, #32]	; (80084ac <USBH_UserProcess+0x38>)
 800848a:	2203      	movs	r2, #3
 800848c:	701a      	strb	r2, [r3, #0]
  break;
 800848e:	4770      	bx	lr
	  USB_MSD_Mounted = 1;
 8008490:	4b05      	ldr	r3, [pc, #20]	; (80084a8 <USBH_UserProcess+0x34>)
 8008492:	2201      	movs	r2, #1
 8008494:	701a      	strb	r2, [r3, #0]
  Appli_state = APPLICATION_READY;
 8008496:	4b05      	ldr	r3, [pc, #20]	; (80084ac <USBH_UserProcess+0x38>)
 8008498:	2202      	movs	r2, #2
 800849a:	701a      	strb	r2, [r3, #0]
  break;
 800849c:	4770      	bx	lr
  Appli_state = APPLICATION_START;
 800849e:	4b03      	ldr	r3, [pc, #12]	; (80084ac <USBH_UserProcess+0x38>)
 80084a0:	2201      	movs	r2, #1
 80084a2:	701a      	strb	r2, [r3, #0]
}
 80084a4:	e7ec      	b.n	8008480 <USBH_UserProcess+0xc>
 80084a6:	bf00      	nop
 80084a8:	20001855 	.word	0x20001855
 80084ac:	20001854 	.word	0x20001854

080084b0 <MX_USB_HOST_Init>:
{
 80084b0:	b508      	push	{r3, lr}
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80084b2:	2201      	movs	r2, #1
 80084b4:	490b      	ldr	r1, [pc, #44]	; (80084e4 <MX_USB_HOST_Init+0x34>)
 80084b6:	480c      	ldr	r0, [pc, #48]	; (80084e8 <MX_USB_HOST_Init+0x38>)
 80084b8:	f7ff f966 	bl	8007788 <USBH_Init>
 80084bc:	b948      	cbnz	r0, 80084d2 <MX_USB_HOST_Init+0x22>
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 80084be:	490b      	ldr	r1, [pc, #44]	; (80084ec <MX_USB_HOST_Init+0x3c>)
 80084c0:	4809      	ldr	r0, [pc, #36]	; (80084e8 <MX_USB_HOST_Init+0x38>)
 80084c2:	f7ff f980 	bl	80077c6 <USBH_RegisterClass>
 80084c6:	b938      	cbnz	r0, 80084d8 <MX_USB_HOST_Init+0x28>
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80084c8:	4807      	ldr	r0, [pc, #28]	; (80084e8 <MX_USB_HOST_Init+0x38>)
 80084ca:	f7ff f9c1 	bl	8007850 <USBH_Start>
 80084ce:	b930      	cbnz	r0, 80084de <MX_USB_HOST_Init+0x2e>
}
 80084d0:	bd08      	pop	{r3, pc}
    Error_Handler();
 80084d2:	f7f8 fa7f 	bl	80009d4 <Error_Handler>
 80084d6:	e7f2      	b.n	80084be <MX_USB_HOST_Init+0xe>
    Error_Handler();
 80084d8:	f7f8 fa7c 	bl	80009d4 <Error_Handler>
 80084dc:	e7f4      	b.n	80084c8 <MX_USB_HOST_Init+0x18>
    Error_Handler();
 80084de:	f7f8 fa79 	bl	80009d4 <Error_Handler>
}
 80084e2:	e7f5      	b.n	80084d0 <MX_USB_HOST_Init+0x20>
 80084e4:	08008475 	.word	0x08008475
 80084e8:	20001858 	.word	0x20001858
 80084ec:	2000000c 	.word	0x2000000c

080084f0 <MX_USB_HOST_Process>:
{
 80084f0:	b508      	push	{r3, lr}
  USBH_Process(&hUsbHostFS);
 80084f2:	4802      	ldr	r0, [pc, #8]	; (80084fc <MX_USB_HOST_Process+0xc>)
 80084f4:	f7ff f9b6 	bl	8007864 <USBH_Process>
}
 80084f8:	bd08      	pop	{r3, pc}
 80084fa:	bf00      	nop
 80084fc:	20001858 	.word	0x20001858

08008500 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008500:	b510      	push	{r4, lr}
 8008502:	b0ae      	sub	sp, #184	; 0xb8
 8008504:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008506:	2100      	movs	r1, #0
 8008508:	9129      	str	r1, [sp, #164]	; 0xa4
 800850a:	912a      	str	r1, [sp, #168]	; 0xa8
 800850c:	912b      	str	r1, [sp, #172]	; 0xac
 800850e:	912c      	str	r1, [sp, #176]	; 0xb0
 8008510:	912d      	str	r1, [sp, #180]	; 0xb4
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008512:	2294      	movs	r2, #148	; 0x94
 8008514:	a804      	add	r0, sp, #16
 8008516:	f000 fce1 	bl	8008edc <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 800851a:	6823      	ldr	r3, [r4, #0]
 800851c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008520:	d001      	beq.n	8008526 <HAL_HCD_MspInit+0x26>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008522:	b02e      	add	sp, #184	; 0xb8
 8008524:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8008526:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800852a:	9304      	str	r3, [sp, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800852c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008530:	9321      	str	r3, [sp, #132]	; 0x84
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8008532:	2303      	movs	r3, #3
 8008534:	9305      	str	r3, [sp, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8008536:	2301      	movs	r3, #1
 8008538:	9306      	str	r3, [sp, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 800853a:	230c      	movs	r3, #12
 800853c:	9307      	str	r3, [sp, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800853e:	2302      	movs	r3, #2
 8008540:	9308      	str	r3, [sp, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8008542:	9309      	str	r3, [sp, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8008544:	930a      	str	r3, [sp, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8008546:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800854a:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800854c:	a804      	add	r0, sp, #16
 800854e:	f7fc f8cd 	bl	80046ec <HAL_RCCEx_PeriphCLKConfig>
 8008552:	2800      	cmp	r0, #0
 8008554:	d13e      	bne.n	80085d4 <HAL_HCD_MspInit+0xd4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008556:	4c22      	ldr	r4, [pc, #136]	; (80085e0 <HAL_HCD_MspInit+0xe0>)
 8008558:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800855a:	f043 0301 	orr.w	r3, r3, #1
 800855e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8008560:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8008562:	f003 0301 	and.w	r3, r3, #1
 8008566:	9301      	str	r3, [sp, #4]
 8008568:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800856a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800856e:	9329      	str	r3, [sp, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008570:	2302      	movs	r3, #2
 8008572:	932a      	str	r3, [sp, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008574:	2300      	movs	r3, #0
 8008576:	932b      	str	r3, [sp, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008578:	2303      	movs	r3, #3
 800857a:	932c      	str	r3, [sp, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800857c:	230a      	movs	r3, #10
 800857e:	932d      	str	r3, [sp, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008580:	a929      	add	r1, sp, #164	; 0xa4
 8008582:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008586:	f7f9 fcc1 	bl	8001f0c <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800858a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800858c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008590:	64e3      	str	r3, [r4, #76]	; 0x4c
 8008592:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8008594:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008598:	9302      	str	r3, [sp, #8]
 800859a:	9b02      	ldr	r3, [sp, #8]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800859c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800859e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80085a2:	d11a      	bne.n	80085da <HAL_HCD_MspInit+0xda>
      __HAL_RCC_PWR_CLK_ENABLE();
 80085a4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80085a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085aa:	65a3      	str	r3, [r4, #88]	; 0x58
 80085ac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80085ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085b2:	9303      	str	r3, [sp, #12]
 80085b4:	9b03      	ldr	r3, [sp, #12]
      HAL_PWREx_EnableVddUSB();
 80085b6:	f7fb f9e1 	bl	800397c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80085ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80085bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80085c0:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80085c2:	2200      	movs	r2, #0
 80085c4:	4611      	mov	r1, r2
 80085c6:	2043      	movs	r0, #67	; 0x43
 80085c8:	f7f9 fa5c 	bl	8001a84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80085cc:	2043      	movs	r0, #67	; 0x43
 80085ce:	f7f9 fa91 	bl	8001af4 <HAL_NVIC_EnableIRQ>
}
 80085d2:	e7a6      	b.n	8008522 <HAL_HCD_MspInit+0x22>
      Error_Handler();
 80085d4:	f7f8 f9fe 	bl	80009d4 <Error_Handler>
 80085d8:	e7bd      	b.n	8008556 <HAL_HCD_MspInit+0x56>
      HAL_PWREx_EnableVddUSB();
 80085da:	f7fb f9cf 	bl	800397c <HAL_PWREx_EnableVddUSB>
 80085de:	e7f0      	b.n	80085c2 <HAL_HCD_MspInit+0xc2>
 80085e0:	40021000 	.word	0x40021000

080085e4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80085e4:	b508      	push	{r3, lr}
  USBH_LL_IncTimer(hhcd->pData);
 80085e6:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 80085ea:	f7ff fa79 	bl	8007ae0 <USBH_LL_IncTimer>
}
 80085ee:	bd08      	pop	{r3, pc}

080085f0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80085f0:	b508      	push	{r3, lr}
  USBH_LL_Connect(hhcd->pData);
 80085f2:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 80085f6:	f7ff fa84 	bl	8007b02 <USBH_LL_Connect>
}
 80085fa:	bd08      	pop	{r3, pc}

080085fc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80085fc:	b508      	push	{r3, lr}
  USBH_LL_Disconnect(hhcd->pData);
 80085fe:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 8008602:	f7ff fa88 	bl	8007b16 <USBH_LL_Disconnect>
}
 8008606:	bd08      	pop	{r3, pc}

08008608 <HAL_HCD_HC_NotifyURBChange_Callback>:
{
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008608:	4770      	bx	lr

0800860a <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800860a:	b508      	push	{r3, lr}
  USBH_LL_PortEnabled(hhcd->pData);
 800860c:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 8008610:	f7ff fa6f 	bl	8007af2 <USBH_LL_PortEnabled>
}
 8008614:	bd08      	pop	{r3, pc}

08008616 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008616:	b508      	push	{r3, lr}
  USBH_LL_PortDisabled(hhcd->pData);
 8008618:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 800861c:	f7ff fa6d 	bl	8007afa <USBH_LL_PortDisabled>
}
 8008620:	bd08      	pop	{r3, pc}
	...

08008624 <USBH_LL_Init>:
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008624:	f890 33cc 	ldrb.w	r3, [r0, #972]	; 0x3cc
 8008628:	2b01      	cmp	r3, #1
 800862a:	d001      	beq.n	8008630 <USBH_LL_Init+0xc>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
  }
  return USBH_OK;
}
 800862c:	2000      	movs	r0, #0
 800862e:	4770      	bx	lr
{
 8008630:	b510      	push	{r4, lr}
 8008632:	4604      	mov	r4, r0
  hhcd_USB_OTG_FS.pData = phost;
 8008634:	4810      	ldr	r0, [pc, #64]	; (8008678 <USBH_LL_Init+0x54>)
 8008636:	f8c0 4300 	str.w	r4, [r0, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800863a:	f8c4 03d0 	str.w	r0, [r4, #976]	; 0x3d0
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800863e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8008642:	6003      	str	r3, [r0, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 8008644:	230c      	movs	r3, #12
 8008646:	6083      	str	r3, [r0, #8]
  hhcd_USB_OTG_FS.Init.speed = USB_OTG_SPEED_FULL;
 8008648:	2303      	movs	r3, #3
 800864a:	60c3      	str	r3, [r0, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800864c:	2300      	movs	r3, #0
 800864e:	6103      	str	r3, [r0, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008650:	2202      	movs	r2, #2
 8008652:	6182      	str	r2, [r0, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008654:	61c3      	str	r3, [r0, #28]
  hhcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008656:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008658:	f7f9 fe06 	bl	8002268 <HAL_HCD_Init>
 800865c:	b940      	cbnz	r0, 8008670 <USBH_LL_Init+0x4c>
  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800865e:	4806      	ldr	r0, [pc, #24]	; (8008678 <USBH_LL_Init+0x54>)
 8008660:	f7fa fabd 	bl	8002bde <HAL_HCD_GetCurrentFrame>
 8008664:	4601      	mov	r1, r0
 8008666:	4620      	mov	r0, r4
 8008668:	f7ff fa37 	bl	8007ada <USBH_LL_SetTimer>
}
 800866c:	2000      	movs	r0, #0
 800866e:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8008670:	f7f8 f9b0 	bl	80009d4 <Error_Handler>
 8008674:	e7f3      	b.n	800865e <USBH_LL_Init+0x3a>
 8008676:	bf00      	nop
 8008678:	20001c30 	.word	0x20001c30

0800867c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800867c:	b508      	push	{r3, lr}
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800867e:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 8008682:	f7fa fab1 	bl	8002be8 <HAL_HCD_GetCurrentSpeed>
 8008686:	2801      	cmp	r0, #1
 8008688:	d004      	beq.n	8008694 <USBH_LL_GetSpeed+0x18>
 800868a:	2802      	cmp	r0, #2
 800868c:	d004      	beq.n	8008698 <USBH_LL_GetSpeed+0x1c>
 800868e:	b100      	cbz	r0, 8008692 <USBH_LL_GetSpeed+0x16>
  case 2 :
    speed = USBH_SPEED_LOW;
    break;

  default:
   speed = USBH_SPEED_FULL;
 8008690:	2001      	movs	r0, #1
    break;
  }
  return  speed;
}
 8008692:	bd08      	pop	{r3, pc}
    speed = USBH_SPEED_FULL;
 8008694:	2001      	movs	r0, #1
 8008696:	e7fc      	b.n	8008692 <USBH_LL_GetSpeed+0x16>
    speed = USBH_SPEED_LOW;
 8008698:	2002      	movs	r0, #2
 800869a:	e7fa      	b.n	8008692 <USBH_LL_GetSpeed+0x16>

0800869c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800869c:	b508      	push	{r3, lr}
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800869e:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 80086a2:	f7fa fa97 	bl	8002bd4 <HAL_HCD_HC_GetXferCount>
}
 80086a6:	bd08      	pop	{r3, pc}

080086a8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80086a8:	b508      	push	{r3, lr}
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80086aa:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 80086ae:	f7fa fa8b 	bl	8002bc8 <HAL_HCD_HC_GetURBState>
}
 80086b2:	bd08      	pop	{r3, pc}

080086b4 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80086b4:	b508      	push	{r3, lr}
  if (phost->id == HOST_FS) {
 80086b6:	f890 33cc 	ldrb.w	r3, [r0, #972]	; 0x3cc
 80086ba:	2b01      	cmp	r3, #1
 80086bc:	d004      	beq.n	80086c8 <USBH_LL_DriverVBUS+0x14>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80086be:	20c8      	movs	r0, #200	; 0xc8
 80086c0:	f7f9 f9ba 	bl	8001a38 <HAL_Delay>
  return USBH_OK;
}
 80086c4:	2000      	movs	r0, #0
 80086c6:	bd08      	pop	{r3, pc}
    MX_DriverVbusFS(state);
 80086c8:	4608      	mov	r0, r1
 80086ca:	f000 f881 	bl	80087d0 <MX_DriverVbusFS>
 80086ce:	e7f6      	b.n	80086be <USBH_LL_DriverVBUS+0xa>

080086d0 <USBH_LL_SetToggle>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80086d0:	f8d0 33d0 	ldr.w	r3, [r0, #976]	; 0x3d0

  if(pHandle->hc[pipe].ep_is_in)
 80086d4:	202c      	movs	r0, #44	; 0x2c
 80086d6:	fb00 3001 	mla	r0, r0, r1, r3
 80086da:	f890 003b 	ldrb.w	r0, [r0, #59]	; 0x3b
 80086de:	b130      	cbz	r0, 80086ee <USBH_LL_SetToggle+0x1e>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80086e0:	202c      	movs	r0, #44	; 0x2c
 80086e2:	fb00 3101 	mla	r1, r0, r1, r3
 80086e6:	f881 2054 	strb.w	r2, [r1, #84]	; 0x54
  {
    pHandle->hc[pipe].toggle_out = toggle;
  }

  return USBH_OK;
}
 80086ea:	2000      	movs	r0, #0
 80086ec:	4770      	bx	lr
    pHandle->hc[pipe].toggle_out = toggle;
 80086ee:	202c      	movs	r0, #44	; 0x2c
 80086f0:	fb00 3101 	mla	r1, r0, r1, r3
 80086f4:	f881 2055 	strb.w	r2, [r1, #85]	; 0x55
 80086f8:	e7f7      	b.n	80086ea <USBH_LL_SetToggle+0x1a>

080086fa <USBH_LL_GetToggle>:
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  uint8_t toggle = 0;
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80086fa:	f8d0 33d0 	ldr.w	r3, [r0, #976]	; 0x3d0

  if(pHandle->hc[pipe].ep_is_in)
 80086fe:	222c      	movs	r2, #44	; 0x2c
 8008700:	fb02 3201 	mla	r2, r2, r1, r3
 8008704:	f892 203b 	ldrb.w	r2, [r2, #59]	; 0x3b
 8008708:	b12a      	cbz	r2, 8008716 <USBH_LL_GetToggle+0x1c>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800870a:	222c      	movs	r2, #44	; 0x2c
 800870c:	fb02 3101 	mla	r1, r2, r1, r3
 8008710:	f891 0054 	ldrb.w	r0, [r1, #84]	; 0x54
 8008714:	4770      	bx	lr
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 8008716:	222c      	movs	r2, #44	; 0x2c
 8008718:	fb02 3101 	mla	r1, r2, r1, r3
 800871c:	f891 0055 	ldrb.w	r0, [r1, #85]	; 0x55
  }
  return toggle;
}
 8008720:	4770      	bx	lr

08008722 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008722:	b508      	push	{r3, lr}
  HAL_Delay(Delay);
 8008724:	f7f9 f988 	bl	8001a38 <HAL_Delay>
}
 8008728:	bd08      	pop	{r3, pc}

0800872a <USBH_Get_USB_Status>:
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBH_StatusTypeDef usb_status = USBH_OK;

  switch (hal_status)
 800872a:	2802      	cmp	r0, #2
 800872c:	d805      	bhi.n	800873a <USBH_Get_USB_Status+0x10>
 800872e:	e8df f000 	tbb	[pc, r0]
 8008732:	0405      	.short	0x0405
 8008734:	02          	.byte	0x02
 8008735:	00          	.byte	0x00
    break;
    case HAL_ERROR :
      usb_status = USBH_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008736:	2001      	movs	r0, #1
    break;
 8008738:	4770      	bx	lr
      usb_status = USBH_FAIL;
 800873a:	2002      	movs	r0, #2
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 800873c:	4770      	bx	lr

0800873e <USBH_LL_Start>:
{
 800873e:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_Start(phost->pData);
 8008740:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 8008744:	f7fa fa14 	bl	8002b70 <HAL_HCD_Start>
  usb_status = USBH_Get_USB_Status(hal_status);
 8008748:	f7ff ffef 	bl	800872a <USBH_Get_USB_Status>
}
 800874c:	bd08      	pop	{r3, pc}

0800874e <USBH_LL_Stop>:
{
 800874e:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_Stop(phost->pData);
 8008750:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 8008754:	f7fa fa21 	bl	8002b9a <HAL_HCD_Stop>
  usb_status = USBH_Get_USB_Status(hal_status);
 8008758:	f7ff ffe7 	bl	800872a <USBH_Get_USB_Status>
}
 800875c:	bd08      	pop	{r3, pc}

0800875e <USBH_LL_ResetPort>:
{
 800875e:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008760:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 8008764:	f7fa fa2b 	bl	8002bbe <HAL_HCD_ResetPort>
  usb_status = USBH_Get_USB_Status(hal_status);
 8008768:	f7ff ffdf 	bl	800872a <USBH_Get_USB_Status>
}
 800876c:	bd08      	pop	{r3, pc}

0800876e <USBH_LL_OpenPipe>:
{
 800876e:	b510      	push	{r4, lr}
 8008770:	b084      	sub	sp, #16
  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008772:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 8008776:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 800877a:	9402      	str	r4, [sp, #8]
 800877c:	f89d 401c 	ldrb.w	r4, [sp, #28]
 8008780:	9401      	str	r4, [sp, #4]
 8008782:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8008786:	9400      	str	r4, [sp, #0]
 8008788:	f7f9 fd15 	bl	80021b6 <HAL_HCD_HC_Init>
  usb_status = USBH_Get_USB_Status(hal_status);
 800878c:	f7ff ffcd 	bl	800872a <USBH_Get_USB_Status>
}
 8008790:	b004      	add	sp, #16
 8008792:	bd10      	pop	{r4, pc}

08008794 <USBH_LL_ClosePipe>:
{
 8008794:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008796:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 800879a:	f7f9 fd53 	bl	8002244 <HAL_HCD_HC_Halt>
  usb_status = USBH_Get_USB_Status(hal_status);
 800879e:	f7ff ffc4 	bl	800872a <USBH_Get_USB_Status>
}
 80087a2:	bd08      	pop	{r3, pc}

080087a4 <USBH_LL_SubmitURB>:
{
 80087a4:	b510      	push	{r4, lr}
 80087a6:	b084      	sub	sp, #16
  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80087a8:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 80087ac:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 80087b0:	9403      	str	r4, [sp, #12]
 80087b2:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 80087b6:	9402      	str	r4, [sp, #8]
 80087b8:	9c07      	ldr	r4, [sp, #28]
 80087ba:	9401      	str	r4, [sp, #4]
 80087bc:	f89d 4018 	ldrb.w	r4, [sp, #24]
 80087c0:	9400      	str	r4, [sp, #0]
 80087c2:	f7f9 fda3 	bl	800230c <HAL_HCD_HC_SubmitRequest>
  usb_status = USBH_Get_USB_Status(hal_status);
 80087c6:	f7ff ffb0 	bl	800872a <USBH_Get_USB_Status>
}
 80087ca:	b004      	add	sp, #16
 80087cc:	bd10      	pop	{r4, pc}
	...

080087d0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80087d0:	b508      	push	{r3, lr}
  uint8_t data = state;
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80087d2:	4602      	mov	r2, r0
 80087d4:	b100      	cbz	r0, 80087d8 <MX_DriverVbusFS+0x8>
    data = GPIO_PIN_RESET;
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80087d6:	2201      	movs	r2, #1
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_9,(GPIO_PinState)data);
 80087d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80087dc:	4801      	ldr	r0, [pc, #4]	; (80087e4 <MX_DriverVbusFS+0x14>)
 80087de:	f7f9 fc8d 	bl	80020fc <HAL_GPIO_WritePin>
}
 80087e2:	bd08      	pop	{r3, pc}
 80087e4:	48001000 	.word	0x48001000

080087e8 <malloc>:
 80087e8:	4b02      	ldr	r3, [pc, #8]	; (80087f4 <malloc+0xc>)
 80087ea:	4601      	mov	r1, r0
 80087ec:	6818      	ldr	r0, [r3, #0]
 80087ee:	f000 b82b 	b.w	8008848 <_malloc_r>
 80087f2:	bf00      	nop
 80087f4:	20000088 	.word	0x20000088

080087f8 <free>:
 80087f8:	4b02      	ldr	r3, [pc, #8]	; (8008804 <free+0xc>)
 80087fa:	4601      	mov	r1, r0
 80087fc:	6818      	ldr	r0, [r3, #0]
 80087fe:	f000 bc1f 	b.w	8009040 <_free_r>
 8008802:	bf00      	nop
 8008804:	20000088 	.word	0x20000088

08008808 <sbrk_aligned>:
 8008808:	b570      	push	{r4, r5, r6, lr}
 800880a:	4e0e      	ldr	r6, [pc, #56]	; (8008844 <sbrk_aligned+0x3c>)
 800880c:	460c      	mov	r4, r1
 800880e:	6831      	ldr	r1, [r6, #0]
 8008810:	4605      	mov	r5, r0
 8008812:	b911      	cbnz	r1, 800881a <sbrk_aligned+0x12>
 8008814:	f000 fbc4 	bl	8008fa0 <_sbrk_r>
 8008818:	6030      	str	r0, [r6, #0]
 800881a:	4621      	mov	r1, r4
 800881c:	4628      	mov	r0, r5
 800881e:	f000 fbbf 	bl	8008fa0 <_sbrk_r>
 8008822:	1c43      	adds	r3, r0, #1
 8008824:	d00a      	beq.n	800883c <sbrk_aligned+0x34>
 8008826:	1cc4      	adds	r4, r0, #3
 8008828:	f024 0403 	bic.w	r4, r4, #3
 800882c:	42a0      	cmp	r0, r4
 800882e:	d007      	beq.n	8008840 <sbrk_aligned+0x38>
 8008830:	1a21      	subs	r1, r4, r0
 8008832:	4628      	mov	r0, r5
 8008834:	f000 fbb4 	bl	8008fa0 <_sbrk_r>
 8008838:	3001      	adds	r0, #1
 800883a:	d101      	bne.n	8008840 <sbrk_aligned+0x38>
 800883c:	f04f 34ff 	mov.w	r4, #4294967295
 8008840:	4620      	mov	r0, r4
 8008842:	bd70      	pop	{r4, r5, r6, pc}
 8008844:	20001f38 	.word	0x20001f38

08008848 <_malloc_r>:
 8008848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800884c:	1ccd      	adds	r5, r1, #3
 800884e:	f025 0503 	bic.w	r5, r5, #3
 8008852:	3508      	adds	r5, #8
 8008854:	2d0c      	cmp	r5, #12
 8008856:	bf38      	it	cc
 8008858:	250c      	movcc	r5, #12
 800885a:	2d00      	cmp	r5, #0
 800885c:	4607      	mov	r7, r0
 800885e:	db01      	blt.n	8008864 <_malloc_r+0x1c>
 8008860:	42a9      	cmp	r1, r5
 8008862:	d905      	bls.n	8008870 <_malloc_r+0x28>
 8008864:	230c      	movs	r3, #12
 8008866:	603b      	str	r3, [r7, #0]
 8008868:	2600      	movs	r6, #0
 800886a:	4630      	mov	r0, r6
 800886c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008870:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008944 <_malloc_r+0xfc>
 8008874:	f000 f868 	bl	8008948 <__malloc_lock>
 8008878:	f8d8 3000 	ldr.w	r3, [r8]
 800887c:	461c      	mov	r4, r3
 800887e:	bb5c      	cbnz	r4, 80088d8 <_malloc_r+0x90>
 8008880:	4629      	mov	r1, r5
 8008882:	4638      	mov	r0, r7
 8008884:	f7ff ffc0 	bl	8008808 <sbrk_aligned>
 8008888:	1c43      	adds	r3, r0, #1
 800888a:	4604      	mov	r4, r0
 800888c:	d155      	bne.n	800893a <_malloc_r+0xf2>
 800888e:	f8d8 4000 	ldr.w	r4, [r8]
 8008892:	4626      	mov	r6, r4
 8008894:	2e00      	cmp	r6, #0
 8008896:	d145      	bne.n	8008924 <_malloc_r+0xdc>
 8008898:	2c00      	cmp	r4, #0
 800889a:	d048      	beq.n	800892e <_malloc_r+0xe6>
 800889c:	6823      	ldr	r3, [r4, #0]
 800889e:	4631      	mov	r1, r6
 80088a0:	4638      	mov	r0, r7
 80088a2:	eb04 0903 	add.w	r9, r4, r3
 80088a6:	f000 fb7b 	bl	8008fa0 <_sbrk_r>
 80088aa:	4581      	cmp	r9, r0
 80088ac:	d13f      	bne.n	800892e <_malloc_r+0xe6>
 80088ae:	6821      	ldr	r1, [r4, #0]
 80088b0:	1a6d      	subs	r5, r5, r1
 80088b2:	4629      	mov	r1, r5
 80088b4:	4638      	mov	r0, r7
 80088b6:	f7ff ffa7 	bl	8008808 <sbrk_aligned>
 80088ba:	3001      	adds	r0, #1
 80088bc:	d037      	beq.n	800892e <_malloc_r+0xe6>
 80088be:	6823      	ldr	r3, [r4, #0]
 80088c0:	442b      	add	r3, r5
 80088c2:	6023      	str	r3, [r4, #0]
 80088c4:	f8d8 3000 	ldr.w	r3, [r8]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d038      	beq.n	800893e <_malloc_r+0xf6>
 80088cc:	685a      	ldr	r2, [r3, #4]
 80088ce:	42a2      	cmp	r2, r4
 80088d0:	d12b      	bne.n	800892a <_malloc_r+0xe2>
 80088d2:	2200      	movs	r2, #0
 80088d4:	605a      	str	r2, [r3, #4]
 80088d6:	e00f      	b.n	80088f8 <_malloc_r+0xb0>
 80088d8:	6822      	ldr	r2, [r4, #0]
 80088da:	1b52      	subs	r2, r2, r5
 80088dc:	d41f      	bmi.n	800891e <_malloc_r+0xd6>
 80088de:	2a0b      	cmp	r2, #11
 80088e0:	d917      	bls.n	8008912 <_malloc_r+0xca>
 80088e2:	1961      	adds	r1, r4, r5
 80088e4:	42a3      	cmp	r3, r4
 80088e6:	6025      	str	r5, [r4, #0]
 80088e8:	bf18      	it	ne
 80088ea:	6059      	strne	r1, [r3, #4]
 80088ec:	6863      	ldr	r3, [r4, #4]
 80088ee:	bf08      	it	eq
 80088f0:	f8c8 1000 	streq.w	r1, [r8]
 80088f4:	5162      	str	r2, [r4, r5]
 80088f6:	604b      	str	r3, [r1, #4]
 80088f8:	4638      	mov	r0, r7
 80088fa:	f104 060b 	add.w	r6, r4, #11
 80088fe:	f000 f829 	bl	8008954 <__malloc_unlock>
 8008902:	f026 0607 	bic.w	r6, r6, #7
 8008906:	1d23      	adds	r3, r4, #4
 8008908:	1af2      	subs	r2, r6, r3
 800890a:	d0ae      	beq.n	800886a <_malloc_r+0x22>
 800890c:	1b9b      	subs	r3, r3, r6
 800890e:	50a3      	str	r3, [r4, r2]
 8008910:	e7ab      	b.n	800886a <_malloc_r+0x22>
 8008912:	42a3      	cmp	r3, r4
 8008914:	6862      	ldr	r2, [r4, #4]
 8008916:	d1dd      	bne.n	80088d4 <_malloc_r+0x8c>
 8008918:	f8c8 2000 	str.w	r2, [r8]
 800891c:	e7ec      	b.n	80088f8 <_malloc_r+0xb0>
 800891e:	4623      	mov	r3, r4
 8008920:	6864      	ldr	r4, [r4, #4]
 8008922:	e7ac      	b.n	800887e <_malloc_r+0x36>
 8008924:	4634      	mov	r4, r6
 8008926:	6876      	ldr	r6, [r6, #4]
 8008928:	e7b4      	b.n	8008894 <_malloc_r+0x4c>
 800892a:	4613      	mov	r3, r2
 800892c:	e7cc      	b.n	80088c8 <_malloc_r+0x80>
 800892e:	230c      	movs	r3, #12
 8008930:	603b      	str	r3, [r7, #0]
 8008932:	4638      	mov	r0, r7
 8008934:	f000 f80e 	bl	8008954 <__malloc_unlock>
 8008938:	e797      	b.n	800886a <_malloc_r+0x22>
 800893a:	6025      	str	r5, [r4, #0]
 800893c:	e7dc      	b.n	80088f8 <_malloc_r+0xb0>
 800893e:	605b      	str	r3, [r3, #4]
 8008940:	deff      	udf	#255	; 0xff
 8008942:	bf00      	nop
 8008944:	20001f34 	.word	0x20001f34

08008948 <__malloc_lock>:
 8008948:	4801      	ldr	r0, [pc, #4]	; (8008950 <__malloc_lock+0x8>)
 800894a:	f000 bb76 	b.w	800903a <__retarget_lock_acquire_recursive>
 800894e:	bf00      	nop
 8008950:	2000207c 	.word	0x2000207c

08008954 <__malloc_unlock>:
 8008954:	4801      	ldr	r0, [pc, #4]	; (800895c <__malloc_unlock+0x8>)
 8008956:	f000 bb71 	b.w	800903c <__retarget_lock_release_recursive>
 800895a:	bf00      	nop
 800895c:	2000207c 	.word	0x2000207c

08008960 <malloc_usable_size>:
 8008960:	4b02      	ldr	r3, [pc, #8]	; (800896c <malloc_usable_size+0xc>)
 8008962:	4601      	mov	r1, r0
 8008964:	6818      	ldr	r0, [r3, #0]
 8008966:	f000 bbb7 	b.w	80090d8 <_malloc_usable_size_r>
 800896a:	bf00      	nop
 800896c:	20000088 	.word	0x20000088

08008970 <__sflush_r>:
 8008970:	898a      	ldrh	r2, [r1, #12]
 8008972:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008976:	4605      	mov	r5, r0
 8008978:	0710      	lsls	r0, r2, #28
 800897a:	460c      	mov	r4, r1
 800897c:	d458      	bmi.n	8008a30 <__sflush_r+0xc0>
 800897e:	684b      	ldr	r3, [r1, #4]
 8008980:	2b00      	cmp	r3, #0
 8008982:	dc05      	bgt.n	8008990 <__sflush_r+0x20>
 8008984:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008986:	2b00      	cmp	r3, #0
 8008988:	dc02      	bgt.n	8008990 <__sflush_r+0x20>
 800898a:	2000      	movs	r0, #0
 800898c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008990:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008992:	2e00      	cmp	r6, #0
 8008994:	d0f9      	beq.n	800898a <__sflush_r+0x1a>
 8008996:	2300      	movs	r3, #0
 8008998:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800899c:	682f      	ldr	r7, [r5, #0]
 800899e:	6a21      	ldr	r1, [r4, #32]
 80089a0:	602b      	str	r3, [r5, #0]
 80089a2:	d032      	beq.n	8008a0a <__sflush_r+0x9a>
 80089a4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80089a6:	89a3      	ldrh	r3, [r4, #12]
 80089a8:	075a      	lsls	r2, r3, #29
 80089aa:	d505      	bpl.n	80089b8 <__sflush_r+0x48>
 80089ac:	6863      	ldr	r3, [r4, #4]
 80089ae:	1ac0      	subs	r0, r0, r3
 80089b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80089b2:	b10b      	cbz	r3, 80089b8 <__sflush_r+0x48>
 80089b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80089b6:	1ac0      	subs	r0, r0, r3
 80089b8:	2300      	movs	r3, #0
 80089ba:	4602      	mov	r2, r0
 80089bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80089be:	6a21      	ldr	r1, [r4, #32]
 80089c0:	4628      	mov	r0, r5
 80089c2:	47b0      	blx	r6
 80089c4:	1c43      	adds	r3, r0, #1
 80089c6:	89a3      	ldrh	r3, [r4, #12]
 80089c8:	d106      	bne.n	80089d8 <__sflush_r+0x68>
 80089ca:	6829      	ldr	r1, [r5, #0]
 80089cc:	291d      	cmp	r1, #29
 80089ce:	d82b      	bhi.n	8008a28 <__sflush_r+0xb8>
 80089d0:	4a29      	ldr	r2, [pc, #164]	; (8008a78 <__sflush_r+0x108>)
 80089d2:	410a      	asrs	r2, r1
 80089d4:	07d6      	lsls	r6, r2, #31
 80089d6:	d427      	bmi.n	8008a28 <__sflush_r+0xb8>
 80089d8:	2200      	movs	r2, #0
 80089da:	6062      	str	r2, [r4, #4]
 80089dc:	04d9      	lsls	r1, r3, #19
 80089de:	6922      	ldr	r2, [r4, #16]
 80089e0:	6022      	str	r2, [r4, #0]
 80089e2:	d504      	bpl.n	80089ee <__sflush_r+0x7e>
 80089e4:	1c42      	adds	r2, r0, #1
 80089e6:	d101      	bne.n	80089ec <__sflush_r+0x7c>
 80089e8:	682b      	ldr	r3, [r5, #0]
 80089ea:	b903      	cbnz	r3, 80089ee <__sflush_r+0x7e>
 80089ec:	6560      	str	r0, [r4, #84]	; 0x54
 80089ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80089f0:	602f      	str	r7, [r5, #0]
 80089f2:	2900      	cmp	r1, #0
 80089f4:	d0c9      	beq.n	800898a <__sflush_r+0x1a>
 80089f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80089fa:	4299      	cmp	r1, r3
 80089fc:	d002      	beq.n	8008a04 <__sflush_r+0x94>
 80089fe:	4628      	mov	r0, r5
 8008a00:	f000 fb1e 	bl	8009040 <_free_r>
 8008a04:	2000      	movs	r0, #0
 8008a06:	6360      	str	r0, [r4, #52]	; 0x34
 8008a08:	e7c0      	b.n	800898c <__sflush_r+0x1c>
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	4628      	mov	r0, r5
 8008a0e:	47b0      	blx	r6
 8008a10:	1c41      	adds	r1, r0, #1
 8008a12:	d1c8      	bne.n	80089a6 <__sflush_r+0x36>
 8008a14:	682b      	ldr	r3, [r5, #0]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d0c5      	beq.n	80089a6 <__sflush_r+0x36>
 8008a1a:	2b1d      	cmp	r3, #29
 8008a1c:	d001      	beq.n	8008a22 <__sflush_r+0xb2>
 8008a1e:	2b16      	cmp	r3, #22
 8008a20:	d101      	bne.n	8008a26 <__sflush_r+0xb6>
 8008a22:	602f      	str	r7, [r5, #0]
 8008a24:	e7b1      	b.n	800898a <__sflush_r+0x1a>
 8008a26:	89a3      	ldrh	r3, [r4, #12]
 8008a28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a2c:	81a3      	strh	r3, [r4, #12]
 8008a2e:	e7ad      	b.n	800898c <__sflush_r+0x1c>
 8008a30:	690f      	ldr	r7, [r1, #16]
 8008a32:	2f00      	cmp	r7, #0
 8008a34:	d0a9      	beq.n	800898a <__sflush_r+0x1a>
 8008a36:	0793      	lsls	r3, r2, #30
 8008a38:	680e      	ldr	r6, [r1, #0]
 8008a3a:	bf08      	it	eq
 8008a3c:	694b      	ldreq	r3, [r1, #20]
 8008a3e:	600f      	str	r7, [r1, #0]
 8008a40:	bf18      	it	ne
 8008a42:	2300      	movne	r3, #0
 8008a44:	eba6 0807 	sub.w	r8, r6, r7
 8008a48:	608b      	str	r3, [r1, #8]
 8008a4a:	f1b8 0f00 	cmp.w	r8, #0
 8008a4e:	dd9c      	ble.n	800898a <__sflush_r+0x1a>
 8008a50:	6a21      	ldr	r1, [r4, #32]
 8008a52:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008a54:	4643      	mov	r3, r8
 8008a56:	463a      	mov	r2, r7
 8008a58:	4628      	mov	r0, r5
 8008a5a:	47b0      	blx	r6
 8008a5c:	2800      	cmp	r0, #0
 8008a5e:	dc06      	bgt.n	8008a6e <__sflush_r+0xfe>
 8008a60:	89a3      	ldrh	r3, [r4, #12]
 8008a62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a66:	81a3      	strh	r3, [r4, #12]
 8008a68:	f04f 30ff 	mov.w	r0, #4294967295
 8008a6c:	e78e      	b.n	800898c <__sflush_r+0x1c>
 8008a6e:	4407      	add	r7, r0
 8008a70:	eba8 0800 	sub.w	r8, r8, r0
 8008a74:	e7e9      	b.n	8008a4a <__sflush_r+0xda>
 8008a76:	bf00      	nop
 8008a78:	dfbffffe 	.word	0xdfbffffe

08008a7c <_fflush_r>:
 8008a7c:	b538      	push	{r3, r4, r5, lr}
 8008a7e:	690b      	ldr	r3, [r1, #16]
 8008a80:	4605      	mov	r5, r0
 8008a82:	460c      	mov	r4, r1
 8008a84:	b913      	cbnz	r3, 8008a8c <_fflush_r+0x10>
 8008a86:	2500      	movs	r5, #0
 8008a88:	4628      	mov	r0, r5
 8008a8a:	bd38      	pop	{r3, r4, r5, pc}
 8008a8c:	b118      	cbz	r0, 8008a96 <_fflush_r+0x1a>
 8008a8e:	6a03      	ldr	r3, [r0, #32]
 8008a90:	b90b      	cbnz	r3, 8008a96 <_fflush_r+0x1a>
 8008a92:	f000 f8a7 	bl	8008be4 <__sinit>
 8008a96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d0f3      	beq.n	8008a86 <_fflush_r+0xa>
 8008a9e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008aa0:	07d0      	lsls	r0, r2, #31
 8008aa2:	d404      	bmi.n	8008aae <_fflush_r+0x32>
 8008aa4:	0599      	lsls	r1, r3, #22
 8008aa6:	d402      	bmi.n	8008aae <_fflush_r+0x32>
 8008aa8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008aaa:	f000 fac6 	bl	800903a <__retarget_lock_acquire_recursive>
 8008aae:	4628      	mov	r0, r5
 8008ab0:	4621      	mov	r1, r4
 8008ab2:	f7ff ff5d 	bl	8008970 <__sflush_r>
 8008ab6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ab8:	07da      	lsls	r2, r3, #31
 8008aba:	4605      	mov	r5, r0
 8008abc:	d4e4      	bmi.n	8008a88 <_fflush_r+0xc>
 8008abe:	89a3      	ldrh	r3, [r4, #12]
 8008ac0:	059b      	lsls	r3, r3, #22
 8008ac2:	d4e1      	bmi.n	8008a88 <_fflush_r+0xc>
 8008ac4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ac6:	f000 fab9 	bl	800903c <__retarget_lock_release_recursive>
 8008aca:	e7dd      	b.n	8008a88 <_fflush_r+0xc>

08008acc <std>:
 8008acc:	2300      	movs	r3, #0
 8008ace:	b510      	push	{r4, lr}
 8008ad0:	4604      	mov	r4, r0
 8008ad2:	e9c0 3300 	strd	r3, r3, [r0]
 8008ad6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008ada:	6083      	str	r3, [r0, #8]
 8008adc:	8181      	strh	r1, [r0, #12]
 8008ade:	6643      	str	r3, [r0, #100]	; 0x64
 8008ae0:	81c2      	strh	r2, [r0, #14]
 8008ae2:	6183      	str	r3, [r0, #24]
 8008ae4:	4619      	mov	r1, r3
 8008ae6:	2208      	movs	r2, #8
 8008ae8:	305c      	adds	r0, #92	; 0x5c
 8008aea:	f000 f9f7 	bl	8008edc <memset>
 8008aee:	4b0d      	ldr	r3, [pc, #52]	; (8008b24 <std+0x58>)
 8008af0:	6263      	str	r3, [r4, #36]	; 0x24
 8008af2:	4b0d      	ldr	r3, [pc, #52]	; (8008b28 <std+0x5c>)
 8008af4:	62a3      	str	r3, [r4, #40]	; 0x28
 8008af6:	4b0d      	ldr	r3, [pc, #52]	; (8008b2c <std+0x60>)
 8008af8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008afa:	4b0d      	ldr	r3, [pc, #52]	; (8008b30 <std+0x64>)
 8008afc:	6323      	str	r3, [r4, #48]	; 0x30
 8008afe:	4b0d      	ldr	r3, [pc, #52]	; (8008b34 <std+0x68>)
 8008b00:	6224      	str	r4, [r4, #32]
 8008b02:	429c      	cmp	r4, r3
 8008b04:	d006      	beq.n	8008b14 <std+0x48>
 8008b06:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008b0a:	4294      	cmp	r4, r2
 8008b0c:	d002      	beq.n	8008b14 <std+0x48>
 8008b0e:	33d0      	adds	r3, #208	; 0xd0
 8008b10:	429c      	cmp	r4, r3
 8008b12:	d105      	bne.n	8008b20 <std+0x54>
 8008b14:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008b18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b1c:	f000 ba8c 	b.w	8009038 <__retarget_lock_init_recursive>
 8008b20:	bd10      	pop	{r4, pc}
 8008b22:	bf00      	nop
 8008b24:	08008d2d 	.word	0x08008d2d
 8008b28:	08008d4f 	.word	0x08008d4f
 8008b2c:	08008d87 	.word	0x08008d87
 8008b30:	08008dab 	.word	0x08008dab
 8008b34:	20001f3c 	.word	0x20001f3c

08008b38 <stdio_exit_handler>:
 8008b38:	4a02      	ldr	r2, [pc, #8]	; (8008b44 <stdio_exit_handler+0xc>)
 8008b3a:	4903      	ldr	r1, [pc, #12]	; (8008b48 <stdio_exit_handler+0x10>)
 8008b3c:	4803      	ldr	r0, [pc, #12]	; (8008b4c <stdio_exit_handler+0x14>)
 8008b3e:	f000 b869 	b.w	8008c14 <_fwalk_sglue>
 8008b42:	bf00      	nop
 8008b44:	20000030 	.word	0x20000030
 8008b48:	08008a7d 	.word	0x08008a7d
 8008b4c:	2000003c 	.word	0x2000003c

08008b50 <cleanup_stdio>:
 8008b50:	6841      	ldr	r1, [r0, #4]
 8008b52:	4b0c      	ldr	r3, [pc, #48]	; (8008b84 <cleanup_stdio+0x34>)
 8008b54:	4299      	cmp	r1, r3
 8008b56:	b510      	push	{r4, lr}
 8008b58:	4604      	mov	r4, r0
 8008b5a:	d001      	beq.n	8008b60 <cleanup_stdio+0x10>
 8008b5c:	f7ff ff8e 	bl	8008a7c <_fflush_r>
 8008b60:	68a1      	ldr	r1, [r4, #8]
 8008b62:	4b09      	ldr	r3, [pc, #36]	; (8008b88 <cleanup_stdio+0x38>)
 8008b64:	4299      	cmp	r1, r3
 8008b66:	d002      	beq.n	8008b6e <cleanup_stdio+0x1e>
 8008b68:	4620      	mov	r0, r4
 8008b6a:	f7ff ff87 	bl	8008a7c <_fflush_r>
 8008b6e:	68e1      	ldr	r1, [r4, #12]
 8008b70:	4b06      	ldr	r3, [pc, #24]	; (8008b8c <cleanup_stdio+0x3c>)
 8008b72:	4299      	cmp	r1, r3
 8008b74:	d004      	beq.n	8008b80 <cleanup_stdio+0x30>
 8008b76:	4620      	mov	r0, r4
 8008b78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b7c:	f7ff bf7e 	b.w	8008a7c <_fflush_r>
 8008b80:	bd10      	pop	{r4, pc}
 8008b82:	bf00      	nop
 8008b84:	20001f3c 	.word	0x20001f3c
 8008b88:	20001fa4 	.word	0x20001fa4
 8008b8c:	2000200c 	.word	0x2000200c

08008b90 <global_stdio_init.part.0>:
 8008b90:	b510      	push	{r4, lr}
 8008b92:	4b0b      	ldr	r3, [pc, #44]	; (8008bc0 <global_stdio_init.part.0+0x30>)
 8008b94:	4c0b      	ldr	r4, [pc, #44]	; (8008bc4 <global_stdio_init.part.0+0x34>)
 8008b96:	4a0c      	ldr	r2, [pc, #48]	; (8008bc8 <global_stdio_init.part.0+0x38>)
 8008b98:	601a      	str	r2, [r3, #0]
 8008b9a:	4620      	mov	r0, r4
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	2104      	movs	r1, #4
 8008ba0:	f7ff ff94 	bl	8008acc <std>
 8008ba4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008ba8:	2201      	movs	r2, #1
 8008baa:	2109      	movs	r1, #9
 8008bac:	f7ff ff8e 	bl	8008acc <std>
 8008bb0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008bb4:	2202      	movs	r2, #2
 8008bb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008bba:	2112      	movs	r1, #18
 8008bbc:	f7ff bf86 	b.w	8008acc <std>
 8008bc0:	20002074 	.word	0x20002074
 8008bc4:	20001f3c 	.word	0x20001f3c
 8008bc8:	08008b39 	.word	0x08008b39

08008bcc <__sfp_lock_acquire>:
 8008bcc:	4801      	ldr	r0, [pc, #4]	; (8008bd4 <__sfp_lock_acquire+0x8>)
 8008bce:	f000 ba34 	b.w	800903a <__retarget_lock_acquire_recursive>
 8008bd2:	bf00      	nop
 8008bd4:	2000207d 	.word	0x2000207d

08008bd8 <__sfp_lock_release>:
 8008bd8:	4801      	ldr	r0, [pc, #4]	; (8008be0 <__sfp_lock_release+0x8>)
 8008bda:	f000 ba2f 	b.w	800903c <__retarget_lock_release_recursive>
 8008bde:	bf00      	nop
 8008be0:	2000207d 	.word	0x2000207d

08008be4 <__sinit>:
 8008be4:	b510      	push	{r4, lr}
 8008be6:	4604      	mov	r4, r0
 8008be8:	f7ff fff0 	bl	8008bcc <__sfp_lock_acquire>
 8008bec:	6a23      	ldr	r3, [r4, #32]
 8008bee:	b11b      	cbz	r3, 8008bf8 <__sinit+0x14>
 8008bf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008bf4:	f7ff bff0 	b.w	8008bd8 <__sfp_lock_release>
 8008bf8:	4b04      	ldr	r3, [pc, #16]	; (8008c0c <__sinit+0x28>)
 8008bfa:	6223      	str	r3, [r4, #32]
 8008bfc:	4b04      	ldr	r3, [pc, #16]	; (8008c10 <__sinit+0x2c>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d1f5      	bne.n	8008bf0 <__sinit+0xc>
 8008c04:	f7ff ffc4 	bl	8008b90 <global_stdio_init.part.0>
 8008c08:	e7f2      	b.n	8008bf0 <__sinit+0xc>
 8008c0a:	bf00      	nop
 8008c0c:	08008b51 	.word	0x08008b51
 8008c10:	20002074 	.word	0x20002074

08008c14 <_fwalk_sglue>:
 8008c14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c18:	4607      	mov	r7, r0
 8008c1a:	4688      	mov	r8, r1
 8008c1c:	4614      	mov	r4, r2
 8008c1e:	2600      	movs	r6, #0
 8008c20:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008c24:	f1b9 0901 	subs.w	r9, r9, #1
 8008c28:	d505      	bpl.n	8008c36 <_fwalk_sglue+0x22>
 8008c2a:	6824      	ldr	r4, [r4, #0]
 8008c2c:	2c00      	cmp	r4, #0
 8008c2e:	d1f7      	bne.n	8008c20 <_fwalk_sglue+0xc>
 8008c30:	4630      	mov	r0, r6
 8008c32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c36:	89ab      	ldrh	r3, [r5, #12]
 8008c38:	2b01      	cmp	r3, #1
 8008c3a:	d907      	bls.n	8008c4c <_fwalk_sglue+0x38>
 8008c3c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008c40:	3301      	adds	r3, #1
 8008c42:	d003      	beq.n	8008c4c <_fwalk_sglue+0x38>
 8008c44:	4629      	mov	r1, r5
 8008c46:	4638      	mov	r0, r7
 8008c48:	47c0      	blx	r8
 8008c4a:	4306      	orrs	r6, r0
 8008c4c:	3568      	adds	r5, #104	; 0x68
 8008c4e:	e7e9      	b.n	8008c24 <_fwalk_sglue+0x10>

08008c50 <iprintf>:
 8008c50:	b40f      	push	{r0, r1, r2, r3}
 8008c52:	b507      	push	{r0, r1, r2, lr}
 8008c54:	4906      	ldr	r1, [pc, #24]	; (8008c70 <iprintf+0x20>)
 8008c56:	ab04      	add	r3, sp, #16
 8008c58:	6808      	ldr	r0, [r1, #0]
 8008c5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c5e:	6881      	ldr	r1, [r0, #8]
 8008c60:	9301      	str	r3, [sp, #4]
 8008c62:	f000 fa6b 	bl	800913c <_vfiprintf_r>
 8008c66:	b003      	add	sp, #12
 8008c68:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c6c:	b004      	add	sp, #16
 8008c6e:	4770      	bx	lr
 8008c70:	20000088 	.word	0x20000088

08008c74 <_puts_r>:
 8008c74:	6a03      	ldr	r3, [r0, #32]
 8008c76:	b570      	push	{r4, r5, r6, lr}
 8008c78:	6884      	ldr	r4, [r0, #8]
 8008c7a:	4605      	mov	r5, r0
 8008c7c:	460e      	mov	r6, r1
 8008c7e:	b90b      	cbnz	r3, 8008c84 <_puts_r+0x10>
 8008c80:	f7ff ffb0 	bl	8008be4 <__sinit>
 8008c84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008c86:	07db      	lsls	r3, r3, #31
 8008c88:	d405      	bmi.n	8008c96 <_puts_r+0x22>
 8008c8a:	89a3      	ldrh	r3, [r4, #12]
 8008c8c:	0598      	lsls	r0, r3, #22
 8008c8e:	d402      	bmi.n	8008c96 <_puts_r+0x22>
 8008c90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c92:	f000 f9d2 	bl	800903a <__retarget_lock_acquire_recursive>
 8008c96:	89a3      	ldrh	r3, [r4, #12]
 8008c98:	0719      	lsls	r1, r3, #28
 8008c9a:	d513      	bpl.n	8008cc4 <_puts_r+0x50>
 8008c9c:	6923      	ldr	r3, [r4, #16]
 8008c9e:	b18b      	cbz	r3, 8008cc4 <_puts_r+0x50>
 8008ca0:	3e01      	subs	r6, #1
 8008ca2:	68a3      	ldr	r3, [r4, #8]
 8008ca4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008ca8:	3b01      	subs	r3, #1
 8008caa:	60a3      	str	r3, [r4, #8]
 8008cac:	b9e9      	cbnz	r1, 8008cea <_puts_r+0x76>
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	da2e      	bge.n	8008d10 <_puts_r+0x9c>
 8008cb2:	4622      	mov	r2, r4
 8008cb4:	210a      	movs	r1, #10
 8008cb6:	4628      	mov	r0, r5
 8008cb8:	f000 f87b 	bl	8008db2 <__swbuf_r>
 8008cbc:	3001      	adds	r0, #1
 8008cbe:	d007      	beq.n	8008cd0 <_puts_r+0x5c>
 8008cc0:	250a      	movs	r5, #10
 8008cc2:	e007      	b.n	8008cd4 <_puts_r+0x60>
 8008cc4:	4621      	mov	r1, r4
 8008cc6:	4628      	mov	r0, r5
 8008cc8:	f000 f8b0 	bl	8008e2c <__swsetup_r>
 8008ccc:	2800      	cmp	r0, #0
 8008cce:	d0e7      	beq.n	8008ca0 <_puts_r+0x2c>
 8008cd0:	f04f 35ff 	mov.w	r5, #4294967295
 8008cd4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008cd6:	07da      	lsls	r2, r3, #31
 8008cd8:	d405      	bmi.n	8008ce6 <_puts_r+0x72>
 8008cda:	89a3      	ldrh	r3, [r4, #12]
 8008cdc:	059b      	lsls	r3, r3, #22
 8008cde:	d402      	bmi.n	8008ce6 <_puts_r+0x72>
 8008ce0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ce2:	f000 f9ab 	bl	800903c <__retarget_lock_release_recursive>
 8008ce6:	4628      	mov	r0, r5
 8008ce8:	bd70      	pop	{r4, r5, r6, pc}
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	da04      	bge.n	8008cf8 <_puts_r+0x84>
 8008cee:	69a2      	ldr	r2, [r4, #24]
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	dc06      	bgt.n	8008d02 <_puts_r+0x8e>
 8008cf4:	290a      	cmp	r1, #10
 8008cf6:	d004      	beq.n	8008d02 <_puts_r+0x8e>
 8008cf8:	6823      	ldr	r3, [r4, #0]
 8008cfa:	1c5a      	adds	r2, r3, #1
 8008cfc:	6022      	str	r2, [r4, #0]
 8008cfe:	7019      	strb	r1, [r3, #0]
 8008d00:	e7cf      	b.n	8008ca2 <_puts_r+0x2e>
 8008d02:	4622      	mov	r2, r4
 8008d04:	4628      	mov	r0, r5
 8008d06:	f000 f854 	bl	8008db2 <__swbuf_r>
 8008d0a:	3001      	adds	r0, #1
 8008d0c:	d1c9      	bne.n	8008ca2 <_puts_r+0x2e>
 8008d0e:	e7df      	b.n	8008cd0 <_puts_r+0x5c>
 8008d10:	6823      	ldr	r3, [r4, #0]
 8008d12:	250a      	movs	r5, #10
 8008d14:	1c5a      	adds	r2, r3, #1
 8008d16:	6022      	str	r2, [r4, #0]
 8008d18:	701d      	strb	r5, [r3, #0]
 8008d1a:	e7db      	b.n	8008cd4 <_puts_r+0x60>

08008d1c <puts>:
 8008d1c:	4b02      	ldr	r3, [pc, #8]	; (8008d28 <puts+0xc>)
 8008d1e:	4601      	mov	r1, r0
 8008d20:	6818      	ldr	r0, [r3, #0]
 8008d22:	f7ff bfa7 	b.w	8008c74 <_puts_r>
 8008d26:	bf00      	nop
 8008d28:	20000088 	.word	0x20000088

08008d2c <__sread>:
 8008d2c:	b510      	push	{r4, lr}
 8008d2e:	460c      	mov	r4, r1
 8008d30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d34:	f000 f922 	bl	8008f7c <_read_r>
 8008d38:	2800      	cmp	r0, #0
 8008d3a:	bfab      	itete	ge
 8008d3c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008d3e:	89a3      	ldrhlt	r3, [r4, #12]
 8008d40:	181b      	addge	r3, r3, r0
 8008d42:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008d46:	bfac      	ite	ge
 8008d48:	6563      	strge	r3, [r4, #84]	; 0x54
 8008d4a:	81a3      	strhlt	r3, [r4, #12]
 8008d4c:	bd10      	pop	{r4, pc}

08008d4e <__swrite>:
 8008d4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d52:	461f      	mov	r7, r3
 8008d54:	898b      	ldrh	r3, [r1, #12]
 8008d56:	05db      	lsls	r3, r3, #23
 8008d58:	4605      	mov	r5, r0
 8008d5a:	460c      	mov	r4, r1
 8008d5c:	4616      	mov	r6, r2
 8008d5e:	d505      	bpl.n	8008d6c <__swrite+0x1e>
 8008d60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d64:	2302      	movs	r3, #2
 8008d66:	2200      	movs	r2, #0
 8008d68:	f000 f8f6 	bl	8008f58 <_lseek_r>
 8008d6c:	89a3      	ldrh	r3, [r4, #12]
 8008d6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d76:	81a3      	strh	r3, [r4, #12]
 8008d78:	4632      	mov	r2, r6
 8008d7a:	463b      	mov	r3, r7
 8008d7c:	4628      	mov	r0, r5
 8008d7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d82:	f000 b91d 	b.w	8008fc0 <_write_r>

08008d86 <__sseek>:
 8008d86:	b510      	push	{r4, lr}
 8008d88:	460c      	mov	r4, r1
 8008d8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d8e:	f000 f8e3 	bl	8008f58 <_lseek_r>
 8008d92:	1c43      	adds	r3, r0, #1
 8008d94:	89a3      	ldrh	r3, [r4, #12]
 8008d96:	bf15      	itete	ne
 8008d98:	6560      	strne	r0, [r4, #84]	; 0x54
 8008d9a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008d9e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008da2:	81a3      	strheq	r3, [r4, #12]
 8008da4:	bf18      	it	ne
 8008da6:	81a3      	strhne	r3, [r4, #12]
 8008da8:	bd10      	pop	{r4, pc}

08008daa <__sclose>:
 8008daa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dae:	f000 b8c3 	b.w	8008f38 <_close_r>

08008db2 <__swbuf_r>:
 8008db2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008db4:	460e      	mov	r6, r1
 8008db6:	4614      	mov	r4, r2
 8008db8:	4605      	mov	r5, r0
 8008dba:	b118      	cbz	r0, 8008dc4 <__swbuf_r+0x12>
 8008dbc:	6a03      	ldr	r3, [r0, #32]
 8008dbe:	b90b      	cbnz	r3, 8008dc4 <__swbuf_r+0x12>
 8008dc0:	f7ff ff10 	bl	8008be4 <__sinit>
 8008dc4:	69a3      	ldr	r3, [r4, #24]
 8008dc6:	60a3      	str	r3, [r4, #8]
 8008dc8:	89a3      	ldrh	r3, [r4, #12]
 8008dca:	071a      	lsls	r2, r3, #28
 8008dcc:	d525      	bpl.n	8008e1a <__swbuf_r+0x68>
 8008dce:	6923      	ldr	r3, [r4, #16]
 8008dd0:	b31b      	cbz	r3, 8008e1a <__swbuf_r+0x68>
 8008dd2:	6823      	ldr	r3, [r4, #0]
 8008dd4:	6922      	ldr	r2, [r4, #16]
 8008dd6:	1a98      	subs	r0, r3, r2
 8008dd8:	6963      	ldr	r3, [r4, #20]
 8008dda:	b2f6      	uxtb	r6, r6
 8008ddc:	4283      	cmp	r3, r0
 8008dde:	4637      	mov	r7, r6
 8008de0:	dc04      	bgt.n	8008dec <__swbuf_r+0x3a>
 8008de2:	4621      	mov	r1, r4
 8008de4:	4628      	mov	r0, r5
 8008de6:	f7ff fe49 	bl	8008a7c <_fflush_r>
 8008dea:	b9e0      	cbnz	r0, 8008e26 <__swbuf_r+0x74>
 8008dec:	68a3      	ldr	r3, [r4, #8]
 8008dee:	3b01      	subs	r3, #1
 8008df0:	60a3      	str	r3, [r4, #8]
 8008df2:	6823      	ldr	r3, [r4, #0]
 8008df4:	1c5a      	adds	r2, r3, #1
 8008df6:	6022      	str	r2, [r4, #0]
 8008df8:	701e      	strb	r6, [r3, #0]
 8008dfa:	6962      	ldr	r2, [r4, #20]
 8008dfc:	1c43      	adds	r3, r0, #1
 8008dfe:	429a      	cmp	r2, r3
 8008e00:	d004      	beq.n	8008e0c <__swbuf_r+0x5a>
 8008e02:	89a3      	ldrh	r3, [r4, #12]
 8008e04:	07db      	lsls	r3, r3, #31
 8008e06:	d506      	bpl.n	8008e16 <__swbuf_r+0x64>
 8008e08:	2e0a      	cmp	r6, #10
 8008e0a:	d104      	bne.n	8008e16 <__swbuf_r+0x64>
 8008e0c:	4621      	mov	r1, r4
 8008e0e:	4628      	mov	r0, r5
 8008e10:	f7ff fe34 	bl	8008a7c <_fflush_r>
 8008e14:	b938      	cbnz	r0, 8008e26 <__swbuf_r+0x74>
 8008e16:	4638      	mov	r0, r7
 8008e18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e1a:	4621      	mov	r1, r4
 8008e1c:	4628      	mov	r0, r5
 8008e1e:	f000 f805 	bl	8008e2c <__swsetup_r>
 8008e22:	2800      	cmp	r0, #0
 8008e24:	d0d5      	beq.n	8008dd2 <__swbuf_r+0x20>
 8008e26:	f04f 37ff 	mov.w	r7, #4294967295
 8008e2a:	e7f4      	b.n	8008e16 <__swbuf_r+0x64>

08008e2c <__swsetup_r>:
 8008e2c:	b538      	push	{r3, r4, r5, lr}
 8008e2e:	4b2a      	ldr	r3, [pc, #168]	; (8008ed8 <__swsetup_r+0xac>)
 8008e30:	4605      	mov	r5, r0
 8008e32:	6818      	ldr	r0, [r3, #0]
 8008e34:	460c      	mov	r4, r1
 8008e36:	b118      	cbz	r0, 8008e40 <__swsetup_r+0x14>
 8008e38:	6a03      	ldr	r3, [r0, #32]
 8008e3a:	b90b      	cbnz	r3, 8008e40 <__swsetup_r+0x14>
 8008e3c:	f7ff fed2 	bl	8008be4 <__sinit>
 8008e40:	89a3      	ldrh	r3, [r4, #12]
 8008e42:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008e46:	0718      	lsls	r0, r3, #28
 8008e48:	d422      	bmi.n	8008e90 <__swsetup_r+0x64>
 8008e4a:	06d9      	lsls	r1, r3, #27
 8008e4c:	d407      	bmi.n	8008e5e <__swsetup_r+0x32>
 8008e4e:	2309      	movs	r3, #9
 8008e50:	602b      	str	r3, [r5, #0]
 8008e52:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008e56:	81a3      	strh	r3, [r4, #12]
 8008e58:	f04f 30ff 	mov.w	r0, #4294967295
 8008e5c:	e034      	b.n	8008ec8 <__swsetup_r+0x9c>
 8008e5e:	0758      	lsls	r0, r3, #29
 8008e60:	d512      	bpl.n	8008e88 <__swsetup_r+0x5c>
 8008e62:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e64:	b141      	cbz	r1, 8008e78 <__swsetup_r+0x4c>
 8008e66:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e6a:	4299      	cmp	r1, r3
 8008e6c:	d002      	beq.n	8008e74 <__swsetup_r+0x48>
 8008e6e:	4628      	mov	r0, r5
 8008e70:	f000 f8e6 	bl	8009040 <_free_r>
 8008e74:	2300      	movs	r3, #0
 8008e76:	6363      	str	r3, [r4, #52]	; 0x34
 8008e78:	89a3      	ldrh	r3, [r4, #12]
 8008e7a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008e7e:	81a3      	strh	r3, [r4, #12]
 8008e80:	2300      	movs	r3, #0
 8008e82:	6063      	str	r3, [r4, #4]
 8008e84:	6923      	ldr	r3, [r4, #16]
 8008e86:	6023      	str	r3, [r4, #0]
 8008e88:	89a3      	ldrh	r3, [r4, #12]
 8008e8a:	f043 0308 	orr.w	r3, r3, #8
 8008e8e:	81a3      	strh	r3, [r4, #12]
 8008e90:	6923      	ldr	r3, [r4, #16]
 8008e92:	b94b      	cbnz	r3, 8008ea8 <__swsetup_r+0x7c>
 8008e94:	89a3      	ldrh	r3, [r4, #12]
 8008e96:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008e9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e9e:	d003      	beq.n	8008ea8 <__swsetup_r+0x7c>
 8008ea0:	4621      	mov	r1, r4
 8008ea2:	4628      	mov	r0, r5
 8008ea4:	f000 fc1a 	bl	80096dc <__smakebuf_r>
 8008ea8:	89a0      	ldrh	r0, [r4, #12]
 8008eaa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008eae:	f010 0301 	ands.w	r3, r0, #1
 8008eb2:	d00a      	beq.n	8008eca <__swsetup_r+0x9e>
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	60a3      	str	r3, [r4, #8]
 8008eb8:	6963      	ldr	r3, [r4, #20]
 8008eba:	425b      	negs	r3, r3
 8008ebc:	61a3      	str	r3, [r4, #24]
 8008ebe:	6923      	ldr	r3, [r4, #16]
 8008ec0:	b943      	cbnz	r3, 8008ed4 <__swsetup_r+0xa8>
 8008ec2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008ec6:	d1c4      	bne.n	8008e52 <__swsetup_r+0x26>
 8008ec8:	bd38      	pop	{r3, r4, r5, pc}
 8008eca:	0781      	lsls	r1, r0, #30
 8008ecc:	bf58      	it	pl
 8008ece:	6963      	ldrpl	r3, [r4, #20]
 8008ed0:	60a3      	str	r3, [r4, #8]
 8008ed2:	e7f4      	b.n	8008ebe <__swsetup_r+0x92>
 8008ed4:	2000      	movs	r0, #0
 8008ed6:	e7f7      	b.n	8008ec8 <__swsetup_r+0x9c>
 8008ed8:	20000088 	.word	0x20000088

08008edc <memset>:
 8008edc:	4402      	add	r2, r0
 8008ede:	4603      	mov	r3, r0
 8008ee0:	4293      	cmp	r3, r2
 8008ee2:	d100      	bne.n	8008ee6 <memset+0xa>
 8008ee4:	4770      	bx	lr
 8008ee6:	f803 1b01 	strb.w	r1, [r3], #1
 8008eea:	e7f9      	b.n	8008ee0 <memset+0x4>

08008eec <strncmp>:
 8008eec:	b510      	push	{r4, lr}
 8008eee:	b16a      	cbz	r2, 8008f0c <strncmp+0x20>
 8008ef0:	3901      	subs	r1, #1
 8008ef2:	1884      	adds	r4, r0, r2
 8008ef4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ef8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008efc:	429a      	cmp	r2, r3
 8008efe:	d103      	bne.n	8008f08 <strncmp+0x1c>
 8008f00:	42a0      	cmp	r0, r4
 8008f02:	d001      	beq.n	8008f08 <strncmp+0x1c>
 8008f04:	2a00      	cmp	r2, #0
 8008f06:	d1f5      	bne.n	8008ef4 <strncmp+0x8>
 8008f08:	1ad0      	subs	r0, r2, r3
 8008f0a:	bd10      	pop	{r4, pc}
 8008f0c:	4610      	mov	r0, r2
 8008f0e:	e7fc      	b.n	8008f0a <strncmp+0x1e>

08008f10 <strncpy>:
 8008f10:	b510      	push	{r4, lr}
 8008f12:	3901      	subs	r1, #1
 8008f14:	4603      	mov	r3, r0
 8008f16:	b132      	cbz	r2, 8008f26 <strncpy+0x16>
 8008f18:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008f1c:	f803 4b01 	strb.w	r4, [r3], #1
 8008f20:	3a01      	subs	r2, #1
 8008f22:	2c00      	cmp	r4, #0
 8008f24:	d1f7      	bne.n	8008f16 <strncpy+0x6>
 8008f26:	441a      	add	r2, r3
 8008f28:	2100      	movs	r1, #0
 8008f2a:	4293      	cmp	r3, r2
 8008f2c:	d100      	bne.n	8008f30 <strncpy+0x20>
 8008f2e:	bd10      	pop	{r4, pc}
 8008f30:	f803 1b01 	strb.w	r1, [r3], #1
 8008f34:	e7f9      	b.n	8008f2a <strncpy+0x1a>
	...

08008f38 <_close_r>:
 8008f38:	b538      	push	{r3, r4, r5, lr}
 8008f3a:	4d06      	ldr	r5, [pc, #24]	; (8008f54 <_close_r+0x1c>)
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	4604      	mov	r4, r0
 8008f40:	4608      	mov	r0, r1
 8008f42:	602b      	str	r3, [r5, #0]
 8008f44:	f7f7 ffce 	bl	8000ee4 <_close>
 8008f48:	1c43      	adds	r3, r0, #1
 8008f4a:	d102      	bne.n	8008f52 <_close_r+0x1a>
 8008f4c:	682b      	ldr	r3, [r5, #0]
 8008f4e:	b103      	cbz	r3, 8008f52 <_close_r+0x1a>
 8008f50:	6023      	str	r3, [r4, #0]
 8008f52:	bd38      	pop	{r3, r4, r5, pc}
 8008f54:	20002078 	.word	0x20002078

08008f58 <_lseek_r>:
 8008f58:	b538      	push	{r3, r4, r5, lr}
 8008f5a:	4d07      	ldr	r5, [pc, #28]	; (8008f78 <_lseek_r+0x20>)
 8008f5c:	4604      	mov	r4, r0
 8008f5e:	4608      	mov	r0, r1
 8008f60:	4611      	mov	r1, r2
 8008f62:	2200      	movs	r2, #0
 8008f64:	602a      	str	r2, [r5, #0]
 8008f66:	461a      	mov	r2, r3
 8008f68:	f7f7 ffc6 	bl	8000ef8 <_lseek>
 8008f6c:	1c43      	adds	r3, r0, #1
 8008f6e:	d102      	bne.n	8008f76 <_lseek_r+0x1e>
 8008f70:	682b      	ldr	r3, [r5, #0]
 8008f72:	b103      	cbz	r3, 8008f76 <_lseek_r+0x1e>
 8008f74:	6023      	str	r3, [r4, #0]
 8008f76:	bd38      	pop	{r3, r4, r5, pc}
 8008f78:	20002078 	.word	0x20002078

08008f7c <_read_r>:
 8008f7c:	b538      	push	{r3, r4, r5, lr}
 8008f7e:	4d07      	ldr	r5, [pc, #28]	; (8008f9c <_read_r+0x20>)
 8008f80:	4604      	mov	r4, r0
 8008f82:	4608      	mov	r0, r1
 8008f84:	4611      	mov	r1, r2
 8008f86:	2200      	movs	r2, #0
 8008f88:	602a      	str	r2, [r5, #0]
 8008f8a:	461a      	mov	r2, r3
 8008f8c:	f7f7 ff9a 	bl	8000ec4 <_read>
 8008f90:	1c43      	adds	r3, r0, #1
 8008f92:	d102      	bne.n	8008f9a <_read_r+0x1e>
 8008f94:	682b      	ldr	r3, [r5, #0]
 8008f96:	b103      	cbz	r3, 8008f9a <_read_r+0x1e>
 8008f98:	6023      	str	r3, [r4, #0]
 8008f9a:	bd38      	pop	{r3, r4, r5, pc}
 8008f9c:	20002078 	.word	0x20002078

08008fa0 <_sbrk_r>:
 8008fa0:	b538      	push	{r3, r4, r5, lr}
 8008fa2:	4d06      	ldr	r5, [pc, #24]	; (8008fbc <_sbrk_r+0x1c>)
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	4604      	mov	r4, r0
 8008fa8:	4608      	mov	r0, r1
 8008faa:	602b      	str	r3, [r5, #0]
 8008fac:	f7f7 ffa6 	bl	8000efc <_sbrk>
 8008fb0:	1c43      	adds	r3, r0, #1
 8008fb2:	d102      	bne.n	8008fba <_sbrk_r+0x1a>
 8008fb4:	682b      	ldr	r3, [r5, #0]
 8008fb6:	b103      	cbz	r3, 8008fba <_sbrk_r+0x1a>
 8008fb8:	6023      	str	r3, [r4, #0]
 8008fba:	bd38      	pop	{r3, r4, r5, pc}
 8008fbc:	20002078 	.word	0x20002078

08008fc0 <_write_r>:
 8008fc0:	b538      	push	{r3, r4, r5, lr}
 8008fc2:	4d07      	ldr	r5, [pc, #28]	; (8008fe0 <_write_r+0x20>)
 8008fc4:	4604      	mov	r4, r0
 8008fc6:	4608      	mov	r0, r1
 8008fc8:	4611      	mov	r1, r2
 8008fca:	2200      	movs	r2, #0
 8008fcc:	602a      	str	r2, [r5, #0]
 8008fce:	461a      	mov	r2, r3
 8008fd0:	f7f7 fb82 	bl	80006d8 <_write>
 8008fd4:	1c43      	adds	r3, r0, #1
 8008fd6:	d102      	bne.n	8008fde <_write_r+0x1e>
 8008fd8:	682b      	ldr	r3, [r5, #0]
 8008fda:	b103      	cbz	r3, 8008fde <_write_r+0x1e>
 8008fdc:	6023      	str	r3, [r4, #0]
 8008fde:	bd38      	pop	{r3, r4, r5, pc}
 8008fe0:	20002078 	.word	0x20002078

08008fe4 <__errno>:
 8008fe4:	4b01      	ldr	r3, [pc, #4]	; (8008fec <__errno+0x8>)
 8008fe6:	6818      	ldr	r0, [r3, #0]
 8008fe8:	4770      	bx	lr
 8008fea:	bf00      	nop
 8008fec:	20000088 	.word	0x20000088

08008ff0 <__libc_init_array>:
 8008ff0:	b570      	push	{r4, r5, r6, lr}
 8008ff2:	4d0d      	ldr	r5, [pc, #52]	; (8009028 <__libc_init_array+0x38>)
 8008ff4:	4c0d      	ldr	r4, [pc, #52]	; (800902c <__libc_init_array+0x3c>)
 8008ff6:	1b64      	subs	r4, r4, r5
 8008ff8:	10a4      	asrs	r4, r4, #2
 8008ffa:	2600      	movs	r6, #0
 8008ffc:	42a6      	cmp	r6, r4
 8008ffe:	d109      	bne.n	8009014 <__libc_init_array+0x24>
 8009000:	4d0b      	ldr	r5, [pc, #44]	; (8009030 <__libc_init_array+0x40>)
 8009002:	4c0c      	ldr	r4, [pc, #48]	; (8009034 <__libc_init_array+0x44>)
 8009004:	f000 fbc8 	bl	8009798 <_init>
 8009008:	1b64      	subs	r4, r4, r5
 800900a:	10a4      	asrs	r4, r4, #2
 800900c:	2600      	movs	r6, #0
 800900e:	42a6      	cmp	r6, r4
 8009010:	d105      	bne.n	800901e <__libc_init_array+0x2e>
 8009012:	bd70      	pop	{r4, r5, r6, pc}
 8009014:	f855 3b04 	ldr.w	r3, [r5], #4
 8009018:	4798      	blx	r3
 800901a:	3601      	adds	r6, #1
 800901c:	e7ee      	b.n	8008ffc <__libc_init_array+0xc>
 800901e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009022:	4798      	blx	r3
 8009024:	3601      	adds	r6, #1
 8009026:	e7f2      	b.n	800900e <__libc_init_array+0x1e>
 8009028:	08009920 	.word	0x08009920
 800902c:	08009920 	.word	0x08009920
 8009030:	08009920 	.word	0x08009920
 8009034:	08009924 	.word	0x08009924

08009038 <__retarget_lock_init_recursive>:
 8009038:	4770      	bx	lr

0800903a <__retarget_lock_acquire_recursive>:
 800903a:	4770      	bx	lr

0800903c <__retarget_lock_release_recursive>:
 800903c:	4770      	bx	lr
	...

08009040 <_free_r>:
 8009040:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009042:	2900      	cmp	r1, #0
 8009044:	d044      	beq.n	80090d0 <_free_r+0x90>
 8009046:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800904a:	9001      	str	r0, [sp, #4]
 800904c:	2b00      	cmp	r3, #0
 800904e:	f1a1 0404 	sub.w	r4, r1, #4
 8009052:	bfb8      	it	lt
 8009054:	18e4      	addlt	r4, r4, r3
 8009056:	f7ff fc77 	bl	8008948 <__malloc_lock>
 800905a:	4a1e      	ldr	r2, [pc, #120]	; (80090d4 <_free_r+0x94>)
 800905c:	9801      	ldr	r0, [sp, #4]
 800905e:	6813      	ldr	r3, [r2, #0]
 8009060:	b933      	cbnz	r3, 8009070 <_free_r+0x30>
 8009062:	6063      	str	r3, [r4, #4]
 8009064:	6014      	str	r4, [r2, #0]
 8009066:	b003      	add	sp, #12
 8009068:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800906c:	f7ff bc72 	b.w	8008954 <__malloc_unlock>
 8009070:	42a3      	cmp	r3, r4
 8009072:	d908      	bls.n	8009086 <_free_r+0x46>
 8009074:	6825      	ldr	r5, [r4, #0]
 8009076:	1961      	adds	r1, r4, r5
 8009078:	428b      	cmp	r3, r1
 800907a:	bf01      	itttt	eq
 800907c:	6819      	ldreq	r1, [r3, #0]
 800907e:	685b      	ldreq	r3, [r3, #4]
 8009080:	1949      	addeq	r1, r1, r5
 8009082:	6021      	streq	r1, [r4, #0]
 8009084:	e7ed      	b.n	8009062 <_free_r+0x22>
 8009086:	461a      	mov	r2, r3
 8009088:	685b      	ldr	r3, [r3, #4]
 800908a:	b10b      	cbz	r3, 8009090 <_free_r+0x50>
 800908c:	42a3      	cmp	r3, r4
 800908e:	d9fa      	bls.n	8009086 <_free_r+0x46>
 8009090:	6811      	ldr	r1, [r2, #0]
 8009092:	1855      	adds	r5, r2, r1
 8009094:	42a5      	cmp	r5, r4
 8009096:	d10b      	bne.n	80090b0 <_free_r+0x70>
 8009098:	6824      	ldr	r4, [r4, #0]
 800909a:	4421      	add	r1, r4
 800909c:	1854      	adds	r4, r2, r1
 800909e:	42a3      	cmp	r3, r4
 80090a0:	6011      	str	r1, [r2, #0]
 80090a2:	d1e0      	bne.n	8009066 <_free_r+0x26>
 80090a4:	681c      	ldr	r4, [r3, #0]
 80090a6:	685b      	ldr	r3, [r3, #4]
 80090a8:	6053      	str	r3, [r2, #4]
 80090aa:	440c      	add	r4, r1
 80090ac:	6014      	str	r4, [r2, #0]
 80090ae:	e7da      	b.n	8009066 <_free_r+0x26>
 80090b0:	d902      	bls.n	80090b8 <_free_r+0x78>
 80090b2:	230c      	movs	r3, #12
 80090b4:	6003      	str	r3, [r0, #0]
 80090b6:	e7d6      	b.n	8009066 <_free_r+0x26>
 80090b8:	6825      	ldr	r5, [r4, #0]
 80090ba:	1961      	adds	r1, r4, r5
 80090bc:	428b      	cmp	r3, r1
 80090be:	bf04      	itt	eq
 80090c0:	6819      	ldreq	r1, [r3, #0]
 80090c2:	685b      	ldreq	r3, [r3, #4]
 80090c4:	6063      	str	r3, [r4, #4]
 80090c6:	bf04      	itt	eq
 80090c8:	1949      	addeq	r1, r1, r5
 80090ca:	6021      	streq	r1, [r4, #0]
 80090cc:	6054      	str	r4, [r2, #4]
 80090ce:	e7ca      	b.n	8009066 <_free_r+0x26>
 80090d0:	b003      	add	sp, #12
 80090d2:	bd30      	pop	{r4, r5, pc}
 80090d4:	20001f34 	.word	0x20001f34

080090d8 <_malloc_usable_size_r>:
 80090d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090dc:	1f18      	subs	r0, r3, #4
 80090de:	2b00      	cmp	r3, #0
 80090e0:	bfbc      	itt	lt
 80090e2:	580b      	ldrlt	r3, [r1, r0]
 80090e4:	18c0      	addlt	r0, r0, r3
 80090e6:	4770      	bx	lr

080090e8 <__sfputc_r>:
 80090e8:	6893      	ldr	r3, [r2, #8]
 80090ea:	3b01      	subs	r3, #1
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	b410      	push	{r4}
 80090f0:	6093      	str	r3, [r2, #8]
 80090f2:	da08      	bge.n	8009106 <__sfputc_r+0x1e>
 80090f4:	6994      	ldr	r4, [r2, #24]
 80090f6:	42a3      	cmp	r3, r4
 80090f8:	db01      	blt.n	80090fe <__sfputc_r+0x16>
 80090fa:	290a      	cmp	r1, #10
 80090fc:	d103      	bne.n	8009106 <__sfputc_r+0x1e>
 80090fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009102:	f7ff be56 	b.w	8008db2 <__swbuf_r>
 8009106:	6813      	ldr	r3, [r2, #0]
 8009108:	1c58      	adds	r0, r3, #1
 800910a:	6010      	str	r0, [r2, #0]
 800910c:	7019      	strb	r1, [r3, #0]
 800910e:	4608      	mov	r0, r1
 8009110:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009114:	4770      	bx	lr

08009116 <__sfputs_r>:
 8009116:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009118:	4606      	mov	r6, r0
 800911a:	460f      	mov	r7, r1
 800911c:	4614      	mov	r4, r2
 800911e:	18d5      	adds	r5, r2, r3
 8009120:	42ac      	cmp	r4, r5
 8009122:	d101      	bne.n	8009128 <__sfputs_r+0x12>
 8009124:	2000      	movs	r0, #0
 8009126:	e007      	b.n	8009138 <__sfputs_r+0x22>
 8009128:	f814 1b01 	ldrb.w	r1, [r4], #1
 800912c:	463a      	mov	r2, r7
 800912e:	4630      	mov	r0, r6
 8009130:	f7ff ffda 	bl	80090e8 <__sfputc_r>
 8009134:	1c43      	adds	r3, r0, #1
 8009136:	d1f3      	bne.n	8009120 <__sfputs_r+0xa>
 8009138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800913c <_vfiprintf_r>:
 800913c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009140:	460d      	mov	r5, r1
 8009142:	b09d      	sub	sp, #116	; 0x74
 8009144:	4614      	mov	r4, r2
 8009146:	4698      	mov	r8, r3
 8009148:	4606      	mov	r6, r0
 800914a:	b118      	cbz	r0, 8009154 <_vfiprintf_r+0x18>
 800914c:	6a03      	ldr	r3, [r0, #32]
 800914e:	b90b      	cbnz	r3, 8009154 <_vfiprintf_r+0x18>
 8009150:	f7ff fd48 	bl	8008be4 <__sinit>
 8009154:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009156:	07d9      	lsls	r1, r3, #31
 8009158:	d405      	bmi.n	8009166 <_vfiprintf_r+0x2a>
 800915a:	89ab      	ldrh	r3, [r5, #12]
 800915c:	059a      	lsls	r2, r3, #22
 800915e:	d402      	bmi.n	8009166 <_vfiprintf_r+0x2a>
 8009160:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009162:	f7ff ff6a 	bl	800903a <__retarget_lock_acquire_recursive>
 8009166:	89ab      	ldrh	r3, [r5, #12]
 8009168:	071b      	lsls	r3, r3, #28
 800916a:	d501      	bpl.n	8009170 <_vfiprintf_r+0x34>
 800916c:	692b      	ldr	r3, [r5, #16]
 800916e:	b99b      	cbnz	r3, 8009198 <_vfiprintf_r+0x5c>
 8009170:	4629      	mov	r1, r5
 8009172:	4630      	mov	r0, r6
 8009174:	f7ff fe5a 	bl	8008e2c <__swsetup_r>
 8009178:	b170      	cbz	r0, 8009198 <_vfiprintf_r+0x5c>
 800917a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800917c:	07dc      	lsls	r4, r3, #31
 800917e:	d504      	bpl.n	800918a <_vfiprintf_r+0x4e>
 8009180:	f04f 30ff 	mov.w	r0, #4294967295
 8009184:	b01d      	add	sp, #116	; 0x74
 8009186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800918a:	89ab      	ldrh	r3, [r5, #12]
 800918c:	0598      	lsls	r0, r3, #22
 800918e:	d4f7      	bmi.n	8009180 <_vfiprintf_r+0x44>
 8009190:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009192:	f7ff ff53 	bl	800903c <__retarget_lock_release_recursive>
 8009196:	e7f3      	b.n	8009180 <_vfiprintf_r+0x44>
 8009198:	2300      	movs	r3, #0
 800919a:	9309      	str	r3, [sp, #36]	; 0x24
 800919c:	2320      	movs	r3, #32
 800919e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80091a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80091a6:	2330      	movs	r3, #48	; 0x30
 80091a8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800935c <_vfiprintf_r+0x220>
 80091ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80091b0:	f04f 0901 	mov.w	r9, #1
 80091b4:	4623      	mov	r3, r4
 80091b6:	469a      	mov	sl, r3
 80091b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80091bc:	b10a      	cbz	r2, 80091c2 <_vfiprintf_r+0x86>
 80091be:	2a25      	cmp	r2, #37	; 0x25
 80091c0:	d1f9      	bne.n	80091b6 <_vfiprintf_r+0x7a>
 80091c2:	ebba 0b04 	subs.w	fp, sl, r4
 80091c6:	d00b      	beq.n	80091e0 <_vfiprintf_r+0xa4>
 80091c8:	465b      	mov	r3, fp
 80091ca:	4622      	mov	r2, r4
 80091cc:	4629      	mov	r1, r5
 80091ce:	4630      	mov	r0, r6
 80091d0:	f7ff ffa1 	bl	8009116 <__sfputs_r>
 80091d4:	3001      	adds	r0, #1
 80091d6:	f000 80a9 	beq.w	800932c <_vfiprintf_r+0x1f0>
 80091da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80091dc:	445a      	add	r2, fp
 80091de:	9209      	str	r2, [sp, #36]	; 0x24
 80091e0:	f89a 3000 	ldrb.w	r3, [sl]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	f000 80a1 	beq.w	800932c <_vfiprintf_r+0x1f0>
 80091ea:	2300      	movs	r3, #0
 80091ec:	f04f 32ff 	mov.w	r2, #4294967295
 80091f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091f4:	f10a 0a01 	add.w	sl, sl, #1
 80091f8:	9304      	str	r3, [sp, #16]
 80091fa:	9307      	str	r3, [sp, #28]
 80091fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009200:	931a      	str	r3, [sp, #104]	; 0x68
 8009202:	4654      	mov	r4, sl
 8009204:	2205      	movs	r2, #5
 8009206:	f814 1b01 	ldrb.w	r1, [r4], #1
 800920a:	4854      	ldr	r0, [pc, #336]	; (800935c <_vfiprintf_r+0x220>)
 800920c:	f7f6 fff8 	bl	8000200 <memchr>
 8009210:	9a04      	ldr	r2, [sp, #16]
 8009212:	b9d8      	cbnz	r0, 800924c <_vfiprintf_r+0x110>
 8009214:	06d1      	lsls	r1, r2, #27
 8009216:	bf44      	itt	mi
 8009218:	2320      	movmi	r3, #32
 800921a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800921e:	0713      	lsls	r3, r2, #28
 8009220:	bf44      	itt	mi
 8009222:	232b      	movmi	r3, #43	; 0x2b
 8009224:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009228:	f89a 3000 	ldrb.w	r3, [sl]
 800922c:	2b2a      	cmp	r3, #42	; 0x2a
 800922e:	d015      	beq.n	800925c <_vfiprintf_r+0x120>
 8009230:	9a07      	ldr	r2, [sp, #28]
 8009232:	4654      	mov	r4, sl
 8009234:	2000      	movs	r0, #0
 8009236:	f04f 0c0a 	mov.w	ip, #10
 800923a:	4621      	mov	r1, r4
 800923c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009240:	3b30      	subs	r3, #48	; 0x30
 8009242:	2b09      	cmp	r3, #9
 8009244:	d94d      	bls.n	80092e2 <_vfiprintf_r+0x1a6>
 8009246:	b1b0      	cbz	r0, 8009276 <_vfiprintf_r+0x13a>
 8009248:	9207      	str	r2, [sp, #28]
 800924a:	e014      	b.n	8009276 <_vfiprintf_r+0x13a>
 800924c:	eba0 0308 	sub.w	r3, r0, r8
 8009250:	fa09 f303 	lsl.w	r3, r9, r3
 8009254:	4313      	orrs	r3, r2
 8009256:	9304      	str	r3, [sp, #16]
 8009258:	46a2      	mov	sl, r4
 800925a:	e7d2      	b.n	8009202 <_vfiprintf_r+0xc6>
 800925c:	9b03      	ldr	r3, [sp, #12]
 800925e:	1d19      	adds	r1, r3, #4
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	9103      	str	r1, [sp, #12]
 8009264:	2b00      	cmp	r3, #0
 8009266:	bfbb      	ittet	lt
 8009268:	425b      	neglt	r3, r3
 800926a:	f042 0202 	orrlt.w	r2, r2, #2
 800926e:	9307      	strge	r3, [sp, #28]
 8009270:	9307      	strlt	r3, [sp, #28]
 8009272:	bfb8      	it	lt
 8009274:	9204      	strlt	r2, [sp, #16]
 8009276:	7823      	ldrb	r3, [r4, #0]
 8009278:	2b2e      	cmp	r3, #46	; 0x2e
 800927a:	d10c      	bne.n	8009296 <_vfiprintf_r+0x15a>
 800927c:	7863      	ldrb	r3, [r4, #1]
 800927e:	2b2a      	cmp	r3, #42	; 0x2a
 8009280:	d134      	bne.n	80092ec <_vfiprintf_r+0x1b0>
 8009282:	9b03      	ldr	r3, [sp, #12]
 8009284:	1d1a      	adds	r2, r3, #4
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	9203      	str	r2, [sp, #12]
 800928a:	2b00      	cmp	r3, #0
 800928c:	bfb8      	it	lt
 800928e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009292:	3402      	adds	r4, #2
 8009294:	9305      	str	r3, [sp, #20]
 8009296:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800936c <_vfiprintf_r+0x230>
 800929a:	7821      	ldrb	r1, [r4, #0]
 800929c:	2203      	movs	r2, #3
 800929e:	4650      	mov	r0, sl
 80092a0:	f7f6 ffae 	bl	8000200 <memchr>
 80092a4:	b138      	cbz	r0, 80092b6 <_vfiprintf_r+0x17a>
 80092a6:	9b04      	ldr	r3, [sp, #16]
 80092a8:	eba0 000a 	sub.w	r0, r0, sl
 80092ac:	2240      	movs	r2, #64	; 0x40
 80092ae:	4082      	lsls	r2, r0
 80092b0:	4313      	orrs	r3, r2
 80092b2:	3401      	adds	r4, #1
 80092b4:	9304      	str	r3, [sp, #16]
 80092b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092ba:	4829      	ldr	r0, [pc, #164]	; (8009360 <_vfiprintf_r+0x224>)
 80092bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80092c0:	2206      	movs	r2, #6
 80092c2:	f7f6 ff9d 	bl	8000200 <memchr>
 80092c6:	2800      	cmp	r0, #0
 80092c8:	d03f      	beq.n	800934a <_vfiprintf_r+0x20e>
 80092ca:	4b26      	ldr	r3, [pc, #152]	; (8009364 <_vfiprintf_r+0x228>)
 80092cc:	bb1b      	cbnz	r3, 8009316 <_vfiprintf_r+0x1da>
 80092ce:	9b03      	ldr	r3, [sp, #12]
 80092d0:	3307      	adds	r3, #7
 80092d2:	f023 0307 	bic.w	r3, r3, #7
 80092d6:	3308      	adds	r3, #8
 80092d8:	9303      	str	r3, [sp, #12]
 80092da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092dc:	443b      	add	r3, r7
 80092de:	9309      	str	r3, [sp, #36]	; 0x24
 80092e0:	e768      	b.n	80091b4 <_vfiprintf_r+0x78>
 80092e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80092e6:	460c      	mov	r4, r1
 80092e8:	2001      	movs	r0, #1
 80092ea:	e7a6      	b.n	800923a <_vfiprintf_r+0xfe>
 80092ec:	2300      	movs	r3, #0
 80092ee:	3401      	adds	r4, #1
 80092f0:	9305      	str	r3, [sp, #20]
 80092f2:	4619      	mov	r1, r3
 80092f4:	f04f 0c0a 	mov.w	ip, #10
 80092f8:	4620      	mov	r0, r4
 80092fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092fe:	3a30      	subs	r2, #48	; 0x30
 8009300:	2a09      	cmp	r2, #9
 8009302:	d903      	bls.n	800930c <_vfiprintf_r+0x1d0>
 8009304:	2b00      	cmp	r3, #0
 8009306:	d0c6      	beq.n	8009296 <_vfiprintf_r+0x15a>
 8009308:	9105      	str	r1, [sp, #20]
 800930a:	e7c4      	b.n	8009296 <_vfiprintf_r+0x15a>
 800930c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009310:	4604      	mov	r4, r0
 8009312:	2301      	movs	r3, #1
 8009314:	e7f0      	b.n	80092f8 <_vfiprintf_r+0x1bc>
 8009316:	ab03      	add	r3, sp, #12
 8009318:	9300      	str	r3, [sp, #0]
 800931a:	462a      	mov	r2, r5
 800931c:	4b12      	ldr	r3, [pc, #72]	; (8009368 <_vfiprintf_r+0x22c>)
 800931e:	a904      	add	r1, sp, #16
 8009320:	4630      	mov	r0, r6
 8009322:	f3af 8000 	nop.w
 8009326:	4607      	mov	r7, r0
 8009328:	1c78      	adds	r0, r7, #1
 800932a:	d1d6      	bne.n	80092da <_vfiprintf_r+0x19e>
 800932c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800932e:	07d9      	lsls	r1, r3, #31
 8009330:	d405      	bmi.n	800933e <_vfiprintf_r+0x202>
 8009332:	89ab      	ldrh	r3, [r5, #12]
 8009334:	059a      	lsls	r2, r3, #22
 8009336:	d402      	bmi.n	800933e <_vfiprintf_r+0x202>
 8009338:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800933a:	f7ff fe7f 	bl	800903c <__retarget_lock_release_recursive>
 800933e:	89ab      	ldrh	r3, [r5, #12]
 8009340:	065b      	lsls	r3, r3, #25
 8009342:	f53f af1d 	bmi.w	8009180 <_vfiprintf_r+0x44>
 8009346:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009348:	e71c      	b.n	8009184 <_vfiprintf_r+0x48>
 800934a:	ab03      	add	r3, sp, #12
 800934c:	9300      	str	r3, [sp, #0]
 800934e:	462a      	mov	r2, r5
 8009350:	4b05      	ldr	r3, [pc, #20]	; (8009368 <_vfiprintf_r+0x22c>)
 8009352:	a904      	add	r1, sp, #16
 8009354:	4630      	mov	r0, r6
 8009356:	f000 f879 	bl	800944c <_printf_i>
 800935a:	e7e4      	b.n	8009326 <_vfiprintf_r+0x1ea>
 800935c:	080098e2 	.word	0x080098e2
 8009360:	080098ec 	.word	0x080098ec
 8009364:	00000000 	.word	0x00000000
 8009368:	08009117 	.word	0x08009117
 800936c:	080098e8 	.word	0x080098e8

08009370 <_printf_common>:
 8009370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009374:	4616      	mov	r6, r2
 8009376:	4699      	mov	r9, r3
 8009378:	688a      	ldr	r2, [r1, #8]
 800937a:	690b      	ldr	r3, [r1, #16]
 800937c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009380:	4293      	cmp	r3, r2
 8009382:	bfb8      	it	lt
 8009384:	4613      	movlt	r3, r2
 8009386:	6033      	str	r3, [r6, #0]
 8009388:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800938c:	4607      	mov	r7, r0
 800938e:	460c      	mov	r4, r1
 8009390:	b10a      	cbz	r2, 8009396 <_printf_common+0x26>
 8009392:	3301      	adds	r3, #1
 8009394:	6033      	str	r3, [r6, #0]
 8009396:	6823      	ldr	r3, [r4, #0]
 8009398:	0699      	lsls	r1, r3, #26
 800939a:	bf42      	ittt	mi
 800939c:	6833      	ldrmi	r3, [r6, #0]
 800939e:	3302      	addmi	r3, #2
 80093a0:	6033      	strmi	r3, [r6, #0]
 80093a2:	6825      	ldr	r5, [r4, #0]
 80093a4:	f015 0506 	ands.w	r5, r5, #6
 80093a8:	d106      	bne.n	80093b8 <_printf_common+0x48>
 80093aa:	f104 0a19 	add.w	sl, r4, #25
 80093ae:	68e3      	ldr	r3, [r4, #12]
 80093b0:	6832      	ldr	r2, [r6, #0]
 80093b2:	1a9b      	subs	r3, r3, r2
 80093b4:	42ab      	cmp	r3, r5
 80093b6:	dc26      	bgt.n	8009406 <_printf_common+0x96>
 80093b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80093bc:	1e13      	subs	r3, r2, #0
 80093be:	6822      	ldr	r2, [r4, #0]
 80093c0:	bf18      	it	ne
 80093c2:	2301      	movne	r3, #1
 80093c4:	0692      	lsls	r2, r2, #26
 80093c6:	d42b      	bmi.n	8009420 <_printf_common+0xb0>
 80093c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80093cc:	4649      	mov	r1, r9
 80093ce:	4638      	mov	r0, r7
 80093d0:	47c0      	blx	r8
 80093d2:	3001      	adds	r0, #1
 80093d4:	d01e      	beq.n	8009414 <_printf_common+0xa4>
 80093d6:	6823      	ldr	r3, [r4, #0]
 80093d8:	6922      	ldr	r2, [r4, #16]
 80093da:	f003 0306 	and.w	r3, r3, #6
 80093de:	2b04      	cmp	r3, #4
 80093e0:	bf02      	ittt	eq
 80093e2:	68e5      	ldreq	r5, [r4, #12]
 80093e4:	6833      	ldreq	r3, [r6, #0]
 80093e6:	1aed      	subeq	r5, r5, r3
 80093e8:	68a3      	ldr	r3, [r4, #8]
 80093ea:	bf0c      	ite	eq
 80093ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80093f0:	2500      	movne	r5, #0
 80093f2:	4293      	cmp	r3, r2
 80093f4:	bfc4      	itt	gt
 80093f6:	1a9b      	subgt	r3, r3, r2
 80093f8:	18ed      	addgt	r5, r5, r3
 80093fa:	2600      	movs	r6, #0
 80093fc:	341a      	adds	r4, #26
 80093fe:	42b5      	cmp	r5, r6
 8009400:	d11a      	bne.n	8009438 <_printf_common+0xc8>
 8009402:	2000      	movs	r0, #0
 8009404:	e008      	b.n	8009418 <_printf_common+0xa8>
 8009406:	2301      	movs	r3, #1
 8009408:	4652      	mov	r2, sl
 800940a:	4649      	mov	r1, r9
 800940c:	4638      	mov	r0, r7
 800940e:	47c0      	blx	r8
 8009410:	3001      	adds	r0, #1
 8009412:	d103      	bne.n	800941c <_printf_common+0xac>
 8009414:	f04f 30ff 	mov.w	r0, #4294967295
 8009418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800941c:	3501      	adds	r5, #1
 800941e:	e7c6      	b.n	80093ae <_printf_common+0x3e>
 8009420:	18e1      	adds	r1, r4, r3
 8009422:	1c5a      	adds	r2, r3, #1
 8009424:	2030      	movs	r0, #48	; 0x30
 8009426:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800942a:	4422      	add	r2, r4
 800942c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009430:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009434:	3302      	adds	r3, #2
 8009436:	e7c7      	b.n	80093c8 <_printf_common+0x58>
 8009438:	2301      	movs	r3, #1
 800943a:	4622      	mov	r2, r4
 800943c:	4649      	mov	r1, r9
 800943e:	4638      	mov	r0, r7
 8009440:	47c0      	blx	r8
 8009442:	3001      	adds	r0, #1
 8009444:	d0e6      	beq.n	8009414 <_printf_common+0xa4>
 8009446:	3601      	adds	r6, #1
 8009448:	e7d9      	b.n	80093fe <_printf_common+0x8e>
	...

0800944c <_printf_i>:
 800944c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009450:	7e0f      	ldrb	r7, [r1, #24]
 8009452:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009454:	2f78      	cmp	r7, #120	; 0x78
 8009456:	4691      	mov	r9, r2
 8009458:	4680      	mov	r8, r0
 800945a:	460c      	mov	r4, r1
 800945c:	469a      	mov	sl, r3
 800945e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009462:	d807      	bhi.n	8009474 <_printf_i+0x28>
 8009464:	2f62      	cmp	r7, #98	; 0x62
 8009466:	d80a      	bhi.n	800947e <_printf_i+0x32>
 8009468:	2f00      	cmp	r7, #0
 800946a:	f000 80d4 	beq.w	8009616 <_printf_i+0x1ca>
 800946e:	2f58      	cmp	r7, #88	; 0x58
 8009470:	f000 80c0 	beq.w	80095f4 <_printf_i+0x1a8>
 8009474:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009478:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800947c:	e03a      	b.n	80094f4 <_printf_i+0xa8>
 800947e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009482:	2b15      	cmp	r3, #21
 8009484:	d8f6      	bhi.n	8009474 <_printf_i+0x28>
 8009486:	a101      	add	r1, pc, #4	; (adr r1, 800948c <_printf_i+0x40>)
 8009488:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800948c:	080094e5 	.word	0x080094e5
 8009490:	080094f9 	.word	0x080094f9
 8009494:	08009475 	.word	0x08009475
 8009498:	08009475 	.word	0x08009475
 800949c:	08009475 	.word	0x08009475
 80094a0:	08009475 	.word	0x08009475
 80094a4:	080094f9 	.word	0x080094f9
 80094a8:	08009475 	.word	0x08009475
 80094ac:	08009475 	.word	0x08009475
 80094b0:	08009475 	.word	0x08009475
 80094b4:	08009475 	.word	0x08009475
 80094b8:	080095fd 	.word	0x080095fd
 80094bc:	08009525 	.word	0x08009525
 80094c0:	080095b7 	.word	0x080095b7
 80094c4:	08009475 	.word	0x08009475
 80094c8:	08009475 	.word	0x08009475
 80094cc:	0800961f 	.word	0x0800961f
 80094d0:	08009475 	.word	0x08009475
 80094d4:	08009525 	.word	0x08009525
 80094d8:	08009475 	.word	0x08009475
 80094dc:	08009475 	.word	0x08009475
 80094e0:	080095bf 	.word	0x080095bf
 80094e4:	682b      	ldr	r3, [r5, #0]
 80094e6:	1d1a      	adds	r2, r3, #4
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	602a      	str	r2, [r5, #0]
 80094ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80094f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80094f4:	2301      	movs	r3, #1
 80094f6:	e09f      	b.n	8009638 <_printf_i+0x1ec>
 80094f8:	6820      	ldr	r0, [r4, #0]
 80094fa:	682b      	ldr	r3, [r5, #0]
 80094fc:	0607      	lsls	r7, r0, #24
 80094fe:	f103 0104 	add.w	r1, r3, #4
 8009502:	6029      	str	r1, [r5, #0]
 8009504:	d501      	bpl.n	800950a <_printf_i+0xbe>
 8009506:	681e      	ldr	r6, [r3, #0]
 8009508:	e003      	b.n	8009512 <_printf_i+0xc6>
 800950a:	0646      	lsls	r6, r0, #25
 800950c:	d5fb      	bpl.n	8009506 <_printf_i+0xba>
 800950e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009512:	2e00      	cmp	r6, #0
 8009514:	da03      	bge.n	800951e <_printf_i+0xd2>
 8009516:	232d      	movs	r3, #45	; 0x2d
 8009518:	4276      	negs	r6, r6
 800951a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800951e:	485a      	ldr	r0, [pc, #360]	; (8009688 <_printf_i+0x23c>)
 8009520:	230a      	movs	r3, #10
 8009522:	e012      	b.n	800954a <_printf_i+0xfe>
 8009524:	682b      	ldr	r3, [r5, #0]
 8009526:	6820      	ldr	r0, [r4, #0]
 8009528:	1d19      	adds	r1, r3, #4
 800952a:	6029      	str	r1, [r5, #0]
 800952c:	0605      	lsls	r5, r0, #24
 800952e:	d501      	bpl.n	8009534 <_printf_i+0xe8>
 8009530:	681e      	ldr	r6, [r3, #0]
 8009532:	e002      	b.n	800953a <_printf_i+0xee>
 8009534:	0641      	lsls	r1, r0, #25
 8009536:	d5fb      	bpl.n	8009530 <_printf_i+0xe4>
 8009538:	881e      	ldrh	r6, [r3, #0]
 800953a:	4853      	ldr	r0, [pc, #332]	; (8009688 <_printf_i+0x23c>)
 800953c:	2f6f      	cmp	r7, #111	; 0x6f
 800953e:	bf0c      	ite	eq
 8009540:	2308      	moveq	r3, #8
 8009542:	230a      	movne	r3, #10
 8009544:	2100      	movs	r1, #0
 8009546:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800954a:	6865      	ldr	r5, [r4, #4]
 800954c:	60a5      	str	r5, [r4, #8]
 800954e:	2d00      	cmp	r5, #0
 8009550:	bfa2      	ittt	ge
 8009552:	6821      	ldrge	r1, [r4, #0]
 8009554:	f021 0104 	bicge.w	r1, r1, #4
 8009558:	6021      	strge	r1, [r4, #0]
 800955a:	b90e      	cbnz	r6, 8009560 <_printf_i+0x114>
 800955c:	2d00      	cmp	r5, #0
 800955e:	d04b      	beq.n	80095f8 <_printf_i+0x1ac>
 8009560:	4615      	mov	r5, r2
 8009562:	fbb6 f1f3 	udiv	r1, r6, r3
 8009566:	fb03 6711 	mls	r7, r3, r1, r6
 800956a:	5dc7      	ldrb	r7, [r0, r7]
 800956c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009570:	4637      	mov	r7, r6
 8009572:	42bb      	cmp	r3, r7
 8009574:	460e      	mov	r6, r1
 8009576:	d9f4      	bls.n	8009562 <_printf_i+0x116>
 8009578:	2b08      	cmp	r3, #8
 800957a:	d10b      	bne.n	8009594 <_printf_i+0x148>
 800957c:	6823      	ldr	r3, [r4, #0]
 800957e:	07de      	lsls	r6, r3, #31
 8009580:	d508      	bpl.n	8009594 <_printf_i+0x148>
 8009582:	6923      	ldr	r3, [r4, #16]
 8009584:	6861      	ldr	r1, [r4, #4]
 8009586:	4299      	cmp	r1, r3
 8009588:	bfde      	ittt	le
 800958a:	2330      	movle	r3, #48	; 0x30
 800958c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009590:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009594:	1b52      	subs	r2, r2, r5
 8009596:	6122      	str	r2, [r4, #16]
 8009598:	f8cd a000 	str.w	sl, [sp]
 800959c:	464b      	mov	r3, r9
 800959e:	aa03      	add	r2, sp, #12
 80095a0:	4621      	mov	r1, r4
 80095a2:	4640      	mov	r0, r8
 80095a4:	f7ff fee4 	bl	8009370 <_printf_common>
 80095a8:	3001      	adds	r0, #1
 80095aa:	d14a      	bne.n	8009642 <_printf_i+0x1f6>
 80095ac:	f04f 30ff 	mov.w	r0, #4294967295
 80095b0:	b004      	add	sp, #16
 80095b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095b6:	6823      	ldr	r3, [r4, #0]
 80095b8:	f043 0320 	orr.w	r3, r3, #32
 80095bc:	6023      	str	r3, [r4, #0]
 80095be:	4833      	ldr	r0, [pc, #204]	; (800968c <_printf_i+0x240>)
 80095c0:	2778      	movs	r7, #120	; 0x78
 80095c2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80095c6:	6823      	ldr	r3, [r4, #0]
 80095c8:	6829      	ldr	r1, [r5, #0]
 80095ca:	061f      	lsls	r7, r3, #24
 80095cc:	f851 6b04 	ldr.w	r6, [r1], #4
 80095d0:	d402      	bmi.n	80095d8 <_printf_i+0x18c>
 80095d2:	065f      	lsls	r7, r3, #25
 80095d4:	bf48      	it	mi
 80095d6:	b2b6      	uxthmi	r6, r6
 80095d8:	07df      	lsls	r7, r3, #31
 80095da:	bf48      	it	mi
 80095dc:	f043 0320 	orrmi.w	r3, r3, #32
 80095e0:	6029      	str	r1, [r5, #0]
 80095e2:	bf48      	it	mi
 80095e4:	6023      	strmi	r3, [r4, #0]
 80095e6:	b91e      	cbnz	r6, 80095f0 <_printf_i+0x1a4>
 80095e8:	6823      	ldr	r3, [r4, #0]
 80095ea:	f023 0320 	bic.w	r3, r3, #32
 80095ee:	6023      	str	r3, [r4, #0]
 80095f0:	2310      	movs	r3, #16
 80095f2:	e7a7      	b.n	8009544 <_printf_i+0xf8>
 80095f4:	4824      	ldr	r0, [pc, #144]	; (8009688 <_printf_i+0x23c>)
 80095f6:	e7e4      	b.n	80095c2 <_printf_i+0x176>
 80095f8:	4615      	mov	r5, r2
 80095fa:	e7bd      	b.n	8009578 <_printf_i+0x12c>
 80095fc:	682b      	ldr	r3, [r5, #0]
 80095fe:	6826      	ldr	r6, [r4, #0]
 8009600:	6961      	ldr	r1, [r4, #20]
 8009602:	1d18      	adds	r0, r3, #4
 8009604:	6028      	str	r0, [r5, #0]
 8009606:	0635      	lsls	r5, r6, #24
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	d501      	bpl.n	8009610 <_printf_i+0x1c4>
 800960c:	6019      	str	r1, [r3, #0]
 800960e:	e002      	b.n	8009616 <_printf_i+0x1ca>
 8009610:	0670      	lsls	r0, r6, #25
 8009612:	d5fb      	bpl.n	800960c <_printf_i+0x1c0>
 8009614:	8019      	strh	r1, [r3, #0]
 8009616:	2300      	movs	r3, #0
 8009618:	6123      	str	r3, [r4, #16]
 800961a:	4615      	mov	r5, r2
 800961c:	e7bc      	b.n	8009598 <_printf_i+0x14c>
 800961e:	682b      	ldr	r3, [r5, #0]
 8009620:	1d1a      	adds	r2, r3, #4
 8009622:	602a      	str	r2, [r5, #0]
 8009624:	681d      	ldr	r5, [r3, #0]
 8009626:	6862      	ldr	r2, [r4, #4]
 8009628:	2100      	movs	r1, #0
 800962a:	4628      	mov	r0, r5
 800962c:	f7f6 fde8 	bl	8000200 <memchr>
 8009630:	b108      	cbz	r0, 8009636 <_printf_i+0x1ea>
 8009632:	1b40      	subs	r0, r0, r5
 8009634:	6060      	str	r0, [r4, #4]
 8009636:	6863      	ldr	r3, [r4, #4]
 8009638:	6123      	str	r3, [r4, #16]
 800963a:	2300      	movs	r3, #0
 800963c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009640:	e7aa      	b.n	8009598 <_printf_i+0x14c>
 8009642:	6923      	ldr	r3, [r4, #16]
 8009644:	462a      	mov	r2, r5
 8009646:	4649      	mov	r1, r9
 8009648:	4640      	mov	r0, r8
 800964a:	47d0      	blx	sl
 800964c:	3001      	adds	r0, #1
 800964e:	d0ad      	beq.n	80095ac <_printf_i+0x160>
 8009650:	6823      	ldr	r3, [r4, #0]
 8009652:	079b      	lsls	r3, r3, #30
 8009654:	d413      	bmi.n	800967e <_printf_i+0x232>
 8009656:	68e0      	ldr	r0, [r4, #12]
 8009658:	9b03      	ldr	r3, [sp, #12]
 800965a:	4298      	cmp	r0, r3
 800965c:	bfb8      	it	lt
 800965e:	4618      	movlt	r0, r3
 8009660:	e7a6      	b.n	80095b0 <_printf_i+0x164>
 8009662:	2301      	movs	r3, #1
 8009664:	4632      	mov	r2, r6
 8009666:	4649      	mov	r1, r9
 8009668:	4640      	mov	r0, r8
 800966a:	47d0      	blx	sl
 800966c:	3001      	adds	r0, #1
 800966e:	d09d      	beq.n	80095ac <_printf_i+0x160>
 8009670:	3501      	adds	r5, #1
 8009672:	68e3      	ldr	r3, [r4, #12]
 8009674:	9903      	ldr	r1, [sp, #12]
 8009676:	1a5b      	subs	r3, r3, r1
 8009678:	42ab      	cmp	r3, r5
 800967a:	dcf2      	bgt.n	8009662 <_printf_i+0x216>
 800967c:	e7eb      	b.n	8009656 <_printf_i+0x20a>
 800967e:	2500      	movs	r5, #0
 8009680:	f104 0619 	add.w	r6, r4, #25
 8009684:	e7f5      	b.n	8009672 <_printf_i+0x226>
 8009686:	bf00      	nop
 8009688:	080098f3 	.word	0x080098f3
 800968c:	08009904 	.word	0x08009904

08009690 <__swhatbuf_r>:
 8009690:	b570      	push	{r4, r5, r6, lr}
 8009692:	460c      	mov	r4, r1
 8009694:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009698:	2900      	cmp	r1, #0
 800969a:	b096      	sub	sp, #88	; 0x58
 800969c:	4615      	mov	r5, r2
 800969e:	461e      	mov	r6, r3
 80096a0:	da0d      	bge.n	80096be <__swhatbuf_r+0x2e>
 80096a2:	89a3      	ldrh	r3, [r4, #12]
 80096a4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80096a8:	f04f 0100 	mov.w	r1, #0
 80096ac:	bf0c      	ite	eq
 80096ae:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80096b2:	2340      	movne	r3, #64	; 0x40
 80096b4:	2000      	movs	r0, #0
 80096b6:	6031      	str	r1, [r6, #0]
 80096b8:	602b      	str	r3, [r5, #0]
 80096ba:	b016      	add	sp, #88	; 0x58
 80096bc:	bd70      	pop	{r4, r5, r6, pc}
 80096be:	466a      	mov	r2, sp
 80096c0:	f000 f848 	bl	8009754 <_fstat_r>
 80096c4:	2800      	cmp	r0, #0
 80096c6:	dbec      	blt.n	80096a2 <__swhatbuf_r+0x12>
 80096c8:	9901      	ldr	r1, [sp, #4]
 80096ca:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80096ce:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80096d2:	4259      	negs	r1, r3
 80096d4:	4159      	adcs	r1, r3
 80096d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80096da:	e7eb      	b.n	80096b4 <__swhatbuf_r+0x24>

080096dc <__smakebuf_r>:
 80096dc:	898b      	ldrh	r3, [r1, #12]
 80096de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80096e0:	079d      	lsls	r5, r3, #30
 80096e2:	4606      	mov	r6, r0
 80096e4:	460c      	mov	r4, r1
 80096e6:	d507      	bpl.n	80096f8 <__smakebuf_r+0x1c>
 80096e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80096ec:	6023      	str	r3, [r4, #0]
 80096ee:	6123      	str	r3, [r4, #16]
 80096f0:	2301      	movs	r3, #1
 80096f2:	6163      	str	r3, [r4, #20]
 80096f4:	b002      	add	sp, #8
 80096f6:	bd70      	pop	{r4, r5, r6, pc}
 80096f8:	ab01      	add	r3, sp, #4
 80096fa:	466a      	mov	r2, sp
 80096fc:	f7ff ffc8 	bl	8009690 <__swhatbuf_r>
 8009700:	9900      	ldr	r1, [sp, #0]
 8009702:	4605      	mov	r5, r0
 8009704:	4630      	mov	r0, r6
 8009706:	f7ff f89f 	bl	8008848 <_malloc_r>
 800970a:	b948      	cbnz	r0, 8009720 <__smakebuf_r+0x44>
 800970c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009710:	059a      	lsls	r2, r3, #22
 8009712:	d4ef      	bmi.n	80096f4 <__smakebuf_r+0x18>
 8009714:	f023 0303 	bic.w	r3, r3, #3
 8009718:	f043 0302 	orr.w	r3, r3, #2
 800971c:	81a3      	strh	r3, [r4, #12]
 800971e:	e7e3      	b.n	80096e8 <__smakebuf_r+0xc>
 8009720:	89a3      	ldrh	r3, [r4, #12]
 8009722:	6020      	str	r0, [r4, #0]
 8009724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009728:	81a3      	strh	r3, [r4, #12]
 800972a:	9b00      	ldr	r3, [sp, #0]
 800972c:	6163      	str	r3, [r4, #20]
 800972e:	9b01      	ldr	r3, [sp, #4]
 8009730:	6120      	str	r0, [r4, #16]
 8009732:	b15b      	cbz	r3, 800974c <__smakebuf_r+0x70>
 8009734:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009738:	4630      	mov	r0, r6
 800973a:	f000 f81d 	bl	8009778 <_isatty_r>
 800973e:	b128      	cbz	r0, 800974c <__smakebuf_r+0x70>
 8009740:	89a3      	ldrh	r3, [r4, #12]
 8009742:	f023 0303 	bic.w	r3, r3, #3
 8009746:	f043 0301 	orr.w	r3, r3, #1
 800974a:	81a3      	strh	r3, [r4, #12]
 800974c:	89a3      	ldrh	r3, [r4, #12]
 800974e:	431d      	orrs	r5, r3
 8009750:	81a5      	strh	r5, [r4, #12]
 8009752:	e7cf      	b.n	80096f4 <__smakebuf_r+0x18>

08009754 <_fstat_r>:
 8009754:	b538      	push	{r3, r4, r5, lr}
 8009756:	4d07      	ldr	r5, [pc, #28]	; (8009774 <_fstat_r+0x20>)
 8009758:	2300      	movs	r3, #0
 800975a:	4604      	mov	r4, r0
 800975c:	4608      	mov	r0, r1
 800975e:	4611      	mov	r1, r2
 8009760:	602b      	str	r3, [r5, #0]
 8009762:	f7f7 fbc2 	bl	8000eea <_fstat>
 8009766:	1c43      	adds	r3, r0, #1
 8009768:	d102      	bne.n	8009770 <_fstat_r+0x1c>
 800976a:	682b      	ldr	r3, [r5, #0]
 800976c:	b103      	cbz	r3, 8009770 <_fstat_r+0x1c>
 800976e:	6023      	str	r3, [r4, #0]
 8009770:	bd38      	pop	{r3, r4, r5, pc}
 8009772:	bf00      	nop
 8009774:	20002078 	.word	0x20002078

08009778 <_isatty_r>:
 8009778:	b538      	push	{r3, r4, r5, lr}
 800977a:	4d06      	ldr	r5, [pc, #24]	; (8009794 <_isatty_r+0x1c>)
 800977c:	2300      	movs	r3, #0
 800977e:	4604      	mov	r4, r0
 8009780:	4608      	mov	r0, r1
 8009782:	602b      	str	r3, [r5, #0]
 8009784:	f7f7 fbb6 	bl	8000ef4 <_isatty>
 8009788:	1c43      	adds	r3, r0, #1
 800978a:	d102      	bne.n	8009792 <_isatty_r+0x1a>
 800978c:	682b      	ldr	r3, [r5, #0]
 800978e:	b103      	cbz	r3, 8009792 <_isatty_r+0x1a>
 8009790:	6023      	str	r3, [r4, #0]
 8009792:	bd38      	pop	{r3, r4, r5, pc}
 8009794:	20002078 	.word	0x20002078

08009798 <_init>:
 8009798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800979a:	bf00      	nop
 800979c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800979e:	bc08      	pop	{r3}
 80097a0:	469e      	mov	lr, r3
 80097a2:	4770      	bx	lr

080097a4 <_fini>:
 80097a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097a6:	bf00      	nop
 80097a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097aa:	bc08      	pop	{r3}
 80097ac:	469e      	mov	lr, r3
 80097ae:	4770      	bx	lr
