
Spokane_Application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009540  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  08009700  08009700  00019700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009884  08009884  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  08009884  08009884  00019884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800988c  0800988c  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800988c  0800988c  0001988c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009890  08009890  00019890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08009894  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ff4  2000008c  08009920  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00004000  20002080  08009920  00022080  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 13 .debug_info   000322bf  00000000  00000000  000200ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006b05  00000000  00000000  000523be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00012261  00000000  00000000  00058ec3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001bc8  00000000  00000000  0006b128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000152a  00000000  00000000  0006ccf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00031d86  00000000  00000000  0006e21a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000350c4  00000000  00000000  0009ffa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010e20b  00000000  00000000  000d5064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000052d0  00000000  00000000  001e3270  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000052  00000000  00000000  001e8540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080096e8 	.word	0x080096e8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000090 	.word	0x20000090
 80001fc:	080096e8 	.word	0x080096e8

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b970 	b.w	8000598 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	460f      	mov	r7, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4694      	mov	ip, r2
 80002e4:	d965      	bls.n	80003b2 <__udivmoddi4+0xe2>
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	b143      	cbz	r3, 80002fe <__udivmoddi4+0x2e>
 80002ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f0:	f1c3 0220 	rsb	r2, r3, #32
 80002f4:	409f      	lsls	r7, r3
 80002f6:	fa20 f202 	lsr.w	r2, r0, r2
 80002fa:	4317      	orrs	r7, r2
 80002fc:	409c      	lsls	r4, r3
 80002fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000302:	fa1f f58c 	uxth.w	r5, ip
 8000306:	fbb7 f1fe 	udiv	r1, r7, lr
 800030a:	0c22      	lsrs	r2, r4, #16
 800030c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	fb01 f005 	mul.w	r0, r1, r5
 8000318:	4290      	cmp	r0, r2
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x62>
 800031c:	eb1c 0202 	adds.w	r2, ip, r2
 8000320:	f101 37ff 	add.w	r7, r1, #4294967295
 8000324:	f080 811c 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000328:	4290      	cmp	r0, r2
 800032a:	f240 8119 	bls.w	8000560 <__udivmoddi4+0x290>
 800032e:	3902      	subs	r1, #2
 8000330:	4462      	add	r2, ip
 8000332:	1a12      	subs	r2, r2, r0
 8000334:	b2a4      	uxth	r4, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000342:	fb00 f505 	mul.w	r5, r0, r5
 8000346:	42a5      	cmp	r5, r4
 8000348:	d90a      	bls.n	8000360 <__udivmoddi4+0x90>
 800034a:	eb1c 0404 	adds.w	r4, ip, r4
 800034e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000352:	f080 8107 	bcs.w	8000564 <__udivmoddi4+0x294>
 8000356:	42a5      	cmp	r5, r4
 8000358:	f240 8104 	bls.w	8000564 <__udivmoddi4+0x294>
 800035c:	4464      	add	r4, ip
 800035e:	3802      	subs	r0, #2
 8000360:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000364:	1b64      	subs	r4, r4, r5
 8000366:	2100      	movs	r1, #0
 8000368:	b11e      	cbz	r6, 8000372 <__udivmoddi4+0xa2>
 800036a:	40dc      	lsrs	r4, r3
 800036c:	2300      	movs	r3, #0
 800036e:	e9c6 4300 	strd	r4, r3, [r6]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0xbc>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80ed 	beq.w	800055a <__udivmoddi4+0x28a>
 8000380:	2100      	movs	r1, #0
 8000382:	e9c6 0500 	strd	r0, r5, [r6]
 8000386:	4608      	mov	r0, r1
 8000388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038c:	fab3 f183 	clz	r1, r3
 8000390:	2900      	cmp	r1, #0
 8000392:	d149      	bne.n	8000428 <__udivmoddi4+0x158>
 8000394:	42ab      	cmp	r3, r5
 8000396:	d302      	bcc.n	800039e <__udivmoddi4+0xce>
 8000398:	4282      	cmp	r2, r0
 800039a:	f200 80f8 	bhi.w	800058e <__udivmoddi4+0x2be>
 800039e:	1a84      	subs	r4, r0, r2
 80003a0:	eb65 0203 	sbc.w	r2, r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	4617      	mov	r7, r2
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d0e2      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	e9c6 4700 	strd	r4, r7, [r6]
 80003b0:	e7df      	b.n	8000372 <__udivmoddi4+0xa2>
 80003b2:	b902      	cbnz	r2, 80003b6 <__udivmoddi4+0xe6>
 80003b4:	deff      	udf	#255	; 0xff
 80003b6:	fab2 f382 	clz	r3, r2
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8090 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c0:	1a8a      	subs	r2, r1, r2
 80003c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003c6:	fa1f fe8c 	uxth.w	lr, ip
 80003ca:	2101      	movs	r1, #1
 80003cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003d0:	fb07 2015 	mls	r0, r7, r5, r2
 80003d4:	0c22      	lsrs	r2, r4, #16
 80003d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003da:	fb0e f005 	mul.w	r0, lr, r5
 80003de:	4290      	cmp	r0, r2
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e2:	eb1c 0202 	adds.w	r2, ip, r2
 80003e6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4290      	cmp	r0, r2
 80003ee:	f200 80cb 	bhi.w	8000588 <__udivmoddi4+0x2b8>
 80003f2:	4645      	mov	r5, r8
 80003f4:	1a12      	subs	r2, r2, r0
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000400:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000404:	fb0e fe00 	mul.w	lr, lr, r0
 8000408:	45a6      	cmp	lr, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x14e>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f100 32ff 	add.w	r2, r0, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x14c>
 8000416:	45a6      	cmp	lr, r4
 8000418:	f200 80bb 	bhi.w	8000592 <__udivmoddi4+0x2c2>
 800041c:	4610      	mov	r0, r2
 800041e:	eba4 040e 	sub.w	r4, r4, lr
 8000422:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000426:	e79f      	b.n	8000368 <__udivmoddi4+0x98>
 8000428:	f1c1 0720 	rsb	r7, r1, #32
 800042c:	408b      	lsls	r3, r1
 800042e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000432:	ea4c 0c03 	orr.w	ip, ip, r3
 8000436:	fa05 f401 	lsl.w	r4, r5, r1
 800043a:	fa20 f307 	lsr.w	r3, r0, r7
 800043e:	40fd      	lsrs	r5, r7
 8000440:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000444:	4323      	orrs	r3, r4
 8000446:	fbb5 f8f9 	udiv	r8, r5, r9
 800044a:	fa1f fe8c 	uxth.w	lr, ip
 800044e:	fb09 5518 	mls	r5, r9, r8, r5
 8000452:	0c1c      	lsrs	r4, r3, #16
 8000454:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000458:	fb08 f50e 	mul.w	r5, r8, lr
 800045c:	42a5      	cmp	r5, r4
 800045e:	fa02 f201 	lsl.w	r2, r2, r1
 8000462:	fa00 f001 	lsl.w	r0, r0, r1
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000470:	f080 8088 	bcs.w	8000584 <__udivmoddi4+0x2b4>
 8000474:	42a5      	cmp	r5, r4
 8000476:	f240 8085 	bls.w	8000584 <__udivmoddi4+0x2b4>
 800047a:	f1a8 0802 	sub.w	r8, r8, #2
 800047e:	4464      	add	r4, ip
 8000480:	1b64      	subs	r4, r4, r5
 8000482:	b29d      	uxth	r5, r3
 8000484:	fbb4 f3f9 	udiv	r3, r4, r9
 8000488:	fb09 4413 	mls	r4, r9, r3, r4
 800048c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000490:	fb03 fe0e 	mul.w	lr, r3, lr
 8000494:	45a6      	cmp	lr, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f103 35ff 	add.w	r5, r3, #4294967295
 80004a0:	d26c      	bcs.n	800057c <__udivmoddi4+0x2ac>
 80004a2:	45a6      	cmp	lr, r4
 80004a4:	d96a      	bls.n	800057c <__udivmoddi4+0x2ac>
 80004a6:	3b02      	subs	r3, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ae:	fba3 9502 	umull	r9, r5, r3, r2
 80004b2:	eba4 040e 	sub.w	r4, r4, lr
 80004b6:	42ac      	cmp	r4, r5
 80004b8:	46c8      	mov	r8, r9
 80004ba:	46ae      	mov	lr, r5
 80004bc:	d356      	bcc.n	800056c <__udivmoddi4+0x29c>
 80004be:	d053      	beq.n	8000568 <__udivmoddi4+0x298>
 80004c0:	b156      	cbz	r6, 80004d8 <__udivmoddi4+0x208>
 80004c2:	ebb0 0208 	subs.w	r2, r0, r8
 80004c6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ca:	fa04 f707 	lsl.w	r7, r4, r7
 80004ce:	40ca      	lsrs	r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	4317      	orrs	r7, r2
 80004d4:	e9c6 7400 	strd	r7, r4, [r6]
 80004d8:	4618      	mov	r0, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e0:	f1c3 0120 	rsb	r1, r3, #32
 80004e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e8:	fa20 f201 	lsr.w	r2, r0, r1
 80004ec:	fa25 f101 	lsr.w	r1, r5, r1
 80004f0:	409d      	lsls	r5, r3
 80004f2:	432a      	orrs	r2, r5
 80004f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f8:	fa1f fe8c 	uxth.w	lr, ip
 80004fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000500:	fb07 1510 	mls	r5, r7, r0, r1
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800050a:	fb00 f50e 	mul.w	r5, r0, lr
 800050e:	428d      	cmp	r5, r1
 8000510:	fa04 f403 	lsl.w	r4, r4, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x258>
 8000516:	eb1c 0101 	adds.w	r1, ip, r1
 800051a:	f100 38ff 	add.w	r8, r0, #4294967295
 800051e:	d22f      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000520:	428d      	cmp	r5, r1
 8000522:	d92d      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000524:	3802      	subs	r0, #2
 8000526:	4461      	add	r1, ip
 8000528:	1b49      	subs	r1, r1, r5
 800052a:	b292      	uxth	r2, r2
 800052c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000530:	fb07 1115 	mls	r1, r7, r5, r1
 8000534:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000538:	fb05 f10e 	mul.w	r1, r5, lr
 800053c:	4291      	cmp	r1, r2
 800053e:	d908      	bls.n	8000552 <__udivmoddi4+0x282>
 8000540:	eb1c 0202 	adds.w	r2, ip, r2
 8000544:	f105 38ff 	add.w	r8, r5, #4294967295
 8000548:	d216      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 800054a:	4291      	cmp	r1, r2
 800054c:	d914      	bls.n	8000578 <__udivmoddi4+0x2a8>
 800054e:	3d02      	subs	r5, #2
 8000550:	4462      	add	r2, ip
 8000552:	1a52      	subs	r2, r2, r1
 8000554:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000558:	e738      	b.n	80003cc <__udivmoddi4+0xfc>
 800055a:	4631      	mov	r1, r6
 800055c:	4630      	mov	r0, r6
 800055e:	e708      	b.n	8000372 <__udivmoddi4+0xa2>
 8000560:	4639      	mov	r1, r7
 8000562:	e6e6      	b.n	8000332 <__udivmoddi4+0x62>
 8000564:	4610      	mov	r0, r2
 8000566:	e6fb      	b.n	8000360 <__udivmoddi4+0x90>
 8000568:	4548      	cmp	r0, r9
 800056a:	d2a9      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 800056c:	ebb9 0802 	subs.w	r8, r9, r2
 8000570:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000574:	3b01      	subs	r3, #1
 8000576:	e7a3      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000578:	4645      	mov	r5, r8
 800057a:	e7ea      	b.n	8000552 <__udivmoddi4+0x282>
 800057c:	462b      	mov	r3, r5
 800057e:	e794      	b.n	80004aa <__udivmoddi4+0x1da>
 8000580:	4640      	mov	r0, r8
 8000582:	e7d1      	b.n	8000528 <__udivmoddi4+0x258>
 8000584:	46d0      	mov	r8, sl
 8000586:	e77b      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000588:	3d02      	subs	r5, #2
 800058a:	4462      	add	r2, ip
 800058c:	e732      	b.n	80003f4 <__udivmoddi4+0x124>
 800058e:	4608      	mov	r0, r1
 8000590:	e70a      	b.n	80003a8 <__udivmoddi4+0xd8>
 8000592:	4464      	add	r4, ip
 8000594:	3802      	subs	r0, #2
 8000596:	e742      	b.n	800041e <__udivmoddi4+0x14e>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <Init_Some>:

/**
 * @brief Small state machine to conduct actions in steps. Also if I dont do it this way, the system hard faults.
 */
void Init_Some(void * Task_Data)//Is a task
{
 800059c:	b510      	push	{r4, lr}
	static int state = 0;
	uint8_t Status;
	switch(state)
 800059e:	4b47      	ldr	r3, [pc, #284]	; (80006bc <Init_Some+0x120>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	2b04      	cmp	r3, #4
 80005a4:	d810      	bhi.n	80005c8 <Init_Some+0x2c>
 80005a6:	e8df f003 	tbb	[pc, r3]
 80005aa:	1003      	.short	0x1003
 80005ac:	4f3a      	.short	0x4f3a
 80005ae:	5e          	.byte	0x5e
 80005af:	00          	.byte	0x00
	{
	case 0://HAL INIT
	{
	    printf("\033[2J\033[H");
 80005b0:	4843      	ldr	r0, [pc, #268]	; (80006c0 <Init_Some+0x124>)
 80005b2:	f008 faf5 	bl	8008ba0 <iprintf>
	    printf("Hello Hab\r\n");
 80005b6:	4843      	ldr	r0, [pc, #268]	; (80006c4 <Init_Some+0x128>)
 80005b8:	f008 fb58 	bl	8008c6c <puts>
	    initTest();
 80005bc:	f001 f974 	bl	80018a8 <initTest>
		state ++;
 80005c0:	4a3e      	ldr	r2, [pc, #248]	; (80006bc <Init_Some+0x120>)
 80005c2:	6813      	ldr	r3, [r2, #0]
 80005c4:	3301      	adds	r3, #1
 80005c6:	6013      	str	r3, [r2, #0]
		//HAL_GPIO_TogglePin (FLASH_CS_GPIO_Port, FLASH_CS_Pin);
		//HAL_Delay(100);
			break;
	}
	}
}
 80005c8:	bd10      	pop	{r4, pc}
		OSPI_Reset(&hospi1);//0xFF
 80005ca:	483f      	ldr	r0, [pc, #252]	; (80006c8 <Init_Some+0x12c>)
 80005cc:	f000 fff3 	bl	80015b6 <OSPI_Reset>
		while ((OSPI_Get_Features(&hospi1) & MT29F_STATUS_MASK_OIP) != 0);
 80005d0:	483d      	ldr	r0, [pc, #244]	; (80006c8 <Init_Some+0x12c>)
 80005d2:	f001 f810 	bl	80015f6 <OSPI_Get_Features>
 80005d6:	f010 0f01 	tst.w	r0, #1
 80005da:	d1f9      	bne.n	80005d0 <Init_Some+0x34>
		OSPI_WriteEnable(&hospi1);//0x06
 80005dc:	483a      	ldr	r0, [pc, #232]	; (80006c8 <Init_Some+0x12c>)
 80005de:	f001 f83e 	bl	800165e <OSPI_WriteEnable>
		    Status = OSPI_Get_Features(&hospi1);
 80005e2:	4839      	ldr	r0, [pc, #228]	; (80006c8 <Init_Some+0x12c>)
 80005e4:	f001 f807 	bl	80015f6 <OSPI_Get_Features>
		} while( ((Status & MT29F_STATUS_MASK_OIP) != 0) || ((Status & MT29F_STATUS_MASK_WEL) != MT29F_STATUS_MASK_WEL) );
 80005e8:	f000 0003 	and.w	r0, r0, #3
 80005ec:	2802      	cmp	r0, #2
 80005ee:	d1f8      	bne.n	80005e2 <Init_Some+0x46>
		OSPI_Erase_Block(&hospi1, ADDR);
 80005f0:	4b36      	ldr	r3, [pc, #216]	; (80006cc <Init_Some+0x130>)
 80005f2:	6819      	ldr	r1, [r3, #0]
 80005f4:	4834      	ldr	r0, [pc, #208]	; (80006c8 <Init_Some+0x12c>)
 80005f6:	f001 f84f 	bl	8001698 <OSPI_Erase_Block>
		    Status = OSPI_Get_Features(&hospi1);
 80005fa:	4833      	ldr	r0, [pc, #204]	; (80006c8 <Init_Some+0x12c>)
 80005fc:	f000 fffb 	bl	80015f6 <OSPI_Get_Features>
		} while ((Status & MT29F_STATUS_MASK_OIP) != 0);
 8000600:	f010 0f01 	tst.w	r0, #1
 8000604:	d1f9      	bne.n	80005fa <Init_Some+0x5e>
		if (Status & MT29F_STATUS_MASK_E_FAIL)
 8000606:	f010 0f04 	tst.w	r0, #4
 800060a:	d104      	bne.n	8000616 <Init_Some+0x7a>
		state ++;
 800060c:	4a2b      	ldr	r2, [pc, #172]	; (80006bc <Init_Some+0x120>)
 800060e:	6813      	ldr	r3, [r2, #0]
 8000610:	3301      	adds	r3, #1
 8000612:	6013      	str	r3, [r2, #0]
		break;
 8000614:	e7d8      	b.n	80005c8 <Init_Some+0x2c>
		    printf("ERROR: Fail to erase block\r\n");
 8000616:	482e      	ldr	r0, [pc, #184]	; (80006d0 <Init_Some+0x134>)
 8000618:	f008 fb28 	bl	8008c6c <puts>
 800061c:	e7f6      	b.n	800060c <Init_Some+0x70>
		OSPI_WriteEnable(&hospi1);//0x06
 800061e:	4c2a      	ldr	r4, [pc, #168]	; (80006c8 <Init_Some+0x12c>)
 8000620:	4620      	mov	r0, r4
 8000622:	f001 f81c 	bl	800165e <OSPI_WriteEnable>
		OSPI_Get_Features(&hospi1);//0x0f
 8000626:	4620      	mov	r0, r4
 8000628:	f000 ffe5 	bl	80015f6 <OSPI_Get_Features>
		OSPI_Program_Load(&hospi1);//0x02
 800062c:	4620      	mov	r0, r4
 800062e:	f001 f859 	bl	80016e4 <OSPI_Program_Load>
		OSPI_Program_Execute(&hospi1);//0x10
 8000632:	4620      	mov	r0, r4
 8000634:	f001 f890 	bl	8001758 <OSPI_Program_Execute>
		OSPI_Get_Features(&hospi1);//0x0f
 8000638:	4620      	mov	r0, r4
 800063a:	f000 ffdc 	bl	80015f6 <OSPI_Get_Features>
		state ++;
 800063e:	4a1f      	ldr	r2, [pc, #124]	; (80006bc <Init_Some+0x120>)
 8000640:	6813      	ldr	r3, [r2, #0]
 8000642:	3301      	adds	r3, #1
 8000644:	6013      	str	r3, [r2, #0]
		break;
 8000646:	e7bf      	b.n	80005c8 <Init_Some+0x2c>
		OSPI_Page_Read(&hospi1);//0x13
 8000648:	4c1f      	ldr	r4, [pc, #124]	; (80006c8 <Init_Some+0x12c>)
 800064a:	4620      	mov	r0, r4
 800064c:	f001 f8ae 	bl	80017ac <OSPI_Page_Read>
		OSPI_Get_Features(&hospi1);//0x0f
 8000650:	4620      	mov	r0, r4
 8000652:	f000 ffd0 	bl	80015f6 <OSPI_Get_Features>
		OSPI_Read_Cache_X4(&hospi1);//0x0B
 8000656:	4620      	mov	r0, r4
 8000658:	f001 f8d2 	bl	8001800 <OSPI_Read_Cache_X4>
		state ++;
 800065c:	4a17      	ldr	r2, [pc, #92]	; (80006bc <Init_Some+0x120>)
 800065e:	6813      	ldr	r3, [r2, #0]
 8000660:	3301      	adds	r3, #1
 8000662:	6013      	str	r3, [r2, #0]
		break;
 8000664:	e7b0      	b.n	80005c8 <Init_Some+0x2c>
	    ReadWriteCount++;
 8000666:	4a1b      	ldr	r2, [pc, #108]	; (80006d4 <Init_Some+0x138>)
 8000668:	6813      	ldr	r3, [r2, #0]
 800066a:	3301      	adds	r3, #1
 800066c:	6013      	str	r3, [r2, #0]
	    if (readWriteCompare())
 800066e:	f001 f901 	bl	8001874 <readWriteCompare>
 8000672:	b1c8      	cbz	r0, 80006a8 <Init_Some+0x10c>
	        printf("OK Addr: %d  Count: %d\r\n", (int)ADDR, (int)ReadWriteCount);
 8000674:	4b17      	ldr	r3, [pc, #92]	; (80006d4 <Init_Some+0x138>)
 8000676:	681a      	ldr	r2, [r3, #0]
 8000678:	4b14      	ldr	r3, [pc, #80]	; (80006cc <Init_Some+0x130>)
 800067a:	6819      	ldr	r1, [r3, #0]
 800067c:	4816      	ldr	r0, [pc, #88]	; (80006d8 <Init_Some+0x13c>)
 800067e:	f008 fa8f 	bl	8008ba0 <iprintf>
	    prepareForCompare();
 8000682:	f001 f907 	bl	8001894 <prepareForCompare>
	    STATUS_LED_TOGGLE();
 8000686:	2102      	movs	r1, #2
 8000688:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800068c:	f001 fce3 	bl	8002056 <HAL_GPIO_TogglePin>
	    ADDR += 2048;
 8000690:	4a0e      	ldr	r2, [pc, #56]	; (80006cc <Init_Some+0x130>)
 8000692:	6813      	ldr	r3, [r2, #0]
 8000694:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000698:	6013      	str	r3, [r2, #0]
	    if (ADDR >= 268435456)
 800069a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800069e:	d209      	bcs.n	80006b4 <Init_Some+0x118>
	    state = 2;
 80006a0:	4b06      	ldr	r3, [pc, #24]	; (80006bc <Init_Some+0x120>)
 80006a2:	2202      	movs	r2, #2
 80006a4:	601a      	str	r2, [r3, #0]
}
 80006a6:	e78f      	b.n	80005c8 <Init_Some+0x2c>
            printf("ERROR Addr: %d\r\n", (int)ADDR);
 80006a8:	4b08      	ldr	r3, [pc, #32]	; (80006cc <Init_Some+0x130>)
 80006aa:	6819      	ldr	r1, [r3, #0]
 80006ac:	480b      	ldr	r0, [pc, #44]	; (80006dc <Init_Some+0x140>)
 80006ae:	f008 fa77 	bl	8008ba0 <iprintf>
 80006b2:	e7e6      	b.n	8000682 <Init_Some+0xe6>
	        printf("End of memory reached\r\n");
 80006b4:	480a      	ldr	r0, [pc, #40]	; (80006e0 <Init_Some+0x144>)
 80006b6:	f008 fad9 	bl	8008c6c <puts>
	        while(1);
 80006ba:	e7fe      	b.n	80006ba <Init_Some+0x11e>
 80006bc:	200000a8 	.word	0x200000a8
 80006c0:	08009700 	.word	0x08009700
 80006c4:	08009708 	.word	0x08009708
 80006c8:	20000160 	.word	0x20000160
 80006cc:	20000818 	.word	0x20000818
 80006d0:	08009714 	.word	0x08009714
 80006d4:	2000081c 	.word	0x2000081c
 80006d8:	08009730 	.word	0x08009730
 80006dc:	0800974c 	.word	0x0800974c
 80006e0:	08009760 	.word	0x08009760

080006e4 <Debug_Task>:
{
 80006e4:	b508      	push	{r3, lr}
	Start_Task(Init_Some, NULL, 0);//start the state machiene
 80006e6:	2200      	movs	r2, #0
 80006e8:	4611      	mov	r1, r2
 80006ea:	4802      	ldr	r0, [pc, #8]	; (80006f4 <Debug_Task+0x10>)
 80006ec:	f007 fd8c 	bl	8008208 <Start_Task>
}
 80006f0:	bd08      	pop	{r3, pc}
 80006f2:	bf00      	nop
 80006f4:	0800059d 	.word	0x0800059d

080006f8 <_write>:

int _write(int file, char *ptr, int len)
{
 80006f8:	b510      	push	{r4, lr}
 80006fa:	4614      	mov	r4, r2
    if (HAL_UART_Transmit_IT(&huart2, (uint8_t *)ptr, len) != HAL_OK)
 80006fc:	b292      	uxth	r2, r2
 80006fe:	4804      	ldr	r0, [pc, #16]	; (8000710 <_write+0x18>)
 8000700:	f004 fc22 	bl	8004f48 <HAL_UART_Transmit_IT>
 8000704:	b908      	cbnz	r0, 800070a <_write+0x12>
        Error_Handler();
    }
//    HAL_Delay(10);
    return(len);

} // END OF _write
 8000706:	4620      	mov	r0, r4
 8000708:	bd10      	pop	{r4, pc}
        Error_Handler();
 800070a:	f000 f973 	bl	80009f4 <Error_Handler>
 800070e:	e7fa      	b.n	8000706 <_write+0xe>
 8000710:	200005d8 	.word	0x200005d8

08000714 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000714:	b500      	push	{lr}
 8000716:	b085      	sub	sp, #20

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000718:	4b3b      	ldr	r3, [pc, #236]	; (8000808 <MX_DMA_Init+0xf4>)
 800071a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800071c:	f042 0204 	orr.w	r2, r2, #4
 8000720:	649a      	str	r2, [r3, #72]	; 0x48
 8000722:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000724:	f002 0204 	and.w	r2, r2, #4
 8000728:	9201      	str	r2, [sp, #4]
 800072a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800072c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800072e:	f042 0201 	orr.w	r2, r2, #1
 8000732:	649a      	str	r2, [r3, #72]	; 0x48
 8000734:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000736:	f002 0201 	and.w	r2, r2, #1
 800073a:	9202      	str	r2, [sp, #8]
 800073c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800073e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000740:	f042 0202 	orr.w	r2, r2, #2
 8000744:	649a      	str	r2, [r3, #72]	; 0x48
 8000746:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000748:	f003 0302 	and.w	r3, r3, #2
 800074c:	9303      	str	r3, [sp, #12]
 800074e:	9b03      	ldr	r3, [sp, #12]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000750:	2200      	movs	r2, #0
 8000752:	4611      	mov	r1, r2
 8000754:	200b      	movs	r0, #11
 8000756:	f001 f93d 	bl	80019d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800075a:	200b      	movs	r0, #11
 800075c:	f001 f972 	bl	8001a44 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000760:	2200      	movs	r2, #0
 8000762:	4611      	mov	r1, r2
 8000764:	200c      	movs	r0, #12
 8000766:	f001 f935 	bl	80019d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800076a:	200c      	movs	r0, #12
 800076c:	f001 f96a 	bl	8001a44 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000770:	2200      	movs	r2, #0
 8000772:	4611      	mov	r1, r2
 8000774:	200d      	movs	r0, #13
 8000776:	f001 f92d 	bl	80019d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800077a:	200d      	movs	r0, #13
 800077c:	f001 f962 	bl	8001a44 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000780:	2200      	movs	r2, #0
 8000782:	4611      	mov	r1, r2
 8000784:	200e      	movs	r0, #14
 8000786:	f001 f925 	bl	80019d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800078a:	200e      	movs	r0, #14
 800078c:	f001 f95a 	bl	8001a44 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000790:	2200      	movs	r2, #0
 8000792:	4611      	mov	r1, r2
 8000794:	200f      	movs	r0, #15
 8000796:	f001 f91d 	bl	80019d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800079a:	200f      	movs	r0, #15
 800079c:	f001 f952 	bl	8001a44 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80007a0:	2200      	movs	r2, #0
 80007a2:	4611      	mov	r1, r2
 80007a4:	2010      	movs	r0, #16
 80007a6:	f001 f915 	bl	80019d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80007aa:	2010      	movs	r0, #16
 80007ac:	f001 f94a 	bl	8001a44 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80007b0:	2200      	movs	r2, #0
 80007b2:	4611      	mov	r1, r2
 80007b4:	2011      	movs	r0, #17
 80007b6:	f001 f90d 	bl	80019d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80007ba:	2011      	movs	r0, #17
 80007bc:	f001 f942 	bl	8001a44 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 80007c0:	2200      	movs	r2, #0
 80007c2:	4611      	mov	r1, r2
 80007c4:	2038      	movs	r0, #56	; 0x38
 80007c6:	f001 f905 	bl	80019d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 80007ca:	2038      	movs	r0, #56	; 0x38
 80007cc:	f001 f93a 	bl	8001a44 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 80007d0:	2200      	movs	r2, #0
 80007d2:	4611      	mov	r1, r2
 80007d4:	2039      	movs	r0, #57	; 0x39
 80007d6:	f001 f8fd 	bl	80019d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 80007da:	2039      	movs	r0, #57	; 0x39
 80007dc:	f001 f932 	bl	8001a44 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 80007e0:	2200      	movs	r2, #0
 80007e2:	4611      	mov	r1, r2
 80007e4:	203a      	movs	r0, #58	; 0x3a
 80007e6:	f001 f8f5 	bl	80019d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 80007ea:	203a      	movs	r0, #58	; 0x3a
 80007ec:	f001 f92a 	bl	8001a44 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 0, 0);
 80007f0:	2200      	movs	r2, #0
 80007f2:	4611      	mov	r1, r2
 80007f4:	203b      	movs	r0, #59	; 0x3b
 80007f6:	f001 f8ed 	bl	80019d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 80007fa:	203b      	movs	r0, #59	; 0x3b
 80007fc:	f001 f922 	bl	8001a44 <HAL_NVIC_EnableIRQ>

}
 8000800:	b005      	add	sp, #20
 8000802:	f85d fb04 	ldr.w	pc, [sp], #4
 8000806:	bf00      	nop
 8000808:	40021000 	.word	0x40021000

0800080c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800080c:	b570      	push	{r4, r5, r6, lr}
 800080e:	b08c      	sub	sp, #48	; 0x30

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000810:	2400      	movs	r4, #0
 8000812:	9407      	str	r4, [sp, #28]
 8000814:	9408      	str	r4, [sp, #32]
 8000816:	9409      	str	r4, [sp, #36]	; 0x24
 8000818:	940a      	str	r4, [sp, #40]	; 0x28
 800081a:	940b      	str	r4, [sp, #44]	; 0x2c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800081c:	4b39      	ldr	r3, [pc, #228]	; (8000904 <MX_GPIO_Init+0xf8>)
 800081e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000820:	f042 0210 	orr.w	r2, r2, #16
 8000824:	64da      	str	r2, [r3, #76]	; 0x4c
 8000826:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000828:	f002 0210 	and.w	r2, r2, #16
 800082c:	9201      	str	r2, [sp, #4]
 800082e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000830:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000832:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000836:	64da      	str	r2, [r3, #76]	; 0x4c
 8000838:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800083a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800083e:	9202      	str	r2, [sp, #8]
 8000840:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000842:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000844:	f042 0201 	orr.w	r2, r2, #1
 8000848:	64da      	str	r2, [r3, #76]	; 0x4c
 800084a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800084c:	f002 0201 	and.w	r2, r2, #1
 8000850:	9203      	str	r2, [sp, #12]
 8000852:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000854:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000856:	f042 0204 	orr.w	r2, r2, #4
 800085a:	64da      	str	r2, [r3, #76]	; 0x4c
 800085c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800085e:	f002 0204 	and.w	r2, r2, #4
 8000862:	9204      	str	r2, [sp, #16]
 8000864:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000866:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000868:	f042 0202 	orr.w	r2, r2, #2
 800086c:	64da      	str	r2, [r3, #76]	; 0x4c
 800086e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000870:	f002 0202 	and.w	r2, r2, #2
 8000874:	9205      	str	r2, [sp, #20]
 8000876:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000878:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800087a:	f042 0208 	orr.w	r2, r2, #8
 800087e:	64da      	str	r2, [r3, #76]	; 0x4c
 8000880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000882:	f003 0308 	and.w	r3, r3, #8
 8000886:	9306      	str	r3, [sp, #24]
 8000888:	9b06      	ldr	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LTE_DTR_Pin|LTE_RESET_Pin|GPS_RESET_Pin|GPS_WAKE_Pin
 800088a:	4d1f      	ldr	r5, [pc, #124]	; (8000908 <MX_GPIO_Init+0xfc>)
 800088c:	4622      	mov	r2, r4
 800088e:	f240 216f 	movw	r1, #623	; 0x26f
 8000892:	4628      	mov	r0, r5
 8000894:	f001 fbda 	bl	800204c <HAL_GPIO_WritePin>
                          |VBUS_ENB_Pin|LTE_PWR_EN_Pin|LTE_ON_OFF_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TH_Pin|nLED_Pin, GPIO_PIN_RESET);
 8000898:	4622      	mov	r2, r4
 800089a:	2103      	movs	r1, #3
 800089c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008a0:	f001 fbd4 	bl	800204c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(n_FORCEOFF_GPIO_Port, n_FORCEOFF_Pin, GPIO_PIN_SET);
 80008a4:	2201      	movs	r2, #1
 80008a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008aa:	4628      	mov	r0, r5
 80008ac:	f001 fbce 	bl	800204c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = LTE_DTR_Pin|LTE_RESET_Pin|GPS_RESET_Pin|LTE_ON_OFF_Pin;
 80008b0:	232e      	movs	r3, #46	; 0x2e
 80008b2:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80008b4:	2311      	movs	r3, #17
 80008b6:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ba:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008bc:	a907      	add	r1, sp, #28
 80008be:	4628      	mov	r0, r5
 80008c0:	f001 facc 	bl	8001e5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = LTE_ON_SLEEP_Pin|GPS_JAM_Pin|GPS_3D_FIX_Pin|VBUS_DETECT_Pin
 80008c4:	f44f 6359 	mov.w	r3, #3472	; 0xd90
 80008c8:	9307      	str	r3, [sp, #28]
                          |MagO_INT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ca:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008ce:	a907      	add	r1, sp, #28
 80008d0:	4628      	mov	r0, r5
 80008d2:	f001 fac3 	bl	8001e5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = GPS_WAKE_Pin|VBUS_ENB_Pin|n_FORCEOFF_Pin|LTE_PWR_EN_Pin;
 80008d6:	f241 2341 	movw	r3, #4673	; 0x1241
 80008da:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008dc:	2601      	movs	r6, #1
 80008de:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e2:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008e4:	a907      	add	r1, sp, #28
 80008e6:	4628      	mov	r0, r5
 80008e8:	f001 fab8 	bl	8001e5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = TH_Pin|nLED_Pin;
 80008ec:	2303      	movs	r3, #3
 80008ee:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f0:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f4:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f6:	a907      	add	r1, sp, #28
 80008f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008fc:	f001 faae 	bl	8001e5c <HAL_GPIO_Init>

}
 8000900:	b00c      	add	sp, #48	; 0x30
 8000902:	bd70      	pop	{r4, r5, r6, pc}
 8000904:	40021000 	.word	0x40021000
 8000908:	48001000 	.word	0x48001000

0800090c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800090c:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800090e:	4815      	ldr	r0, [pc, #84]	; (8000964 <MX_I2C1_Init+0x58>)
 8000910:	4b15      	ldr	r3, [pc, #84]	; (8000968 <MX_I2C1_Init+0x5c>)
 8000912:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8000914:	f1a3 6378 	sub.w	r3, r3, #260046848	; 0xf800000
 8000918:	f5a3 237d 	sub.w	r3, r3, #1036288	; 0xfd000
 800091c:	f6a3 634f 	subw	r3, r3, #3663	; 0xe4f
 8000920:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000922:	2300      	movs	r3, #0
 8000924:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000926:	2201      	movs	r2, #1
 8000928:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800092a:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800092c:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800092e:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000930:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000932:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000934:	f002 f905 	bl	8002b42 <HAL_I2C_Init>
 8000938:	b950      	cbnz	r0, 8000950 <MX_I2C1_Init+0x44>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800093a:	2100      	movs	r1, #0
 800093c:	4809      	ldr	r0, [pc, #36]	; (8000964 <MX_I2C1_Init+0x58>)
 800093e:	f002 f95e 	bl	8002bfe <HAL_I2CEx_ConfigAnalogFilter>
 8000942:	b940      	cbnz	r0, 8000956 <MX_I2C1_Init+0x4a>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000944:	2100      	movs	r1, #0
 8000946:	4807      	ldr	r0, [pc, #28]	; (8000964 <MX_I2C1_Init+0x58>)
 8000948:	f002 f987 	bl	8002c5a <HAL_I2CEx_ConfigDigitalFilter>
 800094c:	b930      	cbnz	r0, 800095c <MX_I2C1_Init+0x50>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800094e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000950:	f000 f850 	bl	80009f4 <Error_Handler>
 8000954:	e7f1      	b.n	800093a <MX_I2C1_Init+0x2e>
    Error_Handler();
 8000956:	f000 f84d 	bl	80009f4 <Error_Handler>
 800095a:	e7f3      	b.n	8000944 <MX_I2C1_Init+0x38>
    Error_Handler();
 800095c:	f000 f84a 	bl	80009f4 <Error_Handler>
}
 8000960:	e7f5      	b.n	800094e <MX_I2C1_Init+0x42>
 8000962:	bf00      	nop
 8000964:	200000ac 	.word	0x200000ac
 8000968:	40005400 	.word	0x40005400

0800096c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800096c:	b510      	push	{r4, lr}
 800096e:	b0ac      	sub	sp, #176	; 0xb0
 8000970:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000972:	2100      	movs	r1, #0
 8000974:	9127      	str	r1, [sp, #156]	; 0x9c
 8000976:	9128      	str	r1, [sp, #160]	; 0xa0
 8000978:	9129      	str	r1, [sp, #164]	; 0xa4
 800097a:	912a      	str	r1, [sp, #168]	; 0xa8
 800097c:	912b      	str	r1, [sp, #172]	; 0xac
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800097e:	2294      	movs	r2, #148	; 0x94
 8000980:	a802      	add	r0, sp, #8
 8000982:	f008 fa53 	bl	8008e2c <memset>
  if(i2cHandle->Instance==I2C1)
 8000986:	6822      	ldr	r2, [r4, #0]
 8000988:	4b17      	ldr	r3, [pc, #92]	; (80009e8 <HAL_I2C_MspInit+0x7c>)
 800098a:	429a      	cmp	r2, r3
 800098c:	d001      	beq.n	8000992 <HAL_I2C_MspInit+0x26>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800098e:	b02c      	add	sp, #176	; 0xb0
 8000990:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000992:	2340      	movs	r3, #64	; 0x40
 8000994:	9302      	str	r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000996:	a802      	add	r0, sp, #8
 8000998:	f003 fe50 	bl	800463c <HAL_RCCEx_PeriphCLKConfig>
 800099c:	bb08      	cbnz	r0, 80009e2 <HAL_I2C_MspInit+0x76>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800099e:	4c13      	ldr	r4, [pc, #76]	; (80009ec <HAL_I2C_MspInit+0x80>)
 80009a0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80009a2:	f043 0302 	orr.w	r3, r3, #2
 80009a6:	64e3      	str	r3, [r4, #76]	; 0x4c
 80009a8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80009aa:	f003 0302 	and.w	r3, r3, #2
 80009ae:	9300      	str	r3, [sp, #0]
 80009b0:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = MagO_I2C1_SCL_Pin|MagO_I2C1_SDA_Pin;
 80009b2:	23c0      	movs	r3, #192	; 0xc0
 80009b4:	9327      	str	r3, [sp, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009b6:	2312      	movs	r3, #18
 80009b8:	9328      	str	r3, [sp, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	9329      	str	r3, [sp, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009be:	2303      	movs	r3, #3
 80009c0:	932a      	str	r3, [sp, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009c2:	2304      	movs	r3, #4
 80009c4:	932b      	str	r3, [sp, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c6:	a927      	add	r1, sp, #156	; 0x9c
 80009c8:	4809      	ldr	r0, [pc, #36]	; (80009f0 <HAL_I2C_MspInit+0x84>)
 80009ca:	f001 fa47 	bl	8001e5c <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80009d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009d4:	65a3      	str	r3, [r4, #88]	; 0x58
 80009d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80009d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009dc:	9301      	str	r3, [sp, #4]
 80009de:	9b01      	ldr	r3, [sp, #4]
}
 80009e0:	e7d5      	b.n	800098e <HAL_I2C_MspInit+0x22>
      Error_Handler();
 80009e2:	f000 f807 	bl	80009f4 <Error_Handler>
 80009e6:	e7da      	b.n	800099e <HAL_I2C_MspInit+0x32>
 80009e8:	40005400 	.word	0x40005400
 80009ec:	40021000 	.word	0x40021000
 80009f0:	48000400 	.word	0x48000400

080009f4 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f4:	b672      	cpsid	i
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();

  while (1)
 80009f6:	e7fe      	b.n	80009f6 <Error_Handler+0x2>

080009f8 <SystemClock_Config>:
{
 80009f8:	b500      	push	{lr}
 80009fa:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009fc:	2244      	movs	r2, #68	; 0x44
 80009fe:	2100      	movs	r1, #0
 8000a00:	a805      	add	r0, sp, #20
 8000a02:	f008 fa13 	bl	8008e2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a06:	2000      	movs	r0, #0
 8000a08:	9000      	str	r0, [sp, #0]
 8000a0a:	9001      	str	r0, [sp, #4]
 8000a0c:	9002      	str	r0, [sp, #8]
 8000a0e:	9003      	str	r0, [sp, #12]
 8000a10:	9004      	str	r0, [sp, #16]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000a12:	f002 fed5 	bl	80037c0 <HAL_PWREx_ControlVoltageScaling>
 8000a16:	bb10      	cbnz	r0, 8000a5e <SystemClock_Config+0x66>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a18:	2201      	movs	r2, #1
 8000a1a:	9205      	str	r2, [sp, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a20:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a22:	2302      	movs	r3, #2
 8000a24:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a26:	2103      	movs	r1, #3
 8000a28:	9110      	str	r1, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a2a:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 8000a2c:	221e      	movs	r2, #30
 8000a2e:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a30:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a32:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a34:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a36:	a805      	add	r0, sp, #20
 8000a38:	f003 f82e 	bl	8003a98 <HAL_RCC_OscConfig>
 8000a3c:	b988      	cbnz	r0, 8000a62 <SystemClock_Config+0x6a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a3e:	230f      	movs	r3, #15
 8000a40:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a42:	2303      	movs	r3, #3
 8000a44:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a46:	2300      	movs	r3, #0
 8000a48:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a4a:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a4c:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a4e:	2105      	movs	r1, #5
 8000a50:	4668      	mov	r0, sp
 8000a52:	f003 fb5f 	bl	8004114 <HAL_RCC_ClockConfig>
 8000a56:	b930      	cbnz	r0, 8000a66 <SystemClock_Config+0x6e>
}
 8000a58:	b017      	add	sp, #92	; 0x5c
 8000a5a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000a5e:	f7ff ffc9 	bl	80009f4 <Error_Handler>
    Error_Handler();
 8000a62:	f7ff ffc7 	bl	80009f4 <Error_Handler>
    Error_Handler();
 8000a66:	f7ff ffc5 	bl	80009f4 <Error_Handler>

08000a6a <main>:
{
 8000a6a:	b508      	push	{r3, lr}
  HAL_Init();
 8000a6c:	f000 ff6a 	bl	8001944 <HAL_Init>
  SystemClock_Config();
 8000a70:	f7ff ffc2 	bl	80009f8 <SystemClock_Config>
  MX_GPIO_Init();
 8000a74:	f7ff feca 	bl	800080c <MX_GPIO_Init>
  MX_DMA_Init();
 8000a78:	f7ff fe4c 	bl	8000714 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000a7c:	f000 fb1a 	bl	80010b4 <MX_USART3_UART_Init>
  MX_SPI2_Init();
 8000a80:	f000 f8e0 	bl	8000c44 <MX_SPI2_Init>
  MX_I2C1_Init();
 8000a84:	f7ff ff42 	bl	800090c <MX_I2C1_Init>
  MX_OCTOSPI1_Init();
 8000a88:	f000 f814 	bl	8000ab4 <MX_OCTOSPI1_Init>
  MX_UART4_Init();
 8000a8c:	f000 fa74 	bl	8000f78 <MX_UART4_Init>
  MX_UART5_Init();
 8000a90:	f000 faa6 	bl	8000fe0 <MX_UART5_Init>
  MX_USART2_UART_Init();
 8000a94:	f000 fada 	bl	800104c <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8000a98:	f005 fd14 	bl	80064c4 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 8000a9c:	f007 fcb0 	bl	8008400 <MX_USB_HOST_Init>
  Start_Scheduler();
 8000aa0:	f007 fbfc 	bl	800829c <Start_Scheduler>
  Debug_Task();
 8000aa4:	f7ff fe1e 	bl	80006e4 <Debug_Task>
    MX_USB_HOST_Process();
 8000aa8:	f007 fcca 	bl	8008440 <MX_USB_HOST_Process>
	  Run_Scheduler_Tasks();
 8000aac:	f007 fb46 	bl	800813c <Run_Scheduler_Tasks>
  while (1)
 8000ab0:	e7fa      	b.n	8000aa8 <main+0x3e>
	...

08000ab4 <MX_OCTOSPI1_Init>:
OSPI_HandleTypeDef hospi1;
DMA_HandleTypeDef hdma_octospi1;

/* OCTOSPI1 init function */
void MX_OCTOSPI1_Init(void)
{
 8000ab4:	b500      	push	{lr}
 8000ab6:	b087      	sub	sp, #28

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 8000ab8:	2300      	movs	r3, #0
 8000aba:	9301      	str	r3, [sp, #4]
 8000abc:	9302      	str	r3, [sp, #8]
 8000abe:	9303      	str	r3, [sp, #12]
 8000ac0:	9304      	str	r3, [sp, #16]
 8000ac2:	9305      	str	r3, [sp, #20]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  hospi1.Instance = OCTOSPI1;
 8000ac4:	4818      	ldr	r0, [pc, #96]	; (8000b28 <MX_OCTOSPI1_Init+0x74>)
 8000ac6:	4a19      	ldr	r2, [pc, #100]	; (8000b2c <MX_OCTOSPI1_Init+0x78>)
 8000ac8:	6002      	str	r2, [r0, #0]
  hospi1.Init.FifoThreshold = 1;
 8000aca:	2201      	movs	r2, #1
 8000acc:	6042      	str	r2, [r0, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000ace:	6083      	str	r3, [r0, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 8000ad0:	60c3      	str	r3, [r0, #12]
  hospi1.Init.DeviceSize = 27;
 8000ad2:	221b      	movs	r2, #27
 8000ad4:	6102      	str	r2, [r0, #16]
  hospi1.Init.ChipSelectHighTime = 3;
 8000ad6:	2203      	movs	r2, #3
 8000ad8:	6142      	str	r2, [r0, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000ada:	6183      	str	r3, [r0, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000adc:	61c3      	str	r3, [r0, #28]
  hospi1.Init.ClockPrescaler = 60;
 8000ade:	223c      	movs	r2, #60	; 0x3c
 8000ae0:	6202      	str	r2, [r0, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000ae2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ae6:	6242      	str	r2, [r0, #36]	; 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8000ae8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000aec:	6282      	str	r2, [r0, #40]	; 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 8000aee:	62c3      	str	r3, [r0, #44]	; 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8000af0:	2308      	movs	r3, #8
 8000af2:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8000af4:	f002 fc54 	bl	80033a0 <HAL_OSPI_Init>
 8000af8:	b978      	cbnz	r0, 8000b1a <MX_OCTOSPI1_Init+0x66>
  {
    Error_Handler();
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 8000afa:	2301      	movs	r3, #1
 8000afc:	9301      	str	r3, [sp, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 8000afe:	9303      	str	r3, [sp, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8000b00:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8000b04:	9304      	str	r3, [sp, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000b06:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b0a:	a901      	add	r1, sp, #4
 8000b0c:	4806      	ldr	r0, [pc, #24]	; (8000b28 <MX_OCTOSPI1_Init+0x74>)
 8000b0e:	f002 fcbf 	bl	8003490 <HAL_OSPIM_Config>
 8000b12:	b928      	cbnz	r0, 8000b20 <MX_OCTOSPI1_Init+0x6c>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8000b14:	b007      	add	sp, #28
 8000b16:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000b1a:	f7ff ff6b 	bl	80009f4 <Error_Handler>
 8000b1e:	e7ec      	b.n	8000afa <MX_OCTOSPI1_Init+0x46>
    Error_Handler();
 8000b20:	f7ff ff68 	bl	80009f4 <Error_Handler>
}
 8000b24:	e7f6      	b.n	8000b14 <MX_OCTOSPI1_Init+0x60>
 8000b26:	bf00      	nop
 8000b28:	20000160 	.word	0x20000160
 8000b2c:	a0001000 	.word	0xa0001000

08000b30 <HAL_OSPI_MspInit>:

void HAL_OSPI_MspInit(OSPI_HandleTypeDef* ospiHandle)
{
 8000b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b34:	b0ae      	sub	sp, #184	; 0xb8
 8000b36:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b38:	2100      	movs	r1, #0
 8000b3a:	9129      	str	r1, [sp, #164]	; 0xa4
 8000b3c:	912a      	str	r1, [sp, #168]	; 0xa8
 8000b3e:	912b      	str	r1, [sp, #172]	; 0xac
 8000b40:	912c      	str	r1, [sp, #176]	; 0xb0
 8000b42:	912d      	str	r1, [sp, #180]	; 0xb4
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b44:	2294      	movs	r2, #148	; 0x94
 8000b46:	a804      	add	r0, sp, #16
 8000b48:	f008 f970 	bl	8008e2c <memset>
  if(ospiHandle->Instance==OCTOSPI1)
 8000b4c:	6822      	ldr	r2, [r4, #0]
 8000b4e:	4b38      	ldr	r3, [pc, #224]	; (8000c30 <HAL_OSPI_MspInit+0x100>)
 8000b50:	429a      	cmp	r2, r3
 8000b52:	d002      	beq.n	8000b5a <HAL_OSPI_MspInit+0x2a>
    HAL_NVIC_EnableIRQ(OCTOSPI1_IRQn);
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }
}
 8000b54:	b02e      	add	sp, #184	; 0xb8
 8000b56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8000b5a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b5e:	9304      	str	r3, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b60:	a804      	add	r0, sp, #16
 8000b62:	f003 fd6b 	bl	800463c <HAL_RCCEx_PeriphCLKConfig>
 8000b66:	2800      	cmp	r0, #0
 8000b68:	d15b      	bne.n	8000c22 <HAL_OSPI_MspInit+0xf2>
    __HAL_RCC_OSPIM_CLK_ENABLE();
 8000b6a:	4b32      	ldr	r3, [pc, #200]	; (8000c34 <HAL_OSPI_MspInit+0x104>)
 8000b6c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b6e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000b72:	64da      	str	r2, [r3, #76]	; 0x4c
 8000b74:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b76:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8000b7a:	9200      	str	r2, [sp, #0]
 8000b7c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8000b7e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000b80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000b84:	651a      	str	r2, [r3, #80]	; 0x50
 8000b86:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000b88:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8000b8c:	9201      	str	r2, [sp, #4]
 8000b8e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b90:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b92:	f042 0201 	orr.w	r2, r2, #1
 8000b96:	64da      	str	r2, [r3, #76]	; 0x4c
 8000b98:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b9a:	f002 0201 	and.w	r2, r2, #1
 8000b9e:	9202      	str	r2, [sp, #8]
 8000ba0:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ba4:	f042 0202 	orr.w	r2, r2, #2
 8000ba8:	64da      	str	r2, [r3, #76]	; 0x4c
 8000baa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bac:	f003 0302 	and.w	r3, r3, #2
 8000bb0:	9303      	str	r3, [sp, #12]
 8000bb2:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = FLASH_CS_Pin|FLASH_CLK_Pin|FLASH_IO3_Pin|FLASH_IO2_Pin;
 8000bb4:	23cc      	movs	r3, #204	; 0xcc
 8000bb6:	9329      	str	r3, [sp, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb8:	f04f 0802 	mov.w	r8, #2
 8000bbc:	f8cd 80a8 	str.w	r8, [sp, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc0:	2500      	movs	r5, #0
 8000bc2:	952b      	str	r5, [sp, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc4:	2603      	movs	r6, #3
 8000bc6:	962c      	str	r6, [sp, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8000bc8:	270a      	movs	r7, #10
 8000bca:	972d      	str	r7, [sp, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bcc:	a929      	add	r1, sp, #164	; 0xa4
 8000bce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bd2:	f001 f943 	bl	8001e5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = FLASH_IO1_Pin|FLASH_IO0_Pin;
 8000bd6:	9629      	str	r6, [sp, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd8:	f8cd 80a8 	str.w	r8, [sp, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	952b      	str	r5, [sp, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bde:	962c      	str	r6, [sp, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8000be0:	972d      	str	r7, [sp, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be2:	a929      	add	r1, sp, #164	; 0xa4
 8000be4:	4814      	ldr	r0, [pc, #80]	; (8000c38 <HAL_OSPI_MspInit+0x108>)
 8000be6:	f001 f939 	bl	8001e5c <HAL_GPIO_Init>
    hdma_octospi1.Instance = DMA2_Channel4;
 8000bea:	4814      	ldr	r0, [pc, #80]	; (8000c3c <HAL_OSPI_MspInit+0x10c>)
 8000bec:	4b14      	ldr	r3, [pc, #80]	; (8000c40 <HAL_OSPI_MspInit+0x110>)
 8000bee:	6003      	str	r3, [r0, #0]
    hdma_octospi1.Init.Request = DMA_REQUEST_OCTOSPI1;
 8000bf0:	2328      	movs	r3, #40	; 0x28
 8000bf2:	6043      	str	r3, [r0, #4]
    hdma_octospi1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bf4:	6085      	str	r5, [r0, #8]
    hdma_octospi1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bf6:	60c5      	str	r5, [r0, #12]
    hdma_octospi1.Init.MemInc = DMA_MINC_ENABLE;
 8000bf8:	2380      	movs	r3, #128	; 0x80
 8000bfa:	6103      	str	r3, [r0, #16]
    hdma_octospi1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bfc:	6145      	str	r5, [r0, #20]
    hdma_octospi1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bfe:	6185      	str	r5, [r0, #24]
    hdma_octospi1.Init.Mode = DMA_NORMAL;
 8000c00:	61c5      	str	r5, [r0, #28]
    hdma_octospi1.Init.Priority = DMA_PRIORITY_LOW;
 8000c02:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_octospi1) != HAL_OK)
 8000c04:	f000 ffa0 	bl	8001b48 <HAL_DMA_Init>
 8000c08:	b970      	cbnz	r0, 8000c28 <HAL_OSPI_MspInit+0xf8>
    __HAL_LINKDMA(ospiHandle,hdma,hdma_octospi1);
 8000c0a:	4b0c      	ldr	r3, [pc, #48]	; (8000c3c <HAL_OSPI_MspInit+0x10c>)
 8000c0c:	6423      	str	r3, [r4, #64]	; 0x40
 8000c0e:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(OCTOSPI1_IRQn, 0, 0);
 8000c10:	2200      	movs	r2, #0
 8000c12:	4611      	mov	r1, r2
 8000c14:	2047      	movs	r0, #71	; 0x47
 8000c16:	f000 fedd 	bl	80019d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OCTOSPI1_IRQn);
 8000c1a:	2047      	movs	r0, #71	; 0x47
 8000c1c:	f000 ff12 	bl	8001a44 <HAL_NVIC_EnableIRQ>
}
 8000c20:	e798      	b.n	8000b54 <HAL_OSPI_MspInit+0x24>
      Error_Handler();
 8000c22:	f7ff fee7 	bl	80009f4 <Error_Handler>
 8000c26:	e7a0      	b.n	8000b6a <HAL_OSPI_MspInit+0x3a>
      Error_Handler();
 8000c28:	f7ff fee4 	bl	80009f4 <Error_Handler>
 8000c2c:	e7ed      	b.n	8000c0a <HAL_OSPI_MspInit+0xda>
 8000c2e:	bf00      	nop
 8000c30:	a0001000 	.word	0xa0001000
 8000c34:	40021000 	.word	0x40021000
 8000c38:	48000400 	.word	0x48000400
 8000c3c:	20000100 	.word	0x20000100
 8000c40:	40020444 	.word	0x40020444

08000c44 <MX_SPI2_Init>:
DMA_HandleTypeDef hdma_spi2_rx;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000c44:	b508      	push	{r3, lr}
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000c46:	480e      	ldr	r0, [pc, #56]	; (8000c80 <MX_SPI2_Init+0x3c>)
 8000c48:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <MX_SPI2_Init+0x40>)
 8000c4a:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000c4c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000c50:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000c52:	2300      	movs	r3, #0
 8000c54:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c56:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000c5a:	60c2      	str	r2, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c5c:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c5e:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8000c60:	6183      	str	r3, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c62:	61c3      	str	r3, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c64:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c66:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c68:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000c6a:	2207      	movs	r2, #7
 8000c6c:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c6e:	6303      	str	r3, [r0, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000c70:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000c72:	f003 ff51 	bl	8004b18 <HAL_SPI_Init>
 8000c76:	b900      	cbnz	r0, 8000c7a <MX_SPI2_Init+0x36>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000c78:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000c7a:	f7ff febb 	bl	80009f4 <Error_Handler>
}
 8000c7e:	e7fb      	b.n	8000c78 <MX_SPI2_Init+0x34>
 8000c80:	20000270 	.word	0x20000270
 8000c84:	40003800 	.word	0x40003800

08000c88 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000c88:	b510      	push	{r4, lr}
 8000c8a:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	9303      	str	r3, [sp, #12]
 8000c90:	9304      	str	r3, [sp, #16]
 8000c92:	9305      	str	r3, [sp, #20]
 8000c94:	9306      	str	r3, [sp, #24]
 8000c96:	9307      	str	r3, [sp, #28]
  if(spiHandle->Instance==SPI2)
 8000c98:	6802      	ldr	r2, [r0, #0]
 8000c9a:	4b32      	ldr	r3, [pc, #200]	; (8000d64 <HAL_SPI_MspInit+0xdc>)
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	d001      	beq.n	8000ca4 <HAL_SPI_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000ca0:	b008      	add	sp, #32
 8000ca2:	bd10      	pop	{r4, pc}
 8000ca4:	4604      	mov	r4, r0
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000ca6:	f503 33ec 	add.w	r3, r3, #120832	; 0x1d800
 8000caa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000cac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000cb0:	659a      	str	r2, [r3, #88]	; 0x58
 8000cb2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000cb4:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000cb8:	9201      	str	r2, [sp, #4]
 8000cba:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cbc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000cbe:	f042 0202 	orr.w	r2, r2, #2
 8000cc2:	64da      	str	r2, [r3, #76]	; 0x4c
 8000cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc6:	f003 0302 	and.w	r3, r3, #2
 8000cca:	9302      	str	r3, [sp, #8]
 8000ccc:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = NXP_SPI2_CS_Pin|NXP_SPI2_SCK_Pin|NXP_SPI2_DATA_O_Pin|NXP_SPI2_DATA_In_Pin;
 8000cce:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000cd2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd8:	2303      	movs	r3, #3
 8000cda:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cdc:	2305      	movs	r3, #5
 8000cde:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce0:	a903      	add	r1, sp, #12
 8000ce2:	4821      	ldr	r0, [pc, #132]	; (8000d68 <HAL_SPI_MspInit+0xe0>)
 8000ce4:	f001 f8ba 	bl	8001e5c <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Channel5;
 8000ce8:	4820      	ldr	r0, [pc, #128]	; (8000d6c <HAL_SPI_MspInit+0xe4>)
 8000cea:	4b21      	ldr	r3, [pc, #132]	; (8000d70 <HAL_SPI_MspInit+0xe8>)
 8000cec:	6003      	str	r3, [r0, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8000cee:	230c      	movs	r3, #12
 8000cf0:	6043      	str	r3, [r0, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	6083      	str	r3, [r0, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cf6:	60c3      	str	r3, [r0, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000cf8:	2280      	movs	r2, #128	; 0x80
 8000cfa:	6102      	str	r2, [r0, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cfc:	6143      	str	r3, [r0, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cfe:	6183      	str	r3, [r0, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8000d00:	2320      	movs	r3, #32
 8000d02:	61c3      	str	r3, [r0, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000d04:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000d08:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8000d0a:	f000 ff1d 	bl	8001b48 <HAL_DMA_Init>
 8000d0e:	bb10      	cbnz	r0, 8000d56 <HAL_SPI_MspInit+0xce>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8000d10:	4b16      	ldr	r3, [pc, #88]	; (8000d6c <HAL_SPI_MspInit+0xe4>)
 8000d12:	65a3      	str	r3, [r4, #88]	; 0x58
 8000d14:	629c      	str	r4, [r3, #40]	; 0x28
    hdma_spi2_tx.Instance = DMA1_Channel6;
 8000d16:	4817      	ldr	r0, [pc, #92]	; (8000d74 <HAL_SPI_MspInit+0xec>)
 8000d18:	4b17      	ldr	r3, [pc, #92]	; (8000d78 <HAL_SPI_MspInit+0xf0>)
 8000d1a:	6003      	str	r3, [r0, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8000d1c:	230d      	movs	r3, #13
 8000d1e:	6043      	str	r3, [r0, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d20:	2310      	movs	r3, #16
 8000d22:	6083      	str	r3, [r0, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d24:	2300      	movs	r3, #0
 8000d26:	60c3      	str	r3, [r0, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d28:	2280      	movs	r2, #128	; 0x80
 8000d2a:	6102      	str	r2, [r0, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d2c:	6143      	str	r3, [r0, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d2e:	6183      	str	r3, [r0, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8000d30:	61c3      	str	r3, [r0, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000d32:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000d36:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000d38:	f000 ff06 	bl	8001b48 <HAL_DMA_Init>
 8000d3c:	b970      	cbnz	r0, 8000d5c <HAL_SPI_MspInit+0xd4>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8000d3e:	4b0d      	ldr	r3, [pc, #52]	; (8000d74 <HAL_SPI_MspInit+0xec>)
 8000d40:	6563      	str	r3, [r4, #84]	; 0x54
 8000d42:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000d44:	2200      	movs	r2, #0
 8000d46:	4611      	mov	r1, r2
 8000d48:	2024      	movs	r0, #36	; 0x24
 8000d4a:	f000 fe43 	bl	80019d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000d4e:	2024      	movs	r0, #36	; 0x24
 8000d50:	f000 fe78 	bl	8001a44 <HAL_NVIC_EnableIRQ>
}
 8000d54:	e7a4      	b.n	8000ca0 <HAL_SPI_MspInit+0x18>
      Error_Handler();
 8000d56:	f7ff fe4d 	bl	80009f4 <Error_Handler>
 8000d5a:	e7d9      	b.n	8000d10 <HAL_SPI_MspInit+0x88>
      Error_Handler();
 8000d5c:	f7ff fe4a 	bl	80009f4 <Error_Handler>
 8000d60:	e7ed      	b.n	8000d3e <HAL_SPI_MspInit+0xb6>
 8000d62:	bf00      	nop
 8000d64:	40003800 	.word	0x40003800
 8000d68:	48000400 	.word	0x48000400
 8000d6c:	200001b0 	.word	0x200001b0
 8000d70:	40020058 	.word	0x40020058
 8000d74:	20000210 	.word	0x20000210
 8000d78:	4002006c 	.word	0x4002006c

08000d7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d7c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d7e:	4b0a      	ldr	r3, [pc, #40]	; (8000da8 <HAL_MspInit+0x2c>)
 8000d80:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000d82:	f042 0201 	orr.w	r2, r2, #1
 8000d86:	661a      	str	r2, [r3, #96]	; 0x60
 8000d88:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000d8a:	f002 0201 	and.w	r2, r2, #1
 8000d8e:	9200      	str	r2, [sp, #0]
 8000d90:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d92:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000d94:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000d98:	659a      	str	r2, [r3, #88]	; 0x58
 8000d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da0:	9301      	str	r3, [sp, #4]
 8000da2:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000da4:	b002      	add	sp, #8
 8000da6:	4770      	bx	lr
 8000da8:	40021000 	.word	0x40021000

08000dac <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dac:	e7fe      	b.n	8000dac <NMI_Handler>

08000dae <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dae:	e7fe      	b.n	8000dae <HardFault_Handler>

08000db0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000db0:	e7fe      	b.n	8000db0 <MemManage_Handler>

08000db2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000db2:	e7fe      	b.n	8000db2 <BusFault_Handler>

08000db4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000db4:	e7fe      	b.n	8000db4 <UsageFault_Handler>

08000db6 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000db6:	4770      	bx	lr

08000db8 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000db8:	4770      	bx	lr

08000dba <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dba:	4770      	bx	lr

08000dbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dbc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dbe:	f000 fdd1 	bl	8001964 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dc2:	bd08      	pop	{r3, pc}

08000dc4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000dc4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8000dc6:	4802      	ldr	r0, [pc, #8]	; (8000dd0 <DMA1_Channel1_IRQHandler+0xc>)
 8000dc8:	f000 ffe3 	bl	8001d92 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000dcc:	bd08      	pop	{r3, pc}
 8000dce:	bf00      	nop
 8000dd0:	20000398 	.word	0x20000398

08000dd4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000dd4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8000dd6:	4802      	ldr	r0, [pc, #8]	; (8000de0 <DMA1_Channel2_IRQHandler+0xc>)
 8000dd8:	f000 ffdb 	bl	8001d92 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000ddc:	bd08      	pop	{r3, pc}
 8000dde:	bf00      	nop
 8000de0:	200003f8 	.word	0x200003f8

08000de4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000de4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000de6:	4802      	ldr	r0, [pc, #8]	; (8000df0 <DMA1_Channel3_IRQHandler+0xc>)
 8000de8:	f000 ffd3 	bl	8001d92 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000dec:	bd08      	pop	{r3, pc}
 8000dee:	bf00      	nop
 8000df0:	20000518 	.word	0x20000518

08000df4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000df4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000df6:	4802      	ldr	r0, [pc, #8]	; (8000e00 <DMA1_Channel4_IRQHandler+0xc>)
 8000df8:	f000 ffcb 	bl	8001d92 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000dfc:	bd08      	pop	{r3, pc}
 8000dfe:	bf00      	nop
 8000e00:	20000578 	.word	0x20000578

08000e04 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000e04:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8000e06:	4802      	ldr	r0, [pc, #8]	; (8000e10 <DMA1_Channel5_IRQHandler+0xc>)
 8000e08:	f000 ffc3 	bl	8001d92 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000e0c:	bd08      	pop	{r3, pc}
 8000e0e:	bf00      	nop
 8000e10:	200001b0 	.word	0x200001b0

08000e14 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000e14:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000e16:	4802      	ldr	r0, [pc, #8]	; (8000e20 <DMA1_Channel6_IRQHandler+0xc>)
 8000e18:	f000 ffbb 	bl	8001d92 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000e1c:	bd08      	pop	{r3, pc}
 8000e1e:	bf00      	nop
 8000e20:	20000210 	.word	0x20000210

08000e24 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000e24:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000e26:	4802      	ldr	r0, [pc, #8]	; (8000e30 <DMA1_Channel7_IRQHandler+0xc>)
 8000e28:	f000 ffb3 	bl	8001d92 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000e2c:	bd08      	pop	{r3, pc}
 8000e2e:	bf00      	nop
 8000e30:	200004b8 	.word	0x200004b8

08000e34 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000e34:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000e36:	4802      	ldr	r0, [pc, #8]	; (8000e40 <SPI2_IRQHandler+0xc>)
 8000e38:	f003 fede 	bl	8004bf8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000e3c:	bd08      	pop	{r3, pc}
 8000e3e:	bf00      	nop
 8000e40:	20000270 	.word	0x20000270

08000e44 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e44:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e46:	4802      	ldr	r0, [pc, #8]	; (8000e50 <USART2_IRQHandler+0xc>)
 8000e48:	f004 f986 	bl	8005158 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e4c:	bd08      	pop	{r3, pc}
 8000e4e:	bf00      	nop
 8000e50:	200005d8 	.word	0x200005d8

08000e54 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000e54:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000e56:	4802      	ldr	r0, [pc, #8]	; (8000e60 <USART3_IRQHandler+0xc>)
 8000e58:	f004 f97e 	bl	8005158 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000e5c:	bd08      	pop	{r3, pc}
 8000e5e:	bf00      	nop
 8000e60:	20000668 	.word	0x20000668

08000e64 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000e64:	b508      	push	{r3, lr}
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000e66:	4802      	ldr	r0, [pc, #8]	; (8000e70 <UART4_IRQHandler+0xc>)
 8000e68:	f004 f976 	bl	8005158 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000e6c:	bd08      	pop	{r3, pc}
 8000e6e:	bf00      	nop
 8000e70:	200006f8 	.word	0x200006f8

08000e74 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8000e74:	b508      	push	{r3, lr}
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8000e76:	4802      	ldr	r0, [pc, #8]	; (8000e80 <UART5_IRQHandler+0xc>)
 8000e78:	f004 f96e 	bl	8005158 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8000e7c:	bd08      	pop	{r3, pc}
 8000e7e:	bf00      	nop
 8000e80:	20000788 	.word	0x20000788

08000e84 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8000e84:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000e86:	4802      	ldr	r0, [pc, #8]	; (8000e90 <DMA2_Channel1_IRQHandler+0xc>)
 8000e88:	f000 ff83 	bl	8001d92 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8000e8c:	bd08      	pop	{r3, pc}
 8000e8e:	bf00      	nop
 8000e90:	20000458 	.word	0x20000458

08000e94 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8000e94:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8000e96:	4802      	ldr	r0, [pc, #8]	; (8000ea0 <DMA2_Channel2_IRQHandler+0xc>)
 8000e98:	f000 ff7b 	bl	8001d92 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8000e9c:	bd08      	pop	{r3, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000338 	.word	0x20000338

08000ea4 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8000ea4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8000ea6:	4802      	ldr	r0, [pc, #8]	; (8000eb0 <DMA2_Channel3_IRQHandler+0xc>)
 8000ea8:	f000 ff73 	bl	8001d92 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 8000eac:	bd08      	pop	{r3, pc}
 8000eae:	bf00      	nop
 8000eb0:	200002d8 	.word	0x200002d8

08000eb4 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8000eb4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_octospi1);
 8000eb6:	4802      	ldr	r0, [pc, #8]	; (8000ec0 <DMA2_Channel4_IRQHandler+0xc>)
 8000eb8:	f000 ff6b 	bl	8001d92 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 8000ebc:	bd08      	pop	{r3, pc}
 8000ebe:	bf00      	nop
 8000ec0:	20000100 	.word	0x20000100

08000ec4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ec4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000ec6:	4802      	ldr	r0, [pc, #8]	; (8000ed0 <OTG_FS_IRQHandler+0xc>)
 8000ec8:	f001 fd50 	bl	800296c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000ecc:	bd08      	pop	{r3, pc}
 8000ece:	bf00      	nop
 8000ed0:	20001c30 	.word	0x20001c30

08000ed4 <OCTOSPI1_IRQHandler>:

/**
  * @brief This function handles OCTOSPI1 global interrupt.
  */
void OCTOSPI1_IRQHandler(void)
{
 8000ed4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OCTOSPI1_IRQn 0 */

  /* USER CODE END OCTOSPI1_IRQn 0 */
  HAL_OSPI_IRQHandler(&hospi1);
 8000ed6:	4802      	ldr	r0, [pc, #8]	; (8000ee0 <OCTOSPI1_IRQHandler+0xc>)
 8000ed8:	f002 f990 	bl	80031fc <HAL_OSPI_IRQHandler>
  /* USER CODE BEGIN OCTOSPI1_IRQn 1 */

  /* USER CODE END OCTOSPI1_IRQn 1 */
}
 8000edc:	bd08      	pop	{r3, pc}
 8000ede:	bf00      	nop
 8000ee0:	20000160 	.word	0x20000160

08000ee4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ee4:	b570      	push	{r4, r5, r6, lr}
 8000ee6:	460c      	mov	r4, r1
 8000ee8:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eea:	2500      	movs	r5, #0
 8000eec:	e006      	b.n	8000efc <_read+0x18>
  {
    *ptr++ = __io_getchar();
 8000eee:	f3af 8000 	nop.w
 8000ef2:	4621      	mov	r1, r4
 8000ef4:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ef8:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 8000efa:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000efc:	42b5      	cmp	r5, r6
 8000efe:	dbf6      	blt.n	8000eee <_read+0xa>
  }

  return len;
}
 8000f00:	4630      	mov	r0, r6
 8000f02:	bd70      	pop	{r4, r5, r6, pc}

08000f04 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8000f04:	f04f 30ff 	mov.w	r0, #4294967295
 8000f08:	4770      	bx	lr

08000f0a <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8000f0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f0e:	604b      	str	r3, [r1, #4]
  return 0;
}
 8000f10:	2000      	movs	r0, #0
 8000f12:	4770      	bx	lr

08000f14 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8000f14:	2001      	movs	r0, #1
 8000f16:	4770      	bx	lr

08000f18 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8000f18:	2000      	movs	r0, #0
 8000f1a:	4770      	bx	lr

08000f1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f1c:	b510      	push	{r4, lr}
 8000f1e:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f20:	4a0c      	ldr	r2, [pc, #48]	; (8000f54 <_sbrk+0x38>)
 8000f22:	490d      	ldr	r1, [pc, #52]	; (8000f58 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f24:	480d      	ldr	r0, [pc, #52]	; (8000f5c <_sbrk+0x40>)
 8000f26:	6800      	ldr	r0, [r0, #0]
 8000f28:	b140      	cbz	r0, 8000f3c <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f2a:	480c      	ldr	r0, [pc, #48]	; (8000f5c <_sbrk+0x40>)
 8000f2c:	6800      	ldr	r0, [r0, #0]
 8000f2e:	4403      	add	r3, r0
 8000f30:	1a52      	subs	r2, r2, r1
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d806      	bhi.n	8000f44 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000f36:	4a09      	ldr	r2, [pc, #36]	; (8000f5c <_sbrk+0x40>)
 8000f38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8000f3a:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8000f3c:	4807      	ldr	r0, [pc, #28]	; (8000f5c <_sbrk+0x40>)
 8000f3e:	4c08      	ldr	r4, [pc, #32]	; (8000f60 <_sbrk+0x44>)
 8000f40:	6004      	str	r4, [r0, #0]
 8000f42:	e7f2      	b.n	8000f2a <_sbrk+0xe>
    errno = ENOMEM;
 8000f44:	f007 fff6 	bl	8008f34 <__errno>
 8000f48:	230c      	movs	r3, #12
 8000f4a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f50:	e7f3      	b.n	8000f3a <_sbrk+0x1e>
 8000f52:	bf00      	nop
 8000f54:	200a0000 	.word	0x200a0000
 8000f58:	00002000 	.word	0x00002000
 8000f5c:	200002d4 	.word	0x200002d4
 8000f60:	20002080 	.word	0x20002080

08000f64 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f64:	4a03      	ldr	r2, [pc, #12]	; (8000f74 <SystemInit+0x10>)
 8000f66:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8000f6a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f6e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000f72:	4770      	bx	lr
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart3_rx;
DMA_HandleTypeDef hdma_usart3_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8000f78:	b508      	push	{r3, lr}
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000f7a:	4817      	ldr	r0, [pc, #92]	; (8000fd8 <MX_UART4_Init+0x60>)
 8000f7c:	4b17      	ldr	r3, [pc, #92]	; (8000fdc <MX_UART4_Init+0x64>)
 8000f7e:	6003      	str	r3, [r0, #0]
  huart4.Init.BaudRate = 9600;
 8000f80:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000f84:	6043      	str	r3, [r0, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000f86:	2300      	movs	r3, #0
 8000f88:	6083      	str	r3, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000f8a:	60c3      	str	r3, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000f8c:	6103      	str	r3, [r0, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000f8e:	220c      	movs	r2, #12
 8000f90:	6142      	str	r2, [r0, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f92:	6183      	str	r3, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f94:	61c3      	str	r3, [r0, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f96:	6203      	str	r3, [r0, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f98:	6243      	str	r3, [r0, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f9a:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000f9c:	f004 fd9b 	bl	8005ad6 <HAL_UART_Init>
 8000fa0:	b970      	cbnz	r0, 8000fc0 <MX_UART4_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	480c      	ldr	r0, [pc, #48]	; (8000fd8 <MX_UART4_Init+0x60>)
 8000fa6:	f004 fe99 	bl	8005cdc <HAL_UARTEx_SetTxFifoThreshold>
 8000faa:	b960      	cbnz	r0, 8000fc6 <MX_UART4_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fac:	2100      	movs	r1, #0
 8000fae:	480a      	ldr	r0, [pc, #40]	; (8000fd8 <MX_UART4_Init+0x60>)
 8000fb0:	f004 feb9 	bl	8005d26 <HAL_UARTEx_SetRxFifoThreshold>
 8000fb4:	b950      	cbnz	r0, 8000fcc <MX_UART4_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000fb6:	4808      	ldr	r0, [pc, #32]	; (8000fd8 <MX_UART4_Init+0x60>)
 8000fb8:	f004 fe71 	bl	8005c9e <HAL_UARTEx_DisableFifoMode>
 8000fbc:	b948      	cbnz	r0, 8000fd2 <MX_UART4_Init+0x5a>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000fbe:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000fc0:	f7ff fd18 	bl	80009f4 <Error_Handler>
 8000fc4:	e7ed      	b.n	8000fa2 <MX_UART4_Init+0x2a>
    Error_Handler();
 8000fc6:	f7ff fd15 	bl	80009f4 <Error_Handler>
 8000fca:	e7ef      	b.n	8000fac <MX_UART4_Init+0x34>
    Error_Handler();
 8000fcc:	f7ff fd12 	bl	80009f4 <Error_Handler>
 8000fd0:	e7f1      	b.n	8000fb6 <MX_UART4_Init+0x3e>
    Error_Handler();
 8000fd2:	f7ff fd0f 	bl	80009f4 <Error_Handler>
}
 8000fd6:	e7f2      	b.n	8000fbe <MX_UART4_Init+0x46>
 8000fd8:	200006f8 	.word	0x200006f8
 8000fdc:	40004c00 	.word	0x40004c00

08000fe0 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8000fe0:	b508      	push	{r3, lr}
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000fe2:	4818      	ldr	r0, [pc, #96]	; (8001044 <MX_UART5_Init+0x64>)
 8000fe4:	4b18      	ldr	r3, [pc, #96]	; (8001048 <MX_UART5_Init+0x68>)
 8000fe6:	6003      	str	r3, [r0, #0]
  huart5.Init.BaudRate = 115200;
 8000fe8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000fec:	6043      	str	r3, [r0, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	6083      	str	r3, [r0, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000ff2:	60c3      	str	r3, [r0, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000ff4:	6103      	str	r3, [r0, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000ff6:	220c      	movs	r2, #12
 8000ff8:	6142      	str	r2, [r0, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000ffa:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000ffe:	6182      	str	r2, [r0, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001000:	61c3      	str	r3, [r0, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001002:	6203      	str	r3, [r0, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001004:	6243      	str	r3, [r0, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001006:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001008:	f004 fd65 	bl	8005ad6 <HAL_UART_Init>
 800100c:	b970      	cbnz	r0, 800102c <MX_UART5_Init+0x4c>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800100e:	2100      	movs	r1, #0
 8001010:	480c      	ldr	r0, [pc, #48]	; (8001044 <MX_UART5_Init+0x64>)
 8001012:	f004 fe63 	bl	8005cdc <HAL_UARTEx_SetTxFifoThreshold>
 8001016:	b960      	cbnz	r0, 8001032 <MX_UART5_Init+0x52>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001018:	2100      	movs	r1, #0
 800101a:	480a      	ldr	r0, [pc, #40]	; (8001044 <MX_UART5_Init+0x64>)
 800101c:	f004 fe83 	bl	8005d26 <HAL_UARTEx_SetRxFifoThreshold>
 8001020:	b950      	cbnz	r0, 8001038 <MX_UART5_Init+0x58>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8001022:	4808      	ldr	r0, [pc, #32]	; (8001044 <MX_UART5_Init+0x64>)
 8001024:	f004 fe3b 	bl	8005c9e <HAL_UARTEx_DisableFifoMode>
 8001028:	b948      	cbnz	r0, 800103e <MX_UART5_Init+0x5e>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800102a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800102c:	f7ff fce2 	bl	80009f4 <Error_Handler>
 8001030:	e7ed      	b.n	800100e <MX_UART5_Init+0x2e>
    Error_Handler();
 8001032:	f7ff fcdf 	bl	80009f4 <Error_Handler>
 8001036:	e7ef      	b.n	8001018 <MX_UART5_Init+0x38>
    Error_Handler();
 8001038:	f7ff fcdc 	bl	80009f4 <Error_Handler>
 800103c:	e7f1      	b.n	8001022 <MX_UART5_Init+0x42>
    Error_Handler();
 800103e:	f7ff fcd9 	bl	80009f4 <Error_Handler>
}
 8001042:	e7f2      	b.n	800102a <MX_UART5_Init+0x4a>
 8001044:	20000788 	.word	0x20000788
 8001048:	40005000 	.word	0x40005000

0800104c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800104c:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800104e:	4817      	ldr	r0, [pc, #92]	; (80010ac <MX_USART2_UART_Init+0x60>)
 8001050:	4b17      	ldr	r3, [pc, #92]	; (80010b0 <MX_USART2_UART_Init+0x64>)
 8001052:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8001054:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001058:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800105a:	2300      	movs	r3, #0
 800105c:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800105e:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001060:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001062:	220c      	movs	r2, #12
 8001064:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001066:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001068:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800106a:	6203      	str	r3, [r0, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800106c:	6243      	str	r3, [r0, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800106e:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001070:	f004 fd31 	bl	8005ad6 <HAL_UART_Init>
 8001074:	b970      	cbnz	r0, 8001094 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001076:	2100      	movs	r1, #0
 8001078:	480c      	ldr	r0, [pc, #48]	; (80010ac <MX_USART2_UART_Init+0x60>)
 800107a:	f004 fe2f 	bl	8005cdc <HAL_UARTEx_SetTxFifoThreshold>
 800107e:	b960      	cbnz	r0, 800109a <MX_USART2_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001080:	2100      	movs	r1, #0
 8001082:	480a      	ldr	r0, [pc, #40]	; (80010ac <MX_USART2_UART_Init+0x60>)
 8001084:	f004 fe4f 	bl	8005d26 <HAL_UARTEx_SetRxFifoThreshold>
 8001088:	b950      	cbnz	r0, 80010a0 <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800108a:	4808      	ldr	r0, [pc, #32]	; (80010ac <MX_USART2_UART_Init+0x60>)
 800108c:	f004 fe07 	bl	8005c9e <HAL_UARTEx_DisableFifoMode>
 8001090:	b948      	cbnz	r0, 80010a6 <MX_USART2_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001092:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001094:	f7ff fcae 	bl	80009f4 <Error_Handler>
 8001098:	e7ed      	b.n	8001076 <MX_USART2_UART_Init+0x2a>
    Error_Handler();
 800109a:	f7ff fcab 	bl	80009f4 <Error_Handler>
 800109e:	e7ef      	b.n	8001080 <MX_USART2_UART_Init+0x34>
    Error_Handler();
 80010a0:	f7ff fca8 	bl	80009f4 <Error_Handler>
 80010a4:	e7f1      	b.n	800108a <MX_USART2_UART_Init+0x3e>
    Error_Handler();
 80010a6:	f7ff fca5 	bl	80009f4 <Error_Handler>
}
 80010aa:	e7f2      	b.n	8001092 <MX_USART2_UART_Init+0x46>
 80010ac:	200005d8 	.word	0x200005d8
 80010b0:	40004400 	.word	0x40004400

080010b4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80010b4:	b508      	push	{r3, lr}
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80010b6:	4817      	ldr	r0, [pc, #92]	; (8001114 <MX_USART3_UART_Init+0x60>)
 80010b8:	4b17      	ldr	r3, [pc, #92]	; (8001118 <MX_USART3_UART_Init+0x64>)
 80010ba:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 80010bc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80010c0:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010c2:	2300      	movs	r3, #0
 80010c4:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80010c6:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80010c8:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80010ca:	220c      	movs	r2, #12
 80010cc:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ce:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80010d0:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010d2:	6203      	str	r3, [r0, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010d4:	6243      	str	r3, [r0, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010d6:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80010d8:	f004 fcfd 	bl	8005ad6 <HAL_UART_Init>
 80010dc:	b970      	cbnz	r0, 80010fc <MX_USART3_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010de:	2100      	movs	r1, #0
 80010e0:	480c      	ldr	r0, [pc, #48]	; (8001114 <MX_USART3_UART_Init+0x60>)
 80010e2:	f004 fdfb 	bl	8005cdc <HAL_UARTEx_SetTxFifoThreshold>
 80010e6:	b960      	cbnz	r0, 8001102 <MX_USART3_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010e8:	2100      	movs	r1, #0
 80010ea:	480a      	ldr	r0, [pc, #40]	; (8001114 <MX_USART3_UART_Init+0x60>)
 80010ec:	f004 fe1b 	bl	8005d26 <HAL_UARTEx_SetRxFifoThreshold>
 80010f0:	b950      	cbnz	r0, 8001108 <MX_USART3_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80010f2:	4808      	ldr	r0, [pc, #32]	; (8001114 <MX_USART3_UART_Init+0x60>)
 80010f4:	f004 fdd3 	bl	8005c9e <HAL_UARTEx_DisableFifoMode>
 80010f8:	b948      	cbnz	r0, 800110e <MX_USART3_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80010fa:	bd08      	pop	{r3, pc}
    Error_Handler();
 80010fc:	f7ff fc7a 	bl	80009f4 <Error_Handler>
 8001100:	e7ed      	b.n	80010de <MX_USART3_UART_Init+0x2a>
    Error_Handler();
 8001102:	f7ff fc77 	bl	80009f4 <Error_Handler>
 8001106:	e7ef      	b.n	80010e8 <MX_USART3_UART_Init+0x34>
    Error_Handler();
 8001108:	f7ff fc74 	bl	80009f4 <Error_Handler>
 800110c:	e7f1      	b.n	80010f2 <MX_USART3_UART_Init+0x3e>
    Error_Handler();
 800110e:	f7ff fc71 	bl	80009f4 <Error_Handler>
}
 8001112:	e7f2      	b.n	80010fa <MX_USART3_UART_Init+0x46>
 8001114:	20000668 	.word	0x20000668
 8001118:	40004800 	.word	0x40004800

0800111c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800111c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001120:	b0b6      	sub	sp, #216	; 0xd8
 8001122:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001124:	2100      	movs	r1, #0
 8001126:	9131      	str	r1, [sp, #196]	; 0xc4
 8001128:	9132      	str	r1, [sp, #200]	; 0xc8
 800112a:	9133      	str	r1, [sp, #204]	; 0xcc
 800112c:	9134      	str	r1, [sp, #208]	; 0xd0
 800112e:	9135      	str	r1, [sp, #212]	; 0xd4
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001130:	2294      	movs	r2, #148	; 0x94
 8001132:	a80c      	add	r0, sp, #48	; 0x30
 8001134:	f007 fe7a 	bl	8008e2c <memset>
  if(uartHandle->Instance==UART4)
 8001138:	6823      	ldr	r3, [r4, #0]
 800113a:	4a81      	ldr	r2, [pc, #516]	; (8001340 <HAL_UART_MspInit+0x224>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d00d      	beq.n	800115c <HAL_UART_MspInit+0x40>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
  else if(uartHandle->Instance==UART5)
 8001140:	4a80      	ldr	r2, [pc, #512]	; (8001344 <HAL_UART_MspInit+0x228>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d06e      	beq.n	8001224 <HAL_UART_MspInit+0x108>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 8001146:	4a80      	ldr	r2, [pc, #512]	; (8001348 <HAL_UART_MspInit+0x22c>)
 8001148:	4293      	cmp	r3, r2
 800114a:	f000 8119 	beq.w	8001380 <HAL_UART_MspInit+0x264>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(uartHandle->Instance==USART3)
 800114e:	4a7f      	ldr	r2, [pc, #508]	; (800134c <HAL_UART_MspInit+0x230>)
 8001150:	4293      	cmp	r3, r2
 8001152:	f000 818d 	beq.w	8001470 <HAL_UART_MspInit+0x354>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001156:	b036      	add	sp, #216	; 0xd8
 8001158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800115c:	2308      	movs	r3, #8
 800115e:	930c      	str	r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001160:	a80c      	add	r0, sp, #48	; 0x30
 8001162:	f003 fa6b 	bl	800463c <HAL_RCCEx_PeriphCLKConfig>
 8001166:	2800      	cmp	r0, #0
 8001168:	d153      	bne.n	8001212 <HAL_UART_MspInit+0xf6>
    __HAL_RCC_UART4_CLK_ENABLE();
 800116a:	4b79      	ldr	r3, [pc, #484]	; (8001350 <HAL_UART_MspInit+0x234>)
 800116c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800116e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001172:	659a      	str	r2, [r3, #88]	; 0x58
 8001174:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001176:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 800117a:	9201      	str	r2, [sp, #4]
 800117c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800117e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001180:	f042 0204 	orr.w	r2, r2, #4
 8001184:	64da      	str	r2, [r3, #76]	; 0x4c
 8001186:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001188:	f003 0304 	and.w	r3, r3, #4
 800118c:	9302      	str	r3, [sp, #8]
 800118e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
 8001190:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001194:	9331      	str	r3, [sp, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001196:	2302      	movs	r3, #2
 8001198:	9332      	str	r3, [sp, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	2500      	movs	r5, #0
 800119c:	9533      	str	r5, [sp, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800119e:	2303      	movs	r3, #3
 80011a0:	9334      	str	r3, [sp, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80011a2:	2308      	movs	r3, #8
 80011a4:	9335      	str	r3, [sp, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011a6:	a931      	add	r1, sp, #196	; 0xc4
 80011a8:	486a      	ldr	r0, [pc, #424]	; (8001354 <HAL_UART_MspInit+0x238>)
 80011aa:	f000 fe57 	bl	8001e5c <HAL_GPIO_Init>
    hdma_uart4_tx.Instance = DMA2_Channel2;
 80011ae:	486a      	ldr	r0, [pc, #424]	; (8001358 <HAL_UART_MspInit+0x23c>)
 80011b0:	4b6a      	ldr	r3, [pc, #424]	; (800135c <HAL_UART_MspInit+0x240>)
 80011b2:	6003      	str	r3, [r0, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 80011b4:	231f      	movs	r3, #31
 80011b6:	6043      	str	r3, [r0, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011b8:	2310      	movs	r3, #16
 80011ba:	6083      	str	r3, [r0, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011bc:	60c5      	str	r5, [r0, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80011be:	2380      	movs	r3, #128	; 0x80
 80011c0:	6103      	str	r3, [r0, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011c2:	6145      	str	r5, [r0, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011c4:	6185      	str	r5, [r0, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 80011c6:	61c5      	str	r5, [r0, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80011c8:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 80011ca:	f000 fcbd 	bl	8001b48 <HAL_DMA_Init>
 80011ce:	bb18      	cbnz	r0, 8001218 <HAL_UART_MspInit+0xfc>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 80011d0:	4b61      	ldr	r3, [pc, #388]	; (8001358 <HAL_UART_MspInit+0x23c>)
 80011d2:	67a3      	str	r3, [r4, #120]	; 0x78
 80011d4:	629c      	str	r4, [r3, #40]	; 0x28
    hdma_uart4_rx.Instance = DMA2_Channel3;
 80011d6:	4862      	ldr	r0, [pc, #392]	; (8001360 <HAL_UART_MspInit+0x244>)
 80011d8:	4b62      	ldr	r3, [pc, #392]	; (8001364 <HAL_UART_MspInit+0x248>)
 80011da:	6003      	str	r3, [r0, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 80011dc:	231e      	movs	r3, #30
 80011de:	6043      	str	r3, [r0, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011e0:	2300      	movs	r3, #0
 80011e2:	6083      	str	r3, [r0, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011e4:	60c3      	str	r3, [r0, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80011e6:	2280      	movs	r2, #128	; 0x80
 80011e8:	6102      	str	r2, [r0, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011ea:	6143      	str	r3, [r0, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011ec:	6183      	str	r3, [r0, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 80011ee:	2220      	movs	r2, #32
 80011f0:	61c2      	str	r2, [r0, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80011f2:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80011f4:	f000 fca8 	bl	8001b48 <HAL_DMA_Init>
 80011f8:	b988      	cbnz	r0, 800121e <HAL_UART_MspInit+0x102>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 80011fa:	4b59      	ldr	r3, [pc, #356]	; (8001360 <HAL_UART_MspInit+0x244>)
 80011fc:	67e3      	str	r3, [r4, #124]	; 0x7c
 80011fe:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001200:	2200      	movs	r2, #0
 8001202:	4611      	mov	r1, r2
 8001204:	2034      	movs	r0, #52	; 0x34
 8001206:	f000 fbe5 	bl	80019d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800120a:	2034      	movs	r0, #52	; 0x34
 800120c:	f000 fc1a 	bl	8001a44 <HAL_NVIC_EnableIRQ>
 8001210:	e7a1      	b.n	8001156 <HAL_UART_MspInit+0x3a>
      Error_Handler();
 8001212:	f7ff fbef 	bl	80009f4 <Error_Handler>
 8001216:	e7a8      	b.n	800116a <HAL_UART_MspInit+0x4e>
      Error_Handler();
 8001218:	f7ff fbec 	bl	80009f4 <Error_Handler>
 800121c:	e7d8      	b.n	80011d0 <HAL_UART_MspInit+0xb4>
      Error_Handler();
 800121e:	f7ff fbe9 	bl	80009f4 <Error_Handler>
 8001222:	e7ea      	b.n	80011fa <HAL_UART_MspInit+0xde>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001224:	2310      	movs	r3, #16
 8001226:	930c      	str	r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001228:	a80c      	add	r0, sp, #48	; 0x30
 800122a:	f003 fa07 	bl	800463c <HAL_RCCEx_PeriphCLKConfig>
 800122e:	2800      	cmp	r0, #0
 8001230:	d17c      	bne.n	800132c <HAL_UART_MspInit+0x210>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001232:	4b47      	ldr	r3, [pc, #284]	; (8001350 <HAL_UART_MspInit+0x234>)
 8001234:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001236:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800123a:	659a      	str	r2, [r3, #88]	; 0x58
 800123c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800123e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001242:	9203      	str	r2, [sp, #12]
 8001244:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001246:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001248:	f042 0204 	orr.w	r2, r2, #4
 800124c:	64da      	str	r2, [r3, #76]	; 0x4c
 800124e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001250:	f002 0204 	and.w	r2, r2, #4
 8001254:	9204      	str	r2, [sp, #16]
 8001256:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001258:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800125a:	f042 0208 	orr.w	r2, r2, #8
 800125e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001260:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001262:	f002 0208 	and.w	r2, r2, #8
 8001266:	9205      	str	r2, [sp, #20]
 8001268:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800126a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800126c:	f042 0202 	orr.w	r2, r2, #2
 8001270:	64da      	str	r2, [r3, #76]	; 0x4c
 8001272:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001274:	f003 0302 	and.w	r3, r3, #2
 8001278:	9306      	str	r3, [sp, #24]
 800127a:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = LTE_U5_TX_Pin;
 800127c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001280:	9331      	str	r3, [sp, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001282:	f04f 0802 	mov.w	r8, #2
 8001286:	f8cd 80c8 	str.w	r8, [sp, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2500      	movs	r5, #0
 800128c:	9533      	str	r5, [sp, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800128e:	2703      	movs	r7, #3
 8001290:	9734      	str	r7, [sp, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001292:	2608      	movs	r6, #8
 8001294:	9635      	str	r6, [sp, #212]	; 0xd4
    HAL_GPIO_Init(LTE_U5_TX_GPIO_Port, &GPIO_InitStruct);
 8001296:	a931      	add	r1, sp, #196	; 0xc4
 8001298:	482e      	ldr	r0, [pc, #184]	; (8001354 <HAL_UART_MspInit+0x238>)
 800129a:	f000 fddf 	bl	8001e5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LTE_U5_RX_Pin;
 800129e:	2304      	movs	r3, #4
 80012a0:	9331      	str	r3, [sp, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a2:	f8cd 80c8 	str.w	r8, [sp, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	9533      	str	r5, [sp, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a8:	9734      	str	r7, [sp, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80012aa:	9635      	str	r6, [sp, #212]	; 0xd4
    HAL_GPIO_Init(LTE_U5_RX_GPIO_Port, &GPIO_InitStruct);
 80012ac:	a931      	add	r1, sp, #196	; 0xc4
 80012ae:	482e      	ldr	r0, [pc, #184]	; (8001368 <HAL_UART_MspInit+0x24c>)
 80012b0:	f000 fdd4 	bl	8001e5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LTE_U5_RTS_Pin|LTE_U5_CTS_Pin;
 80012b4:	2330      	movs	r3, #48	; 0x30
 80012b6:	9331      	str	r3, [sp, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b8:	f8cd 80c8 	str.w	r8, [sp, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012bc:	9533      	str	r5, [sp, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012be:	9734      	str	r7, [sp, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80012c0:	9635      	str	r6, [sp, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c2:	a931      	add	r1, sp, #196	; 0xc4
 80012c4:	4829      	ldr	r0, [pc, #164]	; (800136c <HAL_UART_MspInit+0x250>)
 80012c6:	f000 fdc9 	bl	8001e5c <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Channel1;
 80012ca:	4829      	ldr	r0, [pc, #164]	; (8001370 <HAL_UART_MspInit+0x254>)
 80012cc:	4b29      	ldr	r3, [pc, #164]	; (8001374 <HAL_UART_MspInit+0x258>)
 80012ce:	6003      	str	r3, [r0, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 80012d0:	2320      	movs	r3, #32
 80012d2:	6043      	str	r3, [r0, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012d4:	6085      	str	r5, [r0, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012d6:	60c5      	str	r5, [r0, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80012d8:	2280      	movs	r2, #128	; 0x80
 80012da:	6102      	str	r2, [r0, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012dc:	6145      	str	r5, [r0, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012de:	6185      	str	r5, [r0, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 80012e0:	61c3      	str	r3, [r0, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 80012e2:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 80012e4:	f000 fc30 	bl	8001b48 <HAL_DMA_Init>
 80012e8:	bb18      	cbnz	r0, 8001332 <HAL_UART_MspInit+0x216>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 80012ea:	4b21      	ldr	r3, [pc, #132]	; (8001370 <HAL_UART_MspInit+0x254>)
 80012ec:	67e3      	str	r3, [r4, #124]	; 0x7c
 80012ee:	629c      	str	r4, [r3, #40]	; 0x28
    hdma_uart5_tx.Instance = DMA1_Channel2;
 80012f0:	4821      	ldr	r0, [pc, #132]	; (8001378 <HAL_UART_MspInit+0x25c>)
 80012f2:	4b22      	ldr	r3, [pc, #136]	; (800137c <HAL_UART_MspInit+0x260>)
 80012f4:	6003      	str	r3, [r0, #0]
    hdma_uart5_tx.Init.Request = DMA_REQUEST_UART5_TX;
 80012f6:	2321      	movs	r3, #33	; 0x21
 80012f8:	6043      	str	r3, [r0, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012fa:	2310      	movs	r3, #16
 80012fc:	6083      	str	r3, [r0, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012fe:	2300      	movs	r3, #0
 8001300:	60c3      	str	r3, [r0, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001302:	2280      	movs	r2, #128	; 0x80
 8001304:	6102      	str	r2, [r0, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001306:	6143      	str	r3, [r0, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001308:	6183      	str	r3, [r0, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 800130a:	61c3      	str	r3, [r0, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 800130c:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 800130e:	f000 fc1b 	bl	8001b48 <HAL_DMA_Init>
 8001312:	b988      	cbnz	r0, 8001338 <HAL_UART_MspInit+0x21c>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 8001314:	4b18      	ldr	r3, [pc, #96]	; (8001378 <HAL_UART_MspInit+0x25c>)
 8001316:	67a3      	str	r3, [r4, #120]	; 0x78
 8001318:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 800131a:	2200      	movs	r2, #0
 800131c:	4611      	mov	r1, r2
 800131e:	2035      	movs	r0, #53	; 0x35
 8001320:	f000 fb58 	bl	80019d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001324:	2035      	movs	r0, #53	; 0x35
 8001326:	f000 fb8d 	bl	8001a44 <HAL_NVIC_EnableIRQ>
 800132a:	e714      	b.n	8001156 <HAL_UART_MspInit+0x3a>
      Error_Handler();
 800132c:	f7ff fb62 	bl	80009f4 <Error_Handler>
 8001330:	e77f      	b.n	8001232 <HAL_UART_MspInit+0x116>
      Error_Handler();
 8001332:	f7ff fb5f 	bl	80009f4 <Error_Handler>
 8001336:	e7d8      	b.n	80012ea <HAL_UART_MspInit+0x1ce>
      Error_Handler();
 8001338:	f7ff fb5c 	bl	80009f4 <Error_Handler>
 800133c:	e7ea      	b.n	8001314 <HAL_UART_MspInit+0x1f8>
 800133e:	bf00      	nop
 8001340:	40004c00 	.word	0x40004c00
 8001344:	40005000 	.word	0x40005000
 8001348:	40004400 	.word	0x40004400
 800134c:	40004800 	.word	0x40004800
 8001350:	40021000 	.word	0x40021000
 8001354:	48000800 	.word	0x48000800
 8001358:	20000338 	.word	0x20000338
 800135c:	4002041c 	.word	0x4002041c
 8001360:	200002d8 	.word	0x200002d8
 8001364:	40020430 	.word	0x40020430
 8001368:	48000c00 	.word	0x48000c00
 800136c:	48000400 	.word	0x48000400
 8001370:	20000398 	.word	0x20000398
 8001374:	40020008 	.word	0x40020008
 8001378:	200003f8 	.word	0x200003f8
 800137c:	4002001c 	.word	0x4002001c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001380:	2302      	movs	r3, #2
 8001382:	930c      	str	r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001384:	a80c      	add	r0, sp, #48	; 0x30
 8001386:	f003 f959 	bl	800463c <HAL_RCCEx_PeriphCLKConfig>
 800138a:	2800      	cmp	r0, #0
 800138c:	d167      	bne.n	800145e <HAL_UART_MspInit+0x342>
    __HAL_RCC_USART2_CLK_ENABLE();
 800138e:	4b6a      	ldr	r3, [pc, #424]	; (8001538 <HAL_UART_MspInit+0x41c>)
 8001390:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001392:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001396:	659a      	str	r2, [r3, #88]	; 0x58
 8001398:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800139a:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800139e:	9207      	str	r2, [sp, #28]
 80013a0:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80013a4:	f042 0201 	orr.w	r2, r2, #1
 80013a8:	64da      	str	r2, [r3, #76]	; 0x4c
 80013aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80013ac:	f002 0201 	and.w	r2, r2, #1
 80013b0:	9208      	str	r2, [sp, #32]
 80013b2:	9a08      	ldr	r2, [sp, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80013b6:	f042 0208 	orr.w	r2, r2, #8
 80013ba:	64da      	str	r2, [r3, #76]	; 0x4c
 80013bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013be:	f003 0308 	and.w	r3, r3, #8
 80013c2:	9309      	str	r3, [sp, #36]	; 0x24
 80013c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80013c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013ca:	9331      	str	r3, [sp, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013cc:	2702      	movs	r7, #2
 80013ce:	9732      	str	r7, [sp, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d0:	2500      	movs	r5, #0
 80013d2:	9533      	str	r5, [sp, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d4:	2603      	movs	r6, #3
 80013d6:	9634      	str	r6, [sp, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80013d8:	9635      	str	r6, [sp, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013da:	a931      	add	r1, sp, #196	; 0xc4
 80013dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013e0:	f000 fd3c 	bl	8001e5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80013e4:	2320      	movs	r3, #32
 80013e6:	9331      	str	r3, [sp, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e8:	9732      	str	r7, [sp, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	9533      	str	r5, [sp, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ec:	9634      	str	r6, [sp, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013ee:	2307      	movs	r3, #7
 80013f0:	9335      	str	r3, [sp, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013f2:	a931      	add	r1, sp, #196	; 0xc4
 80013f4:	4851      	ldr	r0, [pc, #324]	; (800153c <HAL_UART_MspInit+0x420>)
 80013f6:	f000 fd31 	bl	8001e5c <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80013fa:	4851      	ldr	r0, [pc, #324]	; (8001540 <HAL_UART_MspInit+0x424>)
 80013fc:	4b51      	ldr	r3, [pc, #324]	; (8001544 <HAL_UART_MspInit+0x428>)
 80013fe:	6003      	str	r3, [r0, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8001400:	231b      	movs	r3, #27
 8001402:	6043      	str	r3, [r0, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001404:	2310      	movs	r3, #16
 8001406:	6083      	str	r3, [r0, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001408:	60c5      	str	r5, [r0, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800140a:	2380      	movs	r3, #128	; 0x80
 800140c:	6103      	str	r3, [r0, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800140e:	6145      	str	r5, [r0, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001410:	6185      	str	r5, [r0, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001412:	61c5      	str	r5, [r0, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001414:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001416:	f000 fb97 	bl	8001b48 <HAL_DMA_Init>
 800141a:	bb18      	cbnz	r0, 8001464 <HAL_UART_MspInit+0x348>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800141c:	4b48      	ldr	r3, [pc, #288]	; (8001540 <HAL_UART_MspInit+0x424>)
 800141e:	67a3      	str	r3, [r4, #120]	; 0x78
 8001420:	629c      	str	r4, [r3, #40]	; 0x28
    hdma_usart2_rx.Instance = DMA2_Channel1;
 8001422:	4849      	ldr	r0, [pc, #292]	; (8001548 <HAL_UART_MspInit+0x42c>)
 8001424:	4b49      	ldr	r3, [pc, #292]	; (800154c <HAL_UART_MspInit+0x430>)
 8001426:	6003      	str	r3, [r0, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001428:	231a      	movs	r3, #26
 800142a:	6043      	str	r3, [r0, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800142c:	2300      	movs	r3, #0
 800142e:	6083      	str	r3, [r0, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001430:	60c3      	str	r3, [r0, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001432:	2280      	movs	r2, #128	; 0x80
 8001434:	6102      	str	r2, [r0, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001436:	6143      	str	r3, [r0, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001438:	6183      	str	r3, [r0, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800143a:	2220      	movs	r2, #32
 800143c:	61c2      	str	r2, [r0, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800143e:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001440:	f000 fb82 	bl	8001b48 <HAL_DMA_Init>
 8001444:	b988      	cbnz	r0, 800146a <HAL_UART_MspInit+0x34e>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001446:	4b40      	ldr	r3, [pc, #256]	; (8001548 <HAL_UART_MspInit+0x42c>)
 8001448:	67e3      	str	r3, [r4, #124]	; 0x7c
 800144a:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800144c:	2200      	movs	r2, #0
 800144e:	4611      	mov	r1, r2
 8001450:	2026      	movs	r0, #38	; 0x26
 8001452:	f000 fabf 	bl	80019d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001456:	2026      	movs	r0, #38	; 0x26
 8001458:	f000 faf4 	bl	8001a44 <HAL_NVIC_EnableIRQ>
 800145c:	e67b      	b.n	8001156 <HAL_UART_MspInit+0x3a>
      Error_Handler();
 800145e:	f7ff fac9 	bl	80009f4 <Error_Handler>
 8001462:	e794      	b.n	800138e <HAL_UART_MspInit+0x272>
      Error_Handler();
 8001464:	f7ff fac6 	bl	80009f4 <Error_Handler>
 8001468:	e7d8      	b.n	800141c <HAL_UART_MspInit+0x300>
      Error_Handler();
 800146a:	f7ff fac3 	bl	80009f4 <Error_Handler>
 800146e:	e7ea      	b.n	8001446 <HAL_UART_MspInit+0x32a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001470:	2304      	movs	r3, #4
 8001472:	930c      	str	r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001474:	a80c      	add	r0, sp, #48	; 0x30
 8001476:	f003 f8e1 	bl	800463c <HAL_RCCEx_PeriphCLKConfig>
 800147a:	2800      	cmp	r0, #0
 800147c:	d152      	bne.n	8001524 <HAL_UART_MspInit+0x408>
    __HAL_RCC_USART3_CLK_ENABLE();
 800147e:	4b2e      	ldr	r3, [pc, #184]	; (8001538 <HAL_UART_MspInit+0x41c>)
 8001480:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001482:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001486:	659a      	str	r2, [r3, #88]	; 0x58
 8001488:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800148a:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800148e:	920a      	str	r2, [sp, #40]	; 0x28
 8001490:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001492:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001494:	f042 0204 	orr.w	r2, r2, #4
 8001498:	64da      	str	r2, [r3, #76]	; 0x4c
 800149a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149c:	f003 0304 	and.w	r3, r3, #4
 80014a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80014a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Pin = NXP_TX_Pin|NXP_RX_Pin;
 80014a4:	2330      	movs	r3, #48	; 0x30
 80014a6:	9331      	str	r3, [sp, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a8:	2302      	movs	r3, #2
 80014aa:	9332      	str	r3, [sp, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2500      	movs	r5, #0
 80014ae:	9533      	str	r5, [sp, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b0:	2303      	movs	r3, #3
 80014b2:	9334      	str	r3, [sp, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014b4:	2307      	movs	r3, #7
 80014b6:	9335      	str	r3, [sp, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014b8:	a931      	add	r1, sp, #196	; 0xc4
 80014ba:	4825      	ldr	r0, [pc, #148]	; (8001550 <HAL_UART_MspInit+0x434>)
 80014bc:	f000 fcce 	bl	8001e5c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 80014c0:	4824      	ldr	r0, [pc, #144]	; (8001554 <HAL_UART_MspInit+0x438>)
 80014c2:	4b25      	ldr	r3, [pc, #148]	; (8001558 <HAL_UART_MspInit+0x43c>)
 80014c4:	6003      	str	r3, [r0, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80014c6:	231c      	movs	r3, #28
 80014c8:	6043      	str	r3, [r0, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014ca:	6085      	str	r5, [r0, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014cc:	60c5      	str	r5, [r0, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014ce:	2380      	movs	r3, #128	; 0x80
 80014d0:	6103      	str	r3, [r0, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014d2:	6145      	str	r5, [r0, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014d4:	6185      	str	r5, [r0, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80014d6:	2320      	movs	r3, #32
 80014d8:	61c3      	str	r3, [r0, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80014da:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80014dc:	f000 fb34 	bl	8001b48 <HAL_DMA_Init>
 80014e0:	bb18      	cbnz	r0, 800152a <HAL_UART_MspInit+0x40e>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80014e2:	4b1c      	ldr	r3, [pc, #112]	; (8001554 <HAL_UART_MspInit+0x438>)
 80014e4:	67e3      	str	r3, [r4, #124]	; 0x7c
 80014e6:	629c      	str	r4, [r3, #40]	; 0x28
    hdma_usart3_tx.Instance = DMA1_Channel4;
 80014e8:	481c      	ldr	r0, [pc, #112]	; (800155c <HAL_UART_MspInit+0x440>)
 80014ea:	4b1d      	ldr	r3, [pc, #116]	; (8001560 <HAL_UART_MspInit+0x444>)
 80014ec:	6003      	str	r3, [r0, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80014ee:	231d      	movs	r3, #29
 80014f0:	6043      	str	r3, [r0, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014f2:	2310      	movs	r3, #16
 80014f4:	6083      	str	r3, [r0, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014f6:	2300      	movs	r3, #0
 80014f8:	60c3      	str	r3, [r0, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80014fa:	2280      	movs	r2, #128	; 0x80
 80014fc:	6102      	str	r2, [r0, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014fe:	6143      	str	r3, [r0, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001500:	6183      	str	r3, [r0, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001502:	61c3      	str	r3, [r0, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001504:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001506:	f000 fb1f 	bl	8001b48 <HAL_DMA_Init>
 800150a:	b988      	cbnz	r0, 8001530 <HAL_UART_MspInit+0x414>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 800150c:	4b13      	ldr	r3, [pc, #76]	; (800155c <HAL_UART_MspInit+0x440>)
 800150e:	67a3      	str	r3, [r4, #120]	; 0x78
 8001510:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001512:	2200      	movs	r2, #0
 8001514:	4611      	mov	r1, r2
 8001516:	2027      	movs	r0, #39	; 0x27
 8001518:	f000 fa5c 	bl	80019d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800151c:	2027      	movs	r0, #39	; 0x27
 800151e:	f000 fa91 	bl	8001a44 <HAL_NVIC_EnableIRQ>
}
 8001522:	e618      	b.n	8001156 <HAL_UART_MspInit+0x3a>
      Error_Handler();
 8001524:	f7ff fa66 	bl	80009f4 <Error_Handler>
 8001528:	e7a9      	b.n	800147e <HAL_UART_MspInit+0x362>
      Error_Handler();
 800152a:	f7ff fa63 	bl	80009f4 <Error_Handler>
 800152e:	e7d8      	b.n	80014e2 <HAL_UART_MspInit+0x3c6>
      Error_Handler();
 8001530:	f7ff fa60 	bl	80009f4 <Error_Handler>
 8001534:	e7ea      	b.n	800150c <HAL_UART_MspInit+0x3f0>
 8001536:	bf00      	nop
 8001538:	40021000 	.word	0x40021000
 800153c:	48000c00 	.word	0x48000c00
 8001540:	200004b8 	.word	0x200004b8
 8001544:	40020080 	.word	0x40020080
 8001548:	20000458 	.word	0x20000458
 800154c:	40020408 	.word	0x40020408
 8001550:	48000800 	.word	0x48000800
 8001554:	20000518 	.word	0x20000518
 8001558:	40020030 	.word	0x40020030
 800155c:	20000578 	.word	0x20000578
 8001560:	40020044 	.word	0x40020044

08001564 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001564:	f8df d034 	ldr.w	sp, [pc, #52]	; 800159c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001568:	f7ff fcfc 	bl	8000f64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800156c:	480c      	ldr	r0, [pc, #48]	; (80015a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800156e:	490d      	ldr	r1, [pc, #52]	; (80015a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001570:	4a0d      	ldr	r2, [pc, #52]	; (80015a8 <LoopForever+0xe>)
  movs r3, #0
 8001572:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001574:	e002      	b.n	800157c <LoopCopyDataInit>

08001576 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001576:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001578:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800157a:	3304      	adds	r3, #4

0800157c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800157c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800157e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001580:	d3f9      	bcc.n	8001576 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001582:	4a0a      	ldr	r2, [pc, #40]	; (80015ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8001584:	4c0a      	ldr	r4, [pc, #40]	; (80015b0 <LoopForever+0x16>)
  movs r3, #0
 8001586:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001588:	e001      	b.n	800158e <LoopFillZerobss>

0800158a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800158a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800158c:	3204      	adds	r2, #4

0800158e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800158e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001590:	d3fb      	bcc.n	800158a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001592:	f007 fcd5 	bl	8008f40 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001596:	f7ff fa68 	bl	8000a6a <main>

0800159a <LoopForever>:

LoopForever:
    b LoopForever
 800159a:	e7fe      	b.n	800159a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800159c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80015a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015a4:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 80015a8:	08009894 	.word	0x08009894
  ldr r2, =_sbss
 80015ac:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 80015b0:	20002080 	.word	0x20002080

080015b4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015b4:	e7fe      	b.n	80015b4 <ADC1_IRQHandler>

080015b6 <OSPI_Reset>:
*
* STEP 1: Load command struct
* STEP 2: Execute command
* *****************************************************************************************************/
void OSPI_Reset(OSPI_HandleTypeDef *hospi)
{
 80015b6:	b500      	push	{lr}
 80015b8:	b095      	sub	sp, #84	; 0x54
    // STEP 1: Load command struct
    OSPI_RegularCmdTypeDef  sCommand;
    sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80015ba:	2300      	movs	r3, #0
 80015bc:	9300      	str	r3, [sp, #0]
    sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 80015be:	9301      	str	r3, [sp, #4]
    sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 80015c0:	2201      	movs	r2, #1
 80015c2:	9203      	str	r2, [sp, #12]
    sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 80015c4:	9304      	str	r3, [sp, #16]
    sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80015c6:	9305      	str	r3, [sp, #20]
    sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 80015c8:	9309      	str	r3, [sp, #36]	; 0x24
    sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80015ca:	930b      	str	r3, [sp, #44]	; 0x2c
    sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 80015cc:	9310      	str	r3, [sp, #64]	; 0x40
    sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80015ce:	9312      	str	r3, [sp, #72]	; 0x48
    sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80015d0:	9313      	str	r3, [sp, #76]	; 0x4c
    sCommand.Instruction        = MT29F_CMD_RESET;
 80015d2:	22ff      	movs	r2, #255	; 0xff
 80015d4:	9202      	str	r2, [sp, #8]
    sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 80015d6:	9307      	str	r3, [sp, #28]
    sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 80015d8:	930e      	str	r3, [sp, #56]	; 0x38
    sCommand.NbData             = 0;
 80015da:	930f      	str	r3, [sp, #60]	; 0x3c
    sCommand.DummyCycles        = 0;
 80015dc:	9311      	str	r3, [sp, #68]	; 0x44

    // STEP 2: Execute command
    if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80015de:	f241 3288 	movw	r2, #5000	; 0x1388
 80015e2:	4669      	mov	r1, sp
 80015e4:	f001 fcd2 	bl	8002f8c <HAL_OSPI_Command>
 80015e8:	b910      	cbnz	r0, 80015f0 <OSPI_Reset+0x3a>
    {
        Error_Handler();
    }

} // END OF OSPI_Reset
 80015ea:	b015      	add	sp, #84	; 0x54
 80015ec:	f85d fb04 	ldr.w	pc, [sp], #4
        Error_Handler();
 80015f0:	f7ff fa00 	bl	80009f4 <Error_Handler>
} // END OF OSPI_Reset
 80015f4:	e7f9      	b.n	80015ea <OSPI_Reset+0x34>

080015f6 <OSPI_Get_Features>:
*
* STEP 1: Load command struct
* STEP 2: Execute command and get the response
* *****************************************************************************************************/
uint8_t OSPI_Get_Features(OSPI_HandleTypeDef *hospi)
{
 80015f6:	b510      	push	{r4, lr}
 80015f8:	b096      	sub	sp, #88	; 0x58
 80015fa:	4604      	mov	r4, r0
    uint8_t StatusRegisterValue;

    // STEP 1: Load command struct
    OSPI_RegularCmdTypeDef  sCommand;
    sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80015fc:	2300      	movs	r3, #0
 80015fe:	9301      	str	r3, [sp, #4]
    sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8001600:	9302      	str	r3, [sp, #8]
    sCommand.Instruction        = MT29F_CMD_GET_FEATURES;
 8001602:	220f      	movs	r2, #15
 8001604:	9203      	str	r2, [sp, #12]
    sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8001606:	2201      	movs	r2, #1
 8001608:	9204      	str	r2, [sp, #16]
    sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 800160a:	9305      	str	r3, [sp, #20]
    sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800160c:	9306      	str	r3, [sp, #24]
    sCommand.Address            = MT29F_REG_STATUS;
 800160e:	21c0      	movs	r1, #192	; 0xc0
 8001610:	9107      	str	r1, [sp, #28]
    sCommand.AddressMode        = HAL_OSPI_ADDRESS_1_LINE;
 8001612:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001616:	9108      	str	r1, [sp, #32]
    sCommand.AddressSize        = HAL_OSPI_ADDRESS_8_BITS;
 8001618:	9309      	str	r3, [sp, #36]	; 0x24
    sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 800161a:	930a      	str	r3, [sp, #40]	; 0x28
    sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800161c:	930c      	str	r3, [sp, #48]	; 0x30
    sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 800161e:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8001622:	910f      	str	r1, [sp, #60]	; 0x3c
    sCommand.NbData             = 1;
 8001624:	9210      	str	r2, [sp, #64]	; 0x40
    sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 8001626:	9311      	str	r3, [sp, #68]	; 0x44
    sCommand.DummyCycles        = 0;
 8001628:	9312      	str	r3, [sp, #72]	; 0x48
    sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800162a:	9313      	str	r3, [sp, #76]	; 0x4c
    sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800162c:	9314      	str	r3, [sp, #80]	; 0x50

    // STEP 2: Execute command and get the response
    if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800162e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001632:	a901      	add	r1, sp, #4
 8001634:	f001 fcaa 	bl	8002f8c <HAL_OSPI_Command>
 8001638:	b958      	cbnz	r0, 8001652 <OSPI_Get_Features+0x5c>
    {
        Error_Handler();
    }
    if (HAL_OSPI_Receive(hospi, &StatusRegisterValue, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800163a:	f241 3288 	movw	r2, #5000	; 0x1388
 800163e:	f10d 0157 	add.w	r1, sp, #87	; 0x57
 8001642:	4620      	mov	r0, r4
 8001644:	f001 fd4b 	bl	80030de <HAL_OSPI_Receive>
 8001648:	b930      	cbnz	r0, 8001658 <OSPI_Get_Features+0x62>
    {
        Error_Handler();
    }
    return(StatusRegisterValue);

} // END OF OSPI_Get_Features
 800164a:	f89d 0057 	ldrb.w	r0, [sp, #87]	; 0x57
 800164e:	b016      	add	sp, #88	; 0x58
 8001650:	bd10      	pop	{r4, pc}
        Error_Handler();
 8001652:	f7ff f9cf 	bl	80009f4 <Error_Handler>
 8001656:	e7f0      	b.n	800163a <OSPI_Get_Features+0x44>
        Error_Handler();
 8001658:	f7ff f9cc 	bl	80009f4 <Error_Handler>
 800165c:	e7f5      	b.n	800164a <OSPI_Get_Features+0x54>

0800165e <OSPI_WriteEnable>:
*
* STEP 1: Load command struct
* STEP 2: Execute command
* *****************************************************************************************************/
void OSPI_WriteEnable(OSPI_HandleTypeDef *hospi)
{
 800165e:	b500      	push	{lr}
 8001660:	b095      	sub	sp, #84	; 0x54
    // STEP 1: Load command struct
    OSPI_RegularCmdTypeDef  sCommand;
    sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8001662:	2300      	movs	r3, #0
 8001664:	9300      	str	r3, [sp, #0]
    sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8001666:	9301      	str	r3, [sp, #4]
    sCommand.Instruction        = MT29F_CMD_WRITE_ENABLE;
 8001668:	2206      	movs	r2, #6
 800166a:	9202      	str	r2, [sp, #8]
    sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 800166c:	2201      	movs	r2, #1
 800166e:	9203      	str	r2, [sp, #12]
    sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8001670:	9304      	str	r3, [sp, #16]
    sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8001672:	9305      	str	r3, [sp, #20]
    sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8001674:	9307      	str	r3, [sp, #28]
    sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8001676:	930b      	str	r3, [sp, #44]	; 0x2c
    sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 8001678:	930e      	str	r3, [sp, #56]	; 0x38
    sCommand.DummyCycles        = 0;
 800167a:	9311      	str	r3, [sp, #68]	; 0x44
    sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800167c:	9312      	str	r3, [sp, #72]	; 0x48
    sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800167e:	9313      	str	r3, [sp, #76]	; 0x4c

    // STEP 2: Execute command
    if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001680:	f241 3288 	movw	r2, #5000	; 0x1388
 8001684:	4669      	mov	r1, sp
 8001686:	f001 fc81 	bl	8002f8c <HAL_OSPI_Command>
 800168a:	b910      	cbnz	r0, 8001692 <OSPI_WriteEnable+0x34>
    {
        Error_Handler();
    }

} // END OF OSPI_WriteEnable
 800168c:	b015      	add	sp, #84	; 0x54
 800168e:	f85d fb04 	ldr.w	pc, [sp], #4
        Error_Handler();
 8001692:	f7ff f9af 	bl	80009f4 <Error_Handler>
} // END OF OSPI_WriteEnable
 8001696:	e7f9      	b.n	800168c <OSPI_WriteEnable+0x2e>

08001698 <OSPI_Erase_Block>:
*
* STEP 1: Load command struct
* STEP 2: Execute command
* *****************************************************************************************************/
void OSPI_Erase_Block(OSPI_HandleTypeDef *hospi, uint32_t BlockAddress)
{
 8001698:	b500      	push	{lr}
 800169a:	b095      	sub	sp, #84	; 0x54
    // STEP 1: Load command struct
    OSPI_RegularCmdTypeDef  sCommand;
    sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800169c:	2300      	movs	r3, #0
 800169e:	9300      	str	r3, [sp, #0]
    sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 80016a0:	9301      	str	r3, [sp, #4]
    sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 80016a2:	2201      	movs	r2, #1
 80016a4:	9203      	str	r2, [sp, #12]
    sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 80016a6:	9304      	str	r3, [sp, #16]
    sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80016a8:	9305      	str	r3, [sp, #20]
    sCommand.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 80016aa:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80016ae:	9208      	str	r2, [sp, #32]
    sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 80016b0:	9309      	str	r3, [sp, #36]	; 0x24
    sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80016b2:	930b      	str	r3, [sp, #44]	; 0x2c
    sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 80016b4:	9310      	str	r3, [sp, #64]	; 0x40
    sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80016b6:	9312      	str	r3, [sp, #72]	; 0x48
    sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80016b8:	9313      	str	r3, [sp, #76]	; 0x4c
    sCommand.Instruction        = MT29F_CMD_BLOCK_ERASE;
 80016ba:	22d8      	movs	r2, #216	; 0xd8
 80016bc:	9202      	str	r2, [sp, #8]
    sCommand.AddressMode        = HAL_OSPI_ADDRESS_1_LINE;
 80016be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016c2:	9207      	str	r2, [sp, #28]
    sCommand.Address            = BlockAddress;
 80016c4:	9106      	str	r1, [sp, #24]
    sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 80016c6:	930e      	str	r3, [sp, #56]	; 0x38
    sCommand.DummyCycles        = 0;
 80016c8:	9311      	str	r3, [sp, #68]	; 0x44

    // STEP 2: Execute command
    if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80016ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ce:	4669      	mov	r1, sp
 80016d0:	f001 fc5c 	bl	8002f8c <HAL_OSPI_Command>
 80016d4:	b910      	cbnz	r0, 80016dc <OSPI_Erase_Block+0x44>
    {
        Error_Handler();
    }

} // END OF OSPI_Erase_Block
 80016d6:	b015      	add	sp, #84	; 0x54
 80016d8:	f85d fb04 	ldr.w	pc, [sp], #4
        Error_Handler();
 80016dc:	f7ff f98a 	bl	80009f4 <Error_Handler>
} // END OF OSPI_Erase_Block
 80016e0:	e7f9      	b.n	80016d6 <OSPI_Erase_Block+0x3e>
	...

080016e4 <OSPI_Program_Load>:
	   	 }

}

void OSPI_Program_Load(OSPI_HandleTypeDef *hospi)//address needed
{
 80016e4:	b510      	push	{r4, lr}
 80016e6:	b094      	sub	sp, #80	; 0x50
 80016e8:	4604      	mov	r4, r0
	 OSPI_RegularCmdTypeDef  sCommand;

	 sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80016ea:	2300      	movs	r3, #0
 80016ec:	9300      	str	r3, [sp, #0]
	 sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 80016ee:	9301      	str	r3, [sp, #4]
	 sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 80016f0:	2201      	movs	r2, #1
 80016f2:	9203      	str	r2, [sp, #12]
	 sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 80016f4:	9304      	str	r3, [sp, #16]
	 sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80016f6:	9305      	str	r3, [sp, #20]
	 sCommand.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 80016f8:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80016fc:	9208      	str	r2, [sp, #32]
	// sCommand.AddressSize        = HAL_OSPI_ADDRESS_24_BITS;
	 sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 80016fe:	9309      	str	r3, [sp, #36]	; 0x24
	 sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8001700:	930b      	str	r3, [sp, #44]	; 0x2c
	 sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 8001702:	9310      	str	r3, [sp, #64]	; 0x40
	 sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8001704:	9312      	str	r3, [sp, #72]	; 0x48
	 sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8001706:	9313      	str	r3, [sp, #76]	; 0x4c

	 sCommand.Instruction = 0x02;//PROGRAM_LOAD_X4;
 8001708:	2202      	movs	r2, #2
 800170a:	9202      	str	r2, [sp, #8]
	 sCommand.AddressMode = HAL_OSPI_ADDRESS_1_LINE;
 800170c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001710:	9207      	str	r2, [sp, #28]
	 sCommand.Address     = ADDR;//0x00;
 8001712:	4a0f      	ldr	r2, [pc, #60]	; (8001750 <OSPI_Program_Load+0x6c>)
 8001714:	6812      	ldr	r2, [r2, #0]
 8001716:	9206      	str	r2, [sp, #24]
	 sCommand.DataMode    = HAL_OSPI_DATA_1_LINE;//HAL_OSPI_DATA_4_LINES;
 8001718:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800171c:	920e      	str	r2, [sp, #56]	; 0x38
	 sCommand.NbData      = sizeof(aTxBuffer); // Hab edit was: BUFFERSIZE;
 800171e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001722:	920f      	str	r2, [sp, #60]	; 0x3c
	 sCommand.DummyCycles = 0;
 8001724:	9311      	str	r3, [sp, #68]	; 0x44

	 if(HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001726:	f241 3288 	movw	r2, #5000	; 0x1388
 800172a:	4669      	mov	r1, sp
 800172c:	f001 fc2e 	bl	8002f8c <HAL_OSPI_Command>
 8001730:	b940      	cbnz	r0, 8001744 <OSPI_Program_Load+0x60>
	 {
	      Error_Handler();
	 }

	 if(HAL_OSPI_Transmit(hospi, aTxBuffer,HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001732:	f241 3288 	movw	r2, #5000	; 0x1388
 8001736:	4907      	ldr	r1, [pc, #28]	; (8001754 <OSPI_Program_Load+0x70>)
 8001738:	4620      	mov	r0, r4
 800173a:	f001 fc83 	bl	8003044 <HAL_OSPI_Transmit>
 800173e:	b920      	cbnz	r0, 800174a <OSPI_Program_Load+0x66>
	 {
	      Error_Handler();
	 }
}
 8001740:	b014      	add	sp, #80	; 0x50
 8001742:	bd10      	pop	{r4, pc}
	      Error_Handler();
 8001744:	f7ff f956 	bl	80009f4 <Error_Handler>
 8001748:	e7f3      	b.n	8001732 <OSPI_Program_Load+0x4e>
	      Error_Handler();
 800174a:	f7ff f953 	bl	80009f4 <Error_Handler>
}
 800174e:	e7f7      	b.n	8001740 <OSPI_Program_Load+0x5c>
 8001750:	20000818 	.word	0x20000818
 8001754:	20001020 	.word	0x20001020

08001758 <OSPI_Program_Execute>:

void OSPI_Program_Execute(OSPI_HandleTypeDef *hospi)//address needed
{
 8001758:	b500      	push	{lr}
 800175a:	b095      	sub	sp, #84	; 0x54
	 	 OSPI_RegularCmdTypeDef  sCommand;

		 sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800175c:	2300      	movs	r3, #0
 800175e:	9300      	str	r3, [sp, #0]
		 sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8001760:	9301      	str	r3, [sp, #4]
		 sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8001762:	2201      	movs	r2, #1
 8001764:	9203      	str	r2, [sp, #12]
		 sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8001766:	9304      	str	r3, [sp, #16]
		 sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8001768:	9305      	str	r3, [sp, #20]
		 sCommand.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 800176a:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800176e:	9108      	str	r1, [sp, #32]
		// sCommand.AddressSize        = HAL_OSPI_ADDRESS_24_BITS;
		 sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 8001770:	9309      	str	r3, [sp, #36]	; 0x24
		 sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8001772:	930b      	str	r3, [sp, #44]	; 0x2c
		 sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 8001774:	9310      	str	r3, [sp, #64]	; 0x40
		 sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8001776:	9312      	str	r3, [sp, #72]	; 0x48
		 sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8001778:	9313      	str	r3, [sp, #76]	; 0x4c

		 sCommand.Instruction = MT29F_CMD_PROGRAM_EXECUTE;
 800177a:	2110      	movs	r1, #16
 800177c:	9102      	str	r1, [sp, #8]
		 sCommand.AddressMode = HAL_OSPI_ADDRESS_1_LINE;
 800177e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001782:	9107      	str	r1, [sp, #28]
		 sCommand.Address     = ADDR;//0x00;
 8001784:	4908      	ldr	r1, [pc, #32]	; (80017a8 <OSPI_Program_Execute+0x50>)
 8001786:	6809      	ldr	r1, [r1, #0]
 8001788:	9106      	str	r1, [sp, #24]
		 sCommand.DataMode    = HAL_OSPI_DATA_NONE;
 800178a:	930e      	str	r3, [sp, #56]	; 0x38
		 sCommand.NbData      = 1;
 800178c:	920f      	str	r2, [sp, #60]	; 0x3c
		 sCommand.DummyCycles = 0;
 800178e:	9311      	str	r3, [sp, #68]	; 0x44

		  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001790:	f241 3288 	movw	r2, #5000	; 0x1388
 8001794:	4669      	mov	r1, sp
 8001796:	f001 fbf9 	bl	8002f8c <HAL_OSPI_Command>
 800179a:	b910      	cbnz	r0, 80017a2 <OSPI_Program_Execute+0x4a>
		  {
		      Error_Handler();

		  }
}
 800179c:	b015      	add	sp, #84	; 0x54
 800179e:	f85d fb04 	ldr.w	pc, [sp], #4
		      Error_Handler();
 80017a2:	f7ff f927 	bl	80009f4 <Error_Handler>
}
 80017a6:	e7f9      	b.n	800179c <OSPI_Program_Execute+0x44>
 80017a8:	20000818 	.word	0x20000818

080017ac <OSPI_Page_Read>:

void OSPI_Page_Read(OSPI_HandleTypeDef *hospi)//address needed
{
 80017ac:	b500      	push	{lr}
 80017ae:	b095      	sub	sp, #84	; 0x54
	 OSPI_RegularCmdTypeDef  sCommand;

	 	sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80017b0:	2300      	movs	r3, #0
 80017b2:	9300      	str	r3, [sp, #0]
	 	sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 80017b4:	9301      	str	r3, [sp, #4]
	 	sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 80017b6:	2201      	movs	r2, #1
 80017b8:	9203      	str	r2, [sp, #12]
	 	sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 80017ba:	9304      	str	r3, [sp, #16]
	 	sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80017bc:	9305      	str	r3, [sp, #20]
	 	sCommand.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 80017be:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80017c2:	9208      	str	r2, [sp, #32]
		//sCommand.AddressSize        = HAL_OSPI_ADDRESS_24_BITS;
		sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 80017c4:	9309      	str	r3, [sp, #36]	; 0x24
		sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80017c6:	930b      	str	r3, [sp, #44]	; 0x2c
		sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 80017c8:	9310      	str	r3, [sp, #64]	; 0x40
		sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80017ca:	9312      	str	r3, [sp, #72]	; 0x48
		sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80017cc:	9313      	str	r3, [sp, #76]	; 0x4c

		sCommand.Instruction = MT29F_CMD_PAGE_READ;
 80017ce:	2213      	movs	r2, #19
 80017d0:	9202      	str	r2, [sp, #8]
		sCommand.AddressMode = HAL_OSPI_ADDRESS_1_LINE;
 80017d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017d6:	9207      	str	r2, [sp, #28]
		sCommand.Address     = ADDR;//0x00;
 80017d8:	4a08      	ldr	r2, [pc, #32]	; (80017fc <OSPI_Page_Read+0x50>)
 80017da:	6812      	ldr	r2, [r2, #0]
 80017dc:	9206      	str	r2, [sp, #24]
		sCommand.DataMode    = HAL_OSPI_DATA_NONE;
 80017de:	930e      	str	r3, [sp, #56]	; 0x38
		sCommand.NbData      = 0;
 80017e0:	930f      	str	r3, [sp, #60]	; 0x3c
		sCommand.DummyCycles = 0;
 80017e2:	9311      	str	r3, [sp, #68]	; 0x44

		 if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80017e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80017e8:	4669      	mov	r1, sp
 80017ea:	f001 fbcf 	bl	8002f8c <HAL_OSPI_Command>
 80017ee:	b910      	cbnz	r0, 80017f6 <OSPI_Page_Read+0x4a>
		{
			 Error_Handler();

		 }
}
 80017f0:	b015      	add	sp, #84	; 0x54
 80017f2:	f85d fb04 	ldr.w	pc, [sp], #4
			 Error_Handler();
 80017f6:	f7ff f8fd 	bl	80009f4 <Error_Handler>
}
 80017fa:	e7f9      	b.n	80017f0 <OSPI_Page_Read+0x44>
 80017fc:	20000818 	.word	0x20000818

08001800 <OSPI_Read_Cache_X4>:

void OSPI_Read_Cache_X4(OSPI_HandleTypeDef *hospi)//address needed
{
 8001800:	b510      	push	{r4, lr}
 8001802:	b094      	sub	sp, #80	; 0x50
 8001804:	4604      	mov	r4, r0
	 OSPI_RegularCmdTypeDef  sCommand;

	  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8001806:	2300      	movs	r3, #0
 8001808:	9300      	str	r3, [sp, #0]
	  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 800180a:	9301      	str	r3, [sp, #4]
	  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 800180c:	2201      	movs	r2, #1
 800180e:	9203      	str	r2, [sp, #12]
	  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8001810:	9304      	str	r3, [sp, #16]
	  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8001812:	9305      	str	r3, [sp, #20]
	  sCommand.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8001814:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001818:	9208      	str	r2, [sp, #32]
	 // sCommand.AddressSize        = HAL_OSPI_ADDRESS_24_BITS;
	  sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 800181a:	9309      	str	r3, [sp, #36]	; 0x24
	  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800181c:	930b      	str	r3, [sp, #44]	; 0x2c
	  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 800181e:	9310      	str	r3, [sp, #64]	; 0x40
	  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8001820:	9312      	str	r3, [sp, #72]	; 0x48
	  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8001822:	9313      	str	r3, [sp, #76]	; 0x4c

      sCommand.Instruction = 0x0B;//READ_CACHE_X4;
 8001824:	230b      	movs	r3, #11
 8001826:	9302      	str	r3, [sp, #8]
      sCommand.AddressMode = HAL_OSPI_ADDRESS_1_LINE;
 8001828:	f44f 7380 	mov.w	r3, #256	; 0x100
 800182c:	9307      	str	r3, [sp, #28]
      sCommand.Address     = ADDR;//0x00;
 800182e:	4b0f      	ldr	r3, [pc, #60]	; (800186c <OSPI_Read_Cache_X4+0x6c>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	9306      	str	r3, [sp, #24]
      sCommand.DataMode    = HAL_OSPI_DATA_1_LINE;//HAL_OSPI_DATA_4_LINES;
 8001834:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001838:	930e      	str	r3, [sp, #56]	; 0x38
      sCommand.NbData      = BUFFERSIZE+1;
 800183a:	23f6      	movs	r3, #246	; 0xf6
 800183c:	930f      	str	r3, [sp, #60]	; 0x3c
      sCommand.DummyCycles = 8;//DUMMY_CLOCK_CYCLES_READ;
 800183e:	2308      	movs	r3, #8
 8001840:	9311      	str	r3, [sp, #68]	; 0x44

    if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001842:	f241 3288 	movw	r2, #5000	; 0x1388
 8001846:	4669      	mov	r1, sp
 8001848:	f001 fba0 	bl	8002f8c <HAL_OSPI_Command>
 800184c:	b940      	cbnz	r0, 8001860 <OSPI_Read_Cache_X4+0x60>
      {
        Error_Handler();
      }

      if (HAL_OSPI_Receive(hospi, aRxBuffer, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800184e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001852:	4907      	ldr	r1, [pc, #28]	; (8001870 <OSPI_Read_Cache_X4+0x70>)
 8001854:	4620      	mov	r0, r4
 8001856:	f001 fc42 	bl	80030de <HAL_OSPI_Receive>
 800185a:	b920      	cbnz	r0, 8001866 <OSPI_Read_Cache_X4+0x66>
        Error_Handler();
      }
//      printf("%s",aRxBuffer);


}
 800185c:	b014      	add	sp, #80	; 0x50
 800185e:	bd10      	pop	{r4, pc}
        Error_Handler();
 8001860:	f7ff f8c8 	bl	80009f4 <Error_Handler>
 8001864:	e7f3      	b.n	800184e <OSPI_Read_Cache_X4+0x4e>
        Error_Handler();
 8001866:	f7ff f8c5 	bl	80009f4 <Error_Handler>
}
 800186a:	e7f7      	b.n	800185c <OSPI_Read_Cache_X4+0x5c>
 800186c:	20000818 	.word	0x20000818
 8001870:	20000820 	.word	0x20000820

08001874 <readWriteCompare>:
    HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
}


bool readWriteCompare(void)
{
 8001874:	b508      	push	{r3, lr}
    if (strncmp((char *)aRxBuffer, (char *)aTxBuffer, sizeof(aTxBuffer)) == 0)
 8001876:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800187a:	4904      	ldr	r1, [pc, #16]	; (800188c <readWriteCompare+0x18>)
 800187c:	4804      	ldr	r0, [pc, #16]	; (8001890 <readWriteCompare+0x1c>)
 800187e:	f007 fadd 	bl	8008e3c <strncmp>
 8001882:	b908      	cbnz	r0, 8001888 <readWriteCompare+0x14>
        return(true);
 8001884:	2001      	movs	r0, #1
    else
        return(false);
}
 8001886:	bd08      	pop	{r3, pc}
        return(false);
 8001888:	2000      	movs	r0, #0
 800188a:	e7fc      	b.n	8001886 <readWriteCompare+0x12>
 800188c:	20001020 	.word	0x20001020
 8001890:	20000820 	.word	0x20000820

08001894 <prepareForCompare>:

    prepareForCompare();
}

void prepareForCompare(void)
{
 8001894:	b508      	push	{r3, lr}
    memset(aRxBuffer, 0x00, sizeof(aRxBuffer));
 8001896:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800189a:	2100      	movs	r1, #0
 800189c:	4801      	ldr	r0, [pc, #4]	; (80018a4 <prepareForCompare+0x10>)
 800189e:	f007 fac5 	bl	8008e2c <memset>
}
 80018a2:	bd08      	pop	{r3, pc}
 80018a4:	20000820 	.word	0x20000820

080018a8 <initTest>:
{
 80018a8:	b508      	push	{r3, lr}
    ReadWriteCount = 65530;
 80018aa:	4b0e      	ldr	r3, [pc, #56]	; (80018e4 <initTest+0x3c>)
 80018ac:	f64f 72fa 	movw	r2, #65530	; 0xfffa
 80018b0:	601a      	str	r2, [r3, #0]
    ADDR = 2048 * ReadWriteCount;
 80018b2:	4b0d      	ldr	r3, [pc, #52]	; (80018e8 <initTest+0x40>)
 80018b4:	4a0d      	ldr	r2, [pc, #52]	; (80018ec <initTest+0x44>)
 80018b6:	601a      	str	r2, [r3, #0]
    memset(aTxBuffer, 0x00, sizeof(aTxBuffer));
 80018b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018bc:	2100      	movs	r1, #0
 80018be:	480c      	ldr	r0, [pc, #48]	; (80018f0 <initTest+0x48>)
 80018c0:	f007 fab4 	bl	8008e2c <memset>
    for (uint16_t Index = 0; Index < (sizeof(aTxBuffer) - 8); Index++)
 80018c4:	2300      	movs	r3, #0
    uint8_t Value = 0;
 80018c6:	461a      	mov	r2, r3
    for (uint16_t Index = 0; Index < (sizeof(aTxBuffer) - 8); Index++)
 80018c8:	e005      	b.n	80018d6 <initTest+0x2e>
        aTxBuffer[Index] = Value;
 80018ca:	4909      	ldr	r1, [pc, #36]	; (80018f0 <initTest+0x48>)
 80018cc:	54ca      	strb	r2, [r1, r3]
        Value++;
 80018ce:	3201      	adds	r2, #1
 80018d0:	b2d2      	uxtb	r2, r2
    for (uint16_t Index = 0; Index < (sizeof(aTxBuffer) - 8); Index++)
 80018d2:	3301      	adds	r3, #1
 80018d4:	b29b      	uxth	r3, r3
 80018d6:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 80018da:	d3f6      	bcc.n	80018ca <initTest+0x22>
    prepareForCompare();
 80018dc:	f7ff ffda 	bl	8001894 <prepareForCompare>
}
 80018e0:	bd08      	pop	{r3, pc}
 80018e2:	bf00      	nop
 80018e4:	2000081c 	.word	0x2000081c
 80018e8:	20000818 	.word	0x20000818
 80018ec:	07ffd000 	.word	0x07ffd000
 80018f0:	20001020 	.word	0x20001020

080018f4 <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80018f4:	4b10      	ldr	r3, [pc, #64]	; (8001938 <HAL_InitTick+0x44>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	b90b      	cbnz	r3, 80018fe <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80018fa:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80018fc:	4770      	bx	lr
{
 80018fe:	b510      	push	{r4, lr}
 8001900:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001902:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001906:	fbb0 f3f3 	udiv	r3, r0, r3
 800190a:	4a0c      	ldr	r2, [pc, #48]	; (800193c <HAL_InitTick+0x48>)
 800190c:	6810      	ldr	r0, [r2, #0]
 800190e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001912:	f000 f8a5 	bl	8001a60 <HAL_SYSTICK_Config>
 8001916:	b968      	cbnz	r0, 8001934 <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001918:	2c0f      	cmp	r4, #15
 800191a:	d901      	bls.n	8001920 <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 800191c:	2001      	movs	r0, #1
 800191e:	e00a      	b.n	8001936 <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001920:	2200      	movs	r2, #0
 8001922:	4621      	mov	r1, r4
 8001924:	f04f 30ff 	mov.w	r0, #4294967295
 8001928:	f000 f854 	bl	80019d4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800192c:	4b04      	ldr	r3, [pc, #16]	; (8001940 <HAL_InitTick+0x4c>)
 800192e:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 8001930:	2000      	movs	r0, #0
 8001932:	e000      	b.n	8001936 <HAL_InitTick+0x42>
      status = HAL_ERROR;
 8001934:	2001      	movs	r0, #1
}
 8001936:	bd10      	pop	{r4, pc}
 8001938:	20000004 	.word	0x20000004
 800193c:	20000000 	.word	0x20000000
 8001940:	20000008 	.word	0x20000008

08001944 <HAL_Init>:
{
 8001944:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001946:	2003      	movs	r0, #3
 8001948:	f000 f832 	bl	80019b0 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800194c:	200f      	movs	r0, #15
 800194e:	f7ff ffd1 	bl	80018f4 <HAL_InitTick>
 8001952:	b110      	cbz	r0, 800195a <HAL_Init+0x16>
    status = HAL_ERROR;
 8001954:	2401      	movs	r4, #1
}
 8001956:	4620      	mov	r0, r4
 8001958:	bd10      	pop	{r4, pc}
 800195a:	4604      	mov	r4, r0
    HAL_MspInit();
 800195c:	f7ff fa0e 	bl	8000d7c <HAL_MspInit>
 8001960:	e7f9      	b.n	8001956 <HAL_Init+0x12>
	...

08001964 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001964:	4b03      	ldr	r3, [pc, #12]	; (8001974 <HAL_IncTick+0x10>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	4a03      	ldr	r2, [pc, #12]	; (8001978 <HAL_IncTick+0x14>)
 800196a:	6811      	ldr	r1, [r2, #0]
 800196c:	440b      	add	r3, r1
 800196e:	6013      	str	r3, [r2, #0]
}
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	20000004 	.word	0x20000004
 8001978:	20001820 	.word	0x20001820

0800197c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800197c:	4b01      	ldr	r3, [pc, #4]	; (8001984 <HAL_GetTick+0x8>)
 800197e:	6818      	ldr	r0, [r3, #0]
}
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	20001820 	.word	0x20001820

08001988 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001988:	b538      	push	{r3, r4, r5, lr}
 800198a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800198c:	f7ff fff6 	bl	800197c <HAL_GetTick>
 8001990:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001992:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001996:	d002      	beq.n	800199e <HAL_Delay+0x16>
  {
    wait += (uint32_t)uwTickFreq;
 8001998:	4b04      	ldr	r3, [pc, #16]	; (80019ac <HAL_Delay+0x24>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800199e:	f7ff ffed 	bl	800197c <HAL_GetTick>
 80019a2:	1b40      	subs	r0, r0, r5
 80019a4:	42a0      	cmp	r0, r4
 80019a6:	d3fa      	bcc.n	800199e <HAL_Delay+0x16>
  {
  }
}
 80019a8:	bd38      	pop	{r3, r4, r5, pc}
 80019aa:	bf00      	nop
 80019ac:	20000004 	.word	0x20000004

080019b0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019b0:	4a07      	ldr	r2, [pc, #28]	; (80019d0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80019b2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019b4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80019b8:	041b      	lsls	r3, r3, #16
 80019ba:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019bc:	0200      	lsls	r0, r0, #8
 80019be:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019c2:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80019c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80019cc:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80019ce:	4770      	bx	lr
 80019d0:	e000ed00 	.word	0xe000ed00

080019d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019d4:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019d6:	4b19      	ldr	r3, [pc, #100]	; (8001a3c <HAL_NVIC_SetPriority+0x68>)
 80019d8:	68db      	ldr	r3, [r3, #12]
 80019da:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019de:	f1c3 0c07 	rsb	ip, r3, #7
 80019e2:	f1bc 0f04 	cmp.w	ip, #4
 80019e6:	bf28      	it	cs
 80019e8:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ec:	f103 0e04 	add.w	lr, r3, #4
 80019f0:	f1be 0f06 	cmp.w	lr, #6
 80019f4:	d918      	bls.n	8001a28 <HAL_NVIC_SetPriority+0x54>
 80019f6:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f8:	f04f 3eff 	mov.w	lr, #4294967295
 80019fc:	fa0e fc0c 	lsl.w	ip, lr, ip
 8001a00:	ea21 010c 	bic.w	r1, r1, ip
 8001a04:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a06:	fa0e fe03 	lsl.w	lr, lr, r3
 8001a0a:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a0e:	430a      	orrs	r2, r1
  if ((int32_t)(IRQn) >= 0)
 8001a10:	2800      	cmp	r0, #0
 8001a12:	db0b      	blt.n	8001a2c <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a14:	0112      	lsls	r2, r2, #4
 8001a16:	b2d2      	uxtb	r2, r2
 8001a18:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001a1c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001a20:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001a24:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a28:	2300      	movs	r3, #0
 8001a2a:	e7e5      	b.n	80019f8 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a2c:	f000 000f 	and.w	r0, r0, #15
 8001a30:	0112      	lsls	r2, r2, #4
 8001a32:	b2d2      	uxtb	r2, r2
 8001a34:	4b02      	ldr	r3, [pc, #8]	; (8001a40 <HAL_NVIC_SetPriority+0x6c>)
 8001a36:	541a      	strb	r2, [r3, r0]
 8001a38:	e7f4      	b.n	8001a24 <HAL_NVIC_SetPriority+0x50>
 8001a3a:	bf00      	nop
 8001a3c:	e000ed00 	.word	0xe000ed00
 8001a40:	e000ed14 	.word	0xe000ed14

08001a44 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001a44:	2800      	cmp	r0, #0
 8001a46:	db07      	blt.n	8001a58 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a48:	f000 021f 	and.w	r2, r0, #31
 8001a4c:	0940      	lsrs	r0, r0, #5
 8001a4e:	2301      	movs	r3, #1
 8001a50:	4093      	lsls	r3, r2
 8001a52:	4a02      	ldr	r2, [pc, #8]	; (8001a5c <HAL_NVIC_EnableIRQ+0x18>)
 8001a54:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	e000e100 	.word	0xe000e100

08001a60 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a60:	3801      	subs	r0, #1
 8001a62:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001a66:	d20b      	bcs.n	8001a80 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a68:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001a6c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a6e:	4a05      	ldr	r2, [pc, #20]	; (8001a84 <HAL_SYSTICK_Config+0x24>)
 8001a70:	21f0      	movs	r1, #240	; 0xf0
 8001a72:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a76:	2000      	movs	r0, #0
 8001a78:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a7a:	2207      	movs	r2, #7
 8001a7c:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a7e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001a80:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001a82:	4770      	bx	lr
 8001a84:	e000ed00 	.word	0xe000ed00

08001a88 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a88:	b430      	push	{r4, r5}
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a8a:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 8001a8c:	6d05      	ldr	r5, [r0, #80]	; 0x50
 8001a8e:	6065      	str	r5, [r4, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8001a90:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8001a92:	b114      	cbz	r4, 8001a9a <DMA_SetConfig+0x12>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a94:	6d84      	ldr	r4, [r0, #88]	; 0x58
 8001a96:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8001a98:	6065      	str	r5, [r4, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a9a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001a9c:	f004 0c1c 	and.w	ip, r4, #28
 8001aa0:	2401      	movs	r4, #1
 8001aa2:	fa04 f40c 	lsl.w	r4, r4, ip
 8001aa6:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8001aa8:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001aaa:	6804      	ldr	r4, [r0, #0]
 8001aac:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001aae:	6883      	ldr	r3, [r0, #8]
 8001ab0:	2b10      	cmp	r3, #16
 8001ab2:	d005      	beq.n	8001ac0 <DMA_SetConfig+0x38>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001ab4:	6803      	ldr	r3, [r0, #0]
 8001ab6:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001ab8:	6803      	ldr	r3, [r0, #0]
 8001aba:	60da      	str	r2, [r3, #12]
  }
}
 8001abc:	bc30      	pop	{r4, r5}
 8001abe:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8001ac0:	6803      	ldr	r3, [r0, #0]
 8001ac2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001ac4:	6803      	ldr	r3, [r0, #0]
 8001ac6:	60d9      	str	r1, [r3, #12]
 8001ac8:	e7f8      	b.n	8001abc <DMA_SetConfig+0x34>
	...

08001acc <DMA_CalcDMAMUXChannelBaseAndMask>:
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001acc:	6803      	ldr	r3, [r0, #0]
 8001ace:	4a10      	ldr	r2, [pc, #64]	; (8001b10 <DMA_CalcDMAMUXChannelBaseAndMask+0x44>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d815      	bhi.n	8001b00 <DMA_CalcDMAMUXChannelBaseAndMask+0x34>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001ad4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8001ad6:	f022 0203 	bic.w	r2, r2, #3
 8001ada:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8001ade:	f502 3202 	add.w	r2, r2, #133120	; 0x20800
 8001ae2:	6482      	str	r2, [r0, #72]	; 0x48
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	3b08      	subs	r3, #8
 8001ae8:	4a0a      	ldr	r2, [pc, #40]	; (8001b14 <DMA_CalcDMAMUXChannelBaseAndMask+0x48>)
 8001aea:	fba2 2303 	umull	r2, r3, r2, r3
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001aee:	4a0a      	ldr	r2, [pc, #40]	; (8001b18 <DMA_CalcDMAMUXChannelBaseAndMask+0x4c>)
 8001af0:	64c2      	str	r2, [r0, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001af2:	f3c3 1304 	ubfx	r3, r3, #4, #5
 8001af6:	2201      	movs	r2, #1
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	6503      	str	r3, [r0, #80]	; 0x50
}
 8001afe:	4770      	bx	lr
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001b00:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8001b02:	f022 0103 	bic.w	r1, r2, #3
 8001b06:	4a05      	ldr	r2, [pc, #20]	; (8001b1c <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8001b08:	440a      	add	r2, r1
 8001b0a:	6482      	str	r2, [r0, #72]	; 0x48
 8001b0c:	e7ea      	b.n	8001ae4 <DMA_CalcDMAMUXChannelBaseAndMask+0x18>
 8001b0e:	bf00      	nop
 8001b10:	40020407 	.word	0x40020407
 8001b14:	cccccccd 	.word	0xcccccccd
 8001b18:	40020880 	.word	0x40020880
 8001b1c:	4002081c 	.word	0x4002081c

08001b20 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001b20:	7903      	ldrb	r3, [r0, #4]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001b22:	4a07      	ldr	r2, [pc, #28]	; (8001b40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x20>)
 8001b24:	441a      	add	r2, r3
 8001b26:	0092      	lsls	r2, r2, #2
 8001b28:	6542      	str	r2, [r0, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001b2a:	4a06      	ldr	r2, [pc, #24]	; (8001b44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 8001b2c:	6582      	str	r2, [r0, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001b2e:	3b01      	subs	r3, #1
 8001b30:	f003 0303 	and.w	r3, r3, #3
 8001b34:	2201      	movs	r2, #1
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	65c3      	str	r3, [r0, #92]	; 0x5c
}
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	1000823f 	.word	0x1000823f
 8001b44:	40020940 	.word	0x40020940

08001b48 <HAL_DMA_Init>:
  if(hdma == NULL)
 8001b48:	2800      	cmp	r0, #0
 8001b4a:	d05b      	beq.n	8001c04 <HAL_DMA_Init+0xbc>
{
 8001b4c:	b510      	push	{r4, lr}
 8001b4e:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001b50:	6801      	ldr	r1, [r0, #0]
 8001b52:	4b2d      	ldr	r3, [pc, #180]	; (8001c08 <HAL_DMA_Init+0xc0>)
 8001b54:	4299      	cmp	r1, r3
 8001b56:	d83d      	bhi.n	8001bd4 <HAL_DMA_Init+0x8c>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001b58:	4b2c      	ldr	r3, [pc, #176]	; (8001c0c <HAL_DMA_Init+0xc4>)
 8001b5a:	440b      	add	r3, r1
 8001b5c:	4a2c      	ldr	r2, [pc, #176]	; (8001c10 <HAL_DMA_Init+0xc8>)
 8001b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b62:	091b      	lsrs	r3, r3, #4
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001b68:	4b2a      	ldr	r3, [pc, #168]	; (8001c14 <HAL_DMA_Init+0xcc>)
 8001b6a:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  tmp = hdma->Instance->CCR;
 8001b72:	680a      	ldr	r2, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001b74:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8001b78:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmp |=  hdma->Init.Direction        |
 8001b7c:	68a3      	ldr	r3, [r4, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b7e:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Direction        |
 8001b80:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b82:	6920      	ldr	r0, [r4, #16]
 8001b84:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b86:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b88:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b8a:	69a0      	ldr	r0, [r4, #24]
 8001b8c:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b8e:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b90:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b92:	6a20      	ldr	r0, [r4, #32]
 8001b94:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 8001b96:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 8001b98:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001b9a:	4620      	mov	r0, r4
 8001b9c:	f7ff ff96 	bl	8001acc <DMA_CalcDMAMUXChannelBaseAndMask>
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001ba0:	68a3      	ldr	r3, [r4, #8]
 8001ba2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001ba6:	d020      	beq.n	8001bea <HAL_DMA_Init+0xa2>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001ba8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001baa:	7922      	ldrb	r2, [r4, #4]
 8001bac:	601a      	str	r2, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001bae:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001bb0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001bb2:	605a      	str	r2, [r3, #4]
  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001bb4:	6863      	ldr	r3, [r4, #4]
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	2b03      	cmp	r3, #3
 8001bba:	d919      	bls.n	8001bf0 <HAL_DMA_Init+0xa8>
    hdma->DMAmuxRequestGen = 0U;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001bc0:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001bc2:	65e3      	str	r3, [r4, #92]	; 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bc4:	2000      	movs	r0, #0
 8001bc6:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  hdma->Lock = HAL_UNLOCKED;
 8001bce:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 8001bd2:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001bd4:	4b10      	ldr	r3, [pc, #64]	; (8001c18 <HAL_DMA_Init+0xd0>)
 8001bd6:	440b      	add	r3, r1
 8001bd8:	4a0d      	ldr	r2, [pc, #52]	; (8001c10 <HAL_DMA_Init+0xc8>)
 8001bda:	fba2 2303 	umull	r2, r3, r2, r3
 8001bde:	091b      	lsrs	r3, r3, #4
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001be4:	4b0d      	ldr	r3, [pc, #52]	; (8001c1c <HAL_DMA_Init+0xd4>)
 8001be6:	6403      	str	r3, [r0, #64]	; 0x40
 8001be8:	e7c0      	b.n	8001b6c <HAL_DMA_Init+0x24>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001bea:	2300      	movs	r3, #0
 8001bec:	6063      	str	r3, [r4, #4]
 8001bee:	e7db      	b.n	8001ba8 <HAL_DMA_Init+0x60>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001bf0:	4620      	mov	r0, r4
 8001bf2:	f7ff ff95 	bl	8001b20 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001bf6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001bfc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001bfe:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001c00:	605a      	str	r2, [r3, #4]
 8001c02:	e7df      	b.n	8001bc4 <HAL_DMA_Init+0x7c>
    return HAL_ERROR;
 8001c04:	2001      	movs	r0, #1
}
 8001c06:	4770      	bx	lr
 8001c08:	40020407 	.word	0x40020407
 8001c0c:	bffdfff8 	.word	0xbffdfff8
 8001c10:	cccccccd 	.word	0xcccccccd
 8001c14:	40020000 	.word	0x40020000
 8001c18:	bffdfbf8 	.word	0xbffdfbf8
 8001c1c:	40020400 	.word	0x40020400

08001c20 <HAL_DMA_Start_IT>:
{
 8001c20:	b538      	push	{r3, r4, r5, lr}
 8001c22:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8001c24:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
 8001c28:	2801      	cmp	r0, #1
 8001c2a:	d041      	beq.n	8001cb0 <HAL_DMA_Start_IT+0x90>
 8001c2c:	2001      	movs	r0, #1
 8001c2e:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c32:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
 8001c36:	b2c0      	uxtb	r0, r0
 8001c38:	2801      	cmp	r0, #1
 8001c3a:	d004      	beq.n	8001c46 <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    status = HAL_BUSY;
 8001c42:	2002      	movs	r0, #2
}
 8001c44:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c46:	2002      	movs	r0, #2
 8001c48:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c4c:	2000      	movs	r0, #0
 8001c4e:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8001c50:	6825      	ldr	r5, [r4, #0]
 8001c52:	6828      	ldr	r0, [r5, #0]
 8001c54:	f020 0001 	bic.w	r0, r0, #1
 8001c58:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c5a:	4620      	mov	r0, r4
 8001c5c:	f7ff ff14 	bl	8001a88 <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback )
 8001c60:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001c62:	b1d3      	cbz	r3, 8001c9a <HAL_DMA_Start_IT+0x7a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c64:	6822      	ldr	r2, [r4, #0]
 8001c66:	6813      	ldr	r3, [r2, #0]
 8001c68:	f043 030e 	orr.w	r3, r3, #14
 8001c6c:	6013      	str	r3, [r2, #0]
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001c6e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8001c76:	d003      	beq.n	8001c80 <HAL_DMA_Start_IT+0x60>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c7e:	601a      	str	r2, [r3, #0]
    if(hdma->DMAmuxRequestGen != 0U)
 8001c80:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001c82:	b11b      	cbz	r3, 8001c8c <HAL_DMA_Start_IT+0x6c>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c8a:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8001c8c:	6822      	ldr	r2, [r4, #0]
 8001c8e:	6813      	ldr	r3, [r2, #0]
 8001c90:	f043 0301 	orr.w	r3, r3, #1
 8001c94:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c96:	2000      	movs	r0, #0
 8001c98:	e7d4      	b.n	8001c44 <HAL_DMA_Start_IT+0x24>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c9a:	6822      	ldr	r2, [r4, #0]
 8001c9c:	6813      	ldr	r3, [r2, #0]
 8001c9e:	f023 0304 	bic.w	r3, r3, #4
 8001ca2:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001ca4:	6822      	ldr	r2, [r4, #0]
 8001ca6:	6813      	ldr	r3, [r2, #0]
 8001ca8:	f043 030a 	orr.w	r3, r3, #10
 8001cac:	6013      	str	r3, [r2, #0]
 8001cae:	e7de      	b.n	8001c6e <HAL_DMA_Start_IT+0x4e>
  __HAL_LOCK(hdma);
 8001cb0:	2002      	movs	r0, #2
 8001cb2:	e7c7      	b.n	8001c44 <HAL_DMA_Start_IT+0x24>

08001cb4 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cb4:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d006      	beq.n	8001ccc <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cbe:	2304      	movs	r3, #4
 8001cc0:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 8001cc8:	2001      	movs	r0, #1
 8001cca:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ccc:	6802      	ldr	r2, [r0, #0]
 8001cce:	6813      	ldr	r3, [r2, #0]
 8001cd0:	f023 030e 	bic.w	r3, r3, #14
 8001cd4:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001cd6:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8001cd8:	6813      	ldr	r3, [r2, #0]
 8001cda:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001cde:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001ce0:	6802      	ldr	r2, [r0, #0]
 8001ce2:	6813      	ldr	r3, [r2, #0]
 8001ce4:	f023 0301 	bic.w	r3, r3, #1
 8001ce8:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001cea:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001cec:	f003 021c 	and.w	r2, r3, #28
 8001cf0:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	4093      	lsls	r3, r2
 8001cf6:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001cf8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001cfa:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8001cfc:	605a      	str	r2, [r3, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8001cfe:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001d00:	b133      	cbz	r3, 8001d10 <HAL_DMA_Abort+0x5c>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d08:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d0a:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8001d0c:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001d0e:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001d10:	2301      	movs	r3, #1
 8001d12:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8001d16:	2300      	movs	r3, #0
 8001d18:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    return status;
 8001d1c:	4618      	mov	r0, r3
}
 8001d1e:	4770      	bx	lr

08001d20 <HAL_DMA_Abort_IT>:
{
 8001d20:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001d22:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d003      	beq.n	8001d34 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d2c:	2304      	movs	r3, #4
 8001d2e:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8001d30:	2001      	movs	r0, #1
}
 8001d32:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d34:	6802      	ldr	r2, [r0, #0]
 8001d36:	6813      	ldr	r3, [r2, #0]
 8001d38:	f023 030e 	bic.w	r3, r3, #14
 8001d3c:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001d3e:	6802      	ldr	r2, [r0, #0]
 8001d40:	6813      	ldr	r3, [r2, #0]
 8001d42:	f023 0301 	bic.w	r3, r3, #1
 8001d46:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001d48:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8001d4a:	6813      	ldr	r3, [r2, #0]
 8001d4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d50:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d52:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001d54:	f003 021c 	and.w	r2, r3, #28
 8001d58:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	4093      	lsls	r3, r2
 8001d5e:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d60:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001d62:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8001d64:	605a      	str	r2, [r3, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8001d66:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001d68:	b133      	cbz	r3, 8001d78 <HAL_DMA_Abort_IT+0x58>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d70:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d72:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8001d74:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001d76:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8001d7e:	2300      	movs	r3, #0
 8001d80:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferAbortCallback != NULL)
 8001d84:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001d86:	b113      	cbz	r3, 8001d8e <HAL_DMA_Abort_IT+0x6e>
      hdma->XferAbortCallback(hdma);
 8001d88:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8001d8a:	2000      	movs	r0, #0
 8001d8c:	e7d1      	b.n	8001d32 <HAL_DMA_Abort_IT+0x12>
 8001d8e:	2000      	movs	r0, #0
 8001d90:	e7cf      	b.n	8001d32 <HAL_DMA_Abort_IT+0x12>

08001d92 <HAL_DMA_IRQHandler>:
{
 8001d92:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001d94:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001d96:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001d98:	6804      	ldr	r4, [r0, #0]
 8001d9a:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001d9c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001d9e:	f003 031c 	and.w	r3, r3, #28
 8001da2:	2204      	movs	r2, #4
 8001da4:	409a      	lsls	r2, r3
 8001da6:	420a      	tst	r2, r1
 8001da8:	d015      	beq.n	8001dd6 <HAL_DMA_IRQHandler+0x44>
 8001daa:	f015 0f04 	tst.w	r5, #4
 8001dae:	d012      	beq.n	8001dd6 <HAL_DMA_IRQHandler+0x44>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001db0:	6823      	ldr	r3, [r4, #0]
 8001db2:	f013 0f20 	tst.w	r3, #32
 8001db6:	d103      	bne.n	8001dc0 <HAL_DMA_IRQHandler+0x2e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001db8:	6823      	ldr	r3, [r4, #0]
 8001dba:	f023 0304 	bic.w	r3, r3, #4
 8001dbe:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001dc0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001dc2:	f003 021c 	and.w	r2, r3, #28
 8001dc6:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001dc8:	2304      	movs	r3, #4
 8001dca:	4093      	lsls	r3, r2
 8001dcc:	604b      	str	r3, [r1, #4]
      if(hdma->XferHalfCpltCallback != NULL)
 8001dce:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001dd0:	b103      	cbz	r3, 8001dd4 <HAL_DMA_IRQHandler+0x42>
        hdma->XferHalfCpltCallback(hdma);
 8001dd2:	4798      	blx	r3
}
 8001dd4:	bd38      	pop	{r3, r4, r5, pc}
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001dd6:	2202      	movs	r2, #2
 8001dd8:	409a      	lsls	r2, r3
 8001dda:	420a      	tst	r2, r1
 8001ddc:	d01c      	beq.n	8001e18 <HAL_DMA_IRQHandler+0x86>
 8001dde:	f015 0f02 	tst.w	r5, #2
 8001de2:	d019      	beq.n	8001e18 <HAL_DMA_IRQHandler+0x86>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001de4:	6823      	ldr	r3, [r4, #0]
 8001de6:	f013 0f20 	tst.w	r3, #32
 8001dea:	d106      	bne.n	8001dfa <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001dec:	6823      	ldr	r3, [r4, #0]
 8001dee:	f023 030a 	bic.w	r3, r3, #10
 8001df2:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001df4:	2301      	movs	r3, #1
 8001df6:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001dfa:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001dfc:	f003 021c 	and.w	r2, r3, #28
 8001e00:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001e02:	2302      	movs	r3, #2
 8001e04:	4093      	lsls	r3, r2
 8001e06:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);
 8001e08:	2300      	movs	r3, #0
 8001e0a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferCpltCallback != NULL)
 8001e0e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d0df      	beq.n	8001dd4 <HAL_DMA_IRQHandler+0x42>
      hdma->XferCpltCallback(hdma);
 8001e14:	4798      	blx	r3
 8001e16:	e7dd      	b.n	8001dd4 <HAL_DMA_IRQHandler+0x42>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001e18:	2208      	movs	r2, #8
 8001e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1e:	420b      	tst	r3, r1
 8001e20:	d0d8      	beq.n	8001dd4 <HAL_DMA_IRQHandler+0x42>
 8001e22:	f015 0f08 	tst.w	r5, #8
 8001e26:	d0d5      	beq.n	8001dd4 <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e28:	6823      	ldr	r3, [r4, #0]
 8001e2a:	f023 030e 	bic.w	r3, r3, #14
 8001e2e:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e30:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001e32:	f003 031c 	and.w	r3, r3, #28
 8001e36:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001e38:	2201      	movs	r2, #1
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001e40:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8001e42:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8001e46:	2300      	movs	r3, #0
 8001e48:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8001e4c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d0c0      	beq.n	8001dd4 <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 8001e52:	4798      	blx	r3
  return;
 8001e54:	e7be      	b.n	8001dd4 <HAL_DMA_IRQHandler+0x42>

08001e56 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8001e56:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
}
 8001e58:	4770      	bx	lr
	...

08001e5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e5e:	b083      	sub	sp, #12
  uint32_t position = 0x00u;
 8001e60:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e62:	e062      	b.n	8001f2a <HAL_GPIO_Init+0xce>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e64:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e66:	005e      	lsls	r6, r3, #1
 8001e68:	2403      	movs	r4, #3
 8001e6a:	40b4      	lsls	r4, r6
 8001e6c:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e70:	68cc      	ldr	r4, [r1, #12]
 8001e72:	40b4      	lsls	r4, r6
 8001e74:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8001e76:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e78:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e7a:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e7e:	684c      	ldr	r4, [r1, #4]
 8001e80:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8001e84:	409c      	lsls	r4, r3
 8001e86:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8001e88:	6044      	str	r4, [r0, #4]
 8001e8a:	e060      	b.n	8001f4e <HAL_GPIO_Init+0xf2>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e8c:	08dd      	lsrs	r5, r3, #3
 8001e8e:	3508      	adds	r5, #8
 8001e90:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e94:	f003 0c07 	and.w	ip, r3, #7
 8001e98:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001e9c:	f04f 0e0f 	mov.w	lr, #15
 8001ea0:	fa0e fe0c 	lsl.w	lr, lr, ip
 8001ea4:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ea8:	690c      	ldr	r4, [r1, #16]
 8001eaa:	fa04 f40c 	lsl.w	r4, r4, ip
 8001eae:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3u] = temp;
 8001eb2:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8001eb6:	e061      	b.n	8001f7c <HAL_GPIO_Init+0x120>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001eb8:	2407      	movs	r4, #7
 8001eba:	e000      	b.n	8001ebe <HAL_GPIO_Init+0x62>
 8001ebc:	2400      	movs	r4, #0
 8001ebe:	fa04 f40e 	lsl.w	r4, r4, lr
 8001ec2:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ec4:	f10c 0c02 	add.w	ip, ip, #2
 8001ec8:	4d5c      	ldr	r5, [pc, #368]	; (800203c <HAL_GPIO_Init+0x1e0>)
 8001eca:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ece:	4c5c      	ldr	r4, [pc, #368]	; (8002040 <HAL_GPIO_Init+0x1e4>)
 8001ed0:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 8001ed2:	43d4      	mvns	r4, r2
 8001ed4:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ed8:	684f      	ldr	r7, [r1, #4]
 8001eda:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8001ede:	d001      	beq.n	8001ee4 <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 8001ee0:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8001ee4:	4d56      	ldr	r5, [pc, #344]	; (8002040 <HAL_GPIO_Init+0x1e4>)
 8001ee6:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 8001ee8:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 8001eea:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001eee:	684f      	ldr	r7, [r1, #4]
 8001ef0:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
 8001ef4:	d001      	beq.n	8001efa <HAL_GPIO_Init+0x9e>
        {
          temp |= iocurrent;
 8001ef6:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 8001efa:	4d51      	ldr	r5, [pc, #324]	; (8002040 <HAL_GPIO_Init+0x1e4>)
 8001efc:	60ee      	str	r6, [r5, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001efe:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8001f00:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f04:	684f      	ldr	r7, [r1, #4]
 8001f06:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8001f0a:	d001      	beq.n	8001f10 <HAL_GPIO_Init+0xb4>
        {
          temp |= iocurrent;
 8001f0c:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 8001f10:	4d4b      	ldr	r5, [pc, #300]	; (8002040 <HAL_GPIO_Init+0x1e4>)
 8001f12:	606e      	str	r6, [r5, #4]

        temp = EXTI->IMR1;
 8001f14:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 8001f16:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f18:	684e      	ldr	r6, [r1, #4]
 8001f1a:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 8001f1e:	d001      	beq.n	8001f24 <HAL_GPIO_Init+0xc8>
        {
          temp |= iocurrent;
 8001f20:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->IMR1 = temp;
 8001f24:	4a46      	ldr	r2, [pc, #280]	; (8002040 <HAL_GPIO_Init+0x1e4>)
 8001f26:	6014      	str	r4, [r2, #0]
      }
    }

    position++;
 8001f28:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f2a:	680a      	ldr	r2, [r1, #0]
 8001f2c:	fa32 f403 	lsrs.w	r4, r2, r3
 8001f30:	f000 8081 	beq.w	8002036 <HAL_GPIO_Init+0x1da>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f34:	f04f 0c01 	mov.w	ip, #1
 8001f38:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 8001f3c:	ea1c 0202 	ands.w	r2, ip, r2
 8001f40:	d0f2      	beq.n	8001f28 <HAL_GPIO_Init+0xcc>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f42:	684c      	ldr	r4, [r1, #4]
 8001f44:	f004 0403 	and.w	r4, r4, #3
 8001f48:	3c01      	subs	r4, #1
 8001f4a:	2c01      	cmp	r4, #1
 8001f4c:	d98a      	bls.n	8001e64 <HAL_GPIO_Init+0x8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f4e:	684c      	ldr	r4, [r1, #4]
 8001f50:	f004 0403 	and.w	r4, r4, #3
 8001f54:	2c03      	cmp	r4, #3
 8001f56:	d00c      	beq.n	8001f72 <HAL_GPIO_Init+0x116>
        temp = GPIOx->PUPDR;
 8001f58:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f5a:	005d      	lsls	r5, r3, #1
 8001f5c:	f04f 0c03 	mov.w	ip, #3
 8001f60:	fa0c fc05 	lsl.w	ip, ip, r5
 8001f64:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f68:	688c      	ldr	r4, [r1, #8]
 8001f6a:	40ac      	lsls	r4, r5
 8001f6c:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 8001f70:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f72:	684c      	ldr	r4, [r1, #4]
 8001f74:	f004 0403 	and.w	r4, r4, #3
 8001f78:	2c02      	cmp	r4, #2
 8001f7a:	d087      	beq.n	8001e8c <HAL_GPIO_Init+0x30>
      temp = GPIOx->MODER;
 8001f7c:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f7e:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001f82:	f04f 0c03 	mov.w	ip, #3
 8001f86:	fa0c fc0e 	lsl.w	ip, ip, lr
 8001f8a:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f8e:	684c      	ldr	r4, [r1, #4]
 8001f90:	f004 0403 	and.w	r4, r4, #3
 8001f94:	fa04 f40e 	lsl.w	r4, r4, lr
 8001f98:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8001f9c:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f9e:	684c      	ldr	r4, [r1, #4]
 8001fa0:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 8001fa4:	d0c0      	beq.n	8001f28 <HAL_GPIO_Init+0xcc>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fa6:	4c27      	ldr	r4, [pc, #156]	; (8002044 <HAL_GPIO_Init+0x1e8>)
 8001fa8:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8001faa:	f045 0501 	orr.w	r5, r5, #1
 8001fae:	6625      	str	r5, [r4, #96]	; 0x60
 8001fb0:	6e24      	ldr	r4, [r4, #96]	; 0x60
 8001fb2:	f004 0401 	and.w	r4, r4, #1
 8001fb6:	9401      	str	r4, [sp, #4]
 8001fb8:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8001fba:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8001fbe:	f10c 0502 	add.w	r5, ip, #2
 8001fc2:	4c1e      	ldr	r4, [pc, #120]	; (800203c <HAL_GPIO_Init+0x1e0>)
 8001fc4:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001fc8:	f003 0e03 	and.w	lr, r3, #3
 8001fcc:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001fd0:	240f      	movs	r4, #15
 8001fd2:	fa04 f40e 	lsl.w	r4, r4, lr
 8001fd6:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001fda:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8001fde:	f43f af6d 	beq.w	8001ebc <HAL_GPIO_Init+0x60>
 8001fe2:	4c19      	ldr	r4, [pc, #100]	; (8002048 <HAL_GPIO_Init+0x1ec>)
 8001fe4:	42a0      	cmp	r0, r4
 8001fe6:	d01a      	beq.n	800201e <HAL_GPIO_Init+0x1c2>
 8001fe8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001fec:	42a0      	cmp	r0, r4
 8001fee:	d018      	beq.n	8002022 <HAL_GPIO_Init+0x1c6>
 8001ff0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001ff4:	42a0      	cmp	r0, r4
 8001ff6:	d016      	beq.n	8002026 <HAL_GPIO_Init+0x1ca>
 8001ff8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001ffc:	42a0      	cmp	r0, r4
 8001ffe:	d014      	beq.n	800202a <HAL_GPIO_Init+0x1ce>
 8002000:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002004:	42a0      	cmp	r0, r4
 8002006:	d012      	beq.n	800202e <HAL_GPIO_Init+0x1d2>
 8002008:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800200c:	42a0      	cmp	r0, r4
 800200e:	d010      	beq.n	8002032 <HAL_GPIO_Init+0x1d6>
 8002010:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002014:	42a0      	cmp	r0, r4
 8002016:	f43f af4f 	beq.w	8001eb8 <HAL_GPIO_Init+0x5c>
 800201a:	2408      	movs	r4, #8
 800201c:	e74f      	b.n	8001ebe <HAL_GPIO_Init+0x62>
 800201e:	2401      	movs	r4, #1
 8002020:	e74d      	b.n	8001ebe <HAL_GPIO_Init+0x62>
 8002022:	2402      	movs	r4, #2
 8002024:	e74b      	b.n	8001ebe <HAL_GPIO_Init+0x62>
 8002026:	2403      	movs	r4, #3
 8002028:	e749      	b.n	8001ebe <HAL_GPIO_Init+0x62>
 800202a:	2404      	movs	r4, #4
 800202c:	e747      	b.n	8001ebe <HAL_GPIO_Init+0x62>
 800202e:	2405      	movs	r4, #5
 8002030:	e745      	b.n	8001ebe <HAL_GPIO_Init+0x62>
 8002032:	2406      	movs	r4, #6
 8002034:	e743      	b.n	8001ebe <HAL_GPIO_Init+0x62>
  }
}
 8002036:	b003      	add	sp, #12
 8002038:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800203a:	bf00      	nop
 800203c:	40010000 	.word	0x40010000
 8002040:	40010400 	.word	0x40010400
 8002044:	40021000 	.word	0x40021000
 8002048:	48000400 	.word	0x48000400

0800204c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800204c:	b10a      	cbz	r2, 8002052 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800204e:	6181      	str	r1, [r0, #24]
 8002050:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002052:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8002054:	4770      	bx	lr

08002056 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002056:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002058:	ea01 0203 	and.w	r2, r1, r3
 800205c:	ea21 0103 	bic.w	r1, r1, r3
 8002060:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8002064:	6181      	str	r1, [r0, #24]
}
 8002066:	4770      	bx	lr

08002068 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800206a:	6806      	ldr	r6, [r0, #0]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800206c:	6a34      	ldr	r4, [r6, #32]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800206e:	f004 070f 	and.w	r7, r4, #15
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002072:	f3c4 4343 	ubfx	r3, r4, #17, #4
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002076:	f3c4 140a 	ubfx	r4, r4, #4, #11

  switch (pktsts)
 800207a:	2b02      	cmp	r3, #2
 800207c:	d000      	beq.n	8002080 <HCD_RXQLVL_IRQHandler+0x18>
    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
  }
}
 800207e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002080:	4605      	mov	r5, r0
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002082:	2c00      	cmp	r4, #0
 8002084:	d0fb      	beq.n	800207e <HCD_RXQLVL_IRQHandler+0x16>
 8002086:	232c      	movs	r3, #44	; 0x2c
 8002088:	fb03 0307 	mla	r3, r3, r7, r0
 800208c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800208e:	2900      	cmp	r1, #0
 8002090:	d0f5      	beq.n	800207e <HCD_RXQLVL_IRQHandler+0x16>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002092:	232c      	movs	r3, #44	; 0x2c
 8002094:	fb03 0307 	mla	r3, r3, r7, r0
 8002098:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800209a:	4422      	add	r2, r4
 800209c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800209e:	429a      	cmp	r2, r3
 80020a0:	d906      	bls.n	80020b0 <HCD_RXQLVL_IRQHandler+0x48>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80020a2:	232c      	movs	r3, #44	; 0x2c
 80020a4:	fb03 0507 	mla	r5, r3, r7, r0
 80020a8:	2304      	movs	r3, #4
 80020aa:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
}
 80020ae:	e7e6      	b.n	800207e <HCD_RXQLVL_IRQHandler+0x16>
          (void)USB_ReadPacket(hhcd->Instance,
 80020b0:	4622      	mov	r2, r4
 80020b2:	4630      	mov	r0, r6
 80020b4:	f003 ff0e 	bl	8005ed4 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80020b8:	232c      	movs	r3, #44	; 0x2c
 80020ba:	fb03 5307 	mla	r3, r3, r7, r5
 80020be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020c0:	4422      	add	r2, r4
 80020c2:	645a      	str	r2, [r3, #68]	; 0x44
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80020c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020c6:	4422      	add	r2, r4
 80020c8:	651a      	str	r2, [r3, #80]	; 0x50
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80020ca:	eb06 1647 	add.w	r6, r6, r7, lsl #5
 80020ce:	f8d6 2510 	ldr.w	r2, [r6, #1296]	; 0x510
 80020d2:	f3c2 42c9 	ubfx	r2, r2, #19, #10
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80020d6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80020da:	42a3      	cmp	r3, r4
 80020dc:	d1cf      	bne.n	800207e <HCD_RXQLVL_IRQHandler+0x16>
 80020de:	2a00      	cmp	r2, #0
 80020e0:	d0cd      	beq.n	800207e <HCD_RXQLVL_IRQHandler+0x16>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80020e2:	f8d6 3500 	ldr.w	r3, [r6, #1280]	; 0x500
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80020e6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80020ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80020ee:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80020f2:	232c      	movs	r3, #44	; 0x2c
 80020f4:	fb03 5307 	mla	r3, r3, r7, r5
 80020f8:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 80020fc:	f082 0201 	eor.w	r2, r2, #1
 8002100:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8002104:	e7bb      	b.n	800207e <HCD_RXQLVL_IRQHandler+0x16>

08002106 <HAL_HCD_HC_Init>:
{
 8002106:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002108:	b085      	sub	sp, #20
 800210a:	4604      	mov	r4, r0
 800210c:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
 8002110:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
 8002114:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
  __HAL_LOCK(hhcd);
 8002118:	f890 02f8 	ldrb.w	r0, [r0, #760]	; 0x2f8
 800211c:	2801      	cmp	r0, #1
 800211e:	d037      	beq.n	8002190 <HAL_HCD_HC_Init+0x8a>
 8002120:	2001      	movs	r0, #1
 8002122:	f884 02f8 	strb.w	r0, [r4, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002126:	202c      	movs	r0, #44	; 0x2c
 8002128:	fb00 4001 	mla	r0, r0, r1, r4
 800212c:	f04f 0c00 	mov.w	ip, #0
 8002130:	f880 c03d 	strb.w	ip, [r0, #61]	; 0x3d
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002134:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hhcd->hc[ch_num].max_packet = mps;
 8002138:	f8a0 7040 	strh.w	r7, [r0, #64]	; 0x40
  hhcd->hc[ch_num].ch_num = ch_num;
 800213c:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
  hhcd->hc[ch_num].ep_type = ep_type;
 8002140:	f880 603f 	strb.w	r6, [r0, #63]	; 0x3f
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002144:	f002 0c7f 	and.w	ip, r2, #127	; 0x7f
 8002148:	f880 c03a 	strb.w	ip, [r0, #58]	; 0x3a
  if ((epnum & 0x80U) == 0x80U)
 800214c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002150:	d116      	bne.n	8002180 <HAL_HCD_HC_Init+0x7a>
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002152:	202c      	movs	r0, #44	; 0x2c
 8002154:	fb00 4001 	mla	r0, r0, r1, r4
 8002158:	f04f 0c00 	mov.w	ip, #0
 800215c:	f880 c03b 	strb.w	ip, [r0, #59]	; 0x3b
  hhcd->hc[ch_num].speed = speed;
 8002160:	202c      	movs	r0, #44	; 0x2c
 8002162:	fb00 4001 	mla	r0, r0, r1, r4
 8002166:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  status =  USB_HC_Init(hhcd->Instance,
 800216a:	9702      	str	r7, [sp, #8]
 800216c:	9601      	str	r6, [sp, #4]
 800216e:	9500      	str	r5, [sp, #0]
 8002170:	6820      	ldr	r0, [r4, #0]
 8002172:	f003 ffcc 	bl	800610e <USB_HC_Init>
  __HAL_UNLOCK(hhcd);
 8002176:	2300      	movs	r3, #0
 8002178:	f884 32f8 	strb.w	r3, [r4, #760]	; 0x2f8
}
 800217c:	b005      	add	sp, #20
 800217e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002180:	202c      	movs	r0, #44	; 0x2c
 8002182:	fb00 4001 	mla	r0, r0, r1, r4
 8002186:	f04f 0c01 	mov.w	ip, #1
 800218a:	f880 c03b 	strb.w	ip, [r0, #59]	; 0x3b
 800218e:	e7e7      	b.n	8002160 <HAL_HCD_HC_Init+0x5a>
  __HAL_LOCK(hhcd);
 8002190:	2002      	movs	r0, #2
 8002192:	e7f3      	b.n	800217c <HAL_HCD_HC_Init+0x76>

08002194 <HAL_HCD_HC_Halt>:
  __HAL_LOCK(hhcd);
 8002194:	f890 32f8 	ldrb.w	r3, [r0, #760]	; 0x2f8
 8002198:	2b01      	cmp	r3, #1
 800219a:	d00b      	beq.n	80021b4 <HAL_HCD_HC_Halt+0x20>
{
 800219c:	b510      	push	{r4, lr}
 800219e:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 80021a0:	2301      	movs	r3, #1
 80021a2:	f880 32f8 	strb.w	r3, [r0, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021a6:	6800      	ldr	r0, [r0, #0]
 80021a8:	f004 f8cf 	bl	800634a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80021ac:	2000      	movs	r0, #0
 80021ae:	f884 02f8 	strb.w	r0, [r4, #760]	; 0x2f8
}
 80021b2:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 80021b4:	2002      	movs	r0, #2
}
 80021b6:	4770      	bx	lr

080021b8 <HAL_HCD_Init>:
  if (hhcd == NULL)
 80021b8:	2800      	cmp	r0, #0
 80021ba:	d04d      	beq.n	8002258 <HAL_HCD_Init+0xa0>
{
 80021bc:	b570      	push	{r4, r5, r6, lr}
 80021be:	b08a      	sub	sp, #40	; 0x28
 80021c0:	4604      	mov	r4, r0
  USBx = hhcd->Instance;
 80021c2:	6805      	ldr	r5, [r0, #0]
  if (hhcd->State == HAL_HCD_STATE_RESET)
 80021c4:	f890 32f9 	ldrb.w	r3, [r0, #761]	; 0x2f9
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d040      	beq.n	800224e <HAL_HCD_Init+0x96>
  hhcd->State = HAL_HCD_STATE_BUSY;
 80021cc:	2303      	movs	r3, #3
 80021ce:	f884 32f9 	strb.w	r3, [r4, #761]	; 0x2f9
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80021d2:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80021d4:	f413 7f80 	tst.w	r3, #256	; 0x100
 80021d8:	d101      	bne.n	80021de <HAL_HCD_Init+0x26>
    hhcd->Init.dma_enable = 0U;
 80021da:	2300      	movs	r3, #0
 80021dc:	6123      	str	r3, [r4, #16]
  __HAL_HCD_DISABLE(hhcd);
 80021de:	6820      	ldr	r0, [r4, #0]
 80021e0:	f003 fe10 	bl	8005e04 <USB_DisableGlobalInt>
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80021e4:	46a4      	mov	ip, r4
 80021e6:	f85c 6b10 	ldr.w	r6, [ip], #16
 80021ea:	46ee      	mov	lr, sp
 80021ec:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80021f0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80021f4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80021f8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80021fc:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8002200:	e88e 0003 	stmia.w	lr, {r0, r1}
 8002204:	1d25      	adds	r5, r4, #4
 8002206:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 800220a:	4630      	mov	r0, r6
 800220c:	f003 fdd8 	bl	8005dc0 <USB_CoreInit>
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002210:	2101      	movs	r1, #1
 8002212:	6820      	ldr	r0, [r4, #0]
 8002214:	f003 fe89 	bl	8005f2a <USB_SetCurrentMode>
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002218:	46a4      	mov	ip, r4
 800221a:	f85c 6b10 	ldr.w	r6, [ip], #16
 800221e:	46ee      	mov	lr, sp
 8002220:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002224:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8002228:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800222c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8002230:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8002234:	e88e 0003 	stmia.w	lr, {r0, r1}
 8002238:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 800223c:	4630      	mov	r0, r6
 800223e:	f003 fea5 	bl	8005f8c <USB_HostInit>
  hhcd->State = HAL_HCD_STATE_READY;
 8002242:	2301      	movs	r3, #1
 8002244:	f884 32f9 	strb.w	r3, [r4, #761]	; 0x2f9
  return HAL_OK;
 8002248:	2000      	movs	r0, #0
}
 800224a:	b00a      	add	sp, #40	; 0x28
 800224c:	bd70      	pop	{r4, r5, r6, pc}
    hhcd->Lock = HAL_UNLOCKED;
 800224e:	f880 32f8 	strb.w	r3, [r0, #760]	; 0x2f8
    HAL_HCD_MspInit(hhcd);
 8002252:	f006 f8fd 	bl	8008450 <HAL_HCD_MspInit>
 8002256:	e7b9      	b.n	80021cc <HAL_HCD_Init+0x14>
    return HAL_ERROR;
 8002258:	2001      	movs	r0, #1
}
 800225a:	4770      	bx	lr

0800225c <HAL_HCD_HC_SubmitRequest>:
{
 800225c:	b570      	push	{r4, r5, r6, lr}
 800225e:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8002262:	f8bd 6018 	ldrh.w	r6, [sp, #24]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002266:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
 800226a:	fb0c 0c01 	mla	ip, ip, r1, r0
 800226e:	f88c 203b 	strb.w	r2, [ip, #59]	; 0x3b
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002272:	f88c 303f 	strb.w	r3, [ip, #63]	; 0x3f
  if (token == 0U)
 8002276:	b97d      	cbnz	r5, 8002298 <HAL_HCD_HC_SubmitRequest+0x3c>
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002278:	4664      	mov	r4, ip
 800227a:	f04f 0c03 	mov.w	ip, #3
 800227e:	f884 c042 	strb.w	ip, [r4, #66]	; 0x42
    hhcd->hc[ch_num].do_ping = do_ping;
 8002282:	f89d c01c 	ldrb.w	ip, [sp, #28]
 8002286:	f884 c03d 	strb.w	ip, [r4, #61]	; 0x3d
  switch (ep_type)
 800228a:	2b03      	cmp	r3, #3
 800228c:	f200 8081 	bhi.w	8002392 <HAL_HCD_HC_SubmitRequest+0x136>
 8002290:	e8df f003 	tbb	[pc, r3]
 8002294:	5129790a 	.word	0x5129790a
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002298:	242c      	movs	r4, #44	; 0x2c
 800229a:	fb04 0401 	mla	r4, r4, r1, r0
 800229e:	f04f 0c02 	mov.w	ip, #2
 80022a2:	f884 c042 	strb.w	ip, [r4, #66]	; 0x42
 80022a6:	e7f0      	b.n	800228a <HAL_HCD_HC_SubmitRequest+0x2e>
      if ((token == 1U) && (direction == 0U)) /*send data */
 80022a8:	2d01      	cmp	r5, #1
 80022aa:	d172      	bne.n	8002392 <HAL_HCD_HC_SubmitRequest+0x136>
 80022ac:	2a00      	cmp	r2, #0
 80022ae:	d170      	bne.n	8002392 <HAL_HCD_HC_SubmitRequest+0x136>
        if (length == 0U)
 80022b0:	b92e      	cbnz	r6, 80022be <HAL_HCD_HC_SubmitRequest+0x62>
          hhcd->hc[ch_num].toggle_out = 1U;
 80022b2:	232c      	movs	r3, #44	; 0x2c
 80022b4:	fb03 0301 	mla	r3, r3, r1, r0
 80022b8:	2201      	movs	r2, #1
 80022ba:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80022be:	232c      	movs	r3, #44	; 0x2c
 80022c0:	fb03 0301 	mla	r3, r3, r1, r0
 80022c4:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80022c8:	b933      	cbnz	r3, 80022d8 <HAL_HCD_HC_SubmitRequest+0x7c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80022ca:	232c      	movs	r3, #44	; 0x2c
 80022cc:	fb03 0301 	mla	r3, r3, r1, r0
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022d6:	e05c      	b.n	8002392 <HAL_HCD_HC_SubmitRequest+0x136>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80022d8:	232c      	movs	r3, #44	; 0x2c
 80022da:	fb03 0301 	mla	r3, r3, r1, r0
 80022de:	2202      	movs	r2, #2
 80022e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022e4:	e055      	b.n	8002392 <HAL_HCD_HC_SubmitRequest+0x136>
      if (direction == 0U)
 80022e6:	b992      	cbnz	r2, 800230e <HAL_HCD_HC_SubmitRequest+0xb2>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80022e8:	232c      	movs	r3, #44	; 0x2c
 80022ea:	fb03 0301 	mla	r3, r3, r1, r0
 80022ee:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80022f2:	b92b      	cbnz	r3, 8002300 <HAL_HCD_HC_SubmitRequest+0xa4>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80022f4:	232c      	movs	r3, #44	; 0x2c
 80022f6:	fb03 0301 	mla	r3, r3, r1, r0
 80022fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022fe:	e048      	b.n	8002392 <HAL_HCD_HC_SubmitRequest+0x136>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002300:	232c      	movs	r3, #44	; 0x2c
 8002302:	fb03 0301 	mla	r3, r3, r1, r0
 8002306:	2202      	movs	r2, #2
 8002308:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800230c:	e041      	b.n	8002392 <HAL_HCD_HC_SubmitRequest+0x136>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800230e:	232c      	movs	r3, #44	; 0x2c
 8002310:	fb03 0301 	mla	r3, r3, r1, r0
 8002314:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002318:	b933      	cbnz	r3, 8002328 <HAL_HCD_HC_SubmitRequest+0xcc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800231a:	232c      	movs	r3, #44	; 0x2c
 800231c:	fb03 0301 	mla	r3, r3, r1, r0
 8002320:	2200      	movs	r2, #0
 8002322:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002326:	e034      	b.n	8002392 <HAL_HCD_HC_SubmitRequest+0x136>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002328:	232c      	movs	r3, #44	; 0x2c
 800232a:	fb03 0301 	mla	r3, r3, r1, r0
 800232e:	2202      	movs	r2, #2
 8002330:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002334:	e02d      	b.n	8002392 <HAL_HCD_HC_SubmitRequest+0x136>
      if (direction == 0U)
 8002336:	b992      	cbnz	r2, 800235e <HAL_HCD_HC_SubmitRequest+0x102>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002338:	232c      	movs	r3, #44	; 0x2c
 800233a:	fb03 0301 	mla	r3, r3, r1, r0
 800233e:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002342:	b92b      	cbnz	r3, 8002350 <HAL_HCD_HC_SubmitRequest+0xf4>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002344:	232c      	movs	r3, #44	; 0x2c
 8002346:	fb03 0301 	mla	r3, r3, r1, r0
 800234a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800234e:	e020      	b.n	8002392 <HAL_HCD_HC_SubmitRequest+0x136>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002350:	232c      	movs	r3, #44	; 0x2c
 8002352:	fb03 0301 	mla	r3, r3, r1, r0
 8002356:	2202      	movs	r2, #2
 8002358:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800235c:	e019      	b.n	8002392 <HAL_HCD_HC_SubmitRequest+0x136>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800235e:	232c      	movs	r3, #44	; 0x2c
 8002360:	fb03 0301 	mla	r3, r3, r1, r0
 8002364:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002368:	b933      	cbnz	r3, 8002378 <HAL_HCD_HC_SubmitRequest+0x11c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800236a:	232c      	movs	r3, #44	; 0x2c
 800236c:	fb03 0301 	mla	r3, r3, r1, r0
 8002370:	2200      	movs	r2, #0
 8002372:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002376:	e00c      	b.n	8002392 <HAL_HCD_HC_SubmitRequest+0x136>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002378:	232c      	movs	r3, #44	; 0x2c
 800237a:	fb03 0301 	mla	r3, r3, r1, r0
 800237e:	2202      	movs	r2, #2
 8002380:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002384:	e005      	b.n	8002392 <HAL_HCD_HC_SubmitRequest+0x136>
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002386:	232c      	movs	r3, #44	; 0x2c
 8002388:	fb03 0301 	mla	r3, r3, r1, r0
 800238c:	2200      	movs	r2, #0
 800238e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002392:	232c      	movs	r3, #44	; 0x2c
 8002394:	fb01 f303 	mul.w	r3, r1, r3
 8002398:	18c2      	adds	r2, r0, r3
 800239a:	9c05      	ldr	r4, [sp, #20]
 800239c:	6454      	str	r4, [r2, #68]	; 0x44
  hhcd->hc[ch_num].xfer_len  = length;
 800239e:	64d6      	str	r6, [r2, #76]	; 0x4c
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80023a0:	2400      	movs	r4, #0
 80023a2:	f882 4060 	strb.w	r4, [r2, #96]	; 0x60
  hhcd->hc[ch_num].xfer_count = 0U;
 80023a6:	6514      	str	r4, [r2, #80]	; 0x50
  hhcd->hc[ch_num].ch_num = ch_num;
 80023a8:	f882 1039 	strb.w	r1, [r2, #57]	; 0x39
  hhcd->hc[ch_num].state = HC_IDLE;
 80023ac:	f882 4061 	strb.w	r4, [r2, #97]	; 0x61
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num]);
 80023b0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80023b4:	4401      	add	r1, r0
 80023b6:	6800      	ldr	r0, [r0, #0]
 80023b8:	f003 ff32 	bl	8006220 <USB_HC_StartXfer>
}
 80023bc:	bd70      	pop	{r4, r5, r6, pc}

080023be <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80023be:	b530      	push	{r4, r5, lr}
 80023c0:	b083      	sub	sp, #12
 80023c2:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80023c4:	6805      	ldr	r5, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80023c6:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 80023ca:	9301      	str	r3, [sp, #4]
  hprt0_dup = USBx_HPRT0;
 80023cc:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 80023d0:	9300      	str	r3, [sp, #0]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80023d2:	9b00      	ldr	r3, [sp, #0]
 80023d4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80023d8:	9300      	str	r3, [sp, #0]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80023da:	9b01      	ldr	r3, [sp, #4]
 80023dc:	f013 0f02 	tst.w	r3, #2
 80023e0:	d007      	beq.n	80023f2 <HCD_Port_IRQHandler+0x34>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80023e2:	9b01      	ldr	r3, [sp, #4]
 80023e4:	f013 0f01 	tst.w	r3, #1
 80023e8:	d125      	bne.n	8002436 <HCD_Port_IRQHandler+0x78>
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80023ea:	9b00      	ldr	r3, [sp, #0]
 80023ec:	f043 0302 	orr.w	r3, r3, #2
 80023f0:	9300      	str	r3, [sp, #0]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80023f2:	9b01      	ldr	r3, [sp, #4]
 80023f4:	f013 0f08 	tst.w	r3, #8
 80023f8:	d010      	beq.n	800241c <HCD_Port_IRQHandler+0x5e>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80023fa:	9b00      	ldr	r3, [sp, #0]
 80023fc:	f043 0308 	orr.w	r3, r3, #8
 8002400:	9300      	str	r3, [sp, #0]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002402:	9b01      	ldr	r3, [sp, #4]
 8002404:	f013 0f04 	tst.w	r3, #4
 8002408:	d02d      	beq.n	8002466 <HCD_Port_IRQHandler+0xa8>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800240a:	69a3      	ldr	r3, [r4, #24]
 800240c:	2b02      	cmp	r3, #2
 800240e:	d015      	beq.n	800243c <HCD_Port_IRQHandler+0x7e>
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002410:	68e3      	ldr	r3, [r4, #12]
 8002412:	2b01      	cmp	r3, #1
 8002414:	d022      	beq.n	800245c <HCD_Port_IRQHandler+0x9e>
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002416:	4620      	mov	r0, r4
 8002418:	f006 f89f 	bl	800855a <HAL_HCD_PortEnabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800241c:	9b01      	ldr	r3, [sp, #4]
 800241e:	f013 0f20 	tst.w	r3, #32
 8002422:	d003      	beq.n	800242c <HCD_Port_IRQHandler+0x6e>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002424:	9b00      	ldr	r3, [sp, #0]
 8002426:	f043 0320 	orr.w	r3, r3, #32
 800242a:	9300      	str	r3, [sp, #0]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800242c:	9b00      	ldr	r3, [sp, #0]
 800242e:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
}
 8002432:	b003      	add	sp, #12
 8002434:	bd30      	pop	{r4, r5, pc}
      HAL_HCD_Connect_Callback(hhcd);
 8002436:	f006 f883 	bl	8008540 <HAL_HCD_Connect_Callback>
 800243a:	e7d6      	b.n	80023ea <HCD_Port_IRQHandler+0x2c>
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800243c:	9b01      	ldr	r3, [sp, #4]
 800243e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002442:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002446:	d004      	beq.n	8002452 <HCD_Port_IRQHandler+0x94>
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002448:	2101      	movs	r1, #1
 800244a:	6820      	ldr	r0, [r4, #0]
 800244c:	f003 fdee 	bl	800602c <USB_InitFSLSPClkSel>
 8002450:	e7e1      	b.n	8002416 <HCD_Port_IRQHandler+0x58>
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002452:	2102      	movs	r1, #2
 8002454:	6820      	ldr	r0, [r4, #0]
 8002456:	f003 fde9 	bl	800602c <USB_InitFSLSPClkSel>
 800245a:	e7dc      	b.n	8002416 <HCD_Port_IRQHandler+0x58>
          USBx_HOST->HFIR = 60000U;
 800245c:	f64e 2260 	movw	r2, #60000	; 0xea60
 8002460:	f8c5 2404 	str.w	r2, [r5, #1028]	; 0x404
 8002464:	e7d7      	b.n	8002416 <HCD_Port_IRQHandler+0x58>
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002466:	4620      	mov	r0, r4
 8002468:	f006 f87d 	bl	8008566 <HAL_HCD_PortDisabled_Callback>
 800246c:	e7d6      	b.n	800241c <HCD_Port_IRQHandler+0x5e>

0800246e <HCD_HC_IN_IRQHandler>:
{
 800246e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002470:	4604      	mov	r4, r0
 8002472:	460e      	mov	r6, r1
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002474:	6807      	ldr	r7, [r0, #0]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002476:	eb07 1741 	add.w	r7, r7, r1, lsl #5
 800247a:	f507 65a0 	add.w	r5, r7, #1280	; 0x500
 800247e:	68ab      	ldr	r3, [r5, #8]
 8002480:	f013 0f04 	tst.w	r3, #4
 8002484:	d10a      	bne.n	800249c <HCD_HC_IN_IRQHandler+0x2e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002486:	68ab      	ldr	r3, [r5, #8]
 8002488:	f413 7f80 	tst.w	r3, #256	; 0x100
 800248c:	d13e      	bne.n	800250c <HCD_HC_IN_IRQHandler+0x9e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800248e:	68ab      	ldr	r3, [r5, #8]
 8002490:	f013 0f20 	tst.w	r3, #32
 8002494:	d047      	beq.n	8002526 <HCD_HC_IN_IRQHandler+0xb8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002496:	2320      	movs	r3, #32
 8002498:	60ab      	str	r3, [r5, #8]
 800249a:	e00a      	b.n	80024b2 <HCD_HC_IN_IRQHandler+0x44>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800249c:	2304      	movs	r3, #4
 800249e:	60ab      	str	r3, [r5, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80024a0:	232c      	movs	r3, #44	; 0x2c
 80024a2:	fb03 0301 	mla	r3, r3, r1, r0
 80024a6:	2206      	movs	r2, #6
 80024a8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024ac:	6800      	ldr	r0, [r0, #0]
 80024ae:	f003 ff4c 	bl	800634a <USB_HC_Halt>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80024b2:	68ab      	ldr	r3, [r5, #8]
 80024b4:	f413 7f00 	tst.w	r3, #512	; 0x200
 80024b8:	d166      	bne.n	8002588 <HCD_HC_IN_IRQHandler+0x11a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80024ba:	68ab      	ldr	r3, [r5, #8]
 80024bc:	f013 0f01 	tst.w	r3, #1
 80024c0:	f000 8092 	beq.w	80025e8 <HCD_HC_IN_IRQHandler+0x17a>
    hhcd->hc[ch_num].state = HC_XFRC;
 80024c4:	232c      	movs	r3, #44	; 0x2c
 80024c6:	fb03 4306 	mla	r3, r3, r6, r4
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    hhcd->hc[ch_num].ErrCnt = 0U;
 80024d0:	2100      	movs	r1, #0
 80024d2:	65d9      	str	r1, [r3, #92]	; 0x5c
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80024d4:	60aa      	str	r2, [r5, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80024d6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d05c      	beq.n	8002598 <HCD_HC_IN_IRQHandler+0x12a>
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d05a      	beq.n	8002598 <HCD_HC_IN_IRQHandler+0x12a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80024e2:	2b03      	cmp	r3, #3
 80024e4:	d001      	beq.n	80024ea <HCD_HC_IN_IRQHandler+0x7c>
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d15c      	bne.n	80025a4 <HCD_HC_IN_IRQHandler+0x136>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80024ea:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
 80024ee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80024f2:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80024f6:	232c      	movs	r3, #44	; 0x2c
 80024f8:	fb03 4306 	mla	r3, r3, r6, r4
 80024fc:	2201      	movs	r2, #1
 80024fe:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002502:	4631      	mov	r1, r6
 8002504:	4620      	mov	r0, r4
 8002506:	f006 f827 	bl	8008558 <HAL_HCD_HC_NotifyURBChange_Callback>
 800250a:	e04b      	b.n	80025a4 <HCD_HC_IN_IRQHandler+0x136>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800250c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002510:	60ab      	str	r3, [r5, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002512:	232c      	movs	r3, #44	; 0x2c
 8002514:	fb03 0301 	mla	r3, r3, r1, r0
 8002518:	2207      	movs	r2, #7
 800251a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800251e:	6800      	ldr	r0, [r0, #0]
 8002520:	f003 ff13 	bl	800634a <USB_HC_Halt>
 8002524:	e7c5      	b.n	80024b2 <HCD_HC_IN_IRQHandler+0x44>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002526:	68ab      	ldr	r3, [r5, #8]
 8002528:	f013 0f08 	tst.w	r3, #8
 800252c:	d113      	bne.n	8002556 <HCD_HC_IN_IRQHandler+0xe8>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800252e:	68ab      	ldr	r3, [r5, #8]
 8002530:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002534:	d11b      	bne.n	800256e <HCD_HC_IN_IRQHandler+0x100>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002536:	68ab      	ldr	r3, [r5, #8]
 8002538:	f013 0f80 	tst.w	r3, #128	; 0x80
 800253c:	d0b9      	beq.n	80024b2 <HCD_HC_IN_IRQHandler+0x44>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800253e:	2380      	movs	r3, #128	; 0x80
 8002540:	60ab      	str	r3, [r5, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002542:	232c      	movs	r3, #44	; 0x2c
 8002544:	fb03 0301 	mla	r3, r3, r1, r0
 8002548:	2206      	movs	r2, #6
 800254a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800254e:	6800      	ldr	r0, [r0, #0]
 8002550:	f003 fefb 	bl	800634a <USB_HC_Halt>
 8002554:	e7ad      	b.n	80024b2 <HCD_HC_IN_IRQHandler+0x44>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002556:	2308      	movs	r3, #8
 8002558:	60ab      	str	r3, [r5, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800255a:	232c      	movs	r3, #44	; 0x2c
 800255c:	fb03 0301 	mla	r3, r3, r1, r0
 8002560:	2205      	movs	r2, #5
 8002562:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002566:	6800      	ldr	r0, [r0, #0]
 8002568:	f003 feef 	bl	800634a <USB_HC_Halt>
 800256c:	e7a1      	b.n	80024b2 <HCD_HC_IN_IRQHandler+0x44>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800256e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002572:	60ab      	str	r3, [r5, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002574:	232c      	movs	r3, #44	; 0x2c
 8002576:	fb03 0301 	mla	r3, r3, r1, r0
 800257a:	2208      	movs	r2, #8
 800257c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002580:	6800      	ldr	r0, [r0, #0]
 8002582:	f003 fee2 	bl	800634a <USB_HC_Halt>
 8002586:	e794      	b.n	80024b2 <HCD_HC_IN_IRQHandler+0x44>
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002588:	4631      	mov	r1, r6
 800258a:	6820      	ldr	r0, [r4, #0]
 800258c:	f003 fedd 	bl	800634a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002590:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002594:	60ab      	str	r3, [r5, #8]
}
 8002596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002598:	4631      	mov	r1, r6
 800259a:	6820      	ldr	r0, [r4, #0]
 800259c:	f003 fed5 	bl	800634a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80025a0:	2310      	movs	r3, #16
 80025a2:	60ab      	str	r3, [r5, #8]
    if (hhcd->Init.dma_enable == 1U)
 80025a4:	6923      	ldr	r3, [r4, #16]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d009      	beq.n	80025be <HCD_HC_IN_IRQHandler+0x150>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80025aa:	232c      	movs	r3, #44	; 0x2c
 80025ac:	fb03 4306 	mla	r3, r3, r6, r4
 80025b0:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 80025b4:	f082 0201 	eor.w	r2, r2, #1
 80025b8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80025bc:	e7eb      	b.n	8002596 <HCD_HC_IN_IRQHandler+0x128>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80025be:	232c      	movs	r3, #44	; 0x2c
 80025c0:	fb03 4306 	mla	r3, r3, r6, r4
 80025c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80025c6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80025ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ce:	f013 0f01 	tst.w	r3, #1
 80025d2:	d0e0      	beq.n	8002596 <HCD_HC_IN_IRQHandler+0x128>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80025d4:	232c      	movs	r3, #44	; 0x2c
 80025d6:	fb03 4306 	mla	r3, r3, r6, r4
 80025da:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 80025de:	f082 0201 	eor.w	r2, r2, #1
 80025e2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80025e6:	e7d6      	b.n	8002596 <HCD_HC_IN_IRQHandler+0x128>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80025e8:	68ab      	ldr	r3, [r5, #8]
 80025ea:	f013 0f02 	tst.w	r3, #2
 80025ee:	d05e      	beq.n	80026ae <HCD_HC_IN_IRQHandler+0x240>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80025f0:	232c      	movs	r3, #44	; 0x2c
 80025f2:	fb03 4306 	mla	r3, r3, r6, r4
 80025f6:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d007      	beq.n	800260e <HCD_HC_IN_IRQHandler+0x1a0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80025fe:	3b03      	subs	r3, #3
 8002600:	2b05      	cmp	r3, #5
 8002602:	d80a      	bhi.n	800261a <HCD_HC_IN_IRQHandler+0x1ac>
 8002604:	e8df f003 	tbb	[pc, r3]
 8002608:	1c15093a 	.word	0x1c15093a
 800260c:	1c49      	.short	0x1c49
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800260e:	232c      	movs	r3, #44	; 0x2c
 8002610:	fb03 4306 	mla	r3, r3, r6, r4
 8002614:	2201      	movs	r2, #1
 8002616:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800261a:	2302      	movs	r3, #2
 800261c:	60ab      	str	r3, [r5, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800261e:	232c      	movs	r3, #44	; 0x2c
 8002620:	fb03 4306 	mla	r3, r3, r6, r4
 8002624:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 8002628:	4631      	mov	r1, r6
 800262a:	4620      	mov	r0, r4
 800262c:	f005 ff94 	bl	8008558 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002630:	e7b1      	b.n	8002596 <HCD_HC_IN_IRQHandler+0x128>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002632:	232c      	movs	r3, #44	; 0x2c
 8002634:	fb03 4306 	mla	r3, r3, r6, r4
 8002638:	2205      	movs	r2, #5
 800263a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 800263e:	e7ec      	b.n	800261a <HCD_HC_IN_IRQHandler+0x1ac>
      hhcd->hc[ch_num].ErrCnt++;
 8002640:	222c      	movs	r2, #44	; 0x2c
 8002642:	fb02 4206 	mla	r2, r2, r6, r4
 8002646:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8002648:	3301      	adds	r3, #1
 800264a:	65d3      	str	r3, [r2, #92]	; 0x5c
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800264c:	2b02      	cmp	r3, #2
 800264e:	d906      	bls.n	800265e <HCD_HC_IN_IRQHandler+0x1f0>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002650:	4613      	mov	r3, r2
 8002652:	2200      	movs	r2, #0
 8002654:	65da      	str	r2, [r3, #92]	; 0x5c
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002656:	2204      	movs	r2, #4
 8002658:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 800265c:	e7dd      	b.n	800261a <HCD_HC_IN_IRQHandler+0x1ac>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800265e:	232c      	movs	r3, #44	; 0x2c
 8002660:	fb03 4306 	mla	r3, r3, r6, r4
 8002664:	2202      	movs	r2, #2
 8002666:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800266a:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800266e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002672:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002676:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
 800267a:	e7ce      	b.n	800261a <HCD_HC_IN_IRQHandler+0x1ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800267c:	232c      	movs	r3, #44	; 0x2c
 800267e:	fb03 4306 	mla	r3, r3, r6, r4
 8002682:	2202      	movs	r2, #2
 8002684:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002688:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800268c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002690:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002694:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
 8002698:	e7bf      	b.n	800261a <HCD_HC_IN_IRQHandler+0x1ac>
      hhcd->hc[ch_num].ErrCnt++;
 800269a:	232c      	movs	r3, #44	; 0x2c
 800269c:	fb03 4306 	mla	r3, r3, r6, r4
 80026a0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80026a2:	3201      	adds	r2, #1
 80026a4:	65da      	str	r2, [r3, #92]	; 0x5c
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80026a6:	2204      	movs	r2, #4
 80026a8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 80026ac:	e7b5      	b.n	800261a <HCD_HC_IN_IRQHandler+0x1ac>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80026ae:	68ab      	ldr	r3, [r5, #8]
 80026b0:	f013 0f10 	tst.w	r3, #16
 80026b4:	f43f af6f 	beq.w	8002596 <HCD_HC_IN_IRQHandler+0x128>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80026b8:	232c      	movs	r3, #44	; 0x2c
 80026ba:	fb03 4306 	mla	r3, r3, r6, r4
 80026be:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80026c2:	2b03      	cmp	r3, #3
 80026c4:	d011      	beq.n	80026ea <HCD_HC_IN_IRQHandler+0x27c>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80026c6:	b10b      	cbz	r3, 80026cc <HCD_HC_IN_IRQHandler+0x25e>
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d10b      	bne.n	80026e4 <HCD_HC_IN_IRQHandler+0x276>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80026cc:	232c      	movs	r3, #44	; 0x2c
 80026ce:	fb03 4306 	mla	r3, r3, r6, r4
 80026d2:	2200      	movs	r2, #0
 80026d4:	65da      	str	r2, [r3, #92]	; 0x5c
      hhcd->hc[ch_num].state = HC_NAK;
 80026d6:	2203      	movs	r2, #3
 80026d8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026dc:	4631      	mov	r1, r6
 80026de:	6820      	ldr	r0, [r4, #0]
 80026e0:	f003 fe33 	bl	800634a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80026e4:	2310      	movs	r3, #16
 80026e6:	60ab      	str	r3, [r5, #8]
}
 80026e8:	e755      	b.n	8002596 <HCD_HC_IN_IRQHandler+0x128>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80026ea:	232c      	movs	r3, #44	; 0x2c
 80026ec:	fb03 4306 	mla	r3, r3, r6, r4
 80026f0:	2200      	movs	r2, #0
 80026f2:	65da      	str	r2, [r3, #92]	; 0x5c
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026f4:	4631      	mov	r1, r6
 80026f6:	6820      	ldr	r0, [r4, #0]
 80026f8:	f003 fe27 	bl	800634a <USB_HC_Halt>
 80026fc:	e7f2      	b.n	80026e4 <HCD_HC_IN_IRQHandler+0x276>

080026fe <HCD_HC_OUT_IRQHandler>:
{
 80026fe:	b538      	push	{r3, r4, r5, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002700:	6803      	ldr	r3, [r0, #0]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002702:	eb03 1241 	add.w	r2, r3, r1, lsl #5
 8002706:	f502 65a0 	add.w	r5, r2, #1280	; 0x500
 800270a:	68ac      	ldr	r4, [r5, #8]
 800270c:	f014 0f04 	tst.w	r4, #4
 8002710:	d119      	bne.n	8002746 <HCD_HC_OUT_IRQHandler+0x48>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002712:	68ac      	ldr	r4, [r5, #8]
 8002714:	f014 0f20 	tst.w	r4, #32
 8002718:	d021      	beq.n	800275e <HCD_HC_OUT_IRQHandler+0x60>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800271a:	2320      	movs	r3, #32
 800271c:	60ab      	str	r3, [r5, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800271e:	232c      	movs	r3, #44	; 0x2c
 8002720:	fb03 0301 	mla	r3, r3, r1, r0
 8002724:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002728:	2b01      	cmp	r3, #1
 800272a:	d117      	bne.n	800275c <HCD_HC_OUT_IRQHandler+0x5e>
      hhcd->hc[ch_num].do_ping = 0U;
 800272c:	232c      	movs	r3, #44	; 0x2c
 800272e:	fb03 0301 	mla	r3, r3, r1, r0
 8002732:	2200      	movs	r2, #0
 8002734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002738:	2202      	movs	r2, #2
 800273a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800273e:	6800      	ldr	r0, [r0, #0]
 8002740:	f003 fe03 	bl	800634a <USB_HC_Halt>
 8002744:	e00a      	b.n	800275c <HCD_HC_OUT_IRQHandler+0x5e>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002746:	2304      	movs	r3, #4
 8002748:	60ab      	str	r3, [r5, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800274a:	232c      	movs	r3, #44	; 0x2c
 800274c:	fb03 0301 	mla	r3, r3, r1, r0
 8002750:	2206      	movs	r2, #6
 8002752:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002756:	6800      	ldr	r0, [r0, #0]
 8002758:	f003 fdf7 	bl	800634a <USB_HC_Halt>
}
 800275c:	bd38      	pop	{r3, r4, r5, pc}
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800275e:	68ac      	ldr	r4, [r5, #8]
 8002760:	f414 7f00 	tst.w	r4, #512	; 0x200
 8002764:	d11f      	bne.n	80027a6 <HCD_HC_OUT_IRQHandler+0xa8>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002766:	68ac      	ldr	r4, [r5, #8]
 8002768:	f014 0f01 	tst.w	r4, #1
 800276c:	d022      	beq.n	80027b4 <HCD_HC_OUT_IRQHandler+0xb6>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800276e:	232c      	movs	r3, #44	; 0x2c
 8002770:	fb03 0301 	mla	r3, r3, r1, r0
 8002774:	2200      	movs	r2, #0
 8002776:	65da      	str	r2, [r3, #92]	; 0x5c
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002778:	68ab      	ldr	r3, [r5, #8]
 800277a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800277e:	d007      	beq.n	8002790 <HCD_HC_OUT_IRQHandler+0x92>
      hhcd->hc[ch_num].do_ping = 1U;
 8002780:	232c      	movs	r3, #44	; 0x2c
 8002782:	fb03 0301 	mla	r3, r3, r1, r0
 8002786:	2201      	movs	r2, #1
 8002788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800278c:	2340      	movs	r3, #64	; 0x40
 800278e:	60ab      	str	r3, [r5, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002790:	2201      	movs	r2, #1
 8002792:	60aa      	str	r2, [r5, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002794:	232c      	movs	r3, #44	; 0x2c
 8002796:	fb03 0301 	mla	r3, r3, r1, r0
 800279a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800279e:	6800      	ldr	r0, [r0, #0]
 80027a0:	f003 fdd3 	bl	800634a <USB_HC_Halt>
 80027a4:	e7da      	b.n	800275c <HCD_HC_OUT_IRQHandler+0x5e>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80027a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027aa:	60ab      	str	r3, [r5, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027ac:	6800      	ldr	r0, [r0, #0]
 80027ae:	f003 fdcc 	bl	800634a <USB_HC_Halt>
 80027b2:	e7d3      	b.n	800275c <HCD_HC_OUT_IRQHandler+0x5e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80027b4:	68ac      	ldr	r4, [r5, #8]
 80027b6:	f014 0f40 	tst.w	r4, #64	; 0x40
 80027ba:	d122      	bne.n	8002802 <HCD_HC_OUT_IRQHandler+0x104>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80027bc:	68ac      	ldr	r4, [r5, #8]
 80027be:	f014 0f08 	tst.w	r4, #8
 80027c2:	d12f      	bne.n	8002824 <HCD_HC_OUT_IRQHandler+0x126>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80027c4:	68ac      	ldr	r4, [r5, #8]
 80027c6:	f014 0f10 	tst.w	r4, #16
 80027ca:	d137      	bne.n	800283c <HCD_HC_OUT_IRQHandler+0x13e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80027cc:	68ac      	ldr	r4, [r5, #8]
 80027ce:	f014 0f80 	tst.w	r4, #128	; 0x80
 80027d2:	d141      	bne.n	8002858 <HCD_HC_OUT_IRQHandler+0x15a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80027d4:	68ac      	ldr	r4, [r5, #8]
 80027d6:	f414 6f80 	tst.w	r4, #1024	; 0x400
 80027da:	d149      	bne.n	8002870 <HCD_HC_OUT_IRQHandler+0x172>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80027dc:	68ab      	ldr	r3, [r5, #8]
 80027de:	f013 0f02 	tst.w	r3, #2
 80027e2:	d0bb      	beq.n	800275c <HCD_HC_OUT_IRQHandler+0x5e>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80027e4:	232c      	movs	r3, #44	; 0x2c
 80027e6:	fb03 0301 	mla	r3, r3, r1, r0
 80027ea:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d04b      	beq.n	800288a <HCD_HC_OUT_IRQHandler+0x18c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80027f2:	3b03      	subs	r3, #3
 80027f4:	2b05      	cmp	r3, #5
 80027f6:	d854      	bhi.n	80028a2 <HCD_HC_OUT_IRQHandler+0x1a4>
 80027f8:	e8df f003 	tbb	[pc, r3]
 80027fc:	9b948d86 	.word	0x9b948d86
 8002800:	9b53      	.short	0x9b53
    hhcd->hc[ch_num].state = HC_NYET;
 8002802:	222c      	movs	r2, #44	; 0x2c
 8002804:	fb02 0201 	mla	r2, r2, r1, r0
 8002808:	2004      	movs	r0, #4
 800280a:	f882 0061 	strb.w	r0, [r2, #97]	; 0x61
    hhcd->hc[ch_num].do_ping = 1U;
 800280e:	2001      	movs	r0, #1
 8002810:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002814:	2000      	movs	r0, #0
 8002816:	65d0      	str	r0, [r2, #92]	; 0x5c
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002818:	4618      	mov	r0, r3
 800281a:	f003 fd96 	bl	800634a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800281e:	2340      	movs	r3, #64	; 0x40
 8002820:	60ab      	str	r3, [r5, #8]
 8002822:	e79b      	b.n	800275c <HCD_HC_OUT_IRQHandler+0x5e>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002824:	2308      	movs	r3, #8
 8002826:	60ab      	str	r3, [r5, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002828:	232c      	movs	r3, #44	; 0x2c
 800282a:	fb03 0301 	mla	r3, r3, r1, r0
 800282e:	2205      	movs	r2, #5
 8002830:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002834:	6800      	ldr	r0, [r0, #0]
 8002836:	f003 fd88 	bl	800634a <USB_HC_Halt>
 800283a:	e78f      	b.n	800275c <HCD_HC_OUT_IRQHandler+0x5e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800283c:	222c      	movs	r2, #44	; 0x2c
 800283e:	fb02 0201 	mla	r2, r2, r1, r0
 8002842:	2000      	movs	r0, #0
 8002844:	65d0      	str	r0, [r2, #92]	; 0x5c
    hhcd->hc[ch_num].state = HC_NAK;
 8002846:	2003      	movs	r0, #3
 8002848:	f882 0061 	strb.w	r0, [r2, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800284c:	4618      	mov	r0, r3
 800284e:	f003 fd7c 	bl	800634a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002852:	2310      	movs	r3, #16
 8002854:	60ab      	str	r3, [r5, #8]
 8002856:	e781      	b.n	800275c <HCD_HC_OUT_IRQHandler+0x5e>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002858:	222c      	movs	r2, #44	; 0x2c
 800285a:	fb02 0201 	mla	r2, r2, r1, r0
 800285e:	2006      	movs	r0, #6
 8002860:	f882 0061 	strb.w	r0, [r2, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002864:	4618      	mov	r0, r3
 8002866:	f003 fd70 	bl	800634a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800286a:	2380      	movs	r3, #128	; 0x80
 800286c:	60ab      	str	r3, [r5, #8]
 800286e:	e775      	b.n	800275c <HCD_HC_OUT_IRQHandler+0x5e>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002870:	222c      	movs	r2, #44	; 0x2c
 8002872:	fb02 0201 	mla	r2, r2, r1, r0
 8002876:	2008      	movs	r0, #8
 8002878:	f882 0061 	strb.w	r0, [r2, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800287c:	4618      	mov	r0, r3
 800287e:	f003 fd64 	bl	800634a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002882:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002886:	60ab      	str	r3, [r5, #8]
 8002888:	e768      	b.n	800275c <HCD_HC_OUT_IRQHandler+0x5e>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800288a:	232c      	movs	r3, #44	; 0x2c
 800288c:	fb03 0301 	mla	r3, r3, r1, r0
 8002890:	2201      	movs	r2, #1
 8002892:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002896:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800289a:	3b02      	subs	r3, #2
 800289c:	b2db      	uxtb	r3, r3
 800289e:	4293      	cmp	r3, r2
 80028a0:	d909      	bls.n	80028b6 <HCD_HC_OUT_IRQHandler+0x1b8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80028a2:	2302      	movs	r3, #2
 80028a4:	60ab      	str	r3, [r5, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80028a6:	232c      	movs	r3, #44	; 0x2c
 80028a8:	fb03 0301 	mla	r3, r3, r1, r0
 80028ac:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 80028b0:	f005 fe52 	bl	8008558 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80028b4:	e752      	b.n	800275c <HCD_HC_OUT_IRQHandler+0x5e>
        if (hhcd->Init.dma_enable == 0U)
 80028b6:	6904      	ldr	r4, [r0, #16]
 80028b8:	b944      	cbnz	r4, 80028cc <HCD_HC_OUT_IRQHandler+0x1ce>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80028ba:	232c      	movs	r3, #44	; 0x2c
 80028bc:	fb03 0301 	mla	r3, r3, r1, r0
 80028c0:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 80028c4:	f082 0201 	eor.w	r2, r2, #1
 80028c8:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80028cc:	2c01      	cmp	r4, #1
 80028ce:	d1e8      	bne.n	80028a2 <HCD_HC_OUT_IRQHandler+0x1a4>
 80028d0:	232c      	movs	r3, #44	; 0x2c
 80028d2:	fb03 0301 	mla	r3, r3, r1, r0
 80028d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d0e2      	beq.n	80028a2 <HCD_HC_OUT_IRQHandler+0x1a4>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80028dc:	222c      	movs	r2, #44	; 0x2c
 80028de:	fb02 0201 	mla	r2, r2, r1, r0
 80028e2:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 80028e6:	4413      	add	r3, r2
 80028e8:	3b01      	subs	r3, #1
 80028ea:	fbb3 f3f2 	udiv	r3, r3, r2
          if ((num_packets & 1U) != 0U)
 80028ee:	f013 0f01 	tst.w	r3, #1
 80028f2:	d0d6      	beq.n	80028a2 <HCD_HC_OUT_IRQHandler+0x1a4>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80028f4:	232c      	movs	r3, #44	; 0x2c
 80028f6:	fb03 0301 	mla	r3, r3, r1, r0
 80028fa:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 80028fe:	f082 0201 	eor.w	r2, r2, #1
 8002902:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 8002906:	e7cc      	b.n	80028a2 <HCD_HC_OUT_IRQHandler+0x1a4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002908:	232c      	movs	r3, #44	; 0x2c
 800290a:	fb03 0301 	mla	r3, r3, r1, r0
 800290e:	2202      	movs	r2, #2
 8002910:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8002914:	e7c5      	b.n	80028a2 <HCD_HC_OUT_IRQHandler+0x1a4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002916:	232c      	movs	r3, #44	; 0x2c
 8002918:	fb03 0301 	mla	r3, r3, r1, r0
 800291c:	2202      	movs	r2, #2
 800291e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8002922:	e7be      	b.n	80028a2 <HCD_HC_OUT_IRQHandler+0x1a4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002924:	232c      	movs	r3, #44	; 0x2c
 8002926:	fb03 0301 	mla	r3, r3, r1, r0
 800292a:	2205      	movs	r2, #5
 800292c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8002930:	e7b7      	b.n	80028a2 <HCD_HC_OUT_IRQHandler+0x1a4>
      hhcd->hc[ch_num].ErrCnt++;
 8002932:	242c      	movs	r4, #44	; 0x2c
 8002934:	fb04 0401 	mla	r4, r4, r1, r0
 8002938:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800293a:	3301      	adds	r3, #1
 800293c:	65e3      	str	r3, [r4, #92]	; 0x5c
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800293e:	2b02      	cmp	r3, #2
 8002940:	d905      	bls.n	800294e <HCD_HC_OUT_IRQHandler+0x250>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002942:	2200      	movs	r2, #0
 8002944:	65e2      	str	r2, [r4, #92]	; 0x5c
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002946:	2204      	movs	r2, #4
 8002948:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
 800294c:	e7a9      	b.n	80028a2 <HCD_HC_OUT_IRQHandler+0x1a4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800294e:	232c      	movs	r3, #44	; 0x2c
 8002950:	fb03 0301 	mla	r3, r3, r1, r0
 8002954:	2402      	movs	r4, #2
 8002956:	f883 4060 	strb.w	r4, [r3, #96]	; 0x60
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800295a:	f8d2 3500 	ldr.w	r3, [r2, #1280]	; 0x500
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800295e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002962:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002966:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
 800296a:	e79a      	b.n	80028a2 <HCD_HC_OUT_IRQHandler+0x1a4>

0800296c <HAL_HCD_IRQHandler>:
{
 800296c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800296e:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002970:	6805      	ldr	r5, [r0, #0]
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002972:	4628      	mov	r0, r5
 8002974:	f003 fad5 	bl	8005f22 <USB_GetMode>
 8002978:	2801      	cmp	r0, #1
 800297a:	d000      	beq.n	800297e <HAL_HCD_IRQHandler+0x12>
}
 800297c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800297e:	6820      	ldr	r0, [r4, #0]
 8002980:	f003 facb 	bl	8005f1a <USB_ReadInterrupts>
 8002984:	2800      	cmp	r0, #0
 8002986:	d0f9      	beq.n	800297c <HAL_HCD_IRQHandler+0x10>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002988:	6820      	ldr	r0, [r4, #0]
 800298a:	f003 fac6 	bl	8005f1a <USB_ReadInterrupts>
 800298e:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 8002992:	d003      	beq.n	800299c <HAL_HCD_IRQHandler+0x30>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002994:	6823      	ldr	r3, [r4, #0]
 8002996:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800299a:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800299c:	6820      	ldr	r0, [r4, #0]
 800299e:	f003 fabc 	bl	8005f1a <USB_ReadInterrupts>
 80029a2:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 80029a6:	d003      	beq.n	80029b0 <HAL_HCD_IRQHandler+0x44>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80029a8:	6823      	ldr	r3, [r4, #0]
 80029aa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80029ae:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80029b0:	6820      	ldr	r0, [r4, #0]
 80029b2:	f003 fab2 	bl	8005f1a <USB_ReadInterrupts>
 80029b6:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 80029ba:	d003      	beq.n	80029c4 <HAL_HCD_IRQHandler+0x58>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80029bc:	6823      	ldr	r3, [r4, #0]
 80029be:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80029c2:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80029c4:	6820      	ldr	r0, [r4, #0]
 80029c6:	f003 faa8 	bl	8005f1a <USB_ReadInterrupts>
 80029ca:	f010 0f02 	tst.w	r0, #2
 80029ce:	d002      	beq.n	80029d6 <HAL_HCD_IRQHandler+0x6a>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80029d0:	6823      	ldr	r3, [r4, #0]
 80029d2:	2202      	movs	r2, #2
 80029d4:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80029d6:	6820      	ldr	r0, [r4, #0]
 80029d8:	f003 fa9f 	bl	8005f1a <USB_ReadInterrupts>
 80029dc:	f010 5f00 	tst.w	r0, #536870912	; 0x20000000
 80029e0:	d008      	beq.n	80029f4 <HAL_HCD_IRQHandler+0x88>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80029e2:	6823      	ldr	r3, [r4, #0]
 80029e4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80029e8:	615a      	str	r2, [r3, #20]
      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80029ea:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 80029ee:	f013 0f01 	tst.w	r3, #1
 80029f2:	d01d      	beq.n	8002a30 <HAL_HCD_IRQHandler+0xc4>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80029f4:	6820      	ldr	r0, [r4, #0]
 80029f6:	f003 fa90 	bl	8005f1a <USB_ReadInterrupts>
 80029fa:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 80029fe:	d126      	bne.n	8002a4e <HAL_HCD_IRQHandler+0xe2>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002a00:	6820      	ldr	r0, [r4, #0]
 8002a02:	f003 fa8a 	bl	8005f1a <USB_ReadInterrupts>
 8002a06:	f010 0f08 	tst.w	r0, #8
 8002a0a:	d124      	bne.n	8002a56 <HAL_HCD_IRQHandler+0xea>
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002a0c:	6820      	ldr	r0, [r4, #0]
 8002a0e:	f003 fa84 	bl	8005f1a <USB_ReadInterrupts>
 8002a12:	f010 0f10 	tst.w	r0, #16
 8002a16:	d125      	bne.n	8002a64 <HAL_HCD_IRQHandler+0xf8>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002a18:	6820      	ldr	r0, [r4, #0]
 8002a1a:	f003 fa7e 	bl	8005f1a <USB_ReadInterrupts>
 8002a1e:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8002a22:	d0ab      	beq.n	800297c <HAL_HCD_IRQHandler+0x10>
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002a24:	6820      	ldr	r0, [r4, #0]
 8002a26:	f003 fc8b 	bl	8006340 <USB_HC_ReadInterrupt>
 8002a2a:	4607      	mov	r7, r0
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002a2c:	2600      	movs	r6, #0
 8002a2e:	e02c      	b.n	8002a8a <HAL_HCD_IRQHandler+0x11e>
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002a30:	2110      	movs	r1, #16
 8002a32:	4628      	mov	r0, r5
 8002a34:	f003 f9ec 	bl	8005e10 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002a38:	4628      	mov	r0, r5
 8002a3a:	f003 fa11 	bl	8005e60 <USB_FlushRxFifo>
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002a3e:	2101      	movs	r1, #1
 8002a40:	6820      	ldr	r0, [r4, #0]
 8002a42:	f003 faf3 	bl	800602c <USB_InitFSLSPClkSel>
        HAL_HCD_Disconnect_Callback(hhcd);
 8002a46:	4620      	mov	r0, r4
 8002a48:	f005 fd80 	bl	800854c <HAL_HCD_Disconnect_Callback>
 8002a4c:	e7d2      	b.n	80029f4 <HAL_HCD_IRQHandler+0x88>
      HCD_Port_IRQHandler(hhcd);
 8002a4e:	4620      	mov	r0, r4
 8002a50:	f7ff fcb5 	bl	80023be <HCD_Port_IRQHandler>
 8002a54:	e7d4      	b.n	8002a00 <HAL_HCD_IRQHandler+0x94>
      HAL_HCD_SOF_Callback(hhcd);
 8002a56:	4620      	mov	r0, r4
 8002a58:	f005 fd6c 	bl	8008534 <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002a5c:	6823      	ldr	r3, [r4, #0]
 8002a5e:	2208      	movs	r2, #8
 8002a60:	615a      	str	r2, [r3, #20]
 8002a62:	e7d3      	b.n	8002a0c <HAL_HCD_IRQHandler+0xa0>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a64:	6822      	ldr	r2, [r4, #0]
 8002a66:	6993      	ldr	r3, [r2, #24]
 8002a68:	f023 0310 	bic.w	r3, r3, #16
 8002a6c:	6193      	str	r3, [r2, #24]
      HCD_RXQLVL_IRQHandler(hhcd);
 8002a6e:	4620      	mov	r0, r4
 8002a70:	f7ff fafa 	bl	8002068 <HCD_RXQLVL_IRQHandler>
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a74:	6822      	ldr	r2, [r4, #0]
 8002a76:	6993      	ldr	r3, [r2, #24]
 8002a78:	f043 0310 	orr.w	r3, r3, #16
 8002a7c:	6193      	str	r3, [r2, #24]
 8002a7e:	e7cb      	b.n	8002a18 <HAL_HCD_IRQHandler+0xac>
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002a80:	b2f1      	uxtb	r1, r6
 8002a82:	4620      	mov	r0, r4
 8002a84:	f7ff fe3b 	bl	80026fe <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002a88:	3601      	adds	r6, #1
 8002a8a:	68a3      	ldr	r3, [r4, #8]
 8002a8c:	42b3      	cmp	r3, r6
 8002a8e:	d912      	bls.n	8002ab6 <HAL_HCD_IRQHandler+0x14a>
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002a90:	f006 030f 	and.w	r3, r6, #15
 8002a94:	fa27 f303 	lsr.w	r3, r7, r3
 8002a98:	f013 0f01 	tst.w	r3, #1
 8002a9c:	d0f4      	beq.n	8002a88 <HAL_HCD_IRQHandler+0x11c>
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002a9e:	eb05 1346 	add.w	r3, r5, r6, lsl #5
 8002aa2:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8002aa6:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002aaa:	d0e9      	beq.n	8002a80 <HAL_HCD_IRQHandler+0x114>
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002aac:	b2f1      	uxtb	r1, r6
 8002aae:	4620      	mov	r0, r4
 8002ab0:	f7ff fcdd 	bl	800246e <HCD_HC_IN_IRQHandler>
 8002ab4:	e7e8      	b.n	8002a88 <HAL_HCD_IRQHandler+0x11c>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002ab6:	6823      	ldr	r3, [r4, #0]
 8002ab8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002abc:	615a      	str	r2, [r3, #20]
 8002abe:	e75d      	b.n	800297c <HAL_HCD_IRQHandler+0x10>

08002ac0 <HAL_HCD_Start>:
  __HAL_LOCK(hhcd);
 8002ac0:	f890 32f8 	ldrb.w	r3, [r0, #760]	; 0x2f8
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d00e      	beq.n	8002ae6 <HAL_HCD_Start+0x26>
{
 8002ac8:	b510      	push	{r4, lr}
 8002aca:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8002acc:	2101      	movs	r1, #1
 8002ace:	f880 12f8 	strb.w	r1, [r0, #760]	; 0x2f8
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002ad2:	6800      	ldr	r0, [r0, #0]
 8002ad4:	f003 fae8 	bl	80060a8 <USB_DriveVbus>
  __HAL_HCD_ENABLE(hhcd);
 8002ad8:	6820      	ldr	r0, [r4, #0]
 8002ada:	f003 f98d 	bl	8005df8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002ade:	2000      	movs	r0, #0
 8002ae0:	f884 02f8 	strb.w	r0, [r4, #760]	; 0x2f8
}
 8002ae4:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8002ae6:	2002      	movs	r0, #2
}
 8002ae8:	4770      	bx	lr

08002aea <HAL_HCD_Stop>:
  __HAL_LOCK(hhcd);
 8002aea:	f890 32f8 	ldrb.w	r3, [r0, #760]	; 0x2f8
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d00b      	beq.n	8002b0a <HAL_HCD_Stop+0x20>
{
 8002af2:	b510      	push	{r4, lr}
 8002af4:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8002af6:	2301      	movs	r3, #1
 8002af8:	f880 32f8 	strb.w	r3, [r0, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002afc:	6800      	ldr	r0, [r0, #0]
 8002afe:	f003 fc97 	bl	8006430 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002b02:	2000      	movs	r0, #0
 8002b04:	f884 02f8 	strb.w	r0, [r4, #760]	; 0x2f8
}
 8002b08:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8002b0a:	2002      	movs	r0, #2
}
 8002b0c:	4770      	bx	lr

08002b0e <HAL_HCD_ResetPort>:
{
 8002b0e:	b508      	push	{r3, lr}
  return (USB_ResetPort(hhcd->Instance));
 8002b10:	6800      	ldr	r0, [r0, #0]
 8002b12:	f003 faaa 	bl	800606a <USB_ResetPort>
}
 8002b16:	bd08      	pop	{r3, pc}

08002b18 <HAL_HCD_HC_GetURBState>:
  return hhcd->hc[chnum].urb_state;
 8002b18:	232c      	movs	r3, #44	; 0x2c
 8002b1a:	fb03 0001 	mla	r0, r3, r1, r0
}
 8002b1e:	f890 0060 	ldrb.w	r0, [r0, #96]	; 0x60
 8002b22:	4770      	bx	lr

08002b24 <HAL_HCD_HC_GetXferCount>:
  return hhcd->hc[chnum].xfer_count;
 8002b24:	232c      	movs	r3, #44	; 0x2c
 8002b26:	fb03 0001 	mla	r0, r3, r1, r0
}
 8002b2a:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8002b2c:	4770      	bx	lr

08002b2e <HAL_HCD_GetCurrentFrame>:
{
 8002b2e:	b508      	push	{r3, lr}
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002b30:	6800      	ldr	r0, [r0, #0]
 8002b32:	f003 fae7 	bl	8006104 <USB_GetCurrentFrame>
}
 8002b36:	bd08      	pop	{r3, pc}

08002b38 <HAL_HCD_GetCurrentSpeed>:
{
 8002b38:	b508      	push	{r3, lr}
  return (USB_GetHostSpeed(hhcd->Instance));
 8002b3a:	6800      	ldr	r0, [r0, #0]
 8002b3c:	f003 fad7 	bl	80060ee <USB_GetHostSpeed>
}
 8002b40:	bd08      	pop	{r3, pc}

08002b42 <HAL_I2C_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b42:	2800      	cmp	r0, #0
 8002b44:	d059      	beq.n	8002bfa <HAL_I2C_Init+0xb8>
{
 8002b46:	b510      	push	{r4, lr}
 8002b48:	4604      	mov	r4, r0
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b4a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d043      	beq.n	8002bda <HAL_I2C_Init+0x98>
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b52:	2324      	movs	r3, #36	; 0x24
 8002b54:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b58:	6822      	ldr	r2, [r4, #0]
 8002b5a:	6813      	ldr	r3, [r2, #0]
 8002b5c:	f023 0301 	bic.w	r3, r3, #1
 8002b60:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002b62:	6863      	ldr	r3, [r4, #4]
 8002b64:	6822      	ldr	r2, [r4, #0]
 8002b66:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8002b6a:	6113      	str	r3, [r2, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002b6c:	6822      	ldr	r2, [r4, #0]
 8002b6e:	6893      	ldr	r3, [r2, #8]
 8002b70:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002b74:	6093      	str	r3, [r2, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b76:	68e3      	ldr	r3, [r4, #12]
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d033      	beq.n	8002be4 <HAL_I2C_Init+0xa2>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002b7c:	68a3      	ldr	r3, [r4, #8]
 8002b7e:	6822      	ldr	r2, [r4, #0]
 8002b80:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8002b84:	6093      	str	r3, [r2, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002b86:	68e3      	ldr	r3, [r4, #12]
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d031      	beq.n	8002bf0 <HAL_I2C_Init+0xae>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002b8c:	6822      	ldr	r2, [r4, #0]
 8002b8e:	6853      	ldr	r3, [r2, #4]
 8002b90:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b98:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002b9a:	6822      	ldr	r2, [r4, #0]
 8002b9c:	68d3      	ldr	r3, [r2, #12]
 8002b9e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002ba2:	60d3      	str	r3, [r2, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ba4:	6923      	ldr	r3, [r4, #16]
 8002ba6:	6962      	ldr	r2, [r4, #20]
 8002ba8:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002baa:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002bac:	6822      	ldr	r2, [r4, #0]
 8002bae:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002bb2:	60d3      	str	r3, [r2, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002bb4:	69e3      	ldr	r3, [r4, #28]
 8002bb6:	6a21      	ldr	r1, [r4, #32]
 8002bb8:	6822      	ldr	r2, [r4, #0]
 8002bba:	430b      	orrs	r3, r1
 8002bbc:	6013      	str	r3, [r2, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bbe:	6822      	ldr	r2, [r4, #0]
 8002bc0:	6813      	ldr	r3, [r2, #0]
 8002bc2:	f043 0301 	orr.w	r3, r3, #1
 8002bc6:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bc8:	2000      	movs	r0, #0
 8002bca:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002bcc:	2320      	movs	r3, #32
 8002bce:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bd2:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bd4:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42

  return HAL_OK;
}
 8002bd8:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8002bda:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8002bde:	f7fd fec5 	bl	800096c <HAL_I2C_MspInit>
 8002be2:	e7b6      	b.n	8002b52 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002be4:	68a3      	ldr	r3, [r4, #8]
 8002be6:	6822      	ldr	r2, [r4, #0]
 8002be8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bec:	6093      	str	r3, [r2, #8]
 8002bee:	e7ca      	b.n	8002b86 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002bf0:	6823      	ldr	r3, [r4, #0]
 8002bf2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002bf6:	605a      	str	r2, [r3, #4]
 8002bf8:	e7c8      	b.n	8002b8c <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8002bfa:	2001      	movs	r0, #1
}
 8002bfc:	4770      	bx	lr

08002bfe <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002bfe:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c00:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8002c04:	b2d2      	uxtb	r2, r2
 8002c06:	2a20      	cmp	r2, #32
 8002c08:	d123      	bne.n	8002c52 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c0a:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8002c0e:	2a01      	cmp	r2, #1
 8002c10:	d021      	beq.n	8002c56 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8002c12:	2201      	movs	r2, #1
 8002c14:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c18:	2224      	movs	r2, #36	; 0x24
 8002c1a:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c1e:	6800      	ldr	r0, [r0, #0]
 8002c20:	6802      	ldr	r2, [r0, #0]
 8002c22:	f022 0201 	bic.w	r2, r2, #1
 8002c26:	6002      	str	r2, [r0, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002c28:	6818      	ldr	r0, [r3, #0]
 8002c2a:	6802      	ldr	r2, [r0, #0]
 8002c2c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002c30:	6002      	str	r2, [r0, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002c32:	6818      	ldr	r0, [r3, #0]
 8002c34:	6802      	ldr	r2, [r0, #0]
 8002c36:	4311      	orrs	r1, r2
 8002c38:	6001      	str	r1, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c3a:	6819      	ldr	r1, [r3, #0]
 8002c3c:	680a      	ldr	r2, [r1, #0]
 8002c3e:	f042 0201 	orr.w	r2, r2, #1
 8002c42:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c44:	2220      	movs	r2, #32
 8002c46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c4a:	2000      	movs	r0, #0
 8002c4c:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40

    return HAL_OK;
 8002c50:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8002c52:	2002      	movs	r0, #2
 8002c54:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8002c56:	2002      	movs	r0, #2
  }
}
 8002c58:	4770      	bx	lr

08002c5a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002c5a:	4603      	mov	r3, r0

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c5c:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8002c60:	b2d2      	uxtb	r2, r2
 8002c62:	2a20      	cmp	r2, #32
 8002c64:	d121      	bne.n	8002caa <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c66:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8002c6a:	2a01      	cmp	r2, #1
 8002c6c:	d01f      	beq.n	8002cae <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c74:	2224      	movs	r2, #36	; 0x24
 8002c76:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c7a:	6800      	ldr	r0, [r0, #0]
 8002c7c:	6802      	ldr	r2, [r0, #0]
 8002c7e:	f022 0201 	bic.w	r2, r2, #1
 8002c82:	6002      	str	r2, [r0, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002c84:	6818      	ldr	r0, [r3, #0]
 8002c86:	6802      	ldr	r2, [r0, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002c88:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002c8c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002c90:	6002      	str	r2, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c92:	6819      	ldr	r1, [r3, #0]
 8002c94:	680a      	ldr	r2, [r1, #0]
 8002c96:	f042 0201 	orr.w	r2, r2, #1
 8002c9a:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c9c:	2220      	movs	r2, #32
 8002c9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ca2:	2000      	movs	r0, #0
 8002ca4:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40

    return HAL_OK;
 8002ca8:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8002caa:	2002      	movs	r0, #2
 8002cac:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8002cae:	2002      	movs	r0, #2
  }
}
 8002cb0:	4770      	bx	lr
	...

08002cb4 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 8002cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 8002cb6:	6802      	ldr	r2, [r0, #0]
 8002cb8:	6813      	ldr	r3, [r2, #0]
 8002cba:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002cbe:	6013      	str	r3, [r2, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 8002cc0:	6883      	ldr	r3, [r0, #8]
 8002cc2:	b933      	cbnz	r3, 8002cd2 <OSPI_ConfigCmd+0x1e>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 8002cc4:	6802      	ldr	r2, [r0, #0]
 8002cc6:	6813      	ldr	r3, [r2, #0]
 8002cc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ccc:	684c      	ldr	r4, [r1, #4]
 8002cce:	4323      	orrs	r3, r4
 8002cd0:	6013      	str	r3, [r2, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8002cd2:	680b      	ldr	r3, [r1, #0]
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d04b      	beq.n	8002d70 <OSPI_ConfigCmd+0xbc>
    ir_reg  = &(hospi->Instance->WIR);
    abr_reg = &(hospi->Instance->WABR);
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 8002cd8:	6803      	ldr	r3, [r0, #0]
 8002cda:	f503 7280 	add.w	r2, r3, #256	; 0x100
    tcr_reg = &(hospi->Instance->TCR);
 8002cde:	f503 7e84 	add.w	lr, r3, #264	; 0x108
    ir_reg  = &(hospi->Instance->IR);
 8002ce2:	f503 7c88 	add.w	ip, r3, #272	; 0x110
    abr_reg = &(hospi->Instance->ABR);
 8002ce6:	f503 7390 	add.w	r3, r3, #288	; 0x120
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 8002cea:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 8002cec:	6c8d      	ldr	r5, [r1, #72]	; 0x48
 8002cee:	432c      	orrs	r4, r5
 8002cf0:	6014      	str	r4, [r2, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 8002cf2:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8002cf4:	b15c      	cbz	r4, 8002d0e <OSPI_ConfigCmd+0x5a>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 8002cf6:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8002cf8:	601c      	str	r4, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 8002cfa:	6813      	ldr	r3, [r2, #0]
 8002cfc:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8002d00:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8002d02:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 8002d04:	432c      	orrs	r4, r5
 8002d06:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 8002d08:	432c      	orrs	r4, r5
 8002d0a:	4323      	orrs	r3, r4
 8002d0c:	6013      	str	r3, [r2, #0]
                           (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 8002d0e:	f8de 3000 	ldr.w	r3, [lr]
 8002d12:	f023 031f 	bic.w	r3, r3, #31
 8002d16:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 8002d18:	4323      	orrs	r3, r4
 8002d1a:	f8ce 3000 	str.w	r3, [lr]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8002d1e:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8002d20:	b12b      	cbz	r3, 8002d2e <OSPI_ConfigCmd+0x7a>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8002d22:	680b      	ldr	r3, [r1, #0]
 8002d24:	b91b      	cbnz	r3, 8002d2e <OSPI_ConfigCmd+0x7a>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 8002d26:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8002d28:	6804      	ldr	r4, [r0, #0]
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	6423      	str	r3, [r4, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 8002d2e:	68cb      	ldr	r3, [r1, #12]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d06d      	beq.n	8002e10 <OSPI_ConfigCmd+0x15c>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8002d34:	69cc      	ldr	r4, [r1, #28]
 8002d36:	2c00      	cmp	r4, #0
 8002d38:	d040      	beq.n	8002dbc <OSPI_ConfigCmd+0x108>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8002d3a:	6b8d      	ldr	r5, [r1, #56]	; 0x38
 8002d3c:	b315      	cbz	r5, 8002d84 <OSPI_ConfigCmd+0xd0>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8002d3e:	6817      	ldr	r7, [r2, #0]
 8002d40:	4e46      	ldr	r6, [pc, #280]	; (8002e5c <OSPI_ConfigCmd+0x1a8>)
 8002d42:	403e      	ands	r6, r7
 8002d44:	694f      	ldr	r7, [r1, #20]
 8002d46:	433b      	orrs	r3, r7
 8002d48:	690f      	ldr	r7, [r1, #16]
 8002d4a:	433b      	orrs	r3, r7
 8002d4c:	4323      	orrs	r3, r4
 8002d4e:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8002d50:	4323      	orrs	r3, r4
 8002d52:	6a0c      	ldr	r4, [r1, #32]
 8002d54:	4323      	orrs	r3, r4
 8002d56:	431d      	orrs	r5, r3
 8002d58:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002d5a:	431d      	orrs	r5, r3
 8002d5c:	432e      	orrs	r6, r5
 8002d5e:	6016      	str	r6, [r2, #0]
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8002d60:	688b      	ldr	r3, [r1, #8]
 8002d62:	f8cc 3000 	str.w	r3, [ip]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 8002d66:	6803      	ldr	r3, [r0, #0]
 8002d68:	698a      	ldr	r2, [r1, #24]
 8002d6a:	649a      	str	r2, [r3, #72]	; 0x48
  HAL_StatusTypeDef status = HAL_OK;
 8002d6c:	2000      	movs	r0, #0
    }
  }

  /* Return function status */
  return status;
}
 8002d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ccr_reg = &(hospi->Instance->WCCR);
 8002d70:	6803      	ldr	r3, [r0, #0]
 8002d72:	f503 72c0 	add.w	r2, r3, #384	; 0x180
    tcr_reg = &(hospi->Instance->WTCR);
 8002d76:	f503 7ec4 	add.w	lr, r3, #392	; 0x188
    ir_reg  = &(hospi->Instance->WIR);
 8002d7a:	f503 7cc8 	add.w	ip, r3, #400	; 0x190
    abr_reg = &(hospi->Instance->WABR);
 8002d7e:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8002d82:	e7b2      	b.n	8002cea <OSPI_ConfigCmd+0x36>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8002d84:	6815      	ldr	r5, [r2, #0]
 8002d86:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
 8002d8a:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8002d8e:	694e      	ldr	r6, [r1, #20]
 8002d90:	431e      	orrs	r6, r3
 8002d92:	690b      	ldr	r3, [r1, #16]
 8002d94:	431e      	orrs	r6, r3
 8002d96:	4334      	orrs	r4, r6
 8002d98:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8002d9a:	431c      	orrs	r4, r3
 8002d9c:	6a0b      	ldr	r3, [r1, #32]
 8002d9e:	431c      	orrs	r4, r3
 8002da0:	4325      	orrs	r5, r4
 8002da2:	6015      	str	r5, [r2, #0]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8002da4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002da6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002daa:	d1d9      	bne.n	8002d60 <OSPI_ConfigCmd+0xac>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8002dac:	694b      	ldr	r3, [r1, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8002dae:	2b08      	cmp	r3, #8
 8002db0:	d1d6      	bne.n	8002d60 <OSPI_ConfigCmd+0xac>
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8002db2:	6813      	ldr	r3, [r2, #0]
 8002db4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002db8:	6013      	str	r3, [r2, #0]
 8002dba:	e7d1      	b.n	8002d60 <OSPI_ConfigCmd+0xac>
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8002dbc:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 8002dbe:	b194      	cbz	r4, 8002de6 <OSPI_ConfigCmd+0x132>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 8002dc0:	6810      	ldr	r0, [r2, #0]
 8002dc2:	f020 6070 	bic.w	r0, r0, #251658240	; 0xf000000
 8002dc6:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 8002dca:	694d      	ldr	r5, [r1, #20]
 8002dcc:	431d      	orrs	r5, r3
 8002dce:	690b      	ldr	r3, [r1, #16]
 8002dd0:	431d      	orrs	r5, r3
 8002dd2:	432c      	orrs	r4, r5
 8002dd4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002dd6:	431c      	orrs	r4, r3
 8002dd8:	4320      	orrs	r0, r4
 8002dda:	6010      	str	r0, [r2, #0]
      *ir_reg = cmd->Instruction;
 8002ddc:	688b      	ldr	r3, [r1, #8]
 8002dde:	f8cc 3000 	str.w	r3, [ip]
  HAL_StatusTypeDef status = HAL_OK;
 8002de2:	2000      	movs	r0, #0
 8002de4:	e7c3      	b.n	8002d6e <OSPI_ConfigCmd+0xba>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 8002de6:	6814      	ldr	r4, [r2, #0]
 8002de8:	f024 043f 	bic.w	r4, r4, #63	; 0x3f
 8002dec:	694d      	ldr	r5, [r1, #20]
 8002dee:	432b      	orrs	r3, r5
 8002df0:	690d      	ldr	r5, [r1, #16]
 8002df2:	432b      	orrs	r3, r5
 8002df4:	4323      	orrs	r3, r4
 8002df6:	6013      	str	r3, [r2, #0]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8002df8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002dfa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002dfe:	d1ed      	bne.n	8002ddc <OSPI_ConfigCmd+0x128>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8002e00:	694b      	ldr	r3, [r1, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8002e02:	2b08      	cmp	r3, #8
 8002e04:	d1ea      	bne.n	8002ddc <OSPI_ConfigCmd+0x128>
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8002e06:	6813      	ldr	r3, [r2, #0]
 8002e08:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002e0c:	6013      	str	r3, [r2, #0]
 8002e0e:	e7e5      	b.n	8002ddc <OSPI_ConfigCmd+0x128>
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8002e10:	69cb      	ldr	r3, [r1, #28]
 8002e12:	b1f3      	cbz	r3, 8002e52 <OSPI_ConfigCmd+0x19e>
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8002e14:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 8002e16:	b194      	cbz	r4, 8002e3e <OSPI_ConfigCmd+0x18a>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 8002e18:	6815      	ldr	r5, [r2, #0]
 8002e1a:	f025 6570 	bic.w	r5, r5, #251658240	; 0xf000000
 8002e1e:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
 8002e22:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 8002e24:	4333      	orrs	r3, r6
 8002e26:	6a0e      	ldr	r6, [r1, #32]
 8002e28:	4333      	orrs	r3, r6
 8002e2a:	431c      	orrs	r4, r3
 8002e2c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002e2e:	431c      	orrs	r4, r3
 8002e30:	4325      	orrs	r5, r4
 8002e32:	6015      	str	r5, [r2, #0]
      hospi->Instance->AR = cmd->Address;
 8002e34:	6803      	ldr	r3, [r0, #0]
 8002e36:	698a      	ldr	r2, [r1, #24]
 8002e38:	649a      	str	r2, [r3, #72]	; 0x48
  HAL_StatusTypeDef status = HAL_OK;
 8002e3a:	2000      	movs	r0, #0
 8002e3c:	e797      	b.n	8002d6e <OSPI_ConfigCmd+0xba>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 8002e3e:	6814      	ldr	r4, [r2, #0]
 8002e40:	f424 547c 	bic.w	r4, r4, #16128	; 0x3f00
 8002e44:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 8002e46:	432b      	orrs	r3, r5
 8002e48:	6a0d      	ldr	r5, [r1, #32]
 8002e4a:	432b      	orrs	r3, r5
 8002e4c:	4323      	orrs	r3, r4
 8002e4e:	6013      	str	r3, [r2, #0]
 8002e50:	e7f0      	b.n	8002e34 <OSPI_ConfigCmd+0x180>
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8002e52:	2308      	movs	r3, #8
 8002e54:	6483      	str	r3, [r0, #72]	; 0x48
      status = HAL_ERROR;
 8002e56:	2001      	movs	r0, #1
 8002e58:	e789      	b.n	8002d6e <OSPI_ConfigCmd+0xba>
 8002e5a:	bf00      	nop
 8002e5c:	f0ffc0c0 	.word	0xf0ffc0c0

08002e60 <OSPIM_GetConfig>:
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t reg;
  uint32_t value = 0U;
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8002e60:	1e43      	subs	r3, r0, #1
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d901      	bls.n	8002e6c <OSPIM_GetConfig+0xc>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8002e68:	2001      	movs	r0, #1
 8002e6a:	4770      	bx	lr
  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8002e6c:	2900      	cmp	r1, #0
 8002e6e:	d05d      	beq.n	8002f2c <OSPIM_GetConfig+0xcc>
{
 8002e70:	b410      	push	{r4}
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8002e72:	2300      	movs	r3, #0
 8002e74:	600b      	str	r3, [r1, #0]
    cfg->DQSPort    = 0U;
 8002e76:	604b      	str	r3, [r1, #4]
    cfg->NCSPort    = 0U;
 8002e78:	608b      	str	r3, [r1, #8]
    cfg->IOLowPort  = 0U;
 8002e7a:	60cb      	str	r3, [r1, #12]
    cfg->IOHighPort = 0U;
 8002e7c:	610b      	str	r3, [r1, #16]

    if (instance_nb == 2U)
 8002e7e:	2802      	cmp	r0, #2
 8002e80:	d002      	beq.n	8002e88 <OSPIM_GetConfig+0x28>
  uint32_t value = 0U;
 8002e82:	461c      	mov	r4, r3
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8002e84:	2200      	movs	r2, #0
 8002e86:	e00b      	b.n	8002ea0 <OSPIM_GetConfig+0x40>
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8002e88:	4c29      	ldr	r4, [pc, #164]	; (8002f30 <OSPIM_GetConfig+0xd0>)
 8002e8a:	e7fb      	b.n	8002e84 <OSPIM_GetConfig+0x24>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8002e8c:	1c50      	adds	r0, r2, #1
 8002e8e:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
 8002e92:	60c8      	str	r0, [r1, #12]
 8002e94:	e036      	b.n	8002f04 <OSPIM_GetConfig+0xa4>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8002e96:	1c53      	adds	r3, r2, #1
 8002e98:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e9c:	610b      	str	r3, [r1, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8002e9e:	3201      	adds	r2, #1
 8002ea0:	2a01      	cmp	r2, #1
 8002ea2:	d83f      	bhi.n	8002f24 <OSPIM_GetConfig+0xc4>
      reg = OCTOSPIM->PCR[index];
 8002ea4:	0090      	lsls	r0, r2, #2
 8002ea6:	4b23      	ldr	r3, [pc, #140]	; (8002f34 <OSPIM_GetConfig+0xd4>)
 8002ea8:	581b      	ldr	r3, [r3, r0]
      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8002eaa:	f013 0f01 	tst.w	r3, #1
 8002eae:	d006      	beq.n	8002ebe <OSPIM_GetConfig+0x5e>
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8002eb0:	ea84 0003 	eor.w	r0, r4, r3
 8002eb4:	f010 0f02 	tst.w	r0, #2
 8002eb8:	d101      	bne.n	8002ebe <OSPIM_GetConfig+0x5e>
          cfg->ClkPort = index+1U;
 8002eba:	1c50      	adds	r0, r2, #1
 8002ebc:	6008      	str	r0, [r1, #0]
      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8002ebe:	f013 0f10 	tst.w	r3, #16
 8002ec2:	d006      	beq.n	8002ed2 <OSPIM_GetConfig+0x72>
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8002ec4:	ea84 0003 	eor.w	r0, r4, r3
 8002ec8:	f010 0f20 	tst.w	r0, #32
 8002ecc:	d101      	bne.n	8002ed2 <OSPIM_GetConfig+0x72>
          cfg->DQSPort = index+1U;
 8002ece:	1c50      	adds	r0, r2, #1
 8002ed0:	6048      	str	r0, [r1, #4]
      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8002ed2:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002ed6:	d006      	beq.n	8002ee6 <OSPIM_GetConfig+0x86>
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8002ed8:	ea84 0003 	eor.w	r0, r4, r3
 8002edc:	f410 7f00 	tst.w	r0, #512	; 0x200
 8002ee0:	d101      	bne.n	8002ee6 <OSPIM_GetConfig+0x86>
          cfg->NCSPort = index+1U;
 8002ee2:	1c50      	adds	r0, r2, #1
 8002ee4:	6088      	str	r0, [r1, #8]
      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8002ee6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002eea:	d00b      	beq.n	8002f04 <OSPIM_GetConfig+0xa4>
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8002eec:	ea84 0003 	eor.w	r0, r4, r3
 8002ef0:	f410 2f80 	tst.w	r0, #262144	; 0x40000
 8002ef4:	d106      	bne.n	8002f04 <OSPIM_GetConfig+0xa4>
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8002ef6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002efa:	d1c7      	bne.n	8002e8c <OSPIM_GetConfig+0x2c>
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8002efc:	1c50      	adds	r0, r2, #1
 8002efe:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8002f02:	60c8      	str	r0, [r1, #12]
      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8002f04:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8002f08:	d0c9      	beq.n	8002e9e <OSPIM_GetConfig+0x3e>
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8002f0a:	ea84 0003 	eor.w	r0, r4, r3
 8002f0e:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 8002f12:	d1c4      	bne.n	8002e9e <OSPIM_GetConfig+0x3e>
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8002f14:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002f18:	d1bd      	bne.n	8002e96 <OSPIM_GetConfig+0x36>
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8002f1a:	1c53      	adds	r3, r2, #1
 8002f1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f20:	610b      	str	r3, [r1, #16]
 8002f22:	e7bc      	b.n	8002e9e <OSPIM_GetConfig+0x3e>
  HAL_StatusTypeDef status = HAL_OK;
 8002f24:	2000      	movs	r0, #0
    }
  }

  /* Return function status */
  return status;
}
 8002f26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002f2a:	4770      	bx	lr
    status = HAL_ERROR;
 8002f2c:	2001      	movs	r0, #1
}
 8002f2e:	4770      	bx	lr
 8002f30:	04040222 	.word	0x04040222
 8002f34:	50061c04 	.word	0x50061c04

08002f38 <OSPI_WaitFlagStateUntilTimeout>:
{
 8002f38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002f3c:	4605      	mov	r5, r0
 8002f3e:	460f      	mov	r7, r1
 8002f40:	4616      	mov	r6, r2
 8002f42:	4699      	mov	r9, r3
 8002f44:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8002f48:	682c      	ldr	r4, [r5, #0]
 8002f4a:	6a24      	ldr	r4, [r4, #32]
 8002f4c:	423c      	tst	r4, r7
 8002f4e:	bf14      	ite	ne
 8002f50:	f04f 0c01 	movne.w	ip, #1
 8002f54:	f04f 0c00 	moveq.w	ip, #0
 8002f58:	45b4      	cmp	ip, r6
 8002f5a:	d014      	beq.n	8002f86 <OSPI_WaitFlagStateUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 8002f5c:	f1b8 3fff 	cmp.w	r8, #4294967295
 8002f60:	d0f2      	beq.n	8002f48 <OSPI_WaitFlagStateUntilTimeout+0x10>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f62:	f7fe fd0b 	bl	800197c <HAL_GetTick>
 8002f66:	eba0 0009 	sub.w	r0, r0, r9
 8002f6a:	4540      	cmp	r0, r8
 8002f6c:	d802      	bhi.n	8002f74 <OSPI_WaitFlagStateUntilTimeout+0x3c>
 8002f6e:	f1b8 0f00 	cmp.w	r8, #0
 8002f72:	d1e9      	bne.n	8002f48 <OSPI_WaitFlagStateUntilTimeout+0x10>
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8002f74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f78:	646b      	str	r3, [r5, #68]	; 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8002f7a:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8002f7c:	f043 0301 	orr.w	r3, r3, #1
 8002f80:	64ab      	str	r3, [r5, #72]	; 0x48
        return HAL_ERROR;
 8002f82:	2001      	movs	r0, #1
 8002f84:	e000      	b.n	8002f88 <OSPI_WaitFlagStateUntilTimeout+0x50>
  return HAL_OK;
 8002f86:	2000      	movs	r0, #0
}
 8002f88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08002f8c <HAL_OSPI_Command>:
{
 8002f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f90:	b082      	sub	sp, #8
 8002f92:	4604      	mov	r4, r0
 8002f94:	4688      	mov	r8, r1
 8002f96:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
 8002f98:	f7fe fcf0 	bl	800197c <HAL_GetTick>
 8002f9c:	4606      	mov	r6, r0
  state = hospi->State;
 8002f9e:	6c65      	ldr	r5, [r4, #68]	; 0x44
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 8002fa0:	2d02      	cmp	r5, #2
 8002fa2:	d009      	beq.n	8002fb8 <HAL_OSPI_Command+0x2c>
 8002fa4:	2d14      	cmp	r5, #20
 8002fa6:	d024      	beq.n	8002ff2 <HAL_OSPI_Command+0x66>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG))     ||
 8002fa8:	2d24      	cmp	r5, #36	; 0x24
 8002faa:	d027      	beq.n	8002ffc <HAL_OSPI_Command+0x70>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8002fac:	2310      	movs	r3, #16
 8002fae:	64a3      	str	r3, [r4, #72]	; 0x48
    status = HAL_ERROR;
 8002fb0:	2001      	movs	r0, #1
}
 8002fb2:	b002      	add	sp, #8
 8002fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 8002fb8:	68e3      	ldr	r3, [r4, #12]
 8002fba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002fbe:	d0f1      	beq.n	8002fa4 <HAL_OSPI_Command+0x18>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8002fc0:	9700      	str	r7, [sp, #0]
 8002fc2:	4633      	mov	r3, r6
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	2120      	movs	r1, #32
 8002fc8:	4620      	mov	r0, r4
 8002fca:	f7ff ffb5 	bl	8002f38 <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8002fce:	2800      	cmp	r0, #0
 8002fd0:	d1ef      	bne.n	8002fb2 <HAL_OSPI_Command+0x26>
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8002fd2:	64a0      	str	r0, [r4, #72]	; 0x48
      status = OSPI_ConfigCmd(hospi, cmd);
 8002fd4:	4641      	mov	r1, r8
 8002fd6:	4620      	mov	r0, r4
 8002fd8:	f7ff fe6c 	bl	8002cb4 <OSPI_ConfigCmd>
      if (status == HAL_OK)
 8002fdc:	2800      	cmp	r0, #0
 8002fde:	d1e8      	bne.n	8002fb2 <HAL_OSPI_Command+0x26>
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 8002fe0:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
 8002fe4:	b17b      	cbz	r3, 8003006 <HAL_OSPI_Command+0x7a>
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8002fe6:	f8d8 3000 	ldr.w	r3, [r8]
 8002fea:	b9bb      	cbnz	r3, 800301c <HAL_OSPI_Command+0x90>
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8002fec:	2304      	movs	r3, #4
 8002fee:	6463      	str	r3, [r4, #68]	; 0x44
 8002ff0:	e7df      	b.n	8002fb2 <HAL_OSPI_Command+0x26>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG))     ||
 8002ff2:	f8d8 3000 	ldr.w	r3, [r8]
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d1d6      	bne.n	8002fa8 <HAL_OSPI_Command+0x1c>
 8002ffa:	e7e1      	b.n	8002fc0 <HAL_OSPI_Command+0x34>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)))
 8002ffc:	f8d8 3000 	ldr.w	r3, [r8]
 8003000:	2b01      	cmp	r3, #1
 8003002:	d1d3      	bne.n	8002fac <HAL_OSPI_Command+0x20>
 8003004:	e7dc      	b.n	8002fc0 <HAL_OSPI_Command+0x34>
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8003006:	9700      	str	r7, [sp, #0]
 8003008:	4633      	mov	r3, r6
 800300a:	2201      	movs	r2, #1
 800300c:	2102      	movs	r1, #2
 800300e:	4620      	mov	r0, r4
 8003010:	f7ff ff92 	bl	8002f38 <OSPI_WaitFlagStateUntilTimeout>
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8003014:	6823      	ldr	r3, [r4, #0]
 8003016:	2202      	movs	r2, #2
 8003018:	625a      	str	r2, [r3, #36]	; 0x24
 800301a:	e7ca      	b.n	8002fb2 <HAL_OSPI_Command+0x26>
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 800301c:	2b01      	cmp	r3, #1
 800301e:	d005      	beq.n	800302c <HAL_OSPI_Command+0xa0>
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 8003020:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003022:	2b14      	cmp	r3, #20
 8003024:	d00b      	beq.n	800303e <HAL_OSPI_Command+0xb2>
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 8003026:	2324      	movs	r3, #36	; 0x24
 8003028:	6463      	str	r3, [r4, #68]	; 0x44
 800302a:	e7c2      	b.n	8002fb2 <HAL_OSPI_Command+0x26>
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 800302c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800302e:	2b24      	cmp	r3, #36	; 0x24
 8003030:	d002      	beq.n	8003038 <HAL_OSPI_Command+0xac>
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 8003032:	2314      	movs	r3, #20
 8003034:	6463      	str	r3, [r4, #68]	; 0x44
 8003036:	e7bc      	b.n	8002fb2 <HAL_OSPI_Command+0x26>
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8003038:	2304      	movs	r3, #4
 800303a:	6463      	str	r3, [r4, #68]	; 0x44
 800303c:	e7b9      	b.n	8002fb2 <HAL_OSPI_Command+0x26>
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800303e:	2304      	movs	r3, #4
 8003040:	6463      	str	r3, [r4, #68]	; 0x44
 8003042:	e7b6      	b.n	8002fb2 <HAL_OSPI_Command+0x26>

08003044 <HAL_OSPI_Transmit>:
{
 8003044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003048:	b082      	sub	sp, #8
 800304a:	4604      	mov	r4, r0
 800304c:	4688      	mov	r8, r1
 800304e:	4616      	mov	r6, r2
  uint32_t tickstart = HAL_GetTick();
 8003050:	f7fe fc94 	bl	800197c <HAL_GetTick>
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8003054:	6827      	ldr	r7, [r4, #0]
  if (pData == NULL)
 8003056:	f1b8 0f00 	cmp.w	r8, #0
 800305a:	d00a      	beq.n	8003072 <HAL_OSPI_Transmit+0x2e>
 800305c:	4605      	mov	r5, r0
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800305e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003060:	2b04      	cmp	r3, #4
 8003062:	d00a      	beq.n	800307a <HAL_OSPI_Transmit+0x36>
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8003064:	2310      	movs	r3, #16
 8003066:	64a3      	str	r3, [r4, #72]	; 0x48
      status = HAL_ERROR;
 8003068:	2301      	movs	r3, #1
}
 800306a:	4618      	mov	r0, r3
 800306c:	b002      	add	sp, #8
 800306e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8003072:	2308      	movs	r3, #8
 8003074:	64a3      	str	r3, [r4, #72]	; 0x48
    status = HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e7f7      	b.n	800306a <HAL_OSPI_Transmit+0x26>
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 800307a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800307c:	3301      	adds	r3, #1
 800307e:	63e3      	str	r3, [r4, #60]	; 0x3c
      hospi->XferSize  = hospi->XferCount;
 8003080:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003082:	63a3      	str	r3, [r4, #56]	; 0x38
      hospi->pBuffPtr  = pData;
 8003084:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800308e:	603b      	str	r3, [r7, #0]
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 8003090:	9600      	str	r6, [sp, #0]
 8003092:	462b      	mov	r3, r5
 8003094:	2201      	movs	r2, #1
 8003096:	2104      	movs	r1, #4
 8003098:	4620      	mov	r0, r4
 800309a:	f7ff ff4d 	bl	8002f38 <OSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 800309e:	4603      	mov	r3, r0
 80030a0:	b960      	cbnz	r0, 80030bc <HAL_OSPI_Transmit+0x78>
        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 80030a2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80030a4:	7812      	ldrb	r2, [r2, #0]
 80030a6:	f887 2050 	strb.w	r2, [r7, #80]	; 0x50
        hospi->pBuffPtr++;
 80030aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80030ac:	3101      	adds	r1, #1
 80030ae:	6361      	str	r1, [r4, #52]	; 0x34
        hospi->XferCount--;
 80030b0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80030b2:	3901      	subs	r1, #1
 80030b4:	63e1      	str	r1, [r4, #60]	; 0x3c
      } while (hospi->XferCount > 0U);
 80030b6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80030b8:	2a00      	cmp	r2, #0
 80030ba:	d1e9      	bne.n	8003090 <HAL_OSPI_Transmit+0x4c>
      if (status == HAL_OK)
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d1d4      	bne.n	800306a <HAL_OSPI_Transmit+0x26>
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 80030c0:	9600      	str	r6, [sp, #0]
 80030c2:	462b      	mov	r3, r5
 80030c4:	2201      	movs	r2, #1
 80030c6:	2102      	movs	r1, #2
 80030c8:	4620      	mov	r0, r4
 80030ca:	f7ff ff35 	bl	8002f38 <OSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 80030ce:	4603      	mov	r3, r0
 80030d0:	2800      	cmp	r0, #0
 80030d2:	d1ca      	bne.n	800306a <HAL_OSPI_Transmit+0x26>
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80030d4:	6821      	ldr	r1, [r4, #0]
 80030d6:	2202      	movs	r2, #2
 80030d8:	624a      	str	r2, [r1, #36]	; 0x24
          hospi->State = HAL_OSPI_STATE_READY;
 80030da:	6462      	str	r2, [r4, #68]	; 0x44
 80030dc:	e7c5      	b.n	800306a <HAL_OSPI_Transmit+0x26>

080030de <HAL_OSPI_Receive>:
{
 80030de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	4604      	mov	r4, r0
 80030e6:	4688      	mov	r8, r1
 80030e8:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
 80030ea:	f7fe fc47 	bl	800197c <HAL_GetTick>
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 80030ee:	6825      	ldr	r5, [r4, #0]
  uint32_t addr_reg = hospi->Instance->AR;
 80030f0:	6caa      	ldr	r2, [r5, #72]	; 0x48
  uint32_t ir_reg = hospi->Instance->IR;
 80030f2:	f8d5 1110 	ldr.w	r1, [r5, #272]	; 0x110
  if (pData == NULL)
 80030f6:	f1b8 0f00 	cmp.w	r8, #0
 80030fa:	d00a      	beq.n	8003112 <HAL_OSPI_Receive+0x34>
 80030fc:	4606      	mov	r6, r0
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 80030fe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003100:	2b04      	cmp	r3, #4
 8003102:	d00a      	beq.n	800311a <HAL_OSPI_Receive+0x3c>
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8003104:	2310      	movs	r3, #16
 8003106:	64a3      	str	r3, [r4, #72]	; 0x48
      status = HAL_ERROR;
 8003108:	2301      	movs	r3, #1
}
 800310a:	4618      	mov	r0, r3
 800310c:	b002      	add	sp, #8
 800310e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8003112:	2308      	movs	r3, #8
 8003114:	64a3      	str	r3, [r4, #72]	; 0x48
    status = HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e7f7      	b.n	800310a <HAL_OSPI_Receive+0x2c>
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 800311a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800311c:	3301      	adds	r3, #1
 800311e:	63e3      	str	r3, [r4, #60]	; 0x3c
      hospi->XferSize  = hospi->XferCount;
 8003120:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003122:	63a3      	str	r3, [r4, #56]	; 0x38
      hospi->pBuffPtr  = pData;
 8003124:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8003128:	682b      	ldr	r3, [r5, #0]
 800312a:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800312e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003132:	602b      	str	r3, [r5, #0]
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8003134:	68e3      	ldr	r3, [r4, #12]
 8003136:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800313a:	d007      	beq.n	800314c <HAL_OSPI_Receive+0x6e>
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 800313c:	6823      	ldr	r3, [r4, #0]
 800313e:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
 8003142:	f410 6fe0 	tst.w	r0, #1792	; 0x700
 8003146:	d02a      	beq.n	800319e <HAL_OSPI_Receive+0xc0>
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8003148:	649a      	str	r2, [r3, #72]	; 0x48
 800314a:	e001      	b.n	8003150 <HAL_OSPI_Receive+0x72>
        WRITE_REG(hospi->Instance->AR, addr_reg);
 800314c:	6823      	ldr	r3, [r4, #0]
 800314e:	649a      	str	r2, [r3, #72]	; 0x48
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 8003150:	9700      	str	r7, [sp, #0]
 8003152:	4633      	mov	r3, r6
 8003154:	2201      	movs	r2, #1
 8003156:	2106      	movs	r1, #6
 8003158:	4620      	mov	r0, r4
 800315a:	f7ff feed 	bl	8002f38 <OSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 800315e:	4603      	mov	r3, r0
 8003160:	b960      	cbnz	r0, 800317c <HAL_OSPI_Receive+0x9e>
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8003162:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003164:	f895 1050 	ldrb.w	r1, [r5, #80]	; 0x50
 8003168:	7011      	strb	r1, [r2, #0]
        hospi->pBuffPtr++;
 800316a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800316c:	3101      	adds	r1, #1
 800316e:	6361      	str	r1, [r4, #52]	; 0x34
        hospi->XferCount--;
 8003170:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8003172:	3901      	subs	r1, #1
 8003174:	63e1      	str	r1, [r4, #60]	; 0x3c
      } while(hospi->XferCount > 0U);
 8003176:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003178:	2a00      	cmp	r2, #0
 800317a:	d1e9      	bne.n	8003150 <HAL_OSPI_Receive+0x72>
      if (status == HAL_OK)
 800317c:	2b00      	cmp	r3, #0
 800317e:	d1c4      	bne.n	800310a <HAL_OSPI_Receive+0x2c>
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8003180:	9700      	str	r7, [sp, #0]
 8003182:	4633      	mov	r3, r6
 8003184:	2201      	movs	r2, #1
 8003186:	2102      	movs	r1, #2
 8003188:	4620      	mov	r0, r4
 800318a:	f7ff fed5 	bl	8002f38 <OSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800318e:	4603      	mov	r3, r0
 8003190:	2800      	cmp	r0, #0
 8003192:	d1ba      	bne.n	800310a <HAL_OSPI_Receive+0x2c>
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8003194:	6821      	ldr	r1, [r4, #0]
 8003196:	2202      	movs	r2, #2
 8003198:	624a      	str	r2, [r1, #36]	; 0x24
          hospi->State = HAL_OSPI_STATE_READY;
 800319a:	6462      	str	r2, [r4, #68]	; 0x44
 800319c:	e7b5      	b.n	800310a <HAL_OSPI_Receive+0x2c>
          WRITE_REG(hospi->Instance->IR, ir_reg);
 800319e:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
 80031a2:	e7d5      	b.n	8003150 <HAL_OSPI_Receive+0x72>

080031a4 <HAL_OSPI_ErrorCallback>:
}
 80031a4:	4770      	bx	lr

080031a6 <HAL_OSPI_AbortCpltCallback>:
}
 80031a6:	4770      	bx	lr

080031a8 <OSPI_DMAAbortCplt>:
{
 80031a8:	b508      	push	{r3, lr}
  OSPI_HandleTypeDef* hospi = ( OSPI_HandleTypeDef* )(hdma->Parent);
 80031aa:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hospi->XferCount = 0;
 80031ac:	2300      	movs	r3, #0
 80031ae:	63c3      	str	r3, [r0, #60]	; 0x3c
  if (hospi->State == HAL_OSPI_STATE_ABORT)
 80031b0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80031b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031b6:	d116      	bne.n	80031e6 <OSPI_DMAAbortCplt+0x3e>
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 80031b8:	6803      	ldr	r3, [r0, #0]
 80031ba:	6a1a      	ldr	r2, [r3, #32]
 80031bc:	f012 0f20 	tst.w	r2, #32
 80031c0:	d00c      	beq.n	80031dc <OSPI_DMAAbortCplt+0x34>
      __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80031c2:	2202      	movs	r2, #2
 80031c4:	625a      	str	r2, [r3, #36]	; 0x24
      __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TC);
 80031c6:	6802      	ldr	r2, [r0, #0]
 80031c8:	6813      	ldr	r3, [r2, #0]
 80031ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031ce:	6013      	str	r3, [r2, #0]
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 80031d0:	6802      	ldr	r2, [r0, #0]
 80031d2:	6813      	ldr	r3, [r2, #0]
 80031d4:	f043 0302 	orr.w	r3, r3, #2
 80031d8:	6013      	str	r3, [r2, #0]
 80031da:	e008      	b.n	80031ee <OSPI_DMAAbortCplt+0x46>
      hospi->State = HAL_OSPI_STATE_READY;
 80031dc:	2302      	movs	r3, #2
 80031de:	6443      	str	r3, [r0, #68]	; 0x44
      HAL_OSPI_AbortCpltCallback(hospi);
 80031e0:	f7ff ffe1 	bl	80031a6 <HAL_OSPI_AbortCpltCallback>
 80031e4:	e003      	b.n	80031ee <OSPI_DMAAbortCplt+0x46>
    hospi->State = HAL_OSPI_STATE_READY;
 80031e6:	2302      	movs	r3, #2
 80031e8:	6443      	str	r3, [r0, #68]	; 0x44
    HAL_OSPI_ErrorCallback(hospi);
 80031ea:	f7ff ffdb 	bl	80031a4 <HAL_OSPI_ErrorCallback>
}
 80031ee:	bd08      	pop	{r3, pc}

080031f0 <HAL_OSPI_FifoThresholdCallback>:
}
 80031f0:	4770      	bx	lr

080031f2 <HAL_OSPI_CmdCpltCallback>:
}
 80031f2:	4770      	bx	lr

080031f4 <HAL_OSPI_RxCpltCallback>:
}
 80031f4:	4770      	bx	lr

080031f6 <HAL_OSPI_TxCpltCallback>:
}
 80031f6:	4770      	bx	lr

080031f8 <HAL_OSPI_StatusMatchCallback>:
}
 80031f8:	4770      	bx	lr

080031fa <HAL_OSPI_TimeOutCallback>:
}
 80031fa:	4770      	bx	lr

080031fc <HAL_OSPI_IRQHandler>:
{
 80031fc:	b510      	push	{r4, lr}
 80031fe:	4604      	mov	r4, r0
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8003200:	6802      	ldr	r2, [r0, #0]
  uint32_t flag           = hospi->Instance->SR;
 8003202:	6a13      	ldr	r3, [r2, #32]
  uint32_t itsource       = hospi->Instance->CR;
 8003204:	6811      	ldr	r1, [r2, #0]
  uint32_t currentstate   = hospi->State;
 8003206:	6c40      	ldr	r0, [r0, #68]	; 0x44
  if (((flag & HAL_OSPI_FLAG_FT) != 0U) && ((itsource & HAL_OSPI_IT_FT) != 0U))
 8003208:	f013 0f04 	tst.w	r3, #4
 800320c:	d027      	beq.n	800325e <HAL_OSPI_IRQHandler+0x62>
 800320e:	f411 2f80 	tst.w	r1, #262144	; 0x40000
 8003212:	d024      	beq.n	800325e <HAL_OSPI_IRQHandler+0x62>
    if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 8003214:	2818      	cmp	r0, #24
 8003216:	d00c      	beq.n	8003232 <HAL_OSPI_IRQHandler+0x36>
    else if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8003218:	2828      	cmp	r0, #40	; 0x28
 800321a:	d015      	beq.n	8003248 <HAL_OSPI_IRQHandler+0x4c>
    if (hospi->XferCount == 0U)
 800321c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800321e:	b923      	cbnz	r3, 800322a <HAL_OSPI_IRQHandler+0x2e>
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_FT);
 8003220:	6822      	ldr	r2, [r4, #0]
 8003222:	6813      	ldr	r3, [r2, #0]
 8003224:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003228:	6013      	str	r3, [r2, #0]
    HAL_OSPI_FifoThresholdCallback(hospi);
 800322a:	4620      	mov	r0, r4
 800322c:	f7ff ffe0 	bl	80031f0 <HAL_OSPI_FifoThresholdCallback>
}
 8003230:	bd10      	pop	{r4, pc}
      *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 8003232:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
      hospi->pBuffPtr++;
 800323a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800323c:	3301      	adds	r3, #1
 800323e:	6363      	str	r3, [r4, #52]	; 0x34
      hospi->XferCount--;
 8003240:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003242:	3b01      	subs	r3, #1
 8003244:	63e3      	str	r3, [r4, #60]	; 0x3c
 8003246:	e7e9      	b.n	800321c <HAL_OSPI_IRQHandler+0x20>
      *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8003248:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800324a:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 800324e:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 8003250:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003252:	3301      	adds	r3, #1
 8003254:	6363      	str	r3, [r4, #52]	; 0x34
      hospi->XferCount--;
 8003256:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003258:	3b01      	subs	r3, #1
 800325a:	63e3      	str	r3, [r4, #60]	; 0x3c
 800325c:	e7de      	b.n	800321c <HAL_OSPI_IRQHandler+0x20>
  else if (((flag & HAL_OSPI_FLAG_TC) != 0U) && ((itsource & HAL_OSPI_IT_TC) != 0U))
 800325e:	f013 0f02 	tst.w	r3, #2
 8003262:	d044      	beq.n	80032ee <HAL_OSPI_IRQHandler+0xf2>
 8003264:	f411 3f00 	tst.w	r1, #131072	; 0x20000
 8003268:	d041      	beq.n	80032ee <HAL_OSPI_IRQHandler+0xf2>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800326a:	2828      	cmp	r0, #40	; 0x28
 800326c:	d014      	beq.n	8003298 <HAL_OSPI_IRQHandler+0x9c>
      hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 800326e:	2102      	movs	r1, #2
 8003270:	6251      	str	r1, [r2, #36]	; 0x24
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 8003272:	6822      	ldr	r2, [r4, #0]
 8003274:	6813      	ldr	r3, [r2, #0]
 8003276:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800327a:	6013      	str	r3, [r2, #0]
      hospi->State = HAL_OSPI_STATE_READY;
 800327c:	6461      	str	r1, [r4, #68]	; 0x44
      if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 800327e:	2818      	cmp	r0, #24
 8003280:	d029      	beq.n	80032d6 <HAL_OSPI_IRQHandler+0xda>
      else if (currentstate == HAL_OSPI_STATE_BUSY_CMD)
 8003282:	2808      	cmp	r0, #8
 8003284:	d02b      	beq.n	80032de <HAL_OSPI_IRQHandler+0xe2>
      else if (currentstate == HAL_OSPI_STATE_ABORT)
 8003286:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800328a:	d1d1      	bne.n	8003230 <HAL_OSPI_IRQHandler+0x34>
        if (hospi->ErrorCode == HAL_OSPI_ERROR_NONE)
 800328c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800328e:	bb53      	cbnz	r3, 80032e6 <HAL_OSPI_IRQHandler+0xea>
          HAL_OSPI_AbortCpltCallback(hospi);
 8003290:	4620      	mov	r0, r4
 8003292:	f7ff ff88 	bl	80031a6 <HAL_OSPI_AbortCpltCallback>
 8003296:	e7cb      	b.n	8003230 <HAL_OSPI_IRQHandler+0x34>
      if ((hospi->XferCount > 0U) && ((flag & OCTOSPI_SR_FLEVEL) != 0U))
 8003298:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800329a:	b169      	cbz	r1, 80032b8 <HAL_OSPI_IRQHandler+0xbc>
 800329c:	f413 5f7c 	tst.w	r3, #16128	; 0x3f00
 80032a0:	d00a      	beq.n	80032b8 <HAL_OSPI_IRQHandler+0xbc>
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 80032a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80032a4:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 80032a8:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 80032aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80032ac:	3301      	adds	r3, #1
 80032ae:	6363      	str	r3, [r4, #52]	; 0x34
        hospi->XferCount--;
 80032b0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80032b2:	3b01      	subs	r3, #1
 80032b4:	63e3      	str	r3, [r4, #60]	; 0x3c
 80032b6:	e7bb      	b.n	8003230 <HAL_OSPI_IRQHandler+0x34>
      else if(hospi->XferCount == 0U)
 80032b8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d1b8      	bne.n	8003230 <HAL_OSPI_IRQHandler+0x34>
        hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 80032be:	2102      	movs	r1, #2
 80032c0:	6251      	str	r1, [r2, #36]	; 0x24
        __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 80032c2:	6822      	ldr	r2, [r4, #0]
 80032c4:	6813      	ldr	r3, [r2, #0]
 80032c6:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80032ca:	6013      	str	r3, [r2, #0]
        hospi->State = HAL_OSPI_STATE_READY;
 80032cc:	6461      	str	r1, [r4, #68]	; 0x44
        HAL_OSPI_RxCpltCallback(hospi);
 80032ce:	4620      	mov	r0, r4
 80032d0:	f7ff ff90 	bl	80031f4 <HAL_OSPI_RxCpltCallback>
 80032d4:	e7ac      	b.n	8003230 <HAL_OSPI_IRQHandler+0x34>
        HAL_OSPI_TxCpltCallback(hospi);
 80032d6:	4620      	mov	r0, r4
 80032d8:	f7ff ff8d 	bl	80031f6 <HAL_OSPI_TxCpltCallback>
 80032dc:	e7a8      	b.n	8003230 <HAL_OSPI_IRQHandler+0x34>
        HAL_OSPI_CmdCpltCallback(hospi);
 80032de:	4620      	mov	r0, r4
 80032e0:	f7ff ff87 	bl	80031f2 <HAL_OSPI_CmdCpltCallback>
 80032e4:	e7a4      	b.n	8003230 <HAL_OSPI_IRQHandler+0x34>
          HAL_OSPI_ErrorCallback(hospi);
 80032e6:	4620      	mov	r0, r4
 80032e8:	f7ff ff5c 	bl	80031a4 <HAL_OSPI_ErrorCallback>
 80032ec:	e7a0      	b.n	8003230 <HAL_OSPI_IRQHandler+0x34>
  else if (((flag & HAL_OSPI_FLAG_SM) != 0U) && ((itsource & HAL_OSPI_IT_SM) != 0U))
 80032ee:	f013 0f08 	tst.w	r3, #8
 80032f2:	d013      	beq.n	800331c <HAL_OSPI_IRQHandler+0x120>
 80032f4:	f411 2f00 	tst.w	r1, #524288	; 0x80000
 80032f8:	d010      	beq.n	800331c <HAL_OSPI_IRQHandler+0x120>
    hospi->Instance->FCR = HAL_OSPI_FLAG_SM;
 80032fa:	2308      	movs	r3, #8
 80032fc:	6253      	str	r3, [r2, #36]	; 0x24
    if ((hospi->Instance->CR & OCTOSPI_CR_APMS) != 0U)
 80032fe:	6823      	ldr	r3, [r4, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 8003306:	d005      	beq.n	8003314 <HAL_OSPI_IRQHandler+0x118>
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_SM | HAL_OSPI_IT_TE);
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800330e:	601a      	str	r2, [r3, #0]
      hospi->State = HAL_OSPI_STATE_READY;
 8003310:	2302      	movs	r3, #2
 8003312:	6463      	str	r3, [r4, #68]	; 0x44
    HAL_OSPI_StatusMatchCallback(hospi);
 8003314:	4620      	mov	r0, r4
 8003316:	f7ff ff6f 	bl	80031f8 <HAL_OSPI_StatusMatchCallback>
 800331a:	e789      	b.n	8003230 <HAL_OSPI_IRQHandler+0x34>
  else if (((flag & HAL_OSPI_FLAG_TE) != 0U) && ((itsource & HAL_OSPI_IT_TE) != 0U))
 800331c:	f013 0f01 	tst.w	r3, #1
 8003320:	d029      	beq.n	8003376 <HAL_OSPI_IRQHandler+0x17a>
 8003322:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 8003326:	d026      	beq.n	8003376 <HAL_OSPI_IRQHandler+0x17a>
    hospi->Instance->FCR = HAL_OSPI_FLAG_TE;
 8003328:	2301      	movs	r3, #1
 800332a:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_OSPI_DISABLE_IT(hospi, (HAL_OSPI_IT_TO | HAL_OSPI_IT_SM | HAL_OSPI_IT_FT | HAL_OSPI_IT_TC | HAL_OSPI_IT_TE));
 800332c:	6822      	ldr	r2, [r4, #0]
 800332e:	6813      	ldr	r3, [r2, #0]
 8003330:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003334:	6013      	str	r3, [r2, #0]
    hospi->ErrorCode = HAL_OSPI_ERROR_TRANSFER;
 8003336:	2302      	movs	r3, #2
 8003338:	64a3      	str	r3, [r4, #72]	; 0x48
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 800333a:	6823      	ldr	r3, [r4, #0]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	f012 0f04 	tst.w	r2, #4
 8003342:	d012      	beq.n	800336a <HAL_OSPI_IRQHandler+0x16e>
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	f022 0204 	bic.w	r2, r2, #4
 800334a:	601a      	str	r2, [r3, #0]
      hospi->hdma->XferAbortCallback = OSPI_DMAAbortCplt;
 800334c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800334e:	4a11      	ldr	r2, [pc, #68]	; (8003394 <HAL_OSPI_IRQHandler+0x198>)
 8003350:	639a      	str	r2, [r3, #56]	; 0x38
      if (HAL_DMA_Abort_IT(hospi->hdma) != HAL_OK)
 8003352:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003354:	f7fe fce4 	bl	8001d20 <HAL_DMA_Abort_IT>
 8003358:	2800      	cmp	r0, #0
 800335a:	f43f af69 	beq.w	8003230 <HAL_OSPI_IRQHandler+0x34>
        hospi->State = HAL_OSPI_STATE_READY;
 800335e:	2302      	movs	r3, #2
 8003360:	6463      	str	r3, [r4, #68]	; 0x44
        HAL_OSPI_ErrorCallback(hospi);
 8003362:	4620      	mov	r0, r4
 8003364:	f7ff ff1e 	bl	80031a4 <HAL_OSPI_ErrorCallback>
 8003368:	e762      	b.n	8003230 <HAL_OSPI_IRQHandler+0x34>
      hospi->State = HAL_OSPI_STATE_READY;
 800336a:	2302      	movs	r3, #2
 800336c:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_OSPI_ErrorCallback(hospi);
 800336e:	4620      	mov	r0, r4
 8003370:	f7ff ff18 	bl	80031a4 <HAL_OSPI_ErrorCallback>
 8003374:	e75c      	b.n	8003230 <HAL_OSPI_IRQHandler+0x34>
  else if (((flag & HAL_OSPI_FLAG_TO) != 0U) && ((itsource & HAL_OSPI_IT_TO) != 0U))
 8003376:	f013 0f10 	tst.w	r3, #16
 800337a:	f43f af59 	beq.w	8003230 <HAL_OSPI_IRQHandler+0x34>
 800337e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8003382:	f43f af55 	beq.w	8003230 <HAL_OSPI_IRQHandler+0x34>
    hospi->Instance->FCR = HAL_OSPI_FLAG_TO;
 8003386:	2310      	movs	r3, #16
 8003388:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_OSPI_TimeOutCallback(hospi);
 800338a:	4620      	mov	r0, r4
 800338c:	f7ff ff35 	bl	80031fa <HAL_OSPI_TimeOutCallback>
}
 8003390:	e74e      	b.n	8003230 <HAL_OSPI_IRQHandler+0x34>
 8003392:	bf00      	nop
 8003394:	080031a9 	.word	0x080031a9

08003398 <HAL_OSPI_SetTimeout>:
  hospi->Timeout = Timeout;
 8003398:	64c1      	str	r1, [r0, #76]	; 0x4c
}
 800339a:	2000      	movs	r0, #0
 800339c:	4770      	bx	lr
	...

080033a0 <HAL_OSPI_Init>:
{
 80033a0:	b530      	push	{r4, r5, lr}
 80033a2:	b083      	sub	sp, #12
 80033a4:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80033a6:	f7fe fae9 	bl	800197c <HAL_GetTick>
  if (hospi == NULL)
 80033aa:	2c00      	cmp	r4, #0
 80033ac:	d06b      	beq.n	8003486 <HAL_OSPI_Init+0xe6>
 80033ae:	4605      	mov	r5, r0
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 80033b0:	2300      	movs	r3, #0
 80033b2:	64a3      	str	r3, [r4, #72]	; 0x48
    if (hospi->State == HAL_OSPI_STATE_RESET)
 80033b4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80033b6:	b113      	cbz	r3, 80033be <HAL_OSPI_Init+0x1e>
  HAL_StatusTypeDef status = HAL_OK;
 80033b8:	2000      	movs	r0, #0
}
 80033ba:	b003      	add	sp, #12
 80033bc:	bd30      	pop	{r4, r5, pc}
      HAL_OSPI_MspInit(hospi);
 80033be:	4620      	mov	r0, r4
 80033c0:	f7fd fbb6 	bl	8000b30 <HAL_OSPI_MspInit>
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 80033c4:	f241 3188 	movw	r1, #5000	; 0x1388
 80033c8:	4620      	mov	r0, r4
 80033ca:	f7ff ffe5 	bl	8003398 <HAL_OSPI_SetTimeout>
      MODIFY_REG(hospi->Instance->DCR1,
 80033ce:	6820      	ldr	r0, [r4, #0]
 80033d0:	6882      	ldr	r2, [r0, #8]
 80033d2:	4b2e      	ldr	r3, [pc, #184]	; (800348c <HAL_OSPI_Init+0xec>)
 80033d4:	4013      	ands	r3, r2
 80033d6:	68e2      	ldr	r2, [r4, #12]
 80033d8:	6921      	ldr	r1, [r4, #16]
 80033da:	3901      	subs	r1, #1
 80033dc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80033e0:	6961      	ldr	r1, [r4, #20]
 80033e2:	3901      	subs	r1, #1
 80033e4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80033e8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80033ea:	430a      	orrs	r2, r1
 80033ec:	69e1      	ldr	r1, [r4, #28]
 80033ee:	430a      	orrs	r2, r1
 80033f0:	4313      	orrs	r3, r2
 80033f2:	6083      	str	r3, [r0, #8]
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 80033f4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80033f6:	6822      	ldr	r2, [r4, #0]
 80033f8:	041b      	lsls	r3, r3, #16
 80033fa:	6113      	str	r3, [r2, #16]
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 80033fc:	6821      	ldr	r1, [r4, #0]
 80033fe:	680b      	ldr	r3, [r1, #0]
 8003400:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8003404:	6862      	ldr	r2, [r4, #4]
 8003406:	3a01      	subs	r2, #1
 8003408:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800340c:	600b      	str	r3, [r1, #0]
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800340e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003410:	9300      	str	r3, [sp, #0]
 8003412:	462b      	mov	r3, r5
 8003414:	2200      	movs	r2, #0
 8003416:	2120      	movs	r1, #32
 8003418:	4620      	mov	r0, r4
 800341a:	f7ff fd8d 	bl	8002f38 <OSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 800341e:	2800      	cmp	r0, #0
 8003420:	d1cb      	bne.n	80033ba <HAL_OSPI_Init+0x1a>
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8003422:	6821      	ldr	r1, [r4, #0]
 8003424:	68cb      	ldr	r3, [r1, #12]
 8003426:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800342a:	6a22      	ldr	r2, [r4, #32]
 800342c:	3a01      	subs	r2, #1
 800342e:	4313      	orrs	r3, r2
 8003430:	60cb      	str	r3, [r1, #12]
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8003432:	6822      	ldr	r2, [r4, #0]
 8003434:	6813      	ldr	r3, [r2, #0]
 8003436:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800343a:	68a1      	ldr	r1, [r4, #8]
 800343c:	430b      	orrs	r3, r1
 800343e:	6013      	str	r3, [r2, #0]
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8003440:	6821      	ldr	r1, [r4, #0]
 8003442:	f8d1 3108 	ldr.w	r3, [r1, #264]	; 0x108
 8003446:	f023 43a0 	bic.w	r3, r3, #1342177280	; 0x50000000
 800344a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800344c:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800344e:	432a      	orrs	r2, r5
 8003450:	4313      	orrs	r3, r2
 8003452:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
        __HAL_OSPI_ENABLE(hospi);
 8003456:	6822      	ldr	r2, [r4, #0]
 8003458:	6813      	ldr	r3, [r2, #0]
 800345a:	f043 0301 	orr.w	r3, r3, #1
 800345e:	6013      	str	r3, [r2, #0]
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8003460:	69a3      	ldr	r3, [r4, #24]
 8003462:	2b02      	cmp	r3, #2
 8003464:	d006      	beq.n	8003474 <HAL_OSPI_Init+0xd4>
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8003466:	68e3      	ldr	r3, [r4, #12]
 8003468:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800346c:	d008      	beq.n	8003480 <HAL_OSPI_Init+0xe0>
          hospi->State = HAL_OSPI_STATE_READY;
 800346e:	2302      	movs	r3, #2
 8003470:	6463      	str	r3, [r4, #68]	; 0x44
 8003472:	e7a2      	b.n	80033ba <HAL_OSPI_Init+0x1a>
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8003474:	6822      	ldr	r2, [r4, #0]
 8003476:	6893      	ldr	r3, [r2, #8]
 8003478:	f043 0302 	orr.w	r3, r3, #2
 800347c:	6093      	str	r3, [r2, #8]
 800347e:	e7f2      	b.n	8003466 <HAL_OSPI_Init+0xc6>
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8003480:	2301      	movs	r3, #1
 8003482:	6463      	str	r3, [r4, #68]	; 0x44
 8003484:	e799      	b.n	80033ba <HAL_OSPI_Init+0x1a>
    status = HAL_ERROR;
 8003486:	2001      	movs	r0, #1
 8003488:	e797      	b.n	80033ba <HAL_OSPI_Init+0x1a>
 800348a:	bf00      	nop
 800348c:	f8e0f8f4 	.word	0xf8e0f8f4

08003490 <HAL_OSPIM_Config>:
{
 8003490:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003494:	b08b      	sub	sp, #44	; 0x2c
 8003496:	4681      	mov	r9, r0
 8003498:	460d      	mov	r5, r1
  if (hospi->Instance == OCTOSPI1)
 800349a:	6802      	ldr	r2, [r0, #0]
 800349c:	4bb2      	ldr	r3, [pc, #712]	; (8003768 <HAL_OSPIM_Config+0x2d8>)
 800349e:	429a      	cmp	r2, r3
 80034a0:	d005      	beq.n	80034ae <HAL_OSPIM_Config+0x1e>
    other_instance = 0U;
 80034a2:	f04f 0800 	mov.w	r8, #0
    instance = 1U;
 80034a6:	2601      	movs	r6, #1
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80034a8:	2300      	movs	r3, #0
  HAL_StatusTypeDef status = HAL_OK;
 80034aa:	461f      	mov	r7, r3
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80034ac:	e004      	b.n	80034b8 <HAL_OSPIM_Config+0x28>
    other_instance = 1U;
 80034ae:	f04f 0801 	mov.w	r8, #1
    instance = 0U;
 80034b2:	2600      	movs	r6, #0
 80034b4:	e7f8      	b.n	80034a8 <HAL_OSPIM_Config+0x18>
      status = HAL_ERROR;
 80034b6:	4623      	mov	r3, r4
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d80f      	bhi.n	80034dc <HAL_OSPIM_Config+0x4c>
    if (OSPIM_GetConfig(index+1U, &(IOM_cfg[index])) != HAL_OK)
 80034bc:	1c5c      	adds	r4, r3, #1
 80034be:	b2e4      	uxtb	r4, r4
 80034c0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80034c4:	eb0d 0183 	add.w	r1, sp, r3, lsl #2
 80034c8:	4620      	mov	r0, r4
 80034ca:	f7ff fcc9 	bl	8002e60 <OSPIM_GetConfig>
 80034ce:	2800      	cmp	r0, #0
 80034d0:	d0f1      	beq.n	80034b6 <HAL_OSPIM_Config+0x26>
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80034d2:	2308      	movs	r3, #8
 80034d4:	f8c9 3048 	str.w	r3, [r9, #72]	; 0x48
      status = HAL_ERROR;
 80034d8:	2701      	movs	r7, #1
 80034da:	e7ec      	b.n	80034b6 <HAL_OSPIM_Config+0x26>
  if (status == HAL_OK)
 80034dc:	2f00      	cmp	r7, #0
 80034de:	f040 812c 	bne.w	800373a <HAL_OSPIM_Config+0x2aa>
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 80034e2:	4ba1      	ldr	r3, [pc, #644]	; (8003768 <HAL_OSPIM_Config+0x2d8>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f013 0f01 	tst.w	r3, #1
 80034ea:	f000 812a 	beq.w	8003742 <HAL_OSPIM_Config+0x2b2>
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80034ee:	4a9e      	ldr	r2, [pc, #632]	; (8003768 <HAL_OSPIM_Config+0x2d8>)
 80034f0:	6813      	ldr	r3, [r2, #0]
 80034f2:	f023 0301 	bic.w	r3, r3, #1
 80034f6:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 80034f8:	2101      	movs	r1, #1
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 80034fa:	4b9c      	ldr	r3, [pc, #624]	; (800376c <HAL_OSPIM_Config+0x2dc>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f013 0f01 	tst.w	r3, #1
 8003502:	d007      	beq.n	8003514 <HAL_OSPIM_Config+0x84>
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8003504:	4a99      	ldr	r2, [pc, #612]	; (800376c <HAL_OSPIM_Config+0x2dc>)
 8003506:	6813      	ldr	r3, [r2, #0]
 8003508:	f023 0301 	bic.w	r3, r3, #1
 800350c:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 800350e:	f041 0102 	orr.w	r1, r1, #2
 8003512:	b2c9      	uxtb	r1, r1
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8003514:	eb06 0286 	add.w	r2, r6, r6, lsl #2
 8003518:	ab0a      	add	r3, sp, #40	; 0x28
 800351a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800351e:	f852 3c20 	ldr.w	r3, [r2, #-32]
 8003522:	3b01      	subs	r3, #1
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	4892      	ldr	r0, [pc, #584]	; (8003770 <HAL_OSPIM_Config+0x2e0>)
 8003528:	4418      	add	r0, r3
 800352a:	6843      	ldr	r3, [r0, #4]
 800352c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003530:	6043      	str	r3, [r0, #4]
      if (IOM_cfg[instance].ClkPort != 0U)
 8003532:	f852 3c28 	ldr.w	r3, [r2, #-40]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d03b      	beq.n	80035b2 <HAL_OSPIM_Config+0x122>
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 800353a:	3b01      	subs	r3, #1
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	4a8c      	ldr	r2, [pc, #560]	; (8003770 <HAL_OSPIM_Config+0x2e0>)
 8003540:	441a      	add	r2, r3
 8003542:	6853      	ldr	r3, [r2, #4]
 8003544:	f023 0301 	bic.w	r3, r3, #1
 8003548:	6053      	str	r3, [r2, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 800354a:	eb06 0386 	add.w	r3, r6, r6, lsl #2
 800354e:	aa0a      	add	r2, sp, #40	; 0x28
 8003550:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003554:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8003558:	b13b      	cbz	r3, 800356a <HAL_OSPIM_Config+0xda>
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 800355a:	3b01      	subs	r3, #1
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	4a84      	ldr	r2, [pc, #528]	; (8003770 <HAL_OSPIM_Config+0x2e0>)
 8003560:	441a      	add	r2, r3
 8003562:	6853      	ldr	r3, [r2, #4]
 8003564:	f023 0310 	bic.w	r3, r3, #16
 8003568:	6053      	str	r3, [r2, #4]
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800356a:	eb06 0386 	add.w	r3, r6, r6, lsl #2
 800356e:	aa0a      	add	r2, sp, #40	; 0x28
 8003570:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003574:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8003578:	b14b      	cbz	r3, 800358e <HAL_OSPIM_Config+0xfe>
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 800357a:	3b01      	subs	r3, #1
 800357c:	f003 0301 	and.w	r3, r3, #1
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	4a7b      	ldr	r2, [pc, #492]	; (8003770 <HAL_OSPIM_Config+0x2e0>)
 8003584:	441a      	add	r2, r3
 8003586:	6853      	ldr	r3, [r2, #4]
 8003588:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800358c:	6053      	str	r3, [r2, #4]
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800358e:	eb06 0386 	add.w	r3, r6, r6, lsl #2
 8003592:	aa0a      	add	r2, sp, #40	; 0x28
 8003594:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003598:	f853 3c18 	ldr.w	r3, [r3, #-24]
 800359c:	b14b      	cbz	r3, 80035b2 <HAL_OSPIM_Config+0x122>
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 800359e:	3b01      	subs	r3, #1
 80035a0:	f003 0301 	and.w	r3, r3, #1
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	4a72      	ldr	r2, [pc, #456]	; (8003770 <HAL_OSPIM_Config+0x2e0>)
 80035a8:	441a      	add	r2, r3
 80035aa:	6853      	ldr	r3, [r2, #4]
 80035ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035b0:	6053      	str	r3, [r2, #4]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 80035b2:	682a      	ldr	r2, [r5, #0]
 80035b4:	4643      	mov	r3, r8
 80035b6:	eb08 0088 	add.w	r0, r8, r8, lsl #2
 80035ba:	ac0a      	add	r4, sp, #40	; 0x28
 80035bc:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80035c0:	f850 0c28 	ldr.w	r0, [r0, #-40]
 80035c4:	4282      	cmp	r2, r0
 80035c6:	d017      	beq.n	80035f8 <HAL_OSPIM_Config+0x168>
 80035c8:	686a      	ldr	r2, [r5, #4]
 80035ca:	eb08 0888 	add.w	r8, r8, r8, lsl #2
 80035ce:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 80035d2:	f858 4c24 	ldr.w	r4, [r8, #-36]
 80035d6:	42a2      	cmp	r2, r4
 80035d8:	d00e      	beq.n	80035f8 <HAL_OSPIM_Config+0x168>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80035da:	68ac      	ldr	r4, [r5, #8]
 80035dc:	f858 2c20 	ldr.w	r2, [r8, #-32]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 80035e0:	4294      	cmp	r4, r2
 80035e2:	d009      	beq.n	80035f8 <HAL_OSPIM_Config+0x168>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80035e4:	68ec      	ldr	r4, [r5, #12]
 80035e6:	f858 2c1c 	ldr.w	r2, [r8, #-28]
 80035ea:	4294      	cmp	r4, r2
 80035ec:	d004      	beq.n	80035f8 <HAL_OSPIM_Config+0x168>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 80035ee:	692c      	ldr	r4, [r5, #16]
 80035f0:	f858 2c18 	ldr.w	r2, [r8, #-24]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80035f4:	4294      	cmp	r4, r2
 80035f6:	d145      	bne.n	8003684 <HAL_OSPIM_Config+0x1f4>
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 80035f8:	3801      	subs	r0, #1
 80035fa:	0080      	lsls	r0, r0, #2
 80035fc:	4a5c      	ldr	r2, [pc, #368]	; (8003770 <HAL_OSPIM_Config+0x2e0>)
 80035fe:	4402      	add	r2, r0
 8003600:	6850      	ldr	r0, [r2, #4]
 8003602:	f020 0001 	bic.w	r0, r0, #1
 8003606:	6050      	str	r0, [r2, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8003608:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800360c:	a80a      	add	r0, sp, #40	; 0x28
 800360e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003612:	f852 2c24 	ldr.w	r2, [r2, #-36]
 8003616:	b13a      	cbz	r2, 8003628 <HAL_OSPIM_Config+0x198>
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8003618:	3a01      	subs	r2, #1
 800361a:	0092      	lsls	r2, r2, #2
 800361c:	4854      	ldr	r0, [pc, #336]	; (8003770 <HAL_OSPIM_Config+0x2e0>)
 800361e:	4410      	add	r0, r2
 8003620:	6842      	ldr	r2, [r0, #4]
 8003622:	f022 0210 	bic.w	r2, r2, #16
 8003626:	6042      	str	r2, [r0, #4]
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8003628:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 800362c:	aa0a      	add	r2, sp, #40	; 0x28
 800362e:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8003632:	f850 2c20 	ldr.w	r2, [r0, #-32]
 8003636:	3a01      	subs	r2, #1
 8003638:	0092      	lsls	r2, r2, #2
 800363a:	4c4d      	ldr	r4, [pc, #308]	; (8003770 <HAL_OSPIM_Config+0x2e0>)
 800363c:	4414      	add	r4, r2
 800363e:	6862      	ldr	r2, [r4, #4]
 8003640:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003644:	6062      	str	r2, [r4, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003646:	f850 2c1c 	ldr.w	r2, [r0, #-28]
 800364a:	b14a      	cbz	r2, 8003660 <HAL_OSPIM_Config+0x1d0>
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 800364c:	3a01      	subs	r2, #1
 800364e:	f002 0201 	and.w	r2, r2, #1
 8003652:	0092      	lsls	r2, r2, #2
 8003654:	4846      	ldr	r0, [pc, #280]	; (8003770 <HAL_OSPIM_Config+0x2e0>)
 8003656:	4410      	add	r0, r2
 8003658:	6842      	ldr	r2, [r0, #4]
 800365a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800365e:	6042      	str	r2, [r0, #4]
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003660:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003664:	aa0a      	add	r2, sp, #40	; 0x28
 8003666:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800366a:	f853 3c18 	ldr.w	r3, [r3, #-24]
 800366e:	b14b      	cbz	r3, 8003684 <HAL_OSPIM_Config+0x1f4>
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8003670:	3b01      	subs	r3, #1
 8003672:	f003 0301 	and.w	r3, r3, #1
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	4a3d      	ldr	r2, [pc, #244]	; (8003770 <HAL_OSPIM_Config+0x2e0>)
 800367a:	441a      	add	r2, r3
 800367c:	6853      	ldr	r3, [r2, #4]
 800367e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003682:	6053      	str	r3, [r2, #4]
        MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8003684:	68aa      	ldr	r2, [r5, #8]
 8003686:	3a01      	subs	r2, #1
 8003688:	4839      	ldr	r0, [pc, #228]	; (8003770 <HAL_OSPIM_Config+0x2e0>)
 800368a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800368e:	6853      	ldr	r3, [r2, #4]
 8003690:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003694:	ea43 2346 	orr.w	r3, r3, r6, lsl #9
 8003698:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800369c:	6053      	str	r3, [r2, #4]
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 800369e:	682b      	ldr	r3, [r5, #0]
 80036a0:	3b01      	subs	r3, #1
 80036a2:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 80036a6:	6853      	ldr	r3, [r2, #4]
 80036a8:	f023 0303 	bic.w	r3, r3, #3
 80036ac:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
 80036b0:	f043 0301 	orr.w	r3, r3, #1
 80036b4:	6053      	str	r3, [r2, #4]
      if (cfg->DQSPort != 0U)
 80036b6:	686b      	ldr	r3, [r5, #4]
 80036b8:	b15b      	cbz	r3, 80036d2 <HAL_OSPIM_Config+0x242>
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 80036ba:	3b01      	subs	r3, #1
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	4602      	mov	r2, r0
 80036c0:	441a      	add	r2, r3
 80036c2:	6853      	ldr	r3, [r2, #4]
 80036c4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80036c8:	ea43 1346 	orr.w	r3, r3, r6, lsl #5
 80036cc:	f043 0310 	orr.w	r3, r3, #16
 80036d0:	6053      	str	r3, [r2, #4]
      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80036d2:	68eb      	ldr	r3, [r5, #12]
 80036d4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80036d8:	d035      	beq.n	8003746 <HAL_OSPIM_Config+0x2b6>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 80036da:	3b01      	subs	r3, #1
 80036dc:	f003 0301 	and.w	r3, r3, #1
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	4a23      	ldr	r2, [pc, #140]	; (8003770 <HAL_OSPIM_Config+0x2e0>)
 80036e4:	441a      	add	r2, r3
 80036e6:	6853      	ldr	r3, [r2, #4]
 80036e8:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80036ec:	ea43 4386 	orr.w	r3, r3, r6, lsl #18
 80036f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036f4:	6053      	str	r3, [r2, #4]
      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80036f6:	692b      	ldr	r3, [r5, #16]
 80036f8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80036fc:	d03a      	beq.n	8003774 <HAL_OSPIM_Config+0x2e4>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 80036fe:	3b01      	subs	r3, #1
 8003700:	f003 0301 	and.w	r3, r3, #1
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	4a1a      	ldr	r2, [pc, #104]	; (8003770 <HAL_OSPIM_Config+0x2e0>)
 8003708:	441a      	add	r2, r3
 800370a:	6853      	ldr	r3, [r2, #4]
 800370c:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8003710:	ea43 4386 	orr.w	r3, r3, r6, lsl #18
 8003714:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8003718:	6053      	str	r3, [r2, #4]
    if ((ospi_enabled & 0x1U) != 0U)
 800371a:	f011 0f01 	tst.w	r1, #1
 800371e:	d004      	beq.n	800372a <HAL_OSPIM_Config+0x29a>
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8003720:	4a11      	ldr	r2, [pc, #68]	; (8003768 <HAL_OSPIM_Config+0x2d8>)
 8003722:	6813      	ldr	r3, [r2, #0]
 8003724:	f043 0301 	orr.w	r3, r3, #1
 8003728:	6013      	str	r3, [r2, #0]
    if ((ospi_enabled & 0x2U) != 0U)
 800372a:	f011 0f02 	tst.w	r1, #2
 800372e:	d004      	beq.n	800373a <HAL_OSPIM_Config+0x2aa>
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8003730:	4a0e      	ldr	r2, [pc, #56]	; (800376c <HAL_OSPIM_Config+0x2dc>)
 8003732:	6813      	ldr	r3, [r2, #0]
 8003734:	f043 0301 	orr.w	r3, r3, #1
 8003738:	6013      	str	r3, [r2, #0]
}
 800373a:	4638      	mov	r0, r7
 800373c:	b00b      	add	sp, #44	; 0x2c
 800373e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  uint8_t ospi_enabled = 0U;
 8003742:	4639      	mov	r1, r7
 8003744:	e6d9      	b.n	80034fa <HAL_OSPIM_Config+0x6a>
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003746:	2b00      	cmp	r3, #0
 8003748:	d0d5      	beq.n	80036f6 <HAL_OSPIM_Config+0x266>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 800374a:	3b01      	subs	r3, #1
 800374c:	f003 0301 	and.w	r3, r3, #1
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	4a07      	ldr	r2, [pc, #28]	; (8003770 <HAL_OSPIM_Config+0x2e0>)
 8003754:	441a      	add	r2, r3
 8003756:	6853      	ldr	r3, [r2, #4]
 8003758:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800375c:	ea43 6386 	orr.w	r3, r3, r6, lsl #26
 8003760:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003764:	6053      	str	r3, [r2, #4]
 8003766:	e7c6      	b.n	80036f6 <HAL_OSPIM_Config+0x266>
 8003768:	a0001000 	.word	0xa0001000
 800376c:	a0001400 	.word	0xa0001400
 8003770:	50061c00 	.word	0x50061c00
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003774:	2b00      	cmp	r3, #0
 8003776:	d0d0      	beq.n	800371a <HAL_OSPIM_Config+0x28a>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8003778:	3b01      	subs	r3, #1
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	4a05      	ldr	r2, [pc, #20]	; (8003798 <HAL_OSPIM_Config+0x308>)
 8003782:	441a      	add	r2, r3
 8003784:	6853      	ldr	r3, [r2, #4]
 8003786:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800378a:	ea43 6386 	orr.w	r3, r3, r6, lsl #26
 800378e:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8003792:	6053      	str	r3, [r2, #4]
 8003794:	e7c1      	b.n	800371a <HAL_OSPIM_Config+0x28a>
 8003796:	bf00      	nop
 8003798:	50061c00 	.word	0x50061c00

0800379c <HAL_PWREx_GetVoltageRange>:
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800379c:	4b07      	ldr	r3, [pc, #28]	; (80037bc <HAL_PWREx_GetVoltageRange+0x20>)
 800379e:	6818      	ldr	r0, [r3, #0]
 80037a0:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80037a4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80037a8:	d004      	beq.n	80037b4 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80037aa:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 80037ae:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 80037b2:	d100      	bne.n	80037b6 <HAL_PWREx_GetVoltageRange+0x1a>
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80037b4:	4770      	bx	lr
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80037b6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80037ba:	e7fb      	b.n	80037b4 <HAL_PWREx_GetVoltageRange+0x18>
 80037bc:	40007000 	.word	0x40007000

080037c0 <HAL_PWREx_ControlVoltageScaling>:
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80037c0:	2800      	cmp	r0, #0
 80037c2:	d136      	bne.n	8003832 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80037c4:	4b3e      	ldr	r3, [pc, #248]	; (80038c0 <HAL_PWREx_ControlVoltageScaling+0x100>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80037cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037d0:	d008      	beq.n	80037e4 <HAL_PWREx_ControlVoltageScaling+0x24>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80037d2:	4a3b      	ldr	r2, [pc, #236]	; (80038c0 <HAL_PWREx_ControlVoltageScaling+0x100>)
 80037d4:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80037d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80037e0:	2000      	movs	r0, #0
 80037e2:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80037e4:	4a36      	ldr	r2, [pc, #216]	; (80038c0 <HAL_PWREx_ControlVoltageScaling+0x100>)
 80037e6:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80037ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037ee:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80037f2:	6813      	ldr	r3, [r2, #0]
 80037f4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80037f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037fc:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80037fe:	4b31      	ldr	r3, [pc, #196]	; (80038c4 <HAL_PWREx_ControlVoltageScaling+0x104>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2232      	movs	r2, #50	; 0x32
 8003804:	fb02 f303 	mul.w	r3, r2, r3
 8003808:	4a2f      	ldr	r2, [pc, #188]	; (80038c8 <HAL_PWREx_ControlVoltageScaling+0x108>)
 800380a:	fba2 2303 	umull	r2, r3, r2, r3
 800380e:	0c9b      	lsrs	r3, r3, #18
 8003810:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003812:	e000      	b.n	8003816 <HAL_PWREx_ControlVoltageScaling+0x56>
        wait_loop_index--;
 8003814:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003816:	4a2a      	ldr	r2, [pc, #168]	; (80038c0 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8003818:	6952      	ldr	r2, [r2, #20]
 800381a:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800381e:	d001      	beq.n	8003824 <HAL_PWREx_ControlVoltageScaling+0x64>
 8003820:	2b00      	cmp	r3, #0
 8003822:	d1f7      	bne.n	8003814 <HAL_PWREx_ControlVoltageScaling+0x54>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003824:	4b26      	ldr	r3, [pc, #152]	; (80038c0 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8003826:	695b      	ldr	r3, [r3, #20]
 8003828:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800382c:	d144      	bne.n	80038b8 <HAL_PWREx_ControlVoltageScaling+0xf8>
  return HAL_OK;
 800382e:	2000      	movs	r0, #0
 8003830:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003832:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8003836:	d008      	beq.n	800384a <HAL_PWREx_ControlVoltageScaling+0x8a>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003838:	4a21      	ldr	r2, [pc, #132]	; (80038c0 <HAL_PWREx_ControlVoltageScaling+0x100>)
 800383a:	6813      	ldr	r3, [r2, #0]
 800383c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003840:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003844:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8003846:	2000      	movs	r0, #0
 8003848:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800384a:	4b1d      	ldr	r3, [pc, #116]	; (80038c0 <HAL_PWREx_ControlVoltageScaling+0x100>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003852:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003856:	d008      	beq.n	800386a <HAL_PWREx_ControlVoltageScaling+0xaa>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003858:	4a19      	ldr	r2, [pc, #100]	; (80038c0 <HAL_PWREx_ControlVoltageScaling+0x100>)
 800385a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 800385e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003862:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  return HAL_OK;
 8003866:	2000      	movs	r0, #0
 8003868:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800386a:	4a15      	ldr	r2, [pc, #84]	; (80038c0 <HAL_PWREx_ControlVoltageScaling+0x100>)
 800386c:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8003870:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003874:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003878:	6813      	ldr	r3, [r2, #0]
 800387a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800387e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003882:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003884:	4b0f      	ldr	r3, [pc, #60]	; (80038c4 <HAL_PWREx_ControlVoltageScaling+0x104>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2232      	movs	r2, #50	; 0x32
 800388a:	fb02 f303 	mul.w	r3, r2, r3
 800388e:	4a0e      	ldr	r2, [pc, #56]	; (80038c8 <HAL_PWREx_ControlVoltageScaling+0x108>)
 8003890:	fba2 2303 	umull	r2, r3, r2, r3
 8003894:	0c9b      	lsrs	r3, r3, #18
 8003896:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003898:	e000      	b.n	800389c <HAL_PWREx_ControlVoltageScaling+0xdc>
        wait_loop_index--;
 800389a:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800389c:	4a08      	ldr	r2, [pc, #32]	; (80038c0 <HAL_PWREx_ControlVoltageScaling+0x100>)
 800389e:	6952      	ldr	r2, [r2, #20]
 80038a0:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80038a4:	d001      	beq.n	80038aa <HAL_PWREx_ControlVoltageScaling+0xea>
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d1f7      	bne.n	800389a <HAL_PWREx_ControlVoltageScaling+0xda>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80038aa:	4b05      	ldr	r3, [pc, #20]	; (80038c0 <HAL_PWREx_ControlVoltageScaling+0x100>)
 80038ac:	695b      	ldr	r3, [r3, #20]
 80038ae:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80038b2:	d103      	bne.n	80038bc <HAL_PWREx_ControlVoltageScaling+0xfc>
  return HAL_OK;
 80038b4:	2000      	movs	r0, #0
 80038b6:	4770      	bx	lr
        return HAL_TIMEOUT;
 80038b8:	2003      	movs	r0, #3
 80038ba:	4770      	bx	lr
        return HAL_TIMEOUT;
 80038bc:	2003      	movs	r0, #3
}
 80038be:	4770      	bx	lr
 80038c0:	40007000 	.word	0x40007000
 80038c4:	20000000 	.word	0x20000000
 80038c8:	431bde83 	.word	0x431bde83

080038cc <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80038cc:	4a02      	ldr	r2, [pc, #8]	; (80038d8 <HAL_PWREx_EnableVddUSB+0xc>)
 80038ce:	6853      	ldr	r3, [r2, #4]
 80038d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038d4:	6053      	str	r3, [r2, #4]
}
 80038d6:	4770      	bx	lr
 80038d8:	40007000 	.word	0x40007000

080038dc <RCC_GetSysClockFreqFromPLLSource>:
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80038dc:	4b1a      	ldr	r3, [pc, #104]	; (8003948 <RCC_GetSysClockFreqFromPLLSource+0x6c>)
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	f003 0303 	and.w	r3, r3, #3

  switch (pllsource)
 80038e4:	2b02      	cmp	r3, #2
 80038e6:	d02b      	beq.n	8003940 <RCC_GetSysClockFreqFromPLLSource+0x64>
 80038e8:	2b03      	cmp	r3, #3
 80038ea:	d02b      	beq.n	8003944 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d014      	beq.n	800391a <RCC_GetSysClockFreqFromPLLSource+0x3e>
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
    break;
  default:
    /* unexpected */
    pllvco = 0;
 80038f0:	2100      	movs	r1, #0
    break;
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80038f2:	4a15      	ldr	r2, [pc, #84]	; (8003948 <RCC_GetSysClockFreqFromPLLSource+0x6c>)
 80038f4:	68d3      	ldr	r3, [r2, #12]
 80038f6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80038fa:	3301      	adds	r3, #1
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80038fc:	68d0      	ldr	r0, [r2, #12]
 80038fe:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8003902:	fb01 f000 	mul.w	r0, r1, r0
 8003906:	fbb0 f0f3 	udiv	r0, r0, r3
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800390a:	68d3      	ldr	r3, [r2, #12]
 800390c:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8003910:	3301      	adds	r3, #1
 8003912:	005b      	lsls	r3, r3, #1
  sysclockfreq = pllvco / pllr;

  return sysclockfreq;
}
 8003914:	fbb0 f0f3 	udiv	r0, r0, r3
 8003918:	4770      	bx	lr
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800391a:	4b0b      	ldr	r3, [pc, #44]	; (8003948 <RCC_GetSysClockFreqFromPLLSource+0x6c>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f013 0f08 	tst.w	r3, #8
 8003922:	d108      	bne.n	8003936 <RCC_GetSysClockFreqFromPLLSource+0x5a>
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003924:	4b08      	ldr	r3, [pc, #32]	; (8003948 <RCC_GetSysClockFreqFromPLLSource+0x6c>)
 8003926:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800392a:	f3c3 2303 	ubfx	r3, r3, #8, #4
    pllvco = MSIRangeTable[msirange];
 800392e:	4a07      	ldr	r2, [pc, #28]	; (800394c <RCC_GetSysClockFreqFromPLLSource+0x70>)
 8003930:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    break;
 8003934:	e7dd      	b.n	80038f2 <RCC_GetSysClockFreqFromPLLSource+0x16>
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003936:	4b04      	ldr	r3, [pc, #16]	; (8003948 <RCC_GetSysClockFreqFromPLLSource+0x6c>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800393e:	e7f6      	b.n	800392e <RCC_GetSysClockFreqFromPLLSource+0x52>
  switch (pllsource)
 8003940:	4903      	ldr	r1, [pc, #12]	; (8003950 <RCC_GetSysClockFreqFromPLLSource+0x74>)
 8003942:	e7d6      	b.n	80038f2 <RCC_GetSysClockFreqFromPLLSource+0x16>
    pllvco = HSE_VALUE;
 8003944:	4903      	ldr	r1, [pc, #12]	; (8003954 <RCC_GetSysClockFreqFromPLLSource+0x78>)
 8003946:	e7d4      	b.n	80038f2 <RCC_GetSysClockFreqFromPLLSource+0x16>
 8003948:	40021000 	.word	0x40021000
 800394c:	08009790 	.word	0x08009790
 8003950:	00f42400 	.word	0x00f42400
 8003954:	007a1200 	.word	0x007a1200

08003958 <RCC_SetFlashLatencyFromMSIRange>:
{
 8003958:	b530      	push	{r4, r5, lr}
 800395a:	b083      	sub	sp, #12
 800395c:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800395e:	4b1f      	ldr	r3, [pc, #124]	; (80039dc <RCC_SetFlashLatencyFromMSIRange+0x84>)
 8003960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003962:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003966:	d00a      	beq.n	800397e <RCC_SetFlashLatencyFromMSIRange+0x26>
    vos = HAL_PWREx_GetVoltageRange();
 8003968:	f7ff ff18 	bl	800379c <HAL_PWREx_GetVoltageRange>
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800396c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8003970:	d016      	beq.n	80039a0 <RCC_SetFlashLatencyFromMSIRange+0x48>
    if(msirange >= RCC_MSIRANGE_8)
 8003972:	2c7f      	cmp	r4, #127	; 0x7f
 8003974:	d81e      	bhi.n	80039b4 <RCC_SetFlashLatencyFromMSIRange+0x5c>
      if(msirange == RCC_MSIRANGE_7)
 8003976:	2c70      	cmp	r4, #112	; 0x70
 8003978:	d02b      	beq.n	80039d2 <RCC_SetFlashLatencyFromMSIRange+0x7a>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800397a:	2100      	movs	r1, #0
 800397c:	e01b      	b.n	80039b6 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    __HAL_RCC_PWR_CLK_ENABLE();
 800397e:	4d17      	ldr	r5, [pc, #92]	; (80039dc <RCC_SetFlashLatencyFromMSIRange+0x84>)
 8003980:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003982:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003986:	65ab      	str	r3, [r5, #88]	; 0x58
 8003988:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800398a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800398e:	9301      	str	r3, [sp, #4]
 8003990:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8003992:	f7ff ff03 	bl	800379c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8003996:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003998:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800399c:	65ab      	str	r3, [r5, #88]	; 0x58
 800399e:	e7e5      	b.n	800396c <RCC_SetFlashLatencyFromMSIRange+0x14>
    if(msirange > RCC_MSIRANGE_8)
 80039a0:	2c80      	cmp	r4, #128	; 0x80
 80039a2:	d903      	bls.n	80039ac <RCC_SetFlashLatencyFromMSIRange+0x54>
      if(msirange > RCC_MSIRANGE_10)
 80039a4:	2ca0      	cmp	r4, #160	; 0xa0
 80039a6:	d903      	bls.n	80039b0 <RCC_SetFlashLatencyFromMSIRange+0x58>
        latency = FLASH_LATENCY_2; /* 2WS */
 80039a8:	2102      	movs	r1, #2
 80039aa:	e004      	b.n	80039b6 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80039ac:	2100      	movs	r1, #0
 80039ae:	e002      	b.n	80039b6 <RCC_SetFlashLatencyFromMSIRange+0x5e>
        latency = FLASH_LATENCY_1; /* 1WS */
 80039b0:	2101      	movs	r1, #1
 80039b2:	e000      	b.n	80039b6 <RCC_SetFlashLatencyFromMSIRange+0x5e>
      latency = FLASH_LATENCY_2; /* 2WS */
 80039b4:	2102      	movs	r1, #2
  __HAL_FLASH_SET_LATENCY(latency);
 80039b6:	4a0a      	ldr	r2, [pc, #40]	; (80039e0 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 80039b8:	6813      	ldr	r3, [r2, #0]
 80039ba:	f023 030f 	bic.w	r3, r3, #15
 80039be:	430b      	orrs	r3, r1
 80039c0:	6013      	str	r3, [r2, #0]
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80039c2:	6813      	ldr	r3, [r2, #0]
 80039c4:	f003 030f 	and.w	r3, r3, #15
 80039c8:	428b      	cmp	r3, r1
 80039ca:	d104      	bne.n	80039d6 <RCC_SetFlashLatencyFromMSIRange+0x7e>
  return HAL_OK;
 80039cc:	2000      	movs	r0, #0
}
 80039ce:	b003      	add	sp, #12
 80039d0:	bd30      	pop	{r4, r5, pc}
        latency = FLASH_LATENCY_1; /* 1WS */
 80039d2:	2101      	movs	r1, #1
 80039d4:	e7ef      	b.n	80039b6 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    return HAL_ERROR;
 80039d6:	2001      	movs	r0, #1
 80039d8:	e7f9      	b.n	80039ce <RCC_SetFlashLatencyFromMSIRange+0x76>
 80039da:	bf00      	nop
 80039dc:	40021000 	.word	0x40021000
 80039e0:	40022000 	.word	0x40022000

080039e4 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039e4:	4a28      	ldr	r2, [pc, #160]	; (8003a88 <HAL_RCC_GetSysClockFreq+0xa4>)
 80039e6:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039e8:	68d2      	ldr	r2, [r2, #12]
 80039ea:	f002 0203 	and.w	r2, r2, #3
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80039ee:	f013 030c 	ands.w	r3, r3, #12
 80039f2:	d00a      	beq.n	8003a0a <HAL_RCC_GetSysClockFreq+0x26>
 80039f4:	2b0c      	cmp	r3, #12
 80039f6:	d006      	beq.n	8003a06 <HAL_RCC_GetSysClockFreq+0x22>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80039f8:	2b04      	cmp	r3, #4
 80039fa:	d01f      	beq.n	8003a3c <HAL_RCC_GetSysClockFreq+0x58>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80039fc:	2b08      	cmp	r3, #8
 80039fe:	d020      	beq.n	8003a42 <HAL_RCC_GetSysClockFreq+0x5e>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003a00:	2000      	movs	r0, #0
 8003a02:	4602      	mov	r2, r0
 8003a04:	e010      	b.n	8003a28 <HAL_RCC_GetSysClockFreq+0x44>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003a06:	2a01      	cmp	r2, #1
 8003a08:	d1f6      	bne.n	80039f8 <HAL_RCC_GetSysClockFreq+0x14>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003a0a:	4a1f      	ldr	r2, [pc, #124]	; (8003a88 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003a0c:	6812      	ldr	r2, [r2, #0]
 8003a0e:	f012 0f08 	tst.w	r2, #8
 8003a12:	d10c      	bne.n	8003a2e <HAL_RCC_GetSysClockFreq+0x4a>
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003a14:	4a1c      	ldr	r2, [pc, #112]	; (8003a88 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003a16:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 8003a1a:	f3c2 2203 	ubfx	r2, r2, #8, #4
    msirange = MSIRangeTable[msirange];
 8003a1e:	491b      	ldr	r1, [pc, #108]	; (8003a8c <HAL_RCC_GetSysClockFreq+0xa8>)
 8003a20:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a24:	b143      	cbz	r3, 8003a38 <HAL_RCC_GetSysClockFreq+0x54>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003a26:	2000      	movs	r0, #0
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003a28:	2b0c      	cmp	r3, #12
 8003a2a:	d00d      	beq.n	8003a48 <HAL_RCC_GetSysClockFreq+0x64>
}
 8003a2c:	4770      	bx	lr
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003a2e:	4a16      	ldr	r2, [pc, #88]	; (8003a88 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003a30:	6812      	ldr	r2, [r2, #0]
 8003a32:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8003a36:	e7f2      	b.n	8003a1e <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = msirange;
 8003a38:	4610      	mov	r0, r2
 8003a3a:	e7f5      	b.n	8003a28 <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSI_VALUE;
 8003a3c:	4814      	ldr	r0, [pc, #80]	; (8003a90 <HAL_RCC_GetSysClockFreq+0xac>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003a3e:	2200      	movs	r2, #0
 8003a40:	e7f2      	b.n	8003a28 <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSE_VALUE;
 8003a42:	4814      	ldr	r0, [pc, #80]	; (8003a94 <HAL_RCC_GetSysClockFreq+0xb0>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003a44:	2200      	movs	r2, #0
 8003a46:	e7ef      	b.n	8003a28 <HAL_RCC_GetSysClockFreq+0x44>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a48:	4b0f      	ldr	r3, [pc, #60]	; (8003a88 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d016      	beq.n	8003a82 <HAL_RCC_GetSysClockFreq+0x9e>
 8003a54:	2b03      	cmp	r3, #3
 8003a56:	d100      	bne.n	8003a5a <HAL_RCC_GetSysClockFreq+0x76>
      pllvco = HSE_VALUE;
 8003a58:	4a0e      	ldr	r2, [pc, #56]	; (8003a94 <HAL_RCC_GetSysClockFreq+0xb0>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a5a:	490b      	ldr	r1, [pc, #44]	; (8003a88 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003a5c:	68cb      	ldr	r3, [r1, #12]
 8003a5e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003a62:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003a64:	68c8      	ldr	r0, [r1, #12]
 8003a66:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8003a6a:	fb02 f000 	mul.w	r0, r2, r0
 8003a6e:	fbb0 f0f3 	udiv	r0, r0, r3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a72:	68cb      	ldr	r3, [r1, #12]
 8003a74:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8003a78:	3301      	adds	r3, #1
 8003a7a:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco / pllr;
 8003a7c:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8003a80:	e7d4      	b.n	8003a2c <HAL_RCC_GetSysClockFreq+0x48>
    switch (pllsource)
 8003a82:	4a03      	ldr	r2, [pc, #12]	; (8003a90 <HAL_RCC_GetSysClockFreq+0xac>)
 8003a84:	e7e9      	b.n	8003a5a <HAL_RCC_GetSysClockFreq+0x76>
 8003a86:	bf00      	nop
 8003a88:	40021000 	.word	0x40021000
 8003a8c:	08009790 	.word	0x08009790
 8003a90:	00f42400 	.word	0x00f42400
 8003a94:	007a1200 	.word	0x007a1200

08003a98 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8003a98:	2800      	cmp	r0, #0
 8003a9a:	f000 8322 	beq.w	80040e2 <HAL_RCC_OscConfig+0x64a>
{
 8003a9e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003aa0:	b083      	sub	sp, #12
 8003aa2:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003aa4:	4b96      	ldr	r3, [pc, #600]	; (8003d00 <HAL_RCC_OscConfig+0x268>)
 8003aa6:	689d      	ldr	r5, [r3, #8]
 8003aa8:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003aac:	68de      	ldr	r6, [r3, #12]
 8003aae:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003ab2:	6803      	ldr	r3, [r0, #0]
 8003ab4:	f013 0f10 	tst.w	r3, #16
 8003ab8:	d05a      	beq.n	8003b70 <HAL_RCC_OscConfig+0xd8>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003aba:	b1e5      	cbz	r5, 8003af6 <HAL_RCC_OscConfig+0x5e>
 8003abc:	2d0c      	cmp	r5, #12
 8003abe:	d018      	beq.n	8003af2 <HAL_RCC_OscConfig+0x5a>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003ac0:	69a3      	ldr	r3, [r4, #24]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	f000 80bb 	beq.w	8003c3e <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_MSI_ENABLE();
 8003ac8:	4a8d      	ldr	r2, [pc, #564]	; (8003d00 <HAL_RCC_OscConfig+0x268>)
 8003aca:	6813      	ldr	r3, [r2, #0]
 8003acc:	f043 0301 	orr.w	r3, r3, #1
 8003ad0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003ad2:	f7fd ff53 	bl	800197c <HAL_GetTick>
 8003ad6:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ad8:	4b89      	ldr	r3, [pc, #548]	; (8003d00 <HAL_RCC_OscConfig+0x268>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f013 0f02 	tst.w	r3, #2
 8003ae0:	f040 809a 	bne.w	8003c18 <HAL_RCC_OscConfig+0x180>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ae4:	f7fd ff4a 	bl	800197c <HAL_GetTick>
 8003ae8:	1bc0      	subs	r0, r0, r7
 8003aea:	2802      	cmp	r0, #2
 8003aec:	d9f4      	bls.n	8003ad8 <HAL_RCC_OscConfig+0x40>
            return HAL_TIMEOUT;
 8003aee:	2003      	movs	r0, #3
 8003af0:	e302      	b.n	80040f8 <HAL_RCC_OscConfig+0x660>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003af2:	2e01      	cmp	r6, #1
 8003af4:	d1e4      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x28>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003af6:	4b82      	ldr	r3, [pc, #520]	; (8003d00 <HAL_RCC_OscConfig+0x268>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f013 0f02 	tst.w	r3, #2
 8003afe:	d003      	beq.n	8003b08 <HAL_RCC_OscConfig+0x70>
 8003b00:	69a3      	ldr	r3, [r4, #24]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	f000 82ef 	beq.w	80040e6 <HAL_RCC_OscConfig+0x64e>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003b08:	6a20      	ldr	r0, [r4, #32]
 8003b0a:	4b7d      	ldr	r3, [pc, #500]	; (8003d00 <HAL_RCC_OscConfig+0x268>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f013 0f08 	tst.w	r3, #8
 8003b12:	d05b      	beq.n	8003bcc <HAL_RCC_OscConfig+0x134>
 8003b14:	4b7a      	ldr	r3, [pc, #488]	; (8003d00 <HAL_RCC_OscConfig+0x268>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b1c:	4298      	cmp	r0, r3
 8003b1e:	d85c      	bhi.n	8003bda <HAL_RCC_OscConfig+0x142>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b20:	4b77      	ldr	r3, [pc, #476]	; (8003d00 <HAL_RCC_OscConfig+0x268>)
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	f042 0208 	orr.w	r2, r2, #8
 8003b28:	601a      	str	r2, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003b30:	6a21      	ldr	r1, [r4, #32]
 8003b32:	430a      	orrs	r2, r1
 8003b34:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b36:	685a      	ldr	r2, [r3, #4]
 8003b38:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003b3c:	69e1      	ldr	r1, [r4, #28]
 8003b3e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003b42:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b44:	2d00      	cmp	r5, #0
 8003b46:	d060      	beq.n	8003c0a <HAL_RCC_OscConfig+0x172>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b48:	f7ff ff4c 	bl	80039e4 <HAL_RCC_GetSysClockFreq>
 8003b4c:	4b6c      	ldr	r3, [pc, #432]	; (8003d00 <HAL_RCC_OscConfig+0x268>)
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003b54:	4a6b      	ldr	r2, [pc, #428]	; (8003d04 <HAL_RCC_OscConfig+0x26c>)
 8003b56:	5cd3      	ldrb	r3, [r2, r3]
 8003b58:	f003 031f 	and.w	r3, r3, #31
 8003b5c:	40d8      	lsrs	r0, r3
 8003b5e:	4b6a      	ldr	r3, [pc, #424]	; (8003d08 <HAL_RCC_OscConfig+0x270>)
 8003b60:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8003b62:	4b6a      	ldr	r3, [pc, #424]	; (8003d0c <HAL_RCC_OscConfig+0x274>)
 8003b64:	6818      	ldr	r0, [r3, #0]
 8003b66:	f7fd fec5 	bl	80018f4 <HAL_InitTick>
        if(status != HAL_OK)
 8003b6a:	2800      	cmp	r0, #0
 8003b6c:	f040 82c4 	bne.w	80040f8 <HAL_RCC_OscConfig+0x660>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b70:	6823      	ldr	r3, [r4, #0]
 8003b72:	f013 0f01 	tst.w	r3, #1
 8003b76:	f000 8081 	beq.w	8003c7c <HAL_RCC_OscConfig+0x1e4>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003b7a:	2d08      	cmp	r5, #8
 8003b7c:	d075      	beq.n	8003c6a <HAL_RCC_OscConfig+0x1d2>
 8003b7e:	2d0c      	cmp	r5, #12
 8003b80:	d071      	beq.n	8003c66 <HAL_RCC_OscConfig+0x1ce>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b82:	6863      	ldr	r3, [r4, #4]
 8003b84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b88:	f000 8097 	beq.w	8003cba <HAL_RCC_OscConfig+0x222>
 8003b8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b90:	f000 8099 	beq.w	8003cc6 <HAL_RCC_OscConfig+0x22e>
 8003b94:	4b5a      	ldr	r3, [pc, #360]	; (8003d00 <HAL_RCC_OscConfig+0x268>)
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003b9c:	601a      	str	r2, [r3, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003ba4:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ba6:	6863      	ldr	r3, [r4, #4]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	f000 8099 	beq.w	8003ce0 <HAL_RCC_OscConfig+0x248>
        tickstart = HAL_GetTick();
 8003bae:	f7fd fee5 	bl	800197c <HAL_GetTick>
 8003bb2:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bb4:	4b52      	ldr	r3, [pc, #328]	; (8003d00 <HAL_RCC_OscConfig+0x268>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003bbc:	d15e      	bne.n	8003c7c <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bbe:	f7fd fedd 	bl	800197c <HAL_GetTick>
 8003bc2:	1bc0      	subs	r0, r0, r7
 8003bc4:	2864      	cmp	r0, #100	; 0x64
 8003bc6:	d9f5      	bls.n	8003bb4 <HAL_RCC_OscConfig+0x11c>
            return HAL_TIMEOUT;
 8003bc8:	2003      	movs	r0, #3
 8003bca:	e295      	b.n	80040f8 <HAL_RCC_OscConfig+0x660>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003bcc:	4b4c      	ldr	r3, [pc, #304]	; (8003d00 <HAL_RCC_OscConfig+0x268>)
 8003bce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bd2:	091b      	lsrs	r3, r3, #4
 8003bd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bd8:	e7a0      	b.n	8003b1c <HAL_RCC_OscConfig+0x84>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003bda:	f7ff febd 	bl	8003958 <RCC_SetFlashLatencyFromMSIRange>
 8003bde:	2800      	cmp	r0, #0
 8003be0:	f040 8283 	bne.w	80040ea <HAL_RCC_OscConfig+0x652>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003be4:	4b46      	ldr	r3, [pc, #280]	; (8003d00 <HAL_RCC_OscConfig+0x268>)
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	f042 0208 	orr.w	r2, r2, #8
 8003bec:	601a      	str	r2, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003bf4:	6a21      	ldr	r1, [r4, #32]
 8003bf6:	430a      	orrs	r2, r1
 8003bf8:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003bfa:	685a      	ldr	r2, [r3, #4]
 8003bfc:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003c00:	69e1      	ldr	r1, [r4, #28]
 8003c02:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003c06:	605a      	str	r2, [r3, #4]
 8003c08:	e79e      	b.n	8003b48 <HAL_RCC_OscConfig+0xb0>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c0a:	6a20      	ldr	r0, [r4, #32]
 8003c0c:	f7ff fea4 	bl	8003958 <RCC_SetFlashLatencyFromMSIRange>
 8003c10:	2800      	cmp	r0, #0
 8003c12:	d099      	beq.n	8003b48 <HAL_RCC_OscConfig+0xb0>
              return HAL_ERROR;
 8003c14:	2001      	movs	r0, #1
 8003c16:	e26f      	b.n	80040f8 <HAL_RCC_OscConfig+0x660>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c18:	4b39      	ldr	r3, [pc, #228]	; (8003d00 <HAL_RCC_OscConfig+0x268>)
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	f042 0208 	orr.w	r2, r2, #8
 8003c20:	601a      	str	r2, [r3, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003c28:	6a21      	ldr	r1, [r4, #32]
 8003c2a:	430a      	orrs	r2, r1
 8003c2c:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c2e:	685a      	ldr	r2, [r3, #4]
 8003c30:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003c34:	69e1      	ldr	r1, [r4, #28]
 8003c36:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003c3a:	605a      	str	r2, [r3, #4]
 8003c3c:	e798      	b.n	8003b70 <HAL_RCC_OscConfig+0xd8>
        __HAL_RCC_MSI_DISABLE();
 8003c3e:	4a30      	ldr	r2, [pc, #192]	; (8003d00 <HAL_RCC_OscConfig+0x268>)
 8003c40:	6813      	ldr	r3, [r2, #0]
 8003c42:	f023 0301 	bic.w	r3, r3, #1
 8003c46:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003c48:	f7fd fe98 	bl	800197c <HAL_GetTick>
 8003c4c:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003c4e:	4b2c      	ldr	r3, [pc, #176]	; (8003d00 <HAL_RCC_OscConfig+0x268>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f013 0f02 	tst.w	r3, #2
 8003c56:	d08b      	beq.n	8003b70 <HAL_RCC_OscConfig+0xd8>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c58:	f7fd fe90 	bl	800197c <HAL_GetTick>
 8003c5c:	1bc0      	subs	r0, r0, r7
 8003c5e:	2802      	cmp	r0, #2
 8003c60:	d9f5      	bls.n	8003c4e <HAL_RCC_OscConfig+0x1b6>
            return HAL_TIMEOUT;
 8003c62:	2003      	movs	r0, #3
 8003c64:	e248      	b.n	80040f8 <HAL_RCC_OscConfig+0x660>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003c66:	2e03      	cmp	r6, #3
 8003c68:	d18b      	bne.n	8003b82 <HAL_RCC_OscConfig+0xea>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c6a:	4b25      	ldr	r3, [pc, #148]	; (8003d00 <HAL_RCC_OscConfig+0x268>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003c72:	d003      	beq.n	8003c7c <HAL_RCC_OscConfig+0x1e4>
 8003c74:	6863      	ldr	r3, [r4, #4]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	f000 8239 	beq.w	80040ee <HAL_RCC_OscConfig+0x656>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c7c:	6823      	ldr	r3, [r4, #0]
 8003c7e:	f013 0f02 	tst.w	r3, #2
 8003c82:	d058      	beq.n	8003d36 <HAL_RCC_OscConfig+0x29e>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003c84:	2d04      	cmp	r5, #4
 8003c86:	d045      	beq.n	8003d14 <HAL_RCC_OscConfig+0x27c>
 8003c88:	2d0c      	cmp	r5, #12
 8003c8a:	d041      	beq.n	8003d10 <HAL_RCC_OscConfig+0x278>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c8c:	68e3      	ldr	r3, [r4, #12]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d077      	beq.n	8003d82 <HAL_RCC_OscConfig+0x2ea>
        __HAL_RCC_HSI_ENABLE();
 8003c92:	4a1b      	ldr	r2, [pc, #108]	; (8003d00 <HAL_RCC_OscConfig+0x268>)
 8003c94:	6813      	ldr	r3, [r2, #0]
 8003c96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c9a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003c9c:	f7fd fe6e 	bl	800197c <HAL_GetTick>
 8003ca0:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ca2:	4b17      	ldr	r3, [pc, #92]	; (8003d00 <HAL_RCC_OscConfig+0x268>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003caa:	d161      	bne.n	8003d70 <HAL_RCC_OscConfig+0x2d8>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cac:	f7fd fe66 	bl	800197c <HAL_GetTick>
 8003cb0:	1b80      	subs	r0, r0, r6
 8003cb2:	2802      	cmp	r0, #2
 8003cb4:	d9f5      	bls.n	8003ca2 <HAL_RCC_OscConfig+0x20a>
            return HAL_TIMEOUT;
 8003cb6:	2003      	movs	r0, #3
 8003cb8:	e21e      	b.n	80040f8 <HAL_RCC_OscConfig+0x660>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cba:	4a11      	ldr	r2, [pc, #68]	; (8003d00 <HAL_RCC_OscConfig+0x268>)
 8003cbc:	6813      	ldr	r3, [r2, #0]
 8003cbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cc2:	6013      	str	r3, [r2, #0]
 8003cc4:	e76f      	b.n	8003ba6 <HAL_RCC_OscConfig+0x10e>
 8003cc6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003cca:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003cd4:	601a      	str	r2, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003cdc:	601a      	str	r2, [r3, #0]
 8003cde:	e762      	b.n	8003ba6 <HAL_RCC_OscConfig+0x10e>
        tickstart = HAL_GetTick();
 8003ce0:	f7fd fe4c 	bl	800197c <HAL_GetTick>
 8003ce4:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ce6:	4b06      	ldr	r3, [pc, #24]	; (8003d00 <HAL_RCC_OscConfig+0x268>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003cee:	d0c5      	beq.n	8003c7c <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cf0:	f7fd fe44 	bl	800197c <HAL_GetTick>
 8003cf4:	1bc0      	subs	r0, r0, r7
 8003cf6:	2864      	cmp	r0, #100	; 0x64
 8003cf8:	d9f5      	bls.n	8003ce6 <HAL_RCC_OscConfig+0x24e>
            return HAL_TIMEOUT;
 8003cfa:	2003      	movs	r0, #3
 8003cfc:	e1fc      	b.n	80040f8 <HAL_RCC_OscConfig+0x660>
 8003cfe:	bf00      	nop
 8003d00:	40021000 	.word	0x40021000
 8003d04:	08009778 	.word	0x08009778
 8003d08:	20000000 	.word	0x20000000
 8003d0c:	20000008 	.word	0x20000008
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003d10:	2e02      	cmp	r6, #2
 8003d12:	d1bb      	bne.n	8003c8c <HAL_RCC_OscConfig+0x1f4>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d14:	4ba7      	ldr	r3, [pc, #668]	; (8003fb4 <HAL_RCC_OscConfig+0x51c>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003d1c:	d003      	beq.n	8003d26 <HAL_RCC_OscConfig+0x28e>
 8003d1e:	68e3      	ldr	r3, [r4, #12]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	f000 81e6 	beq.w	80040f2 <HAL_RCC_OscConfig+0x65a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d26:	4aa3      	ldr	r2, [pc, #652]	; (8003fb4 <HAL_RCC_OscConfig+0x51c>)
 8003d28:	6853      	ldr	r3, [r2, #4]
 8003d2a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003d2e:	6921      	ldr	r1, [r4, #16]
 8003d30:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003d34:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d36:	6823      	ldr	r3, [r4, #0]
 8003d38:	f013 0f08 	tst.w	r3, #8
 8003d3c:	d04c      	beq.n	8003dd8 <HAL_RCC_OscConfig+0x340>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d3e:	6963      	ldr	r3, [r4, #20]
 8003d40:	b39b      	cbz	r3, 8003daa <HAL_RCC_OscConfig+0x312>
      __HAL_RCC_LSI_ENABLE();
 8003d42:	4a9c      	ldr	r2, [pc, #624]	; (8003fb4 <HAL_RCC_OscConfig+0x51c>)
 8003d44:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8003d48:	f043 0301 	orr.w	r3, r3, #1
 8003d4c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8003d50:	f7fd fe14 	bl	800197c <HAL_GetTick>
 8003d54:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d56:	4b97      	ldr	r3, [pc, #604]	; (8003fb4 <HAL_RCC_OscConfig+0x51c>)
 8003d58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d5c:	f013 0f02 	tst.w	r3, #2
 8003d60:	d13a      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x340>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d62:	f7fd fe0b 	bl	800197c <HAL_GetTick>
 8003d66:	1b80      	subs	r0, r0, r6
 8003d68:	2802      	cmp	r0, #2
 8003d6a:	d9f4      	bls.n	8003d56 <HAL_RCC_OscConfig+0x2be>
          return HAL_TIMEOUT;
 8003d6c:	2003      	movs	r0, #3
 8003d6e:	e1c3      	b.n	80040f8 <HAL_RCC_OscConfig+0x660>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d70:	4a90      	ldr	r2, [pc, #576]	; (8003fb4 <HAL_RCC_OscConfig+0x51c>)
 8003d72:	6853      	ldr	r3, [r2, #4]
 8003d74:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003d78:	6921      	ldr	r1, [r4, #16]
 8003d7a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003d7e:	6053      	str	r3, [r2, #4]
 8003d80:	e7d9      	b.n	8003d36 <HAL_RCC_OscConfig+0x29e>
        __HAL_RCC_HSI_DISABLE();
 8003d82:	4a8c      	ldr	r2, [pc, #560]	; (8003fb4 <HAL_RCC_OscConfig+0x51c>)
 8003d84:	6813      	ldr	r3, [r2, #0]
 8003d86:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d8a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003d8c:	f7fd fdf6 	bl	800197c <HAL_GetTick>
 8003d90:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d92:	4b88      	ldr	r3, [pc, #544]	; (8003fb4 <HAL_RCC_OscConfig+0x51c>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003d9a:	d0cc      	beq.n	8003d36 <HAL_RCC_OscConfig+0x29e>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d9c:	f7fd fdee 	bl	800197c <HAL_GetTick>
 8003da0:	1b80      	subs	r0, r0, r6
 8003da2:	2802      	cmp	r0, #2
 8003da4:	d9f5      	bls.n	8003d92 <HAL_RCC_OscConfig+0x2fa>
            return HAL_TIMEOUT;
 8003da6:	2003      	movs	r0, #3
 8003da8:	e1a6      	b.n	80040f8 <HAL_RCC_OscConfig+0x660>
      __HAL_RCC_LSI_DISABLE();
 8003daa:	4a82      	ldr	r2, [pc, #520]	; (8003fb4 <HAL_RCC_OscConfig+0x51c>)
 8003dac:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8003db0:	f023 0301 	bic.w	r3, r3, #1
 8003db4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8003db8:	f7fd fde0 	bl	800197c <HAL_GetTick>
 8003dbc:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003dbe:	4b7d      	ldr	r3, [pc, #500]	; (8003fb4 <HAL_RCC_OscConfig+0x51c>)
 8003dc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dc4:	f013 0f02 	tst.w	r3, #2
 8003dc8:	d006      	beq.n	8003dd8 <HAL_RCC_OscConfig+0x340>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dca:	f7fd fdd7 	bl	800197c <HAL_GetTick>
 8003dce:	1b80      	subs	r0, r0, r6
 8003dd0:	2802      	cmp	r0, #2
 8003dd2:	d9f4      	bls.n	8003dbe <HAL_RCC_OscConfig+0x326>
          return HAL_TIMEOUT;
 8003dd4:	2003      	movs	r0, #3
 8003dd6:	e18f      	b.n	80040f8 <HAL_RCC_OscConfig+0x660>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dd8:	6823      	ldr	r3, [r4, #0]
 8003dda:	f013 0f04 	tst.w	r3, #4
 8003dde:	d07a      	beq.n	8003ed6 <HAL_RCC_OscConfig+0x43e>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003de0:	4b74      	ldr	r3, [pc, #464]	; (8003fb4 <HAL_RCC_OscConfig+0x51c>)
 8003de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003de4:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003de8:	d136      	bne.n	8003e58 <HAL_RCC_OscConfig+0x3c0>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dea:	4b72      	ldr	r3, [pc, #456]	; (8003fb4 <HAL_RCC_OscConfig+0x51c>)
 8003dec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003dee:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003df2:	659a      	str	r2, [r3, #88]	; 0x58
 8003df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dfa:	9301      	str	r3, [sp, #4]
 8003dfc:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003dfe:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e00:	4b6d      	ldr	r3, [pc, #436]	; (8003fb8 <HAL_RCC_OscConfig+0x520>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003e08:	d028      	beq.n	8003e5c <HAL_RCC_OscConfig+0x3c4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e0a:	68a3      	ldr	r3, [r4, #8]
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d039      	beq.n	8003e84 <HAL_RCC_OscConfig+0x3ec>
 8003e10:	2b05      	cmp	r3, #5
 8003e12:	d03f      	beq.n	8003e94 <HAL_RCC_OscConfig+0x3fc>
 8003e14:	4b67      	ldr	r3, [pc, #412]	; (8003fb4 <HAL_RCC_OscConfig+0x51c>)
 8003e16:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003e1a:	f022 0201 	bic.w	r2, r2, #1
 8003e1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8003e22:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003e26:	f022 0204 	bic.w	r2, r2, #4
 8003e2a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e2e:	68a3      	ldr	r3, [r4, #8]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d03d      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x418>
      tickstart = HAL_GetTick();
 8003e34:	f7fd fda2 	bl	800197c <HAL_GetTick>
 8003e38:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e3a:	4b5e      	ldr	r3, [pc, #376]	; (8003fb4 <HAL_RCC_OscConfig+0x51c>)
 8003e3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e40:	f013 0f02 	tst.w	r3, #2
 8003e44:	d146      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x43c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e46:	f7fd fd99 	bl	800197c <HAL_GetTick>
 8003e4a:	1bc0      	subs	r0, r0, r7
 8003e4c:	f241 3388 	movw	r3, #5000	; 0x1388
 8003e50:	4298      	cmp	r0, r3
 8003e52:	d9f2      	bls.n	8003e3a <HAL_RCC_OscConfig+0x3a2>
          return HAL_TIMEOUT;
 8003e54:	2003      	movs	r0, #3
 8003e56:	e14f      	b.n	80040f8 <HAL_RCC_OscConfig+0x660>
    FlagStatus       pwrclkchanged = RESET;
 8003e58:	2600      	movs	r6, #0
 8003e5a:	e7d1      	b.n	8003e00 <HAL_RCC_OscConfig+0x368>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e5c:	4a56      	ldr	r2, [pc, #344]	; (8003fb8 <HAL_RCC_OscConfig+0x520>)
 8003e5e:	6813      	ldr	r3, [r2, #0]
 8003e60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e64:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003e66:	f7fd fd89 	bl	800197c <HAL_GetTick>
 8003e6a:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e6c:	4b52      	ldr	r3, [pc, #328]	; (8003fb8 <HAL_RCC_OscConfig+0x520>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003e74:	d1c9      	bne.n	8003e0a <HAL_RCC_OscConfig+0x372>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e76:	f7fd fd81 	bl	800197c <HAL_GetTick>
 8003e7a:	1bc0      	subs	r0, r0, r7
 8003e7c:	2802      	cmp	r0, #2
 8003e7e:	d9f5      	bls.n	8003e6c <HAL_RCC_OscConfig+0x3d4>
          return HAL_TIMEOUT;
 8003e80:	2003      	movs	r0, #3
 8003e82:	e139      	b.n	80040f8 <HAL_RCC_OscConfig+0x660>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e84:	4a4b      	ldr	r2, [pc, #300]	; (8003fb4 <HAL_RCC_OscConfig+0x51c>)
 8003e86:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003e8a:	f043 0301 	orr.w	r3, r3, #1
 8003e8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e92:	e7cc      	b.n	8003e2e <HAL_RCC_OscConfig+0x396>
 8003e94:	4b47      	ldr	r3, [pc, #284]	; (8003fb4 <HAL_RCC_OscConfig+0x51c>)
 8003e96:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003e9a:	f042 0204 	orr.w	r2, r2, #4
 8003e9e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8003ea2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003ea6:	f042 0201 	orr.w	r2, r2, #1
 8003eaa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8003eae:	e7be      	b.n	8003e2e <HAL_RCC_OscConfig+0x396>
      tickstart = HAL_GetTick();
 8003eb0:	f7fd fd64 	bl	800197c <HAL_GetTick>
 8003eb4:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003eb6:	4b3f      	ldr	r3, [pc, #252]	; (8003fb4 <HAL_RCC_OscConfig+0x51c>)
 8003eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ebc:	f013 0f02 	tst.w	r3, #2
 8003ec0:	d008      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x43c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ec2:	f7fd fd5b 	bl	800197c <HAL_GetTick>
 8003ec6:	1bc0      	subs	r0, r0, r7
 8003ec8:	f241 3388 	movw	r3, #5000	; 0x1388
 8003ecc:	4298      	cmp	r0, r3
 8003ece:	d9f2      	bls.n	8003eb6 <HAL_RCC_OscConfig+0x41e>
          return HAL_TIMEOUT;
 8003ed0:	2003      	movs	r0, #3
 8003ed2:	e111      	b.n	80040f8 <HAL_RCC_OscConfig+0x660>
    if(pwrclkchanged == SET)
 8003ed4:	b9e6      	cbnz	r6, 8003f10 <HAL_RCC_OscConfig+0x478>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003ed6:	6823      	ldr	r3, [r4, #0]
 8003ed8:	f013 0f20 	tst.w	r3, #32
 8003edc:	d035      	beq.n	8003f4a <HAL_RCC_OscConfig+0x4b2>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003ede:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ee0:	b1e3      	cbz	r3, 8003f1c <HAL_RCC_OscConfig+0x484>
      __HAL_RCC_HSI48_ENABLE();
 8003ee2:	4a34      	ldr	r2, [pc, #208]	; (8003fb4 <HAL_RCC_OscConfig+0x51c>)
 8003ee4:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8003ee8:	f043 0301 	orr.w	r3, r3, #1
 8003eec:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8003ef0:	f7fd fd44 	bl	800197c <HAL_GetTick>
 8003ef4:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003ef6:	4b2f      	ldr	r3, [pc, #188]	; (8003fb4 <HAL_RCC_OscConfig+0x51c>)
 8003ef8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003efc:	f013 0f02 	tst.w	r3, #2
 8003f00:	d123      	bne.n	8003f4a <HAL_RCC_OscConfig+0x4b2>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f02:	f7fd fd3b 	bl	800197c <HAL_GetTick>
 8003f06:	1b80      	subs	r0, r0, r6
 8003f08:	2802      	cmp	r0, #2
 8003f0a:	d9f4      	bls.n	8003ef6 <HAL_RCC_OscConfig+0x45e>
          return HAL_TIMEOUT;
 8003f0c:	2003      	movs	r0, #3
 8003f0e:	e0f3      	b.n	80040f8 <HAL_RCC_OscConfig+0x660>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f10:	4a28      	ldr	r2, [pc, #160]	; (8003fb4 <HAL_RCC_OscConfig+0x51c>)
 8003f12:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003f14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f18:	6593      	str	r3, [r2, #88]	; 0x58
 8003f1a:	e7dc      	b.n	8003ed6 <HAL_RCC_OscConfig+0x43e>
      __HAL_RCC_HSI48_DISABLE();
 8003f1c:	4a25      	ldr	r2, [pc, #148]	; (8003fb4 <HAL_RCC_OscConfig+0x51c>)
 8003f1e:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8003f22:	f023 0301 	bic.w	r3, r3, #1
 8003f26:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8003f2a:	f7fd fd27 	bl	800197c <HAL_GetTick>
 8003f2e:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f30:	4b20      	ldr	r3, [pc, #128]	; (8003fb4 <HAL_RCC_OscConfig+0x51c>)
 8003f32:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f36:	f013 0f02 	tst.w	r3, #2
 8003f3a:	d006      	beq.n	8003f4a <HAL_RCC_OscConfig+0x4b2>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f3c:	f7fd fd1e 	bl	800197c <HAL_GetTick>
 8003f40:	1b80      	subs	r0, r0, r6
 8003f42:	2802      	cmp	r0, #2
 8003f44:	d9f4      	bls.n	8003f30 <HAL_RCC_OscConfig+0x498>
          return HAL_TIMEOUT;
 8003f46:	2003      	movs	r0, #3
 8003f48:	e0d6      	b.n	80040f8 <HAL_RCC_OscConfig+0x660>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003f4a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	f000 80d2 	beq.w	80040f6 <HAL_RCC_OscConfig+0x65e>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d017      	beq.n	8003f86 <HAL_RCC_OscConfig+0x4ee>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f56:	2d0c      	cmp	r5, #12
 8003f58:	f000 80d4 	beq.w	8004104 <HAL_RCC_OscConfig+0x66c>
        __HAL_RCC_PLL_DISABLE();
 8003f5c:	4a15      	ldr	r2, [pc, #84]	; (8003fb4 <HAL_RCC_OscConfig+0x51c>)
 8003f5e:	6813      	ldr	r3, [r2, #0]
 8003f60:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f64:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003f66:	f7fd fd09 	bl	800197c <HAL_GetTick>
 8003f6a:	4604      	mov	r4, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f6c:	4b11      	ldr	r3, [pc, #68]	; (8003fb4 <HAL_RCC_OscConfig+0x51c>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003f74:	f000 80ae 	beq.w	80040d4 <HAL_RCC_OscConfig+0x63c>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f78:	f7fd fd00 	bl	800197c <HAL_GetTick>
 8003f7c:	1b00      	subs	r0, r0, r4
 8003f7e:	2802      	cmp	r0, #2
 8003f80:	d9f4      	bls.n	8003f6c <HAL_RCC_OscConfig+0x4d4>
            return HAL_TIMEOUT;
 8003f82:	2003      	movs	r0, #3
 8003f84:	e0b8      	b.n	80040f8 <HAL_RCC_OscConfig+0x660>
      pll_config = RCC->PLLCFGR;
 8003f86:	4b0b      	ldr	r3, [pc, #44]	; (8003fb4 <HAL_RCC_OscConfig+0x51c>)
 8003f88:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f8a:	f003 0103 	and.w	r1, r3, #3
 8003f8e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003f90:	4291      	cmp	r1, r2
 8003f92:	d013      	beq.n	8003fbc <HAL_RCC_OscConfig+0x524>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f94:	2d0c      	cmp	r5, #12
 8003f96:	f000 80b1 	beq.w	80040fc <HAL_RCC_OscConfig+0x664>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003f9a:	4b06      	ldr	r3, [pc, #24]	; (8003fb4 <HAL_RCC_OscConfig+0x51c>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8003fa2:	f040 80ad 	bne.w	8004100 <HAL_RCC_OscConfig+0x668>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003fa6:	4b03      	ldr	r3, [pc, #12]	; (8003fb4 <HAL_RCC_OscConfig+0x51c>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003fae:	d02f      	beq.n	8004010 <HAL_RCC_OscConfig+0x578>
            return HAL_ERROR;
 8003fb0:	2001      	movs	r0, #1
 8003fb2:	e0a1      	b.n	80040f8 <HAL_RCC_OscConfig+0x660>
 8003fb4:	40021000 	.word	0x40021000
 8003fb8:	40007000 	.word	0x40007000
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003fbc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003fc0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003fc2:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fc4:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8003fc8:	d1e4      	bne.n	8003f94 <HAL_RCC_OscConfig+0x4fc>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fca:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003fce:	6b61      	ldr	r1, [r4, #52]	; 0x34
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003fd0:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8003fd4:	d1de      	bne.n	8003f94 <HAL_RCC_OscConfig+0x4fc>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003fd6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003fda:	6ba1      	ldr	r1, [r4, #56]	; 0x38
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fdc:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8003fe0:	d1d8      	bne.n	8003f94 <HAL_RCC_OscConfig+0x4fc>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fe2:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8003fe6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003fe8:	0852      	lsrs	r2, r2, #1
 8003fea:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003fec:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8003ff0:	d1d0      	bne.n	8003f94 <HAL_RCC_OscConfig+0x4fc>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003ff2:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8003ff6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003ff8:	0852      	lsrs	r2, r2, #1
 8003ffa:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ffc:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8004000:	d1c8      	bne.n	8003f94 <HAL_RCC_OscConfig+0x4fc>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004002:	4b41      	ldr	r3, [pc, #260]	; (8004108 <HAL_RCC_OscConfig+0x670>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800400a:	d049      	beq.n	80040a0 <HAL_RCC_OscConfig+0x608>
  return HAL_OK;
 800400c:	2000      	movs	r0, #0
 800400e:	e073      	b.n	80040f8 <HAL_RCC_OscConfig+0x660>
            __HAL_RCC_PLL_DISABLE();
 8004010:	4a3d      	ldr	r2, [pc, #244]	; (8004108 <HAL_RCC_OscConfig+0x670>)
 8004012:	6813      	ldr	r3, [r2, #0]
 8004014:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004018:	6013      	str	r3, [r2, #0]
            tickstart = HAL_GetTick();
 800401a:	f7fd fcaf 	bl	800197c <HAL_GetTick>
 800401e:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004020:	4b39      	ldr	r3, [pc, #228]	; (8004108 <HAL_RCC_OscConfig+0x670>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004028:	d006      	beq.n	8004038 <HAL_RCC_OscConfig+0x5a0>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800402a:	f7fd fca7 	bl	800197c <HAL_GetTick>
 800402e:	1b40      	subs	r0, r0, r5
 8004030:	2802      	cmp	r0, #2
 8004032:	d9f5      	bls.n	8004020 <HAL_RCC_OscConfig+0x588>
                return HAL_TIMEOUT;
 8004034:	2003      	movs	r0, #3
 8004036:	e05f      	b.n	80040f8 <HAL_RCC_OscConfig+0x660>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004038:	4a33      	ldr	r2, [pc, #204]	; (8004108 <HAL_RCC_OscConfig+0x670>)
 800403a:	68d3      	ldr	r3, [r2, #12]
 800403c:	4933      	ldr	r1, [pc, #204]	; (800410c <HAL_RCC_OscConfig+0x674>)
 800403e:	4019      	ands	r1, r3
 8004040:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004042:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004044:	3801      	subs	r0, #1
 8004046:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 800404a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800404c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8004050:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004052:	0840      	lsrs	r0, r0, #1
 8004054:	3801      	subs	r0, #1
 8004056:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 800405a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800405c:	0840      	lsrs	r0, r0, #1
 800405e:	3801      	subs	r0, #1
 8004060:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8004064:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004066:	ea43 63c0 	orr.w	r3, r3, r0, lsl #27
 800406a:	4319      	orrs	r1, r3
 800406c:	60d1      	str	r1, [r2, #12]
            __HAL_RCC_PLL_ENABLE();
 800406e:	6813      	ldr	r3, [r2, #0]
 8004070:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004074:	6013      	str	r3, [r2, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004076:	68d3      	ldr	r3, [r2, #12]
 8004078:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800407c:	60d3      	str	r3, [r2, #12]
            tickstart = HAL_GetTick();
 800407e:	f7fd fc7d 	bl	800197c <HAL_GetTick>
 8004082:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004084:	4b20      	ldr	r3, [pc, #128]	; (8004108 <HAL_RCC_OscConfig+0x670>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800408c:	d106      	bne.n	800409c <HAL_RCC_OscConfig+0x604>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800408e:	f7fd fc75 	bl	800197c <HAL_GetTick>
 8004092:	1b00      	subs	r0, r0, r4
 8004094:	2802      	cmp	r0, #2
 8004096:	d9f5      	bls.n	8004084 <HAL_RCC_OscConfig+0x5ec>
                return HAL_TIMEOUT;
 8004098:	2003      	movs	r0, #3
 800409a:	e02d      	b.n	80040f8 <HAL_RCC_OscConfig+0x660>
  return HAL_OK;
 800409c:	2000      	movs	r0, #0
 800409e:	e02b      	b.n	80040f8 <HAL_RCC_OscConfig+0x660>
          __HAL_RCC_PLL_ENABLE();
 80040a0:	4b19      	ldr	r3, [pc, #100]	; (8004108 <HAL_RCC_OscConfig+0x670>)
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80040a8:	601a      	str	r2, [r3, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80040aa:	68da      	ldr	r2, [r3, #12]
 80040ac:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80040b0:	60da      	str	r2, [r3, #12]
          tickstart = HAL_GetTick();
 80040b2:	f7fd fc63 	bl	800197c <HAL_GetTick>
 80040b6:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040b8:	4b13      	ldr	r3, [pc, #76]	; (8004108 <HAL_RCC_OscConfig+0x670>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80040c0:	d106      	bne.n	80040d0 <HAL_RCC_OscConfig+0x638>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040c2:	f7fd fc5b 	bl	800197c <HAL_GetTick>
 80040c6:	1b03      	subs	r3, r0, r4
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	d9f5      	bls.n	80040b8 <HAL_RCC_OscConfig+0x620>
              return HAL_TIMEOUT;
 80040cc:	2003      	movs	r0, #3
 80040ce:	e013      	b.n	80040f8 <HAL_RCC_OscConfig+0x660>
  return HAL_OK;
 80040d0:	2000      	movs	r0, #0
 80040d2:	e011      	b.n	80040f8 <HAL_RCC_OscConfig+0x660>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80040d4:	4a0c      	ldr	r2, [pc, #48]	; (8004108 <HAL_RCC_OscConfig+0x670>)
 80040d6:	68d1      	ldr	r1, [r2, #12]
 80040d8:	4b0d      	ldr	r3, [pc, #52]	; (8004110 <HAL_RCC_OscConfig+0x678>)
 80040da:	400b      	ands	r3, r1
 80040dc:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 80040de:	2000      	movs	r0, #0
 80040e0:	e00a      	b.n	80040f8 <HAL_RCC_OscConfig+0x660>
    return HAL_ERROR;
 80040e2:	2001      	movs	r0, #1
}
 80040e4:	4770      	bx	lr
        return HAL_ERROR;
 80040e6:	2001      	movs	r0, #1
 80040e8:	e006      	b.n	80040f8 <HAL_RCC_OscConfig+0x660>
            return HAL_ERROR;
 80040ea:	2001      	movs	r0, #1
 80040ec:	e004      	b.n	80040f8 <HAL_RCC_OscConfig+0x660>
        return HAL_ERROR;
 80040ee:	2001      	movs	r0, #1
 80040f0:	e002      	b.n	80040f8 <HAL_RCC_OscConfig+0x660>
        return HAL_ERROR;
 80040f2:	2001      	movs	r0, #1
 80040f4:	e000      	b.n	80040f8 <HAL_RCC_OscConfig+0x660>
  return HAL_OK;
 80040f6:	2000      	movs	r0, #0
}
 80040f8:	b003      	add	sp, #12
 80040fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
          return HAL_ERROR;
 80040fc:	2001      	movs	r0, #1
 80040fe:	e7fb      	b.n	80040f8 <HAL_RCC_OscConfig+0x660>
            return HAL_ERROR;
 8004100:	2001      	movs	r0, #1
 8004102:	e7f9      	b.n	80040f8 <HAL_RCC_OscConfig+0x660>
        return HAL_ERROR;
 8004104:	2001      	movs	r0, #1
 8004106:	e7f7      	b.n	80040f8 <HAL_RCC_OscConfig+0x660>
 8004108:	40021000 	.word	0x40021000
 800410c:	019d800c 	.word	0x019d800c
 8004110:	feeefffc 	.word	0xfeeefffc

08004114 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8004114:	2800      	cmp	r0, #0
 8004116:	f000 80ea 	beq.w	80042ee <HAL_RCC_ClockConfig+0x1da>
{
 800411a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800411c:	460d      	mov	r5, r1
 800411e:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004120:	4b77      	ldr	r3, [pc, #476]	; (8004300 <HAL_RCC_ClockConfig+0x1ec>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 030f 	and.w	r3, r3, #15
 8004128:	428b      	cmp	r3, r1
 800412a:	d20b      	bcs.n	8004144 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800412c:	4a74      	ldr	r2, [pc, #464]	; (8004300 <HAL_RCC_ClockConfig+0x1ec>)
 800412e:	6813      	ldr	r3, [r2, #0]
 8004130:	f023 030f 	bic.w	r3, r3, #15
 8004134:	430b      	orrs	r3, r1
 8004136:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004138:	6813      	ldr	r3, [r2, #0]
 800413a:	f003 030f 	and.w	r3, r3, #15
 800413e:	428b      	cmp	r3, r1
 8004140:	f040 80d7 	bne.w	80042f2 <HAL_RCC_ClockConfig+0x1de>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004144:	6823      	ldr	r3, [r4, #0]
 8004146:	f013 0f02 	tst.w	r3, #2
 800414a:	d00c      	beq.n	8004166 <HAL_RCC_ClockConfig+0x52>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800414c:	68a2      	ldr	r2, [r4, #8]
 800414e:	4b6d      	ldr	r3, [pc, #436]	; (8004304 <HAL_RCC_ClockConfig+0x1f0>)
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004156:	429a      	cmp	r2, r3
 8004158:	d905      	bls.n	8004166 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800415a:	496a      	ldr	r1, [pc, #424]	; (8004304 <HAL_RCC_ClockConfig+0x1f0>)
 800415c:	688b      	ldr	r3, [r1, #8]
 800415e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004162:	431a      	orrs	r2, r3
 8004164:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004166:	6823      	ldr	r3, [r4, #0]
 8004168:	f013 0f01 	tst.w	r3, #1
 800416c:	d06e      	beq.n	800424c <HAL_RCC_ClockConfig+0x138>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800416e:	6863      	ldr	r3, [r4, #4]
 8004170:	2b03      	cmp	r3, #3
 8004172:	d00d      	beq.n	8004190 <HAL_RCC_ClockConfig+0x7c>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004174:	2b02      	cmp	r3, #2
 8004176:	d025      	beq.n	80041c4 <HAL_RCC_ClockConfig+0xb0>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004178:	2b00      	cmp	r3, #0
 800417a:	d13c      	bne.n	80041f6 <HAL_RCC_ClockConfig+0xe2>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800417c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004180:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f013 0f02 	tst.w	r3, #2
 800418a:	d121      	bne.n	80041d0 <HAL_RCC_ClockConfig+0xbc>
          return HAL_ERROR;
 800418c:	2001      	movs	r0, #1
 800418e:	e0a7      	b.n	80042e0 <HAL_RCC_ClockConfig+0x1cc>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004190:	4b5c      	ldr	r3, [pc, #368]	; (8004304 <HAL_RCC_ClockConfig+0x1f0>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004198:	d101      	bne.n	800419e <HAL_RCC_ClockConfig+0x8a>
        return HAL_ERROR;
 800419a:	2001      	movs	r0, #1
 800419c:	e0a0      	b.n	80042e0 <HAL_RCC_ClockConfig+0x1cc>
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800419e:	f7ff fb9d 	bl	80038dc <RCC_GetSysClockFreqFromPLLSource>
 80041a2:	4b59      	ldr	r3, [pc, #356]	; (8004308 <HAL_RCC_ClockConfig+0x1f4>)
 80041a4:	4298      	cmp	r0, r3
 80041a6:	d92d      	bls.n	8004204 <HAL_RCC_ClockConfig+0xf0>
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80041a8:	4b56      	ldr	r3, [pc, #344]	; (8004304 <HAL_RCC_ClockConfig+0x1f0>)
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 80041b0:	d12a      	bne.n	8004208 <HAL_RCC_ClockConfig+0xf4>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80041b2:	4a54      	ldr	r2, [pc, #336]	; (8004304 <HAL_RCC_ClockConfig+0x1f0>)
 80041b4:	6893      	ldr	r3, [r2, #8]
 80041b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041be:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80041c0:	2780      	movs	r7, #128	; 0x80
 80041c2:	e024      	b.n	800420e <HAL_RCC_ClockConfig+0xfa>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041c4:	4b4f      	ldr	r3, [pc, #316]	; (8004304 <HAL_RCC_ClockConfig+0x1f0>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80041cc:	f000 8093 	beq.w	80042f6 <HAL_RCC_ClockConfig+0x1e2>
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80041d0:	f7ff fc08 	bl	80039e4 <HAL_RCC_GetSysClockFreq>
 80041d4:	4b4c      	ldr	r3, [pc, #304]	; (8004308 <HAL_RCC_ClockConfig+0x1f4>)
 80041d6:	4298      	cmp	r0, r3
 80041d8:	d918      	bls.n	800420c <HAL_RCC_ClockConfig+0xf8>
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80041da:	4b4a      	ldr	r3, [pc, #296]	; (8004304 <HAL_RCC_ClockConfig+0x1f0>)
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 80041e2:	d12f      	bne.n	8004244 <HAL_RCC_ClockConfig+0x130>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80041e4:	4a47      	ldr	r2, [pc, #284]	; (8004304 <HAL_RCC_ClockConfig+0x1f0>)
 80041e6:	6893      	ldr	r3, [r2, #8]
 80041e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041f0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80041f2:	2780      	movs	r7, #128	; 0x80
 80041f4:	e00b      	b.n	800420e <HAL_RCC_ClockConfig+0xfa>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041f6:	4b43      	ldr	r3, [pc, #268]	; (8004304 <HAL_RCC_ClockConfig+0x1f0>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80041fe:	d1e7      	bne.n	80041d0 <HAL_RCC_ClockConfig+0xbc>
          return HAL_ERROR;
 8004200:	2001      	movs	r0, #1
 8004202:	e06d      	b.n	80042e0 <HAL_RCC_ClockConfig+0x1cc>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004204:	2700      	movs	r7, #0
 8004206:	e002      	b.n	800420e <HAL_RCC_ClockConfig+0xfa>
 8004208:	2700      	movs	r7, #0
 800420a:	e000      	b.n	800420e <HAL_RCC_ClockConfig+0xfa>
 800420c:	2700      	movs	r7, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800420e:	4a3d      	ldr	r2, [pc, #244]	; (8004304 <HAL_RCC_ClockConfig+0x1f0>)
 8004210:	6893      	ldr	r3, [r2, #8]
 8004212:	f023 0303 	bic.w	r3, r3, #3
 8004216:	6861      	ldr	r1, [r4, #4]
 8004218:	430b      	orrs	r3, r1
 800421a:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 800421c:	f7fd fbae 	bl	800197c <HAL_GetTick>
 8004220:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004222:	4b38      	ldr	r3, [pc, #224]	; (8004304 <HAL_RCC_ClockConfig+0x1f0>)
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f003 030c 	and.w	r3, r3, #12
 800422a:	6862      	ldr	r2, [r4, #4]
 800422c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004230:	d00a      	beq.n	8004248 <HAL_RCC_ClockConfig+0x134>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004232:	f7fd fba3 	bl	800197c <HAL_GetTick>
 8004236:	1b80      	subs	r0, r0, r6
 8004238:	f241 3388 	movw	r3, #5000	; 0x1388
 800423c:	4298      	cmp	r0, r3
 800423e:	d9f0      	bls.n	8004222 <HAL_RCC_ClockConfig+0x10e>
        return HAL_TIMEOUT;
 8004240:	2003      	movs	r0, #3
 8004242:	e04d      	b.n	80042e0 <HAL_RCC_ClockConfig+0x1cc>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004244:	2700      	movs	r7, #0
 8004246:	e7e2      	b.n	800420e <HAL_RCC_ClockConfig+0xfa>
  if(hpre == RCC_SYSCLK_DIV2)
 8004248:	2f00      	cmp	r7, #0
 800424a:	d14a      	bne.n	80042e2 <HAL_RCC_ClockConfig+0x1ce>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800424c:	6823      	ldr	r3, [r4, #0]
 800424e:	f013 0f02 	tst.w	r3, #2
 8004252:	d00c      	beq.n	800426e <HAL_RCC_ClockConfig+0x15a>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004254:	68a2      	ldr	r2, [r4, #8]
 8004256:	4b2b      	ldr	r3, [pc, #172]	; (8004304 <HAL_RCC_ClockConfig+0x1f0>)
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800425e:	429a      	cmp	r2, r3
 8004260:	d205      	bcs.n	800426e <HAL_RCC_ClockConfig+0x15a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004262:	4928      	ldr	r1, [pc, #160]	; (8004304 <HAL_RCC_ClockConfig+0x1f0>)
 8004264:	688b      	ldr	r3, [r1, #8]
 8004266:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800426a:	431a      	orrs	r2, r3
 800426c:	608a      	str	r2, [r1, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800426e:	4b24      	ldr	r3, [pc, #144]	; (8004300 <HAL_RCC_ClockConfig+0x1ec>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 030f 	and.w	r3, r3, #15
 8004276:	42ab      	cmp	r3, r5
 8004278:	d90a      	bls.n	8004290 <HAL_RCC_ClockConfig+0x17c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800427a:	4a21      	ldr	r2, [pc, #132]	; (8004300 <HAL_RCC_ClockConfig+0x1ec>)
 800427c:	6813      	ldr	r3, [r2, #0]
 800427e:	f023 030f 	bic.w	r3, r3, #15
 8004282:	432b      	orrs	r3, r5
 8004284:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004286:	6813      	ldr	r3, [r2, #0]
 8004288:	f003 030f 	and.w	r3, r3, #15
 800428c:	42ab      	cmp	r3, r5
 800428e:	d134      	bne.n	80042fa <HAL_RCC_ClockConfig+0x1e6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004290:	6823      	ldr	r3, [r4, #0]
 8004292:	f013 0f04 	tst.w	r3, #4
 8004296:	d006      	beq.n	80042a6 <HAL_RCC_ClockConfig+0x192>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004298:	4a1a      	ldr	r2, [pc, #104]	; (8004304 <HAL_RCC_ClockConfig+0x1f0>)
 800429a:	6893      	ldr	r3, [r2, #8]
 800429c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80042a0:	68e1      	ldr	r1, [r4, #12]
 80042a2:	430b      	orrs	r3, r1
 80042a4:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042a6:	6823      	ldr	r3, [r4, #0]
 80042a8:	f013 0f08 	tst.w	r3, #8
 80042ac:	d007      	beq.n	80042be <HAL_RCC_ClockConfig+0x1aa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042ae:	4a15      	ldr	r2, [pc, #84]	; (8004304 <HAL_RCC_ClockConfig+0x1f0>)
 80042b0:	6893      	ldr	r3, [r2, #8]
 80042b2:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80042b6:	6921      	ldr	r1, [r4, #16]
 80042b8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80042bc:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80042be:	f7ff fb91 	bl	80039e4 <HAL_RCC_GetSysClockFreq>
 80042c2:	4b10      	ldr	r3, [pc, #64]	; (8004304 <HAL_RCC_ClockConfig+0x1f0>)
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80042ca:	4a10      	ldr	r2, [pc, #64]	; (800430c <HAL_RCC_ClockConfig+0x1f8>)
 80042cc:	5cd3      	ldrb	r3, [r2, r3]
 80042ce:	f003 031f 	and.w	r3, r3, #31
 80042d2:	40d8      	lsrs	r0, r3
 80042d4:	4b0e      	ldr	r3, [pc, #56]	; (8004310 <HAL_RCC_ClockConfig+0x1fc>)
 80042d6:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 80042d8:	4b0e      	ldr	r3, [pc, #56]	; (8004314 <HAL_RCC_ClockConfig+0x200>)
 80042da:	6818      	ldr	r0, [r3, #0]
 80042dc:	f7fd fb0a 	bl	80018f4 <HAL_InitTick>
}
 80042e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80042e2:	4a08      	ldr	r2, [pc, #32]	; (8004304 <HAL_RCC_ClockConfig+0x1f0>)
 80042e4:	6893      	ldr	r3, [r2, #8]
 80042e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042ea:	6093      	str	r3, [r2, #8]
 80042ec:	e7ae      	b.n	800424c <HAL_RCC_ClockConfig+0x138>
    return HAL_ERROR;
 80042ee:	2001      	movs	r0, #1
}
 80042f0:	4770      	bx	lr
      return HAL_ERROR;
 80042f2:	2001      	movs	r0, #1
 80042f4:	e7f4      	b.n	80042e0 <HAL_RCC_ClockConfig+0x1cc>
          return HAL_ERROR;
 80042f6:	2001      	movs	r0, #1
 80042f8:	e7f2      	b.n	80042e0 <HAL_RCC_ClockConfig+0x1cc>
      return HAL_ERROR;
 80042fa:	2001      	movs	r0, #1
 80042fc:	e7f0      	b.n	80042e0 <HAL_RCC_ClockConfig+0x1cc>
 80042fe:	bf00      	nop
 8004300:	40022000 	.word	0x40022000
 8004304:	40021000 	.word	0x40021000
 8004308:	04c4b400 	.word	0x04c4b400
 800430c:	08009778 	.word	0x08009778
 8004310:	20000000 	.word	0x20000000
 8004314:	20000008 	.word	0x20000008

08004318 <HAL_RCC_GetHCLKFreq>:
}
 8004318:	4b01      	ldr	r3, [pc, #4]	; (8004320 <HAL_RCC_GetHCLKFreq+0x8>)
 800431a:	6818      	ldr	r0, [r3, #0]
 800431c:	4770      	bx	lr
 800431e:	bf00      	nop
 8004320:	20000000 	.word	0x20000000

08004324 <HAL_RCC_GetPCLK1Freq>:
{
 8004324:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004326:	f7ff fff7 	bl	8004318 <HAL_RCC_GetHCLKFreq>
 800432a:	4b05      	ldr	r3, [pc, #20]	; (8004340 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8004332:	4a04      	ldr	r2, [pc, #16]	; (8004344 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004334:	5cd3      	ldrb	r3, [r2, r3]
 8004336:	f003 031f 	and.w	r3, r3, #31
}
 800433a:	40d8      	lsrs	r0, r3
 800433c:	bd08      	pop	{r3, pc}
 800433e:	bf00      	nop
 8004340:	40021000 	.word	0x40021000
 8004344:	08009788 	.word	0x08009788

08004348 <HAL_RCC_GetPCLK2Freq>:
{
 8004348:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800434a:	f7ff ffe5 	bl	8004318 <HAL_RCC_GetHCLKFreq>
 800434e:	4b05      	ldr	r3, [pc, #20]	; (8004364 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8004356:	4a04      	ldr	r2, [pc, #16]	; (8004368 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004358:	5cd3      	ldrb	r3, [r2, r3]
 800435a:	f003 031f 	and.w	r3, r3, #31
}
 800435e:	40d8      	lsrs	r0, r3
 8004360:	bd08      	pop	{r3, pc}
 8004362:	bf00      	nop
 8004364:	40021000 	.word	0x40021000
 8004368:	08009788 	.word	0x08009788

0800436c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800436c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800436e:	4604      	mov	r4, r0
 8004370:	460f      	mov	r7, r1
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004372:	4b54      	ldr	r3, [pc, #336]	; (80044c4 <RCCEx_PLLSAI2_Config+0x158>)
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	f013 0f03 	tst.w	r3, #3
 800437a:	d00e      	beq.n	800439a <RCCEx_PLLSAI2_Config+0x2e>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800437c:	4b51      	ldr	r3, [pc, #324]	; (80044c4 <RCCEx_PLLSAI2_Config+0x158>)
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	f003 0303 	and.w	r3, r3, #3
 8004384:	6802      	ldr	r2, [r0, #0]
 8004386:	4293      	cmp	r3, r2
 8004388:	d002      	beq.n	8004390 <RCCEx_PLLSAI2_Config+0x24>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800438a:	2501      	movs	r5, #1
      }
    }
  }

  return status;
}
 800438c:	4628      	mov	r0, r5
 800438e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 8004390:	2a00      	cmp	r2, #0
 8004392:	f000 8095 	beq.w	80044c0 <RCCEx_PLLSAI2_Config+0x154>
  HAL_StatusTypeDef status = HAL_OK;
 8004396:	2500      	movs	r5, #0
 8004398:	e009      	b.n	80043ae <RCCEx_PLLSAI2_Config+0x42>
    switch(PllSai2->PLLSAI2Source)
 800439a:	6803      	ldr	r3, [r0, #0]
 800439c:	2b02      	cmp	r3, #2
 800439e:	d054      	beq.n	800444a <RCCEx_PLLSAI2_Config+0xde>
 80043a0:	2b03      	cmp	r3, #3
 80043a2:	d059      	beq.n	8004458 <RCCEx_PLLSAI2_Config+0xec>
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d043      	beq.n	8004430 <RCCEx_PLLSAI2_Config+0xc4>
 80043a8:	2501      	movs	r5, #1
  if(status == HAL_OK)
 80043aa:	2d00      	cmp	r5, #0
 80043ac:	d1ee      	bne.n	800438c <RCCEx_PLLSAI2_Config+0x20>
    __HAL_RCC_PLLSAI2_DISABLE();
 80043ae:	4a45      	ldr	r2, [pc, #276]	; (80044c4 <RCCEx_PLLSAI2_Config+0x158>)
 80043b0:	6813      	ldr	r3, [r2, #0]
 80043b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043b6:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80043b8:	f7fd fae0 	bl	800197c <HAL_GetTick>
 80043bc:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80043be:	4b41      	ldr	r3, [pc, #260]	; (80044c4 <RCCEx_PLLSAI2_Config+0x158>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80043c6:	d005      	beq.n	80043d4 <RCCEx_PLLSAI2_Config+0x68>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80043c8:	f7fd fad8 	bl	800197c <HAL_GetTick>
 80043cc:	1b83      	subs	r3, r0, r6
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	d9f5      	bls.n	80043be <RCCEx_PLLSAI2_Config+0x52>
        status = HAL_TIMEOUT;
 80043d2:	2503      	movs	r5, #3
    if(status == HAL_OK)
 80043d4:	2d00      	cmp	r5, #0
 80043d6:	d1d9      	bne.n	800438c <RCCEx_PLLSAI2_Config+0x20>
      if(Divider == DIVIDER_P_UPDATE)
 80043d8:	2f00      	cmp	r7, #0
 80043da:	d14b      	bne.n	8004474 <RCCEx_PLLSAI2_Config+0x108>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80043dc:	4839      	ldr	r0, [pc, #228]	; (80044c4 <RCCEx_PLLSAI2_Config+0x158>)
 80043de:	6943      	ldr	r3, [r0, #20]
 80043e0:	4a39      	ldr	r2, [pc, #228]	; (80044c8 <RCCEx_PLLSAI2_Config+0x15c>)
 80043e2:	401a      	ands	r2, r3
 80043e4:	68a1      	ldr	r1, [r4, #8]
 80043e6:	68e3      	ldr	r3, [r4, #12]
 80043e8:	06db      	lsls	r3, r3, #27
 80043ea:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80043ee:	6861      	ldr	r1, [r4, #4]
 80043f0:	3901      	subs	r1, #1
 80043f2:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 80043f6:	431a      	orrs	r2, r3
 80043f8:	6142      	str	r2, [r0, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 80043fa:	4a32      	ldr	r2, [pc, #200]	; (80044c4 <RCCEx_PLLSAI2_Config+0x158>)
 80043fc:	6813      	ldr	r3, [r2, #0]
 80043fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004402:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8004404:	f7fd faba 	bl	800197c <HAL_GetTick>
 8004408:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800440a:	4b2e      	ldr	r3, [pc, #184]	; (80044c4 <RCCEx_PLLSAI2_Config+0x158>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8004412:	d105      	bne.n	8004420 <RCCEx_PLLSAI2_Config+0xb4>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004414:	f7fd fab2 	bl	800197c <HAL_GetTick>
 8004418:	1b83      	subs	r3, r0, r6
 800441a:	2b02      	cmp	r3, #2
 800441c:	d9f5      	bls.n	800440a <RCCEx_PLLSAI2_Config+0x9e>
          status = HAL_TIMEOUT;
 800441e:	2503      	movs	r5, #3
      if(status == HAL_OK)
 8004420:	2d00      	cmp	r5, #0
 8004422:	d1b3      	bne.n	800438c <RCCEx_PLLSAI2_Config+0x20>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004424:	4a27      	ldr	r2, [pc, #156]	; (80044c4 <RCCEx_PLLSAI2_Config+0x158>)
 8004426:	6953      	ldr	r3, [r2, #20]
 8004428:	69a1      	ldr	r1, [r4, #24]
 800442a:	430b      	orrs	r3, r1
 800442c:	6153      	str	r3, [r2, #20]
 800442e:	e7ad      	b.n	800438c <RCCEx_PLLSAI2_Config+0x20>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004430:	4a24      	ldr	r2, [pc, #144]	; (80044c4 <RCCEx_PLLSAI2_Config+0x158>)
 8004432:	6812      	ldr	r2, [r2, #0]
 8004434:	f012 0f02 	tst.w	r2, #2
 8004438:	d01a      	beq.n	8004470 <RCCEx_PLLSAI2_Config+0x104>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800443a:	4922      	ldr	r1, [pc, #136]	; (80044c4 <RCCEx_PLLSAI2_Config+0x158>)
 800443c:	68ca      	ldr	r2, [r1, #12]
 800443e:	f022 0203 	bic.w	r2, r2, #3
 8004442:	4313      	orrs	r3, r2
 8004444:	60cb      	str	r3, [r1, #12]
 8004446:	2500      	movs	r5, #0
 8004448:	e7af      	b.n	80043aa <RCCEx_PLLSAI2_Config+0x3e>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800444a:	4a1e      	ldr	r2, [pc, #120]	; (80044c4 <RCCEx_PLLSAI2_Config+0x158>)
 800444c:	6812      	ldr	r2, [r2, #0]
 800444e:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8004452:	d1f2      	bne.n	800443a <RCCEx_PLLSAI2_Config+0xce>
        status = HAL_ERROR;
 8004454:	2501      	movs	r5, #1
 8004456:	e7a8      	b.n	80043aa <RCCEx_PLLSAI2_Config+0x3e>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004458:	4a1a      	ldr	r2, [pc, #104]	; (80044c4 <RCCEx_PLLSAI2_Config+0x158>)
 800445a:	6812      	ldr	r2, [r2, #0]
 800445c:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8004460:	d1eb      	bne.n	800443a <RCCEx_PLLSAI2_Config+0xce>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004462:	4a18      	ldr	r2, [pc, #96]	; (80044c4 <RCCEx_PLLSAI2_Config+0x158>)
 8004464:	6812      	ldr	r2, [r2, #0]
 8004466:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 800446a:	d1e6      	bne.n	800443a <RCCEx_PLLSAI2_Config+0xce>
          status = HAL_ERROR;
 800446c:	2501      	movs	r5, #1
 800446e:	e79c      	b.n	80043aa <RCCEx_PLLSAI2_Config+0x3e>
        status = HAL_ERROR;
 8004470:	2501      	movs	r5, #1
 8004472:	e79a      	b.n	80043aa <RCCEx_PLLSAI2_Config+0x3e>
      else if(Divider == DIVIDER_Q_UPDATE)
 8004474:	2f01      	cmp	r7, #1
 8004476:	d011      	beq.n	800449c <RCCEx_PLLSAI2_Config+0x130>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004478:	4812      	ldr	r0, [pc, #72]	; (80044c4 <RCCEx_PLLSAI2_Config+0x158>)
 800447a:	6943      	ldr	r3, [r0, #20]
 800447c:	4a13      	ldr	r2, [pc, #76]	; (80044cc <RCCEx_PLLSAI2_Config+0x160>)
 800447e:	401a      	ands	r2, r3
 8004480:	68a1      	ldr	r1, [r4, #8]
 8004482:	6963      	ldr	r3, [r4, #20]
 8004484:	085b      	lsrs	r3, r3, #1
 8004486:	3b01      	subs	r3, #1
 8004488:	065b      	lsls	r3, r3, #25
 800448a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800448e:	6861      	ldr	r1, [r4, #4]
 8004490:	3901      	subs	r1, #1
 8004492:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8004496:	431a      	orrs	r2, r3
 8004498:	6142      	str	r2, [r0, #20]
 800449a:	e7ae      	b.n	80043fa <RCCEx_PLLSAI2_Config+0x8e>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800449c:	4809      	ldr	r0, [pc, #36]	; (80044c4 <RCCEx_PLLSAI2_Config+0x158>)
 800449e:	6943      	ldr	r3, [r0, #20]
 80044a0:	4a0b      	ldr	r2, [pc, #44]	; (80044d0 <RCCEx_PLLSAI2_Config+0x164>)
 80044a2:	401a      	ands	r2, r3
 80044a4:	68a1      	ldr	r1, [r4, #8]
 80044a6:	6923      	ldr	r3, [r4, #16]
 80044a8:	085b      	lsrs	r3, r3, #1
 80044aa:	3b01      	subs	r3, #1
 80044ac:	055b      	lsls	r3, r3, #21
 80044ae:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80044b2:	6861      	ldr	r1, [r4, #4]
 80044b4:	3901      	subs	r1, #1
 80044b6:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 80044ba:	431a      	orrs	r2, r3
 80044bc:	6142      	str	r2, [r0, #20]
 80044be:	e79c      	b.n	80043fa <RCCEx_PLLSAI2_Config+0x8e>
      status = HAL_ERROR;
 80044c0:	2501      	movs	r5, #1
 80044c2:	e763      	b.n	800438c <RCCEx_PLLSAI2_Config+0x20>
 80044c4:	40021000 	.word	0x40021000
 80044c8:	07ff800f 	.word	0x07ff800f
 80044cc:	f9ff800f 	.word	0xf9ff800f
 80044d0:	ff9f800f 	.word	0xff9f800f

080044d4 <RCCEx_PLLSAI1_Config>:
{
 80044d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044d6:	4604      	mov	r4, r0
 80044d8:	460f      	mov	r7, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80044da:	4b54      	ldr	r3, [pc, #336]	; (800462c <RCCEx_PLLSAI1_Config+0x158>)
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	f013 0f03 	tst.w	r3, #3
 80044e2:	d00e      	beq.n	8004502 <RCCEx_PLLSAI1_Config+0x2e>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80044e4:	4b51      	ldr	r3, [pc, #324]	; (800462c <RCCEx_PLLSAI1_Config+0x158>)
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	f003 0303 	and.w	r3, r3, #3
 80044ec:	6802      	ldr	r2, [r0, #0]
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d002      	beq.n	80044f8 <RCCEx_PLLSAI1_Config+0x24>
      status = HAL_ERROR;
 80044f2:	2501      	movs	r5, #1
}
 80044f4:	4628      	mov	r0, r5
 80044f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 80044f8:	2a00      	cmp	r2, #0
 80044fa:	f000 8095 	beq.w	8004628 <RCCEx_PLLSAI1_Config+0x154>
  HAL_StatusTypeDef status = HAL_OK;
 80044fe:	2500      	movs	r5, #0
 8004500:	e009      	b.n	8004516 <RCCEx_PLLSAI1_Config+0x42>
    switch(PllSai1->PLLSAI1Source)
 8004502:	6803      	ldr	r3, [r0, #0]
 8004504:	2b02      	cmp	r3, #2
 8004506:	d054      	beq.n	80045b2 <RCCEx_PLLSAI1_Config+0xde>
 8004508:	2b03      	cmp	r3, #3
 800450a:	d059      	beq.n	80045c0 <RCCEx_PLLSAI1_Config+0xec>
 800450c:	2b01      	cmp	r3, #1
 800450e:	d043      	beq.n	8004598 <RCCEx_PLLSAI1_Config+0xc4>
 8004510:	2501      	movs	r5, #1
  if(status == HAL_OK)
 8004512:	2d00      	cmp	r5, #0
 8004514:	d1ee      	bne.n	80044f4 <RCCEx_PLLSAI1_Config+0x20>
    __HAL_RCC_PLLSAI1_DISABLE();
 8004516:	4a45      	ldr	r2, [pc, #276]	; (800462c <RCCEx_PLLSAI1_Config+0x158>)
 8004518:	6813      	ldr	r3, [r2, #0]
 800451a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800451e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004520:	f7fd fa2c 	bl	800197c <HAL_GetTick>
 8004524:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004526:	4b41      	ldr	r3, [pc, #260]	; (800462c <RCCEx_PLLSAI1_Config+0x158>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800452e:	d005      	beq.n	800453c <RCCEx_PLLSAI1_Config+0x68>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004530:	f7fd fa24 	bl	800197c <HAL_GetTick>
 8004534:	1b83      	subs	r3, r0, r6
 8004536:	2b02      	cmp	r3, #2
 8004538:	d9f5      	bls.n	8004526 <RCCEx_PLLSAI1_Config+0x52>
        status = HAL_TIMEOUT;
 800453a:	2503      	movs	r5, #3
    if(status == HAL_OK)
 800453c:	2d00      	cmp	r5, #0
 800453e:	d1d9      	bne.n	80044f4 <RCCEx_PLLSAI1_Config+0x20>
      if(Divider == DIVIDER_P_UPDATE)
 8004540:	2f00      	cmp	r7, #0
 8004542:	d14b      	bne.n	80045dc <RCCEx_PLLSAI1_Config+0x108>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004544:	4839      	ldr	r0, [pc, #228]	; (800462c <RCCEx_PLLSAI1_Config+0x158>)
 8004546:	6903      	ldr	r3, [r0, #16]
 8004548:	4a39      	ldr	r2, [pc, #228]	; (8004630 <RCCEx_PLLSAI1_Config+0x15c>)
 800454a:	401a      	ands	r2, r3
 800454c:	68a1      	ldr	r1, [r4, #8]
 800454e:	68e3      	ldr	r3, [r4, #12]
 8004550:	06db      	lsls	r3, r3, #27
 8004552:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004556:	6861      	ldr	r1, [r4, #4]
 8004558:	3901      	subs	r1, #1
 800455a:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 800455e:	431a      	orrs	r2, r3
 8004560:	6102      	str	r2, [r0, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 8004562:	4a32      	ldr	r2, [pc, #200]	; (800462c <RCCEx_PLLSAI1_Config+0x158>)
 8004564:	6813      	ldr	r3, [r2, #0]
 8004566:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800456a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800456c:	f7fd fa06 	bl	800197c <HAL_GetTick>
 8004570:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004572:	4b2e      	ldr	r3, [pc, #184]	; (800462c <RCCEx_PLLSAI1_Config+0x158>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800457a:	d105      	bne.n	8004588 <RCCEx_PLLSAI1_Config+0xb4>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800457c:	f7fd f9fe 	bl	800197c <HAL_GetTick>
 8004580:	1b83      	subs	r3, r0, r6
 8004582:	2b02      	cmp	r3, #2
 8004584:	d9f5      	bls.n	8004572 <RCCEx_PLLSAI1_Config+0x9e>
          status = HAL_TIMEOUT;
 8004586:	2503      	movs	r5, #3
      if(status == HAL_OK)
 8004588:	2d00      	cmp	r5, #0
 800458a:	d1b3      	bne.n	80044f4 <RCCEx_PLLSAI1_Config+0x20>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800458c:	4a27      	ldr	r2, [pc, #156]	; (800462c <RCCEx_PLLSAI1_Config+0x158>)
 800458e:	6913      	ldr	r3, [r2, #16]
 8004590:	69a1      	ldr	r1, [r4, #24]
 8004592:	430b      	orrs	r3, r1
 8004594:	6113      	str	r3, [r2, #16]
 8004596:	e7ad      	b.n	80044f4 <RCCEx_PLLSAI1_Config+0x20>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004598:	4a24      	ldr	r2, [pc, #144]	; (800462c <RCCEx_PLLSAI1_Config+0x158>)
 800459a:	6812      	ldr	r2, [r2, #0]
 800459c:	f012 0f02 	tst.w	r2, #2
 80045a0:	d01a      	beq.n	80045d8 <RCCEx_PLLSAI1_Config+0x104>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80045a2:	4922      	ldr	r1, [pc, #136]	; (800462c <RCCEx_PLLSAI1_Config+0x158>)
 80045a4:	68ca      	ldr	r2, [r1, #12]
 80045a6:	f022 0203 	bic.w	r2, r2, #3
 80045aa:	4313      	orrs	r3, r2
 80045ac:	60cb      	str	r3, [r1, #12]
 80045ae:	2500      	movs	r5, #0
 80045b0:	e7af      	b.n	8004512 <RCCEx_PLLSAI1_Config+0x3e>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80045b2:	4a1e      	ldr	r2, [pc, #120]	; (800462c <RCCEx_PLLSAI1_Config+0x158>)
 80045b4:	6812      	ldr	r2, [r2, #0]
 80045b6:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80045ba:	d1f2      	bne.n	80045a2 <RCCEx_PLLSAI1_Config+0xce>
        status = HAL_ERROR;
 80045bc:	2501      	movs	r5, #1
 80045be:	e7a8      	b.n	8004512 <RCCEx_PLLSAI1_Config+0x3e>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80045c0:	4a1a      	ldr	r2, [pc, #104]	; (800462c <RCCEx_PLLSAI1_Config+0x158>)
 80045c2:	6812      	ldr	r2, [r2, #0]
 80045c4:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80045c8:	d1eb      	bne.n	80045a2 <RCCEx_PLLSAI1_Config+0xce>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80045ca:	4a18      	ldr	r2, [pc, #96]	; (800462c <RCCEx_PLLSAI1_Config+0x158>)
 80045cc:	6812      	ldr	r2, [r2, #0]
 80045ce:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80045d2:	d1e6      	bne.n	80045a2 <RCCEx_PLLSAI1_Config+0xce>
          status = HAL_ERROR;
 80045d4:	2501      	movs	r5, #1
 80045d6:	e79c      	b.n	8004512 <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_ERROR;
 80045d8:	2501      	movs	r5, #1
 80045da:	e79a      	b.n	8004512 <RCCEx_PLLSAI1_Config+0x3e>
      else if(Divider == DIVIDER_Q_UPDATE)
 80045dc:	2f01      	cmp	r7, #1
 80045de:	d011      	beq.n	8004604 <RCCEx_PLLSAI1_Config+0x130>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045e0:	4812      	ldr	r0, [pc, #72]	; (800462c <RCCEx_PLLSAI1_Config+0x158>)
 80045e2:	6903      	ldr	r3, [r0, #16]
 80045e4:	4a13      	ldr	r2, [pc, #76]	; (8004634 <RCCEx_PLLSAI1_Config+0x160>)
 80045e6:	401a      	ands	r2, r3
 80045e8:	68a1      	ldr	r1, [r4, #8]
 80045ea:	6963      	ldr	r3, [r4, #20]
 80045ec:	085b      	lsrs	r3, r3, #1
 80045ee:	3b01      	subs	r3, #1
 80045f0:	065b      	lsls	r3, r3, #25
 80045f2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80045f6:	6861      	ldr	r1, [r4, #4]
 80045f8:	3901      	subs	r1, #1
 80045fa:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 80045fe:	431a      	orrs	r2, r3
 8004600:	6102      	str	r2, [r0, #16]
 8004602:	e7ae      	b.n	8004562 <RCCEx_PLLSAI1_Config+0x8e>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004604:	4809      	ldr	r0, [pc, #36]	; (800462c <RCCEx_PLLSAI1_Config+0x158>)
 8004606:	6903      	ldr	r3, [r0, #16]
 8004608:	4a0b      	ldr	r2, [pc, #44]	; (8004638 <RCCEx_PLLSAI1_Config+0x164>)
 800460a:	401a      	ands	r2, r3
 800460c:	68a1      	ldr	r1, [r4, #8]
 800460e:	6923      	ldr	r3, [r4, #16]
 8004610:	085b      	lsrs	r3, r3, #1
 8004612:	3b01      	subs	r3, #1
 8004614:	055b      	lsls	r3, r3, #21
 8004616:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800461a:	6861      	ldr	r1, [r4, #4]
 800461c:	3901      	subs	r1, #1
 800461e:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8004622:	431a      	orrs	r2, r3
 8004624:	6102      	str	r2, [r0, #16]
 8004626:	e79c      	b.n	8004562 <RCCEx_PLLSAI1_Config+0x8e>
      status = HAL_ERROR;
 8004628:	2501      	movs	r5, #1
 800462a:	e763      	b.n	80044f4 <RCCEx_PLLSAI1_Config+0x20>
 800462c:	40021000 	.word	0x40021000
 8004630:	07ff800f 	.word	0x07ff800f
 8004634:	f9ff800f 	.word	0xf9ff800f
 8004638:	ff9f800f 	.word	0xff9f800f

0800463c <HAL_RCCEx_PeriphCLKConfig>:
{
 800463c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004640:	b082      	sub	sp, #8
 8004642:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004644:	6803      	ldr	r3, [r0, #0]
 8004646:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800464a:	d034      	beq.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    switch(PeriphClkInit->Sai1ClockSelection)
 800464c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800464e:	2b40      	cmp	r3, #64	; 0x40
 8004650:	d01f      	beq.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004652:	d80b      	bhi.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x30>
 8004654:	b323      	cbz	r3, 80046a0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004656:	2b20      	cmp	r3, #32
 8004658:	d105      	bne.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800465a:	2100      	movs	r1, #0
 800465c:	3020      	adds	r0, #32
 800465e:	f7ff fe85 	bl	800436c <RCCEx_PLLSAI2_Config>
 8004662:	4606      	mov	r6, r0
      break;
 8004664:	e021      	b.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch(PeriphClkInit->Sai1ClockSelection)
 8004666:	2701      	movs	r7, #1
 8004668:	463e      	mov	r6, r7
 800466a:	e026      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
 800466c:	2b60      	cmp	r3, #96	; 0x60
 800466e:	d020      	beq.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004670:	2b80      	cmp	r3, #128	; 0x80
 8004672:	d10b      	bne.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004674:	2600      	movs	r6, #0
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004676:	4a63      	ldr	r2, [pc, #396]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004678:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 800467c:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8004680:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8004682:	430b      	orrs	r3, r1
 8004684:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004688:	2700      	movs	r7, #0
 800468a:	e016      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
    switch(PeriphClkInit->Sai1ClockSelection)
 800468c:	2701      	movs	r7, #1
 800468e:	463e      	mov	r6, r7
 8004690:	e013      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004692:	4a5c      	ldr	r2, [pc, #368]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004694:	68d3      	ldr	r3, [r2, #12]
 8004696:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800469a:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800469c:	2600      	movs	r6, #0
 800469e:	e7ea      	b.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x3a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80046a0:	2100      	movs	r1, #0
 80046a2:	3004      	adds	r0, #4
 80046a4:	f7ff ff16 	bl	80044d4 <RCCEx_PLLSAI1_Config>
 80046a8:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 80046aa:	2e00      	cmp	r6, #0
 80046ac:	d0e3      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x3a>
 80046ae:	4637      	mov	r7, r6
 80046b0:	e003      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
    switch(PeriphClkInit->Sai1ClockSelection)
 80046b2:	2600      	movs	r6, #0
 80046b4:	e7df      	b.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x3a>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80046b6:	2700      	movs	r7, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80046b8:	463e      	mov	r6, r7
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80046ba:	6823      	ldr	r3, [r4, #0]
 80046bc:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80046c0:	d033      	beq.n	800472a <HAL_RCCEx_PeriphCLKConfig+0xee>
    switch(PeriphClkInit->Sai2ClockSelection)
 80046c2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80046c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046c8:	d022      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80046ca:	d80d      	bhi.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0xac>
 80046cc:	b333      	cbz	r3, 800471c <HAL_RCCEx_PeriphCLKConfig+0xe0>
 80046ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046d2:	d106      	bne.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0xa6>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80046d4:	2100      	movs	r1, #0
 80046d6:	f104 0020 	add.w	r0, r4, #32
 80046da:	f7ff fe47 	bl	800436c <RCCEx_PLLSAI2_Config>
 80046de:	4606      	mov	r6, r0
      break;
 80046e0:	e008      	b.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    switch(PeriphClkInit->Sai2ClockSelection)
 80046e2:	2701      	movs	r7, #1
 80046e4:	463e      	mov	r6, r7
 80046e6:	e020      	b.n	800472a <HAL_RCCEx_PeriphCLKConfig+0xee>
 80046e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046ec:	d002      	beq.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
 80046ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046f2:	d10a      	bne.n	800470a <HAL_RCCEx_PeriphCLKConfig+0xce>
    if(ret == HAL_OK)
 80046f4:	b9c6      	cbnz	r6, 8004728 <HAL_RCCEx_PeriphCLKConfig+0xec>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80046f6:	4a43      	ldr	r2, [pc, #268]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80046f8:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 80046fc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004700:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8004702:	430b      	orrs	r3, r1
 8004704:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004708:	e00f      	b.n	800472a <HAL_RCCEx_PeriphCLKConfig+0xee>
    switch(PeriphClkInit->Sai2ClockSelection)
 800470a:	2701      	movs	r7, #1
 800470c:	463e      	mov	r6, r7
 800470e:	e00c      	b.n	800472a <HAL_RCCEx_PeriphCLKConfig+0xee>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004710:	4a3c      	ldr	r2, [pc, #240]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004712:	68d3      	ldr	r3, [r2, #12]
 8004714:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004718:	60d3      	str	r3, [r2, #12]
      break;
 800471a:	e7eb      	b.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800471c:	2100      	movs	r1, #0
 800471e:	1d20      	adds	r0, r4, #4
 8004720:	f7ff fed8 	bl	80044d4 <RCCEx_PLLSAI1_Config>
 8004724:	4606      	mov	r6, r0
      break;
 8004726:	e7e5      	b.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
 8004728:	4637      	mov	r7, r6
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800472a:	6823      	ldr	r3, [r4, #0]
 800472c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004730:	d071      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x1da>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004732:	4b34      	ldr	r3, [pc, #208]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004736:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800473a:	d14e      	bne.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x19e>
      __HAL_RCC_PWR_CLK_ENABLE();
 800473c:	4b31      	ldr	r3, [pc, #196]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800473e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004740:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004744:	659a      	str	r2, [r3, #88]	; 0x58
 8004746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004748:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800474c:	9301      	str	r3, [sp, #4]
 800474e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004750:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004754:	4a2c      	ldr	r2, [pc, #176]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004756:	6813      	ldr	r3, [r2, #0]
 8004758:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800475c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800475e:	f7fd f90d 	bl	800197c <HAL_GetTick>
 8004762:	4605      	mov	r5, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004764:	4b28      	ldr	r3, [pc, #160]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f413 7f80 	tst.w	r3, #256	; 0x100
 800476c:	d105      	bne.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800476e:	f7fd f905 	bl	800197c <HAL_GetTick>
 8004772:	1b40      	subs	r0, r0, r5
 8004774:	2802      	cmp	r0, #2
 8004776:	d9f5      	bls.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x128>
        ret = HAL_TIMEOUT;
 8004778:	2603      	movs	r6, #3
    if(ret == HAL_OK)
 800477a:	2e00      	cmp	r6, #0
 800477c:	d146      	bne.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800477e:	4b21      	ldr	r3, [pc, #132]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004784:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8004788:	d016      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800478a:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800478e:	429a      	cmp	r2, r3
 8004790:	d012      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004792:	4a1c      	ldr	r2, [pc, #112]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004794:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004798:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800479c:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 80047a0:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80047a4:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80047a8:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 80047ac:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80047b0:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        RCC->BDCR = tmpregister;
 80047b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80047b8:	f013 0f01 	tst.w	r3, #1
 80047bc:	d110      	bne.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      if(ret == HAL_OK)
 80047be:	2e00      	cmp	r6, #0
 80047c0:	f040 8159 	bne.w	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x43a>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047c4:	4a0f      	ldr	r2, [pc, #60]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80047c6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80047ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047ce:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 80047d2:	430b      	orrs	r3, r1
 80047d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80047d8:	e019      	b.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    FlagStatus       pwrclkchanged = RESET;
 80047da:	f04f 0800 	mov.w	r8, #0
 80047de:	e7b9      	b.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x118>
        tickstart = HAL_GetTick();
 80047e0:	f7fd f8cc 	bl	800197c <HAL_GetTick>
 80047e4:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047e6:	4b07      	ldr	r3, [pc, #28]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80047e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ec:	f013 0f02 	tst.w	r3, #2
 80047f0:	d1e5      	bne.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x182>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047f2:	f7fd f8c3 	bl	800197c <HAL_GetTick>
 80047f6:	1b40      	subs	r0, r0, r5
 80047f8:	f241 3388 	movw	r3, #5000	; 0x1388
 80047fc:	4298      	cmp	r0, r3
 80047fe:	d9f2      	bls.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
            ret = HAL_TIMEOUT;
 8004800:	2603      	movs	r6, #3
 8004802:	e7dc      	b.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x182>
 8004804:	40021000 	.word	0x40021000
 8004808:	40007000 	.word	0x40007000
      status = ret;
 800480c:	4637      	mov	r7, r6
    if(pwrclkchanged == SET)
 800480e:	f1b8 0f00 	cmp.w	r8, #0
 8004812:	f040 8132 	bne.w	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x43e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004816:	6823      	ldr	r3, [r4, #0]
 8004818:	f013 0f01 	tst.w	r3, #1
 800481c:	d008      	beq.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800481e:	4ab6      	ldr	r2, [pc, #728]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8004820:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004824:	f023 0303 	bic.w	r3, r3, #3
 8004828:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800482a:	430b      	orrs	r3, r1
 800482c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004830:	6823      	ldr	r3, [r4, #0]
 8004832:	f013 0f02 	tst.w	r3, #2
 8004836:	d008      	beq.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004838:	4aaf      	ldr	r2, [pc, #700]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800483a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800483e:	f023 030c 	bic.w	r3, r3, #12
 8004842:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004844:	430b      	orrs	r3, r1
 8004846:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800484a:	6823      	ldr	r3, [r4, #0]
 800484c:	f013 0f04 	tst.w	r3, #4
 8004850:	d008      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x228>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004852:	4aa9      	ldr	r2, [pc, #676]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8004854:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004858:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800485c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800485e:	430b      	orrs	r3, r1
 8004860:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004864:	6823      	ldr	r3, [r4, #0]
 8004866:	f013 0f08 	tst.w	r3, #8
 800486a:	d008      	beq.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x242>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800486c:	4aa2      	ldr	r2, [pc, #648]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800486e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004872:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004876:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004878:	430b      	orrs	r3, r1
 800487a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800487e:	6823      	ldr	r3, [r4, #0]
 8004880:	f013 0f10 	tst.w	r3, #16
 8004884:	d008      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x25c>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004886:	4a9c      	ldr	r2, [pc, #624]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8004888:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800488c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004890:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8004892:	430b      	orrs	r3, r1
 8004894:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004898:	6823      	ldr	r3, [r4, #0]
 800489a:	f013 0f20 	tst.w	r3, #32
 800489e:	d008      	beq.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x276>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80048a0:	4a95      	ldr	r2, [pc, #596]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80048a2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80048a6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80048aa:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80048ac:	430b      	orrs	r3, r1
 80048ae:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80048b2:	6823      	ldr	r3, [r4, #0]
 80048b4:	f413 7f00 	tst.w	r3, #512	; 0x200
 80048b8:	d008      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x290>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80048ba:	4a8f      	ldr	r2, [pc, #572]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80048bc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80048c0:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80048c4:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80048c6:	430b      	orrs	r3, r1
 80048c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80048cc:	6823      	ldr	r3, [r4, #0]
 80048ce:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80048d2:	d008      	beq.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80048d4:	4a88      	ldr	r2, [pc, #544]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80048d6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80048da:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80048de:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80048e0:	430b      	orrs	r3, r1
 80048e2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80048e6:	6823      	ldr	r3, [r4, #0]
 80048e8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80048ec:	d008      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80048ee:	4a82      	ldr	r2, [pc, #520]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80048f0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80048f4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80048f8:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80048fa:	430b      	orrs	r3, r1
 80048fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004900:	6823      	ldr	r3, [r4, #0]
 8004902:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004906:	d008      	beq.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004908:	4a7b      	ldr	r2, [pc, #492]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800490a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800490e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004912:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004914:	430b      	orrs	r3, r1
 8004916:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800491a:	6823      	ldr	r3, [r4, #0]
 800491c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004920:	d008      	beq.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004922:	4a75      	ldr	r2, [pc, #468]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8004924:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004928:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800492c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800492e:	430b      	orrs	r3, r1
 8004930:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004934:	6823      	ldr	r3, [r4, #0]
 8004936:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800493a:	d008      	beq.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x312>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800493c:	4a6e      	ldr	r2, [pc, #440]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800493e:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8004942:	f023 0303 	bic.w	r3, r3, #3
 8004946:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8004948:	430b      	orrs	r3, r1
 800494a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800494e:	6823      	ldr	r3, [r4, #0]
 8004950:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8004954:	d011      	beq.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x33e>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004956:	4a68      	ldr	r2, [pc, #416]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8004958:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800495c:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8004960:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8004962:	430b      	orrs	r3, r1
 8004964:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004968:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800496a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800496e:	f000 808a 	beq.w	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004972:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004976:	f000 808b 	beq.w	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x454>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800497a:	6823      	ldr	r3, [r4, #0]
 800497c:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8004980:	d01f      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x386>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004982:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8004984:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004988:	f000 808b 	beq.w	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x466>
 800498c:	4a5a      	ldr	r2, [pc, #360]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800498e:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8004992:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004996:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800499a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800499e:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80049a2:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 80049a4:	430b      	orrs	r3, r1
 80049a6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80049aa:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80049ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049b0:	d07f      	beq.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x476>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80049b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049b6:	f000 8082 	beq.w	8004abe <HAL_RCCEx_PeriphCLKConfig+0x482>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80049ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049be:	f000 8084 	beq.w	8004aca <HAL_RCCEx_PeriphCLKConfig+0x48e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80049c2:	6823      	ldr	r3, [r4, #0]
 80049c4:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80049c8:	d00f      	beq.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x3ae>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80049ca:	4a4b      	ldr	r2, [pc, #300]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80049cc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80049d0:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80049d4:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80049d6:	430b      	orrs	r3, r1
 80049d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80049dc:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80049de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049e2:	d07b      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x4a0>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80049e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049e8:	d07d      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80049ea:	6823      	ldr	r3, [r4, #0]
 80049ec:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80049f0:	d00e      	beq.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80049f2:	4a41      	ldr	r2, [pc, #260]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80049f4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80049f8:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80049fc:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8004a00:	430b      	orrs	r3, r1
 8004a02:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004a06:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8004a0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a0e:	d075      	beq.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x4c0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004a10:	6823      	ldr	r3, [r4, #0]
 8004a12:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004a16:	d009      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004a18:	4a37      	ldr	r2, [pc, #220]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8004a1a:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8004a1e:	f023 0304 	bic.w	r3, r3, #4
 8004a22:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8004a26:	430b      	orrs	r3, r1
 8004a28:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004a2c:	6823      	ldr	r3, [r4, #0]
 8004a2e:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8004a32:	d009      	beq.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x40c>
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004a34:	4a30      	ldr	r2, [pc, #192]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8004a36:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8004a3a:	f023 0318 	bic.w	r3, r3, #24
 8004a3e:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8004a42:	430b      	orrs	r3, r1
 8004a44:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004a48:	6823      	ldr	r3, [r4, #0]
 8004a4a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8004a4e:	d00e      	beq.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x432>
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004a50:	4a29      	ldr	r2, [pc, #164]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8004a52:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8004a56:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004a5a:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8004a5e:	430b      	orrs	r3, r1
 8004a60:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004a64:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8004a68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a6c:	d04e      	beq.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
}
 8004a6e:	4638      	mov	r0, r7
 8004a70:	b002      	add	sp, #8
 8004a72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = ret;
 8004a76:	4637      	mov	r7, r6
 8004a78:	e6c9      	b.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x1d2>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a7a:	4a1f      	ldr	r2, [pc, #124]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8004a7c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004a7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a82:	6593      	str	r3, [r2, #88]	; 0x58
 8004a84:	e6c7      	b.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x1da>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a86:	68d3      	ldr	r3, [r2, #12]
 8004a88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a8c:	60d3      	str	r3, [r2, #12]
 8004a8e:	e774      	b.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x33e>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a90:	2101      	movs	r1, #1
 8004a92:	1d20      	adds	r0, r4, #4
 8004a94:	f7ff fd1e 	bl	80044d4 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8004a98:	2800      	cmp	r0, #0
 8004a9a:	f43f af6e 	beq.w	800497a <HAL_RCCEx_PeriphCLKConfig+0x33e>
          status = ret;
 8004a9e:	4607      	mov	r7, r0
 8004aa0:	e76b      	b.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x33e>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004aa2:	4a15      	ldr	r2, [pc, #84]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8004aa4:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8004aa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004aac:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004ab0:	e77b      	b.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x36e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ab2:	4a11      	ldr	r2, [pc, #68]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8004ab4:	68d3      	ldr	r3, [r2, #12]
 8004ab6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004aba:	60d3      	str	r3, [r2, #12]
 8004abc:	e781      	b.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x386>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004abe:	4a0e      	ldr	r2, [pc, #56]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8004ac0:	68d3      	ldr	r3, [r2, #12]
 8004ac2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ac6:	60d3      	str	r3, [r2, #12]
 8004ac8:	e77b      	b.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x386>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004aca:	2101      	movs	r1, #1
 8004acc:	1d20      	adds	r0, r4, #4
 8004ace:	f7ff fd01 	bl	80044d4 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8004ad2:	2800      	cmp	r0, #0
 8004ad4:	f43f af75 	beq.w	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x386>
        status = ret;
 8004ad8:	4607      	mov	r7, r0
 8004ada:	e772      	b.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x386>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004adc:	68d3      	ldr	r3, [r2, #12]
 8004ade:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ae2:	60d3      	str	r3, [r2, #12]
 8004ae4:	e781      	b.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x3ae>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ae6:	2101      	movs	r1, #1
 8004ae8:	1d20      	adds	r0, r4, #4
 8004aea:	f7ff fcf3 	bl	80044d4 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8004aee:	2800      	cmp	r0, #0
 8004af0:	f43f af7b 	beq.w	80049ea <HAL_RCCEx_PeriphCLKConfig+0x3ae>
        status = ret;
 8004af4:	4607      	mov	r7, r0
 8004af6:	e778      	b.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8004af8:	40021000 	.word	0x40021000
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004afc:	2102      	movs	r1, #2
 8004afe:	1d20      	adds	r0, r4, #4
 8004b00:	f7ff fce8 	bl	80044d4 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8004b04:	2800      	cmp	r0, #0
 8004b06:	d083      	beq.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
        status = ret;
 8004b08:	4607      	mov	r7, r0
 8004b0a:	e781      	b.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b0c:	68d3      	ldr	r3, [r2, #12]
 8004b0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b12:	60d3      	str	r3, [r2, #12]
 8004b14:	e7ab      	b.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x432>
 8004b16:	bf00      	nop

08004b18 <HAL_SPI_Init>:
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b18:	2800      	cmp	r0, #0
 8004b1a:	d06a      	beq.n	8004bf2 <HAL_SPI_Init+0xda>
{
 8004b1c:	b510      	push	{r4, lr}
 8004b1e:	4604      	mov	r4, r0
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b20:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004b22:	b933      	cbnz	r3, 8004b32 <HAL_SPI_Init+0x1a>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b24:	6843      	ldr	r3, [r0, #4]
 8004b26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b2a:	d005      	beq.n	8004b38 <HAL_SPI_Init+0x20>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	61c3      	str	r3, [r0, #28]
 8004b30:	e002      	b.n	8004b38 <HAL_SPI_Init+0x20>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b32:	2300      	movs	r3, #0
 8004b34:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b36:	6143      	str	r3, [r0, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	62a3      	str	r3, [r4, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b3c:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d04d      	beq.n	8004be0 <HAL_SPI_Init+0xc8>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b44:	2302      	movs	r3, #2
 8004b46:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b4a:	6822      	ldr	r2, [r4, #0]
 8004b4c:	6813      	ldr	r3, [r2, #0]
 8004b4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b52:	6013      	str	r3, [r2, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b54:	68e3      	ldr	r3, [r4, #12]
 8004b56:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b5a:	d947      	bls.n	8004bec <HAL_SPI_Init+0xd4>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004b5c:	2200      	movs	r2, #0
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004b5e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004b62:	d004      	beq.n	8004b6e <HAL_SPI_Init+0x56>
 8004b64:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b68:	d001      	beq.n	8004b6e <HAL_SPI_Init+0x56>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	62a3      	str	r3, [r4, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b6e:	6863      	ldr	r3, [r4, #4]
 8004b70:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8004b74:	68a1      	ldr	r1, [r4, #8]
 8004b76:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 8004b7a:	430b      	orrs	r3, r1
 8004b7c:	6921      	ldr	r1, [r4, #16]
 8004b7e:	f001 0102 	and.w	r1, r1, #2
 8004b82:	430b      	orrs	r3, r1
 8004b84:	6961      	ldr	r1, [r4, #20]
 8004b86:	f001 0101 	and.w	r1, r1, #1
 8004b8a:	430b      	orrs	r3, r1
 8004b8c:	69a1      	ldr	r1, [r4, #24]
 8004b8e:	f401 7100 	and.w	r1, r1, #512	; 0x200
 8004b92:	430b      	orrs	r3, r1
 8004b94:	69e1      	ldr	r1, [r4, #28]
 8004b96:	f001 0138 	and.w	r1, r1, #56	; 0x38
 8004b9a:	430b      	orrs	r3, r1
 8004b9c:	6a21      	ldr	r1, [r4, #32]
 8004b9e:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8004ba2:	430b      	orrs	r3, r1
 8004ba4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004ba6:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 8004baa:	6820      	ldr	r0, [r4, #0]
 8004bac:	430b      	orrs	r3, r1
 8004bae:	6003      	str	r3, [r0, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004bb0:	8b63      	ldrh	r3, [r4, #26]
 8004bb2:	f003 0304 	and.w	r3, r3, #4
 8004bb6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004bb8:	f001 0110 	and.w	r1, r1, #16
 8004bbc:	430b      	orrs	r3, r1
 8004bbe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004bc0:	f001 0108 	and.w	r1, r1, #8
 8004bc4:	430b      	orrs	r3, r1
 8004bc6:	68e1      	ldr	r1, [r4, #12]
 8004bc8:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 8004bcc:	430b      	orrs	r3, r1
 8004bce:	6821      	ldr	r1, [r4, #0]
 8004bd0:	431a      	orrs	r2, r3
 8004bd2:	604a      	str	r2, [r1, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004bd4:	2000      	movs	r0, #0
 8004bd6:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
}
 8004bde:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8004be0:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8004be4:	4620      	mov	r0, r4
 8004be6:	f7fc f84f 	bl	8000c88 <HAL_SPI_MspInit>
 8004bea:	e7ab      	b.n	8004b44 <HAL_SPI_Init+0x2c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004bec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004bf0:	e7b5      	b.n	8004b5e <HAL_SPI_Init+0x46>
    return HAL_ERROR;
 8004bf2:	2001      	movs	r0, #1
}
 8004bf4:	4770      	bx	lr

08004bf6 <HAL_SPI_ErrorCallback>:
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004bf6:	4770      	bx	lr

08004bf8 <HAL_SPI_IRQHandler>:
{
 8004bf8:	b510      	push	{r4, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 8004bfe:	6802      	ldr	r2, [r0, #0]
 8004c00:	6851      	ldr	r1, [r2, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8004c02:	6893      	ldr	r3, [r2, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004c04:	f003 0041 	and.w	r0, r3, #65	; 0x41
 8004c08:	2801      	cmp	r0, #1
 8004c0a:	d067      	beq.n	8004cdc <HAL_SPI_IRQHandler+0xe4>
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004c0c:	f013 0f02 	tst.w	r3, #2
 8004c10:	d002      	beq.n	8004c18 <HAL_SPI_IRQHandler+0x20>
 8004c12:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004c16:	d168      	bne.n	8004cea <HAL_SPI_IRQHandler+0xf2>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004c18:	f413 7fb0 	tst.w	r3, #352	; 0x160
 8004c1c:	d068      	beq.n	8004cf0 <HAL_SPI_IRQHandler+0xf8>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004c1e:	f011 0f20 	tst.w	r1, #32
 8004c22:	d065      	beq.n	8004cf0 <HAL_SPI_IRQHandler+0xf8>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004c24:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004c28:	d00f      	beq.n	8004c4a <HAL_SPI_IRQHandler+0x52>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004c2a:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8004c2e:	b2c0      	uxtb	r0, r0
 8004c30:	2803      	cmp	r0, #3
 8004c32:	d05f      	beq.n	8004cf4 <HAL_SPI_IRQHandler+0xfc>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004c34:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8004c36:	f040 0004 	orr.w	r0, r0, #4
 8004c3a:	6620      	str	r0, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c3c:	2000      	movs	r0, #0
 8004c3e:	9000      	str	r0, [sp, #0]
 8004c40:	68d0      	ldr	r0, [r2, #12]
 8004c42:	9000      	str	r0, [sp, #0]
 8004c44:	6890      	ldr	r0, [r2, #8]
 8004c46:	9000      	str	r0, [sp, #0]
 8004c48:	9800      	ldr	r0, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004c4a:	f013 0f20 	tst.w	r3, #32
 8004c4e:	d00c      	beq.n	8004c6a <HAL_SPI_IRQHandler+0x72>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004c50:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8004c52:	f040 0001 	orr.w	r0, r0, #1
 8004c56:	6620      	str	r0, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004c58:	2000      	movs	r0, #0
 8004c5a:	9002      	str	r0, [sp, #8]
 8004c5c:	6890      	ldr	r0, [r2, #8]
 8004c5e:	9002      	str	r0, [sp, #8]
 8004c60:	6810      	ldr	r0, [r2, #0]
 8004c62:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8004c66:	6010      	str	r0, [r2, #0]
 8004c68:	9a02      	ldr	r2, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004c6a:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004c6e:	d009      	beq.n	8004c84 <HAL_SPI_IRQHandler+0x8c>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004c70:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004c72:	f043 0308 	orr.w	r3, r3, #8
 8004c76:	6623      	str	r3, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004c78:	2300      	movs	r3, #0
 8004c7a:	9303      	str	r3, [sp, #12]
 8004c7c:	6823      	ldr	r3, [r4, #0]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	9303      	str	r3, [sp, #12]
 8004c82:	9b03      	ldr	r3, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c84:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d032      	beq.n	8004cf0 <HAL_SPI_IRQHandler+0xf8>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004c8a:	6822      	ldr	r2, [r4, #0]
 8004c8c:	6853      	ldr	r3, [r2, #4]
 8004c8e:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8004c92:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8004c94:	2301      	movs	r3, #1
 8004c96:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004c9a:	f011 0f03 	tst.w	r1, #3
 8004c9e:	d031      	beq.n	8004d04 <HAL_SPI_IRQHandler+0x10c>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004ca0:	6822      	ldr	r2, [r4, #0]
 8004ca2:	6853      	ldr	r3, [r2, #4]
 8004ca4:	f023 0303 	bic.w	r3, r3, #3
 8004ca8:	6053      	str	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 8004caa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004cac:	b14b      	cbz	r3, 8004cc2 <HAL_SPI_IRQHandler+0xca>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004cae:	4a17      	ldr	r2, [pc, #92]	; (8004d0c <HAL_SPI_IRQHandler+0x114>)
 8004cb0:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004cb2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004cb4:	f7fd f834 	bl	8001d20 <HAL_DMA_Abort_IT>
 8004cb8:	b118      	cbz	r0, 8004cc2 <HAL_SPI_IRQHandler+0xca>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004cba:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004cbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cc0:	6623      	str	r3, [r4, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8004cc2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004cc4:	b1a3      	cbz	r3, 8004cf0 <HAL_SPI_IRQHandler+0xf8>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004cc6:	4a11      	ldr	r2, [pc, #68]	; (8004d0c <HAL_SPI_IRQHandler+0x114>)
 8004cc8:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004cca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004ccc:	f7fd f828 	bl	8001d20 <HAL_DMA_Abort_IT>
 8004cd0:	b170      	cbz	r0, 8004cf0 <HAL_SPI_IRQHandler+0xf8>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004cd2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004cd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cd8:	6623      	str	r3, [r4, #96]	; 0x60
 8004cda:	e009      	b.n	8004cf0 <HAL_SPI_IRQHandler+0xf8>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004cdc:	f011 0f40 	tst.w	r1, #64	; 0x40
 8004ce0:	d094      	beq.n	8004c0c <HAL_SPI_IRQHandler+0x14>
    hspi->RxISR(hspi);
 8004ce2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004ce4:	4620      	mov	r0, r4
 8004ce6:	4798      	blx	r3
    return;
 8004ce8:	e002      	b.n	8004cf0 <HAL_SPI_IRQHandler+0xf8>
    hspi->TxISR(hspi);
 8004cea:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004cec:	4620      	mov	r0, r4
 8004cee:	4798      	blx	r3
}
 8004cf0:	b004      	add	sp, #16
 8004cf2:	bd10      	pop	{r4, pc}
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	9301      	str	r3, [sp, #4]
 8004cf8:	68d3      	ldr	r3, [r2, #12]
 8004cfa:	9301      	str	r3, [sp, #4]
 8004cfc:	6893      	ldr	r3, [r2, #8]
 8004cfe:	9301      	str	r3, [sp, #4]
 8004d00:	9b01      	ldr	r3, [sp, #4]
        return;
 8004d02:	e7f5      	b.n	8004cf0 <HAL_SPI_IRQHandler+0xf8>
        HAL_SPI_ErrorCallback(hspi);
 8004d04:	4620      	mov	r0, r4
 8004d06:	f7ff ff76 	bl	8004bf6 <HAL_SPI_ErrorCallback>
    return;
 8004d0a:	e7f1      	b.n	8004cf0 <HAL_SPI_IRQHandler+0xf8>
 8004d0c:	08004d11 	.word	0x08004d11

08004d10 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d10:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004d12:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hspi->RxXferCount = 0U;
 8004d14:	2300      	movs	r3, #0
 8004d16:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8004d1a:	87c3      	strh	r3, [r0, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004d1c:	f7ff ff6b 	bl	8004bf6 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004d20:	bd08      	pop	{r3, pc}

08004d22 <UART_EndTxTransfer>:
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
#if defined(USART_CR1_FIFOEN)
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8004d22:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d24:	e852 3f00 	ldrex	r3, [r2]
 8004d28:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d2c:	e842 3100 	strex	r1, r3, [r2]
 8004d30:	2900      	cmp	r1, #0
 8004d32:	d1f6      	bne.n	8004d22 <UART_EndTxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8004d34:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d36:	f102 0308 	add.w	r3, r2, #8
 8004d3a:	e853 3f00 	ldrex	r3, [r3]
 8004d3e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d42:	3208      	adds	r2, #8
 8004d44:	e842 3100 	strex	r1, r3, [r2]
 8004d48:	2900      	cmp	r1, #0
 8004d4a:	d1f3      	bne.n	8004d34 <UART_EndTxTransfer+0x12>
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d4c:	2320      	movs	r3, #32
 8004d4e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
}
 8004d52:	4770      	bx	lr

08004d54 <UART_EndRxTransfer>:
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004d54:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d56:	e852 3f00 	ldrex	r3, [r2]
 8004d5a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d5e:	e842 3100 	strex	r1, r3, [r2]
 8004d62:	2900      	cmp	r1, #0
 8004d64:	d1f6      	bne.n	8004d54 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004d66:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d68:	f102 0308 	add.w	r3, r2, #8
 8004d6c:	e853 3f00 	ldrex	r3, [r3]
 8004d70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d74:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d78:	3208      	adds	r2, #8
 8004d7a:	e842 3100 	strex	r1, r3, [r2]
 8004d7e:	2900      	cmp	r1, #0
 8004d80:	d1f1      	bne.n	8004d66 <UART_EndRxTransfer+0x12>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d82:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d006      	beq.n	8004d96 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d88:	2320      	movs	r3, #32
 8004d8a:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d92:	6703      	str	r3, [r0, #112]	; 0x70
}
 8004d94:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d96:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d98:	e852 3f00 	ldrex	r3, [r2]
 8004d9c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da0:	e842 3100 	strex	r1, r3, [r2]
 8004da4:	2900      	cmp	r1, #0
 8004da6:	d1f6      	bne.n	8004d96 <UART_EndRxTransfer+0x42>
 8004da8:	e7ee      	b.n	8004d88 <UART_EndRxTransfer+0x34>

08004daa <UART_TxISR_8BIT>:
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004daa:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8004dae:	2b21      	cmp	r3, #33	; 0x21
 8004db0:	d000      	beq.n	8004db4 <UART_TxISR_8BIT+0xa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004db2:	4770      	bx	lr
    if (huart->TxXferCount == 0U)
 8004db4:	f8b0 3056 	ldrh.w	r3, [r0, #86]	; 0x56
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	b993      	cbnz	r3, 8004de2 <UART_TxISR_8BIT+0x38>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004dbc:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dbe:	e852 3f00 	ldrex	r3, [r2]
 8004dc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc6:	e842 3100 	strex	r1, r3, [r2]
 8004dca:	2900      	cmp	r1, #0
 8004dcc:	d1f6      	bne.n	8004dbc <UART_TxISR_8BIT+0x12>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004dce:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd0:	e852 3f00 	ldrex	r3, [r2]
 8004dd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dd8:	e842 3100 	strex	r1, r3, [r2]
 8004ddc:	2900      	cmp	r1, #0
 8004dde:	d1f6      	bne.n	8004dce <UART_TxISR_8BIT+0x24>
 8004de0:	4770      	bx	lr
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004de2:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8004de4:	6803      	ldr	r3, [r0, #0]
 8004de6:	7812      	ldrb	r2, [r2, #0]
 8004de8:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8004dea:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8004dec:	3301      	adds	r3, #1
 8004dee:	6503      	str	r3, [r0, #80]	; 0x50
      huart->TxXferCount--;
 8004df0:	f8b0 3056 	ldrh.w	r3, [r0, #86]	; 0x56
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	3b01      	subs	r3, #1
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
}
 8004dfe:	e7d8      	b.n	8004db2 <UART_TxISR_8BIT+0x8>

08004e00 <UART_TxISR_16BIT>:
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004e00:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8004e04:	2b21      	cmp	r3, #33	; 0x21
 8004e06:	d000      	beq.n	8004e0a <UART_TxISR_16BIT+0xa>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004e08:	4770      	bx	lr
    if (huart->TxXferCount == 0U)
 8004e0a:	f8b0 3056 	ldrh.w	r3, [r0, #86]	; 0x56
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	b993      	cbnz	r3, 8004e38 <UART_TxISR_16BIT+0x38>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004e12:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e14:	e852 3f00 	ldrex	r3, [r2]
 8004e18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e1c:	e842 3100 	strex	r1, r3, [r2]
 8004e20:	2900      	cmp	r1, #0
 8004e22:	d1f6      	bne.n	8004e12 <UART_TxISR_16BIT+0x12>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004e24:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e26:	e852 3f00 	ldrex	r3, [r2]
 8004e2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e2e:	e842 3100 	strex	r1, r3, [r2]
 8004e32:	2900      	cmp	r1, #0
 8004e34:	d1f6      	bne.n	8004e24 <UART_TxISR_16BIT+0x24>
 8004e36:	4770      	bx	lr
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004e38:	6d03      	ldr	r3, [r0, #80]	; 0x50
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004e3a:	881b      	ldrh	r3, [r3, #0]
 8004e3c:	6802      	ldr	r2, [r0, #0]
 8004e3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e42:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8004e44:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8004e46:	3302      	adds	r3, #2
 8004e48:	6503      	str	r3, [r0, #80]	; 0x50
      huart->TxXferCount--;
 8004e4a:	f8b0 3056 	ldrh.w	r3, [r0, #86]	; 0x56
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	3b01      	subs	r3, #1
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
}
 8004e58:	e7d6      	b.n	8004e08 <UART_TxISR_16BIT+0x8>

08004e5a <UART_TxISR_8BIT_FIFOEN>:
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004e5a:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8004e5e:	2b21      	cmp	r3, #33	; 0x21
 8004e60:	d000      	beq.n	8004e64 <UART_TxISR_8BIT_FIFOEN+0xa>
      {
        /* Nothing to do */
      }
    }
  }
}
 8004e62:	4770      	bx	lr
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004e64:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 8004e68:	e017      	b.n	8004e9a <UART_TxISR_8BIT_FIFOEN+0x40>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8004e6a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e6c:	f102 0308 	add.w	r3, r2, #8
 8004e70:	e853 3f00 	ldrex	r3, [r3]
 8004e74:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e78:	3208      	adds	r2, #8
 8004e7a:	e842 3100 	strex	r1, r3, [r2]
 8004e7e:	2900      	cmp	r1, #0
 8004e80:	d1f3      	bne.n	8004e6a <UART_TxISR_8BIT_FIFOEN+0x10>
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004e82:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e84:	e852 3f00 	ldrex	r3, [r2]
 8004e88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e8c:	e842 3100 	strex	r1, r3, [r2]
 8004e90:	2900      	cmp	r1, #0
 8004e92:	d1f6      	bne.n	8004e82 <UART_TxISR_8BIT_FIFOEN+0x28>
 8004e94:	4770      	bx	lr
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004e96:	3b01      	subs	r3, #1
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d0e1      	beq.n	8004e62 <UART_TxISR_8BIT_FIFOEN+0x8>
      if (huart->TxXferCount == 0U)
 8004e9e:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
 8004ea2:	b292      	uxth	r2, r2
 8004ea4:	2a00      	cmp	r2, #0
 8004ea6:	d0e0      	beq.n	8004e6a <UART_TxISR_8BIT_FIFOEN+0x10>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8004ea8:	6802      	ldr	r2, [r0, #0]
 8004eaa:	69d1      	ldr	r1, [r2, #28]
 8004eac:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004eb0:	d0f1      	beq.n	8004e96 <UART_TxISR_8BIT_FIFOEN+0x3c>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004eb2:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8004eb4:	7809      	ldrb	r1, [r1, #0]
 8004eb6:	8511      	strh	r1, [r2, #40]	; 0x28
        huart->pTxBuffPtr++;
 8004eb8:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8004eba:	3201      	adds	r2, #1
 8004ebc:	6502      	str	r2, [r0, #80]	; 0x50
        huart->TxXferCount--;
 8004ebe:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
 8004ec2:	b292      	uxth	r2, r2
 8004ec4:	3a01      	subs	r2, #1
 8004ec6:	b292      	uxth	r2, r2
 8004ec8:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
 8004ecc:	e7e3      	b.n	8004e96 <UART_TxISR_8BIT_FIFOEN+0x3c>

08004ece <UART_TxISR_16BIT_FIFOEN>:
{
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004ece:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8004ed2:	2b21      	cmp	r3, #33	; 0x21
 8004ed4:	d000      	beq.n	8004ed8 <UART_TxISR_16BIT_FIFOEN+0xa>
      {
        /* Nothing to do */
      }
    }
  }
}
 8004ed6:	4770      	bx	lr
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004ed8:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 8004edc:	e017      	b.n	8004f0e <UART_TxISR_16BIT_FIFOEN+0x40>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8004ede:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee0:	f102 0308 	add.w	r3, r2, #8
 8004ee4:	e853 3f00 	ldrex	r3, [r3]
 8004ee8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eec:	3208      	adds	r2, #8
 8004eee:	e842 3100 	strex	r1, r3, [r2]
 8004ef2:	2900      	cmp	r1, #0
 8004ef4:	d1f3      	bne.n	8004ede <UART_TxISR_16BIT_FIFOEN+0x10>
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004ef6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef8:	e852 3f00 	ldrex	r3, [r2]
 8004efc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f00:	e842 3100 	strex	r1, r3, [r2]
 8004f04:	2900      	cmp	r1, #0
 8004f06:	d1f6      	bne.n	8004ef6 <UART_TxISR_16BIT_FIFOEN+0x28>
 8004f08:	4770      	bx	lr
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004f0a:	3b01      	subs	r3, #1
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d0e1      	beq.n	8004ed6 <UART_TxISR_16BIT_FIFOEN+0x8>
      if (huart->TxXferCount == 0U)
 8004f12:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
 8004f16:	b292      	uxth	r2, r2
 8004f18:	2a00      	cmp	r2, #0
 8004f1a:	d0e0      	beq.n	8004ede <UART_TxISR_16BIT_FIFOEN+0x10>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8004f1c:	6802      	ldr	r2, [r0, #0]
 8004f1e:	69d1      	ldr	r1, [r2, #28]
 8004f20:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004f24:	d0f1      	beq.n	8004f0a <UART_TxISR_16BIT_FIFOEN+0x3c>
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004f26:	6d01      	ldr	r1, [r0, #80]	; 0x50
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004f28:	8809      	ldrh	r1, [r1, #0]
 8004f2a:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8004f2e:	8511      	strh	r1, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8004f30:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8004f32:	3202      	adds	r2, #2
 8004f34:	6502      	str	r2, [r0, #80]	; 0x50
        huart->TxXferCount--;
 8004f36:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
 8004f3a:	b292      	uxth	r2, r2
 8004f3c:	3a01      	subs	r2, #1
 8004f3e:	b292      	uxth	r2, r2
 8004f40:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
 8004f44:	e7e1      	b.n	8004f0a <UART_TxISR_16BIT_FIFOEN+0x3c>
	...

08004f48 <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 8004f48:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8004f4c:	2b20      	cmp	r3, #32
 8004f4e:	d150      	bne.n	8004ff2 <HAL_UART_Transmit_IT+0xaa>
    if ((pData == NULL) || (Size == 0U))
 8004f50:	2900      	cmp	r1, #0
 8004f52:	d050      	beq.n	8004ff6 <HAL_UART_Transmit_IT+0xae>
 8004f54:	2a00      	cmp	r2, #0
 8004f56:	d050      	beq.n	8004ffa <HAL_UART_Transmit_IT+0xb2>
    __HAL_LOCK(huart);
 8004f58:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d04e      	beq.n	8004ffe <HAL_UART_Transmit_IT+0xb6>
 8004f60:	2301      	movs	r3, #1
 8004f62:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->pTxBuffPtr  = pData;
 8004f66:	6501      	str	r1, [r0, #80]	; 0x50
    huart->TxXferSize  = Size;
 8004f68:	f8a0 2054 	strh.w	r2, [r0, #84]	; 0x54
    huart->TxXferCount = Size;
 8004f6c:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
    huart->TxISR       = NULL;
 8004f70:	2300      	movs	r3, #0
 8004f72:	6743      	str	r3, [r0, #116]	; 0x74
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f74:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f78:	2321      	movs	r3, #33	; 0x21
 8004f7a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8004f7e:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8004f80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f84:	d013      	beq.n	8004fae <HAL_UART_Transmit_IT+0x66>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f86:	6883      	ldr	r3, [r0, #8]
 8004f88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f8c:	d02b      	beq.n	8004fe6 <HAL_UART_Transmit_IT+0x9e>
        huart->TxISR = UART_TxISR_8BIT;
 8004f8e:	4b1d      	ldr	r3, [pc, #116]	; (8005004 <HAL_UART_Transmit_IT+0xbc>)
 8004f90:	6743      	str	r3, [r0, #116]	; 0x74
      __HAL_UNLOCK(huart);
 8004f92:	2300      	movs	r3, #0
 8004f94:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004f98:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f9a:	e852 3f00 	ldrex	r3, [r2]
 8004f9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa2:	e842 3100 	strex	r1, r3, [r2]
 8004fa6:	2900      	cmp	r1, #0
 8004fa8:	d1f6      	bne.n	8004f98 <HAL_UART_Transmit_IT+0x50>
    return HAL_OK;
 8004faa:	2000      	movs	r0, #0
 8004fac:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fae:	6883      	ldr	r3, [r0, #8]
 8004fb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fb4:	d011      	beq.n	8004fda <HAL_UART_Transmit_IT+0x92>
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8004fb6:	4b14      	ldr	r3, [pc, #80]	; (8005008 <HAL_UART_Transmit_IT+0xc0>)
 8004fb8:	6743      	str	r3, [r0, #116]	; 0x74
      __HAL_UNLOCK(huart);
 8004fba:	2300      	movs	r3, #0
 8004fbc:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8004fc0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc2:	f102 0308 	add.w	r3, r2, #8
 8004fc6:	e853 3f00 	ldrex	r3, [r3]
 8004fca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fce:	3208      	adds	r2, #8
 8004fd0:	e842 3100 	strex	r1, r3, [r2]
 8004fd4:	2900      	cmp	r1, #0
 8004fd6:	d1f3      	bne.n	8004fc0 <HAL_UART_Transmit_IT+0x78>
 8004fd8:	e7e7      	b.n	8004faa <HAL_UART_Transmit_IT+0x62>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fda:	6903      	ldr	r3, [r0, #16]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d1ea      	bne.n	8004fb6 <HAL_UART_Transmit_IT+0x6e>
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8004fe0:	4b0a      	ldr	r3, [pc, #40]	; (800500c <HAL_UART_Transmit_IT+0xc4>)
 8004fe2:	6743      	str	r3, [r0, #116]	; 0x74
 8004fe4:	e7e9      	b.n	8004fba <HAL_UART_Transmit_IT+0x72>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fe6:	6903      	ldr	r3, [r0, #16]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d1d0      	bne.n	8004f8e <HAL_UART_Transmit_IT+0x46>
        huart->TxISR = UART_TxISR_16BIT;
 8004fec:	4b08      	ldr	r3, [pc, #32]	; (8005010 <HAL_UART_Transmit_IT+0xc8>)
 8004fee:	6743      	str	r3, [r0, #116]	; 0x74
 8004ff0:	e7cf      	b.n	8004f92 <HAL_UART_Transmit_IT+0x4a>
    return HAL_BUSY;
 8004ff2:	2002      	movs	r0, #2
 8004ff4:	4770      	bx	lr
      return HAL_ERROR;
 8004ff6:	2001      	movs	r0, #1
 8004ff8:	4770      	bx	lr
 8004ffa:	2001      	movs	r0, #1
 8004ffc:	4770      	bx	lr
    __HAL_LOCK(huart);
 8004ffe:	2002      	movs	r0, #2
}
 8005000:	4770      	bx	lr
 8005002:	bf00      	nop
 8005004:	08004dab 	.word	0x08004dab
 8005008:	08004e5b 	.word	0x08004e5b
 800500c:	08004ecf 	.word	0x08004ecf
 8005010:	08004e01 	.word	0x08004e01

08005014 <HAL_UART_DMAStop>:
{
 8005014:	b538      	push	{r3, r4, r5, lr}
 8005016:	4604      	mov	r4, r0
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005018:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800501c:	f8d0 5088 	ldr.w	r5, [r0, #136]	; 0x88
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005020:	6803      	ldr	r3, [r0, #0]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005028:	d001      	beq.n	800502e <HAL_UART_DMAStop+0x1a>
 800502a:	2a21      	cmp	r2, #33	; 0x21
 800502c:	d008      	beq.n	8005040 <HAL_UART_DMAStop+0x2c>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800502e:	6823      	ldr	r3, [r4, #0]
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005036:	d042      	beq.n	80050be <HAL_UART_DMAStop+0xaa>
 8005038:	2d22      	cmp	r5, #34	; 0x22
 800503a:	d020      	beq.n	800507e <HAL_UART_DMAStop+0x6a>
  return HAL_OK;
 800503c:	2000      	movs	r0, #0
 800503e:	e03f      	b.n	80050c0 <HAL_UART_DMAStop+0xac>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005040:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005042:	f102 0308 	add.w	r3, r2, #8
 8005046:	e853 3f00 	ldrex	r3, [r3]
 800504a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800504e:	3208      	adds	r2, #8
 8005050:	e842 3100 	strex	r1, r3, [r2]
 8005054:	2900      	cmp	r1, #0
 8005056:	d1f3      	bne.n	8005040 <HAL_UART_DMAStop+0x2c>
    if (huart->hdmatx != NULL)
 8005058:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800505a:	b110      	cbz	r0, 8005062 <HAL_UART_DMAStop+0x4e>
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800505c:	f7fc fe2a 	bl	8001cb4 <HAL_DMA_Abort>
 8005060:	b918      	cbnz	r0, 800506a <HAL_UART_DMAStop+0x56>
    UART_EndTxTransfer(huart);
 8005062:	4620      	mov	r0, r4
 8005064:	f7ff fe5d 	bl	8004d22 <UART_EndTxTransfer>
 8005068:	e7e1      	b.n	800502e <HAL_UART_DMAStop+0x1a>
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800506a:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800506c:	f7fc fef3 	bl	8001e56 <HAL_DMA_GetError>
 8005070:	2820      	cmp	r0, #32
 8005072:	d1f6      	bne.n	8005062 <HAL_UART_DMAStop+0x4e>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005074:	2310      	movs	r3, #16
 8005076:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
          return HAL_TIMEOUT;
 800507a:	2003      	movs	r0, #3
 800507c:	e020      	b.n	80050c0 <HAL_UART_DMAStop+0xac>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800507e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005080:	f102 0308 	add.w	r3, r2, #8
 8005084:	e853 3f00 	ldrex	r3, [r3]
 8005088:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800508c:	3208      	adds	r2, #8
 800508e:	e842 3100 	strex	r1, r3, [r2]
 8005092:	2900      	cmp	r1, #0
 8005094:	d1f3      	bne.n	800507e <HAL_UART_DMAStop+0x6a>
    if (huart->hdmarx != NULL)
 8005096:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8005098:	b110      	cbz	r0, 80050a0 <HAL_UART_DMAStop+0x8c>
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800509a:	f7fc fe0b 	bl	8001cb4 <HAL_DMA_Abort>
 800509e:	b920      	cbnz	r0, 80050aa <HAL_UART_DMAStop+0x96>
    UART_EndRxTransfer(huart);
 80050a0:	4620      	mov	r0, r4
 80050a2:	f7ff fe57 	bl	8004d54 <UART_EndRxTransfer>
  return HAL_OK;
 80050a6:	2000      	movs	r0, #0
 80050a8:	e00a      	b.n	80050c0 <HAL_UART_DMAStop+0xac>
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80050aa:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80050ac:	f7fc fed3 	bl	8001e56 <HAL_DMA_GetError>
 80050b0:	2820      	cmp	r0, #32
 80050b2:	d1f5      	bne.n	80050a0 <HAL_UART_DMAStop+0x8c>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80050b4:	2310      	movs	r3, #16
 80050b6:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
          return HAL_TIMEOUT;
 80050ba:	2003      	movs	r0, #3
 80050bc:	e000      	b.n	80050c0 <HAL_UART_DMAStop+0xac>
  return HAL_OK;
 80050be:	2000      	movs	r0, #0
}
 80050c0:	bd38      	pop	{r3, r4, r5, pc}

080050c2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80050c2:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80050c4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c6:	e852 3f00 	ldrex	r3, [r2]
 80050ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ce:	e842 3100 	strex	r1, r3, [r2]
 80050d2:	2900      	cmp	r1, #0
 80050d4:	d1f6      	bne.n	80050c4 <UART_EndTransmit_IT+0x2>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80050d6:	2320      	movs	r3, #32
 80050d8:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80050dc:	2300      	movs	r3, #0
 80050de:	6743      	str	r3, [r0, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80050e0:	f003 f930 	bl	8008344 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050e4:	bd08      	pop	{r3, pc}

080050e6 <HAL_UART_RxHalfCpltCallback>:
}
 80050e6:	4770      	bx	lr

080050e8 <UART_DMAError>:
{
 80050e8:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80050ea:	6a84      	ldr	r4, [r0, #40]	; 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 80050ec:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80050f0:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80050f4:	6823      	ldr	r3, [r4, #0]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80050fc:	d001      	beq.n	8005102 <UART_DMAError+0x1a>
 80050fe:	2a21      	cmp	r2, #33	; 0x21
 8005100:	d010      	beq.n	8005124 <UART_DMAError+0x3c>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005102:	6823      	ldr	r3, [r4, #0]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	f013 0f40 	tst.w	r3, #64	; 0x40
 800510a:	d001      	beq.n	8005110 <UART_DMAError+0x28>
 800510c:	2d22      	cmp	r5, #34	; 0x22
 800510e:	d010      	beq.n	8005132 <UART_DMAError+0x4a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005110:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005114:	f043 0310 	orr.w	r3, r3, #16
 8005118:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  HAL_UART_ErrorCallback(huart);
 800511c:	4620      	mov	r0, r4
 800511e:	f003 f929 	bl	8008374 <HAL_UART_ErrorCallback>
}
 8005122:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 8005124:	2300      	movs	r3, #0
 8005126:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800512a:	4620      	mov	r0, r4
 800512c:	f7ff fdf9 	bl	8004d22 <UART_EndTxTransfer>
 8005130:	e7e7      	b.n	8005102 <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 8005132:	2300      	movs	r3, #0
 8005134:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8005138:	4620      	mov	r0, r4
 800513a:	f7ff fe0b 	bl	8004d54 <UART_EndRxTransfer>
 800513e:	e7e7      	b.n	8005110 <UART_DMAError+0x28>

08005140 <UART_DMAAbortOnError>:
{
 8005140:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005142:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8005144:	2300      	movs	r3, #0
 8005146:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800514a:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 800514e:	f003 f911 	bl	8008374 <HAL_UART_ErrorCallback>
}
 8005152:	bd08      	pop	{r3, pc}

08005154 <HAL_UARTEx_RxEventCallback>:
}
 8005154:	4770      	bx	lr
	...

08005158 <HAL_UART_IRQHandler>:
{
 8005158:	b570      	push	{r4, r5, r6, lr}
 800515a:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800515c:	6801      	ldr	r1, [r0, #0]
 800515e:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005160:	6808      	ldr	r0, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005162:	688d      	ldr	r5, [r1, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005164:	f640 020f 	movw	r2, #2063	; 0x80f
  if (errorflags == 0U)
 8005168:	401a      	ands	r2, r3
 800516a:	d108      	bne.n	800517e <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800516c:	f013 0f20 	tst.w	r3, #32
 8005170:	d005      	beq.n	800517e <HAL_UART_IRQHandler+0x26>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005172:	f010 0f20 	tst.w	r0, #32
 8005176:	d134      	bne.n	80051e2 <HAL_UART_IRQHandler+0x8a>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005178:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 800517c:	d131      	bne.n	80051e2 <HAL_UART_IRQHandler+0x8a>
  if ((errorflags != 0U)
 800517e:	b12a      	cbz	r2, 800518c <HAL_UART_IRQHandler+0x34>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005180:	4a95      	ldr	r2, [pc, #596]	; (80053d8 <HAL_UART_IRQHandler+0x280>)
 8005182:	402a      	ands	r2, r5
 8005184:	d133      	bne.n	80051ee <HAL_UART_IRQHandler+0x96>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005186:	4e95      	ldr	r6, [pc, #596]	; (80053dc <HAL_UART_IRQHandler+0x284>)
 8005188:	4230      	tst	r0, r6
 800518a:	d130      	bne.n	80051ee <HAL_UART_IRQHandler+0x96>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800518c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800518e:	2a01      	cmp	r2, #1
 8005190:	f000 80c3 	beq.w	800531a <HAL_UART_IRQHandler+0x1c2>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005194:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8005198:	d003      	beq.n	80051a2 <HAL_UART_IRQHandler+0x4a>
 800519a:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
 800519e:	f040 815b 	bne.w	8005458 <HAL_UART_IRQHandler+0x300>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80051a2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80051a6:	d007      	beq.n	80051b8 <HAL_UART_IRQHandler+0x60>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80051a8:	f010 0f80 	tst.w	r0, #128	; 0x80
 80051ac:	f040 815b 	bne.w	8005466 <HAL_UART_IRQHandler+0x30e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80051b0:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
 80051b4:	f040 8157 	bne.w	8005466 <HAL_UART_IRQHandler+0x30e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80051b8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80051bc:	d003      	beq.n	80051c6 <HAL_UART_IRQHandler+0x6e>
 80051be:	f010 0f40 	tst.w	r0, #64	; 0x40
 80051c2:	f040 8157 	bne.w	8005474 <HAL_UART_IRQHandler+0x31c>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80051c6:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 80051ca:	d003      	beq.n	80051d4 <HAL_UART_IRQHandler+0x7c>
 80051cc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80051d0:	f040 8154 	bne.w	800547c <HAL_UART_IRQHandler+0x324>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80051d4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80051d8:	d002      	beq.n	80051e0 <HAL_UART_IRQHandler+0x88>
 80051da:	2800      	cmp	r0, #0
 80051dc:	f2c0 8152 	blt.w	8005484 <HAL_UART_IRQHandler+0x32c>
}
 80051e0:	bd70      	pop	{r4, r5, r6, pc}
      if (huart->RxISR != NULL)
 80051e2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d0fb      	beq.n	80051e0 <HAL_UART_IRQHandler+0x88>
        huart->RxISR(huart);
 80051e8:	4620      	mov	r0, r4
 80051ea:	4798      	blx	r3
      return;
 80051ec:	e7f8      	b.n	80051e0 <HAL_UART_IRQHandler+0x88>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80051ee:	f013 0f01 	tst.w	r3, #1
 80051f2:	d009      	beq.n	8005208 <HAL_UART_IRQHandler+0xb0>
 80051f4:	f410 7f80 	tst.w	r0, #256	; 0x100
 80051f8:	d006      	beq.n	8005208 <HAL_UART_IRQHandler+0xb0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80051fa:	2601      	movs	r6, #1
 80051fc:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80051fe:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8005202:	4331      	orrs	r1, r6
 8005204:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005208:	f013 0f02 	tst.w	r3, #2
 800520c:	d00b      	beq.n	8005226 <HAL_UART_IRQHandler+0xce>
 800520e:	f015 0f01 	tst.w	r5, #1
 8005212:	d008      	beq.n	8005226 <HAL_UART_IRQHandler+0xce>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005214:	6821      	ldr	r1, [r4, #0]
 8005216:	2602      	movs	r6, #2
 8005218:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800521a:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800521e:	f041 0104 	orr.w	r1, r1, #4
 8005222:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005226:	f013 0f04 	tst.w	r3, #4
 800522a:	d00b      	beq.n	8005244 <HAL_UART_IRQHandler+0xec>
 800522c:	f015 0f01 	tst.w	r5, #1
 8005230:	d008      	beq.n	8005244 <HAL_UART_IRQHandler+0xec>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005232:	6821      	ldr	r1, [r4, #0]
 8005234:	2604      	movs	r6, #4
 8005236:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005238:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800523c:	f041 0102 	orr.w	r1, r1, #2
 8005240:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005244:	f013 0f08 	tst.w	r3, #8
 8005248:	d00b      	beq.n	8005262 <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800524a:	f010 0f20 	tst.w	r0, #32
 800524e:	d100      	bne.n	8005252 <HAL_UART_IRQHandler+0xfa>
 8005250:	b13a      	cbz	r2, 8005262 <HAL_UART_IRQHandler+0x10a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005252:	6822      	ldr	r2, [r4, #0]
 8005254:	2108      	movs	r1, #8
 8005256:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005258:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800525c:	430a      	orrs	r2, r1
 800525e:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005262:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8005266:	d00c      	beq.n	8005282 <HAL_UART_IRQHandler+0x12a>
 8005268:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 800526c:	d009      	beq.n	8005282 <HAL_UART_IRQHandler+0x12a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800526e:	6822      	ldr	r2, [r4, #0]
 8005270:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005274:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005276:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800527a:	f042 0220 	orr.w	r2, r2, #32
 800527e:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005282:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8005286:	2a00      	cmp	r2, #0
 8005288:	d0aa      	beq.n	80051e0 <HAL_UART_IRQHandler+0x88>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800528a:	f013 0f20 	tst.w	r3, #32
 800528e:	d009      	beq.n	80052a4 <HAL_UART_IRQHandler+0x14c>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005290:	f010 0f20 	tst.w	r0, #32
 8005294:	d102      	bne.n	800529c <HAL_UART_IRQHandler+0x144>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005296:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 800529a:	d003      	beq.n	80052a4 <HAL_UART_IRQHandler+0x14c>
        if (huart->RxISR != NULL)
 800529c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800529e:	b10b      	cbz	r3, 80052a4 <HAL_UART_IRQHandler+0x14c>
          huart->RxISR(huart);
 80052a0:	4620      	mov	r0, r4
 80052a2:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 80052a4:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80052a8:	6823      	ldr	r3, [r4, #0]
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	f013 0f40 	tst.w	r3, #64	; 0x40
 80052b0:	d102      	bne.n	80052b8 <HAL_UART_IRQHandler+0x160>
 80052b2:	f012 0f28 	tst.w	r2, #40	; 0x28
 80052b6:	d029      	beq.n	800530c <HAL_UART_IRQHandler+0x1b4>
        UART_EndRxTransfer(huart);
 80052b8:	4620      	mov	r0, r4
 80052ba:	f7ff fd4b 	bl	8004d54 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052be:	6823      	ldr	r3, [r4, #0]
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80052c6:	d01d      	beq.n	8005304 <HAL_UART_IRQHandler+0x1ac>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052c8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ca:	f102 0308 	add.w	r3, r2, #8
 80052ce:	e853 3f00 	ldrex	r3, [r3]
 80052d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d6:	3208      	adds	r2, #8
 80052d8:	e842 3100 	strex	r1, r3, [r2]
 80052dc:	2900      	cmp	r1, #0
 80052de:	d1f3      	bne.n	80052c8 <HAL_UART_IRQHandler+0x170>
          if (huart->hdmarx != NULL)
 80052e0:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80052e2:	b15b      	cbz	r3, 80052fc <HAL_UART_IRQHandler+0x1a4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80052e4:	4a3e      	ldr	r2, [pc, #248]	; (80053e0 <HAL_UART_IRQHandler+0x288>)
 80052e6:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80052e8:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80052ea:	f7fc fd19 	bl	8001d20 <HAL_DMA_Abort_IT>
 80052ee:	2800      	cmp	r0, #0
 80052f0:	f43f af76 	beq.w	80051e0 <HAL_UART_IRQHandler+0x88>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80052f4:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80052f6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80052f8:	4798      	blx	r3
 80052fa:	e771      	b.n	80051e0 <HAL_UART_IRQHandler+0x88>
            HAL_UART_ErrorCallback(huart);
 80052fc:	4620      	mov	r0, r4
 80052fe:	f003 f839 	bl	8008374 <HAL_UART_ErrorCallback>
 8005302:	e76d      	b.n	80051e0 <HAL_UART_IRQHandler+0x88>
          HAL_UART_ErrorCallback(huart);
 8005304:	4620      	mov	r0, r4
 8005306:	f003 f835 	bl	8008374 <HAL_UART_ErrorCallback>
 800530a:	e769      	b.n	80051e0 <HAL_UART_IRQHandler+0x88>
        HAL_UART_ErrorCallback(huart);
 800530c:	4620      	mov	r0, r4
 800530e:	f003 f831 	bl	8008374 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005312:	2300      	movs	r3, #0
 8005314:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    return;
 8005318:	e762      	b.n	80051e0 <HAL_UART_IRQHandler+0x88>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800531a:	f013 0f10 	tst.w	r3, #16
 800531e:	f43f af39 	beq.w	8005194 <HAL_UART_IRQHandler+0x3c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005322:	f010 0f10 	tst.w	r0, #16
 8005326:	f43f af35 	beq.w	8005194 <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800532a:	2310      	movs	r3, #16
 800532c:	620b      	str	r3, [r1, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800532e:	6823      	ldr	r3, [r4, #0]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005336:	d055      	beq.n	80053e4 <HAL_UART_IRQHandler+0x28c>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005338:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800533a:	6813      	ldr	r3, [r2, #0]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8005340:	2b00      	cmp	r3, #0
 8005342:	f43f af4d 	beq.w	80051e0 <HAL_UART_IRQHandler+0x88>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005346:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800534a:	4299      	cmp	r1, r3
 800534c:	f67f af48 	bls.w	80051e0 <HAL_UART_IRQHandler+0x88>
        huart->RxXferCount = nb_remaining_rx_data;
 8005350:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005354:	6813      	ldr	r3, [r2, #0]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f013 0f20 	tst.w	r3, #32
 800535c:	d131      	bne.n	80053c2 <HAL_UART_IRQHandler+0x26a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800535e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005360:	e852 3f00 	ldrex	r3, [r2]
 8005364:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005368:	e842 3100 	strex	r1, r3, [r2]
 800536c:	2900      	cmp	r1, #0
 800536e:	d1f6      	bne.n	800535e <HAL_UART_IRQHandler+0x206>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005370:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005372:	f102 0308 	add.w	r3, r2, #8
 8005376:	e853 3f00 	ldrex	r3, [r3]
 800537a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800537e:	3208      	adds	r2, #8
 8005380:	e842 3100 	strex	r1, r3, [r2]
 8005384:	2900      	cmp	r1, #0
 8005386:	d1f3      	bne.n	8005370 <HAL_UART_IRQHandler+0x218>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005388:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800538a:	f102 0308 	add.w	r3, r2, #8
 800538e:	e853 3f00 	ldrex	r3, [r3]
 8005392:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005396:	3208      	adds	r2, #8
 8005398:	e842 3100 	strex	r1, r3, [r2]
 800539c:	2900      	cmp	r1, #0
 800539e:	d1f3      	bne.n	8005388 <HAL_UART_IRQHandler+0x230>
          huart->RxState = HAL_UART_STATE_READY;
 80053a0:	2320      	movs	r3, #32
 80053a2:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053a6:	2300      	movs	r3, #0
 80053a8:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053aa:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ac:	e852 3f00 	ldrex	r3, [r2]
 80053b0:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b4:	e842 3100 	strex	r1, r3, [r2]
 80053b8:	2900      	cmp	r1, #0
 80053ba:	d1f6      	bne.n	80053aa <HAL_UART_IRQHandler+0x252>
          (void)HAL_DMA_Abort(huart->hdmarx);
 80053bc:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80053be:	f7fc fc79 	bl	8001cb4 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80053c2:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80053c6:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	1ac9      	subs	r1, r1, r3
 80053ce:	b289      	uxth	r1, r1
 80053d0:	4620      	mov	r0, r4
 80053d2:	f7ff febf 	bl	8005154 <HAL_UARTEx_RxEventCallback>
      return;
 80053d6:	e703      	b.n	80051e0 <HAL_UART_IRQHandler+0x88>
 80053d8:	10000001 	.word	0x10000001
 80053dc:	04000120 	.word	0x04000120
 80053e0:	08005141 	.word	0x08005141
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80053e4:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80053e8:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	1ac9      	subs	r1, r1, r3
 80053f0:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 80053f2:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	f43f aef1 	beq.w	80051e0 <HAL_UART_IRQHandler+0x88>
          && (nb_rx_data > 0U))
 80053fe:	2900      	cmp	r1, #0
 8005400:	f43f aeee 	beq.w	80051e0 <HAL_UART_IRQHandler+0x88>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005404:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005406:	e852 3f00 	ldrex	r3, [r2]
 800540a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800540e:	e842 3000 	strex	r0, r3, [r2]
 8005412:	2800      	cmp	r0, #0
 8005414:	d1f6      	bne.n	8005404 <HAL_UART_IRQHandler+0x2ac>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005416:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005418:	f102 0308 	add.w	r3, r2, #8
 800541c:	e853 3f00 	ldrex	r3, [r3]
 8005420:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005424:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005428:	3208      	adds	r2, #8
 800542a:	e842 3000 	strex	r0, r3, [r2]
 800542e:	2800      	cmp	r0, #0
 8005430:	d1f1      	bne.n	8005416 <HAL_UART_IRQHandler+0x2be>
        huart->RxState = HAL_UART_STATE_READY;
 8005432:	2320      	movs	r3, #32
 8005434:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005438:	2300      	movs	r3, #0
 800543a:	66e3      	str	r3, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 800543c:	6723      	str	r3, [r4, #112]	; 0x70
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800543e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005440:	e852 3f00 	ldrex	r3, [r2]
 8005444:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005448:	e842 3000 	strex	r0, r3, [r2]
 800544c:	2800      	cmp	r0, #0
 800544e:	d1f6      	bne.n	800543e <HAL_UART_IRQHandler+0x2e6>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005450:	4620      	mov	r0, r4
 8005452:	f7ff fe7f 	bl	8005154 <HAL_UARTEx_RxEventCallback>
      return;
 8005456:	e6c3      	b.n	80051e0 <HAL_UART_IRQHandler+0x88>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005458:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800545c:	620b      	str	r3, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 800545e:	4620      	mov	r0, r4
 8005460:	f000 fc1a 	bl	8005c98 <HAL_UARTEx_WakeupCallback>
    return;
 8005464:	e6bc      	b.n	80051e0 <HAL_UART_IRQHandler+0x88>
    if (huart->TxISR != NULL)
 8005466:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8005468:	2b00      	cmp	r3, #0
 800546a:	f43f aeb9 	beq.w	80051e0 <HAL_UART_IRQHandler+0x88>
      huart->TxISR(huart);
 800546e:	4620      	mov	r0, r4
 8005470:	4798      	blx	r3
    return;
 8005472:	e6b5      	b.n	80051e0 <HAL_UART_IRQHandler+0x88>
    UART_EndTransmit_IT(huart);
 8005474:	4620      	mov	r0, r4
 8005476:	f7ff fe24 	bl	80050c2 <UART_EndTransmit_IT>
    return;
 800547a:	e6b1      	b.n	80051e0 <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800547c:	4620      	mov	r0, r4
 800547e:	f000 fc0d 	bl	8005c9c <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 8005482:	e6ad      	b.n	80051e0 <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005484:	4620      	mov	r0, r4
 8005486:	f000 fc08 	bl	8005c9a <HAL_UARTEx_RxFifoFullCallback>
    return;
 800548a:	e6a9      	b.n	80051e0 <HAL_UART_IRQHandler+0x88>

0800548c <UART_DMARxHalfCplt>:
{
 800548c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800548e:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005490:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8005492:	2b01      	cmp	r3, #1
 8005494:	d002      	beq.n	800549c <UART_DMARxHalfCplt+0x10>
    HAL_UART_RxHalfCpltCallback(huart);
 8005496:	f7ff fe26 	bl	80050e6 <HAL_UART_RxHalfCpltCallback>
}
 800549a:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800549c:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 80054a0:	0849      	lsrs	r1, r1, #1
 80054a2:	f7ff fe57 	bl	8005154 <HAL_UARTEx_RxEventCallback>
 80054a6:	e7f8      	b.n	800549a <UART_DMARxHalfCplt+0xe>

080054a8 <UART_DMAReceiveCplt>:
{
 80054a8:	b508      	push	{r3, lr}
 80054aa:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80054ac:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f013 0f20 	tst.w	r3, #32
 80054b6:	d129      	bne.n	800550c <UART_DMAReceiveCplt+0x64>
    huart->RxXferCount = 0U;
 80054b8:	2300      	movs	r3, #0
 80054ba:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80054be:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c0:	e852 3f00 	ldrex	r3, [r2]
 80054c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054c8:	e842 3100 	strex	r1, r3, [r2]
 80054cc:	2900      	cmp	r1, #0
 80054ce:	d1f6      	bne.n	80054be <UART_DMAReceiveCplt+0x16>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054d0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d2:	f102 0308 	add.w	r3, r2, #8
 80054d6:	e853 3f00 	ldrex	r3, [r3]
 80054da:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054de:	3208      	adds	r2, #8
 80054e0:	e842 3100 	strex	r1, r3, [r2]
 80054e4:	2900      	cmp	r1, #0
 80054e6:	d1f3      	bne.n	80054d0 <UART_DMAReceiveCplt+0x28>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054e8:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ea:	f102 0308 	add.w	r3, r2, #8
 80054ee:	e853 3f00 	ldrex	r3, [r3]
 80054f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f6:	3208      	adds	r2, #8
 80054f8:	e842 3100 	strex	r1, r3, [r2]
 80054fc:	2900      	cmp	r1, #0
 80054fe:	d1f3      	bne.n	80054e8 <UART_DMAReceiveCplt+0x40>
    huart->RxState = HAL_UART_STATE_READY;
 8005500:	2320      	movs	r3, #32
 8005502:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005506:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8005508:	2b01      	cmp	r3, #1
 800550a:	d005      	beq.n	8005518 <UART_DMAReceiveCplt+0x70>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800550c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800550e:	2b01      	cmp	r3, #1
 8005510:	d00c      	beq.n	800552c <UART_DMAReceiveCplt+0x84>
    HAL_UART_RxCpltCallback(huart);
 8005512:	f002 ff2d 	bl	8008370 <HAL_UART_RxCpltCallback>
}
 8005516:	bd08      	pop	{r3, pc}
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005518:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800551a:	e852 3f00 	ldrex	r3, [r2]
 800551e:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005522:	e842 3100 	strex	r1, r3, [r2]
 8005526:	2900      	cmp	r1, #0
 8005528:	d1f6      	bne.n	8005518 <UART_DMAReceiveCplt+0x70>
 800552a:	e7ef      	b.n	800550c <UART_DMAReceiveCplt+0x64>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800552c:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8005530:	f7ff fe10 	bl	8005154 <HAL_UARTEx_RxEventCallback>
 8005534:	e7ef      	b.n	8005516 <UART_DMAReceiveCplt+0x6e>
	...

08005538 <UART_SetConfig>:
{
 8005538:	b570      	push	{r4, r5, r6, lr}
 800553a:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 800553c:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800553e:	6883      	ldr	r3, [r0, #8]
 8005540:	6902      	ldr	r2, [r0, #16]
 8005542:	4313      	orrs	r3, r2
 8005544:	6942      	ldr	r2, [r0, #20]
 8005546:	4313      	orrs	r3, r2
 8005548:	69c2      	ldr	r2, [r0, #28]
 800554a:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800554c:	6808      	ldr	r0, [r1, #0]
 800554e:	4a96      	ldr	r2, [pc, #600]	; (80057a8 <UART_SetConfig+0x270>)
 8005550:	4002      	ands	r2, r0
 8005552:	431a      	orrs	r2, r3
 8005554:	600a      	str	r2, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005556:	6822      	ldr	r2, [r4, #0]
 8005558:	6853      	ldr	r3, [r2, #4]
 800555a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800555e:	68e1      	ldr	r1, [r4, #12]
 8005560:	430b      	orrs	r3, r1
 8005562:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005564:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005566:	6822      	ldr	r2, [r4, #0]
 8005568:	4b90      	ldr	r3, [pc, #576]	; (80057ac <UART_SetConfig+0x274>)
 800556a:	429a      	cmp	r2, r3
 800556c:	d001      	beq.n	8005572 <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 800556e:	6a23      	ldr	r3, [r4, #32]
 8005570:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005572:	6893      	ldr	r3, [r2, #8]
 8005574:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005578:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800557c:	430b      	orrs	r3, r1
 800557e:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005580:	6822      	ldr	r2, [r4, #0]
 8005582:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005584:	f023 030f 	bic.w	r3, r3, #15
 8005588:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800558a:	430b      	orrs	r3, r1
 800558c:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800558e:	6823      	ldr	r3, [r4, #0]
 8005590:	4a87      	ldr	r2, [pc, #540]	; (80057b0 <UART_SetConfig+0x278>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d010      	beq.n	80055b8 <UART_SetConfig+0x80>
 8005596:	4a87      	ldr	r2, [pc, #540]	; (80057b4 <UART_SetConfig+0x27c>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d021      	beq.n	80055e0 <UART_SetConfig+0xa8>
 800559c:	4a86      	ldr	r2, [pc, #536]	; (80057b8 <UART_SetConfig+0x280>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d037      	beq.n	8005612 <UART_SetConfig+0xda>
 80055a2:	4a86      	ldr	r2, [pc, #536]	; (80057bc <UART_SetConfig+0x284>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d05c      	beq.n	8005662 <UART_SetConfig+0x12a>
 80055a8:	4a85      	ldr	r2, [pc, #532]	; (80057c0 <UART_SetConfig+0x288>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d06b      	beq.n	8005686 <UART_SetConfig+0x14e>
 80055ae:	4a7f      	ldr	r2, [pc, #508]	; (80057ac <UART_SetConfig+0x274>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d07d      	beq.n	80056b0 <UART_SetConfig+0x178>
 80055b4:	2210      	movs	r2, #16
 80055b6:	e03a      	b.n	800562e <UART_SetConfig+0xf6>
 80055b8:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 80055bc:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80055c0:	f002 0203 	and.w	r2, r2, #3
 80055c4:	2a03      	cmp	r2, #3
 80055c6:	d809      	bhi.n	80055dc <UART_SetConfig+0xa4>
 80055c8:	e8df f002 	tbb	[pc, r2]
 80055cc:	06870402 	.word	0x06870402
 80055d0:	2201      	movs	r2, #1
 80055d2:	e02c      	b.n	800562e <UART_SetConfig+0xf6>
 80055d4:	2204      	movs	r2, #4
 80055d6:	e02a      	b.n	800562e <UART_SetConfig+0xf6>
 80055d8:	2208      	movs	r2, #8
 80055da:	e028      	b.n	800562e <UART_SetConfig+0xf6>
 80055dc:	2210      	movs	r2, #16
 80055de:	e026      	b.n	800562e <UART_SetConfig+0xf6>
 80055e0:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 80055e4:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80055e8:	f002 020c 	and.w	r2, r2, #12
 80055ec:	2a0c      	cmp	r2, #12
 80055ee:	d80e      	bhi.n	800560e <UART_SetConfig+0xd6>
 80055f0:	e8df f002 	tbb	[pc, r2]
 80055f4:	0d0d0d07 	.word	0x0d0d0d07
 80055f8:	0d0d0d09 	.word	0x0d0d0d09
 80055fc:	0d0d0d75 	.word	0x0d0d0d75
 8005600:	0b          	.byte	0x0b
 8005601:	00          	.byte	0x00
 8005602:	2200      	movs	r2, #0
 8005604:	e013      	b.n	800562e <UART_SetConfig+0xf6>
 8005606:	2204      	movs	r2, #4
 8005608:	e011      	b.n	800562e <UART_SetConfig+0xf6>
 800560a:	2208      	movs	r2, #8
 800560c:	e00f      	b.n	800562e <UART_SetConfig+0xf6>
 800560e:	2210      	movs	r2, #16
 8005610:	e00d      	b.n	800562e <UART_SetConfig+0xf6>
 8005612:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 8005616:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800561a:	f002 0230 	and.w	r2, r2, #48	; 0x30
 800561e:	2a20      	cmp	r2, #32
 8005620:	d05f      	beq.n	80056e2 <UART_SetConfig+0x1aa>
 8005622:	d81a      	bhi.n	800565a <UART_SetConfig+0x122>
 8005624:	2a00      	cmp	r2, #0
 8005626:	d05e      	beq.n	80056e6 <UART_SetConfig+0x1ae>
 8005628:	2a10      	cmp	r2, #16
 800562a:	d15e      	bne.n	80056ea <UART_SetConfig+0x1b2>
 800562c:	2204      	movs	r2, #4
  if (UART_INSTANCE_LOWPOWER(huart))
 800562e:	495f      	ldr	r1, [pc, #380]	; (80057ac <UART_SetConfig+0x274>)
 8005630:	428b      	cmp	r3, r1
 8005632:	d076      	beq.n	8005722 <UART_SetConfig+0x1ea>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005634:	69e0      	ldr	r0, [r4, #28]
 8005636:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800563a:	f000 80c9 	beq.w	80057d0 <UART_SetConfig+0x298>
    switch (clocksource)
 800563e:	2a08      	cmp	r2, #8
 8005640:	f200 8134 	bhi.w	80058ac <UART_SetConfig+0x374>
 8005644:	e8df f012 	tbh	[pc, r2, lsl #1]
 8005648:	011900f7 	.word	0x011900f7
 800564c:	013200f5 	.word	0x013200f5
 8005650:	0132011c 	.word	0x0132011c
 8005654:	01320132 	.word	0x01320132
 8005658:	011f      	.short	0x011f
  UART_GETCLOCKSOURCE(huart, clocksource);
 800565a:	2a30      	cmp	r2, #48	; 0x30
 800565c:	d147      	bne.n	80056ee <UART_SetConfig+0x1b6>
 800565e:	2208      	movs	r2, #8
 8005660:	e7e5      	b.n	800562e <UART_SetConfig+0xf6>
 8005662:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 8005666:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800566a:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 800566e:	2a80      	cmp	r2, #128	; 0x80
 8005670:	d03f      	beq.n	80056f2 <UART_SetConfig+0x1ba>
 8005672:	d804      	bhi.n	800567e <UART_SetConfig+0x146>
 8005674:	b3fa      	cbz	r2, 80056f6 <UART_SetConfig+0x1be>
 8005676:	2a40      	cmp	r2, #64	; 0x40
 8005678:	d13f      	bne.n	80056fa <UART_SetConfig+0x1c2>
 800567a:	2204      	movs	r2, #4
 800567c:	e7d7      	b.n	800562e <UART_SetConfig+0xf6>
 800567e:	2ac0      	cmp	r2, #192	; 0xc0
 8005680:	d13d      	bne.n	80056fe <UART_SetConfig+0x1c6>
 8005682:	2208      	movs	r2, #8
 8005684:	e7d3      	b.n	800562e <UART_SetConfig+0xf6>
 8005686:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 800568a:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800568e:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8005692:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8005696:	d034      	beq.n	8005702 <UART_SetConfig+0x1ca>
 8005698:	d805      	bhi.n	80056a6 <UART_SetConfig+0x16e>
 800569a:	b3a2      	cbz	r2, 8005706 <UART_SetConfig+0x1ce>
 800569c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80056a0:	d133      	bne.n	800570a <UART_SetConfig+0x1d2>
 80056a2:	2204      	movs	r2, #4
 80056a4:	e7c3      	b.n	800562e <UART_SetConfig+0xf6>
 80056a6:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80056aa:	d130      	bne.n	800570e <UART_SetConfig+0x1d6>
 80056ac:	2208      	movs	r2, #8
 80056ae:	e7be      	b.n	800562e <UART_SetConfig+0xf6>
 80056b0:	f502 32c8 	add.w	r2, r2, #102400	; 0x19000
 80056b4:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80056b8:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 80056bc:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80056c0:	d027      	beq.n	8005712 <UART_SetConfig+0x1da>
 80056c2:	d805      	bhi.n	80056d0 <UART_SetConfig+0x198>
 80056c4:	b33a      	cbz	r2, 8005716 <UART_SetConfig+0x1de>
 80056c6:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80056ca:	d126      	bne.n	800571a <UART_SetConfig+0x1e2>
 80056cc:	2204      	movs	r2, #4
 80056ce:	e7ae      	b.n	800562e <UART_SetConfig+0xf6>
 80056d0:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 80056d4:	d123      	bne.n	800571e <UART_SetConfig+0x1e6>
 80056d6:	2208      	movs	r2, #8
 80056d8:	e7a9      	b.n	800562e <UART_SetConfig+0xf6>
 80056da:	2202      	movs	r2, #2
 80056dc:	e7a7      	b.n	800562e <UART_SetConfig+0xf6>
 80056de:	2202      	movs	r2, #2
 80056e0:	e7a5      	b.n	800562e <UART_SetConfig+0xf6>
 80056e2:	2202      	movs	r2, #2
 80056e4:	e7a3      	b.n	800562e <UART_SetConfig+0xf6>
 80056e6:	2200      	movs	r2, #0
 80056e8:	e7a1      	b.n	800562e <UART_SetConfig+0xf6>
 80056ea:	2210      	movs	r2, #16
 80056ec:	e79f      	b.n	800562e <UART_SetConfig+0xf6>
 80056ee:	2210      	movs	r2, #16
 80056f0:	e79d      	b.n	800562e <UART_SetConfig+0xf6>
 80056f2:	2202      	movs	r2, #2
 80056f4:	e79b      	b.n	800562e <UART_SetConfig+0xf6>
 80056f6:	2200      	movs	r2, #0
 80056f8:	e799      	b.n	800562e <UART_SetConfig+0xf6>
 80056fa:	2210      	movs	r2, #16
 80056fc:	e797      	b.n	800562e <UART_SetConfig+0xf6>
 80056fe:	2210      	movs	r2, #16
 8005700:	e795      	b.n	800562e <UART_SetConfig+0xf6>
 8005702:	2202      	movs	r2, #2
 8005704:	e793      	b.n	800562e <UART_SetConfig+0xf6>
 8005706:	2200      	movs	r2, #0
 8005708:	e791      	b.n	800562e <UART_SetConfig+0xf6>
 800570a:	2210      	movs	r2, #16
 800570c:	e78f      	b.n	800562e <UART_SetConfig+0xf6>
 800570e:	2210      	movs	r2, #16
 8005710:	e78d      	b.n	800562e <UART_SetConfig+0xf6>
 8005712:	2202      	movs	r2, #2
 8005714:	e78b      	b.n	800562e <UART_SetConfig+0xf6>
 8005716:	2200      	movs	r2, #0
 8005718:	e789      	b.n	800562e <UART_SetConfig+0xf6>
 800571a:	2210      	movs	r2, #16
 800571c:	e787      	b.n	800562e <UART_SetConfig+0xf6>
 800571e:	2210      	movs	r2, #16
 8005720:	e785      	b.n	800562e <UART_SetConfig+0xf6>
    switch (clocksource)
 8005722:	2a08      	cmp	r2, #8
 8005724:	f200 80b2 	bhi.w	800588c <UART_SetConfig+0x354>
 8005728:	e8df f002 	tbb	[pc, r2]
 800572c:	b03bb008 	.word	0xb03bb008
 8005730:	b0b0b038 	.word	0xb0b0b038
 8005734:	05          	.byte	0x05
 8005735:	00          	.byte	0x00
 8005736:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800573a:	e004      	b.n	8005746 <UART_SetConfig+0x20e>
        pclk = HAL_RCC_GetPCLK1Freq();
 800573c:	f7fe fdf2 	bl	8004324 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005740:	2800      	cmp	r0, #0
 8005742:	f000 80a5 	beq.w	8005890 <UART_SetConfig+0x358>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005746:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005748:	4b1e      	ldr	r3, [pc, #120]	; (80057c4 <UART_SetConfig+0x28c>)
 800574a:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800574e:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005752:	6865      	ldr	r5, [r4, #4]
 8005754:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8005758:	4299      	cmp	r1, r3
 800575a:	f200 809b 	bhi.w	8005894 <UART_SetConfig+0x35c>
 800575e:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8005762:	f200 8099 	bhi.w	8005898 <UART_SetConfig+0x360>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005766:	2600      	movs	r6, #0
 8005768:	4633      	mov	r3, r6
 800576a:	4631      	mov	r1, r6
 800576c:	f7fa fd98 	bl	80002a0 <__aeabi_uldivmod>
 8005770:	0209      	lsls	r1, r1, #8
 8005772:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8005776:	0200      	lsls	r0, r0, #8
 8005778:	086b      	lsrs	r3, r5, #1
 800577a:	18c0      	adds	r0, r0, r3
 800577c:	462a      	mov	r2, r5
 800577e:	4633      	mov	r3, r6
 8005780:	f141 0100 	adc.w	r1, r1, #0
 8005784:	f7fa fd8c 	bl	80002a0 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005788:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 800578c:	4b0e      	ldr	r3, [pc, #56]	; (80057c8 <UART_SetConfig+0x290>)
 800578e:	429a      	cmp	r2, r3
 8005790:	f200 8084 	bhi.w	800589c <UART_SetConfig+0x364>
          huart->Instance->BRR = usartdiv;
 8005794:	6823      	ldr	r3, [r4, #0]
 8005796:	60d8      	str	r0, [r3, #12]
 8005798:	4630      	mov	r0, r6
 800579a:	e065      	b.n	8005868 <UART_SetConfig+0x330>
        pclk = HAL_RCC_GetSysClockFreq();
 800579c:	f7fe f922 	bl	80039e4 <HAL_RCC_GetSysClockFreq>
        break;
 80057a0:	e7ce      	b.n	8005740 <UART_SetConfig+0x208>
        pclk = (uint32_t) HSI_VALUE;
 80057a2:	480a      	ldr	r0, [pc, #40]	; (80057cc <UART_SetConfig+0x294>)
 80057a4:	e7cf      	b.n	8005746 <UART_SetConfig+0x20e>
 80057a6:	bf00      	nop
 80057a8:	cfff69f3 	.word	0xcfff69f3
 80057ac:	40008000 	.word	0x40008000
 80057b0:	40013800 	.word	0x40013800
 80057b4:	40004400 	.word	0x40004400
 80057b8:	40004800 	.word	0x40004800
 80057bc:	40004c00 	.word	0x40004c00
 80057c0:	40005000 	.word	0x40005000
 80057c4:	080097c0 	.word	0x080097c0
 80057c8:	000ffcff 	.word	0x000ffcff
 80057cc:	00f42400 	.word	0x00f42400
    switch (clocksource)
 80057d0:	2a08      	cmp	r2, #8
 80057d2:	d865      	bhi.n	80058a0 <UART_SetConfig+0x368>
 80057d4:	e8df f002 	tbb	[pc, r2]
 80057d8:	64052707 	.word	0x64052707
 80057dc:	6464642a 	.word	0x6464642a
 80057e0:	0b          	.byte	0x0b
 80057e1:	00          	.byte	0x00
 80057e2:	4835      	ldr	r0, [pc, #212]	; (80058b8 <UART_SetConfig+0x380>)
 80057e4:	e003      	b.n	80057ee <UART_SetConfig+0x2b6>
        pclk = HAL_RCC_GetPCLK1Freq();
 80057e6:	f7fe fd9d 	bl	8004324 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80057ea:	2800      	cmp	r0, #0
 80057ec:	d05a      	beq.n	80058a4 <UART_SetConfig+0x36c>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80057ee:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80057f0:	4b32      	ldr	r3, [pc, #200]	; (80058bc <UART_SetConfig+0x384>)
 80057f2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80057f6:	fbb0 f0f3 	udiv	r0, r0, r3
 80057fa:	6862      	ldr	r2, [r4, #4]
 80057fc:	0853      	lsrs	r3, r2, #1
 80057fe:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8005802:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005806:	f1a3 0110 	sub.w	r1, r3, #16
 800580a:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800580e:	4291      	cmp	r1, r2
 8005810:	d84a      	bhi.n	80058a8 <UART_SetConfig+0x370>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005812:	b29a      	uxth	r2, r3
 8005814:	f022 020f 	bic.w	r2, r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005818:	f3c3 0342 	ubfx	r3, r3, #1, #3
 800581c:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 800581e:	6822      	ldr	r2, [r4, #0]
 8005820:	60d3      	str	r3, [r2, #12]
 8005822:	2000      	movs	r0, #0
 8005824:	e020      	b.n	8005868 <UART_SetConfig+0x330>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005826:	f7fe fd8f 	bl	8004348 <HAL_RCC_GetPCLK2Freq>
        break;
 800582a:	e7de      	b.n	80057ea <UART_SetConfig+0x2b2>
        pclk = HAL_RCC_GetSysClockFreq();
 800582c:	f7fe f8da 	bl	80039e4 <HAL_RCC_GetSysClockFreq>
        break;
 8005830:	e7db      	b.n	80057ea <UART_SetConfig+0x2b2>
    switch (clocksource)
 8005832:	4821      	ldr	r0, [pc, #132]	; (80058b8 <UART_SetConfig+0x380>)
 8005834:	e003      	b.n	800583e <UART_SetConfig+0x306>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005836:	f7fe fd75 	bl	8004324 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800583a:	2800      	cmp	r0, #0
 800583c:	d038      	beq.n	80058b0 <UART_SetConfig+0x378>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800583e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005840:	4b1e      	ldr	r3, [pc, #120]	; (80058bc <UART_SetConfig+0x384>)
 8005842:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8005846:	fbb0 f0f3 	udiv	r0, r0, r3
 800584a:	6863      	ldr	r3, [r4, #4]
 800584c:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8005850:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005854:	f1a0 0210 	sub.w	r2, r0, #16
 8005858:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800585c:	429a      	cmp	r2, r3
 800585e:	d829      	bhi.n	80058b4 <UART_SetConfig+0x37c>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005860:	6823      	ldr	r3, [r4, #0]
 8005862:	b280      	uxth	r0, r0
 8005864:	60d8      	str	r0, [r3, #12]
 8005866:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 8005868:	2301      	movs	r3, #1
 800586a:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800586e:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 8005872:	2300      	movs	r3, #0
 8005874:	6723      	str	r3, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 8005876:	6763      	str	r3, [r4, #116]	; 0x74
}
 8005878:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 800587a:	f7fe fd65 	bl	8004348 <HAL_RCC_GetPCLK2Freq>
        break;
 800587e:	e7dc      	b.n	800583a <UART_SetConfig+0x302>
        pclk = HAL_RCC_GetSysClockFreq();
 8005880:	f7fe f8b0 	bl	80039e4 <HAL_RCC_GetSysClockFreq>
        break;
 8005884:	e7d9      	b.n	800583a <UART_SetConfig+0x302>
        pclk = (uint32_t) LSE_VALUE;
 8005886:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800588a:	e7d8      	b.n	800583e <UART_SetConfig+0x306>
    switch (clocksource)
 800588c:	2001      	movs	r0, #1
 800588e:	e7eb      	b.n	8005868 <UART_SetConfig+0x330>
 8005890:	2000      	movs	r0, #0
 8005892:	e7e9      	b.n	8005868 <UART_SetConfig+0x330>
        ret = HAL_ERROR;
 8005894:	2001      	movs	r0, #1
 8005896:	e7e7      	b.n	8005868 <UART_SetConfig+0x330>
 8005898:	2001      	movs	r0, #1
 800589a:	e7e5      	b.n	8005868 <UART_SetConfig+0x330>
          ret = HAL_ERROR;
 800589c:	2001      	movs	r0, #1
 800589e:	e7e3      	b.n	8005868 <UART_SetConfig+0x330>
    switch (clocksource)
 80058a0:	2001      	movs	r0, #1
 80058a2:	e7e1      	b.n	8005868 <UART_SetConfig+0x330>
 80058a4:	2000      	movs	r0, #0
 80058a6:	e7df      	b.n	8005868 <UART_SetConfig+0x330>
        ret = HAL_ERROR;
 80058a8:	2001      	movs	r0, #1
 80058aa:	e7dd      	b.n	8005868 <UART_SetConfig+0x330>
    switch (clocksource)
 80058ac:	2001      	movs	r0, #1
 80058ae:	e7db      	b.n	8005868 <UART_SetConfig+0x330>
 80058b0:	2000      	movs	r0, #0
 80058b2:	e7d9      	b.n	8005868 <UART_SetConfig+0x330>
        ret = HAL_ERROR;
 80058b4:	2001      	movs	r0, #1
 80058b6:	e7d7      	b.n	8005868 <UART_SetConfig+0x330>
 80058b8:	00f42400 	.word	0x00f42400
 80058bc:	080097c0 	.word	0x080097c0

080058c0 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80058c0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80058c2:	f013 0f01 	tst.w	r3, #1
 80058c6:	d006      	beq.n	80058d6 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80058c8:	6802      	ldr	r2, [r0, #0]
 80058ca:	6853      	ldr	r3, [r2, #4]
 80058cc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80058d0:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80058d2:	430b      	orrs	r3, r1
 80058d4:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80058d6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80058d8:	f013 0f02 	tst.w	r3, #2
 80058dc:	d006      	beq.n	80058ec <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80058de:	6802      	ldr	r2, [r0, #0]
 80058e0:	6853      	ldr	r3, [r2, #4]
 80058e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058e6:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80058e8:	430b      	orrs	r3, r1
 80058ea:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80058ec:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80058ee:	f013 0f04 	tst.w	r3, #4
 80058f2:	d006      	beq.n	8005902 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80058f4:	6802      	ldr	r2, [r0, #0]
 80058f6:	6853      	ldr	r3, [r2, #4]
 80058f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058fc:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80058fe:	430b      	orrs	r3, r1
 8005900:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005902:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005904:	f013 0f08 	tst.w	r3, #8
 8005908:	d006      	beq.n	8005918 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800590a:	6802      	ldr	r2, [r0, #0]
 800590c:	6853      	ldr	r3, [r2, #4]
 800590e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005912:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8005914:	430b      	orrs	r3, r1
 8005916:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005918:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800591a:	f013 0f10 	tst.w	r3, #16
 800591e:	d006      	beq.n	800592e <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005920:	6802      	ldr	r2, [r0, #0]
 8005922:	6893      	ldr	r3, [r2, #8]
 8005924:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005928:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800592a:	430b      	orrs	r3, r1
 800592c:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800592e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005930:	f013 0f20 	tst.w	r3, #32
 8005934:	d006      	beq.n	8005944 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005936:	6802      	ldr	r2, [r0, #0]
 8005938:	6893      	ldr	r3, [r2, #8]
 800593a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800593e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8005940:	430b      	orrs	r3, r1
 8005942:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005944:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005946:	f013 0f40 	tst.w	r3, #64	; 0x40
 800594a:	d00a      	beq.n	8005962 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800594c:	6802      	ldr	r2, [r0, #0]
 800594e:	6853      	ldr	r3, [r2, #4]
 8005950:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005954:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8005956:	430b      	orrs	r3, r1
 8005958:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800595a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800595c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005960:	d00b      	beq.n	800597a <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005962:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005964:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005968:	d006      	beq.n	8005978 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800596a:	6802      	ldr	r2, [r0, #0]
 800596c:	6853      	ldr	r3, [r2, #4]
 800596e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8005972:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8005974:	430b      	orrs	r3, r1
 8005976:	6053      	str	r3, [r2, #4]
}
 8005978:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800597a:	6802      	ldr	r2, [r0, #0]
 800597c:	6853      	ldr	r3, [r2, #4]
 800597e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005982:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8005984:	430b      	orrs	r3, r1
 8005986:	6053      	str	r3, [r2, #4]
 8005988:	e7eb      	b.n	8005962 <UART_AdvFeatureConfig+0xa2>

0800598a <UART_WaitOnFlagUntilTimeout>:
{
 800598a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800598e:	4605      	mov	r5, r0
 8005990:	460f      	mov	r7, r1
 8005992:	4616      	mov	r6, r2
 8005994:	4699      	mov	r9, r3
 8005996:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800599a:	682b      	ldr	r3, [r5, #0]
 800599c:	69dc      	ldr	r4, [r3, #28]
 800599e:	ea37 0404 	bics.w	r4, r7, r4
 80059a2:	bf0c      	ite	eq
 80059a4:	2401      	moveq	r4, #1
 80059a6:	2400      	movne	r4, #0
 80059a8:	42b4      	cmp	r4, r6
 80059aa:	d157      	bne.n	8005a5c <UART_WaitOnFlagUntilTimeout+0xd2>
    if (Timeout != HAL_MAX_DELAY)
 80059ac:	f1b8 3fff 	cmp.w	r8, #4294967295
 80059b0:	d0f3      	beq.n	800599a <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059b2:	f7fb ffe3 	bl	800197c <HAL_GetTick>
 80059b6:	eba0 0009 	sub.w	r0, r0, r9
 80059ba:	4540      	cmp	r0, r8
 80059bc:	d82f      	bhi.n	8005a1e <UART_WaitOnFlagUntilTimeout+0x94>
 80059be:	f1b8 0f00 	cmp.w	r8, #0
 80059c2:	d02c      	beq.n	8005a1e <UART_WaitOnFlagUntilTimeout+0x94>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80059c4:	682b      	ldr	r3, [r5, #0]
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	f012 0f04 	tst.w	r2, #4
 80059cc:	d0e5      	beq.n	800599a <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80059ce:	69da      	ldr	r2, [r3, #28]
 80059d0:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80059d4:	d0e1      	beq.n	800599a <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80059d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80059da:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80059dc:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059de:	e852 3f00 	ldrex	r3, [r2]
 80059e2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e6:	e842 3100 	strex	r1, r3, [r2]
 80059ea:	2900      	cmp	r1, #0
 80059ec:	d1f6      	bne.n	80059dc <UART_WaitOnFlagUntilTimeout+0x52>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059ee:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f0:	f102 0308 	add.w	r3, r2, #8
 80059f4:	e853 3f00 	ldrex	r3, [r3]
 80059f8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059fc:	3208      	adds	r2, #8
 80059fe:	e842 3100 	strex	r1, r3, [r2]
 8005a02:	2900      	cmp	r1, #0
 8005a04:	d1f3      	bne.n	80059ee <UART_WaitOnFlagUntilTimeout+0x64>
          huart->gState = HAL_UART_STATE_READY;
 8005a06:	2320      	movs	r3, #32
 8005a08:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005a0c:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a10:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
          __HAL_UNLOCK(huart);
 8005a14:	2300      	movs	r3, #0
 8005a16:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
          return HAL_TIMEOUT;
 8005a1a:	2003      	movs	r0, #3
 8005a1c:	e01f      	b.n	8005a5e <UART_WaitOnFlagUntilTimeout+0xd4>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005a1e:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a20:	e852 3f00 	ldrex	r3, [r2]
 8005a24:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a28:	e842 3100 	strex	r1, r3, [r2]
 8005a2c:	2900      	cmp	r1, #0
 8005a2e:	d1f6      	bne.n	8005a1e <UART_WaitOnFlagUntilTimeout+0x94>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a30:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a32:	f102 0308 	add.w	r3, r2, #8
 8005a36:	e853 3f00 	ldrex	r3, [r3]
 8005a3a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a3e:	3208      	adds	r2, #8
 8005a40:	e842 3100 	strex	r1, r3, [r2]
 8005a44:	2900      	cmp	r1, #0
 8005a46:	d1f3      	bne.n	8005a30 <UART_WaitOnFlagUntilTimeout+0xa6>
        huart->gState = HAL_UART_STATE_READY;
 8005a48:	2320      	movs	r3, #32
 8005a4a:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005a4e:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        __HAL_UNLOCK(huart);
 8005a52:	2300      	movs	r3, #0
 8005a54:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
        return HAL_TIMEOUT;
 8005a58:	2003      	movs	r0, #3
 8005a5a:	e000      	b.n	8005a5e <UART_WaitOnFlagUntilTimeout+0xd4>
  return HAL_OK;
 8005a5c:	2000      	movs	r0, #0
}
 8005a5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08005a62 <UART_CheckIdleState>:
{
 8005a62:	b530      	push	{r4, r5, lr}
 8005a64:	b083      	sub	sp, #12
 8005a66:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 8005a6e:	f7fb ff85 	bl	800197c <HAL_GetTick>
 8005a72:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a74:	6822      	ldr	r2, [r4, #0]
 8005a76:	6812      	ldr	r2, [r2, #0]
 8005a78:	f012 0f08 	tst.w	r2, #8
 8005a7c:	d10f      	bne.n	8005a9e <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005a7e:	6823      	ldr	r3, [r4, #0]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f013 0f04 	tst.w	r3, #4
 8005a86:	d118      	bne.n	8005aba <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 8005a88:	2320      	movs	r3, #32
 8005a8a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005a8e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a92:	2000      	movs	r0, #0
 8005a94:	66e0      	str	r0, [r4, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 8005a96:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8005a9a:	b003      	add	sp, #12
 8005a9c:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a9e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005aa2:	9300      	str	r3, [sp, #0]
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005aac:	4620      	mov	r0, r4
 8005aae:	f7ff ff6c 	bl	800598a <UART_WaitOnFlagUntilTimeout>
 8005ab2:	2800      	cmp	r0, #0
 8005ab4:	d0e3      	beq.n	8005a7e <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 8005ab6:	2003      	movs	r0, #3
 8005ab8:	e7ef      	b.n	8005a9a <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005aba:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005abe:	9300      	str	r3, [sp, #0]
 8005ac0:	462b      	mov	r3, r5
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005ac8:	4620      	mov	r0, r4
 8005aca:	f7ff ff5e 	bl	800598a <UART_WaitOnFlagUntilTimeout>
 8005ace:	2800      	cmp	r0, #0
 8005ad0:	d0da      	beq.n	8005a88 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 8005ad2:	2003      	movs	r0, #3
 8005ad4:	e7e1      	b.n	8005a9a <UART_CheckIdleState+0x38>

08005ad6 <HAL_UART_Init>:
  if (huart == NULL)
 8005ad6:	b378      	cbz	r0, 8005b38 <HAL_UART_Init+0x62>
{
 8005ad8:	b510      	push	{r4, lr}
 8005ada:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8005adc:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8005ae0:	b30b      	cbz	r3, 8005b26 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8005ae2:	2324      	movs	r3, #36	; 0x24
 8005ae4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8005ae8:	6822      	ldr	r2, [r4, #0]
 8005aea:	6813      	ldr	r3, [r2, #0]
 8005aec:	f023 0301 	bic.w	r3, r3, #1
 8005af0:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005af2:	4620      	mov	r0, r4
 8005af4:	f7ff fd20 	bl	8005538 <UART_SetConfig>
 8005af8:	2801      	cmp	r0, #1
 8005afa:	d013      	beq.n	8005b24 <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005afc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005afe:	b9bb      	cbnz	r3, 8005b30 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b00:	6822      	ldr	r2, [r4, #0]
 8005b02:	6853      	ldr	r3, [r2, #4]
 8005b04:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8005b08:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b0a:	6822      	ldr	r2, [r4, #0]
 8005b0c:	6893      	ldr	r3, [r2, #8]
 8005b0e:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8005b12:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8005b14:	6822      	ldr	r2, [r4, #0]
 8005b16:	6813      	ldr	r3, [r2, #0]
 8005b18:	f043 0301 	orr.w	r3, r3, #1
 8005b1c:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8005b1e:	4620      	mov	r0, r4
 8005b20:	f7ff ff9f 	bl	8005a62 <UART_CheckIdleState>
}
 8005b24:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8005b26:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 8005b2a:	f7fb faf7 	bl	800111c <HAL_UART_MspInit>
 8005b2e:	e7d8      	b.n	8005ae2 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8005b30:	4620      	mov	r0, r4
 8005b32:	f7ff fec5 	bl	80058c0 <UART_AdvFeatureConfig>
 8005b36:	e7e3      	b.n	8005b00 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8005b38:	2001      	movs	r0, #1
}
 8005b3a:	4770      	bx	lr

08005b3c <UART_Start_Receive_DMA>:
{
 8005b3c:	b510      	push	{r4, lr}
 8005b3e:	4604      	mov	r4, r0
 8005b40:	4613      	mov	r3, r2
  huart->pRxBuffPtr = pData;
 8005b42:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxXferSize = Size;
 8005b44:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005b4e:	2222      	movs	r2, #34	; 0x22
 8005b50:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  if (huart->hdmarx != NULL)
 8005b54:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8005b56:	b18a      	cbz	r2, 8005b7c <UART_Start_Receive_DMA+0x40>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005b58:	4922      	ldr	r1, [pc, #136]	; (8005be4 <UART_Start_Receive_DMA+0xa8>)
 8005b5a:	62d1      	str	r1, [r2, #44]	; 0x2c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005b5c:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8005b5e:	4922      	ldr	r1, [pc, #136]	; (8005be8 <UART_Start_Receive_DMA+0xac>)
 8005b60:	6311      	str	r1, [r2, #48]	; 0x30
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005b62:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8005b64:	4921      	ldr	r1, [pc, #132]	; (8005bec <UART_Start_Receive_DMA+0xb0>)
 8005b66:	6351      	str	r1, [r2, #52]	; 0x34
    huart->hdmarx->XferAbortCallback = NULL;
 8005b68:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8005b6a:	2100      	movs	r1, #0
 8005b6c:	6391      	str	r1, [r2, #56]	; 0x38
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005b6e:	6801      	ldr	r1, [r0, #0]
 8005b70:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8005b72:	3124      	adds	r1, #36	; 0x24
 8005b74:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 8005b76:	f7fc f853 	bl	8001c20 <HAL_DMA_Start_IT>
 8005b7a:	bb38      	cbnz	r0, 8005bcc <UART_Start_Receive_DMA+0x90>
  __HAL_UNLOCK(huart);
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005b82:	6923      	ldr	r3, [r4, #16]
 8005b84:	b143      	cbz	r3, 8005b98 <UART_Start_Receive_DMA+0x5c>
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b86:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b88:	e852 3f00 	ldrex	r3, [r2]
 8005b8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b90:	e842 3100 	strex	r1, r3, [r2]
 8005b94:	2900      	cmp	r1, #0
 8005b96:	d1f6      	bne.n	8005b86 <UART_Start_Receive_DMA+0x4a>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b98:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b9a:	f102 0308 	add.w	r3, r2, #8
 8005b9e:	e853 3f00 	ldrex	r3, [r3]
 8005ba2:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ba6:	3208      	adds	r2, #8
 8005ba8:	e842 3100 	strex	r1, r3, [r2]
 8005bac:	2900      	cmp	r1, #0
 8005bae:	d1f3      	bne.n	8005b98 <UART_Start_Receive_DMA+0x5c>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bb0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb2:	f102 0308 	add.w	r3, r2, #8
 8005bb6:	e853 3f00 	ldrex	r3, [r3]
 8005bba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bbe:	3208      	adds	r2, #8
 8005bc0:	e842 3100 	strex	r1, r3, [r2]
 8005bc4:	2900      	cmp	r1, #0
 8005bc6:	d1f3      	bne.n	8005bb0 <UART_Start_Receive_DMA+0x74>
  return HAL_OK;
 8005bc8:	2000      	movs	r0, #0
}
 8005bca:	bd10      	pop	{r4, pc}
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005bcc:	2310      	movs	r3, #16
 8005bce:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      __HAL_UNLOCK(huart);
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
      huart->RxState = HAL_UART_STATE_READY;
 8005bd8:	2320      	movs	r3, #32
 8005bda:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
      return HAL_ERROR;
 8005bde:	2001      	movs	r0, #1
 8005be0:	e7f3      	b.n	8005bca <UART_Start_Receive_DMA+0x8e>
 8005be2:	bf00      	nop
 8005be4:	080054a9 	.word	0x080054a9
 8005be8:	0800548d 	.word	0x0800548d
 8005bec:	080050e9 	.word	0x080050e9

08005bf0 <HAL_UART_Receive_DMA>:
{
 8005bf0:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8005bf2:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8005bf6:	2b20      	cmp	r3, #32
 8005bf8:	d11e      	bne.n	8005c38 <HAL_UART_Receive_DMA+0x48>
    if ((pData == NULL) || (Size == 0U))
 8005bfa:	b1f9      	cbz	r1, 8005c3c <HAL_UART_Receive_DMA+0x4c>
 8005bfc:	b302      	cbz	r2, 8005c40 <HAL_UART_Receive_DMA+0x50>
    __HAL_LOCK(huart);
 8005bfe:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d01e      	beq.n	8005c44 <HAL_UART_Receive_DMA+0x54>
 8005c06:	2301      	movs	r3, #1
 8005c08:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	66c3      	str	r3, [r0, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005c10:	6803      	ldr	r3, [r0, #0]
 8005c12:	4c0d      	ldr	r4, [pc, #52]	; (8005c48 <HAL_UART_Receive_DMA+0x58>)
 8005c14:	42a3      	cmp	r3, r4
 8005c16:	d00c      	beq.n	8005c32 <HAL_UART_Receive_DMA+0x42>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8005c1e:	d008      	beq.n	8005c32 <HAL_UART_Receive_DMA+0x42>
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005c20:	6804      	ldr	r4, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c22:	e854 3f00 	ldrex	r3, [r4]
 8005c26:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c2a:	e844 3500 	strex	r5, r3, [r4]
 8005c2e:	2d00      	cmp	r5, #0
 8005c30:	d1f6      	bne.n	8005c20 <HAL_UART_Receive_DMA+0x30>
    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005c32:	f7ff ff83 	bl	8005b3c <UART_Start_Receive_DMA>
 8005c36:	e000      	b.n	8005c3a <HAL_UART_Receive_DMA+0x4a>
    return HAL_BUSY;
 8005c38:	2002      	movs	r0, #2
}
 8005c3a:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8005c3c:	2001      	movs	r0, #1
 8005c3e:	e7fc      	b.n	8005c3a <HAL_UART_Receive_DMA+0x4a>
 8005c40:	2001      	movs	r0, #1
 8005c42:	e7fa      	b.n	8005c3a <HAL_UART_Receive_DMA+0x4a>
    __HAL_LOCK(huart);
 8005c44:	2002      	movs	r0, #2
 8005c46:	e7f8      	b.n	8005c3a <HAL_UART_Receive_DMA+0x4a>
 8005c48:	40008000 	.word	0x40008000

08005c4c <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005c4c:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8005c4e:	b92b      	cbnz	r3, 8005c5c <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 8005c50:	2301      	movs	r3, #1
 8005c52:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005c56:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 8005c5a:	4770      	bx	lr
{
 8005c5c:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005c5e:	6803      	ldr	r3, [r0, #0]
 8005c60:	689a      	ldr	r2, [r3, #8]
 8005c62:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005c66:	6899      	ldr	r1, [r3, #8]
 8005c68:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005c6a:	4d09      	ldr	r5, [pc, #36]	; (8005c90 <UARTEx_SetNbDataToProcess+0x44>)
 8005c6c:	5c6b      	ldrb	r3, [r5, r1]
 8005c6e:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005c70:	4c08      	ldr	r4, [pc, #32]	; (8005c94 <UARTEx_SetNbDataToProcess+0x48>)
 8005c72:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005c74:	fb93 f3f1 	sdiv	r3, r3, r1
 8005c78:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005c7c:	5cab      	ldrb	r3, [r5, r2]
 8005c7e:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005c80:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005c82:	fb93 f3f2 	sdiv	r3, r3, r2
 8005c86:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 8005c8a:	bc30      	pop	{r4, r5}
 8005c8c:	4770      	bx	lr
 8005c8e:	bf00      	nop
 8005c90:	080097e0 	.word	0x080097e0
 8005c94:	080097d8 	.word	0x080097d8

08005c98 <HAL_UARTEx_WakeupCallback>:
}
 8005c98:	4770      	bx	lr

08005c9a <HAL_UARTEx_RxFifoFullCallback>:
}
 8005c9a:	4770      	bx	lr

08005c9c <HAL_UARTEx_TxFifoEmptyCallback>:
}
 8005c9c:	4770      	bx	lr

08005c9e <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8005c9e:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d018      	beq.n	8005cd8 <HAL_UARTEx_DisableFifoMode+0x3a>
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8005cac:	2324      	movs	r3, #36	; 0x24
 8005cae:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005cb2:	6803      	ldr	r3, [r0, #0]
 8005cb4:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8005cb6:	6819      	ldr	r1, [r3, #0]
 8005cb8:	f021 0101 	bic.w	r1, r1, #1
 8005cbc:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005cbe:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005cc6:	6801      	ldr	r1, [r0, #0]
 8005cc8:	600a      	str	r2, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 8005cca:	2220      	movs	r2, #32
 8005ccc:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8005cd0:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return HAL_OK;
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	4770      	bx	lr
  __HAL_LOCK(huart);
 8005cd8:	2002      	movs	r0, #2
}
 8005cda:	4770      	bx	lr

08005cdc <HAL_UARTEx_SetTxFifoThreshold>:
{
 8005cdc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8005cde:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d01d      	beq.n	8005d22 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8005ce6:	4604      	mov	r4, r0
 8005ce8:	2301      	movs	r3, #1
 8005cea:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8005cee:	2324      	movs	r3, #36	; 0x24
 8005cf0:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005cf4:	6803      	ldr	r3, [r0, #0]
 8005cf6:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	f022 0201 	bic.w	r2, r2, #1
 8005cfe:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005d00:	6802      	ldr	r2, [r0, #0]
 8005d02:	6893      	ldr	r3, [r2, #8]
 8005d04:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8005d08:	4319      	orrs	r1, r3
 8005d0a:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8005d0c:	f7ff ff9e 	bl	8005c4c <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d10:	6823      	ldr	r3, [r4, #0]
 8005d12:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8005d14:	2320      	movs	r3, #32
 8005d16:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8005d1a:	2000      	movs	r0, #0
 8005d1c:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8005d20:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8005d22:	2002      	movs	r0, #2
 8005d24:	e7fc      	b.n	8005d20 <HAL_UARTEx_SetTxFifoThreshold+0x44>

08005d26 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8005d26:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8005d28:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d01d      	beq.n	8005d6c <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8005d30:	4604      	mov	r4, r0
 8005d32:	2301      	movs	r3, #1
 8005d34:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8005d38:	2324      	movs	r3, #36	; 0x24
 8005d3a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d3e:	6803      	ldr	r3, [r0, #0]
 8005d40:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	f022 0201 	bic.w	r2, r2, #1
 8005d48:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005d4a:	6802      	ldr	r2, [r0, #0]
 8005d4c:	6893      	ldr	r3, [r2, #8]
 8005d4e:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8005d52:	4319      	orrs	r1, r3
 8005d54:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8005d56:	f7ff ff79 	bl	8005c4c <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d5a:	6823      	ldr	r3, [r4, #0]
 8005d5c:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8005d5e:	2320      	movs	r3, #32
 8005d60:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8005d64:	2000      	movs	r0, #0
 8005d66:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8005d6a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8005d6c:	2002      	movs	r0, #2
 8005d6e:	e7fc      	b.n	8005d6a <HAL_UARTEx_SetRxFifoThreshold+0x44>

08005d70 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005d70:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8005d72:	2300      	movs	r3, #0
 8005d74:	9301      	str	r3, [sp, #4]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d76:	9b01      	ldr	r3, [sp, #4]
 8005d78:	3301      	adds	r3, #1
 8005d7a:	9301      	str	r3, [sp, #4]

    if (count > 200000U)
 8005d7c:	9a01      	ldr	r2, [sp, #4]
 8005d7e:	4b0f      	ldr	r3, [pc, #60]	; (8005dbc <USB_CoreReset+0x4c>)
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d815      	bhi.n	8005db0 <USB_CoreReset+0x40>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d84:	6903      	ldr	r3, [r0, #16]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	daf5      	bge.n	8005d76 <USB_CoreReset+0x6>

  /* Core Soft Reset */
  count = 0U;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005d8e:	6903      	ldr	r3, [r0, #16]
 8005d90:	f043 0301 	orr.w	r3, r3, #1
 8005d94:	6103      	str	r3, [r0, #16]

  do
  {
    count++;
 8005d96:	9b01      	ldr	r3, [sp, #4]
 8005d98:	3301      	adds	r3, #1
 8005d9a:	9301      	str	r3, [sp, #4]

    if (count > 200000U)
 8005d9c:	9a01      	ldr	r2, [sp, #4]
 8005d9e:	4b07      	ldr	r3, [pc, #28]	; (8005dbc <USB_CoreReset+0x4c>)
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d808      	bhi.n	8005db6 <USB_CoreReset+0x46>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005da4:	6903      	ldr	r3, [r0, #16]
 8005da6:	f013 0f01 	tst.w	r3, #1
 8005daa:	d1f4      	bne.n	8005d96 <USB_CoreReset+0x26>

  return HAL_OK;
 8005dac:	2000      	movs	r0, #0
 8005dae:	e000      	b.n	8005db2 <USB_CoreReset+0x42>
      return HAL_TIMEOUT;
 8005db0:	2003      	movs	r0, #3
}
 8005db2:	b002      	add	sp, #8
 8005db4:	4770      	bx	lr
      return HAL_TIMEOUT;
 8005db6:	2003      	movs	r0, #3
 8005db8:	e7fb      	b.n	8005db2 <USB_CoreReset+0x42>
 8005dba:	bf00      	nop
 8005dbc:	00030d40 	.word	0x00030d40

08005dc0 <USB_CoreInit>:
{
 8005dc0:	b084      	sub	sp, #16
 8005dc2:	b510      	push	{r4, lr}
 8005dc4:	4604      	mov	r4, r0
 8005dc6:	f10d 0c0c 	add.w	ip, sp, #12
 8005dca:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005dce:	68c3      	ldr	r3, [r0, #12]
 8005dd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005dd4:	60c3      	str	r3, [r0, #12]
  ret = USB_CoreReset(USBx);
 8005dd6:	f7ff ffcb 	bl	8005d70 <USB_CoreReset>
  if (cfg.battery_charging_enable == 0U)
 8005dda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005ddc:	b93b      	cbnz	r3, 8005dee <USB_CoreInit+0x2e>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005dde:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005de0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005de4:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8005de6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005dea:	b004      	add	sp, #16
 8005dec:	4770      	bx	lr
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005dee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005df0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005df4:	63a3      	str	r3, [r4, #56]	; 0x38
 8005df6:	e7f6      	b.n	8005de6 <USB_CoreInit+0x26>

08005df8 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005df8:	6883      	ldr	r3, [r0, #8]
 8005dfa:	f043 0301 	orr.w	r3, r3, #1
 8005dfe:	6083      	str	r3, [r0, #8]
}
 8005e00:	2000      	movs	r0, #0
 8005e02:	4770      	bx	lr

08005e04 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005e04:	6883      	ldr	r3, [r0, #8]
 8005e06:	f023 0301 	bic.w	r3, r3, #1
 8005e0a:	6083      	str	r3, [r0, #8]
}
 8005e0c:	2000      	movs	r0, #0
 8005e0e:	4770      	bx	lr

08005e10 <USB_FlushTxFifo>:
{
 8005e10:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8005e12:	2300      	movs	r3, #0
 8005e14:	9301      	str	r3, [sp, #4]
    count++;
 8005e16:	9b01      	ldr	r3, [sp, #4]
 8005e18:	3301      	adds	r3, #1
 8005e1a:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8005e1c:	9a01      	ldr	r2, [sp, #4]
 8005e1e:	4b0f      	ldr	r3, [pc, #60]	; (8005e5c <USB_FlushTxFifo+0x4c>)
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d815      	bhi.n	8005e50 <USB_FlushTxFifo+0x40>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e24:	6903      	ldr	r3, [r0, #16]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	daf5      	bge.n	8005e16 <USB_FlushTxFifo+0x6>
  count = 0U;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005e2e:	0189      	lsls	r1, r1, #6
 8005e30:	f041 0120 	orr.w	r1, r1, #32
 8005e34:	6101      	str	r1, [r0, #16]
    count++;
 8005e36:	9b01      	ldr	r3, [sp, #4]
 8005e38:	3301      	adds	r3, #1
 8005e3a:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8005e3c:	9a01      	ldr	r2, [sp, #4]
 8005e3e:	4b07      	ldr	r3, [pc, #28]	; (8005e5c <USB_FlushTxFifo+0x4c>)
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d808      	bhi.n	8005e56 <USB_FlushTxFifo+0x46>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005e44:	6903      	ldr	r3, [r0, #16]
 8005e46:	f013 0f20 	tst.w	r3, #32
 8005e4a:	d1f4      	bne.n	8005e36 <USB_FlushTxFifo+0x26>
  return HAL_OK;
 8005e4c:	2000      	movs	r0, #0
 8005e4e:	e000      	b.n	8005e52 <USB_FlushTxFifo+0x42>
      return HAL_TIMEOUT;
 8005e50:	2003      	movs	r0, #3
}
 8005e52:	b002      	add	sp, #8
 8005e54:	4770      	bx	lr
      return HAL_TIMEOUT;
 8005e56:	2003      	movs	r0, #3
 8005e58:	e7fb      	b.n	8005e52 <USB_FlushTxFifo+0x42>
 8005e5a:	bf00      	nop
 8005e5c:	00030d40 	.word	0x00030d40

08005e60 <USB_FlushRxFifo>:
{
 8005e60:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8005e62:	2300      	movs	r3, #0
 8005e64:	9301      	str	r3, [sp, #4]
    count++;
 8005e66:	9b01      	ldr	r3, [sp, #4]
 8005e68:	3301      	adds	r3, #1
 8005e6a:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8005e6c:	9a01      	ldr	r2, [sp, #4]
 8005e6e:	4b0e      	ldr	r3, [pc, #56]	; (8005ea8 <USB_FlushRxFifo+0x48>)
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d813      	bhi.n	8005e9c <USB_FlushRxFifo+0x3c>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e74:	6903      	ldr	r3, [r0, #16]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	daf5      	bge.n	8005e66 <USB_FlushRxFifo+0x6>
  count = 0U;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005e7e:	2310      	movs	r3, #16
 8005e80:	6103      	str	r3, [r0, #16]
    count++;
 8005e82:	9b01      	ldr	r3, [sp, #4]
 8005e84:	3301      	adds	r3, #1
 8005e86:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8005e88:	9a01      	ldr	r2, [sp, #4]
 8005e8a:	4b07      	ldr	r3, [pc, #28]	; (8005ea8 <USB_FlushRxFifo+0x48>)
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d808      	bhi.n	8005ea2 <USB_FlushRxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005e90:	6903      	ldr	r3, [r0, #16]
 8005e92:	f013 0f10 	tst.w	r3, #16
 8005e96:	d1f4      	bne.n	8005e82 <USB_FlushRxFifo+0x22>
  return HAL_OK;
 8005e98:	2000      	movs	r0, #0
 8005e9a:	e000      	b.n	8005e9e <USB_FlushRxFifo+0x3e>
      return HAL_TIMEOUT;
 8005e9c:	2003      	movs	r0, #3
}
 8005e9e:	b002      	add	sp, #8
 8005ea0:	4770      	bx	lr
      return HAL_TIMEOUT;
 8005ea2:	2003      	movs	r0, #3
 8005ea4:	e7fb      	b.n	8005e9e <USB_FlushRxFifo+0x3e>
 8005ea6:	bf00      	nop
 8005ea8:	00030d40 	.word	0x00030d40

08005eac <USB_WritePacket>:
{
 8005eac:	b510      	push	{r4, lr}
  count32b = ((uint32_t)len + 3U) / 4U;
 8005eae:	1cdc      	adds	r4, r3, #3
 8005eb0:	08a4      	lsrs	r4, r4, #2
  for (i = 0U; i < count32b; i++)
 8005eb2:	f04f 0e00 	mov.w	lr, #0
 8005eb6:	e009      	b.n	8005ecc <USB_WritePacket+0x20>
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005eb8:	eb00 3c02 	add.w	ip, r0, r2, lsl #12
 8005ebc:	f50c 5c80 	add.w	ip, ip, #4096	; 0x1000
 8005ec0:	f851 3b04 	ldr.w	r3, [r1], #4
 8005ec4:	f8cc 3000 	str.w	r3, [ip]
  for (i = 0U; i < count32b; i++)
 8005ec8:	f10e 0e01 	add.w	lr, lr, #1
 8005ecc:	45a6      	cmp	lr, r4
 8005ece:	d3f3      	bcc.n	8005eb8 <USB_WritePacket+0xc>
}
 8005ed0:	2000      	movs	r0, #0
 8005ed2:	bd10      	pop	{r4, pc}

08005ed4 <USB_ReadPacket>:
{
 8005ed4:	b510      	push	{r4, lr}
 8005ed6:	4684      	mov	ip, r0
 8005ed8:	4608      	mov	r0, r1
  uint32_t count32b = (uint32_t)len >> 2U;
 8005eda:	ea4f 0e92 	mov.w	lr, r2, lsr #2
  uint16_t remaining_bytes = len % 4U;
 8005ede:	f002 0203 	and.w	r2, r2, #3
  for (i = 0U; i < count32b; i++)
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	e005      	b.n	8005ef2 <USB_ReadPacket+0x1e>
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005ee6:	f50c 5180 	add.w	r1, ip, #4096	; 0x1000
 8005eea:	6809      	ldr	r1, [r1, #0]
 8005eec:	f840 1b04 	str.w	r1, [r0], #4
  for (i = 0U; i < count32b; i++)
 8005ef0:	3301      	adds	r3, #1
 8005ef2:	4573      	cmp	r3, lr
 8005ef4:	d3f7      	bcc.n	8005ee6 <USB_ReadPacket+0x12>
  if (remaining_bytes != 0U)
 8005ef6:	b17a      	cbz	r2, 8005f18 <USB_ReadPacket+0x44>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005ef8:	f50c 5c80 	add.w	ip, ip, #4096	; 0x1000
 8005efc:	f8dc 4000 	ldr.w	r4, [ip]
    i = 0U;
 8005f00:	2100      	movs	r1, #0
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005f02:	b2cb      	uxtb	r3, r1
 8005f04:	00db      	lsls	r3, r3, #3
 8005f06:	fa24 f303 	lsr.w	r3, r4, r3
 8005f0a:	f800 3b01 	strb.w	r3, [r0], #1
      i++;
 8005f0e:	3101      	adds	r1, #1
      remaining_bytes--;
 8005f10:	3a01      	subs	r2, #1
 8005f12:	b292      	uxth	r2, r2
    } while (remaining_bytes != 0U);
 8005f14:	2a00      	cmp	r2, #0
 8005f16:	d1f4      	bne.n	8005f02 <USB_ReadPacket+0x2e>
}
 8005f18:	bd10      	pop	{r4, pc}

08005f1a <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8005f1a:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8005f1c:	6980      	ldr	r0, [r0, #24]
}
 8005f1e:	4010      	ands	r0, r2
 8005f20:	4770      	bx	lr

08005f22 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8005f22:	6940      	ldr	r0, [r0, #20]
}
 8005f24:	f000 0001 	and.w	r0, r0, #1
 8005f28:	4770      	bx	lr

08005f2a <USB_SetCurrentMode>:
{
 8005f2a:	b538      	push	{r3, r4, r5, lr}
 8005f2c:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005f2e:	68c3      	ldr	r3, [r0, #12]
 8005f30:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005f34:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8005f36:	2901      	cmp	r1, #1
 8005f38:	d013      	beq.n	8005f62 <USB_SetCurrentMode+0x38>
  else if (mode == USB_DEVICE_MODE)
 8005f3a:	bb19      	cbnz	r1, 8005f84 <USB_SetCurrentMode+0x5a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005f3c:	68c3      	ldr	r3, [r0, #12]
 8005f3e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f42:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 8005f44:	2400      	movs	r4, #0
      HAL_Delay(1U);
 8005f46:	2001      	movs	r0, #1
 8005f48:	f7fb fd1e 	bl	8001988 <HAL_Delay>
      ms++;
 8005f4c:	3401      	adds	r4, #1
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005f4e:	4628      	mov	r0, r5
 8005f50:	f7ff ffe7 	bl	8005f22 <USB_GetMode>
 8005f54:	b108      	cbz	r0, 8005f5a <USB_SetCurrentMode+0x30>
 8005f56:	2c31      	cmp	r4, #49	; 0x31
 8005f58:	d9f5      	bls.n	8005f46 <USB_SetCurrentMode+0x1c>
  if (ms == 50U)
 8005f5a:	2c32      	cmp	r4, #50	; 0x32
 8005f5c:	d014      	beq.n	8005f88 <USB_SetCurrentMode+0x5e>
  return HAL_OK;
 8005f5e:	2000      	movs	r0, #0
}
 8005f60:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005f62:	68c3      	ldr	r3, [r0, #12]
 8005f64:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f68:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 8005f6a:	2400      	movs	r4, #0
      HAL_Delay(1U);
 8005f6c:	2001      	movs	r0, #1
 8005f6e:	f7fb fd0b 	bl	8001988 <HAL_Delay>
      ms++;
 8005f72:	3401      	adds	r4, #1
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005f74:	4628      	mov	r0, r5
 8005f76:	f7ff ffd4 	bl	8005f22 <USB_GetMode>
 8005f7a:	2801      	cmp	r0, #1
 8005f7c:	d0ed      	beq.n	8005f5a <USB_SetCurrentMode+0x30>
 8005f7e:	2c31      	cmp	r4, #49	; 0x31
 8005f80:	d9f4      	bls.n	8005f6c <USB_SetCurrentMode+0x42>
 8005f82:	e7ea      	b.n	8005f5a <USB_SetCurrentMode+0x30>
    return HAL_ERROR;
 8005f84:	2001      	movs	r0, #1
 8005f86:	e7eb      	b.n	8005f60 <USB_SetCurrentMode+0x36>
    return HAL_ERROR;
 8005f88:	2001      	movs	r0, #1
 8005f8a:	e7e9      	b.n	8005f60 <USB_SetCurrentMode+0x36>

08005f8c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005f8c:	b084      	sub	sp, #16
 8005f8e:	b538      	push	{r3, r4, r5, lr}
 8005f90:	4604      	mov	r4, r0
 8005f92:	ad05      	add	r5, sp, #20
 8005f94:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8005f9e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005fa0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005fa4:	6383      	str	r3, [r0, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 8005fa6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005fa8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005fac:	6383      	str	r3, [r0, #56]	; 0x38

  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005fae:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 8005fb2:	f023 0304 	bic.w	r3, r3, #4
 8005fb6:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005fba:	2110      	movs	r1, #16
 8005fbc:	f7ff ff28 	bl	8005e10 <USB_FlushTxFifo>
 8005fc0:	4605      	mov	r5, r0
 8005fc2:	b100      	cbz	r0, 8005fc6 <USB_HostInit+0x3a>
  {
    ret = HAL_ERROR;
 8005fc4:	2501      	movs	r5, #1
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005fc6:	4620      	mov	r0, r4
 8005fc8:	f7ff ff4a 	bl	8005e60 <USB_FlushRxFifo>
 8005fcc:	b100      	cbz	r0, 8005fd0 <USB_HostInit+0x44>
  {
    ret = HAL_ERROR;
 8005fce:	2501      	movs	r5, #1
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	e009      	b.n	8005fe8 <USB_HostInit+0x5c>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005fd4:	eb04 1342 	add.w	r3, r4, r2, lsl #5
 8005fd8:	f04f 31ff 	mov.w	r1, #4294967295
 8005fdc:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    USBx_HC(i)->HCINTMSK = 0U;
 8005fe0:	2100      	movs	r1, #0
 8005fe2:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
  for (i = 0U; i < cfg.Host_channels; i++)
 8005fe6:	3201      	adds	r2, #1
 8005fe8:	9b06      	ldr	r3, [sp, #24]
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d8f2      	bhi.n	8005fd4 <USB_HostInit+0x48>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	61a3      	str	r3, [r4, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8005ff6:	6163      	str	r3, [r4, #20]

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 8005ff8:	2380      	movs	r3, #128	; 0x80
 8005ffa:	6263      	str	r3, [r4, #36]	; 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005ffc:	f503 03c0 	add.w	r3, r3, #6291456	; 0x600000
 8006000:	62a3      	str	r3, [r4, #40]	; 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006002:	4b08      	ldr	r3, [pc, #32]	; (8006024 <USB_HostInit+0x98>)
 8006004:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006008:	69a3      	ldr	r3, [r4, #24]
 800600a:	f043 0310 	orr.w	r3, r3, #16
 800600e:	61a3      	str	r3, [r4, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006010:	69a2      	ldr	r2, [r4, #24]
 8006012:	4b05      	ldr	r3, [pc, #20]	; (8006028 <USB_HostInit+0x9c>)
 8006014:	4313      	orrs	r3, r2
 8006016:	61a3      	str	r3, [r4, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
}
 8006018:	4628      	mov	r0, r5
 800601a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800601e:	b004      	add	sp, #16
 8006020:	4770      	bx	lr
 8006022:	bf00      	nop
 8006024:	004000e0 	.word	0x004000e0
 8006028:	a3200008 	.word	0xa3200008

0800602c <USB_InitFSLSPClkSel>:
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800602c:	f500 6c80 	add.w	ip, r0, #1024	; 0x400
 8006030:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 8006034:	f023 0303 	bic.w	r3, r3, #3
 8006038:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800603c:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 8006040:	f001 0203 	and.w	r2, r1, #3
 8006044:	4313      	orrs	r3, r2
 8006046:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400

  if (freq == HCFG_48_MHZ)
 800604a:	2901      	cmp	r1, #1
 800604c:	d003      	beq.n	8006056 <USB_InitFSLSPClkSel+0x2a>
  {
    USBx_HOST->HFIR = 48000U;
  }
  else if (freq == HCFG_6_MHZ)
 800604e:	2902      	cmp	r1, #2
 8006050:	d006      	beq.n	8006060 <USB_InitFSLSPClkSel+0x34>
  {
    /* ... */
  }

  return HAL_OK;
}
 8006052:	2000      	movs	r0, #0
 8006054:	4770      	bx	lr
    USBx_HOST->HFIR = 48000U;
 8006056:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800605a:	f8cc 3004 	str.w	r3, [ip, #4]
 800605e:	e7f8      	b.n	8006052 <USB_InitFSLSPClkSel+0x26>
    USBx_HOST->HFIR = 6000U;
 8006060:	f241 7370 	movw	r3, #6000	; 0x1770
 8006064:	f8cc 3004 	str.w	r3, [ip, #4]
 8006068:	e7f3      	b.n	8006052 <USB_InitFSLSPClkSel+0x26>

0800606a <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800606a:	b530      	push	{r4, r5, lr}
 800606c:	b083      	sub	sp, #12
 800606e:	4604      	mov	r4, r0
  uint32_t USBx_BASE = (uint32_t)USBx;

  __IO uint32_t hprt0 = 0U;
 8006070:	2500      	movs	r5, #0
 8006072:	9501      	str	r5, [sp, #4]

  hprt0 = USBx_HPRT0;
 8006074:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8006078:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800607a:	9b01      	ldr	r3, [sp, #4]
 800607c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006080:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006082:	9b01      	ldr	r3, [sp, #4]
 8006084:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006088:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  HAL_Delay(100U);                                 /* See Note #1 */
 800608c:	2064      	movs	r0, #100	; 0x64
 800608e:	f7fb fc7b 	bl	8001988 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006092:	9b01      	ldr	r3, [sp, #4]
 8006094:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006098:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
  HAL_Delay(10U);
 800609c:	200a      	movs	r0, #10
 800609e:	f7fb fc73 	bl	8001988 <HAL_Delay>

  return HAL_OK;
}
 80060a2:	4628      	mov	r0, r5
 80060a4:	b003      	add	sp, #12
 80060a6:	bd30      	pop	{r4, r5, pc}

080060a8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80060a8:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 80060aa:	2300      	movs	r3, #0
 80060ac:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 80060ae:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 80060b2:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80060b4:	9b01      	ldr	r3, [sp, #4]
 80060b6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80060ba:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80060bc:	9b01      	ldr	r3, [sp, #4]
 80060be:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80060c2:	d101      	bne.n	80060c8 <USB_DriveVbus+0x20>
 80060c4:	2901      	cmp	r1, #1
 80060c6:	d00c      	beq.n	80060e2 <USB_DriveVbus+0x3a>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80060c8:	9b01      	ldr	r3, [sp, #4]
 80060ca:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80060ce:	d005      	beq.n	80060dc <USB_DriveVbus+0x34>
 80060d0:	b921      	cbnz	r1, 80060dc <USB_DriveVbus+0x34>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80060d2:	9b01      	ldr	r3, [sp, #4]
 80060d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80060d8:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  return HAL_OK;
}
 80060dc:	2000      	movs	r0, #0
 80060de:	b002      	add	sp, #8
 80060e0:	4770      	bx	lr
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80060e2:	9b01      	ldr	r3, [sp, #4]
 80060e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80060e8:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
 80060ec:	e7ec      	b.n	80060c8 <USB_DriveVbus+0x20>

080060ee <USB_GetHostSpeed>:
  *          This parameter can be one of these values:
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80060ee:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 80060f0:	2300      	movs	r3, #0
 80060f2:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 80060f4:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 80060f8:	9301      	str	r3, [sp, #4]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80060fa:	9801      	ldr	r0, [sp, #4]
}
 80060fc:	f3c0 4041 	ubfx	r0, r0, #17, #2
 8006100:	b002      	add	sp, #8
 8006102:	4770      	bx	lr

08006104 <USB_GetCurrentFrame>:
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006104:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8006108:	6880      	ldr	r0, [r0, #8]
}
 800610a:	b280      	uxth	r0, r0
 800610c:	4770      	bx	lr

0800610e <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800610e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006112:	4691      	mov	r9, r2
 8006114:	461c      	mov	r4, r3
 8006116:	f89d 5024 	ldrb.w	r5, [sp, #36]	; 0x24
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800611a:	eb00 1641 	add.w	r6, r0, r1, lsl #5
 800611e:	f506 63a0 	add.w	r3, r6, #1280	; 0x500
 8006122:	f04f 32ff 	mov.w	r2, #4294967295
 8006126:	609a      	str	r2, [r3, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006128:	2d03      	cmp	r5, #3
 800612a:	d86d      	bhi.n	8006208 <USB_HC_Init+0xfa>
 800612c:	e8df f005 	tbb	[pc, r5]
 8006130:	50025e02 	.word	0x50025e02
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006134:	f240 429d 	movw	r2, #1181	; 0x49d
 8006138:	60da      	str	r2, [r3, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800613a:	f019 0f80 	tst.w	r9, #128	; 0x80
 800613e:	d141      	bne.n	80061c4 <USB_HC_Init+0xb6>
  HAL_StatusTypeDef ret = HAL_OK;
 8006140:	2700      	movs	r7, #0
      ret = HAL_ERROR;
      break;
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006142:	68da      	ldr	r2, [r3, #12]
 8006144:	f042 0202 	orr.w	r2, r2, #2
 8006148:	60da      	str	r2, [r3, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800614a:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
 800614e:	f001 010f 	and.w	r1, r1, #15
 8006152:	2201      	movs	r2, #1
 8006154:	408a      	lsls	r2, r1
 8006156:	4313      	orrs	r3, r2
 8006158:	f8c0 3418 	str.w	r3, [r0, #1048]	; 0x418

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800615c:	6983      	ldr	r3, [r0, #24]
 800615e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006162:	6183      	str	r3, [r0, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006164:	f019 0f80 	tst.w	r9, #128	; 0x80
 8006168:	d150      	bne.n	800620c <USB_HC_Init+0xfe>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
  }
  else
  {
    HCcharEpDir = 0U;
 800616a:	f04f 0800 	mov.w	r8, #0
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800616e:	f7ff ffbe 	bl	80060ee <USB_GetHostSpeed>

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006172:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8006176:	2b02      	cmp	r3, #2
 8006178:	d04b      	beq.n	8006212 <USB_HC_Init+0x104>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
  }
  else
  {
    HCcharLowSpeed = 0U;
 800617a:	2200      	movs	r2, #0
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800617c:	05a3      	lsls	r3, r4, #22
 800617e:	f003 53fe 	and.w	r3, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006182:	ea4f 29c9 	mov.w	r9, r9, lsl #11
 8006186:	f409 49f0 	and.w	r9, r9, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800618a:	ea43 0309 	orr.w	r3, r3, r9
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800618e:	04a9      	lsls	r1, r5, #18
 8006190:	f401 2140 	and.w	r1, r1, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006194:	430b      	orrs	r3, r1
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006196:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 800619a:	f3c1 010a 	ubfx	r1, r1, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800619e:	430b      	orrs	r3, r1
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80061a0:	ea43 0308 	orr.w	r3, r3, r8
 80061a4:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80061a6:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80061aa:	2d03      	cmp	r5, #3
 80061ac:	d001      	beq.n	80061b2 <USB_HC_Init+0xa4>
 80061ae:	2d01      	cmp	r5, #1
 80061b0:	d105      	bne.n	80061be <USB_HC_Init+0xb0>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80061b2:	f8d6 3500 	ldr.w	r3, [r6, #1280]	; 0x500
 80061b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80061ba:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
  }

  return ret;
}
 80061be:	4638      	mov	r0, r7
 80061c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80061c4:	68da      	ldr	r2, [r3, #12]
 80061c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061ca:	60da      	str	r2, [r3, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80061cc:	2700      	movs	r7, #0
 80061ce:	e7b8      	b.n	8006142 <USB_HC_Init+0x34>
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80061d0:	f240 629d 	movw	r2, #1693	; 0x69d
 80061d4:	60da      	str	r2, [r3, #12]
      if ((epnum & 0x80U) == 0x80U)
 80061d6:	f019 0f80 	tst.w	r9, #128	; 0x80
 80061da:	d101      	bne.n	80061e0 <USB_HC_Init+0xd2>
  HAL_StatusTypeDef ret = HAL_OK;
 80061dc:	2700      	movs	r7, #0
 80061de:	e7b0      	b.n	8006142 <USB_HC_Init+0x34>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80061e0:	68da      	ldr	r2, [r3, #12]
 80061e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061e6:	60da      	str	r2, [r3, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80061e8:	2700      	movs	r7, #0
 80061ea:	e7aa      	b.n	8006142 <USB_HC_Init+0x34>
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80061ec:	f240 2225 	movw	r2, #549	; 0x225
 80061f0:	60da      	str	r2, [r3, #12]
      if ((epnum & 0x80U) == 0x80U)
 80061f2:	f019 0f80 	tst.w	r9, #128	; 0x80
 80061f6:	d101      	bne.n	80061fc <USB_HC_Init+0xee>
  HAL_StatusTypeDef ret = HAL_OK;
 80061f8:	2700      	movs	r7, #0
 80061fa:	e7a2      	b.n	8006142 <USB_HC_Init+0x34>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80061fc:	68da      	ldr	r2, [r3, #12]
 80061fe:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006202:	60da      	str	r2, [r3, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006204:	2700      	movs	r7, #0
 8006206:	e79c      	b.n	8006142 <USB_HC_Init+0x34>
  switch (ep_type)
 8006208:	2701      	movs	r7, #1
 800620a:	e79a      	b.n	8006142 <USB_HC_Init+0x34>
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800620c:	f44f 4800 	mov.w	r8, #32768	; 0x8000
 8006210:	e7ad      	b.n	800616e <USB_HC_Init+0x60>
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006212:	2802      	cmp	r0, #2
 8006214:	d002      	beq.n	800621c <USB_HC_Init+0x10e>
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006216:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800621a:	e7af      	b.n	800617c <USB_HC_Init+0x6e>
    HCcharLowSpeed = 0U;
 800621c:	2200      	movs	r2, #0
 800621e:	e7ad      	b.n	800617c <USB_HC_Init+0x6e>

08006220 <USB_HC_StartXfer>:
  * @param  USBx  Selected device
  * @param  hc  pointer to host channel structure
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc)
{
 8006220:	b510      	push	{r4, lr}
 8006222:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006224:	784b      	ldrb	r3, [r1, #1]
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006226:	694a      	ldr	r2, [r1, #20]
 8006228:	b182      	cbz	r2, 800624c <USB_HC_StartXfer+0x2c>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800622a:	890c      	ldrh	r4, [r1, #8]
 800622c:	eb02 0c04 	add.w	ip, r2, r4
 8006230:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006234:	fbbc fcf4 	udiv	ip, ip, r4
 8006238:	fa1f fc8c 	uxth.w	ip, ip

    if (num_packets > max_hc_pkt_count)
 800623c:	f5bc 7f80 	cmp.w	ip, #256	; 0x100
 8006240:	d906      	bls.n	8006250 <USB_HC_StartXfer+0x30>
    {
      num_packets = max_hc_pkt_count;
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006242:	0224      	lsls	r4, r4, #8
 8006244:	610c      	str	r4, [r1, #16]
      num_packets = max_hc_pkt_count;
 8006246:	f44f 7c80 	mov.w	ip, #256	; 0x100
 800624a:	e001      	b.n	8006250 <USB_HC_StartXfer+0x30>
    }
  }
  else
  {
    num_packets = 1U;
 800624c:	f04f 0c01 	mov.w	ip, #1

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006250:	78cc      	ldrb	r4, [r1, #3]
 8006252:	2c00      	cmp	r4, #0
 8006254:	d04c      	beq.n	80062f0 <USB_HC_StartXfer+0xd0>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006256:	890a      	ldrh	r2, [r1, #8]
 8006258:	fb02 f20c 	mul.w	r2, r2, ip
 800625c:	610a      	str	r2, [r1, #16]
  {
    hc->XferSize = hc->xfer_len;
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800625e:	690a      	ldr	r2, [r1, #16]
 8006260:	f3c2 0212 	ubfx	r2, r2, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006264:	4c35      	ldr	r4, [pc, #212]	; (800633c <USB_HC_StartXfer+0x11c>)
 8006266:	ea04 4ccc 	and.w	ip, r4, ip, lsl #19
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800626a:	ea42 020c 	orr.w	r2, r2, ip
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800626e:	f891 c00a 	ldrb.w	ip, [r1, #10]
 8006272:	ea4f 7c4c 	mov.w	ip, ip, lsl #29
 8006276:	f00c 4cc0 	and.w	ip, ip, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800627a:	eb00 1343 	add.w	r3, r0, r3, lsl #5
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800627e:	ea42 020c 	orr.w	r2, r2, ip
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006282:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006286:	f500 6480 	add.w	r4, r0, #1024	; 0x400
 800628a:	68a2      	ldr	r2, [r4, #8]
 800628c:	f012 0f01 	tst.w	r2, #1
 8006290:	bf0c      	ite	eq
 8006292:	f04f 0c01 	moveq.w	ip, #1
 8006296:	f04f 0c00 	movne.w	ip, #0
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800629a:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
 800629e:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80062a2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80062a6:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
 80062aa:	ea42 724c 	orr.w	r2, r2, ip, lsl #29
 80062ae:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80062b2:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
 80062b6:	9201      	str	r2, [sp, #4]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80062b8:	9a01      	ldr	r2, [sp, #4]
 80062ba:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 80062be:	9201      	str	r2, [sp, #4]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80062c0:	78ca      	ldrb	r2, [r1, #3]
 80062c2:	b1ba      	cbz	r2, 80062f4 <USB_HC_StartXfer+0xd4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80062c4:	9a01      	ldr	r2, [sp, #4]
 80062c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80062ca:	9201      	str	r2, [sp, #4]
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80062cc:	9a01      	ldr	r2, [sp, #4]
 80062ce:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80062d2:	9201      	str	r2, [sp, #4]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80062d4:	9a01      	ldr	r2, [sp, #4]
 80062d6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80062da:	78cb      	ldrb	r3, [r1, #3]
 80062dc:	b9fb      	cbnz	r3, 800631e <USB_HC_StartXfer+0xfe>
 80062de:	694b      	ldr	r3, [r1, #20]
 80062e0:	b1eb      	cbz	r3, 800631e <USB_HC_StartXfer+0xfe>
  {
    switch (hc->ep_type)
 80062e2:	79ca      	ldrb	r2, [r1, #7]
 80062e4:	2a03      	cmp	r2, #3
 80062e6:	d815      	bhi.n	8006314 <USB_HC_StartXfer+0xf4>
 80062e8:	e8df f002 	tbb	[pc, r2]
 80062ec:	1c091c09 	.word	0x1c091c09
    hc->XferSize = hc->xfer_len;
 80062f0:	610a      	str	r2, [r1, #16]
 80062f2:	e7b4      	b.n	800625e <USB_HC_StartXfer+0x3e>
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80062f4:	9a01      	ldr	r2, [sp, #4]
 80062f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80062fa:	9201      	str	r2, [sp, #4]
 80062fc:	e7e6      	b.n	80062cc <USB_HC_StartXfer+0xac>
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80062fe:	3303      	adds	r3, #3

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006300:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8006302:	b292      	uxth	r2, r2
 8006304:	f3c3 038f 	ubfx	r3, r3, #2, #16
 8006308:	429a      	cmp	r2, r3
 800630a:	d203      	bcs.n	8006314 <USB_HC_StartXfer+0xf4>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800630c:	6983      	ldr	r3, [r0, #24]
 800630e:	f043 0320 	orr.w	r3, r3, #32
 8006312:	6183      	str	r3, [r0, #24]
      default:
        break;
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len);
 8006314:	8a8b      	ldrh	r3, [r1, #20]
 8006316:	784a      	ldrb	r2, [r1, #1]
 8006318:	68c9      	ldr	r1, [r1, #12]
 800631a:	f7ff fdc7 	bl	8005eac <USB_WritePacket>
  }

  return HAL_OK;
}
 800631e:	2000      	movs	r0, #0
 8006320:	b002      	add	sp, #8
 8006322:	bd10      	pop	{r4, pc}
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006324:	3303      	adds	r3, #3
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006326:	6922      	ldr	r2, [r4, #16]
 8006328:	b292      	uxth	r2, r2
 800632a:	f3c3 038f 	ubfx	r3, r3, #2, #16
 800632e:	429a      	cmp	r2, r3
 8006330:	d2f0      	bcs.n	8006314 <USB_HC_StartXfer+0xf4>
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006332:	6983      	ldr	r3, [r0, #24]
 8006334:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006338:	6183      	str	r3, [r0, #24]
 800633a:	e7eb      	b.n	8006314 <USB_HC_StartXfer+0xf4>
 800633c:	1ff80000 	.word	0x1ff80000

08006340 <USB_HC_ReadInterrupt>:
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006340:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8006344:	6940      	ldr	r0, [r0, #20]
}
 8006346:	b280      	uxth	r0, r0
 8006348:	4770      	bx	lr

0800634a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800634a:	b410      	push	{r4}
 800634c:	b083      	sub	sp, #12
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t hcnum = (uint32_t)hc_num;
  __IO uint32_t count = 0U;
 800634e:	2300      	movs	r3, #0
 8006350:	9301      	str	r3, [sp, #4]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006352:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8006356:	f501 6ca0 	add.w	ip, r1, #1280	; 0x500
 800635a:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 800635e:	f3c3 4381 	ubfx	r3, r3, #18, #2
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006362:	f8d1 2500 	ldr.w	r2, [r1, #1280]	; 0x500

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8006366:	6884      	ldr	r4, [r0, #8]
 8006368:	f014 0f20 	tst.w	r4, #32
 800636c:	d002      	beq.n	8006374 <USB_HC_Halt+0x2a>
 800636e:	0fd2      	lsrs	r2, r2, #31
 8006370:	2a00      	cmp	r2, #0
 8006372:	d051      	beq.n	8006418 <USB_HC_Halt+0xce>
  {
    return HAL_OK;
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006374:	b323      	cbz	r3, 80063c0 <USB_HC_Halt+0x76>
 8006376:	2b02      	cmp	r3, #2
 8006378:	d022      	beq.n	80063c0 <USB_HC_Halt+0x76>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800637a:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 800637e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006382:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006386:	f8d0 3410 	ldr.w	r3, [r0, #1040]	; 0x410
 800638a:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
 800638e:	d148      	bne.n	8006422 <USB_HC_Halt+0xd8>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006390:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8006394:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006398:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800639c:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 80063a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80063a4:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      do
      {
        count++;
 80063a8:	9b01      	ldr	r3, [sp, #4]
 80063aa:	3301      	adds	r3, #1
 80063ac:	9301      	str	r3, [sp, #4]

        if (count > 1000U)
 80063ae:	9b01      	ldr	r3, [sp, #4]
 80063b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80063b4:	d830      	bhi.n	8006418 <USB_HC_Halt+0xce>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80063b6:	f8dc 3000 	ldr.w	r3, [ip]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	dbf4      	blt.n	80063a8 <USB_HC_Halt+0x5e>
 80063be:	e02b      	b.n	8006418 <USB_HC_Halt+0xce>
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80063c0:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 80063c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80063c8:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80063cc:	6883      	ldr	r3, [r0, #8]
 80063ce:	f013 0f20 	tst.w	r3, #32
 80063d2:	d121      	bne.n	8006418 <USB_HC_Halt+0xce>
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80063d4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80063d6:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
 80063da:	d117      	bne.n	800640c <USB_HC_Halt+0xc2>
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80063dc:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 80063e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80063e4:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80063e8:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 80063ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80063f0:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
          count++;
 80063f4:	9b01      	ldr	r3, [sp, #4]
 80063f6:	3301      	adds	r3, #1
 80063f8:	9301      	str	r3, [sp, #4]
          if (count > 1000U)
 80063fa:	9b01      	ldr	r3, [sp, #4]
 80063fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006400:	d80a      	bhi.n	8006418 <USB_HC_Halt+0xce>
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006402:	f8dc 3000 	ldr.w	r3, [ip]
 8006406:	2b00      	cmp	r3, #0
 8006408:	dbf4      	blt.n	80063f4 <USB_HC_Halt+0xaa>
 800640a:	e005      	b.n	8006418 <USB_HC_Halt+0xce>
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800640c:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8006410:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006414:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
    }
  }

  return HAL_OK;
}
 8006418:	2000      	movs	r0, #0
 800641a:	b003      	add	sp, #12
 800641c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006420:	4770      	bx	lr
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006422:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8006426:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800642a:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 800642e:	e7f3      	b.n	8006418 <USB_HC_Halt+0xce>

08006430 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006430:	b530      	push	{r4, r5, lr}
 8006432:	b083      	sub	sp, #12
 8006434:	4604      	mov	r4, r0
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t count = 0U;
 8006436:	2300      	movs	r3, #0
 8006438:	9301      	str	r3, [sp, #4]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800643a:	f7ff fce3 	bl	8005e04 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800643e:	2110      	movs	r1, #16
 8006440:	4620      	mov	r0, r4
 8006442:	f7ff fce5 	bl	8005e10 <USB_FlushTxFifo>
 8006446:	4605      	mov	r5, r0
 8006448:	b100      	cbz	r0, 800644c <USB_StopHost+0x1c>
  {
    ret = HAL_ERROR;
 800644a:	2501      	movs	r5, #1
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800644c:	4620      	mov	r0, r4
 800644e:	f7ff fd07 	bl	8005e60 <USB_FlushRxFifo>
 8006452:	b100      	cbz	r0, 8006456 <USB_StopHost+0x26>
  {
    ret = HAL_ERROR;
 8006454:	2501      	movs	r5, #1
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006456:	2200      	movs	r2, #0
 8006458:	e00a      	b.n	8006470 <USB_StopHost+0x40>
  {
    value = USBx_HC(i)->HCCHAR;
 800645a:	eb04 1142 	add.w	r1, r4, r2, lsl #5
 800645e:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    value |=  USB_OTG_HCCHAR_CHDIS;
    value &= ~USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006462:	f023 2380 	bic.w	r3, r3, #2147516416	; 0x80008000
 8006466:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 800646a:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
  for (i = 0U; i <= 15U; i++)
 800646e:	3201      	adds	r2, #1
 8006470:	2a0f      	cmp	r2, #15
 8006472:	d9f2      	bls.n	800645a <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006474:	2100      	movs	r1, #0
 8006476:	e000      	b.n	800647a <USB_StopHost+0x4a>
 8006478:	3101      	adds	r1, #1
 800647a:	290f      	cmp	r1, #15
 800647c:	d816      	bhi.n	80064ac <USB_StopHost+0x7c>
  {
    value = USBx_HC(i)->HCCHAR;
 800647e:	eb04 1041 	add.w	r0, r4, r1, lsl #5
 8006482:	f500 62a0 	add.w	r2, r0, #1280	; 0x500
 8006486:	f8d0 3500 	ldr.w	r3, [r0, #1280]	; 0x500
    value |= USB_OTG_HCCHAR_CHDIS;
    value |= USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800648a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800648e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    USBx_HC(i)->HCCHAR = value;
 8006492:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500

    do
    {
      count++;
 8006496:	9b01      	ldr	r3, [sp, #4]
 8006498:	3301      	adds	r3, #1
 800649a:	9301      	str	r3, [sp, #4]

      if (count > 1000U)
 800649c:	9b01      	ldr	r3, [sp, #4]
 800649e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80064a2:	d8e9      	bhi.n	8006478 <USB_StopHost+0x48>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80064a4:	6813      	ldr	r3, [r2, #0]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	dbf5      	blt.n	8006496 <USB_StopHost+0x66>
 80064aa:	e7e5      	b.n	8006478 <USB_StopHost+0x48>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80064ac:	f04f 33ff 	mov.w	r3, #4294967295
 80064b0:	f8c4 3414 	str.w	r3, [r4, #1044]	; 0x414
  USBx->GINTSTS = 0xFFFFFFFFU;
 80064b4:	6163      	str	r3, [r4, #20]

  (void)USB_EnableGlobalInt(USBx);
 80064b6:	4620      	mov	r0, r4
 80064b8:	f7ff fc9e 	bl	8005df8 <USB_EnableGlobalInt>

  return ret;
}
 80064bc:	4628      	mov	r0, r5
 80064be:	b003      	add	sp, #12
 80064c0:	bd30      	pop	{r4, r5, pc}
	...

080064c4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80064c4:	b508      	push	{r3, lr}
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 80064c6:	4903      	ldr	r1, [pc, #12]	; (80064d4 <MX_FATFS_Init+0x10>)
 80064c8:	4803      	ldr	r0, [pc, #12]	; (80064d8 <MX_FATFS_Init+0x14>)
 80064ca:	f001 ff35 	bl	8008338 <FATFS_LinkDriver>
 80064ce:	4b03      	ldr	r3, [pc, #12]	; (80064dc <MX_FATFS_Init+0x18>)
 80064d0:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80064d2:	bd08      	pop	{r3, pc}
 80064d4:	20001824 	.word	0x20001824
 80064d8:	080097e8 	.word	0x080097e8
 80064dc:	20001828 	.word	0x20001828

080064e0 <USBH_initialize>:
DSTATUS USBH_initialize(BYTE lun)
{
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
}
 80064e0:	2000      	movs	r0, #0
 80064e2:	4770      	bx	lr

080064e4 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 80064e4:	b508      	push	{r3, lr}
 80064e6:	4601      	mov	r1, r0
  DRESULT res = RES_ERROR;

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 80064e8:	4803      	ldr	r0, [pc, #12]	; (80064f8 <USBH_status+0x14>)
 80064ea:	f000 fb7e 	bl	8006bea <USBH_MSC_UnitIsReady>
 80064ee:	b108      	cbz	r0, 80064f4 <USBH_status+0x10>
  {
    res = RES_OK;
 80064f0:	2000      	movs	r0, #0
  {
    res = RES_ERROR;
  }

  return res;
}
 80064f2:	bd08      	pop	{r3, pc}
    res = RES_ERROR;
 80064f4:	2001      	movs	r0, #1
 80064f6:	e7fc      	b.n	80064f2 <USBH_status+0xe>
 80064f8:	20001858 	.word	0x20001858

080064fc <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80064fc:	b510      	push	{r4, lr}
 80064fe:	b090      	sub	sp, #64	; 0x40
 8006500:	4604      	mov	r4, r0
  DRESULT res = RES_ERROR;
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 8006502:	9300      	str	r3, [sp, #0]
 8006504:	460b      	mov	r3, r1
 8006506:	4601      	mov	r1, r0
 8006508:	480d      	ldr	r0, [pc, #52]	; (8006540 <USBH_read+0x44>)
 800650a:	f000 fba6 	bl	8006c5a <USBH_MSC_Read>
 800650e:	b908      	cbnz	r0, 8006514 <USBH_read+0x18>
      break;
    }
  }

  return res;
}
 8006510:	b010      	add	sp, #64	; 0x40
 8006512:	bd10      	pop	{r4, pc}
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8006514:	aa03      	add	r2, sp, #12
 8006516:	4621      	mov	r1, r4
 8006518:	4809      	ldr	r0, [pc, #36]	; (8006540 <USBH_read+0x44>)
 800651a:	f000 fb79 	bl	8006c10 <USBH_MSC_GetLUNInfo>
    switch (info.sense.asc)
 800651e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8006522:	2b28      	cmp	r3, #40	; 0x28
 8006524:	d007      	beq.n	8006536 <USBH_read+0x3a>
 8006526:	2b3a      	cmp	r3, #58	; 0x3a
 8006528:	d007      	beq.n	800653a <USBH_read+0x3e>
 800652a:	2b04      	cmp	r3, #4
 800652c:	d001      	beq.n	8006532 <USBH_read+0x36>
      res = RES_ERROR;
 800652e:	2001      	movs	r0, #1
 8006530:	e7ee      	b.n	8006510 <USBH_read+0x14>
    switch (info.sense.asc)
 8006532:	2003      	movs	r0, #3
 8006534:	e7ec      	b.n	8006510 <USBH_read+0x14>
 8006536:	2003      	movs	r0, #3
 8006538:	e7ea      	b.n	8006510 <USBH_read+0x14>
 800653a:	2003      	movs	r0, #3
 800653c:	e7e8      	b.n	8006510 <USBH_read+0x14>
 800653e:	bf00      	nop
 8006540:	20001858 	.word	0x20001858

08006544 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006544:	b530      	push	{r4, r5, lr}
 8006546:	b08f      	sub	sp, #60	; 0x3c
 8006548:	460c      	mov	r4, r1
 800654a:	4615      	mov	r5, r2
  DRESULT res = RES_ERROR;
  MSC_LUNTypeDef info;

  switch (cmd)
 800654c:	2903      	cmp	r1, #3
 800654e:	d824      	bhi.n	800659a <USBH_ioctl+0x56>
 8006550:	e8df f001 	tbb	[pc, r1]
 8006554:	180e0502 	.word	0x180e0502
 8006558:	4608      	mov	r0, r1
  default:
    res = RES_PARERR;
  }

  return res;
}
 800655a:	b00f      	add	sp, #60	; 0x3c
 800655c:	bd30      	pop	{r4, r5, pc}
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800655e:	aa01      	add	r2, sp, #4
 8006560:	4601      	mov	r1, r0
 8006562:	4812      	ldr	r0, [pc, #72]	; (80065ac <USBH_ioctl+0x68>)
 8006564:	f000 fb54 	bl	8006c10 <USBH_MSC_GetLUNInfo>
 8006568:	b9c8      	cbnz	r0, 800659e <USBH_ioctl+0x5a>
      *(DWORD*)buff = info.capacity.block_nbr;
 800656a:	9b02      	ldr	r3, [sp, #8]
 800656c:	602b      	str	r3, [r5, #0]
      res = RES_OK;
 800656e:	e7f4      	b.n	800655a <USBH_ioctl+0x16>
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8006570:	aa01      	add	r2, sp, #4
 8006572:	4601      	mov	r1, r0
 8006574:	480d      	ldr	r0, [pc, #52]	; (80065ac <USBH_ioctl+0x68>)
 8006576:	f000 fb4b 	bl	8006c10 <USBH_MSC_GetLUNInfo>
 800657a:	b990      	cbnz	r0, 80065a2 <USBH_ioctl+0x5e>
      *(DWORD*)buff = info.capacity.block_size;
 800657c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8006580:	602b      	str	r3, [r5, #0]
      res = RES_OK;
 8006582:	e7ea      	b.n	800655a <USBH_ioctl+0x16>
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8006584:	aa01      	add	r2, sp, #4
 8006586:	4601      	mov	r1, r0
 8006588:	4808      	ldr	r0, [pc, #32]	; (80065ac <USBH_ioctl+0x68>)
 800658a:	f000 fb41 	bl	8006c10 <USBH_MSC_GetLUNInfo>
 800658e:	b950      	cbnz	r0, 80065a6 <USBH_ioctl+0x62>
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8006590:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8006594:	0a5b      	lsrs	r3, r3, #9
 8006596:	602b      	str	r3, [r5, #0]
      res = RES_OK;
 8006598:	e7df      	b.n	800655a <USBH_ioctl+0x16>
    res = RES_PARERR;
 800659a:	2004      	movs	r0, #4
 800659c:	e7dd      	b.n	800655a <USBH_ioctl+0x16>
      res = RES_ERROR;
 800659e:	4620      	mov	r0, r4
 80065a0:	e7db      	b.n	800655a <USBH_ioctl+0x16>
      res = RES_ERROR;
 80065a2:	2001      	movs	r0, #1
 80065a4:	e7d9      	b.n	800655a <USBH_ioctl+0x16>
      res = RES_ERROR;
 80065a6:	2001      	movs	r0, #1
 80065a8:	e7d7      	b.n	800655a <USBH_ioctl+0x16>
 80065aa:	bf00      	nop
 80065ac:	20001858 	.word	0x20001858

080065b0 <USBH_write>:
{
 80065b0:	b510      	push	{r4, lr}
 80065b2:	b090      	sub	sp, #64	; 0x40
 80065b4:	4604      	mov	r4, r0
  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 80065b6:	9300      	str	r3, [sp, #0]
 80065b8:	460b      	mov	r3, r1
 80065ba:	4601      	mov	r1, r0
 80065bc:	4810      	ldr	r0, [pc, #64]	; (8006600 <USBH_write+0x50>)
 80065be:	f000 fb97 	bl	8006cf0 <USBH_MSC_Write>
 80065c2:	b908      	cbnz	r0, 80065c8 <USBH_write+0x18>
}
 80065c4:	b010      	add	sp, #64	; 0x40
 80065c6:	bd10      	pop	{r4, pc}
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 80065c8:	aa03      	add	r2, sp, #12
 80065ca:	4621      	mov	r1, r4
 80065cc:	480c      	ldr	r0, [pc, #48]	; (8006600 <USBH_write+0x50>)
 80065ce:	f000 fb1f 	bl	8006c10 <USBH_MSC_GetLUNInfo>
    switch (info.sense.asc)
 80065d2:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80065d6:	2b27      	cmp	r3, #39	; 0x27
 80065d8:	d00c      	beq.n	80065f4 <USBH_write+0x44>
 80065da:	d905      	bls.n	80065e8 <USBH_write+0x38>
 80065dc:	2b28      	cmp	r3, #40	; 0x28
 80065de:	d00b      	beq.n	80065f8 <USBH_write+0x48>
 80065e0:	2b3a      	cmp	r3, #58	; 0x3a
 80065e2:	d10b      	bne.n	80065fc <USBH_write+0x4c>
      res = RES_NOTRDY;
 80065e4:	2003      	movs	r0, #3
 80065e6:	e7ed      	b.n	80065c4 <USBH_write+0x14>
    switch (info.sense.asc)
 80065e8:	2b04      	cmp	r3, #4
 80065ea:	d001      	beq.n	80065f0 <USBH_write+0x40>
      res = RES_ERROR;
 80065ec:	2001      	movs	r0, #1
 80065ee:	e7e9      	b.n	80065c4 <USBH_write+0x14>
      res = RES_NOTRDY;
 80065f0:	2003      	movs	r0, #3
 80065f2:	e7e7      	b.n	80065c4 <USBH_write+0x14>
    switch (info.sense.asc)
 80065f4:	2002      	movs	r0, #2
 80065f6:	e7e5      	b.n	80065c4 <USBH_write+0x14>
      res = RES_NOTRDY;
 80065f8:	2003      	movs	r0, #3
 80065fa:	e7e3      	b.n	80065c4 <USBH_write+0x14>
      res = RES_ERROR;
 80065fc:	2001      	movs	r0, #1
 80065fe:	e7e1      	b.n	80065c4 <USBH_write+0x14>
 8006600:	20001858 	.word	0x20001858

08006604 <Prep_Queue>:
#include <stdlib.h>
#include <stdio.h>

void Prep_Queue(Queue * que)
{
	que->Head = NULL;
 8006604:	2300      	movs	r3, #0
 8006606:	6003      	str	r3, [r0, #0]
	que->Tail = NULL;
 8006608:	6043      	str	r3, [r0, #4]
	que->Size = 0;
 800660a:	6083      	str	r3, [r0, #8]
}
 800660c:	4770      	bx	lr
	...

08006610 <Enqueue>:

uint8_t Enqueue(Queue * que, void * data)
{
 8006610:	b538      	push	{r3, r4, r5, lr}
 8006612:	4604      	mov	r4, r0
 8006614:	460d      	mov	r5, r1
	Node * node = (Node *)malloc(sizeof(Node));
 8006616:	2008      	movs	r0, #8
 8006618:	f002 f88e 	bl	8008738 <malloc>

	if(node != NULL)
 800661c:	b178      	cbz	r0, 800663e <Enqueue+0x2e>
	{
		node->Next = NULL;
 800661e:	2200      	movs	r2, #0
 8006620:	6042      	str	r2, [r0, #4]
		node->Data = data;
 8006622:	6005      	str	r5, [r0, #0]

		if(que->Size == 0)
 8006624:	68a2      	ldr	r2, [r4, #8]
 8006626:	b932      	cbnz	r2, 8006636 <Enqueue+0x26>
		{
			que->Head = node;
 8006628:	6020      	str	r0, [r4, #0]
			que->Tail = node;
 800662a:	6060      	str	r0, [r4, #4]
		{
			que->Tail->Next = (Node *)node;
			que->Tail = node;
		}

		que->Size++;
 800662c:	68a3      	ldr	r3, [r4, #8]
 800662e:	3301      	adds	r3, #1
 8006630:	60a3      	str	r3, [r4, #8]
		return 1;
 8006632:	2001      	movs	r0, #1
	else
	{
		printf("Enqueue malloc error\r\n");
		return 0;
	}
}
 8006634:	bd38      	pop	{r3, r4, r5, pc}
			que->Tail->Next = (Node *)node;
 8006636:	6862      	ldr	r2, [r4, #4]
 8006638:	6050      	str	r0, [r2, #4]
			que->Tail = node;
 800663a:	6060      	str	r0, [r4, #4]
 800663c:	e7f6      	b.n	800662c <Enqueue+0x1c>
		printf("Enqueue malloc error\r\n");
 800663e:	4802      	ldr	r0, [pc, #8]	; (8006648 <Enqueue+0x38>)
 8006640:	f002 fb14 	bl	8008c6c <puts>
		return 0;
 8006644:	2000      	movs	r0, #0
 8006646:	e7f5      	b.n	8006634 <Enqueue+0x24>
 8006648:	080097fc 	.word	0x080097fc

0800664c <Queue_Peek>:
		return NULL;
}

void * Queue_Peek(Queue * que, uint32_t index)
{
	if(index < que->Size)
 800664c:	6883      	ldr	r3, [r0, #8]
 800664e:	428b      	cmp	r3, r1
 8006650:	d908      	bls.n	8006664 <Queue_Peek+0x18>
	{
		Node * travler = que->Head;
 8006652:	6802      	ldr	r2, [r0, #0]
		uint32_t counter = 0;
 8006654:	2300      	movs	r3, #0
		for(; counter < index; counter++)
 8006656:	e001      	b.n	800665c <Queue_Peek+0x10>
			travler = (Node *)travler->Next;
 8006658:	6852      	ldr	r2, [r2, #4]
		for(; counter < index; counter++)
 800665a:	3301      	adds	r3, #1
 800665c:	428b      	cmp	r3, r1
 800665e:	d3fb      	bcc.n	8006658 <Queue_Peek+0xc>

		return travler->Data;
 8006660:	6810      	ldr	r0, [r2, #0]
 8006662:	4770      	bx	lr
	}
	else
		return NULL;
 8006664:	2000      	movs	r0, #0
}
 8006666:	4770      	bx	lr

08006668 <USBH_MSC_SOFProcess>:
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
}
 8006668:	2000      	movs	r0, #0
 800666a:	4770      	bx	lr

0800666c <USBH_MSC_Process>:
{
 800666c:	b570      	push	{r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800666e:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8006672:	69de      	ldr	r6, [r3, #28]
  switch (MSC_Handle->state)
 8006674:	7b33      	ldrb	r3, [r6, #12]
 8006676:	b123      	cbz	r3, 8006682 <USBH_MSC_Process+0x16>
 8006678:	2b01      	cmp	r3, #1
 800667a:	f040 8145 	bne.w	8006908 <USBH_MSC_Process+0x29c>
      error = USBH_OK;
 800667e:	2000      	movs	r0, #0
}
 8006680:	bd70      	pop	{r4, r5, r6, pc}
 8006682:	4604      	mov	r4, r0
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8006684:	f8b6 10f8 	ldrh.w	r1, [r6, #248]	; 0xf8
 8006688:	7833      	ldrb	r3, [r6, #0]
 800668a:	4299      	cmp	r1, r3
 800668c:	f080 8131 	bcs.w	80068f2 <USBH_MSC_Process+0x286>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8006690:	2334      	movs	r3, #52	; 0x34
 8006692:	fb03 6301 	mla	r3, r3, r1, r6
 8006696:	2201      	movs	r2, #1
 8006698:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 800669c:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80066a0:	2b08      	cmp	r3, #8
 80066a2:	f200 8133 	bhi.w	800690c <USBH_MSC_Process+0x2a0>
 80066a6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80066aa:	0009      	.short	0x0009
 80066ac:	00440131 	.word	0x00440131
 80066b0:	0015009e 	.word	0x0015009e
 80066b4:	013100d3 	.word	0x013100d3
 80066b8:	011f0131 	.word	0x011f0131
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 80066bc:	2334      	movs	r3, #52	; 0x34
 80066be:	fb03 6301 	mla	r3, r3, r1, r6
 80066c2:	2204      	movs	r2, #4
 80066c4:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
            MSC_Handle->timer = phost->Timer;
 80066c8:	f8d0 33c4 	ldr.w	r3, [r0, #964]	; 0x3c4
 80066cc:	f8c6 30fc 	str.w	r3, [r6, #252]	; 0xfc
  USBH_StatusTypeDef error = USBH_BUSY;
 80066d0:	2001      	movs	r0, #1
            break;
 80066d2:	e7d5      	b.n	8006680 <USBH_MSC_Process+0x14>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 80066d4:	2234      	movs	r2, #52	; 0x34
 80066d6:	fb01 f202 	mul.w	r2, r1, r2
 80066da:	3298      	adds	r2, #152	; 0x98
 80066dc:	4432      	add	r2, r6
 80066de:	3207      	adds	r2, #7
 80066e0:	b2c9      	uxtb	r1, r1
 80066e2:	f000 fd4c 	bl	800717e <USBH_MSC_SCSI_Inquiry>
            if (scsi_status == USBH_OK)
 80066e6:	4603      	mov	r3, r0
 80066e8:	b938      	cbnz	r0, 80066fa <USBH_MSC_Process+0x8e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80066ea:	f8b6 20f8 	ldrh.w	r2, [r6, #248]	; 0xf8
 80066ee:	2134      	movs	r1, #52	; 0x34
 80066f0:	fb01 6202 	mla	r2, r1, r2, r6
 80066f4:	2102      	movs	r1, #2
 80066f6:	f882 1090 	strb.w	r1, [r2, #144]	; 0x90
            if (scsi_status == USBH_FAIL)
 80066fa:	2b02      	cmp	r3, #2
 80066fc:	d003      	beq.n	8006706 <USBH_MSC_Process+0x9a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80066fe:	2b04      	cmp	r3, #4
 8006700:	d00b      	beq.n	800671a <USBH_MSC_Process+0xae>
  USBH_StatusTypeDef error = USBH_BUSY;
 8006702:	2001      	movs	r0, #1
 8006704:	e7bc      	b.n	8006680 <USBH_MSC_Process+0x14>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8006706:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 800670a:	2234      	movs	r2, #52	; 0x34
 800670c:	fb02 6303 	mla	r3, r2, r3, r6
 8006710:	2205      	movs	r2, #5
 8006712:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  USBH_StatusTypeDef error = USBH_BUSY;
 8006716:	2001      	movs	r0, #1
 8006718:	e7b2      	b.n	8006680 <USBH_MSC_Process+0x14>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800671a:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 800671e:	2234      	movs	r2, #52	; 0x34
 8006720:	fb02 6303 	mla	r3, r2, r3, r6
 8006724:	2001      	movs	r0, #1
 8006726:	f883 0090 	strb.w	r0, [r3, #144]	; 0x90
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800672a:	2202      	movs	r2, #2
 800672c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
 8006730:	e7a6      	b.n	8006680 <USBH_MSC_Process+0x14>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8006732:	b2c9      	uxtb	r1, r1
 8006734:	f000 fcb5 	bl	80070a2 <USBH_MSC_SCSI_TestUnitReady>
            if (ready_status == USBH_OK)
 8006738:	4602      	mov	r2, r0
 800673a:	b9c0      	cbnz	r0, 800676e <USBH_MSC_Process+0x102>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800673c:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 8006740:	2134      	movs	r1, #52	; 0x34
 8006742:	fb01 6103 	mla	r1, r1, r3, r6
 8006746:	f891 1092 	ldrb.w	r1, [r1, #146]	; 0x92
 800674a:	b1b1      	cbz	r1, 800677a <USBH_MSC_Process+0x10e>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800674c:	2134      	movs	r1, #52	; 0x34
 800674e:	fb01 6103 	mla	r1, r1, r3, r6
 8006752:	2001      	movs	r0, #1
 8006754:	f881 00c1 	strb.w	r0, [r1, #193]	; 0xc1
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8006758:	2134      	movs	r1, #52	; 0x34
 800675a:	fb01 6303 	mla	r3, r1, r3, r6
 800675e:	2103      	movs	r1, #3
 8006760:	f883 1090 	strb.w	r1, [r3, #144]	; 0x90
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8006764:	2100      	movs	r1, #0
 8006766:	f883 1091 	strb.w	r1, [r3, #145]	; 0x91
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800676a:	f883 1092 	strb.w	r1, [r3, #146]	; 0x92
            if (ready_status == USBH_FAIL)
 800676e:	2a02      	cmp	r2, #2
 8006770:	d00a      	beq.n	8006788 <USBH_MSC_Process+0x11c>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8006772:	2a04      	cmp	r2, #4
 8006774:	d02b      	beq.n	80067ce <USBH_MSC_Process+0x162>
  USBH_StatusTypeDef error = USBH_BUSY;
 8006776:	2001      	movs	r0, #1
 8006778:	e782      	b.n	8006680 <USBH_MSC_Process+0x14>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800677a:	2134      	movs	r1, #52	; 0x34
 800677c:	fb01 6103 	mla	r1, r1, r3, r6
 8006780:	2000      	movs	r0, #0
 8006782:	f881 00c1 	strb.w	r0, [r1, #193]	; 0xc1
 8006786:	e7e7      	b.n	8006758 <USBH_MSC_Process+0xec>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8006788:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 800678c:	2234      	movs	r2, #52	; 0x34
 800678e:	fb02 6203 	mla	r2, r2, r3, r6
 8006792:	f892 2092 	ldrb.w	r2, [r2, #146]	; 0x92
 8006796:	2a02      	cmp	r2, #2
 8006798:	d012      	beq.n	80067c0 <USBH_MSC_Process+0x154>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800679a:	2234      	movs	r2, #52	; 0x34
 800679c:	fb02 6203 	mla	r2, r2, r3, r6
 80067a0:	2101      	movs	r1, #1
 80067a2:	f882 10c1 	strb.w	r1, [r2, #193]	; 0xc1
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80067a6:	2234      	movs	r2, #52	; 0x34
 80067a8:	fb02 6303 	mla	r3, r2, r3, r6
 80067ac:	2205      	movs	r2, #5
 80067ae:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80067b2:	2001      	movs	r0, #1
 80067b4:	f883 0091 	strb.w	r0, [r3, #145]	; 0x91
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 80067b8:	2202      	movs	r2, #2
 80067ba:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
 80067be:	e75f      	b.n	8006680 <USBH_MSC_Process+0x14>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 80067c0:	2234      	movs	r2, #52	; 0x34
 80067c2:	fb02 6203 	mla	r2, r2, r3, r6
 80067c6:	2100      	movs	r1, #0
 80067c8:	f882 10c1 	strb.w	r1, [r2, #193]	; 0xc1
 80067cc:	e7eb      	b.n	80067a6 <USBH_MSC_Process+0x13a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80067ce:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 80067d2:	2234      	movs	r2, #52	; 0x34
 80067d4:	fb02 6303 	mla	r3, r2, r3, r6
 80067d8:	2001      	movs	r0, #1
 80067da:	f883 0090 	strb.w	r0, [r3, #144]	; 0x90
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80067de:	2202      	movs	r2, #2
 80067e0:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
 80067e4:	e74c      	b.n	8006680 <USBH_MSC_Process+0x14>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 80067e6:	2234      	movs	r2, #52	; 0x34
 80067e8:	fb01 f202 	mul.w	r2, r1, r2
 80067ec:	3290      	adds	r2, #144	; 0x90
 80067ee:	4432      	add	r2, r6
 80067f0:	3204      	adds	r2, #4
 80067f2:	b2c9      	uxtb	r1, r1
 80067f4:	f000 fc7c 	bl	80070f0 <USBH_MSC_SCSI_ReadCapacity>
            if (scsi_status == USBH_OK)
 80067f8:	b970      	cbnz	r0, 8006818 <USBH_MSC_Process+0x1ac>
              if (MSC_Handle->unit[MSC_Handle->current_lun].state_changed == 1U)
 80067fa:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80067fe:	2234      	movs	r2, #52	; 0x34
 8006800:	fb02 6203 	mla	r2, r2, r3, r6
 8006804:	2001      	movs	r0, #1
 8006806:	f882 0090 	strb.w	r0, [r2, #144]	; 0x90
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800680a:	2100      	movs	r1, #0
 800680c:	f882 1091 	strb.w	r1, [r2, #145]	; 0x91
              MSC_Handle->current_lun++;
 8006810:	4403      	add	r3, r0
 8006812:	f8a6 30f8 	strh.w	r3, [r6, #248]	; 0xf8
 8006816:	e733      	b.n	8006680 <USBH_MSC_Process+0x14>
            else if (scsi_status == USBH_FAIL)
 8006818:	2802      	cmp	r0, #2
 800681a:	d003      	beq.n	8006824 <USBH_MSC_Process+0x1b8>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800681c:	2804      	cmp	r0, #4
 800681e:	d00b      	beq.n	8006838 <USBH_MSC_Process+0x1cc>
  USBH_StatusTypeDef error = USBH_BUSY;
 8006820:	2001      	movs	r0, #1
 8006822:	e72d      	b.n	8006680 <USBH_MSC_Process+0x14>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8006824:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 8006828:	2234      	movs	r2, #52	; 0x34
 800682a:	fb02 6303 	mla	r3, r2, r3, r6
 800682e:	2205      	movs	r2, #5
 8006830:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  USBH_StatusTypeDef error = USBH_BUSY;
 8006834:	2001      	movs	r0, #1
 8006836:	e723      	b.n	8006680 <USBH_MSC_Process+0x14>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8006838:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 800683c:	2234      	movs	r2, #52	; 0x34
 800683e:	fb02 6303 	mla	r3, r2, r3, r6
 8006842:	2001      	movs	r0, #1
 8006844:	f883 0090 	strb.w	r0, [r3, #144]	; 0x90
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8006848:	2202      	movs	r2, #2
 800684a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
 800684e:	e717      	b.n	8006680 <USBH_MSC_Process+0x14>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8006850:	2234      	movs	r2, #52	; 0x34
 8006852:	fb01 f202 	mul.w	r2, r1, r2
 8006856:	3298      	adds	r2, #152	; 0x98
 8006858:	4432      	add	r2, r6
 800685a:	3204      	adds	r2, #4
 800685c:	b2c9      	uxtb	r1, r1
 800685e:	f000 fcf4 	bl	800724a <USBH_MSC_SCSI_RequestSense>
            if (scsi_status == USBH_OK)
 8006862:	4602      	mov	r2, r0
 8006864:	b998      	cbnz	r0, 800688e <USBH_MSC_Process+0x222>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8006866:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 800686a:	2134      	movs	r1, #52	; 0x34
 800686c:	fb01 6103 	mla	r1, r1, r3, r6
 8006870:	f891 109c 	ldrb.w	r1, [r1, #156]	; 0x9c
 8006874:	2906      	cmp	r1, #6
 8006876:	d010      	beq.n	800689a <USBH_MSC_Process+0x22e>
 8006878:	2902      	cmp	r1, #2
 800687a:	d00e      	beq.n	800689a <USBH_MSC_Process+0x22e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800687c:	2134      	movs	r1, #52	; 0x34
 800687e:	fb01 6103 	mla	r1, r1, r3, r6
 8006882:	2001      	movs	r0, #1
 8006884:	f881 0090 	strb.w	r0, [r1, #144]	; 0x90
              MSC_Handle->current_lun++;
 8006888:	4403      	add	r3, r0
 800688a:	f8a6 30f8 	strh.w	r3, [r6, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 800688e:	2a02      	cmp	r2, #2
 8006890:	d014      	beq.n	80068bc <USBH_MSC_Process+0x250>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8006892:	2a04      	cmp	r2, #4
 8006894:	d01c      	beq.n	80068d0 <USBH_MSC_Process+0x264>
  USBH_StatusTypeDef error = USBH_BUSY;
 8006896:	2001      	movs	r0, #1
 8006898:	e6f2      	b.n	8006680 <USBH_MSC_Process+0x14>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 800689a:	f8d4 13c4 	ldr.w	r1, [r4, #964]	; 0x3c4
 800689e:	f8d6 00fc 	ldr.w	r0, [r6, #252]	; 0xfc
 80068a2:	1a09      	subs	r1, r1, r0
 80068a4:	f242 700f 	movw	r0, #9999	; 0x270f
 80068a8:	4281      	cmp	r1, r0
 80068aa:	d8e7      	bhi.n	800687c <USBH_MSC_Process+0x210>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80068ac:	2234      	movs	r2, #52	; 0x34
 80068ae:	fb02 6303 	mla	r3, r2, r3, r6
 80068b2:	2202      	movs	r2, #2
 80068b4:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  USBH_StatusTypeDef error = USBH_BUSY;
 80068b8:	2001      	movs	r0, #1
                  break;
 80068ba:	e6e1      	b.n	8006680 <USBH_MSC_Process+0x14>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 80068bc:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 80068c0:	2234      	movs	r2, #52	; 0x34
 80068c2:	fb02 6303 	mla	r3, r2, r3, r6
 80068c6:	2208      	movs	r2, #8
 80068c8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  USBH_StatusTypeDef error = USBH_BUSY;
 80068cc:	2001      	movs	r0, #1
 80068ce:	e6d7      	b.n	8006680 <USBH_MSC_Process+0x14>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80068d0:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 80068d4:	2234      	movs	r2, #52	; 0x34
 80068d6:	fb02 6303 	mla	r3, r2, r3, r6
 80068da:	2001      	movs	r0, #1
 80068dc:	f883 0090 	strb.w	r0, [r3, #144]	; 0x90
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80068e0:	2202      	movs	r2, #2
 80068e2:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
 80068e6:	e6cb      	b.n	8006680 <USBH_MSC_Process+0x14>
            MSC_Handle->current_lun++;
 80068e8:	3101      	adds	r1, #1
 80068ea:	f8a6 10f8 	strh.w	r1, [r6, #248]	; 0xf8
  USBH_StatusTypeDef error = USBH_BUSY;
 80068ee:	2001      	movs	r0, #1
            break;
 80068f0:	e6c6      	b.n	8006680 <USBH_MSC_Process+0x14>
        MSC_Handle->current_lun = 0U;
 80068f2:	2300      	movs	r3, #0
 80068f4:	f8a6 30f8 	strh.w	r3, [r6, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 80068f8:	2501      	movs	r5, #1
 80068fa:	7335      	strb	r5, [r6, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80068fc:	f8d0 33d4 	ldr.w	r3, [r0, #980]	; 0x3d4
 8006900:	2102      	movs	r1, #2
 8006902:	4798      	blx	r3
  USBH_StatusTypeDef error = USBH_BUSY;
 8006904:	4628      	mov	r0, r5
 8006906:	e6bb      	b.n	8006680 <USBH_MSC_Process+0x14>
  switch (MSC_Handle->state)
 8006908:	2001      	movs	r0, #1
 800690a:	e6b9      	b.n	8006680 <USBH_MSC_Process+0x14>
 800690c:	2001      	movs	r0, #1
 800690e:	e6b7      	b.n	8006680 <USBH_MSC_Process+0x14>

08006910 <USBH_MSC_ClassRequest>:
{
 8006910:	b510      	push	{r4, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006912:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8006916:	69dc      	ldr	r4, [r3, #28]
  switch (MSC_Handle->req_state)
 8006918:	7ba3      	ldrb	r3, [r4, #14]
 800691a:	2b02      	cmp	r3, #2
 800691c:	d004      	beq.n	8006928 <USBH_MSC_ClassRequest+0x18>
 800691e:	2b03      	cmp	r3, #3
 8006920:	d025      	beq.n	800696e <USBH_MSC_ClassRequest+0x5e>
 8006922:	b10b      	cbz	r3, 8006928 <USBH_MSC_ClassRequest+0x18>
 8006924:	2001      	movs	r0, #1
}
 8006926:	bd10      	pop	{r4, pc}
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8006928:	4621      	mov	r1, r4
 800692a:	f000 fa6f 	bl	8006e0c <USBH_MSC_BOT_REQ_GetMaxLUN>
      if (status == USBH_NOT_SUPPORTED)
 800692e:	2803      	cmp	r0, #3
 8006930:	d002      	beq.n	8006938 <USBH_MSC_ClassRequest+0x28>
      if (status == USBH_OK)
 8006932:	2800      	cmp	r0, #0
 8006934:	d1f7      	bne.n	8006926 <USBH_MSC_ClassRequest+0x16>
 8006936:	e001      	b.n	800693c <USBH_MSC_ClassRequest+0x2c>
        MSC_Handle->max_lun = 0U;
 8006938:	2000      	movs	r0, #0
 800693a:	7020      	strb	r0, [r4, #0]
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 800693c:	7821      	ldrb	r1, [r4, #0]
 800693e:	2902      	cmp	r1, #2
 8006940:	d813      	bhi.n	800696a <USBH_MSC_ClassRequest+0x5a>
 8006942:	3101      	adds	r1, #1
 8006944:	b2c9      	uxtb	r1, r1
 8006946:	7021      	strb	r1, [r4, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8006948:	2300      	movs	r3, #0
 800694a:	428b      	cmp	r3, r1
 800694c:	d2eb      	bcs.n	8006926 <USBH_MSC_ClassRequest+0x16>
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800694e:	2234      	movs	r2, #52	; 0x34
 8006950:	fb02 4203 	mla	r2, r2, r3, r4
 8006954:	f04f 0c02 	mov.w	ip, #2
 8006958:	f882 c092 	strb.w	ip, [r2, #146]	; 0x92
          MSC_Handle->unit[i].state_changed = 0U;
 800695c:	f04f 0c00 	mov.w	ip, #0
 8006960:	f882 c0c1 	strb.w	ip, [r2, #193]	; 0xc1
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8006964:	3301      	adds	r3, #1
 8006966:	b2db      	uxtb	r3, r3
 8006968:	e7ef      	b.n	800694a <USBH_MSC_ClassRequest+0x3a>
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 800696a:	2102      	movs	r1, #2
 800696c:	e7eb      	b.n	8006946 <USBH_MSC_ClassRequest+0x36>
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 800696e:	2100      	movs	r1, #0
 8006970:	f001 fb09 	bl	8007f86 <USBH_ClrFeature>
 8006974:	b918      	cbnz	r0, 800697e <USBH_MSC_ClassRequest+0x6e>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8006976:	7be3      	ldrb	r3, [r4, #15]
 8006978:	73a3      	strb	r3, [r4, #14]
  USBH_StatusTypeDef status = USBH_BUSY;
 800697a:	2001      	movs	r0, #1
 800697c:	e7d3      	b.n	8006926 <USBH_MSC_ClassRequest+0x16>
 800697e:	2001      	movs	r0, #1
 8006980:	e7d1      	b.n	8006926 <USBH_MSC_ClassRequest+0x16>

08006982 <USBH_MSC_InterfaceDeInit>:
{
 8006982:	b538      	push	{r3, r4, r5, lr}
 8006984:	4604      	mov	r4, r0
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006986:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 800698a:	69dd      	ldr	r5, [r3, #28]
  if (MSC_Handle->OutPipe)
 800698c:	7969      	ldrb	r1, [r5, #5]
 800698e:	b969      	cbnz	r1, 80069ac <USBH_MSC_InterfaceDeInit+0x2a>
  if (MSC_Handle->InPipe)
 8006990:	7929      	ldrb	r1, [r5, #4]
 8006992:	b9a1      	cbnz	r1, 80069be <USBH_MSC_InterfaceDeInit+0x3c>
  if (phost->pActiveClass->pData)
 8006994:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 8006998:	69d8      	ldr	r0, [r3, #28]
 800699a:	b128      	cbz	r0, 80069a8 <USBH_MSC_InterfaceDeInit+0x26>
    USBH_free(phost->pActiveClass->pData);
 800699c:	f001 fed4 	bl	8008748 <free>
    phost->pActiveClass->pData = 0U;
 80069a0:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 80069a4:	2200      	movs	r2, #0
 80069a6:	61da      	str	r2, [r3, #28]
}
 80069a8:	2000      	movs	r0, #0
 80069aa:	bd38      	pop	{r3, r4, r5, pc}
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 80069ac:	f001 fb7d 	bl	80080aa <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 80069b0:	7969      	ldrb	r1, [r5, #5]
 80069b2:	4620      	mov	r0, r4
 80069b4:	f001 fb91 	bl	80080da <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 80069b8:	2300      	movs	r3, #0
 80069ba:	716b      	strb	r3, [r5, #5]
 80069bc:	e7e8      	b.n	8006990 <USBH_MSC_InterfaceDeInit+0xe>
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 80069be:	4620      	mov	r0, r4
 80069c0:	f001 fb73 	bl	80080aa <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 80069c4:	7929      	ldrb	r1, [r5, #4]
 80069c6:	4620      	mov	r0, r4
 80069c8:	f001 fb87 	bl	80080da <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 80069cc:	2300      	movs	r3, #0
 80069ce:	712b      	strb	r3, [r5, #4]
 80069d0:	e7e0      	b.n	8006994 <USBH_MSC_InterfaceDeInit+0x12>

080069d2 <USBH_MSC_InterfaceInit>:
{
 80069d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069d4:	b085      	sub	sp, #20
 80069d6:	4604      	mov	r4, r0
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 80069d8:	f8d0 137c 	ldr.w	r1, [r0, #892]	; 0x37c
 80069dc:	2350      	movs	r3, #80	; 0x50
 80069de:	2206      	movs	r2, #6
 80069e0:	7909      	ldrb	r1, [r1, #4]
 80069e2:	f000 feb3 	bl	800774c <USBH_FindInterface>
  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 80069e6:	2801      	cmp	r0, #1
 80069e8:	d87c      	bhi.n	8006ae4 <USBH_MSC_InterfaceInit+0x112>
 80069ea:	4605      	mov	r5, r0
  status = USBH_SelectInterface(phost, interface);
 80069ec:	4601      	mov	r1, r0
 80069ee:	4620      	mov	r0, r4
 80069f0:	f000 fea2 	bl	8007738 <USBH_SelectInterface>
  if (status != USBH_OK)
 80069f4:	4607      	mov	r7, r0
 80069f6:	2800      	cmp	r0, #0
 80069f8:	d178      	bne.n	8006aec <USBH_MSC_InterfaceInit+0x11a>
  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 80069fa:	f8d4 637c 	ldr.w	r6, [r4, #892]	; 0x37c
 80069fe:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006a02:	f001 fe99 	bl	8008738 <malloc>
 8006a06:	61f0      	str	r0, [r6, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a08:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 8006a0c:	69de      	ldr	r6, [r3, #28]
  if (MSC_Handle == NULL)
 8006a0e:	2e00      	cmp	r6, #0
 8006a10:	d06e      	beq.n	8006af0 <USBH_MSC_InterfaceInit+0x11e>
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8006a12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006a16:	2100      	movs	r1, #0
 8006a18:	4630      	mov	r0, r6
 8006a1a:	f002 fa07 	bl	8008e2c <memset>
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006a1e:	231a      	movs	r3, #26
 8006a20:	fb03 4305 	mla	r3, r3, r5, r4
 8006a24:	f893 234e 	ldrb.w	r2, [r3, #846]	; 0x34e
 8006a28:	f993 334e 	ldrsb.w	r3, [r3, #846]	; 0x34e
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	db49      	blt.n	8006ac4 <USBH_MSC_InterfaceInit+0xf2>
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8006a30:	71b2      	strb	r2, [r6, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006a32:	231a      	movs	r3, #26
 8006a34:	fb03 4305 	mla	r3, r3, r5, r4
 8006a38:	f8b3 3350 	ldrh.w	r3, [r3, #848]	; 0x350
 8006a3c:	8133      	strh	r3, [r6, #8]
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8006a3e:	231a      	movs	r3, #26
 8006a40:	fb03 4305 	mla	r3, r3, r5, r4
 8006a44:	f893 2356 	ldrb.w	r2, [r3, #854]	; 0x356
 8006a48:	f993 3356 	ldrsb.w	r3, [r3, #854]	; 0x356
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	db41      	blt.n	8006ad4 <USBH_MSC_InterfaceInit+0x102>
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8006a50:	71b2      	strb	r2, [r6, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006a52:	231a      	movs	r3, #26
 8006a54:	fb03 4505 	mla	r5, r3, r5, r4
 8006a58:	f8b5 3358 	ldrh.w	r3, [r5, #856]	; 0x358
 8006a5c:	8133      	strh	r3, [r6, #8]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8006a5e:	79b1      	ldrb	r1, [r6, #6]
 8006a60:	4620      	mov	r0, r4
 8006a62:	f001 fb27 	bl	80080b4 <USBH_AllocPipe>
 8006a66:	7170      	strb	r0, [r6, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8006a68:	79f1      	ldrb	r1, [r6, #7]
 8006a6a:	4620      	mov	r0, r4
 8006a6c:	f001 fb22 	bl	80080b4 <USBH_AllocPipe>
 8006a70:	7130      	strb	r0, [r6, #4]
  USBH_MSC_BOT_Init(phost);
 8006a72:	4620      	mov	r0, r4
 8006a74:	f000 f9d8 	bl	8006e28 <USBH_MSC_BOT_Init>
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8006a78:	79b2      	ldrb	r2, [r6, #6]
 8006a7a:	7971      	ldrb	r1, [r6, #5]
 8006a7c:	8933      	ldrh	r3, [r6, #8]
 8006a7e:	9302      	str	r3, [sp, #8]
 8006a80:	2502      	movs	r5, #2
 8006a82:	9501      	str	r5, [sp, #4]
 8006a84:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 8006a88:	9300      	str	r3, [sp, #0]
 8006a8a:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8006a8e:	4620      	mov	r0, r4
 8006a90:	f001 fafb 	bl	800808a <USBH_OpenPipe>
  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8006a94:	79f2      	ldrb	r2, [r6, #7]
 8006a96:	7931      	ldrb	r1, [r6, #4]
 8006a98:	8973      	ldrh	r3, [r6, #10]
 8006a9a:	9302      	str	r3, [sp, #8]
 8006a9c:	9501      	str	r5, [sp, #4]
 8006a9e:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 8006aa2:	9300      	str	r3, [sp, #0]
 8006aa4:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8006aa8:	4620      	mov	r0, r4
 8006aaa:	f001 faee 	bl	800808a <USBH_OpenPipe>
  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8006aae:	2200      	movs	r2, #0
 8006ab0:	7931      	ldrb	r1, [r6, #4]
 8006ab2:	4620      	mov	r0, r4
 8006ab4:	f001 fdb4 	bl	8008620 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8006ab8:	2200      	movs	r2, #0
 8006aba:	7971      	ldrb	r1, [r6, #5]
 8006abc:	4620      	mov	r0, r4
 8006abe:	f001 fdaf 	bl	8008620 <USBH_LL_SetToggle>
  return USBH_OK;
 8006ac2:	e010      	b.n	8006ae6 <USBH_MSC_InterfaceInit+0x114>
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8006ac4:	71f2      	strb	r2, [r6, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006ac6:	231a      	movs	r3, #26
 8006ac8:	fb03 4305 	mla	r3, r3, r5, r4
 8006acc:	f8b3 3350 	ldrh.w	r3, [r3, #848]	; 0x350
 8006ad0:	8173      	strh	r3, [r6, #10]
 8006ad2:	e7b4      	b.n	8006a3e <USBH_MSC_InterfaceInit+0x6c>
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8006ad4:	71f2      	strb	r2, [r6, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006ad6:	231a      	movs	r3, #26
 8006ad8:	fb03 4305 	mla	r3, r3, r5, r4
 8006adc:	f8b3 3358 	ldrh.w	r3, [r3, #856]	; 0x358
 8006ae0:	8173      	strh	r3, [r6, #10]
 8006ae2:	e7bc      	b.n	8006a5e <USBH_MSC_InterfaceInit+0x8c>
    return USBH_FAIL;
 8006ae4:	2702      	movs	r7, #2
}
 8006ae6:	4638      	mov	r0, r7
 8006ae8:	b005      	add	sp, #20
 8006aea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return USBH_FAIL;
 8006aec:	2702      	movs	r7, #2
 8006aee:	e7fa      	b.n	8006ae6 <USBH_MSC_InterfaceInit+0x114>
    return USBH_FAIL;
 8006af0:	2702      	movs	r7, #2
 8006af2:	e7f8      	b.n	8006ae6 <USBH_MSC_InterfaceInit+0x114>

08006af4 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8006af4:	b530      	push	{r4, r5, lr}
 8006af6:	b083      	sub	sp, #12
 8006af8:	460c      	mov	r4, r1
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006afa:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8006afe:	69dd      	ldr	r5, [r3, #28]
  USBH_StatusTypeDef error = USBH_BUSY ;
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8006b00:	2334      	movs	r3, #52	; 0x34
 8006b02:	fb03 5301 	mla	r3, r3, r1, r5
 8006b06:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8006b0a:	2b06      	cmp	r3, #6
 8006b0c:	d006      	beq.n	8006b1c <USBH_MSC_RdWrProcess+0x28>
 8006b0e:	2b07      	cmp	r3, #7
 8006b10:	d027      	beq.n	8006b62 <USBH_MSC_RdWrProcess+0x6e>
 8006b12:	2b05      	cmp	r3, #5
 8006b14:	d048      	beq.n	8006ba8 <USBH_MSC_RdWrProcess+0xb4>
 8006b16:	2001      	movs	r0, #1
    default:
      break;

  }
  return error;
}
 8006b18:	b003      	add	sp, #12
 8006b1a:	bd30      	pop	{r4, r5, pc}
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	9200      	str	r2, [sp, #0]
 8006b20:	4613      	mov	r3, r2
 8006b22:	f000 fc1e 	bl	8007362 <USBH_MSC_SCSI_Read>
      if (scsi_status == USBH_OK)
 8006b26:	b930      	cbnz	r0, 8006b36 <USBH_MSC_RdWrProcess+0x42>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8006b28:	2334      	movs	r3, #52	; 0x34
 8006b2a:	fb03 5304 	mla	r3, r3, r4, r5
 8006b2e:	2201      	movs	r2, #1
 8006b30:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        error = USBH_OK;
 8006b34:	e7f0      	b.n	8006b18 <USBH_MSC_RdWrProcess+0x24>
      else if (scsi_status == USBH_FAIL)
 8006b36:	2802      	cmp	r0, #2
 8006b38:	d003      	beq.n	8006b42 <USBH_MSC_RdWrProcess+0x4e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8006b3a:	2804      	cmp	r0, #4
 8006b3c:	d009      	beq.n	8006b52 <USBH_MSC_RdWrProcess+0x5e>
  USBH_StatusTypeDef error = USBH_BUSY ;
 8006b3e:	2001      	movs	r0, #1
 8006b40:	e7ea      	b.n	8006b18 <USBH_MSC_RdWrProcess+0x24>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8006b42:	2334      	movs	r3, #52	; 0x34
 8006b44:	fb03 5304 	mla	r3, r3, r4, r5
 8006b48:	2205      	movs	r2, #5
 8006b4a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  USBH_StatusTypeDef error = USBH_BUSY ;
 8006b4e:	2001      	movs	r0, #1
 8006b50:	e7e2      	b.n	8006b18 <USBH_MSC_RdWrProcess+0x24>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8006b52:	2334      	movs	r3, #52	; 0x34
 8006b54:	fb03 5304 	mla	r3, r3, r4, r5
 8006b58:	2208      	movs	r2, #8
 8006b5a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
          error = USBH_FAIL;
 8006b5e:	2002      	movs	r0, #2
 8006b60:	e7da      	b.n	8006b18 <USBH_MSC_RdWrProcess+0x24>
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8006b62:	2200      	movs	r2, #0
 8006b64:	9200      	str	r2, [sp, #0]
 8006b66:	4613      	mov	r3, r2
 8006b68:	f000 fbb5 	bl	80072d6 <USBH_MSC_SCSI_Write>
      if (scsi_status == USBH_OK)
 8006b6c:	b930      	cbnz	r0, 8006b7c <USBH_MSC_RdWrProcess+0x88>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8006b6e:	2334      	movs	r3, #52	; 0x34
 8006b70:	fb03 5304 	mla	r3, r3, r4, r5
 8006b74:	2201      	movs	r2, #1
 8006b76:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        error = USBH_OK;
 8006b7a:	e7cd      	b.n	8006b18 <USBH_MSC_RdWrProcess+0x24>
      else if (scsi_status == USBH_FAIL)
 8006b7c:	2802      	cmp	r0, #2
 8006b7e:	d003      	beq.n	8006b88 <USBH_MSC_RdWrProcess+0x94>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8006b80:	2804      	cmp	r0, #4
 8006b82:	d009      	beq.n	8006b98 <USBH_MSC_RdWrProcess+0xa4>
  USBH_StatusTypeDef error = USBH_BUSY ;
 8006b84:	2001      	movs	r0, #1
 8006b86:	e7c7      	b.n	8006b18 <USBH_MSC_RdWrProcess+0x24>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8006b88:	2334      	movs	r3, #52	; 0x34
 8006b8a:	fb03 5304 	mla	r3, r3, r4, r5
 8006b8e:	2205      	movs	r2, #5
 8006b90:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  USBH_StatusTypeDef error = USBH_BUSY ;
 8006b94:	2001      	movs	r0, #1
 8006b96:	e7bf      	b.n	8006b18 <USBH_MSC_RdWrProcess+0x24>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8006b98:	2334      	movs	r3, #52	; 0x34
 8006b9a:	fb03 5304 	mla	r3, r3, r4, r5
 8006b9e:	2208      	movs	r2, #8
 8006ba0:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
          error = USBH_FAIL;
 8006ba4:	2002      	movs	r0, #2
 8006ba6:	e7b7      	b.n	8006b18 <USBH_MSC_RdWrProcess+0x24>
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8006ba8:	2234      	movs	r2, #52	; 0x34
 8006baa:	fb01 f202 	mul.w	r2, r1, r2
 8006bae:	3298      	adds	r2, #152	; 0x98
 8006bb0:	442a      	add	r2, r5
 8006bb2:	3204      	adds	r2, #4
 8006bb4:	f000 fb49 	bl	800724a <USBH_MSC_SCSI_RequestSense>
      if (scsi_status == USBH_OK)
 8006bb8:	4603      	mov	r3, r0
 8006bba:	b9a0      	cbnz	r0, 8006be6 <USBH_MSC_RdWrProcess+0xf2>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8006bbc:	2234      	movs	r2, #52	; 0x34
 8006bbe:	fb02 5204 	mla	r2, r2, r4, r5
 8006bc2:	2101      	movs	r1, #1
 8006bc4:	f882 1090 	strb.w	r1, [r2, #144]	; 0x90
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8006bc8:	2002      	movs	r0, #2
 8006bca:	f882 0091 	strb.w	r0, [r2, #145]	; 0x91
      if (scsi_status == USBH_FAIL)
 8006bce:	2b02      	cmp	r3, #2
 8006bd0:	d0a2      	beq.n	8006b18 <USBH_MSC_RdWrProcess+0x24>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8006bd2:	2b04      	cmp	r3, #4
 8006bd4:	d1a0      	bne.n	8006b18 <USBH_MSC_RdWrProcess+0x24>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8006bd6:	2334      	movs	r3, #52	; 0x34
 8006bd8:	fb03 5504 	mla	r5, r3, r4, r5
 8006bdc:	2308      	movs	r3, #8
 8006bde:	f885 3090 	strb.w	r3, [r5, #144]	; 0x90
          error = USBH_FAIL;
 8006be2:	2002      	movs	r0, #2
 8006be4:	e798      	b.n	8006b18 <USBH_MSC_RdWrProcess+0x24>
  USBH_StatusTypeDef error = USBH_BUSY ;
 8006be6:	2001      	movs	r0, #1
 8006be8:	e7f1      	b.n	8006bce <USBH_MSC_RdWrProcess+0xda>

08006bea <USBH_MSC_UnitIsReady>:
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006bea:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8006bee:	69da      	ldr	r2, [r3, #28]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8006bf0:	7803      	ldrb	r3, [r0, #0]
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	2b0b      	cmp	r3, #11
 8006bf6:	d001      	beq.n	8006bfc <USBH_MSC_UnitIsReady+0x12>
  {
    res = 1U;
  }
  else
  {
    res = 0U;
 8006bf8:	2000      	movs	r0, #0
 8006bfa:	4770      	bx	lr
  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8006bfc:	2334      	movs	r3, #52	; 0x34
 8006bfe:	fb03 2201 	mla	r2, r3, r1, r2
 8006c02:	f892 3091 	ldrb.w	r3, [r2, #145]	; 0x91
 8006c06:	b10b      	cbz	r3, 8006c0c <USBH_MSC_UnitIsReady+0x22>
    res = 0U;
 8006c08:	2000      	movs	r0, #0
 8006c0a:	4770      	bx	lr
    res = 1U;
 8006c0c:	2001      	movs	r0, #1
  }

  return res;
}
 8006c0e:	4770      	bx	lr

08006c10 <USBH_MSC_GetLUNInfo>:
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c10:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8006c14:	69db      	ldr	r3, [r3, #28]
  if (phost->gState == HOST_CLASS)
 8006c16:	7800      	ldrb	r0, [r0, #0]
 8006c18:	b2c0      	uxtb	r0, r0
 8006c1a:	280b      	cmp	r0, #11
 8006c1c:	d001      	beq.n	8006c22 <USBH_MSC_GetLUNInfo+0x12>
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
    return USBH_OK;
  }
  else
  {
    return USBH_FAIL;
 8006c1e:	2002      	movs	r0, #2
  }
}
 8006c20:	4770      	bx	lr
{
 8006c22:	b510      	push	{r4, lr}
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8006c24:	2034      	movs	r0, #52	; 0x34
 8006c26:	fb00 f101 	mul.w	r1, r0, r1
 8006c2a:	3190      	adds	r1, #144	; 0x90
 8006c2c:	440b      	add	r3, r1
 8006c2e:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8006c32:	f8d3 e000 	ldr.w	lr, [r3]
 8006c36:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8006c3a:	6898      	ldr	r0, [r3, #8]
 8006c3c:	68d9      	ldr	r1, [r3, #12]
 8006c3e:	f8c2 e000 	str.w	lr, [r2]
 8006c42:	f8c2 c004 	str.w	ip, [r2, #4]
 8006c46:	6090      	str	r0, [r2, #8]
 8006c48:	60d1      	str	r1, [r2, #12]
 8006c4a:	3310      	adds	r3, #16
 8006c4c:	3210      	adds	r2, #16
 8006c4e:	42a3      	cmp	r3, r4
 8006c50:	d1ef      	bne.n	8006c32 <USBH_MSC_GetLUNInfo+0x22>
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	6013      	str	r3, [r2, #0]
    return USBH_OK;
 8006c56:	2000      	movs	r0, #0
}
 8006c58:	bd10      	pop	{r4, pc}

08006c5a <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 8006c5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c5e:	b082      	sub	sp, #8
 8006c60:	460d      	mov	r5, r1
 8006c62:	9e08      	ldr	r6, [sp, #32]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c64:	f8d0 137c 	ldr.w	r1, [r0, #892]	; 0x37c
 8006c68:	69cf      	ldr	r7, [r1, #28]

  if ((phost->device.is_connected == 0U) ||
 8006c6a:	f890 1320 	ldrb.w	r1, [r0, #800]	; 0x320
 8006c6e:	b3c9      	cbz	r1, 8006ce4 <USBH_MSC_Read+0x8a>
 8006c70:	4604      	mov	r4, r0
      (phost->gState != HOST_CLASS) ||
 8006c72:	7801      	ldrb	r1, [r0, #0]
 8006c74:	b2c9      	uxtb	r1, r1
  if ((phost->device.is_connected == 0U) ||
 8006c76:	290b      	cmp	r1, #11
 8006c78:	d136      	bne.n	8006ce8 <USBH_MSC_Read+0x8e>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8006c7a:	2134      	movs	r1, #52	; 0x34
 8006c7c:	fb01 7105 	mla	r1, r1, r5, r7
 8006c80:	f891 1090 	ldrb.w	r1, [r1, #144]	; 0x90
      (phost->gState != HOST_CLASS) ||
 8006c84:	2901      	cmp	r1, #1
 8006c86:	d001      	beq.n	8006c8c <USBH_MSC_Read+0x32>
  {
    return  USBH_FAIL;
 8006c88:	2002      	movs	r0, #2
 8006c8a:	e02e      	b.n	8006cea <USBH_MSC_Read+0x90>
  }

  MSC_Handle->state = MSC_READ;
 8006c8c:	2006      	movs	r0, #6
 8006c8e:	7338      	strb	r0, [r7, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8006c90:	2134      	movs	r1, #52	; 0x34
 8006c92:	fb01 7105 	mla	r1, r1, r5, r7
 8006c96:	f881 0090 	strb.w	r0, [r1, #144]	; 0x90
  MSC_Handle->rw_lun = lun;
 8006c9a:	f8a7 50fa 	strh.w	r5, [r7, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8006c9e:	9600      	str	r6, [sp, #0]
 8006ca0:	4629      	mov	r1, r5
 8006ca2:	4620      	mov	r0, r4
 8006ca4:	f000 fb5d 	bl	8007362 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 8006ca8:	f8d4 83c4 	ldr.w	r8, [r4, #964]	; 0x3c4

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8006cac:	4629      	mov	r1, r5
 8006cae:	4620      	mov	r0, r4
 8006cb0:	f7ff ff20 	bl	8006af4 <USBH_MSC_RdWrProcess>
 8006cb4:	2801      	cmp	r0, #1
 8006cb6:	d111      	bne.n	8006cdc <USBH_MSC_Read+0x82>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8006cb8:	f8d4 23c4 	ldr.w	r2, [r4, #964]	; 0x3c4
 8006cbc:	eba2 0208 	sub.w	r2, r2, r8
 8006cc0:	f242 7310 	movw	r3, #10000	; 0x2710
 8006cc4:	fb06 f303 	mul.w	r3, r6, r3
 8006cc8:	429a      	cmp	r2, r3
 8006cca:	d803      	bhi.n	8006cd4 <USBH_MSC_Read+0x7a>
 8006ccc:	f894 3320 	ldrb.w	r3, [r4, #800]	; 0x320
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d1eb      	bne.n	8006cac <USBH_MSC_Read+0x52>
    {
      MSC_Handle->state = MSC_IDLE;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	733b      	strb	r3, [r7, #12]
      return USBH_FAIL;
 8006cd8:	2002      	movs	r0, #2
 8006cda:	e006      	b.n	8006cea <USBH_MSC_Read+0x90>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8006cdc:	2301      	movs	r3, #1
 8006cde:	733b      	strb	r3, [r7, #12]

  return USBH_OK;
 8006ce0:	2000      	movs	r0, #0
 8006ce2:	e002      	b.n	8006cea <USBH_MSC_Read+0x90>
    return  USBH_FAIL;
 8006ce4:	2002      	movs	r0, #2
 8006ce6:	e000      	b.n	8006cea <USBH_MSC_Read+0x90>
 8006ce8:	2002      	movs	r0, #2
}
 8006cea:	b002      	add	sp, #8
 8006cec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006cf0 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 8006cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cf4:	b082      	sub	sp, #8
 8006cf6:	460d      	mov	r5, r1
 8006cf8:	9e08      	ldr	r6, [sp, #32]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006cfa:	f8d0 137c 	ldr.w	r1, [r0, #892]	; 0x37c
 8006cfe:	69cf      	ldr	r7, [r1, #28]

  if ((phost->device.is_connected == 0U) ||
 8006d00:	f890 1320 	ldrb.w	r1, [r0, #800]	; 0x320
 8006d04:	b3c9      	cbz	r1, 8006d7a <USBH_MSC_Write+0x8a>
 8006d06:	4604      	mov	r4, r0
      (phost->gState != HOST_CLASS) ||
 8006d08:	7801      	ldrb	r1, [r0, #0]
 8006d0a:	b2c9      	uxtb	r1, r1
  if ((phost->device.is_connected == 0U) ||
 8006d0c:	290b      	cmp	r1, #11
 8006d0e:	d136      	bne.n	8006d7e <USBH_MSC_Write+0x8e>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8006d10:	2134      	movs	r1, #52	; 0x34
 8006d12:	fb01 7105 	mla	r1, r1, r5, r7
 8006d16:	f891 1090 	ldrb.w	r1, [r1, #144]	; 0x90
      (phost->gState != HOST_CLASS) ||
 8006d1a:	2901      	cmp	r1, #1
 8006d1c:	d001      	beq.n	8006d22 <USBH_MSC_Write+0x32>
  {
    return  USBH_FAIL;
 8006d1e:	2002      	movs	r0, #2
 8006d20:	e02e      	b.n	8006d80 <USBH_MSC_Write+0x90>
  }

  MSC_Handle->state = MSC_WRITE;
 8006d22:	2007      	movs	r0, #7
 8006d24:	7338      	strb	r0, [r7, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 8006d26:	2134      	movs	r1, #52	; 0x34
 8006d28:	fb01 7105 	mla	r1, r1, r5, r7
 8006d2c:	f881 0090 	strb.w	r0, [r1, #144]	; 0x90
  MSC_Handle->rw_lun = lun;
 8006d30:	f8a7 50fa 	strh.w	r5, [r7, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8006d34:	9600      	str	r6, [sp, #0]
 8006d36:	4629      	mov	r1, r5
 8006d38:	4620      	mov	r0, r4
 8006d3a:	f000 facc 	bl	80072d6 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8006d3e:	f8d4 83c4 	ldr.w	r8, [r4, #964]	; 0x3c4
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8006d42:	4629      	mov	r1, r5
 8006d44:	4620      	mov	r0, r4
 8006d46:	f7ff fed5 	bl	8006af4 <USBH_MSC_RdWrProcess>
 8006d4a:	2801      	cmp	r0, #1
 8006d4c:	d111      	bne.n	8006d72 <USBH_MSC_Write+0x82>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8006d4e:	f8d4 23c4 	ldr.w	r2, [r4, #964]	; 0x3c4
 8006d52:	eba2 0208 	sub.w	r2, r2, r8
 8006d56:	f242 7310 	movw	r3, #10000	; 0x2710
 8006d5a:	fb06 f303 	mul.w	r3, r6, r3
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	d803      	bhi.n	8006d6a <USBH_MSC_Write+0x7a>
 8006d62:	f894 3320 	ldrb.w	r3, [r4, #800]	; 0x320
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d1eb      	bne.n	8006d42 <USBH_MSC_Write+0x52>
    {
      MSC_Handle->state = MSC_IDLE;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	733b      	strb	r3, [r7, #12]
      return USBH_FAIL;
 8006d6e:	2002      	movs	r0, #2
 8006d70:	e006      	b.n	8006d80 <USBH_MSC_Write+0x90>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8006d72:	2301      	movs	r3, #1
 8006d74:	733b      	strb	r3, [r7, #12]
  return USBH_OK;
 8006d76:	2000      	movs	r0, #0
 8006d78:	e002      	b.n	8006d80 <USBH_MSC_Write+0x90>
    return  USBH_FAIL;
 8006d7a:	2002      	movs	r0, #2
 8006d7c:	e000      	b.n	8006d80 <USBH_MSC_Write+0x90>
 8006d7e:	2002      	movs	r0, #2
}
 8006d80:	b002      	add	sp, #8
 8006d82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08006d88 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8006d88:	b510      	push	{r4, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d8a:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8006d8e:	69dc      	ldr	r4, [r3, #28]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8006d90:	7921      	ldrb	r1, [r4, #4]
 8006d92:	f001 fc2b 	bl	80085ec <USBH_LL_GetLastXferSize>
 8006d96:	280d      	cmp	r0, #13
 8006d98:	d001      	beq.n	8006d9e <USBH_MSC_DecodeCSW+0x16>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 8006d9a:	2002      	movs	r0, #2
      status = BOT_CSW_PHASE_ERROR;
    }
  } /* CSW Length Check*/

  return status;
}
 8006d9c:	bd10      	pop	{r4, pc}
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8006d9e:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8006da0:	4b0a      	ldr	r3, [pc, #40]	; (8006dcc <USBH_MSC_DecodeCSW+0x44>)
 8006da2:	429a      	cmp	r2, r3
 8006da4:	d001      	beq.n	8006daa <USBH_MSC_DecodeCSW+0x22>
      status = BOT_CSW_PHASE_ERROR;
 8006da6:	2002      	movs	r0, #2
 8006da8:	e7f8      	b.n	8006d9c <USBH_MSC_DecodeCSW+0x14>
      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8006daa:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8006dac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006dae:	429a      	cmp	r2, r3
 8006db0:	d001      	beq.n	8006db6 <USBH_MSC_DecodeCSW+0x2e>
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8006db2:	2001      	movs	r0, #1
 8006db4:	e7f2      	b.n	8006d9c <USBH_MSC_DecodeCSW+0x14>
        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8006db6:	f894 0084 	ldrb.w	r0, [r4, #132]	; 0x84
 8006dba:	2800      	cmp	r0, #0
 8006dbc:	d0ee      	beq.n	8006d9c <USBH_MSC_DecodeCSW+0x14>
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8006dbe:	2801      	cmp	r0, #1
 8006dc0:	d0ec      	beq.n	8006d9c <USBH_MSC_DecodeCSW+0x14>
        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 8006dc2:	2802      	cmp	r0, #2
 8006dc4:	d0ea      	beq.n	8006d9c <USBH_MSC_DecodeCSW+0x14>
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8006dc6:	2001      	movs	r0, #1
 8006dc8:	e7e8      	b.n	8006d9c <USBH_MSC_DecodeCSW+0x14>
 8006dca:	bf00      	nop
 8006dcc:	53425355 	.word	0x53425355

08006dd0 <USBH_MSC_BOT_Abort>:
{
 8006dd0:	b508      	push	{r3, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006dd2:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8006dd6:	69d9      	ldr	r1, [r3, #28]
  switch (dir)
 8006dd8:	b11a      	cbz	r2, 8006de2 <USBH_MSC_BOT_Abort+0x12>
 8006dda:	2a01      	cmp	r2, #1
 8006ddc:	d005      	beq.n	8006dea <USBH_MSC_BOT_Abort+0x1a>
 8006dde:	2002      	movs	r0, #2
}
 8006de0:	bd08      	pop	{r3, pc}
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8006de2:	79c9      	ldrb	r1, [r1, #7]
 8006de4:	f001 f8cf 	bl	8007f86 <USBH_ClrFeature>
      break;
 8006de8:	e7fa      	b.n	8006de0 <USBH_MSC_BOT_Abort+0x10>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8006dea:	7989      	ldrb	r1, [r1, #6]
 8006dec:	f001 f8cb 	bl	8007f86 <USBH_ClrFeature>
      break;
 8006df0:	e7f6      	b.n	8006de0 <USBH_MSC_BOT_Abort+0x10>

08006df2 <USBH_MSC_BOT_REQ_Reset>:
{
 8006df2:	b508      	push	{r3, lr}
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8006df4:	2221      	movs	r2, #33	; 0x21
 8006df6:	7402      	strb	r2, [r0, #16]
  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8006df8:	22ff      	movs	r2, #255	; 0xff
 8006dfa:	7442      	strb	r2, [r0, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006dfc:	2100      	movs	r1, #0
 8006dfe:	8241      	strh	r1, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006e00:	8281      	strh	r1, [r0, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8006e02:	82c1      	strh	r1, [r0, #22]
  return USBH_CtlReq(phost, 0U, 0U);
 8006e04:	460a      	mov	r2, r1
 8006e06:	f001 f800 	bl	8007e0a <USBH_CtlReq>
}
 8006e0a:	bd08      	pop	{r3, pc}

08006e0c <USBH_MSC_BOT_REQ_GetMaxLUN>:
{
 8006e0c:	b508      	push	{r3, lr}
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8006e0e:	22a1      	movs	r2, #161	; 0xa1
 8006e10:	7402      	strb	r2, [r0, #16]
  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8006e12:	22fe      	movs	r2, #254	; 0xfe
 8006e14:	7442      	strb	r2, [r0, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006e16:	2200      	movs	r2, #0
 8006e18:	8242      	strh	r2, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006e1a:	8282      	strh	r2, [r0, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8006e1c:	2201      	movs	r2, #1
 8006e1e:	82c2      	strh	r2, [r0, #22]
  return USBH_CtlReq(phost, Maxlun, 1U);
 8006e20:	f000 fff3 	bl	8007e0a <USBH_CtlReq>
}
 8006e24:	bd08      	pop	{r3, pc}
	...

08006e28 <USBH_MSC_BOT_Init>:
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e28:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8006e2c:	69db      	ldr	r3, [r3, #28]
  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8006e2e:	4a05      	ldr	r2, [pc, #20]	; (8006e44 <USBH_MSC_BOT_Init+0x1c>)
 8006e30:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8006e32:	4a05      	ldr	r2, [pc, #20]	; (8006e48 <USBH_MSC_BOT_Init+0x20>)
 8006e34:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006e36:	2201      	movs	r2, #1
 8006e38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8006e3c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
}
 8006e40:	2000      	movs	r0, #0
 8006e42:	4770      	bx	lr
 8006e44:	43425355 	.word	0x43425355
 8006e48:	20304050 	.word	0x20304050

08006e4c <USBH_MSC_BOT_Process>:
{
 8006e4c:	b570      	push	{r4, r5, r6, lr}
 8006e4e:	b082      	sub	sp, #8
 8006e50:	4605      	mov	r5, r0
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e52:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8006e56:	69de      	ldr	r6, [r3, #28]
  switch (MSC_Handle->hbot.state)
 8006e58:	f896 4050 	ldrb.w	r4, [r6, #80]	; 0x50
 8006e5c:	1e63      	subs	r3, r4, #1
 8006e5e:	2b0a      	cmp	r3, #10
 8006e60:	f200 811d 	bhi.w	800709e <USBH_MSC_BOT_Process+0x252>
 8006e64:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006e68:	001b000b 	.word	0x001b000b
 8006e6c:	004d0042 	.word	0x004d0042
 8006e70:	00830077 	.word	0x00830077
 8006e74:	00c100b6 	.word	0x00c100b6
 8006e78:	00ef00dd 	.word	0x00ef00dd
 8006e7c:	0111      	.short	0x0111
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8006e7e:	f886 1061 	strb.w	r1, [r6, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8006e82:	2302      	movs	r3, #2
 8006e84:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8006e88:	7973      	ldrb	r3, [r6, #5]
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	9200      	str	r2, [sp, #0]
 8006e8e:	221f      	movs	r2, #31
 8006e90:	f106 0154 	add.w	r1, r6, #84	; 0x54
 8006e94:	f001 f8c0 	bl	8008018 <USBH_BulkSendData>
}
 8006e98:	4620      	mov	r0, r4
 8006e9a:	b002      	add	sp, #8
 8006e9c:	bd70      	pop	{r4, r5, r6, pc}
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8006e9e:	7971      	ldrb	r1, [r6, #5]
 8006ea0:	f001 fbaa 	bl	80085f8 <USBH_LL_GetURBState>
 8006ea4:	4604      	mov	r4, r0
      if (URB_Status == USBH_URB_DONE)
 8006ea6:	2801      	cmp	r0, #1
 8006ea8:	d005      	beq.n	8006eb6 <USBH_MSC_BOT_Process+0x6a>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006eaa:	2802      	cmp	r0, #2
 8006eac:	d015      	beq.n	8006eda <USBH_MSC_BOT_Process+0x8e>
        if (URB_Status == USBH_URB_STALL)
 8006eae:	2805      	cmp	r0, #5
 8006eb0:	d017      	beq.n	8006ee2 <USBH_MSC_BOT_Process+0x96>
  USBH_StatusTypeDef   status = USBH_BUSY;
 8006eb2:	2401      	movs	r4, #1
 8006eb4:	e7f0      	b.n	8006e98 <USBH_MSC_BOT_Process+0x4c>
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8006eb6:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 8006eb8:	b15b      	cbz	r3, 8006ed2 <USBH_MSC_BOT_Process+0x86>
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8006eba:	f996 3060 	ldrsb.w	r3, [r6, #96]	; 0x60
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	db03      	blt.n	8006eca <USBH_MSC_BOT_Process+0x7e>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8006ec2:	2305      	movs	r3, #5
 8006ec4:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
 8006ec8:	e7e6      	b.n	8006e98 <USBH_MSC_BOT_Process+0x4c>
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8006eca:	2303      	movs	r3, #3
 8006ecc:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
 8006ed0:	e7e2      	b.n	8006e98 <USBH_MSC_BOT_Process+0x4c>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8006ed2:	2307      	movs	r3, #7
 8006ed4:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
 8006ed8:	e7de      	b.n	8006e98 <USBH_MSC_BOT_Process+0x4c>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006eda:	2401      	movs	r4, #1
 8006edc:	f886 4050 	strb.w	r4, [r6, #80]	; 0x50
 8006ee0:	e7da      	b.n	8006e98 <USBH_MSC_BOT_Process+0x4c>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8006ee2:	230a      	movs	r3, #10
 8006ee4:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 8006ee8:	2401      	movs	r4, #1
 8006eea:	e7d5      	b.n	8006e98 <USBH_MSC_BOT_Process+0x4c>
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8006eec:	7933      	ldrb	r3, [r6, #4]
 8006eee:	8972      	ldrh	r2, [r6, #10]
 8006ef0:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 8006ef4:	f001 f8a6 	bl	8008044 <USBH_BulkReceiveData>
      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8006ef8:	2304      	movs	r3, #4
 8006efa:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 8006efe:	2401      	movs	r4, #1
      break;
 8006f00:	e7ca      	b.n	8006e98 <USBH_MSC_BOT_Process+0x4c>
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8006f02:	7931      	ldrb	r1, [r6, #4]
 8006f04:	f001 fb78 	bl	80085f8 <USBH_LL_GetURBState>
 8006f08:	4604      	mov	r4, r0
      if (URB_Status == USBH_URB_DONE)
 8006f0a:	2801      	cmp	r0, #1
 8006f0c:	d003      	beq.n	8006f16 <USBH_MSC_BOT_Process+0xca>
      else if (URB_Status == USBH_URB_STALL)
 8006f0e:	2805      	cmp	r0, #5
 8006f10:	d01c      	beq.n	8006f4c <USBH_MSC_BOT_Process+0x100>
  USBH_StatusTypeDef   status = USBH_BUSY;
 8006f12:	2401      	movs	r4, #1
 8006f14:	e7c0      	b.n	8006e98 <USBH_MSC_BOT_Process+0x4c>
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8006f16:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 8006f18:	8972      	ldrh	r2, [r6, #10]
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d90c      	bls.n	8006f38 <USBH_MSC_BOT_Process+0xec>
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8006f1e:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 8006f22:	4411      	add	r1, r2
 8006f24:	f8c6 108c 	str.w	r1, [r6, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8006f28:	1a9b      	subs	r3, r3, r2
 8006f2a:	65f3      	str	r3, [r6, #92]	; 0x5c
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8006f2c:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 8006f2e:	b933      	cbnz	r3, 8006f3e <USBH_MSC_BOT_Process+0xf2>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8006f30:	2307      	movs	r3, #7
 8006f32:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
 8006f36:	e7af      	b.n	8006e98 <USBH_MSC_BOT_Process+0x4c>
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	65f3      	str	r3, [r6, #92]	; 0x5c
 8006f3c:	e7f6      	b.n	8006f2c <USBH_MSC_BOT_Process+0xe0>
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8006f3e:	7933      	ldrb	r3, [r6, #4]
 8006f40:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 8006f44:	4628      	mov	r0, r5
 8006f46:	f001 f87d 	bl	8008044 <USBH_BulkReceiveData>
 8006f4a:	e7a5      	b.n	8006e98 <USBH_MSC_BOT_Process+0x4c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8006f4c:	2309      	movs	r3, #9
 8006f4e:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 8006f52:	2401      	movs	r4, #1
 8006f54:	e7a0      	b.n	8006e98 <USBH_MSC_BOT_Process+0x4c>
      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8006f56:	7973      	ldrb	r3, [r6, #5]
 8006f58:	8932      	ldrh	r2, [r6, #8]
 8006f5a:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 8006f5e:	2401      	movs	r4, #1
 8006f60:	9400      	str	r4, [sp, #0]
 8006f62:	f001 f859 	bl	8008018 <USBH_BulkSendData>
      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8006f66:	2306      	movs	r3, #6
 8006f68:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
      break;
 8006f6c:	e794      	b.n	8006e98 <USBH_MSC_BOT_Process+0x4c>
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8006f6e:	7971      	ldrb	r1, [r6, #5]
 8006f70:	f001 fb42 	bl	80085f8 <USBH_LL_GetURBState>
 8006f74:	4604      	mov	r4, r0
      if (URB_Status == USBH_URB_DONE)
 8006f76:	2801      	cmp	r0, #1
 8006f78:	d005      	beq.n	8006f86 <USBH_MSC_BOT_Process+0x13a>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006f7a:	2802      	cmp	r0, #2
 8006f7c:	d020      	beq.n	8006fc0 <USBH_MSC_BOT_Process+0x174>
      else if (URB_Status == USBH_URB_STALL)
 8006f7e:	2805      	cmp	r0, #5
 8006f80:	d023      	beq.n	8006fca <USBH_MSC_BOT_Process+0x17e>
  USBH_StatusTypeDef   status = USBH_BUSY;
 8006f82:	2401      	movs	r4, #1
 8006f84:	e788      	b.n	8006e98 <USBH_MSC_BOT_Process+0x4c>
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8006f86:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 8006f88:	8932      	ldrh	r2, [r6, #8]
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d90c      	bls.n	8006fa8 <USBH_MSC_BOT_Process+0x15c>
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8006f8e:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 8006f92:	4411      	add	r1, r2
 8006f94:	f8c6 108c 	str.w	r1, [r6, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8006f98:	1a9b      	subs	r3, r3, r2
 8006f9a:	65f3      	str	r3, [r6, #92]	; 0x5c
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8006f9c:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 8006f9e:	b933      	cbnz	r3, 8006fae <USBH_MSC_BOT_Process+0x162>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8006fa0:	2307      	movs	r3, #7
 8006fa2:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
 8006fa6:	e777      	b.n	8006e98 <USBH_MSC_BOT_Process+0x4c>
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	65f3      	str	r3, [r6, #92]	; 0x5c
 8006fac:	e7f6      	b.n	8006f9c <USBH_MSC_BOT_Process+0x150>
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8006fae:	7973      	ldrb	r3, [r6, #5]
 8006fb0:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 8006fb4:	2001      	movs	r0, #1
 8006fb6:	9000      	str	r0, [sp, #0]
 8006fb8:	4628      	mov	r0, r5
 8006fba:	f001 f82d 	bl	8008018 <USBH_BulkSendData>
 8006fbe:	e76b      	b.n	8006e98 <USBH_MSC_BOT_Process+0x4c>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8006fc0:	2305      	movs	r3, #5
 8006fc2:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 8006fc6:	2401      	movs	r4, #1
 8006fc8:	e766      	b.n	8006e98 <USBH_MSC_BOT_Process+0x4c>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8006fca:	230a      	movs	r3, #10
 8006fcc:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 8006fd0:	2401      	movs	r4, #1
 8006fd2:	e761      	b.n	8006e98 <USBH_MSC_BOT_Process+0x4c>
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8006fd4:	7933      	ldrb	r3, [r6, #4]
 8006fd6:	220d      	movs	r2, #13
 8006fd8:	f106 0178 	add.w	r1, r6, #120	; 0x78
 8006fdc:	f001 f832 	bl	8008044 <USBH_BulkReceiveData>
      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8006fe0:	2308      	movs	r3, #8
 8006fe2:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 8006fe6:	2401      	movs	r4, #1
      break;
 8006fe8:	e756      	b.n	8006e98 <USBH_MSC_BOT_Process+0x4c>
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8006fea:	7931      	ldrb	r1, [r6, #4]
 8006fec:	f001 fb04 	bl	80085f8 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8006ff0:	2801      	cmp	r0, #1
 8006ff2:	d003      	beq.n	8006ffc <USBH_MSC_BOT_Process+0x1b0>
      else if (URB_Status == USBH_URB_STALL)
 8006ff4:	2805      	cmp	r0, #5
 8006ff6:	d00f      	beq.n	8007018 <USBH_MSC_BOT_Process+0x1cc>
  USBH_StatusTypeDef   status = USBH_BUSY;
 8006ff8:	2401      	movs	r4, #1
 8006ffa:	e74d      	b.n	8006e98 <USBH_MSC_BOT_Process+0x4c>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8007002:	f886 3052 	strb.w	r3, [r6, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8007006:	4628      	mov	r0, r5
 8007008:	f7ff febe 	bl	8006d88 <USBH_MSC_DecodeCSW>
        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800700c:	4604      	mov	r4, r0
 800700e:	2800      	cmp	r0, #0
 8007010:	f43f af42 	beq.w	8006e98 <USBH_MSC_BOT_Process+0x4c>
          status = USBH_FAIL;
 8007014:	2402      	movs	r4, #2
 8007016:	e73f      	b.n	8006e98 <USBH_MSC_BOT_Process+0x4c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8007018:	2309      	movs	r3, #9
 800701a:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 800701e:	2401      	movs	r4, #1
 8007020:	e73a      	b.n	8006e98 <USBH_MSC_BOT_Process+0x4c>
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8007022:	2200      	movs	r2, #0
 8007024:	f7ff fed4 	bl	8006dd0 <USBH_MSC_BOT_Abort>
      if (error == USBH_OK)
 8007028:	b920      	cbnz	r0, 8007034 <USBH_MSC_BOT_Process+0x1e8>
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800702a:	2307      	movs	r3, #7
 800702c:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 8007030:	2401      	movs	r4, #1
 8007032:	e731      	b.n	8006e98 <USBH_MSC_BOT_Process+0x4c>
      else if (error == USBH_UNRECOVERED_ERROR)
 8007034:	2804      	cmp	r0, #4
 8007036:	d001      	beq.n	800703c <USBH_MSC_BOT_Process+0x1f0>
  USBH_StatusTypeDef   status = USBH_BUSY;
 8007038:	2401      	movs	r4, #1
 800703a:	e72d      	b.n	8006e98 <USBH_MSC_BOT_Process+0x4c>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800703c:	230b      	movs	r3, #11
 800703e:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 8007042:	2401      	movs	r4, #1
 8007044:	e728      	b.n	8006e98 <USBH_MSC_BOT_Process+0x4c>
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8007046:	2201      	movs	r2, #1
 8007048:	f7ff fec2 	bl	8006dd0 <USBH_MSC_BOT_Abort>
      if (error == USBH_OK)
 800704c:	b118      	cbz	r0, 8007056 <USBH_MSC_BOT_Process+0x20a>
        if (error == USBH_UNRECOVERED_ERROR)
 800704e:	2804      	cmp	r0, #4
 8007050:	d016      	beq.n	8007080 <USBH_MSC_BOT_Process+0x234>
  USBH_StatusTypeDef   status = USBH_BUSY;
 8007052:	2401      	movs	r4, #1
 8007054:	e720      	b.n	8006e98 <USBH_MSC_BOT_Process+0x4c>
        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8007056:	7971      	ldrb	r1, [r6, #5]
 8007058:	4628      	mov	r0, r5
 800705a:	f001 faf6 	bl	800864a <USBH_LL_GetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800705e:	f1c0 0201 	rsb	r2, r0, #1
 8007062:	b2d2      	uxtb	r2, r2
 8007064:	7971      	ldrb	r1, [r6, #5]
 8007066:	4628      	mov	r0, r5
 8007068:	f001 fada 	bl	8008620 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800706c:	2200      	movs	r2, #0
 800706e:	7931      	ldrb	r1, [r6, #4]
 8007070:	4628      	mov	r0, r5
 8007072:	f001 fad5 	bl	8008620 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8007076:	2309      	movs	r3, #9
 8007078:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 800707c:	2401      	movs	r4, #1
 800707e:	e70b      	b.n	8006e98 <USBH_MSC_BOT_Process+0x4c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8007080:	230b      	movs	r3, #11
 8007082:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 8007086:	2401      	movs	r4, #1
 8007088:	e706      	b.n	8006e98 <USBH_MSC_BOT_Process+0x4c>
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800708a:	f7ff feb2 	bl	8006df2 <USBH_MSC_BOT_REQ_Reset>
      if (status == USBH_OK)
 800708e:	4604      	mov	r4, r0
 8007090:	2800      	cmp	r0, #0
 8007092:	f47f af01 	bne.w	8006e98 <USBH_MSC_BOT_Process+0x4c>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007096:	2301      	movs	r3, #1
 8007098:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
 800709c:	e6fc      	b.n	8006e98 <USBH_MSC_BOT_Process+0x4c>
  switch (MSC_Handle->hbot.state)
 800709e:	2401      	movs	r4, #1
 80070a0:	e6fa      	b.n	8006e98 <USBH_MSC_BOT_Process+0x4c>

080070a2 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 80070a2:	b508      	push	{r3, lr}
 80070a4:	4602      	mov	r2, r0
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80070a6:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 80070aa:	69db      	ldr	r3, [r3, #28]

  switch (MSC_Handle->hbot.cmd_state)
 80070ac:	f893 0052 	ldrb.w	r0, [r3, #82]	; 0x52
 80070b0:	2801      	cmp	r0, #1
 80070b2:	d003      	beq.n	80070bc <USBH_MSC_SCSI_TestUnitReady+0x1a>
 80070b4:	2802      	cmp	r0, #2
 80070b6:	d017      	beq.n	80070e8 <USBH_MSC_SCSI_TestUnitReady+0x46>
 80070b8:	2002      	movs	r0, #2
    default:
      break;
  }

  return error;
}
 80070ba:	bd08      	pop	{r3, pc}
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 80070bc:	2200      	movs	r2, #0
 80070be:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 80070c0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80070c4:	210a      	movs	r1, #10
 80070c6:	f883 1062 	strb.w	r1, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80070ca:	f8c3 2063 	str.w	r2, [r3, #99]	; 0x63
 80070ce:	f8c3 2067 	str.w	r2, [r3, #103]	; 0x67
 80070d2:	f8c3 206b 	str.w	r2, [r3, #107]	; 0x6b
 80070d6:	f8c3 206f 	str.w	r2, [r3, #111]	; 0x6f
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80070da:	2201      	movs	r2, #1
 80070dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80070e0:	2202      	movs	r2, #2
 80070e2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      break;
 80070e6:	e7e8      	b.n	80070ba <USBH_MSC_SCSI_TestUnitReady+0x18>
      error = USBH_MSC_BOT_Process(phost, lun);
 80070e8:	4610      	mov	r0, r2
 80070ea:	f7ff feaf 	bl	8006e4c <USBH_MSC_BOT_Process>
      break;
 80070ee:	e7e4      	b.n	80070ba <USBH_MSC_SCSI_TestUnitReady+0x18>

080070f0 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 80070f0:	b538      	push	{r3, r4, r5, lr}
 80070f2:	4603      	mov	r3, r0
  USBH_StatusTypeDef    error = USBH_BUSY ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80070f4:	f8d0 037c 	ldr.w	r0, [r0, #892]	; 0x37c
 80070f8:	69c4      	ldr	r4, [r0, #28]

  switch (MSC_Handle->hbot.cmd_state)
 80070fa:	f894 0052 	ldrb.w	r0, [r4, #82]	; 0x52
 80070fe:	2801      	cmp	r0, #1
 8007100:	d004      	beq.n	800710c <USBH_MSC_SCSI_ReadCapacity+0x1c>
 8007102:	4615      	mov	r5, r2
 8007104:	2802      	cmp	r0, #2
 8007106:	d020      	beq.n	800714a <USBH_MSC_SCSI_ReadCapacity+0x5a>
 8007108:	2001      	movs	r0, #1
    default:
      break;
  }

  return error;
}
 800710a:	bd38      	pop	{r3, r4, r5, pc}
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800710c:	2308      	movs	r3, #8
 800710e:	65e3      	str	r3, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8007110:	2380      	movs	r3, #128	; 0x80
 8007112:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007116:	230a      	movs	r3, #10
 8007118:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800711c:	2300      	movs	r3, #0
 800711e:	f8c4 3063 	str.w	r3, [r4, #99]	; 0x63
 8007122:	f8c4 3067 	str.w	r3, [r4, #103]	; 0x67
 8007126:	f8c4 306b 	str.w	r3, [r4, #107]	; 0x6b
 800712a:	f8c4 306f 	str.w	r3, [r4, #111]	; 0x6f
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800712e:	2325      	movs	r3, #37	; 0x25
 8007130:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007134:	2301      	movs	r3, #1
 8007136:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800713a:	2302      	movs	r3, #2
 800713c:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8007140:	f104 0310 	add.w	r3, r4, #16
 8007144:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      break;
 8007148:	e7df      	b.n	800710a <USBH_MSC_SCSI_ReadCapacity+0x1a>
      error = USBH_MSC_BOT_Process(phost, lun);
 800714a:	4618      	mov	r0, r3
 800714c:	f7ff fe7e 	bl	8006e4c <USBH_MSC_BOT_Process>
      if (error == USBH_OK)
 8007150:	2800      	cmp	r0, #0
 8007152:	d1da      	bne.n	800710a <USBH_MSC_SCSI_ReadCapacity+0x1a>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8007154:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8007158:	78d3      	ldrb	r3, [r2, #3]
 800715a:	7891      	ldrb	r1, [r2, #2]
 800715c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8007160:	7851      	ldrb	r1, [r2, #1]
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8007162:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8007166:	7812      	ldrb	r2, [r2, #0]
 8007168:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800716c:	602b      	str	r3, [r5, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800716e:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8007172:	79d3      	ldrb	r3, [r2, #7]
 8007174:	7992      	ldrb	r2, [r2, #6]
 8007176:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800717a:	80ab      	strh	r3, [r5, #4]
 800717c:	e7c5      	b.n	800710a <USBH_MSC_SCSI_ReadCapacity+0x1a>

0800717e <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800717e:	b570      	push	{r4, r5, r6, lr}
  USBH_StatusTypeDef error = USBH_FAIL;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007180:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8007184:	69dc      	ldr	r4, [r3, #28]

  switch (MSC_Handle->hbot.cmd_state)
 8007186:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 800718a:	2d01      	cmp	r5, #1
 800718c:	d005      	beq.n	800719a <USBH_MSC_SCSI_Inquiry+0x1c>
 800718e:	4616      	mov	r6, r2
 8007190:	2d02      	cmp	r5, #2
 8007192:	d024      	beq.n	80071de <USBH_MSC_SCSI_Inquiry+0x60>
 8007194:	2502      	movs	r5, #2
    default:
      break;
  }

  return error;
}
 8007196:	4628      	mov	r0, r5
 8007198:	bd70      	pop	{r4, r5, r6, pc}
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800719a:	2224      	movs	r2, #36	; 0x24
 800719c:	65e2      	str	r2, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800719e:	2380      	movs	r3, #128	; 0x80
 80071a0:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80071a4:	230a      	movs	r3, #10
 80071a6:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 80071aa:	2300      	movs	r3, #0
 80071ac:	f8c4 3063 	str.w	r3, [r4, #99]	; 0x63
 80071b0:	f8c4 3067 	str.w	r3, [r4, #103]	; 0x67
 80071b4:	f8a4 306b 	strh.w	r3, [r4, #107]	; 0x6b
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 80071b8:	2312      	movs	r3, #18
 80071ba:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 80071be:	0149      	lsls	r1, r1, #5
 80071c0:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 80071c4:	f884 2067 	strb.w	r2, [r4, #103]	; 0x67
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80071c8:	2301      	movs	r3, #1
 80071ca:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80071ce:	2302      	movs	r3, #2
 80071d0:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80071d4:	f104 0310 	add.w	r3, r4, #16
 80071d8:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      break;
 80071dc:	e7db      	b.n	8007196 <USBH_MSC_SCSI_Inquiry+0x18>
      error = USBH_MSC_BOT_Process(phost, lun);
 80071de:	f7ff fe35 	bl	8006e4c <USBH_MSC_BOT_Process>
      if (error == USBH_OK)
 80071e2:	4605      	mov	r5, r0
 80071e4:	2800      	cmp	r0, #0
 80071e6:	d1d6      	bne.n	8007196 <USBH_MSC_SCSI_Inquiry+0x18>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 80071e8:	2222      	movs	r2, #34	; 0x22
 80071ea:	2100      	movs	r1, #0
 80071ec:	4630      	mov	r0, r6
 80071ee:	f001 fe1d 	bl	8008e2c <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 80071f2:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80071f6:	781b      	ldrb	r3, [r3, #0]
 80071f8:	f003 031f 	and.w	r3, r3, #31
 80071fc:	7073      	strb	r3, [r6, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 80071fe:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8007202:	781b      	ldrb	r3, [r3, #0]
 8007204:	095b      	lsrs	r3, r3, #5
 8007206:	7033      	strb	r3, [r6, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 8007208:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800720c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8007210:	2b00      	cmp	r3, #0
 8007212:	db17      	blt.n	8007244 <USBH_MSC_SCSI_Inquiry+0xc6>
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8007214:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8007218:	689a      	ldr	r2, [r3, #8]
 800721a:	68db      	ldr	r3, [r3, #12]
 800721c:	f8c6 2003 	str.w	r2, [r6, #3]
 8007220:	f8c6 3007 	str.w	r3, [r6, #7]
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8007224:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8007228:	6918      	ldr	r0, [r3, #16]
 800722a:	6959      	ldr	r1, [r3, #20]
 800722c:	699a      	ldr	r2, [r3, #24]
 800722e:	69db      	ldr	r3, [r3, #28]
 8007230:	60f0      	str	r0, [r6, #12]
 8007232:	6131      	str	r1, [r6, #16]
 8007234:	6172      	str	r2, [r6, #20]
 8007236:	61b3      	str	r3, [r6, #24]
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8007238:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800723c:	6a1b      	ldr	r3, [r3, #32]
 800723e:	f8c6 301d 	str.w	r3, [r6, #29]
 8007242:	e7a8      	b.n	8007196 <USBH_MSC_SCSI_Inquiry+0x18>
          inquiry->RemovableMedia = 1U;
 8007244:	2301      	movs	r3, #1
 8007246:	70b3      	strb	r3, [r6, #2]
 8007248:	e7e4      	b.n	8007214 <USBH_MSC_SCSI_Inquiry+0x96>

0800724a <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800724a:	b538      	push	{r3, r4, r5, lr}
 800724c:	4603      	mov	r3, r0
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800724e:	f8d0 037c 	ldr.w	r0, [r0, #892]	; 0x37c
 8007252:	69c4      	ldr	r4, [r0, #28]

  switch (MSC_Handle->hbot.cmd_state)
 8007254:	f894 0052 	ldrb.w	r0, [r4, #82]	; 0x52
 8007258:	2801      	cmp	r0, #1
 800725a:	d004      	beq.n	8007266 <USBH_MSC_SCSI_RequestSense+0x1c>
 800725c:	4615      	mov	r5, r2
 800725e:	2802      	cmp	r0, #2
 8007260:	d025      	beq.n	80072ae <USBH_MSC_SCSI_RequestSense+0x64>
 8007262:	2002      	movs	r0, #2
    default:
      break;
  }

  return error;
}
 8007264:	bd38      	pop	{r3, r4, r5, pc}
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8007266:	220e      	movs	r2, #14
 8007268:	65e2      	str	r2, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800726a:	2380      	movs	r3, #128	; 0x80
 800726c:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007270:	230a      	movs	r3, #10
 8007272:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8007276:	2300      	movs	r3, #0
 8007278:	f8c4 3063 	str.w	r3, [r4, #99]	; 0x63
 800727c:	f8c4 3067 	str.w	r3, [r4, #103]	; 0x67
 8007280:	f8c4 306b 	str.w	r3, [r4, #107]	; 0x6b
 8007284:	f8c4 306f 	str.w	r3, [r4, #111]	; 0x6f
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 8007288:	2303      	movs	r3, #3
 800728a:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800728e:	0149      	lsls	r1, r1, #5
 8007290:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 8007294:	f884 2067 	strb.w	r2, [r4, #103]	; 0x67
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007298:	2301      	movs	r3, #1
 800729a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800729e:	2302      	movs	r3, #2
 80072a0:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80072a4:	f104 0310 	add.w	r3, r4, #16
 80072a8:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      break;
 80072ac:	e7da      	b.n	8007264 <USBH_MSC_SCSI_RequestSense+0x1a>
      error = USBH_MSC_BOT_Process(phost, lun);
 80072ae:	4618      	mov	r0, r3
 80072b0:	f7ff fdcc 	bl	8006e4c <USBH_MSC_BOT_Process>
      if (error == USBH_OK)
 80072b4:	2800      	cmp	r0, #0
 80072b6:	d1d5      	bne.n	8007264 <USBH_MSC_SCSI_RequestSense+0x1a>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 80072b8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80072bc:	789b      	ldrb	r3, [r3, #2]
 80072be:	f003 030f 	and.w	r3, r3, #15
 80072c2:	702b      	strb	r3, [r5, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 80072c4:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80072c8:	7b1b      	ldrb	r3, [r3, #12]
 80072ca:	706b      	strb	r3, [r5, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 80072cc:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80072d0:	7b5b      	ldrb	r3, [r3, #13]
 80072d2:	70ab      	strb	r3, [r5, #2]
 80072d4:	e7c6      	b.n	8007264 <USBH_MSC_SCSI_RequestSense+0x1a>

080072d6 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 80072d6:	b538      	push	{r3, r4, r5, lr}
 80072d8:	4684      	mov	ip, r0
  USBH_StatusTypeDef    error = USBH_FAIL ;

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80072da:	f8d0 037c 	ldr.w	r0, [r0, #892]	; 0x37c
 80072de:	69c4      	ldr	r4, [r0, #28]

  switch (MSC_Handle->hbot.cmd_state)
 80072e0:	f894 0052 	ldrb.w	r0, [r4, #82]	; 0x52
 80072e4:	2801      	cmp	r0, #1
 80072e6:	d003      	beq.n	80072f0 <USBH_MSC_SCSI_Write+0x1a>
 80072e8:	2802      	cmp	r0, #2
 80072ea:	d036      	beq.n	800735a <USBH_MSC_SCSI_Write+0x84>
 80072ec:	2002      	movs	r0, #2
    default:
      break;
  }

  return error;
}
 80072ee:	bd38      	pop	{r3, r4, r5, pc}
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 80072f0:	f8b4 1098 	ldrh.w	r1, [r4, #152]	; 0x98
 80072f4:	9d04      	ldr	r5, [sp, #16]
 80072f6:	fb05 f101 	mul.w	r1, r5, r1
 80072fa:	65e1      	str	r1, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 80072fc:	2100      	movs	r1, #0
 80072fe:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007302:	f04f 0c0a 	mov.w	ip, #10
 8007306:	f884 c062 	strb.w	ip, [r4, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800730a:	f8c4 1063 	str.w	r1, [r4, #99]	; 0x63
 800730e:	f8c4 1067 	str.w	r1, [r4, #103]	; 0x67
 8007312:	f8c4 106b 	str.w	r1, [r4, #107]	; 0x6b
 8007316:	f8c4 106f 	str.w	r1, [r4, #111]	; 0x6f
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800731a:	212a      	movs	r1, #42	; 0x2a
 800731c:	f884 1063 	strb.w	r1, [r4, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8007320:	f3c2 6107 	ubfx	r1, r2, #24, #8
 8007324:	f884 1065 	strb.w	r1, [r4, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8007328:	f3c2 4107 	ubfx	r1, r2, #16, #8
 800732c:	f884 1066 	strb.w	r1, [r4, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8007330:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8007334:	f884 1067 	strb.w	r1, [r4, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8007338:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800733c:	f3c5 2207 	ubfx	r2, r5, #8, #8
 8007340:	f884 206a 	strb.w	r2, [r4, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8007344:	f884 506b 	strb.w	r5, [r4, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007348:	2201      	movs	r2, #1
 800734a:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800734e:	2202      	movs	r2, #2
 8007350:	f884 2052 	strb.w	r2, [r4, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8007354:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      break;
 8007358:	e7c9      	b.n	80072ee <USBH_MSC_SCSI_Write+0x18>
      error = USBH_MSC_BOT_Process(phost, lun);
 800735a:	4660      	mov	r0, ip
 800735c:	f7ff fd76 	bl	8006e4c <USBH_MSC_BOT_Process>
      break;
 8007360:	e7c5      	b.n	80072ee <USBH_MSC_SCSI_Write+0x18>

08007362 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 8007362:	b538      	push	{r3, r4, r5, lr}
 8007364:	4684      	mov	ip, r0
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007366:	f8d0 037c 	ldr.w	r0, [r0, #892]	; 0x37c
 800736a:	69c4      	ldr	r4, [r0, #28]

  switch (MSC_Handle->hbot.cmd_state)
 800736c:	f894 0052 	ldrb.w	r0, [r4, #82]	; 0x52
 8007370:	2801      	cmp	r0, #1
 8007372:	d003      	beq.n	800737c <USBH_MSC_SCSI_Read+0x1a>
 8007374:	2802      	cmp	r0, #2
 8007376:	d036      	beq.n	80073e6 <USBH_MSC_SCSI_Read+0x84>
 8007378:	2002      	movs	r0, #2
    default:
      break;
  }

  return error;
}
 800737a:	bd38      	pop	{r3, r4, r5, pc}
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800737c:	f8b4 1098 	ldrh.w	r1, [r4, #152]	; 0x98
 8007380:	9d04      	ldr	r5, [sp, #16]
 8007382:	fb05 f101 	mul.w	r1, r5, r1
 8007386:	65e1      	str	r1, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8007388:	2180      	movs	r1, #128	; 0x80
 800738a:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800738e:	210a      	movs	r1, #10
 8007390:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8007394:	2100      	movs	r1, #0
 8007396:	f8c4 1063 	str.w	r1, [r4, #99]	; 0x63
 800739a:	f8c4 1067 	str.w	r1, [r4, #103]	; 0x67
 800739e:	f8c4 106b 	str.w	r1, [r4, #107]	; 0x6b
 80073a2:	f8c4 106f 	str.w	r1, [r4, #111]	; 0x6f
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 80073a6:	2128      	movs	r1, #40	; 0x28
 80073a8:	f884 1063 	strb.w	r1, [r4, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 80073ac:	f3c2 6107 	ubfx	r1, r2, #24, #8
 80073b0:	f884 1065 	strb.w	r1, [r4, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 80073b4:	f3c2 4107 	ubfx	r1, r2, #16, #8
 80073b8:	f884 1066 	strb.w	r1, [r4, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 80073bc:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80073c0:	f884 1067 	strb.w	r1, [r4, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 80073c4:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 80073c8:	f3c5 2207 	ubfx	r2, r5, #8, #8
 80073cc:	f884 206a 	strb.w	r2, [r4, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 80073d0:	f884 506b 	strb.w	r5, [r4, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80073d4:	2201      	movs	r2, #1
 80073d6:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80073da:	2202      	movs	r2, #2
 80073dc:	f884 2052 	strb.w	r2, [r4, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 80073e0:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      break;
 80073e4:	e7c9      	b.n	800737a <USBH_MSC_SCSI_Read+0x18>
      error = USBH_MSC_BOT_Process(phost, lun);
 80073e6:	4660      	mov	r0, ip
 80073e8:	f7ff fd30 	bl	8006e4c <USBH_MSC_BOT_Process>
      break;
 80073ec:	e7c5      	b.n	800737a <USBH_MSC_SCSI_Read+0x18>

080073ee <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80073ee:	4684      	mov	ip, r0
  uint32_t i = 0U;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80073f0:	2300      	movs	r3, #0
 80073f2:	e006      	b.n	8007402 <DeInitStateMachine+0x14>
  {
    phost->Pipes[i] = 0U;
 80073f4:	f103 02e0 	add.w	r2, r3, #224	; 0xe0
 80073f8:	eb0c 0282 	add.w	r2, ip, r2, lsl #2
 80073fc:	2100      	movs	r1, #0
 80073fe:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007400:	3301      	adds	r3, #1
 8007402:	2b0e      	cmp	r3, #14
 8007404:	d9f6      	bls.n	80073f4 <DeInitStateMachine+0x6>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007406:	2300      	movs	r3, #0
 8007408:	e005      	b.n	8007416 <DeInitStateMachine+0x28>
  {
    phost->device.Data[i] = 0U;
 800740a:	eb0c 0203 	add.w	r2, ip, r3
 800740e:	2100      	movs	r1, #0
 8007410:	f882 111c 	strb.w	r1, [r2, #284]	; 0x11c
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007414:	3301      	adds	r3, #1
 8007416:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800741a:	d3f6      	bcc.n	800740a <DeInitStateMachine+0x1c>
  }

  phost->gState = HOST_IDLE;
 800741c:	2000      	movs	r0, #0
 800741e:	f88c 0000 	strb.w	r0, [ip]
  phost->EnumState = ENUM_IDLE;
 8007422:	f88c 0001 	strb.w	r0, [ip, #1]
  phost->RequestState = CMD_SEND;
 8007426:	2301      	movs	r3, #1
 8007428:	f88c 3002 	strb.w	r3, [ip, #2]
  phost->Timer = 0U;
 800742c:	f8cc 03c4 	str.w	r0, [ip, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007430:	f88c 3018 	strb.w	r3, [ip, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007434:	2240      	movs	r2, #64	; 0x40
 8007436:	f88c 2006 	strb.w	r2, [ip, #6]
  phost->Control.errorcount = 0U;
 800743a:	f88c 0019 	strb.w	r0, [ip, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800743e:	f88c 031c 	strb.w	r0, [ip, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8007442:	f88c 331d 	strb.w	r3, [ip, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007446:	f88c 031f 	strb.w	r0, [ip, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800744a:	f88c 031e 	strb.w	r0, [ip, #798]	; 0x31e

  return USBH_OK;
}
 800744e:	4770      	bx	lr

08007450 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007450:	b508      	push	{r3, lr}
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007452:	7803      	ldrb	r3, [r0, #0]
 8007454:	b2db      	uxtb	r3, r3
 8007456:	2b0b      	cmp	r3, #11
 8007458:	d000      	beq.n	800745c <USBH_HandleSof+0xc>
  {
    phost->pActiveClass->SOFProcess(phost);
  }
}
 800745a:	bd08      	pop	{r3, pc}
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800745c:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8007460:	2b00      	cmp	r3, #0
 8007462:	d0fa      	beq.n	800745a <USBH_HandleSof+0xa>
    phost->pActiveClass->SOFProcess(phost);
 8007464:	699b      	ldr	r3, [r3, #24]
 8007466:	4798      	blx	r3
}
 8007468:	e7f7      	b.n	800745a <USBH_HandleSof+0xa>

0800746a <USBH_HandleEnum>:
{
 800746a:	b570      	push	{r4, r5, r6, lr}
 800746c:	b084      	sub	sp, #16
 800746e:	4604      	mov	r4, r0
  switch (phost->EnumState)
 8007470:	7845      	ldrb	r5, [r0, #1]
 8007472:	2d07      	cmp	r5, #7
 8007474:	f200 812c 	bhi.w	80076d0 <USBH_HandleEnum+0x266>
 8007478:	e8df f015 	tbh	[pc, r5, lsl #1]
 800747c:	00480008 	.word	0x00480008
 8007480:	009a0069 	.word	0x009a0069
 8007484:	00e500bf 	.word	0x00e500bf
 8007488:	011700fe 	.word	0x011700fe
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800748c:	2108      	movs	r1, #8
 800748e:	f000 fcfd 	bl	8007e8c <USBH_Get_DevDesc>
      if (ReqStatus == USBH_OK)
 8007492:	b118      	cbz	r0, 800749c <USBH_HandleEnum+0x32>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007494:	2803      	cmp	r0, #3
 8007496:	d021      	beq.n	80074dc <USBH_HandleEnum+0x72>
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007498:	2501      	movs	r5, #1
 800749a:	e109      	b.n	80076b0 <USBH_HandleEnum+0x246>
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800749c:	f894 332d 	ldrb.w	r3, [r4, #813]	; 0x32d
 80074a0:	71a3      	strb	r3, [r4, #6]
        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80074a2:	2501      	movs	r5, #1
 80074a4:	7065      	strb	r5, [r4, #1]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80074a6:	9302      	str	r3, [sp, #8]
 80074a8:	2600      	movs	r6, #0
 80074aa:	9601      	str	r6, [sp, #4]
 80074ac:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 80074b0:	9300      	str	r3, [sp, #0]
 80074b2:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 80074b6:	2280      	movs	r2, #128	; 0x80
 80074b8:	7921      	ldrb	r1, [r4, #4]
 80074ba:	4620      	mov	r0, r4
 80074bc:	f000 fde5 	bl	800808a <USBH_OpenPipe>
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80074c0:	79a3      	ldrb	r3, [r4, #6]
 80074c2:	9302      	str	r3, [sp, #8]
 80074c4:	9601      	str	r6, [sp, #4]
 80074c6:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 80074ca:	9300      	str	r3, [sp, #0]
 80074cc:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 80074d0:	4632      	mov	r2, r6
 80074d2:	7961      	ldrb	r1, [r4, #5]
 80074d4:	4620      	mov	r0, r4
 80074d6:	f000 fdd8 	bl	800808a <USBH_OpenPipe>
 80074da:	e0e9      	b.n	80076b0 <USBH_HandleEnum+0x246>
        phost->device.EnumCnt++;
 80074dc:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 80074e0:	3301      	adds	r3, #1
 80074e2:	b2db      	uxtb	r3, r3
 80074e4:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80074e8:	2b03      	cmp	r3, #3
 80074ea:	d903      	bls.n	80074f4 <USBH_HandleEnum+0x8a>
          phost->gState = HOST_ABORT_STATE;
 80074ec:	230d      	movs	r3, #13
 80074ee:	7023      	strb	r3, [r4, #0]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80074f0:	2501      	movs	r5, #1
 80074f2:	e0dd      	b.n	80076b0 <USBH_HandleEnum+0x246>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80074f4:	7961      	ldrb	r1, [r4, #5]
 80074f6:	4620      	mov	r0, r4
 80074f8:	f000 fdef 	bl	80080da <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80074fc:	7921      	ldrb	r1, [r4, #4]
 80074fe:	4620      	mov	r0, r4
 8007500:	f000 fdeb 	bl	80080da <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007504:	2300      	movs	r3, #0
 8007506:	7023      	strb	r3, [r4, #0]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007508:	2501      	movs	r5, #1
 800750a:	e0d1      	b.n	80076b0 <USBH_HandleEnum+0x246>
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800750c:	2112      	movs	r1, #18
 800750e:	f000 fcbd 	bl	8007e8c <USBH_Get_DevDesc>
      if (ReqStatus == USBH_OK)
 8007512:	b910      	cbnz	r0, 800751a <USBH_HandleEnum+0xb0>
        phost->EnumState = ENUM_SET_ADDR;
 8007514:	2302      	movs	r3, #2
 8007516:	7063      	strb	r3, [r4, #1]
 8007518:	e0ca      	b.n	80076b0 <USBH_HandleEnum+0x246>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800751a:	2803      	cmp	r0, #3
 800751c:	f040 80c8 	bne.w	80076b0 <USBH_HandleEnum+0x246>
        phost->device.EnumCnt++;
 8007520:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 8007524:	3301      	adds	r3, #1
 8007526:	b2db      	uxtb	r3, r3
 8007528:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800752c:	2b03      	cmp	r3, #3
 800752e:	d902      	bls.n	8007536 <USBH_HandleEnum+0xcc>
          phost->gState = HOST_ABORT_STATE;
 8007530:	230d      	movs	r3, #13
 8007532:	7023      	strb	r3, [r4, #0]
 8007534:	e0bc      	b.n	80076b0 <USBH_HandleEnum+0x246>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007536:	7961      	ldrb	r1, [r4, #5]
 8007538:	4620      	mov	r0, r4
 800753a:	f000 fdce 	bl	80080da <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800753e:	7921      	ldrb	r1, [r4, #4]
 8007540:	4620      	mov	r0, r4
 8007542:	f000 fdca 	bl	80080da <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007546:	2300      	movs	r3, #0
 8007548:	7063      	strb	r3, [r4, #1]
          phost->gState = HOST_IDLE;
 800754a:	7023      	strb	r3, [r4, #0]
 800754c:	e0b0      	b.n	80076b0 <USBH_HandleEnum+0x246>
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800754e:	2101      	movs	r1, #1
 8007550:	f000 fce6 	bl	8007f20 <USBH_SetAddress>
      if (ReqStatus == USBH_OK)
 8007554:	b118      	cbz	r0, 800755e <USBH_HandleEnum+0xf4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007556:	2803      	cmp	r0, #3
 8007558:	d024      	beq.n	80075a4 <USBH_HandleEnum+0x13a>
  USBH_StatusTypeDef Status = USBH_BUSY;
 800755a:	2501      	movs	r5, #1
 800755c:	e0a8      	b.n	80076b0 <USBH_HandleEnum+0x246>
        USBH_Delay(2U);
 800755e:	2002      	movs	r0, #2
 8007560:	f001 f887 	bl	8008672 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007564:	2501      	movs	r5, #1
 8007566:	f884 531c 	strb.w	r5, [r4, #796]	; 0x31c
        phost->EnumState = ENUM_GET_CFG_DESC;
 800756a:	2303      	movs	r3, #3
 800756c:	7063      	strb	r3, [r4, #1]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800756e:	79a3      	ldrb	r3, [r4, #6]
 8007570:	9302      	str	r3, [sp, #8]
 8007572:	2600      	movs	r6, #0
 8007574:	9601      	str	r6, [sp, #4]
 8007576:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 800757a:	9300      	str	r3, [sp, #0]
 800757c:	462b      	mov	r3, r5
 800757e:	2280      	movs	r2, #128	; 0x80
 8007580:	7921      	ldrb	r1, [r4, #4]
 8007582:	4620      	mov	r0, r4
 8007584:	f000 fd81 	bl	800808a <USBH_OpenPipe>
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007588:	79a3      	ldrb	r3, [r4, #6]
 800758a:	9302      	str	r3, [sp, #8]
 800758c:	9601      	str	r6, [sp, #4]
 800758e:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 8007592:	9300      	str	r3, [sp, #0]
 8007594:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8007598:	4632      	mov	r2, r6
 800759a:	7961      	ldrb	r1, [r4, #5]
 800759c:	4620      	mov	r0, r4
 800759e:	f000 fd74 	bl	800808a <USBH_OpenPipe>
 80075a2:	e085      	b.n	80076b0 <USBH_HandleEnum+0x246>
        phost->gState = HOST_ABORT_STATE;
 80075a4:	230d      	movs	r3, #13
 80075a6:	7023      	strb	r3, [r4, #0]
        phost->EnumState = ENUM_IDLE;
 80075a8:	2300      	movs	r3, #0
 80075aa:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80075ac:	2501      	movs	r5, #1
 80075ae:	e07f      	b.n	80076b0 <USBH_HandleEnum+0x246>
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80075b0:	2109      	movs	r1, #9
 80075b2:	f000 fc84 	bl	8007ebe <USBH_Get_CfgDesc>
      if (ReqStatus == USBH_OK)
 80075b6:	b918      	cbnz	r0, 80075c0 <USBH_HandleEnum+0x156>
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80075b8:	2304      	movs	r3, #4
 80075ba:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80075bc:	2501      	movs	r5, #1
 80075be:	e077      	b.n	80076b0 <USBH_HandleEnum+0x246>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80075c0:	2803      	cmp	r0, #3
 80075c2:	d001      	beq.n	80075c8 <USBH_HandleEnum+0x15e>
  USBH_StatusTypeDef Status = USBH_BUSY;
 80075c4:	2501      	movs	r5, #1
 80075c6:	e073      	b.n	80076b0 <USBH_HandleEnum+0x246>
        phost->device.EnumCnt++;
 80075c8:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 80075cc:	3301      	adds	r3, #1
 80075ce:	b2db      	uxtb	r3, r3
 80075d0:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80075d4:	2b03      	cmp	r3, #3
 80075d6:	d903      	bls.n	80075e0 <USBH_HandleEnum+0x176>
          phost->gState = HOST_ABORT_STATE;
 80075d8:	230d      	movs	r3, #13
 80075da:	7023      	strb	r3, [r4, #0]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80075dc:	2501      	movs	r5, #1
 80075de:	e067      	b.n	80076b0 <USBH_HandleEnum+0x246>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80075e0:	7961      	ldrb	r1, [r4, #5]
 80075e2:	4620      	mov	r0, r4
 80075e4:	f000 fd79 	bl	80080da <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80075e8:	7921      	ldrb	r1, [r4, #4]
 80075ea:	4620      	mov	r0, r4
 80075ec:	f000 fd75 	bl	80080da <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80075f0:	2300      	movs	r3, #0
 80075f2:	7063      	strb	r3, [r4, #1]
          phost->gState = HOST_IDLE;
 80075f4:	7023      	strb	r3, [r4, #0]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80075f6:	2501      	movs	r5, #1
 80075f8:	e05a      	b.n	80076b0 <USBH_HandleEnum+0x246>
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80075fa:	f8b0 133a 	ldrh.w	r1, [r0, #826]	; 0x33a
 80075fe:	f000 fc5e 	bl	8007ebe <USBH_Get_CfgDesc>
      if (ReqStatus == USBH_OK)
 8007602:	b918      	cbnz	r0, 800760c <USBH_HandleEnum+0x1a2>
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007604:	2305      	movs	r3, #5
 8007606:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007608:	2501      	movs	r5, #1
 800760a:	e051      	b.n	80076b0 <USBH_HandleEnum+0x246>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800760c:	2803      	cmp	r0, #3
 800760e:	d001      	beq.n	8007614 <USBH_HandleEnum+0x1aa>
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007610:	2501      	movs	r5, #1
 8007612:	e04d      	b.n	80076b0 <USBH_HandleEnum+0x246>
        phost->device.EnumCnt++;
 8007614:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 8007618:	3301      	adds	r3, #1
 800761a:	b2db      	uxtb	r3, r3
 800761c:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007620:	2b03      	cmp	r3, #3
 8007622:	d903      	bls.n	800762c <USBH_HandleEnum+0x1c2>
          phost->gState = HOST_ABORT_STATE;
 8007624:	230d      	movs	r3, #13
 8007626:	7023      	strb	r3, [r4, #0]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007628:	2501      	movs	r5, #1
 800762a:	e041      	b.n	80076b0 <USBH_HandleEnum+0x246>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800762c:	7961      	ldrb	r1, [r4, #5]
 800762e:	4620      	mov	r0, r4
 8007630:	f000 fd53 	bl	80080da <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007634:	7921      	ldrb	r1, [r4, #4]
 8007636:	4620      	mov	r0, r4
 8007638:	f000 fd4f 	bl	80080da <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800763c:	2300      	movs	r3, #0
 800763e:	7063      	strb	r3, [r4, #1]
          phost->gState = HOST_IDLE;
 8007640:	7023      	strb	r3, [r4, #0]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007642:	2501      	movs	r5, #1
 8007644:	e034      	b.n	80076b0 <USBH_HandleEnum+0x246>
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007646:	f890 1334 	ldrb.w	r1, [r0, #820]	; 0x334
 800764a:	b919      	cbnz	r1, 8007654 <USBH_HandleEnum+0x1ea>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800764c:	2306      	movs	r3, #6
 800764e:	7043      	strb	r3, [r0, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007650:	2501      	movs	r5, #1
 8007652:	e02d      	b.n	80076b0 <USBH_HandleEnum+0x246>
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007654:	23ff      	movs	r3, #255	; 0xff
 8007656:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 800765a:	f000 fc49 	bl	8007ef0 <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
 800765e:	b918      	cbnz	r0, 8007668 <USBH_HandleEnum+0x1fe>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007660:	2306      	movs	r3, #6
 8007662:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007664:	2501      	movs	r5, #1
 8007666:	e023      	b.n	80076b0 <USBH_HandleEnum+0x246>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007668:	2803      	cmp	r0, #3
 800766a:	d001      	beq.n	8007670 <USBH_HandleEnum+0x206>
  USBH_StatusTypeDef Status = USBH_BUSY;
 800766c:	2501      	movs	r5, #1
 800766e:	e01f      	b.n	80076b0 <USBH_HandleEnum+0x246>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007670:	2306      	movs	r3, #6
 8007672:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007674:	2501      	movs	r5, #1
 8007676:	e01b      	b.n	80076b0 <USBH_HandleEnum+0x246>
      if (phost->device.DevDesc.iProduct != 0U)
 8007678:	f890 1335 	ldrb.w	r1, [r0, #821]	; 0x335
 800767c:	b919      	cbnz	r1, 8007686 <USBH_HandleEnum+0x21c>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800767e:	2307      	movs	r3, #7
 8007680:	7043      	strb	r3, [r0, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007682:	2501      	movs	r5, #1
 8007684:	e014      	b.n	80076b0 <USBH_HandleEnum+0x246>
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007686:	23ff      	movs	r3, #255	; 0xff
 8007688:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 800768c:	f000 fc30 	bl	8007ef0 <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
 8007690:	b918      	cbnz	r0, 800769a <USBH_HandleEnum+0x230>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007692:	2307      	movs	r3, #7
 8007694:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007696:	2501      	movs	r5, #1
 8007698:	e00a      	b.n	80076b0 <USBH_HandleEnum+0x246>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800769a:	2803      	cmp	r0, #3
 800769c:	d001      	beq.n	80076a2 <USBH_HandleEnum+0x238>
  USBH_StatusTypeDef Status = USBH_BUSY;
 800769e:	2501      	movs	r5, #1
 80076a0:	e006      	b.n	80076b0 <USBH_HandleEnum+0x246>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80076a2:	2307      	movs	r3, #7
 80076a4:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80076a6:	2501      	movs	r5, #1
 80076a8:	e002      	b.n	80076b0 <USBH_HandleEnum+0x246>
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80076aa:	f890 5336 	ldrb.w	r5, [r0, #822]	; 0x336
 80076ae:	b915      	cbnz	r5, 80076b6 <USBH_HandleEnum+0x24c>
}
 80076b0:	4628      	mov	r0, r5
 80076b2:	b004      	add	sp, #16
 80076b4:	bd70      	pop	{r4, r5, r6, pc}
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80076b6:	23ff      	movs	r3, #255	; 0xff
 80076b8:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 80076bc:	4629      	mov	r1, r5
 80076be:	f000 fc17 	bl	8007ef0 <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
 80076c2:	4605      	mov	r5, r0
 80076c4:	2800      	cmp	r0, #0
 80076c6:	d0f3      	beq.n	80076b0 <USBH_HandleEnum+0x246>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80076c8:	2803      	cmp	r0, #3
 80076ca:	d003      	beq.n	80076d4 <USBH_HandleEnum+0x26a>
  USBH_StatusTypeDef Status = USBH_BUSY;
 80076cc:	2501      	movs	r5, #1
 80076ce:	e7ef      	b.n	80076b0 <USBH_HandleEnum+0x246>
  switch (phost->EnumState)
 80076d0:	2501      	movs	r5, #1
 80076d2:	e7ed      	b.n	80076b0 <USBH_HandleEnum+0x246>
          Status = USBH_OK;
 80076d4:	2500      	movs	r5, #0
 80076d6:	e7eb      	b.n	80076b0 <USBH_HandleEnum+0x246>

080076d8 <USBH_Init>:
  if (phost == NULL)
 80076d8:	b1d8      	cbz	r0, 8007712 <USBH_Init+0x3a>
{
 80076da:	b570      	push	{r4, r5, r6, lr}
 80076dc:	460e      	mov	r6, r1
 80076de:	4604      	mov	r4, r0
  phost->id = id;
 80076e0:	f880 23cc 	strb.w	r2, [r0, #972]	; 0x3cc
  phost->pActiveClass = NULL;
 80076e4:	2500      	movs	r5, #0
 80076e6:	f8c0 537c 	str.w	r5, [r0, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80076ea:	f8c0 5380 	str.w	r5, [r0, #896]	; 0x380
  DeInitStateMachine(phost);
 80076ee:	f7ff fe7e 	bl	80073ee <DeInitStateMachine>
  phost->device.PortEnabled = 0U;
 80076f2:	f884 5323 	strb.w	r5, [r4, #803]	; 0x323
  phost->device.is_connected = 0U;
 80076f6:	f884 5320 	strb.w	r5, [r4, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80076fa:	f884 5321 	strb.w	r5, [r4, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80076fe:	f884 5322 	strb.w	r5, [r4, #802]	; 0x322
  if (pUsrFunc != NULL)
 8007702:	b10e      	cbz	r6, 8007708 <USBH_Init+0x30>
    phost->pUser = pUsrFunc;
 8007704:	f8c4 63d4 	str.w	r6, [r4, #980]	; 0x3d4
  USBH_LL_Init(phost);
 8007708:	4620      	mov	r0, r4
 800770a:	f000 ff33 	bl	8008574 <USBH_LL_Init>
  return USBH_OK;
 800770e:	2000      	movs	r0, #0
}
 8007710:	bd70      	pop	{r4, r5, r6, pc}
    return USBH_FAIL;
 8007712:	2002      	movs	r0, #2
}
 8007714:	4770      	bx	lr

08007716 <USBH_RegisterClass>:
  if (pclass != NULL)
 8007716:	460a      	mov	r2, r1
 8007718:	b151      	cbz	r1, 8007730 <USBH_RegisterClass+0x1a>
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800771a:	f8d0 3380 	ldr.w	r3, [r0, #896]	; 0x380
 800771e:	b94b      	cbnz	r3, 8007734 <USBH_RegisterClass+0x1e>
      phost->pClass[phost->ClassNumber++] = pclass;
 8007720:	1c59      	adds	r1, r3, #1
 8007722:	f8c0 1380 	str.w	r1, [r0, #896]	; 0x380
 8007726:	33de      	adds	r3, #222	; 0xde
 8007728:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      status = USBH_OK;
 800772c:	2000      	movs	r0, #0
 800772e:	4770      	bx	lr
    status = USBH_FAIL;
 8007730:	2002      	movs	r0, #2
 8007732:	4770      	bx	lr
      status = USBH_FAIL;
 8007734:	2002      	movs	r0, #2
}
 8007736:	4770      	bx	lr

08007738 <USBH_SelectInterface>:
  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007738:	f890 333c 	ldrb.w	r3, [r0, #828]	; 0x33c
 800773c:	428b      	cmp	r3, r1
 800773e:	d903      	bls.n	8007748 <USBH_SelectInterface+0x10>
    phost->device.current_interface = interface;
 8007740:	f880 1324 	strb.w	r1, [r0, #804]	; 0x324
  USBH_StatusTypeDef status = USBH_OK;
 8007744:	2000      	movs	r0, #0
 8007746:	4770      	bx	lr
    status = USBH_FAIL;
 8007748:	2002      	movs	r0, #2
}
 800774a:	4770      	bx	lr

0800774c <USBH_FindInterface>:
{
 800774c:	b510      	push	{r4, lr}
 800774e:	4604      	mov	r4, r0
  uint8_t if_ix = 0U;
 8007750:	2000      	movs	r0, #0
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007752:	e00b      	b.n	800776c <USBH_FindInterface+0x20>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007754:	f04f 0c1a 	mov.w	ip, #26
 8007758:	fb0c 4e0e 	mla	lr, ip, lr, r4
 800775c:	f89e c349 	ldrb.w	ip, [lr, #841]	; 0x349
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007760:	459c      	cmp	ip, r3
 8007762:	d01c      	beq.n	800779e <USBH_FindInterface+0x52>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007764:	2bff      	cmp	r3, #255	; 0xff
 8007766:	d01a      	beq.n	800779e <USBH_FindInterface+0x52>
    if_ix++;
 8007768:	3001      	adds	r0, #1
 800776a:	b2c0      	uxtb	r0, r0
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800776c:	2801      	cmp	r0, #1
 800776e:	d815      	bhi.n	800779c <USBH_FindInterface+0x50>
    pif = &pcfg->Itf_Desc[if_ix];
 8007770:	4686      	mov	lr, r0
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007772:	f04f 0c1a 	mov.w	ip, #26
 8007776:	fb0c 4c00 	mla	ip, ip, r0, r4
 800777a:	f89c c347 	ldrb.w	ip, [ip, #839]	; 0x347
 800777e:	458c      	cmp	ip, r1
 8007780:	d001      	beq.n	8007786 <USBH_FindInterface+0x3a>
 8007782:	29ff      	cmp	r1, #255	; 0xff
 8007784:	d1f0      	bne.n	8007768 <USBH_FindInterface+0x1c>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007786:	f04f 0c1a 	mov.w	ip, #26
 800778a:	fb0c 4c0e 	mla	ip, ip, lr, r4
 800778e:	f89c c348 	ldrb.w	ip, [ip, #840]	; 0x348
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007792:	4594      	cmp	ip, r2
 8007794:	d0de      	beq.n	8007754 <USBH_FindInterface+0x8>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007796:	2aff      	cmp	r2, #255	; 0xff
 8007798:	d1e6      	bne.n	8007768 <USBH_FindInterface+0x1c>
 800779a:	e7db      	b.n	8007754 <USBH_FindInterface+0x8>
  return 0xFFU;
 800779c:	20ff      	movs	r0, #255	; 0xff
}
 800779e:	bd10      	pop	{r4, pc}

080077a0 <USBH_Start>:
{
 80077a0:	b510      	push	{r4, lr}
 80077a2:	4604      	mov	r4, r0
  USBH_LL_Start(phost);
 80077a4:	f000 ff73 	bl	800868e <USBH_LL_Start>
  USBH_LL_DriverVBUS(phost, TRUE);
 80077a8:	2101      	movs	r1, #1
 80077aa:	4620      	mov	r0, r4
 80077ac:	f000 ff2a 	bl	8008604 <USBH_LL_DriverVBUS>
}
 80077b0:	2000      	movs	r0, #0
 80077b2:	bd10      	pop	{r4, pc}

080077b4 <USBH_Process>:
{
 80077b4:	b530      	push	{r4, r5, lr}
 80077b6:	b087      	sub	sp, #28
 80077b8:	4604      	mov	r4, r0
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80077ba:	2302      	movs	r3, #2
 80077bc:	f88d 3017 	strb.w	r3, [sp, #23]
  if (phost->device.is_disconnected == 1U)
 80077c0:	f890 3321 	ldrb.w	r3, [r0, #801]	; 0x321
 80077c4:	b2db      	uxtb	r3, r3
 80077c6:	2b01      	cmp	r3, #1
 80077c8:	d011      	beq.n	80077ee <USBH_Process+0x3a>
  switch (phost->gState)
 80077ca:	7823      	ldrb	r3, [r4, #0]
 80077cc:	b2db      	uxtb	r3, r3
 80077ce:	2b0b      	cmp	r3, #11
 80077d0:	d87b      	bhi.n	80078ca <USBH_Process+0x116>
 80077d2:	e8df f013 	tbh	[pc, r3, lsl #1]
 80077d6:	000f      	.short	0x000f
 80077d8:	00450021 	.word	0x00450021
 80077dc:	007a0105 	.word	0x007a0105
 80077e0:	00e3007d 	.word	0x00e3007d
 80077e4:	009c0092 	.word	0x009c0092
 80077e8:	00b700a6 	.word	0x00b700a6
 80077ec:	00fc      	.short	0x00fc
    phost->gState = HOST_DEV_DISCONNECTED;
 80077ee:	2303      	movs	r3, #3
 80077f0:	7003      	strb	r3, [r0, #0]
 80077f2:	e7ea      	b.n	80077ca <USBH_Process+0x16>
      if (phost->device.is_connected)
 80077f4:	f894 3320 	ldrb.w	r3, [r4, #800]	; 0x320
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d066      	beq.n	80078ca <USBH_Process+0x116>
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80077fc:	2301      	movs	r3, #1
 80077fe:	7023      	strb	r3, [r4, #0]
        USBH_Delay(200U);
 8007800:	20c8      	movs	r0, #200	; 0xc8
 8007802:	f000 ff36 	bl	8008672 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8007806:	4620      	mov	r0, r4
 8007808:	f000 ff51 	bl	80086ae <USBH_LL_ResetPort>
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800780c:	2300      	movs	r3, #0
 800780e:	f884 331c 	strb.w	r3, [r4, #796]	; 0x31c
        phost->Timeout = 0U;
 8007812:	f8c4 33c8 	str.w	r3, [r4, #968]	; 0x3c8
 8007816:	e058      	b.n	80078ca <USBH_Process+0x116>
      if (phost->device.PortEnabled == 1U)
 8007818:	f894 3323 	ldrb.w	r3, [r4, #803]	; 0x323
 800781c:	2b01      	cmp	r3, #1
 800781e:	d00f      	beq.n	8007840 <USBH_Process+0x8c>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007820:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 8007824:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007828:	d913      	bls.n	8007852 <USBH_Process+0x9e>
          phost->device.RstCnt++;
 800782a:	f894 331f 	ldrb.w	r3, [r4, #799]	; 0x31f
 800782e:	3301      	adds	r3, #1
 8007830:	b2db      	uxtb	r3, r3
 8007832:	f884 331f 	strb.w	r3, [r4, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007836:	2b03      	cmp	r3, #3
 8007838:	d908      	bls.n	800784c <USBH_Process+0x98>
            phost->gState = HOST_ABORT_STATE;
 800783a:	230d      	movs	r3, #13
 800783c:	7023      	strb	r3, [r4, #0]
 800783e:	e044      	b.n	80078ca <USBH_Process+0x116>
        phost->device.RstCnt = 0U;
 8007840:	2300      	movs	r3, #0
 8007842:	f884 331f 	strb.w	r3, [r4, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007846:	2302      	movs	r3, #2
 8007848:	7023      	strb	r3, [r4, #0]
 800784a:	e03e      	b.n	80078ca <USBH_Process+0x116>
            phost->gState = HOST_IDLE;
 800784c:	2300      	movs	r3, #0
 800784e:	7023      	strb	r3, [r4, #0]
 8007850:	e03b      	b.n	80078ca <USBH_Process+0x116>
          phost->Timeout += 10U;
 8007852:	330a      	adds	r3, #10
 8007854:	f8c4 33c8 	str.w	r3, [r4, #968]	; 0x3c8
          USBH_Delay(10U);
 8007858:	200a      	movs	r0, #10
 800785a:	f000 ff0a 	bl	8008672 <USBH_Delay>
 800785e:	e034      	b.n	80078ca <USBH_Process+0x116>
      if (phost->pUser != NULL)
 8007860:	f8d4 33d4 	ldr.w	r3, [r4, #980]	; 0x3d4
 8007864:	b113      	cbz	r3, 800786c <USBH_Process+0xb8>
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007866:	2104      	movs	r1, #4
 8007868:	4620      	mov	r0, r4
 800786a:	4798      	blx	r3
      USBH_Delay(100U);
 800786c:	2064      	movs	r0, #100	; 0x64
 800786e:	f000 ff00 	bl	8008672 <USBH_Delay>
      phost->device.speed = USBH_LL_GetSpeed(phost);
 8007872:	4620      	mov	r0, r4
 8007874:	f000 feaa 	bl	80085cc <USBH_LL_GetSpeed>
 8007878:	f884 031d 	strb.w	r0, [r4, #797]	; 0x31d
      phost->gState = HOST_ENUMERATION;
 800787c:	2305      	movs	r3, #5
 800787e:	7023      	strb	r3, [r4, #0]
      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007880:	2100      	movs	r1, #0
 8007882:	4620      	mov	r0, r4
 8007884:	f000 fc16 	bl	80080b4 <USBH_AllocPipe>
 8007888:	7160      	strb	r0, [r4, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800788a:	2180      	movs	r1, #128	; 0x80
 800788c:	4620      	mov	r0, r4
 800788e:	f000 fc11 	bl	80080b4 <USBH_AllocPipe>
 8007892:	4601      	mov	r1, r0
 8007894:	7120      	strb	r0, [r4, #4]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007896:	79a3      	ldrb	r3, [r4, #6]
 8007898:	9302      	str	r3, [sp, #8]
 800789a:	2500      	movs	r5, #0
 800789c:	9501      	str	r5, [sp, #4]
 800789e:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 80078a2:	9300      	str	r3, [sp, #0]
 80078a4:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 80078a8:	2280      	movs	r2, #128	; 0x80
 80078aa:	4620      	mov	r0, r4
 80078ac:	f000 fbed 	bl	800808a <USBH_OpenPipe>
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80078b0:	79a3      	ldrb	r3, [r4, #6]
 80078b2:	9302      	str	r3, [sp, #8]
 80078b4:	9501      	str	r5, [sp, #4]
 80078b6:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 80078ba:	9300      	str	r3, [sp, #0]
 80078bc:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 80078c0:	462a      	mov	r2, r5
 80078c2:	7961      	ldrb	r1, [r4, #5]
 80078c4:	4620      	mov	r0, r4
 80078c6:	f000 fbe0 	bl	800808a <USBH_OpenPipe>
}
 80078ca:	2000      	movs	r0, #0
 80078cc:	b007      	add	sp, #28
 80078ce:	bd30      	pop	{r4, r5, pc}
      status = USBH_HandleEnum(phost);
 80078d0:	4620      	mov	r0, r4
 80078d2:	f7ff fdca 	bl	800746a <USBH_HandleEnum>
 80078d6:	f88d 0017 	strb.w	r0, [sp, #23]
      if (status == USBH_OK)
 80078da:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d1f3      	bne.n	80078ca <USBH_Process+0x116>
        phost->device.current_interface = 0U;
 80078e2:	f884 3324 	strb.w	r3, [r4, #804]	; 0x324
        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80078e6:	f894 3337 	ldrb.w	r3, [r4, #823]	; 0x337
 80078ea:	2b01      	cmp	r3, #1
 80078ec:	d002      	beq.n	80078f4 <USBH_Process+0x140>
          phost->gState = HOST_INPUT;
 80078ee:	2307      	movs	r3, #7
 80078f0:	7023      	strb	r3, [r4, #0]
 80078f2:	e7ea      	b.n	80078ca <USBH_Process+0x116>
          phost->gState = HOST_SET_CONFIGURATION;
 80078f4:	2308      	movs	r3, #8
 80078f6:	7023      	strb	r3, [r4, #0]
 80078f8:	e7e7      	b.n	80078ca <USBH_Process+0x116>
      if (phost->pUser != NULL)
 80078fa:	f8d4 33d4 	ldr.w	r3, [r4, #980]	; 0x3d4
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d0e3      	beq.n	80078ca <USBH_Process+0x116>
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007902:	2101      	movs	r1, #1
 8007904:	4620      	mov	r0, r4
 8007906:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007908:	2308      	movs	r3, #8
 800790a:	7023      	strb	r3, [r4, #0]
 800790c:	e7dd      	b.n	80078ca <USBH_Process+0x116>
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800790e:	f894 133d 	ldrb.w	r1, [r4, #829]	; 0x33d
 8007912:	4620      	mov	r0, r4
 8007914:	f000 fb15 	bl	8007f42 <USBH_SetCfg>
 8007918:	2800      	cmp	r0, #0
 800791a:	d1d6      	bne.n	80078ca <USBH_Process+0x116>
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800791c:	2309      	movs	r3, #9
 800791e:	7023      	strb	r3, [r4, #0]
 8007920:	e7d3      	b.n	80078ca <USBH_Process+0x116>
      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8007922:	f894 333f 	ldrb.w	r3, [r4, #831]	; 0x33f
 8007926:	f013 0f20 	tst.w	r3, #32
 800792a:	d102      	bne.n	8007932 <USBH_Process+0x17e>
        phost->gState = HOST_CHECK_CLASS;
 800792c:	230a      	movs	r3, #10
 800792e:	7023      	strb	r3, [r4, #0]
 8007930:	e7cb      	b.n	80078ca <USBH_Process+0x116>
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8007932:	2101      	movs	r1, #1
 8007934:	4620      	mov	r0, r4
 8007936:	f000 fb15 	bl	8007f64 <USBH_SetFeature>
 800793a:	2800      	cmp	r0, #0
 800793c:	d1c5      	bne.n	80078ca <USBH_Process+0x116>
          phost->gState = HOST_CHECK_CLASS;
 800793e:	230a      	movs	r3, #10
 8007940:	7023      	strb	r3, [r4, #0]
 8007942:	e7c2      	b.n	80078ca <USBH_Process+0x116>
      if (phost->ClassNumber == 0U)
 8007944:	f8d4 3380 	ldr.w	r3, [r4, #896]	; 0x380
 8007948:	2b00      	cmp	r3, #0
 800794a:	d0be      	beq.n	80078ca <USBH_Process+0x116>
        phost->pActiveClass = NULL;
 800794c:	2300      	movs	r3, #0
 800794e:	f8c4 337c 	str.w	r3, [r4, #892]	; 0x37c
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007952:	b173      	cbz	r3, 8007972 <USBH_Process+0x1be>
        if (phost->pActiveClass != NULL)
 8007954:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 8007958:	b1eb      	cbz	r3, 8007996 <USBH_Process+0x1e2>
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800795a:	689b      	ldr	r3, [r3, #8]
 800795c:	4620      	mov	r0, r4
 800795e:	4798      	blx	r3
 8007960:	b9b0      	cbnz	r0, 8007990 <USBH_Process+0x1dc>
            phost->gState = HOST_CLASS_REQUEST;
 8007962:	2306      	movs	r3, #6
 8007964:	7023      	strb	r3, [r4, #0]
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007966:	f8d4 33d4 	ldr.w	r3, [r4, #980]	; 0x3d4
 800796a:	2103      	movs	r1, #3
 800796c:	4620      	mov	r0, r4
 800796e:	4798      	blx	r3
 8007970:	e7ab      	b.n	80078ca <USBH_Process+0x116>
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007972:	f103 02de 	add.w	r2, r3, #222	; 0xde
 8007976:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800797a:	7910      	ldrb	r0, [r2, #4]
 800797c:	f894 1347 	ldrb.w	r1, [r4, #839]	; 0x347
 8007980:	4288      	cmp	r0, r1
 8007982:	d002      	beq.n	800798a <USBH_Process+0x1d6>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007984:	3301      	adds	r3, #1
 8007986:	b2db      	uxtb	r3, r3
 8007988:	e7e3      	b.n	8007952 <USBH_Process+0x19e>
            phost->pActiveClass = phost->pClass[idx];
 800798a:	f8c4 237c 	str.w	r2, [r4, #892]	; 0x37c
            break;
 800798e:	e7e1      	b.n	8007954 <USBH_Process+0x1a0>
            phost->gState = HOST_ABORT_STATE;
 8007990:	230d      	movs	r3, #13
 8007992:	7023      	strb	r3, [r4, #0]
 8007994:	e799      	b.n	80078ca <USBH_Process+0x116>
          phost->gState = HOST_ABORT_STATE;
 8007996:	230d      	movs	r3, #13
 8007998:	7023      	strb	r3, [r4, #0]
 800799a:	e796      	b.n	80078ca <USBH_Process+0x116>
      if (phost->pActiveClass != NULL)
 800799c:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 80079a0:	b193      	cbz	r3, 80079c8 <USBH_Process+0x214>
        status = phost->pActiveClass->Requests(phost);
 80079a2:	691b      	ldr	r3, [r3, #16]
 80079a4:	4620      	mov	r0, r4
 80079a6:	4798      	blx	r3
 80079a8:	f88d 0017 	strb.w	r0, [sp, #23]
        if (status == USBH_OK)
 80079ac:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80079b0:	b913      	cbnz	r3, 80079b8 <USBH_Process+0x204>
          phost->gState = HOST_CLASS;
 80079b2:	230b      	movs	r3, #11
 80079b4:	7023      	strb	r3, [r4, #0]
 80079b6:	e788      	b.n	80078ca <USBH_Process+0x116>
        else if (status == USBH_FAIL)
 80079b8:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80079bc:	b2db      	uxtb	r3, r3
 80079be:	2b02      	cmp	r3, #2
 80079c0:	d183      	bne.n	80078ca <USBH_Process+0x116>
          phost->gState = HOST_ABORT_STATE;
 80079c2:	230d      	movs	r3, #13
 80079c4:	7023      	strb	r3, [r4, #0]
          USBH_ErrLog("Device not responding Please Unplug.");
 80079c6:	e780      	b.n	80078ca <USBH_Process+0x116>
        phost->gState = HOST_ABORT_STATE;
 80079c8:	230d      	movs	r3, #13
 80079ca:	7023      	strb	r3, [r4, #0]
 80079cc:	e77d      	b.n	80078ca <USBH_Process+0x116>
      if (phost->pActiveClass != NULL)
 80079ce:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	f43f af79 	beq.w	80078ca <USBH_Process+0x116>
        phost->pActiveClass->BgndProcess(phost);
 80079d8:	695b      	ldr	r3, [r3, #20]
 80079da:	4620      	mov	r0, r4
 80079dc:	4798      	blx	r3
 80079de:	e774      	b.n	80078ca <USBH_Process+0x116>
      phost->device.is_disconnected = 0U;
 80079e0:	2300      	movs	r3, #0
 80079e2:	f884 3321 	strb.w	r3, [r4, #801]	; 0x321
      DeInitStateMachine(phost);
 80079e6:	4620      	mov	r0, r4
 80079e8:	f7ff fd01 	bl	80073ee <DeInitStateMachine>
      if (phost->pActiveClass != NULL)
 80079ec:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 80079f0:	b12b      	cbz	r3, 80079fe <USBH_Process+0x24a>
        phost->pActiveClass->DeInit(phost);
 80079f2:	68db      	ldr	r3, [r3, #12]
 80079f4:	4620      	mov	r0, r4
 80079f6:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80079f8:	2300      	movs	r3, #0
 80079fa:	f8c4 337c 	str.w	r3, [r4, #892]	; 0x37c
      if (phost->pUser != NULL)
 80079fe:	f8d4 33d4 	ldr.w	r3, [r4, #980]	; 0x3d4
 8007a02:	b113      	cbz	r3, 8007a0a <USBH_Process+0x256>
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007a04:	2105      	movs	r1, #5
 8007a06:	4620      	mov	r0, r4
 8007a08:	4798      	blx	r3
      if (phost->device.is_ReEnumerated == 1U)
 8007a0a:	f894 3322 	ldrb.w	r3, [r4, #802]	; 0x322
 8007a0e:	b2db      	uxtb	r3, r3
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	d003      	beq.n	8007a1c <USBH_Process+0x268>
        USBH_LL_Start(phost);
 8007a14:	4620      	mov	r0, r4
 8007a16:	f000 fe3a 	bl	800868e <USBH_LL_Start>
 8007a1a:	e756      	b.n	80078ca <USBH_Process+0x116>
        phost->device.is_ReEnumerated = 0U;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	f884 3322 	strb.w	r3, [r4, #802]	; 0x322
        USBH_Start(phost);
 8007a22:	4620      	mov	r0, r4
 8007a24:	f7ff febc 	bl	80077a0 <USBH_Start>
 8007a28:	e74f      	b.n	80078ca <USBH_Process+0x116>

08007a2a <USBH_LL_SetTimer>:
  phost->Timer = time;
 8007a2a:	f8c0 13c4 	str.w	r1, [r0, #964]	; 0x3c4
}
 8007a2e:	4770      	bx	lr

08007a30 <USBH_LL_IncTimer>:
{
 8007a30:	b508      	push	{r3, lr}
  phost->Timer++;
 8007a32:	f8d0 23c4 	ldr.w	r2, [r0, #964]	; 0x3c4
 8007a36:	3201      	adds	r2, #1
 8007a38:	f8c0 23c4 	str.w	r2, [r0, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007a3c:	f7ff fd08 	bl	8007450 <USBH_HandleSof>
}
 8007a40:	bd08      	pop	{r3, pc}

08007a42 <USBH_LL_PortEnabled>:
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
  phost->device.PortEnabled = 1U;
 8007a42:	2301      	movs	r3, #1
 8007a44:	f880 3323 	strb.w	r3, [r0, #803]	; 0x323
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
}
 8007a48:	4770      	bx	lr

08007a4a <USBH_LL_PortDisabled>:
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
  phost->device.PortEnabled = 0U;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	f880 3323 	strb.w	r3, [r0, #803]	; 0x323

  return;
}
 8007a50:	4770      	bx	lr

08007a52 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007a52:	4603      	mov	r3, r0
  phost->device.is_connected = 1U;
 8007a54:	2201      	movs	r2, #1
 8007a56:	f880 2320 	strb.w	r2, [r0, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007a5a:	2000      	movs	r0, #0
 8007a5c:	f883 0321 	strb.w	r0, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007a60:	f883 0322 	strb.w	r0, [r3, #802]	; 0x322
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
}
 8007a64:	4770      	bx	lr

08007a66 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007a66:	b538      	push	{r3, r4, r5, lr}
 8007a68:	4604      	mov	r4, r0
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	f880 3321 	strb.w	r3, [r0, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007a70:	2500      	movs	r5, #0
 8007a72:	f880 5320 	strb.w	r5, [r0, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007a76:	f880 5323 	strb.w	r5, [r0, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8007a7a:	f000 fe10 	bl	800869e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8007a7e:	7921      	ldrb	r1, [r4, #4]
 8007a80:	4620      	mov	r0, r4
 8007a82:	f000 fb2a 	bl	80080da <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8007a86:	7961      	ldrb	r1, [r4, #5]
 8007a88:	4620      	mov	r0, r4
 8007a8a:	f000 fb26 	bl	80080da <USBH_FreePipe>
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
}
 8007a8e:	4628      	mov	r0, r5
 8007a90:	bd38      	pop	{r3, r4, r5, pc}

08007a92 <USBH_ParseDevDesc>:
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007a92:	780b      	ldrb	r3, [r1, #0]
 8007a94:	7003      	strb	r3, [r0, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007a96:	784b      	ldrb	r3, [r1, #1]
 8007a98:	7043      	strb	r3, [r0, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007a9a:	788b      	ldrb	r3, [r1, #2]
 8007a9c:	f891 c003 	ldrb.w	ip, [r1, #3]
 8007aa0:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8007aa4:	8043      	strh	r3, [r0, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007aa6:	790b      	ldrb	r3, [r1, #4]
 8007aa8:	7103      	strb	r3, [r0, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007aaa:	794b      	ldrb	r3, [r1, #5]
 8007aac:	7143      	strb	r3, [r0, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007aae:	798b      	ldrb	r3, [r1, #6]
 8007ab0:	7183      	strb	r3, [r0, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007ab2:	79cb      	ldrb	r3, [r1, #7]
 8007ab4:	71c3      	strb	r3, [r0, #7]

  if (length > 8U)
 8007ab6:	2a08      	cmp	r2, #8
 8007ab8:	d916      	bls.n	8007ae8 <USBH_ParseDevDesc+0x56>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007aba:	7a0b      	ldrb	r3, [r1, #8]
 8007abc:	7a4a      	ldrb	r2, [r1, #9]
 8007abe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007ac2:	8103      	strh	r3, [r0, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007ac4:	7a8b      	ldrb	r3, [r1, #10]
 8007ac6:	7aca      	ldrb	r2, [r1, #11]
 8007ac8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007acc:	8143      	strh	r3, [r0, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007ace:	7b0b      	ldrb	r3, [r1, #12]
 8007ad0:	7b4a      	ldrb	r2, [r1, #13]
 8007ad2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007ad6:	8183      	strh	r3, [r0, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007ad8:	7b8b      	ldrb	r3, [r1, #14]
 8007ada:	7383      	strb	r3, [r0, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007adc:	7bcb      	ldrb	r3, [r1, #15]
 8007ade:	73c3      	strb	r3, [r0, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007ae0:	7c0b      	ldrb	r3, [r1, #16]
 8007ae2:	7403      	strb	r3, [r0, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007ae4:	7c4b      	ldrb	r3, [r1, #17]
 8007ae6:	7443      	strb	r3, [r0, #17]
  }
}
 8007ae8:	4770      	bx	lr

08007aea <USBH_ParseInterfaceDesc>:
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007aea:	780b      	ldrb	r3, [r1, #0]
 8007aec:	7003      	strb	r3, [r0, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007aee:	784b      	ldrb	r3, [r1, #1]
 8007af0:	7043      	strb	r3, [r0, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007af2:	788b      	ldrb	r3, [r1, #2]
 8007af4:	7083      	strb	r3, [r0, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007af6:	78cb      	ldrb	r3, [r1, #3]
 8007af8:	70c3      	strb	r3, [r0, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007afa:	790b      	ldrb	r3, [r1, #4]
 8007afc:	7103      	strb	r3, [r0, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007afe:	794b      	ldrb	r3, [r1, #5]
 8007b00:	7143      	strb	r3, [r0, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007b02:	798b      	ldrb	r3, [r1, #6]
 8007b04:	7183      	strb	r3, [r0, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007b06:	79cb      	ldrb	r3, [r1, #7]
 8007b08:	71c3      	strb	r3, [r0, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007b0a:	7a0b      	ldrb	r3, [r1, #8]
 8007b0c:	7203      	strb	r3, [r0, #8]
}
 8007b0e:	4770      	bx	lr

08007b10 <USBH_ParseEPDesc>:
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007b10:	780b      	ldrb	r3, [r1, #0]
 8007b12:	7003      	strb	r3, [r0, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007b14:	784b      	ldrb	r3, [r1, #1]
 8007b16:	7043      	strb	r3, [r0, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007b18:	788b      	ldrb	r3, [r1, #2]
 8007b1a:	7083      	strb	r3, [r0, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007b1c:	78cb      	ldrb	r3, [r1, #3]
 8007b1e:	70c3      	strb	r3, [r0, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007b20:	790b      	ldrb	r3, [r1, #4]
 8007b22:	794a      	ldrb	r2, [r1, #5]
 8007b24:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007b28:	8083      	strh	r3, [r0, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007b2a:	798b      	ldrb	r3, [r1, #6]
 8007b2c:	7183      	strb	r3, [r0, #6]
}
 8007b2e:	4770      	bx	lr

08007b30 <USBH_ParseStringDesc>:
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007b30:	7843      	ldrb	r3, [r0, #1]
 8007b32:	2b03      	cmp	r3, #3
 8007b34:	d000      	beq.n	8007b38 <USBH_ParseStringDesc+0x8>
      *pdest =  psrc[idx];
      pdest++;
    }
    *pdest = 0U; /* mark end of string */
  }
}
 8007b36:	4770      	bx	lr
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007b38:	7803      	ldrb	r3, [r0, #0]
 8007b3a:	3b02      	subs	r3, #2
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	bf28      	it	cs
 8007b40:	461a      	movcs	r2, r3
 8007b42:	b292      	uxth	r2, r2
    for (idx = 0U; idx < strlength; idx += 2U)
 8007b44:	2300      	movs	r3, #0
 8007b46:	e007      	b.n	8007b58 <USBH_ParseStringDesc+0x28>
      *pdest =  psrc[idx];
 8007b48:	eb00 0c03 	add.w	ip, r0, r3
 8007b4c:	f89c c002 	ldrb.w	ip, [ip, #2]
 8007b50:	f801 cb01 	strb.w	ip, [r1], #1
    for (idx = 0U; idx < strlength; idx += 2U)
 8007b54:	3302      	adds	r3, #2
 8007b56:	b29b      	uxth	r3, r3
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d3f5      	bcc.n	8007b48 <USBH_ParseStringDesc+0x18>
    *pdest = 0U; /* mark end of string */
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	700b      	strb	r3, [r1, #0]
}
 8007b60:	e7e9      	b.n	8007b36 <USBH_ParseStringDesc+0x6>

08007b62 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007b62:	b530      	push	{r4, r5, lr}
 8007b64:	b083      	sub	sp, #12
 8007b66:	4604      	mov	r4, r0
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;

  switch (phost->Control.state)
 8007b68:	7e05      	ldrb	r5, [r0, #24]
 8007b6a:	1e6b      	subs	r3, r5, #1
 8007b6c:	2b0a      	cmp	r3, #10
 8007b6e:	f200 80de 	bhi.w	8007d2e <USBH_HandleControl+0x1cc>
 8007b72:	e8df f003 	tbb	[pc, r3]
 8007b76:	1006      	.short	0x1006
 8007b78:	61544135 	.word	0x61544135
 8007b7c:	aa9d8a7e 	.word	0xaa9d8a7e
 8007b80:	c1          	.byte	0xc1
 8007b81:	00          	.byte	0x00
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007b82:	7942      	ldrb	r2, [r0, #5]
 8007b84:	f100 0110 	add.w	r1, r0, #16
 8007b88:	f000 fa0f 	bl	8007faa <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007b8c:	2302      	movs	r3, #2
 8007b8e:	7623      	strb	r3, [r4, #24]
    default:
      break;
  }

  return status;
}
 8007b90:	4628      	mov	r0, r5
 8007b92:	b003      	add	sp, #12
 8007b94:	bd30      	pop	{r4, r5, pc}
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007b96:	7941      	ldrb	r1, [r0, #5]
 8007b98:	f000 fd2e 	bl	80085f8 <USBH_LL_GetURBState>
 8007b9c:	4605      	mov	r5, r0
      if (URB_Status == USBH_URB_DONE)
 8007b9e:	2801      	cmp	r0, #1
 8007ba0:	d005      	beq.n	8007bae <USBH_HandleControl+0x4c>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007ba2:	2804      	cmp	r0, #4
 8007ba4:	d018      	beq.n	8007bd8 <USBH_HandleControl+0x76>
 8007ba6:	2802      	cmp	r0, #2
 8007ba8:	d016      	beq.n	8007bd8 <USBH_HandleControl+0x76>
  USBH_StatusTypeDef status = USBH_BUSY;
 8007baa:	2501      	movs	r5, #1
 8007bac:	e7f0      	b.n	8007b90 <USBH_HandleControl+0x2e>
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007bae:	7c23      	ldrb	r3, [r4, #16]
        if (phost->Control.setup.b.wLength.w != 0U)
 8007bb0:	8ae2      	ldrh	r2, [r4, #22]
 8007bb2:	b142      	cbz	r2, 8007bc6 <USBH_HandleControl+0x64>
          if (direction == USB_D2H)
 8007bb4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007bb8:	d102      	bne.n	8007bc0 <USBH_HandleControl+0x5e>
            phost->Control.state = CTRL_DATA_OUT;
 8007bba:	2305      	movs	r3, #5
 8007bbc:	7623      	strb	r3, [r4, #24]
 8007bbe:	e7e7      	b.n	8007b90 <USBH_HandleControl+0x2e>
            phost->Control.state = CTRL_DATA_IN;
 8007bc0:	2303      	movs	r3, #3
 8007bc2:	7623      	strb	r3, [r4, #24]
 8007bc4:	e7e4      	b.n	8007b90 <USBH_HandleControl+0x2e>
          if (direction == USB_D2H)
 8007bc6:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007bca:	d102      	bne.n	8007bd2 <USBH_HandleControl+0x70>
            phost->Control.state = CTRL_STATUS_IN;
 8007bcc:	2307      	movs	r3, #7
 8007bce:	7623      	strb	r3, [r4, #24]
 8007bd0:	e7de      	b.n	8007b90 <USBH_HandleControl+0x2e>
            phost->Control.state = CTRL_STATUS_OUT;
 8007bd2:	2309      	movs	r3, #9
 8007bd4:	7623      	strb	r3, [r4, #24]
 8007bd6:	e7db      	b.n	8007b90 <USBH_HandleControl+0x2e>
          phost->Control.state = CTRL_ERROR;
 8007bd8:	230b      	movs	r3, #11
 8007bda:	7623      	strb	r3, [r4, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007bdc:	2501      	movs	r5, #1
 8007bde:	e7d7      	b.n	8007b90 <USBH_HandleControl+0x2e>
      phost->Control.timer = (uint16_t)phost->Timer;
 8007be0:	f8d0 33c4 	ldr.w	r3, [r0, #964]	; 0x3c4
 8007be4:	81c3      	strh	r3, [r0, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8007be6:	7903      	ldrb	r3, [r0, #4]
 8007be8:	8982      	ldrh	r2, [r0, #12]
 8007bea:	6881      	ldr	r1, [r0, #8]
 8007bec:	f000 fa04 	bl	8007ff8 <USBH_CtlReceiveData>
      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007bf0:	2304      	movs	r3, #4
 8007bf2:	7623      	strb	r3, [r4, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007bf4:	2501      	movs	r5, #1
      break;
 8007bf6:	e7cb      	b.n	8007b90 <USBH_HandleControl+0x2e>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007bf8:	7901      	ldrb	r1, [r0, #4]
 8007bfa:	f000 fcfd 	bl	80085f8 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8007bfe:	2801      	cmp	r0, #1
 8007c00:	d006      	beq.n	8007c10 <USBH_HandleControl+0xae>
      if (URB_Status == USBH_URB_STALL)
 8007c02:	2805      	cmp	r0, #5
 8007c04:	f000 8095 	beq.w	8007d32 <USBH_HandleControl+0x1d0>
        if (URB_Status == USBH_URB_ERROR)
 8007c08:	2804      	cmp	r0, #4
 8007c0a:	d004      	beq.n	8007c16 <USBH_HandleControl+0xb4>
  USBH_StatusTypeDef status = USBH_BUSY;
 8007c0c:	2501      	movs	r5, #1
 8007c0e:	e7bf      	b.n	8007b90 <USBH_HandleControl+0x2e>
        phost->Control.state = CTRL_STATUS_OUT;
 8007c10:	2309      	movs	r3, #9
 8007c12:	7623      	strb	r3, [r4, #24]
 8007c14:	e7f5      	b.n	8007c02 <USBH_HandleControl+0xa0>
          phost->Control.state = CTRL_ERROR;
 8007c16:	230b      	movs	r3, #11
 8007c18:	7623      	strb	r3, [r4, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007c1a:	2501      	movs	r5, #1
 8007c1c:	e7b8      	b.n	8007b90 <USBH_HandleControl+0x2e>
      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007c1e:	2501      	movs	r5, #1
 8007c20:	9500      	str	r5, [sp, #0]
 8007c22:	7943      	ldrb	r3, [r0, #5]
 8007c24:	8982      	ldrh	r2, [r0, #12]
 8007c26:	6881      	ldr	r1, [r0, #8]
 8007c28:	f000 f9d0 	bl	8007fcc <USBH_CtlSendData>
      phost->Control.timer = (uint16_t)phost->Timer;
 8007c2c:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 8007c30:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007c32:	2306      	movs	r3, #6
 8007c34:	7623      	strb	r3, [r4, #24]
      break;
 8007c36:	e7ab      	b.n	8007b90 <USBH_HandleControl+0x2e>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007c38:	7941      	ldrb	r1, [r0, #5]
 8007c3a:	f000 fcdd 	bl	80085f8 <USBH_LL_GetURBState>
 8007c3e:	4605      	mov	r5, r0
      if (URB_Status == USBH_URB_DONE)
 8007c40:	2801      	cmp	r0, #1
 8007c42:	d007      	beq.n	8007c54 <USBH_HandleControl+0xf2>
      else if (URB_Status == USBH_URB_STALL)
 8007c44:	2805      	cmp	r0, #5
 8007c46:	d008      	beq.n	8007c5a <USBH_HandleControl+0xf8>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007c48:	2802      	cmp	r0, #2
 8007c4a:	d00a      	beq.n	8007c62 <USBH_HandleControl+0x100>
        if (URB_Status == USBH_URB_ERROR)
 8007c4c:	2804      	cmp	r0, #4
 8007c4e:	d00c      	beq.n	8007c6a <USBH_HandleControl+0x108>
  USBH_StatusTypeDef status = USBH_BUSY;
 8007c50:	2501      	movs	r5, #1
 8007c52:	e79d      	b.n	8007b90 <USBH_HandleControl+0x2e>
        phost->Control.state = CTRL_STATUS_IN;
 8007c54:	2307      	movs	r3, #7
 8007c56:	7623      	strb	r3, [r4, #24]
 8007c58:	e79a      	b.n	8007b90 <USBH_HandleControl+0x2e>
        phost->Control.state = CTRL_STALLED;
 8007c5a:	230c      	movs	r3, #12
 8007c5c:	7623      	strb	r3, [r4, #24]
        status = USBH_NOT_SUPPORTED;
 8007c5e:	2503      	movs	r5, #3
 8007c60:	e796      	b.n	8007b90 <USBH_HandleControl+0x2e>
        phost->Control.state = CTRL_DATA_OUT;
 8007c62:	2305      	movs	r3, #5
 8007c64:	7623      	strb	r3, [r4, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007c66:	2501      	movs	r5, #1
 8007c68:	e792      	b.n	8007b90 <USBH_HandleControl+0x2e>
          phost->Control.state = CTRL_ERROR;
 8007c6a:	230b      	movs	r3, #11
 8007c6c:	7623      	strb	r3, [r4, #24]
          status = USBH_FAIL;
 8007c6e:	2502      	movs	r5, #2
 8007c70:	e78e      	b.n	8007b90 <USBH_HandleControl+0x2e>
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8007c72:	7903      	ldrb	r3, [r0, #4]
 8007c74:	2200      	movs	r2, #0
 8007c76:	4611      	mov	r1, r2
 8007c78:	f000 f9be 	bl	8007ff8 <USBH_CtlReceiveData>
      phost->Control.timer = (uint16_t)phost->Timer;
 8007c7c:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 8007c80:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007c82:	2308      	movs	r3, #8
 8007c84:	7623      	strb	r3, [r4, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007c86:	2501      	movs	r5, #1
      break;
 8007c88:	e782      	b.n	8007b90 <USBH_HandleControl+0x2e>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007c8a:	7901      	ldrb	r1, [r0, #4]
 8007c8c:	f000 fcb4 	bl	80085f8 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8007c90:	2801      	cmp	r0, #1
 8007c92:	d005      	beq.n	8007ca0 <USBH_HandleControl+0x13e>
      else if (URB_Status == USBH_URB_ERROR)
 8007c94:	2804      	cmp	r0, #4
 8007c96:	d007      	beq.n	8007ca8 <USBH_HandleControl+0x146>
        if (URB_Status == USBH_URB_STALL)
 8007c98:	2805      	cmp	r0, #5
 8007c9a:	d04c      	beq.n	8007d36 <USBH_HandleControl+0x1d4>
  USBH_StatusTypeDef status = USBH_BUSY;
 8007c9c:	2501      	movs	r5, #1
 8007c9e:	e777      	b.n	8007b90 <USBH_HandleControl+0x2e>
        phost->Control.state = CTRL_COMPLETE;
 8007ca0:	230d      	movs	r3, #13
 8007ca2:	7623      	strb	r3, [r4, #24]
        status = USBH_OK;
 8007ca4:	2500      	movs	r5, #0
 8007ca6:	e773      	b.n	8007b90 <USBH_HandleControl+0x2e>
        phost->Control.state = CTRL_ERROR;
 8007ca8:	230b      	movs	r3, #11
 8007caa:	7623      	strb	r3, [r4, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007cac:	2501      	movs	r5, #1
 8007cae:	e76f      	b.n	8007b90 <USBH_HandleControl+0x2e>
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8007cb0:	2501      	movs	r5, #1
 8007cb2:	9500      	str	r5, [sp, #0]
 8007cb4:	7943      	ldrb	r3, [r0, #5]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	4611      	mov	r1, r2
 8007cba:	f000 f987 	bl	8007fcc <USBH_CtlSendData>
      phost->Control.timer = (uint16_t)phost->Timer;
 8007cbe:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 8007cc2:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007cc4:	230a      	movs	r3, #10
 8007cc6:	7623      	strb	r3, [r4, #24]
      break;
 8007cc8:	e762      	b.n	8007b90 <USBH_HandleControl+0x2e>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007cca:	7941      	ldrb	r1, [r0, #5]
 8007ccc:	f000 fc94 	bl	80085f8 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8007cd0:	2801      	cmp	r0, #1
 8007cd2:	d005      	beq.n	8007ce0 <USBH_HandleControl+0x17e>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007cd4:	2802      	cmp	r0, #2
 8007cd6:	d007      	beq.n	8007ce8 <USBH_HandleControl+0x186>
        if (URB_Status == USBH_URB_ERROR)
 8007cd8:	2804      	cmp	r0, #4
 8007cda:	d009      	beq.n	8007cf0 <USBH_HandleControl+0x18e>
  USBH_StatusTypeDef status = USBH_BUSY;
 8007cdc:	2501      	movs	r5, #1
 8007cde:	e757      	b.n	8007b90 <USBH_HandleControl+0x2e>
        phost->Control.state = CTRL_COMPLETE;
 8007ce0:	230d      	movs	r3, #13
 8007ce2:	7623      	strb	r3, [r4, #24]
        status = USBH_OK;
 8007ce4:	2500      	movs	r5, #0
 8007ce6:	e753      	b.n	8007b90 <USBH_HandleControl+0x2e>
        phost->Control.state = CTRL_STATUS_OUT;
 8007ce8:	2309      	movs	r3, #9
 8007cea:	7623      	strb	r3, [r4, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007cec:	2501      	movs	r5, #1
 8007cee:	e74f      	b.n	8007b90 <USBH_HandleControl+0x2e>
          phost->Control.state = CTRL_ERROR;
 8007cf0:	230b      	movs	r3, #11
 8007cf2:	7623      	strb	r3, [r4, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007cf4:	2501      	movs	r5, #1
 8007cf6:	e74b      	b.n	8007b90 <USBH_HandleControl+0x2e>
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007cf8:	7e43      	ldrb	r3, [r0, #25]
 8007cfa:	3301      	adds	r3, #1
 8007cfc:	b2db      	uxtb	r3, r3
 8007cfe:	7643      	strb	r3, [r0, #25]
 8007d00:	2b02      	cmp	r3, #2
 8007d02:	d803      	bhi.n	8007d0c <USBH_HandleControl+0x1aa>
        phost->Control.state = CTRL_SETUP;
 8007d04:	2501      	movs	r5, #1
 8007d06:	7605      	strb	r5, [r0, #24]
        phost->RequestState = CMD_SEND;
 8007d08:	7085      	strb	r5, [r0, #2]
 8007d0a:	e741      	b.n	8007b90 <USBH_HandleControl+0x2e>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007d0c:	f8d0 33d4 	ldr.w	r3, [r0, #980]	; 0x3d4
 8007d10:	2106      	movs	r1, #6
 8007d12:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007d14:	2500      	movs	r5, #0
 8007d16:	7665      	strb	r5, [r4, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8007d18:	7961      	ldrb	r1, [r4, #5]
 8007d1a:	4620      	mov	r0, r4
 8007d1c:	f000 f9dd 	bl	80080da <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8007d20:	7921      	ldrb	r1, [r4, #4]
 8007d22:	4620      	mov	r0, r4
 8007d24:	f000 f9d9 	bl	80080da <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007d28:	7025      	strb	r5, [r4, #0]
        status = USBH_FAIL;
 8007d2a:	2502      	movs	r5, #2
 8007d2c:	e730      	b.n	8007b90 <USBH_HandleControl+0x2e>
  switch (phost->Control.state)
 8007d2e:	2501      	movs	r5, #1
 8007d30:	e72e      	b.n	8007b90 <USBH_HandleControl+0x2e>
        status = USBH_NOT_SUPPORTED;
 8007d32:	2503      	movs	r5, #3
 8007d34:	e72c      	b.n	8007b90 <USBH_HandleControl+0x2e>
          status = USBH_NOT_SUPPORTED;
 8007d36:	2503      	movs	r5, #3
 8007d38:	e72a      	b.n	8007b90 <USBH_HandleControl+0x2e>

08007d3a <USBH_GetNextDesc>:
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007d3a:	7803      	ldrb	r3, [r0, #0]
 8007d3c:	880a      	ldrh	r2, [r1, #0]
 8007d3e:	4413      	add	r3, r2
 8007d40:	800b      	strh	r3, [r1, #0]
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007d42:	7803      	ldrb	r3, [r0, #0]
}
 8007d44:	4418      	add	r0, r3
 8007d46:	4770      	bx	lr

08007d48 <USBH_ParseCfgDesc>:
{
 8007d48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d4c:	b082      	sub	sp, #8
 8007d4e:	460c      	mov	r4, r1
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007d50:	780b      	ldrb	r3, [r1, #0]
 8007d52:	7003      	strb	r3, [r0, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007d54:	784b      	ldrb	r3, [r1, #1]
 8007d56:	7043      	strb	r3, [r0, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8007d58:	788b      	ldrb	r3, [r1, #2]
 8007d5a:	78c9      	ldrb	r1, [r1, #3]
 8007d5c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007d60:	8043      	strh	r3, [r0, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007d62:	7923      	ldrb	r3, [r4, #4]
 8007d64:	7103      	strb	r3, [r0, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007d66:	7963      	ldrb	r3, [r4, #5]
 8007d68:	7143      	strb	r3, [r0, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007d6a:	79a3      	ldrb	r3, [r4, #6]
 8007d6c:	7183      	strb	r3, [r0, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007d6e:	79e3      	ldrb	r3, [r4, #7]
 8007d70:	71c3      	strb	r3, [r0, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007d72:	7a23      	ldrb	r3, [r4, #8]
 8007d74:	7203      	strb	r3, [r0, #8]
  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007d76:	2a09      	cmp	r2, #9
 8007d78:	d944      	bls.n	8007e04 <USBH_ParseCfgDesc+0xbc>
 8007d7a:	4605      	mov	r5, r0
    ptr = USB_LEN_CFG_DESC;
 8007d7c:	2309      	movs	r3, #9
 8007d7e:	f8ad 3006 	strh.w	r3, [sp, #6]
  uint8_t                      if_ix = 0U;
 8007d82:	2600      	movs	r6, #0
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007d84:	2e01      	cmp	r6, #1
 8007d86:	d83d      	bhi.n	8007e04 <USBH_ParseCfgDesc+0xbc>
 8007d88:	886a      	ldrh	r2, [r5, #2]
 8007d8a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8007d8e:	429a      	cmp	r2, r3
 8007d90:	d938      	bls.n	8007e04 <USBH_ParseCfgDesc+0xbc>
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007d92:	f10d 0106 	add.w	r1, sp, #6
 8007d96:	4620      	mov	r0, r4
 8007d98:	f7ff ffcf 	bl	8007d3a <USBH_GetNextDesc>
 8007d9c:	4604      	mov	r4, r0
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8007d9e:	7843      	ldrb	r3, [r0, #1]
 8007da0:	2b04      	cmp	r3, #4
 8007da2:	d1ef      	bne.n	8007d84 <USBH_ParseCfgDesc+0x3c>
        pif = &cfg_desc->Itf_Desc[if_ix];
 8007da4:	46b0      	mov	r8, r6
 8007da6:	201a      	movs	r0, #26
 8007da8:	fb06 f000 	mul.w	r0, r6, r0
 8007dac:	3008      	adds	r0, #8
 8007dae:	4428      	add	r0, r5
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007db0:	4621      	mov	r1, r4
 8007db2:	3002      	adds	r0, #2
 8007db4:	f7ff fe99 	bl	8007aea <USBH_ParseInterfaceDesc>
        ep_ix = 0U;
 8007db8:	2700      	movs	r7, #0
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007dba:	231a      	movs	r3, #26
 8007dbc:	fb03 5308 	mla	r3, r3, r8, r5
 8007dc0:	7b9b      	ldrb	r3, [r3, #14]
 8007dc2:	42bb      	cmp	r3, r7
 8007dc4:	d91b      	bls.n	8007dfe <USBH_ParseCfgDesc+0xb6>
 8007dc6:	886a      	ldrh	r2, [r5, #2]
 8007dc8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8007dcc:	429a      	cmp	r2, r3
 8007dce:	d916      	bls.n	8007dfe <USBH_ParseCfgDesc+0xb6>
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007dd0:	f10d 0106 	add.w	r1, sp, #6
 8007dd4:	4620      	mov	r0, r4
 8007dd6:	f7ff ffb0 	bl	8007d3a <USBH_GetNextDesc>
 8007dda:	4604      	mov	r4, r0
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8007ddc:	7843      	ldrb	r3, [r0, #1]
 8007dde:	2b05      	cmp	r3, #5
 8007de0:	d1eb      	bne.n	8007dba <USBH_ParseCfgDesc+0x72>
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007de2:	3701      	adds	r7, #1
 8007de4:	201a      	movs	r0, #26
 8007de6:	fb00 f008 	mul.w	r0, r0, r8
 8007dea:	eb00 00c7 	add.w	r0, r0, r7, lsl #3
 8007dee:	3008      	adds	r0, #8
 8007df0:	4428      	add	r0, r5
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8007df2:	4621      	mov	r1, r4
 8007df4:	3004      	adds	r0, #4
 8007df6:	f7ff fe8b 	bl	8007b10 <USBH_ParseEPDesc>
            ep_ix++;
 8007dfa:	b2ff      	uxtb	r7, r7
 8007dfc:	e7dd      	b.n	8007dba <USBH_ParseCfgDesc+0x72>
        if_ix++;
 8007dfe:	3601      	adds	r6, #1
 8007e00:	b2f6      	uxtb	r6, r6
 8007e02:	e7bf      	b.n	8007d84 <USBH_ParseCfgDesc+0x3c>
}
 8007e04:	b002      	add	sp, #8
 8007e06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007e0a <USBH_CtlReq>:
{
 8007e0a:	b510      	push	{r4, lr}
 8007e0c:	4604      	mov	r4, r0
  switch (phost->RequestState)
 8007e0e:	7880      	ldrb	r0, [r0, #2]
 8007e10:	2801      	cmp	r0, #1
 8007e12:	d003      	beq.n	8007e1c <USBH_CtlReq+0x12>
 8007e14:	2802      	cmp	r0, #2
 8007e16:	d008      	beq.n	8007e2a <USBH_CtlReq+0x20>
 8007e18:	2001      	movs	r0, #1
}
 8007e1a:	bd10      	pop	{r4, pc}
      phost->Control.buff = buff;
 8007e1c:	60a1      	str	r1, [r4, #8]
      phost->Control.length = length;
 8007e1e:	81a2      	strh	r2, [r4, #12]
      phost->Control.state = CTRL_SETUP;
 8007e20:	2301      	movs	r3, #1
 8007e22:	7623      	strb	r3, [r4, #24]
      phost->RequestState = CMD_WAIT;
 8007e24:	2302      	movs	r3, #2
 8007e26:	70a3      	strb	r3, [r4, #2]
      break;
 8007e28:	e7f7      	b.n	8007e1a <USBH_CtlReq+0x10>
      status = USBH_HandleControl(phost);
 8007e2a:	4620      	mov	r0, r4
 8007e2c:	f7ff fe99 	bl	8007b62 <USBH_HandleControl>
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007e30:	b130      	cbz	r0, 8007e40 <USBH_CtlReq+0x36>
 8007e32:	2803      	cmp	r0, #3
 8007e34:	d004      	beq.n	8007e40 <USBH_CtlReq+0x36>
      else if (status == USBH_FAIL)
 8007e36:	2802      	cmp	r0, #2
 8007e38:	d1ef      	bne.n	8007e1a <USBH_CtlReq+0x10>
        phost->RequestState = CMD_SEND;
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	70a3      	strb	r3, [r4, #2]
 8007e3e:	e7ec      	b.n	8007e1a <USBH_CtlReq+0x10>
        phost->RequestState = CMD_SEND;
 8007e40:	2301      	movs	r3, #1
 8007e42:	70a3      	strb	r3, [r4, #2]
        phost->Control.state = CTRL_IDLE;
 8007e44:	2300      	movs	r3, #0
 8007e46:	7623      	strb	r3, [r4, #24]
 8007e48:	e7e7      	b.n	8007e1a <USBH_CtlReq+0x10>

08007e4a <USBH_GetDescriptor>:
{
 8007e4a:	b508      	push	{r3, lr}
 8007e4c:	468e      	mov	lr, r1
 8007e4e:	4694      	mov	ip, r2
 8007e50:	4619      	mov	r1, r3
 8007e52:	f8bd 2008 	ldrh.w	r2, [sp, #8]
  if (phost->RequestState == CMD_SEND)
 8007e56:	7883      	ldrb	r3, [r0, #2]
 8007e58:	2b01      	cmp	r3, #1
 8007e5a:	d002      	beq.n	8007e62 <USBH_GetDescriptor+0x18>
  return USBH_CtlReq(phost, buff, length);
 8007e5c:	f7ff ffd5 	bl	8007e0a <USBH_CtlReq>
}
 8007e60:	bd08      	pop	{r3, pc}
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007e62:	f06e 0e7f 	orn	lr, lr, #127	; 0x7f
 8007e66:	f880 e010 	strb.w	lr, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007e6a:	2306      	movs	r3, #6
 8007e6c:	7443      	strb	r3, [r0, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007e6e:	f8a0 c012 	strh.w	ip, [r0, #18]
    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007e72:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8007e76:	f5bc 7f40 	cmp.w	ip, #768	; 0x300
 8007e7a:	d003      	beq.n	8007e84 <USBH_GetDescriptor+0x3a>
      phost->Control.setup.b.wIndex.w = 0U;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = length;
 8007e80:	82c2      	strh	r2, [r0, #22]
 8007e82:	e7eb      	b.n	8007e5c <USBH_GetDescriptor+0x12>
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007e84:	f240 4309 	movw	r3, #1033	; 0x409
 8007e88:	8283      	strh	r3, [r0, #20]
 8007e8a:	e7f9      	b.n	8007e80 <USBH_GetDescriptor+0x36>

08007e8c <USBH_Get_DevDesc>:
{
 8007e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e8e:	b083      	sub	sp, #12
 8007e90:	4604      	mov	r4, r0
                                   USB_DESC_DEVICE, phost->device.Data,
 8007e92:	f500 768e 	add.w	r6, r0, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007e96:	460d      	mov	r5, r1
 8007e98:	9100      	str	r1, [sp, #0]
 8007e9a:	4633      	mov	r3, r6
 8007e9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007ea0:	2100      	movs	r1, #0
 8007ea2:	f7ff ffd2 	bl	8007e4a <USBH_GetDescriptor>
 8007ea6:	4607      	mov	r7, r0
 8007ea8:	b110      	cbz	r0, 8007eb0 <USBH_Get_DevDesc+0x24>
}
 8007eaa:	4638      	mov	r0, r7
 8007eac:	b003      	add	sp, #12
 8007eae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007eb0:	462a      	mov	r2, r5
 8007eb2:	4631      	mov	r1, r6
 8007eb4:	f204 3026 	addw	r0, r4, #806	; 0x326
 8007eb8:	f7ff fdeb 	bl	8007a92 <USBH_ParseDevDesc>
 8007ebc:	e7f5      	b.n	8007eaa <USBH_Get_DevDesc+0x1e>

08007ebe <USBH_Get_CfgDesc>:
{
 8007ebe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ec0:	b083      	sub	sp, #12
 8007ec2:	4604      	mov	r4, r0
 8007ec4:	460d      	mov	r5, r1
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8007ec6:	f100 061c 	add.w	r6, r0, #28
  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007eca:	9100      	str	r1, [sp, #0]
 8007ecc:	4633      	mov	r3, r6
 8007ece:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ed2:	2100      	movs	r1, #0
 8007ed4:	f7ff ffb9 	bl	8007e4a <USBH_GetDescriptor>
 8007ed8:	4607      	mov	r7, r0
 8007eda:	b110      	cbz	r0, 8007ee2 <USBH_Get_CfgDesc+0x24>
}
 8007edc:	4638      	mov	r0, r7
 8007ede:	b003      	add	sp, #12
 8007ee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8007ee2:	462a      	mov	r2, r5
 8007ee4:	4631      	mov	r1, r6
 8007ee6:	f504 704e 	add.w	r0, r4, #824	; 0x338
 8007eea:	f7ff ff2d 	bl	8007d48 <USBH_ParseCfgDesc>
 8007eee:	e7f5      	b.n	8007edc <USBH_Get_CfgDesc+0x1e>

08007ef0 <USBH_Get_StringDesc>:
{
 8007ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ef2:	b083      	sub	sp, #12
 8007ef4:	4616      	mov	r6, r2
 8007ef6:	461d      	mov	r5, r3
                                   phost->device.Data, length)) == USBH_OK)
 8007ef8:	f500 748e 	add.w	r4, r0, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007efc:	9300      	str	r3, [sp, #0]
 8007efe:	4623      	mov	r3, r4
 8007f00:	f441 7240 	orr.w	r2, r1, #768	; 0x300
 8007f04:	2100      	movs	r1, #0
 8007f06:	f7ff ffa0 	bl	8007e4a <USBH_GetDescriptor>
 8007f0a:	4607      	mov	r7, r0
 8007f0c:	b110      	cbz	r0, 8007f14 <USBH_Get_StringDesc+0x24>
}
 8007f0e:	4638      	mov	r0, r7
 8007f10:	b003      	add	sp, #12
 8007f12:	bdf0      	pop	{r4, r5, r6, r7, pc}
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007f14:	462a      	mov	r2, r5
 8007f16:	4631      	mov	r1, r6
 8007f18:	4620      	mov	r0, r4
 8007f1a:	f7ff fe09 	bl	8007b30 <USBH_ParseStringDesc>
 8007f1e:	e7f6      	b.n	8007f0e <USBH_Get_StringDesc+0x1e>

08007f20 <USBH_SetAddress>:
{
 8007f20:	b508      	push	{r3, lr}
  if (phost->RequestState == CMD_SEND)
 8007f22:	7883      	ldrb	r3, [r0, #2]
 8007f24:	2b01      	cmp	r3, #1
 8007f26:	d004      	beq.n	8007f32 <USBH_SetAddress+0x12>
  return USBH_CtlReq(phost, 0U, 0U);
 8007f28:	2200      	movs	r2, #0
 8007f2a:	4611      	mov	r1, r2
 8007f2c:	f7ff ff6d 	bl	8007e0a <USBH_CtlReq>
}
 8007f30:	bd08      	pop	{r3, pc}
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007f32:	2300      	movs	r3, #0
 8007f34:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007f36:	2205      	movs	r2, #5
 8007f38:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007f3a:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007f3c:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007f3e:	82c3      	strh	r3, [r0, #22]
 8007f40:	e7f2      	b.n	8007f28 <USBH_SetAddress+0x8>

08007f42 <USBH_SetCfg>:
{
 8007f42:	b508      	push	{r3, lr}
  if (phost->RequestState == CMD_SEND)
 8007f44:	7883      	ldrb	r3, [r0, #2]
 8007f46:	2b01      	cmp	r3, #1
 8007f48:	d004      	beq.n	8007f54 <USBH_SetCfg+0x12>
  return USBH_CtlReq(phost, 0U, 0U);
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	4611      	mov	r1, r2
 8007f4e:	f7ff ff5c 	bl	8007e0a <USBH_CtlReq>
}
 8007f52:	bd08      	pop	{r3, pc}
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007f54:	2300      	movs	r3, #0
 8007f56:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007f58:	2209      	movs	r2, #9
 8007f5a:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007f5c:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007f5e:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007f60:	82c3      	strh	r3, [r0, #22]
 8007f62:	e7f2      	b.n	8007f4a <USBH_SetCfg+0x8>

08007f64 <USBH_SetFeature>:
{
 8007f64:	b508      	push	{r3, lr}
  if (phost->RequestState == CMD_SEND)
 8007f66:	7883      	ldrb	r3, [r0, #2]
 8007f68:	2b01      	cmp	r3, #1
 8007f6a:	d004      	beq.n	8007f76 <USBH_SetFeature+0x12>
  return USBH_CtlReq(phost, 0U, 0U);
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	4611      	mov	r1, r2
 8007f70:	f7ff ff4b 	bl	8007e0a <USBH_CtlReq>
}
 8007f74:	bd08      	pop	{r3, pc}
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007f76:	2300      	movs	r3, #0
 8007f78:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007f7a:	2203      	movs	r2, #3
 8007f7c:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007f7e:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007f80:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007f82:	82c3      	strh	r3, [r0, #22]
 8007f84:	e7f2      	b.n	8007f6c <USBH_SetFeature+0x8>

08007f86 <USBH_ClrFeature>:
{
 8007f86:	b508      	push	{r3, lr}
  if (phost->RequestState == CMD_SEND)
 8007f88:	7883      	ldrb	r3, [r0, #2]
 8007f8a:	2b01      	cmp	r3, #1
 8007f8c:	d004      	beq.n	8007f98 <USBH_ClrFeature+0x12>
  return USBH_CtlReq(phost, 0U, 0U);
 8007f8e:	2200      	movs	r2, #0
 8007f90:	4611      	mov	r1, r2
 8007f92:	f7ff ff3a 	bl	8007e0a <USBH_CtlReq>
}
 8007f96:	bd08      	pop	{r3, pc}
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007f98:	2302      	movs	r3, #2
 8007f9a:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	7443      	strb	r3, [r0, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	8243      	strh	r3, [r0, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007fa4:	8281      	strh	r1, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007fa6:	82c3      	strh	r3, [r0, #22]
 8007fa8:	e7f1      	b.n	8007f8e <USBH_ClrFeature+0x8>

08007faa <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007faa:	b510      	push	{r4, lr}
 8007fac:	b084      	sub	sp, #16
 8007fae:	460b      	mov	r3, r1
 8007fb0:	4611      	mov	r1, r2

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007fb2:	2400      	movs	r4, #0
 8007fb4:	9403      	str	r4, [sp, #12]
 8007fb6:	2208      	movs	r2, #8
 8007fb8:	9202      	str	r2, [sp, #8]
 8007fba:	9301      	str	r3, [sp, #4]
 8007fbc:	9400      	str	r4, [sp, #0]
 8007fbe:	4623      	mov	r3, r4
 8007fc0:	4622      	mov	r2, r4
 8007fc2:	f000 fb97 	bl	80086f4 <USBH_LL_SubmitURB>
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
}
 8007fc6:	4620      	mov	r0, r4
 8007fc8:	b004      	add	sp, #16
 8007fca:	bd10      	pop	{r4, pc}

08007fcc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007fcc:	b530      	push	{r4, r5, lr}
 8007fce:	b085      	sub	sp, #20
 8007fd0:	460c      	mov	r4, r1
 8007fd2:	4619      	mov	r1, r3
 8007fd4:	f89d 3020 	ldrb.w	r3, [sp, #32]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007fd8:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
 8007fdc:	b105      	cbz	r5, 8007fe0 <USBH_CtlSendData+0x14>
  {
    do_ping = 0U;
 8007fde:	2300      	movs	r3, #0
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007fe0:	9303      	str	r3, [sp, #12]
 8007fe2:	9202      	str	r2, [sp, #8]
 8007fe4:	9401      	str	r4, [sp, #4]
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	9300      	str	r3, [sp, #0]
 8007fea:	2300      	movs	r3, #0
 8007fec:	461a      	mov	r2, r3
 8007fee:	f000 fb81 	bl	80086f4 <USBH_LL_SubmitURB>
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
}
 8007ff2:	2000      	movs	r0, #0
 8007ff4:	b005      	add	sp, #20
 8007ff6:	bd30      	pop	{r4, r5, pc}

08007ff8 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007ff8:	b530      	push	{r4, r5, lr}
 8007ffa:	b085      	sub	sp, #20
 8007ffc:	460d      	mov	r5, r1
 8007ffe:	4619      	mov	r1, r3
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008000:	2400      	movs	r4, #0
 8008002:	9403      	str	r4, [sp, #12]
 8008004:	9202      	str	r2, [sp, #8]
 8008006:	9501      	str	r5, [sp, #4]
 8008008:	2201      	movs	r2, #1
 800800a:	9200      	str	r2, [sp, #0]
 800800c:	4623      	mov	r3, r4
 800800e:	f000 fb71 	bl	80086f4 <USBH_LL_SubmitURB>
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;

}
 8008012:	4620      	mov	r0, r4
 8008014:	b005      	add	sp, #20
 8008016:	bd30      	pop	{r4, r5, pc}

08008018 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008018:	b530      	push	{r4, r5, lr}
 800801a:	b085      	sub	sp, #20
 800801c:	460c      	mov	r4, r1
 800801e:	4619      	mov	r1, r3
 8008020:	f89d 3020 	ldrb.w	r3, [sp, #32]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008024:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
 8008028:	b105      	cbz	r5, 800802c <USBH_BulkSendData+0x14>
  {
    do_ping = 0U;
 800802a:	2300      	movs	r3, #0
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800802c:	9303      	str	r3, [sp, #12]
 800802e:	9202      	str	r2, [sp, #8]
 8008030:	9401      	str	r4, [sp, #4]
 8008032:	2301      	movs	r3, #1
 8008034:	9300      	str	r3, [sp, #0]
 8008036:	2302      	movs	r3, #2
 8008038:	2200      	movs	r2, #0
 800803a:	f000 fb5b 	bl	80086f4 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
}
 800803e:	2000      	movs	r0, #0
 8008040:	b005      	add	sp, #20
 8008042:	bd30      	pop	{r4, r5, pc}

08008044 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008044:	b530      	push	{r4, r5, lr}
 8008046:	b085      	sub	sp, #20
 8008048:	460d      	mov	r5, r1
 800804a:	4619      	mov	r1, r3
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800804c:	2400      	movs	r4, #0
 800804e:	9403      	str	r4, [sp, #12]
 8008050:	9202      	str	r2, [sp, #8]
 8008052:	9501      	str	r5, [sp, #4]
 8008054:	2201      	movs	r2, #1
 8008056:	9200      	str	r2, [sp, #0]
 8008058:	2302      	movs	r3, #2
 800805a:	f000 fb4b 	bl	80086f4 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
}
 800805e:	4620      	mov	r0, r4
 8008060:	b005      	add	sp, #20
 8008062:	bd30      	pop	{r4, r5, pc}

08008064 <USBH_GetFreePipe>:
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
  uint8_t idx = 0U;

  for (idx = 0U ; idx < 11U ; idx++)
 8008064:	2300      	movs	r3, #0
 8008066:	2b0a      	cmp	r3, #10
 8008068:	d80c      	bhi.n	8008084 <USBH_GetFreePipe+0x20>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800806a:	f103 02e0 	add.w	r2, r3, #224	; 0xe0
 800806e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8008072:	6852      	ldr	r2, [r2, #4]
 8008074:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8008078:	d002      	beq.n	8008080 <USBH_GetFreePipe+0x1c>
  for (idx = 0U ; idx < 11U ; idx++)
 800807a:	3301      	adds	r3, #1
 800807c:	b2db      	uxtb	r3, r3
 800807e:	e7f2      	b.n	8008066 <USBH_GetFreePipe+0x2>
    {
      return (uint16_t)idx;
 8008080:	b298      	uxth	r0, r3
 8008082:	4770      	bx	lr
    }
  }

  return 0xFFFFU;
 8008084:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 8008088:	4770      	bx	lr

0800808a <USBH_OpenPipe>:
{
 800808a:	b510      	push	{r4, lr}
 800808c:	b084      	sub	sp, #16
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800808e:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8008092:	9402      	str	r4, [sp, #8]
 8008094:	f89d 401c 	ldrb.w	r4, [sp, #28]
 8008098:	9401      	str	r4, [sp, #4]
 800809a:	f89d 4018 	ldrb.w	r4, [sp, #24]
 800809e:	9400      	str	r4, [sp, #0]
 80080a0:	f000 fb0d 	bl	80086be <USBH_LL_OpenPipe>
}
 80080a4:	2000      	movs	r0, #0
 80080a6:	b004      	add	sp, #16
 80080a8:	bd10      	pop	{r4, pc}

080080aa <USBH_ClosePipe>:
{
 80080aa:	b508      	push	{r3, lr}
  USBH_LL_ClosePipe(phost, pipe_num);
 80080ac:	f000 fb1a 	bl	80086e4 <USBH_LL_ClosePipe>
}
 80080b0:	2000      	movs	r0, #0
 80080b2:	bd08      	pop	{r3, pc}

080080b4 <USBH_AllocPipe>:
{
 80080b4:	b538      	push	{r3, r4, r5, lr}
 80080b6:	4604      	mov	r4, r0
 80080b8:	460d      	mov	r5, r1
  pipe =  USBH_GetFreePipe(phost);
 80080ba:	f7ff ffd3 	bl	8008064 <USBH_GetFreePipe>
  if (pipe != 0xFFFFU)
 80080be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80080c2:	4298      	cmp	r0, r3
 80080c4:	d007      	beq.n	80080d6 <USBH_AllocPipe+0x22>
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 80080c6:	f000 030f 	and.w	r3, r0, #15
 80080ca:	f445 4500 	orr.w	r5, r5, #32768	; 0x8000
 80080ce:	33e0      	adds	r3, #224	; 0xe0
 80080d0:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80080d4:	6065      	str	r5, [r4, #4]
}
 80080d6:	b2c0      	uxtb	r0, r0
 80080d8:	bd38      	pop	{r3, r4, r5, pc}

080080da <USBH_FreePipe>:
  if (idx < 11U)
 80080da:	290a      	cmp	r1, #10
 80080dc:	d806      	bhi.n	80080ec <USBH_FreePipe+0x12>
    phost->Pipes[idx] &= 0x7FFFU;
 80080de:	31e0      	adds	r1, #224	; 0xe0
 80080e0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 80080e4:	6843      	ldr	r3, [r0, #4]
 80080e6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80080ea:	6043      	str	r3, [r0, #4]
}
 80080ec:	2000      	movs	r0, #0
 80080ee:	4770      	bx	lr

080080f0 <Scheduler_Tasks>:
	tTask * t = (tTask *)Queue_Peek(&Scheduler.Tasks,Task_ID - 1);
	Task_Add_Heap_Size(Task_ID, t);
}

static void Scheduler_Tasks(void * task_data)
{
 80080f0:	b510      	push	{r4, lr}
		Console_Commands_Added = true;
	}
#endif

	tTask * task;
	uint32_t counter = 0;
 80080f2:	2400      	movs	r4, #0
	for(; counter < Scheduler.Tasks.Size; counter++)
 80080f4:	e017      	b.n	8008126 <Scheduler_Tasks+0x36>
	{
		task = (tTask *)Queue_Peek(&Scheduler.Tasks,counter);
 80080f6:	4621      	mov	r1, r4
 80080f8:	480d      	ldr	r0, [pc, #52]	; (8008130 <Scheduler_Tasks+0x40>)
 80080fa:	f7fe faa7 	bl	800664c <Queue_Peek>

		float percent = (float)task->Task_Running_Time / 1000.0;
 80080fe:	edd0 7a04 	vldr	s15, [r0, #16]
 8008102:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008106:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8008134 <Scheduler_Tasks+0x44>
 800810a:	eec7 7a26 	vdiv.f32	s15, s14, s13
		task->Task_Running_Percentage = percent * 100;
 800810e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8008138 <Scheduler_Tasks+0x48>
 8008112:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008116:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800811a:	ee17 3a90 	vmov	r3, s15
 800811e:	7503      	strb	r3, [r0, #20]

		task->Task_Running_Time = 0;
 8008120:	2300      	movs	r3, #0
 8008122:	6103      	str	r3, [r0, #16]
	for(; counter < Scheduler.Tasks.Size; counter++)
 8008124:	3401      	adds	r4, #1
 8008126:	4b02      	ldr	r3, [pc, #8]	; (8008130 <Scheduler_Tasks+0x40>)
 8008128:	689b      	ldr	r3, [r3, #8]
 800812a:	42a3      	cmp	r3, r4
 800812c:	d8e3      	bhi.n	80080f6 <Scheduler_Tasks+0x6>
	}
}
 800812e:	bd10      	pop	{r4, pc}
 8008130:	2000182c 	.word	0x2000182c
 8008134:	447a0000 	.word	0x447a0000
 8008138:	42c80000 	.word	0x42c80000

0800813c <Run_Scheduler_Tasks>:

void Run_Scheduler_Tasks(void)
{
	if(Scheduler.Tasks.Size > 0)
 800813c:	4b15      	ldr	r3, [pc, #84]	; (8008194 <Run_Scheduler_Tasks+0x58>)
 800813e:	689b      	ldr	r3, [r3, #8]
 8008140:	bb23      	cbnz	r3, 800818c <Run_Scheduler_Tasks+0x50>
 8008142:	4770      	bx	lr
					task->Task_Exe(task->Task_Data);
					uint32_t stop = HAL_GetTick();
					task->Task_Running_Time += (stop - start);
				}

				task->Start_Time = HAL_GetTick();
 8008144:	f7f9 fc1a 	bl	800197c <HAL_GetTick>
 8008148:	6060      	str	r0, [r4, #4]
		for(; counter < Scheduler.Tasks.Size; counter++)
 800814a:	3501      	adds	r5, #1
 800814c:	4b11      	ldr	r3, [pc, #68]	; (8008194 <Run_Scheduler_Tasks+0x58>)
 800814e:	689b      	ldr	r3, [r3, #8]
 8008150:	42ab      	cmp	r3, r5
 8008152:	d91e      	bls.n	8008192 <Run_Scheduler_Tasks+0x56>
			task = (tTask *)Queue_Peek(&Scheduler.Tasks,counter);
 8008154:	4629      	mov	r1, r5
 8008156:	480f      	ldr	r0, [pc, #60]	; (8008194 <Run_Scheduler_Tasks+0x58>)
 8008158:	f7fe fa78 	bl	800664c <Queue_Peek>
 800815c:	4604      	mov	r4, r0
			if((HAL_GetTick() - task->Start_Time) > task->Timeout)
 800815e:	f7f9 fc0d 	bl	800197c <HAL_GetTick>
 8008162:	6863      	ldr	r3, [r4, #4]
 8008164:	1ac0      	subs	r0, r0, r3
 8008166:	68a3      	ldr	r3, [r4, #8]
 8008168:	4298      	cmp	r0, r3
 800816a:	d9ee      	bls.n	800814a <Run_Scheduler_Tasks+0xe>
				if(!task->Task_Halted)
 800816c:	7b23      	ldrb	r3, [r4, #12]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d1e8      	bne.n	8008144 <Run_Scheduler_Tasks+0x8>
					uint32_t start = HAL_GetTick();
 8008172:	f7f9 fc03 	bl	800197c <HAL_GetTick>
 8008176:	4606      	mov	r6, r0
					task->Task_Exe(task->Task_Data);
 8008178:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800817a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800817c:	4798      	blx	r3
					uint32_t stop = HAL_GetTick();
 800817e:	f7f9 fbfd 	bl	800197c <HAL_GetTick>
					task->Task_Running_Time += (stop - start);
 8008182:	1b80      	subs	r0, r0, r6
 8008184:	6923      	ldr	r3, [r4, #16]
 8008186:	4403      	add	r3, r0
 8008188:	6123      	str	r3, [r4, #16]
 800818a:	e7db      	b.n	8008144 <Run_Scheduler_Tasks+0x8>
{
 800818c:	b570      	push	{r4, r5, r6, lr}
		uint32_t counter = 0;
 800818e:	2500      	movs	r5, #0
 8008190:	e7dc      	b.n	800814c <Run_Scheduler_Tasks+0x10>
			}
		}
	}
}
 8008192:	bd70      	pop	{r4, r5, r6, pc}
 8008194:	2000182c 	.word	0x2000182c

08008198 <Set_Task_Name>:
	}
	counter = 0;
}

void Set_Task_Name(uint32_t task, const char * name)
{
 8008198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800819a:	4606      	mov	r6, r0
 800819c:	460f      	mov	r7, r1
	// Loop through all of the tasks
	tTask * t;
	uint32_t counter = 0;
 800819e:	2400      	movs	r4, #0
	for(; counter < Scheduler.Tasks.Size; counter++)
 80081a0:	e000      	b.n	80081a4 <Set_Task_Name+0xc>
 80081a2:	3401      	adds	r4, #1
 80081a4:	4b09      	ldr	r3, [pc, #36]	; (80081cc <Set_Task_Name+0x34>)
 80081a6:	689b      	ldr	r3, [r3, #8]
 80081a8:	42a3      	cmp	r3, r4
 80081aa:	d90e      	bls.n	80081ca <Set_Task_Name+0x32>
	{
		t = (tTask *)Queue_Peek(&Scheduler.Tasks,counter);
 80081ac:	4621      	mov	r1, r4
 80081ae:	4807      	ldr	r0, [pc, #28]	; (80081cc <Set_Task_Name+0x34>)
 80081b0:	f7fe fa4c 	bl	800664c <Queue_Peek>
 80081b4:	4605      	mov	r5, r0

		//if(t->TID == task)
			if(7 == task)
 80081b6:	2e07      	cmp	r6, #7
 80081b8:	d1f3      	bne.n	80081a2 <Set_Task_Name+0xa>
		{
			strncpy((char *)t->Task_Name,name,15);
 80081ba:	220f      	movs	r2, #15
 80081bc:	4639      	mov	r1, r7
 80081be:	3015      	adds	r0, #21
 80081c0:	f000 fe4e 	bl	8008e60 <strncpy>
			t->Task_Name[15] = '\0';
 80081c4:	2300      	movs	r3, #0
 80081c6:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24

			return;
		}
	}
}
 80081ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081cc:	2000182c 	.word	0x2000182c

080081d0 <Task_Add_Heap_Size>:
		}
	}
}

void Task_Add_Heap_Size(uint32_t task, void * data_ptr)
{
 80081d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081d2:	4606      	mov	r6, r0
 80081d4:	460f      	mov	r7, r1
	tTask * t;
	for(int counter = 0; counter < Scheduler.Tasks.Size; counter++)
 80081d6:	2500      	movs	r5, #0
 80081d8:	e000      	b.n	80081dc <Task_Add_Heap_Size+0xc>
 80081da:	3501      	adds	r5, #1
 80081dc:	4b09      	ldr	r3, [pc, #36]	; (8008204 <Task_Add_Heap_Size+0x34>)
 80081de:	689b      	ldr	r3, [r3, #8]
 80081e0:	42ab      	cmp	r3, r5
 80081e2:	d90d      	bls.n	8008200 <Task_Add_Heap_Size+0x30>
	{
		t = (tTask *)Queue_Peek(&Scheduler.Tasks,counter);
 80081e4:	4629      	mov	r1, r5
 80081e6:	4807      	ldr	r0, [pc, #28]	; (8008204 <Task_Add_Heap_Size+0x34>)
 80081e8:	f7fe fa30 	bl	800664c <Queue_Peek>
 80081ec:	4604      	mov	r4, r0

		if(t->TID == task)
 80081ee:	6803      	ldr	r3, [r0, #0]
 80081f0:	42b3      	cmp	r3, r6
 80081f2:	d1f2      	bne.n	80081da <Task_Add_Heap_Size+0xa>
		{
			t->Task_Heap_Usage += malloc_usable_size(data_ptr);
 80081f4:	4638      	mov	r0, r7
 80081f6:	f000 fb5b 	bl	80088b0 <malloc_usable_size>
 80081fa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80081fc:	4403      	add	r3, r0
 80081fe:	6323      	str	r3, [r4, #48]	; 0x30
			break;
		}
	}
}
 8008200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008202:	bf00      	nop
 8008204:	2000182c 	.word	0x2000182c

08008208 <Start_Task>:
{
 8008208:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800820c:	4607      	mov	r7, r0
 800820e:	460e      	mov	r6, r1
 8008210:	4615      	mov	r5, r2
	tTask * task = (tTask *)malloc(sizeof(tTask));
 8008212:	2034      	movs	r0, #52	; 0x34
 8008214:	f000 fa90 	bl	8008738 <malloc>
 8008218:	4604      	mov	r4, r0
	if(Task_ID != 0xFFFFFFFF)
 800821a:	4b1c      	ldr	r3, [pc, #112]	; (800828c <Start_Task+0x84>)
 800821c:	6818      	ldr	r0, [r3, #0]
 800821e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008222:	d127      	bne.n	8008274 <Start_Task+0x6c>
	if(task != NULL)
 8008224:	b354      	cbz	r4, 800827c <Start_Task+0x74>
		task->TID = Scheduler.Next_TID;
 8008226:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8008298 <Start_Task+0x90>
 800822a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800822e:	6023      	str	r3, [r4, #0]
		Scheduler.Next_TID++;
 8008230:	3301      	adds	r3, #1
 8008232:	f8c8 300c 	str.w	r3, [r8, #12]
		task->Task_Halted = 0;
 8008236:	f04f 0900 	mov.w	r9, #0
 800823a:	f884 900c 	strb.w	r9, [r4, #12]
		task->Start_Time = HAL_GetTick();
 800823e:	f7f9 fb9d 	bl	800197c <HAL_GetTick>
 8008242:	6060      	str	r0, [r4, #4]
		task->Timeout = timeout;
 8008244:	60a5      	str	r5, [r4, #8]
		task->Task_Running_Time = 0;
 8008246:	f8c4 9010 	str.w	r9, [r4, #16]
		strcpy((char *)task->Task_Name,"               ");
 800824a:	4d11      	ldr	r5, [pc, #68]	; (8008290 <Start_Task+0x88>)
 800824c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800824e:	f8c4 0015 	str.w	r0, [r4, #21]
 8008252:	f8c4 1019 	str.w	r1, [r4, #25]
 8008256:	f8c4 201d 	str.w	r2, [r4, #29]
 800825a:	f8c4 3021 	str.w	r3, [r4, #33]	; 0x21
		task->Task_Exe = Task_CallBack;
 800825e:	62a7      	str	r7, [r4, #40]	; 0x28
		task->Task_Data = Data;
 8008260:	62e6      	str	r6, [r4, #44]	; 0x2c
		task->Task_Heap_Usage = 0;
 8008262:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
		if(Enqueue(&Scheduler.Tasks,(void *)task))
 8008266:	4621      	mov	r1, r4
 8008268:	4640      	mov	r0, r8
 800826a:	f7fe f9d1 	bl	8006610 <Enqueue>
 800826e:	b150      	cbz	r0, 8008286 <Start_Task+0x7e>
			return task->TID;
 8008270:	6820      	ldr	r0, [r4, #0]
 8008272:	e009      	b.n	8008288 <Start_Task+0x80>
		Task_Add_Heap_Size(Task_ID, task);
 8008274:	4621      	mov	r1, r4
 8008276:	f7ff ffab 	bl	80081d0 <Task_Add_Heap_Size>
 800827a:	e7d3      	b.n	8008224 <Start_Task+0x1c>
		printf("Task start malloc error\r\n");
 800827c:	4805      	ldr	r0, [pc, #20]	; (8008294 <Start_Task+0x8c>)
 800827e:	f000 fcf5 	bl	8008c6c <puts>
		return 0;
 8008282:	2000      	movs	r0, #0
 8008284:	e000      	b.n	8008288 <Start_Task+0x80>
			return 0;
 8008286:	2000      	movs	r0, #0
}
 8008288:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800828c:	2000002c 	.word	0x2000002c
 8008290:	08009818 	.word	0x08009818
 8008294:	08009828 	.word	0x08009828
 8008298:	2000182c 	.word	0x2000182c

0800829c <Start_Scheduler>:
{
 800829c:	b538      	push	{r3, r4, r5, lr}
	Prep_Queue(&Scheduler.Tasks);
 800829e:	4d0d      	ldr	r5, [pc, #52]	; (80082d4 <Start_Scheduler+0x38>)
 80082a0:	4628      	mov	r0, r5
 80082a2:	f7fe f9af 	bl	8006604 <Prep_Queue>
	Scheduler.Next_TID = 1;
 80082a6:	2301      	movs	r3, #1
 80082a8:	60eb      	str	r3, [r5, #12]
	Task_ID = Start_Task(Scheduler_Tasks,NULL,1000);
 80082aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80082ae:	2100      	movs	r1, #0
 80082b0:	4809      	ldr	r0, [pc, #36]	; (80082d8 <Start_Scheduler+0x3c>)
 80082b2:	f7ff ffa9 	bl	8008208 <Start_Task>
 80082b6:	4c09      	ldr	r4, [pc, #36]	; (80082dc <Start_Scheduler+0x40>)
 80082b8:	6020      	str	r0, [r4, #0]
	Set_Task_Name(Task_ID,"Scheduler");
 80082ba:	4909      	ldr	r1, [pc, #36]	; (80082e0 <Start_Scheduler+0x44>)
 80082bc:	f7ff ff6c 	bl	8008198 <Set_Task_Name>
	tTask * t = (tTask *)Queue_Peek(&Scheduler.Tasks,Task_ID - 1);
 80082c0:	6821      	ldr	r1, [r4, #0]
 80082c2:	3901      	subs	r1, #1
 80082c4:	4628      	mov	r0, r5
 80082c6:	f7fe f9c1 	bl	800664c <Queue_Peek>
 80082ca:	4601      	mov	r1, r0
	Task_Add_Heap_Size(Task_ID, t);
 80082cc:	6820      	ldr	r0, [r4, #0]
 80082ce:	f7ff ff7f 	bl	80081d0 <Task_Add_Heap_Size>
}
 80082d2:	bd38      	pop	{r3, r4, r5, pc}
 80082d4:	2000182c 	.word	0x2000182c
 80082d8:	080080f1 	.word	0x080080f1
 80082dc:	2000002c 	.word	0x2000002c
 80082e0:	08009844 	.word	0x08009844

080082e4 <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 80082e4:	4b13      	ldr	r3, [pc, #76]	; (8008334 <FATFS_LinkDriverEx+0x50>)
 80082e6:	7a5b      	ldrb	r3, [r3, #9]
 80082e8:	bb13      	cbnz	r3, 8008330 <FATFS_LinkDriverEx+0x4c>
{
 80082ea:	b510      	push	{r4, lr}
 80082ec:	4604      	mov	r4, r0
 80082ee:	f003 00ff 	and.w	r0, r3, #255	; 0xff
  {
    disk.is_initialized[disk.nbr] = 0;
 80082f2:	4b10      	ldr	r3, [pc, #64]	; (8008334 <FATFS_LinkDriverEx+0x50>)
 80082f4:	f893 c009 	ldrb.w	ip, [r3, #9]
 80082f8:	fa5f fc8c 	uxtb.w	ip, ip
 80082fc:	f04f 0e00 	mov.w	lr, #0
 8008300:	f803 e00c 	strb.w	lr, [r3, ip]
    disk.drv[disk.nbr] = drv;
 8008304:	f893 c009 	ldrb.w	ip, [r3, #9]
 8008308:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800830c:	f8cc 4004 	str.w	r4, [ip, #4]
    disk.lun[disk.nbr] = lun;
 8008310:	7a5c      	ldrb	r4, [r3, #9]
 8008312:	441c      	add	r4, r3
 8008314:	7222      	strb	r2, [r4, #8]
    DiskNum = disk.nbr++;
 8008316:	7a5a      	ldrb	r2, [r3, #9]
 8008318:	1c54      	adds	r4, r2, #1
 800831a:	b2e4      	uxtb	r4, r4
 800831c:	725c      	strb	r4, [r3, #9]
    path[0] = DiskNum + '0';
 800831e:	3230      	adds	r2, #48	; 0x30
 8008320:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 8008322:	233a      	movs	r3, #58	; 0x3a
 8008324:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8008326:	232f      	movs	r3, #47	; 0x2f
 8008328:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 800832a:	f881 e003 	strb.w	lr, [r1, #3]
    ret = 0;
  }

  return ret;
}
 800832e:	bd10      	pop	{r4, pc}
  uint8_t ret = 1;
 8008330:	2001      	movs	r0, #1
}
 8008332:	4770      	bx	lr
 8008334:	2000183c 	.word	0x2000183c

08008338 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008338:	b508      	push	{r3, lr}
  return FATFS_LinkDriverEx(drv, path, 0);
 800833a:	2200      	movs	r2, #0
 800833c:	f7ff ffd2 	bl	80082e4 <FATFS_LinkDriverEx>
}
 8008340:	bd08      	pop	{r3, pc}
	...

08008344 <HAL_UART_TxCpltCallback>:
		UART_Tasks((void *)uart);
	}
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008344:	b538      	push	{r3, r4, r5, lr}
 8008346:	4605      	mov	r5, r0
	// Find who the callback is for
	int c = 0;
 8008348:	2400      	movs	r4, #0
	for(; c < UART_Callback_Handles.Size; c++)
 800834a:	e000      	b.n	800834e <HAL_UART_TxCpltCallback+0xa>
 800834c:	3401      	adds	r4, #1
 800834e:	4b07      	ldr	r3, [pc, #28]	; (800836c <HAL_UART_TxCpltCallback+0x28>)
 8008350:	689b      	ldr	r3, [r3, #8]
 8008352:	42a3      	cmp	r3, r4
 8008354:	d909      	bls.n	800836a <HAL_UART_TxCpltCallback+0x26>
	{
		UART * uart = (UART *)Queue_Peek(&UART_Callback_Handles, c);
 8008356:	4621      	mov	r1, r4
 8008358:	4804      	ldr	r0, [pc, #16]	; (800836c <HAL_UART_TxCpltCallback+0x28>)
 800835a:	f7fe f977 	bl	800664c <Queue_Peek>

		if(uart->UART_Handle == huart)
 800835e:	6803      	ldr	r3, [r0, #0]
 8008360:	42ab      	cmp	r3, r5
 8008362:	d1f3      	bne.n	800834c <HAL_UART_TxCpltCallback+0x8>
		{
			uart->Currently_Transmitting = false;
 8008364:	2300      	movs	r3, #0
 8008366:	f880 321c 	strb.w	r3, [r0, #540]	; 0x21c
			return;
		}
	}
}
 800836a:	bd38      	pop	{r3, r4, r5, pc}
 800836c:	20001848 	.word	0x20001848

08008370 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	UNUSED(huart);
}
 8008370:	4770      	bx	lr
	...

08008374 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008374:	b570      	push	{r4, r5, r6, lr}
 8008376:	4606      	mov	r6, r0
	// Find who the callback is for
	int c = 0;
 8008378:	2500      	movs	r5, #0
	for(; c < UART_Callback_Handles.Size; c++)
 800837a:	e000      	b.n	800837e <HAL_UART_ErrorCallback+0xa>
 800837c:	3501      	adds	r5, #1
 800837e:	4b10      	ldr	r3, [pc, #64]	; (80083c0 <HAL_UART_ErrorCallback+0x4c>)
 8008380:	689b      	ldr	r3, [r3, #8]
 8008382:	42ab      	cmp	r3, r5
 8008384:	d91a      	bls.n	80083bc <HAL_UART_ErrorCallback+0x48>
	{
		UART * uart = (UART *)Queue_Peek(&UART_Callback_Handles, c);
 8008386:	4629      	mov	r1, r5
 8008388:	480d      	ldr	r0, [pc, #52]	; (80083c0 <HAL_UART_ErrorCallback+0x4c>)
 800838a:	f7fe f95f 	bl	800664c <Queue_Peek>
 800838e:	4604      	mov	r4, r0

		if(uart->UART_Handle == huart)
 8008390:	6803      	ldr	r3, [r0, #0]
 8008392:	42b3      	cmp	r3, r6
 8008394:	d1f2      	bne.n	800837c <HAL_UART_ErrorCallback+0x8>
		{
			uart->RX_Buff_Tail_Ptr = 0;
 8008396:	2200      	movs	r2, #0
 8008398:	f8c0 2208 	str.w	r2, [r0, #520]	; 0x208
			uart->Currently_Transmitting = false;
 800839c:	f880 221c 	strb.w	r2, [r0, #540]	; 0x21c
			HAL_DMA_Abort_IT(uart->UART_Handle->hdmarx);
 80083a0:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80083a2:	f7f9 fcbd 	bl	8001d20 <HAL_DMA_Abort_IT>
			HAL_UART_DMAStop(uart->UART_Handle);
 80083a6:	6820      	ldr	r0, [r4, #0]
 80083a8:	f7fc fe34 	bl	8005014 <HAL_UART_DMAStop>
			HAL_UART_Receive_DMA(uart->UART_Handle, uart->RX_Buffer, UART_RX_BUFF_SIZE);
 80083ac:	4621      	mov	r1, r4
 80083ae:	f851 0b06 	ldr.w	r0, [r1], #6
 80083b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80083b6:	f7fd fc1b 	bl	8005bf0 <HAL_UART_Receive_DMA>
 80083ba:	e7df      	b.n	800837c <HAL_UART_ErrorCallback+0x8>
		}
	}
}
 80083bc:	bd70      	pop	{r4, r5, r6, pc}
 80083be:	bf00      	nop
 80083c0:	20001848 	.word	0x20001848

080083c4 <USBH_UserProcess>:
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80083c4:	2904      	cmp	r1, #4
 80083c6:	d012      	beq.n	80083ee <USBH_UserProcess+0x2a>
 80083c8:	2905      	cmp	r1, #5
 80083ca:	d002      	beq.n	80083d2 <USBH_UserProcess+0xe>
 80083cc:	2902      	cmp	r1, #2
 80083ce:	d007      	beq.n	80083e0 <USBH_UserProcess+0x1c>

  default:
  break;
  }
  /* USER CODE END CALL_BACK_1 */
}
 80083d0:	4770      	bx	lr
	  USB_MSD_Mounted = 0;
 80083d2:	4b09      	ldr	r3, [pc, #36]	; (80083f8 <USBH_UserProcess+0x34>)
 80083d4:	2200      	movs	r2, #0
 80083d6:	701a      	strb	r2, [r3, #0]
  Appli_state = APPLICATION_DISCONNECT;
 80083d8:	4b08      	ldr	r3, [pc, #32]	; (80083fc <USBH_UserProcess+0x38>)
 80083da:	2203      	movs	r2, #3
 80083dc:	701a      	strb	r2, [r3, #0]
  break;
 80083de:	4770      	bx	lr
	  USB_MSD_Mounted = 1;
 80083e0:	4b05      	ldr	r3, [pc, #20]	; (80083f8 <USBH_UserProcess+0x34>)
 80083e2:	2201      	movs	r2, #1
 80083e4:	701a      	strb	r2, [r3, #0]
  Appli_state = APPLICATION_READY;
 80083e6:	4b05      	ldr	r3, [pc, #20]	; (80083fc <USBH_UserProcess+0x38>)
 80083e8:	2202      	movs	r2, #2
 80083ea:	701a      	strb	r2, [r3, #0]
  break;
 80083ec:	4770      	bx	lr
  Appli_state = APPLICATION_START;
 80083ee:	4b03      	ldr	r3, [pc, #12]	; (80083fc <USBH_UserProcess+0x38>)
 80083f0:	2201      	movs	r2, #1
 80083f2:	701a      	strb	r2, [r3, #0]
}
 80083f4:	e7ec      	b.n	80083d0 <USBH_UserProcess+0xc>
 80083f6:	bf00      	nop
 80083f8:	20001855 	.word	0x20001855
 80083fc:	20001854 	.word	0x20001854

08008400 <MX_USB_HOST_Init>:
{
 8008400:	b508      	push	{r3, lr}
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008402:	2201      	movs	r2, #1
 8008404:	490b      	ldr	r1, [pc, #44]	; (8008434 <MX_USB_HOST_Init+0x34>)
 8008406:	480c      	ldr	r0, [pc, #48]	; (8008438 <MX_USB_HOST_Init+0x38>)
 8008408:	f7ff f966 	bl	80076d8 <USBH_Init>
 800840c:	b948      	cbnz	r0, 8008422 <MX_USB_HOST_Init+0x22>
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800840e:	490b      	ldr	r1, [pc, #44]	; (800843c <MX_USB_HOST_Init+0x3c>)
 8008410:	4809      	ldr	r0, [pc, #36]	; (8008438 <MX_USB_HOST_Init+0x38>)
 8008412:	f7ff f980 	bl	8007716 <USBH_RegisterClass>
 8008416:	b938      	cbnz	r0, 8008428 <MX_USB_HOST_Init+0x28>
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008418:	4807      	ldr	r0, [pc, #28]	; (8008438 <MX_USB_HOST_Init+0x38>)
 800841a:	f7ff f9c1 	bl	80077a0 <USBH_Start>
 800841e:	b930      	cbnz	r0, 800842e <MX_USB_HOST_Init+0x2e>
}
 8008420:	bd08      	pop	{r3, pc}
    Error_Handler();
 8008422:	f7f8 fae7 	bl	80009f4 <Error_Handler>
 8008426:	e7f2      	b.n	800840e <MX_USB_HOST_Init+0xe>
    Error_Handler();
 8008428:	f7f8 fae4 	bl	80009f4 <Error_Handler>
 800842c:	e7f4      	b.n	8008418 <MX_USB_HOST_Init+0x18>
    Error_Handler();
 800842e:	f7f8 fae1 	bl	80009f4 <Error_Handler>
}
 8008432:	e7f5      	b.n	8008420 <MX_USB_HOST_Init+0x20>
 8008434:	080083c5 	.word	0x080083c5
 8008438:	20001858 	.word	0x20001858
 800843c:	2000000c 	.word	0x2000000c

08008440 <MX_USB_HOST_Process>:
{
 8008440:	b508      	push	{r3, lr}
  USBH_Process(&hUsbHostFS);
 8008442:	4802      	ldr	r0, [pc, #8]	; (800844c <MX_USB_HOST_Process+0xc>)
 8008444:	f7ff f9b6 	bl	80077b4 <USBH_Process>
}
 8008448:	bd08      	pop	{r3, pc}
 800844a:	bf00      	nop
 800844c:	20001858 	.word	0x20001858

08008450 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008450:	b510      	push	{r4, lr}
 8008452:	b0ae      	sub	sp, #184	; 0xb8
 8008454:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008456:	2100      	movs	r1, #0
 8008458:	9129      	str	r1, [sp, #164]	; 0xa4
 800845a:	912a      	str	r1, [sp, #168]	; 0xa8
 800845c:	912b      	str	r1, [sp, #172]	; 0xac
 800845e:	912c      	str	r1, [sp, #176]	; 0xb0
 8008460:	912d      	str	r1, [sp, #180]	; 0xb4
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008462:	2294      	movs	r2, #148	; 0x94
 8008464:	a804      	add	r0, sp, #16
 8008466:	f000 fce1 	bl	8008e2c <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 800846a:	6823      	ldr	r3, [r4, #0]
 800846c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008470:	d001      	beq.n	8008476 <HAL_HCD_MspInit+0x26>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008472:	b02e      	add	sp, #184	; 0xb8
 8008474:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8008476:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800847a:	9304      	str	r3, [sp, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800847c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008480:	9321      	str	r3, [sp, #132]	; 0x84
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8008482:	2303      	movs	r3, #3
 8008484:	9305      	str	r3, [sp, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8008486:	2301      	movs	r3, #1
 8008488:	9306      	str	r3, [sp, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 800848a:	230c      	movs	r3, #12
 800848c:	9307      	str	r3, [sp, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800848e:	2302      	movs	r3, #2
 8008490:	9308      	str	r3, [sp, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8008492:	9309      	str	r3, [sp, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8008494:	930a      	str	r3, [sp, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8008496:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800849a:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800849c:	a804      	add	r0, sp, #16
 800849e:	f7fc f8cd 	bl	800463c <HAL_RCCEx_PeriphCLKConfig>
 80084a2:	2800      	cmp	r0, #0
 80084a4:	d13e      	bne.n	8008524 <HAL_HCD_MspInit+0xd4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80084a6:	4c22      	ldr	r4, [pc, #136]	; (8008530 <HAL_HCD_MspInit+0xe0>)
 80084a8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80084aa:	f043 0301 	orr.w	r3, r3, #1
 80084ae:	64e3      	str	r3, [r4, #76]	; 0x4c
 80084b0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80084b2:	f003 0301 	and.w	r3, r3, #1
 80084b6:	9301      	str	r3, [sp, #4]
 80084b8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80084ba:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80084be:	9329      	str	r3, [sp, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80084c0:	2302      	movs	r3, #2
 80084c2:	932a      	str	r3, [sp, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084c4:	2300      	movs	r3, #0
 80084c6:	932b      	str	r3, [sp, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80084c8:	2303      	movs	r3, #3
 80084ca:	932c      	str	r3, [sp, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80084cc:	230a      	movs	r3, #10
 80084ce:	932d      	str	r3, [sp, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80084d0:	a929      	add	r1, sp, #164	; 0xa4
 80084d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80084d6:	f7f9 fcc1 	bl	8001e5c <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80084da:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80084dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80084e0:	64e3      	str	r3, [r4, #76]	; 0x4c
 80084e2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80084e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80084e8:	9302      	str	r3, [sp, #8]
 80084ea:	9b02      	ldr	r3, [sp, #8]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80084ec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80084ee:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80084f2:	d11a      	bne.n	800852a <HAL_HCD_MspInit+0xda>
      __HAL_RCC_PWR_CLK_ENABLE();
 80084f4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80084f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084fa:	65a3      	str	r3, [r4, #88]	; 0x58
 80084fc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80084fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008502:	9303      	str	r3, [sp, #12]
 8008504:	9b03      	ldr	r3, [sp, #12]
      HAL_PWREx_EnableVddUSB();
 8008506:	f7fb f9e1 	bl	80038cc <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800850a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800850c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008510:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008512:	2200      	movs	r2, #0
 8008514:	4611      	mov	r1, r2
 8008516:	2043      	movs	r0, #67	; 0x43
 8008518:	f7f9 fa5c 	bl	80019d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800851c:	2043      	movs	r0, #67	; 0x43
 800851e:	f7f9 fa91 	bl	8001a44 <HAL_NVIC_EnableIRQ>
}
 8008522:	e7a6      	b.n	8008472 <HAL_HCD_MspInit+0x22>
      Error_Handler();
 8008524:	f7f8 fa66 	bl	80009f4 <Error_Handler>
 8008528:	e7bd      	b.n	80084a6 <HAL_HCD_MspInit+0x56>
      HAL_PWREx_EnableVddUSB();
 800852a:	f7fb f9cf 	bl	80038cc <HAL_PWREx_EnableVddUSB>
 800852e:	e7f0      	b.n	8008512 <HAL_HCD_MspInit+0xc2>
 8008530:	40021000 	.word	0x40021000

08008534 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008534:	b508      	push	{r3, lr}
  USBH_LL_IncTimer(hhcd->pData);
 8008536:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 800853a:	f7ff fa79 	bl	8007a30 <USBH_LL_IncTimer>
}
 800853e:	bd08      	pop	{r3, pc}

08008540 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008540:	b508      	push	{r3, lr}
  USBH_LL_Connect(hhcd->pData);
 8008542:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 8008546:	f7ff fa84 	bl	8007a52 <USBH_LL_Connect>
}
 800854a:	bd08      	pop	{r3, pc}

0800854c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800854c:	b508      	push	{r3, lr}
  USBH_LL_Disconnect(hhcd->pData);
 800854e:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 8008552:	f7ff fa88 	bl	8007a66 <USBH_LL_Disconnect>
}
 8008556:	bd08      	pop	{r3, pc}

08008558 <HAL_HCD_HC_NotifyURBChange_Callback>:
{
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008558:	4770      	bx	lr

0800855a <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800855a:	b508      	push	{r3, lr}
  USBH_LL_PortEnabled(hhcd->pData);
 800855c:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 8008560:	f7ff fa6f 	bl	8007a42 <USBH_LL_PortEnabled>
}
 8008564:	bd08      	pop	{r3, pc}

08008566 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008566:	b508      	push	{r3, lr}
  USBH_LL_PortDisabled(hhcd->pData);
 8008568:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 800856c:	f7ff fa6d 	bl	8007a4a <USBH_LL_PortDisabled>
}
 8008570:	bd08      	pop	{r3, pc}
	...

08008574 <USBH_LL_Init>:
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008574:	f890 33cc 	ldrb.w	r3, [r0, #972]	; 0x3cc
 8008578:	2b01      	cmp	r3, #1
 800857a:	d001      	beq.n	8008580 <USBH_LL_Init+0xc>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
  }
  return USBH_OK;
}
 800857c:	2000      	movs	r0, #0
 800857e:	4770      	bx	lr
{
 8008580:	b510      	push	{r4, lr}
 8008582:	4604      	mov	r4, r0
  hhcd_USB_OTG_FS.pData = phost;
 8008584:	4810      	ldr	r0, [pc, #64]	; (80085c8 <USBH_LL_Init+0x54>)
 8008586:	f8c0 4300 	str.w	r4, [r0, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800858a:	f8c4 03d0 	str.w	r0, [r4, #976]	; 0x3d0
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800858e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8008592:	6003      	str	r3, [r0, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 8008594:	230c      	movs	r3, #12
 8008596:	6083      	str	r3, [r0, #8]
  hhcd_USB_OTG_FS.Init.speed = USB_OTG_SPEED_FULL;
 8008598:	2303      	movs	r3, #3
 800859a:	60c3      	str	r3, [r0, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800859c:	2300      	movs	r3, #0
 800859e:	6103      	str	r3, [r0, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80085a0:	2202      	movs	r2, #2
 80085a2:	6182      	str	r2, [r0, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80085a4:	61c3      	str	r3, [r0, #28]
  hhcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80085a6:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80085a8:	f7f9 fe06 	bl	80021b8 <HAL_HCD_Init>
 80085ac:	b940      	cbnz	r0, 80085c0 <USBH_LL_Init+0x4c>
  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80085ae:	4806      	ldr	r0, [pc, #24]	; (80085c8 <USBH_LL_Init+0x54>)
 80085b0:	f7fa fabd 	bl	8002b2e <HAL_HCD_GetCurrentFrame>
 80085b4:	4601      	mov	r1, r0
 80085b6:	4620      	mov	r0, r4
 80085b8:	f7ff fa37 	bl	8007a2a <USBH_LL_SetTimer>
}
 80085bc:	2000      	movs	r0, #0
 80085be:	bd10      	pop	{r4, pc}
    Error_Handler( );
 80085c0:	f7f8 fa18 	bl	80009f4 <Error_Handler>
 80085c4:	e7f3      	b.n	80085ae <USBH_LL_Init+0x3a>
 80085c6:	bf00      	nop
 80085c8:	20001c30 	.word	0x20001c30

080085cc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80085cc:	b508      	push	{r3, lr}
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80085ce:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 80085d2:	f7fa fab1 	bl	8002b38 <HAL_HCD_GetCurrentSpeed>
 80085d6:	2801      	cmp	r0, #1
 80085d8:	d004      	beq.n	80085e4 <USBH_LL_GetSpeed+0x18>
 80085da:	2802      	cmp	r0, #2
 80085dc:	d004      	beq.n	80085e8 <USBH_LL_GetSpeed+0x1c>
 80085de:	b100      	cbz	r0, 80085e2 <USBH_LL_GetSpeed+0x16>
  case 2 :
    speed = USBH_SPEED_LOW;
    break;

  default:
   speed = USBH_SPEED_FULL;
 80085e0:	2001      	movs	r0, #1
    break;
  }
  return  speed;
}
 80085e2:	bd08      	pop	{r3, pc}
    speed = USBH_SPEED_FULL;
 80085e4:	2001      	movs	r0, #1
 80085e6:	e7fc      	b.n	80085e2 <USBH_LL_GetSpeed+0x16>
    speed = USBH_SPEED_LOW;
 80085e8:	2002      	movs	r0, #2
 80085ea:	e7fa      	b.n	80085e2 <USBH_LL_GetSpeed+0x16>

080085ec <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80085ec:	b508      	push	{r3, lr}
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80085ee:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 80085f2:	f7fa fa97 	bl	8002b24 <HAL_HCD_HC_GetXferCount>
}
 80085f6:	bd08      	pop	{r3, pc}

080085f8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80085f8:	b508      	push	{r3, lr}
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80085fa:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 80085fe:	f7fa fa8b 	bl	8002b18 <HAL_HCD_HC_GetURBState>
}
 8008602:	bd08      	pop	{r3, pc}

08008604 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008604:	b508      	push	{r3, lr}
  if (phost->id == HOST_FS) {
 8008606:	f890 33cc 	ldrb.w	r3, [r0, #972]	; 0x3cc
 800860a:	2b01      	cmp	r3, #1
 800860c:	d004      	beq.n	8008618 <USBH_LL_DriverVBUS+0x14>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800860e:	20c8      	movs	r0, #200	; 0xc8
 8008610:	f7f9 f9ba 	bl	8001988 <HAL_Delay>
  return USBH_OK;
}
 8008614:	2000      	movs	r0, #0
 8008616:	bd08      	pop	{r3, pc}
    MX_DriverVbusFS(state);
 8008618:	4608      	mov	r0, r1
 800861a:	f000 f881 	bl	8008720 <MX_DriverVbusFS>
 800861e:	e7f6      	b.n	800860e <USBH_LL_DriverVBUS+0xa>

08008620 <USBH_LL_SetToggle>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008620:	f8d0 33d0 	ldr.w	r3, [r0, #976]	; 0x3d0

  if(pHandle->hc[pipe].ep_is_in)
 8008624:	202c      	movs	r0, #44	; 0x2c
 8008626:	fb00 3001 	mla	r0, r0, r1, r3
 800862a:	f890 003b 	ldrb.w	r0, [r0, #59]	; 0x3b
 800862e:	b130      	cbz	r0, 800863e <USBH_LL_SetToggle+0x1e>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008630:	202c      	movs	r0, #44	; 0x2c
 8008632:	fb00 3101 	mla	r1, r0, r1, r3
 8008636:	f881 2054 	strb.w	r2, [r1, #84]	; 0x54
  {
    pHandle->hc[pipe].toggle_out = toggle;
  }

  return USBH_OK;
}
 800863a:	2000      	movs	r0, #0
 800863c:	4770      	bx	lr
    pHandle->hc[pipe].toggle_out = toggle;
 800863e:	202c      	movs	r0, #44	; 0x2c
 8008640:	fb00 3101 	mla	r1, r0, r1, r3
 8008644:	f881 2055 	strb.w	r2, [r1, #85]	; 0x55
 8008648:	e7f7      	b.n	800863a <USBH_LL_SetToggle+0x1a>

0800864a <USBH_LL_GetToggle>:
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  uint8_t toggle = 0;
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800864a:	f8d0 33d0 	ldr.w	r3, [r0, #976]	; 0x3d0

  if(pHandle->hc[pipe].ep_is_in)
 800864e:	222c      	movs	r2, #44	; 0x2c
 8008650:	fb02 3201 	mla	r2, r2, r1, r3
 8008654:	f892 203b 	ldrb.w	r2, [r2, #59]	; 0x3b
 8008658:	b12a      	cbz	r2, 8008666 <USBH_LL_GetToggle+0x1c>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800865a:	222c      	movs	r2, #44	; 0x2c
 800865c:	fb02 3101 	mla	r1, r2, r1, r3
 8008660:	f891 0054 	ldrb.w	r0, [r1, #84]	; 0x54
 8008664:	4770      	bx	lr
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 8008666:	222c      	movs	r2, #44	; 0x2c
 8008668:	fb02 3101 	mla	r1, r2, r1, r3
 800866c:	f891 0055 	ldrb.w	r0, [r1, #85]	; 0x55
  }
  return toggle;
}
 8008670:	4770      	bx	lr

08008672 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008672:	b508      	push	{r3, lr}
  HAL_Delay(Delay);
 8008674:	f7f9 f988 	bl	8001988 <HAL_Delay>
}
 8008678:	bd08      	pop	{r3, pc}

0800867a <USBH_Get_USB_Status>:
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBH_StatusTypeDef usb_status = USBH_OK;

  switch (hal_status)
 800867a:	2802      	cmp	r0, #2
 800867c:	d805      	bhi.n	800868a <USBH_Get_USB_Status+0x10>
 800867e:	e8df f000 	tbb	[pc, r0]
 8008682:	0405      	.short	0x0405
 8008684:	02          	.byte	0x02
 8008685:	00          	.byte	0x00
    break;
    case HAL_ERROR :
      usb_status = USBH_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008686:	2001      	movs	r0, #1
    break;
 8008688:	4770      	bx	lr
      usb_status = USBH_FAIL;
 800868a:	2002      	movs	r0, #2
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 800868c:	4770      	bx	lr

0800868e <USBH_LL_Start>:
{
 800868e:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_Start(phost->pData);
 8008690:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 8008694:	f7fa fa14 	bl	8002ac0 <HAL_HCD_Start>
  usb_status = USBH_Get_USB_Status(hal_status);
 8008698:	f7ff ffef 	bl	800867a <USBH_Get_USB_Status>
}
 800869c:	bd08      	pop	{r3, pc}

0800869e <USBH_LL_Stop>:
{
 800869e:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_Stop(phost->pData);
 80086a0:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 80086a4:	f7fa fa21 	bl	8002aea <HAL_HCD_Stop>
  usb_status = USBH_Get_USB_Status(hal_status);
 80086a8:	f7ff ffe7 	bl	800867a <USBH_Get_USB_Status>
}
 80086ac:	bd08      	pop	{r3, pc}

080086ae <USBH_LL_ResetPort>:
{
 80086ae:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_ResetPort(phost->pData);
 80086b0:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 80086b4:	f7fa fa2b 	bl	8002b0e <HAL_HCD_ResetPort>
  usb_status = USBH_Get_USB_Status(hal_status);
 80086b8:	f7ff ffdf 	bl	800867a <USBH_Get_USB_Status>
}
 80086bc:	bd08      	pop	{r3, pc}

080086be <USBH_LL_OpenPipe>:
{
 80086be:	b510      	push	{r4, lr}
 80086c0:	b084      	sub	sp, #16
  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80086c2:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 80086c6:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 80086ca:	9402      	str	r4, [sp, #8]
 80086cc:	f89d 401c 	ldrb.w	r4, [sp, #28]
 80086d0:	9401      	str	r4, [sp, #4]
 80086d2:	f89d 4018 	ldrb.w	r4, [sp, #24]
 80086d6:	9400      	str	r4, [sp, #0]
 80086d8:	f7f9 fd15 	bl	8002106 <HAL_HCD_HC_Init>
  usb_status = USBH_Get_USB_Status(hal_status);
 80086dc:	f7ff ffcd 	bl	800867a <USBH_Get_USB_Status>
}
 80086e0:	b004      	add	sp, #16
 80086e2:	bd10      	pop	{r4, pc}

080086e4 <USBH_LL_ClosePipe>:
{
 80086e4:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80086e6:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 80086ea:	f7f9 fd53 	bl	8002194 <HAL_HCD_HC_Halt>
  usb_status = USBH_Get_USB_Status(hal_status);
 80086ee:	f7ff ffc4 	bl	800867a <USBH_Get_USB_Status>
}
 80086f2:	bd08      	pop	{r3, pc}

080086f4 <USBH_LL_SubmitURB>:
{
 80086f4:	b510      	push	{r4, lr}
 80086f6:	b084      	sub	sp, #16
  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80086f8:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 80086fc:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 8008700:	9403      	str	r4, [sp, #12]
 8008702:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8008706:	9402      	str	r4, [sp, #8]
 8008708:	9c07      	ldr	r4, [sp, #28]
 800870a:	9401      	str	r4, [sp, #4]
 800870c:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8008710:	9400      	str	r4, [sp, #0]
 8008712:	f7f9 fda3 	bl	800225c <HAL_HCD_HC_SubmitRequest>
  usb_status = USBH_Get_USB_Status(hal_status);
 8008716:	f7ff ffb0 	bl	800867a <USBH_Get_USB_Status>
}
 800871a:	b004      	add	sp, #16
 800871c:	bd10      	pop	{r4, pc}
	...

08008720 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008720:	b508      	push	{r3, lr}
  uint8_t data = state;
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008722:	4602      	mov	r2, r0
 8008724:	b100      	cbz	r0, 8008728 <MX_DriverVbusFS+0x8>
    data = GPIO_PIN_RESET;
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008726:	2201      	movs	r2, #1
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_9,(GPIO_PinState)data);
 8008728:	f44f 7100 	mov.w	r1, #512	; 0x200
 800872c:	4801      	ldr	r0, [pc, #4]	; (8008734 <MX_DriverVbusFS+0x14>)
 800872e:	f7f9 fc8d 	bl	800204c <HAL_GPIO_WritePin>
}
 8008732:	bd08      	pop	{r3, pc}
 8008734:	48001000 	.word	0x48001000

08008738 <malloc>:
 8008738:	4b02      	ldr	r3, [pc, #8]	; (8008744 <malloc+0xc>)
 800873a:	4601      	mov	r1, r0
 800873c:	6818      	ldr	r0, [r3, #0]
 800873e:	f000 b82b 	b.w	8008798 <_malloc_r>
 8008742:	bf00      	nop
 8008744:	20000088 	.word	0x20000088

08008748 <free>:
 8008748:	4b02      	ldr	r3, [pc, #8]	; (8008754 <free+0xc>)
 800874a:	4601      	mov	r1, r0
 800874c:	6818      	ldr	r0, [r3, #0]
 800874e:	f000 bc1f 	b.w	8008f90 <_free_r>
 8008752:	bf00      	nop
 8008754:	20000088 	.word	0x20000088

08008758 <sbrk_aligned>:
 8008758:	b570      	push	{r4, r5, r6, lr}
 800875a:	4e0e      	ldr	r6, [pc, #56]	; (8008794 <sbrk_aligned+0x3c>)
 800875c:	460c      	mov	r4, r1
 800875e:	6831      	ldr	r1, [r6, #0]
 8008760:	4605      	mov	r5, r0
 8008762:	b911      	cbnz	r1, 800876a <sbrk_aligned+0x12>
 8008764:	f000 fbc4 	bl	8008ef0 <_sbrk_r>
 8008768:	6030      	str	r0, [r6, #0]
 800876a:	4621      	mov	r1, r4
 800876c:	4628      	mov	r0, r5
 800876e:	f000 fbbf 	bl	8008ef0 <_sbrk_r>
 8008772:	1c43      	adds	r3, r0, #1
 8008774:	d00a      	beq.n	800878c <sbrk_aligned+0x34>
 8008776:	1cc4      	adds	r4, r0, #3
 8008778:	f024 0403 	bic.w	r4, r4, #3
 800877c:	42a0      	cmp	r0, r4
 800877e:	d007      	beq.n	8008790 <sbrk_aligned+0x38>
 8008780:	1a21      	subs	r1, r4, r0
 8008782:	4628      	mov	r0, r5
 8008784:	f000 fbb4 	bl	8008ef0 <_sbrk_r>
 8008788:	3001      	adds	r0, #1
 800878a:	d101      	bne.n	8008790 <sbrk_aligned+0x38>
 800878c:	f04f 34ff 	mov.w	r4, #4294967295
 8008790:	4620      	mov	r0, r4
 8008792:	bd70      	pop	{r4, r5, r6, pc}
 8008794:	20001f38 	.word	0x20001f38

08008798 <_malloc_r>:
 8008798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800879c:	1ccd      	adds	r5, r1, #3
 800879e:	f025 0503 	bic.w	r5, r5, #3
 80087a2:	3508      	adds	r5, #8
 80087a4:	2d0c      	cmp	r5, #12
 80087a6:	bf38      	it	cc
 80087a8:	250c      	movcc	r5, #12
 80087aa:	2d00      	cmp	r5, #0
 80087ac:	4607      	mov	r7, r0
 80087ae:	db01      	blt.n	80087b4 <_malloc_r+0x1c>
 80087b0:	42a9      	cmp	r1, r5
 80087b2:	d905      	bls.n	80087c0 <_malloc_r+0x28>
 80087b4:	230c      	movs	r3, #12
 80087b6:	603b      	str	r3, [r7, #0]
 80087b8:	2600      	movs	r6, #0
 80087ba:	4630      	mov	r0, r6
 80087bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087c0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008894 <_malloc_r+0xfc>
 80087c4:	f000 f868 	bl	8008898 <__malloc_lock>
 80087c8:	f8d8 3000 	ldr.w	r3, [r8]
 80087cc:	461c      	mov	r4, r3
 80087ce:	bb5c      	cbnz	r4, 8008828 <_malloc_r+0x90>
 80087d0:	4629      	mov	r1, r5
 80087d2:	4638      	mov	r0, r7
 80087d4:	f7ff ffc0 	bl	8008758 <sbrk_aligned>
 80087d8:	1c43      	adds	r3, r0, #1
 80087da:	4604      	mov	r4, r0
 80087dc:	d155      	bne.n	800888a <_malloc_r+0xf2>
 80087de:	f8d8 4000 	ldr.w	r4, [r8]
 80087e2:	4626      	mov	r6, r4
 80087e4:	2e00      	cmp	r6, #0
 80087e6:	d145      	bne.n	8008874 <_malloc_r+0xdc>
 80087e8:	2c00      	cmp	r4, #0
 80087ea:	d048      	beq.n	800887e <_malloc_r+0xe6>
 80087ec:	6823      	ldr	r3, [r4, #0]
 80087ee:	4631      	mov	r1, r6
 80087f0:	4638      	mov	r0, r7
 80087f2:	eb04 0903 	add.w	r9, r4, r3
 80087f6:	f000 fb7b 	bl	8008ef0 <_sbrk_r>
 80087fa:	4581      	cmp	r9, r0
 80087fc:	d13f      	bne.n	800887e <_malloc_r+0xe6>
 80087fe:	6821      	ldr	r1, [r4, #0]
 8008800:	1a6d      	subs	r5, r5, r1
 8008802:	4629      	mov	r1, r5
 8008804:	4638      	mov	r0, r7
 8008806:	f7ff ffa7 	bl	8008758 <sbrk_aligned>
 800880a:	3001      	adds	r0, #1
 800880c:	d037      	beq.n	800887e <_malloc_r+0xe6>
 800880e:	6823      	ldr	r3, [r4, #0]
 8008810:	442b      	add	r3, r5
 8008812:	6023      	str	r3, [r4, #0]
 8008814:	f8d8 3000 	ldr.w	r3, [r8]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d038      	beq.n	800888e <_malloc_r+0xf6>
 800881c:	685a      	ldr	r2, [r3, #4]
 800881e:	42a2      	cmp	r2, r4
 8008820:	d12b      	bne.n	800887a <_malloc_r+0xe2>
 8008822:	2200      	movs	r2, #0
 8008824:	605a      	str	r2, [r3, #4]
 8008826:	e00f      	b.n	8008848 <_malloc_r+0xb0>
 8008828:	6822      	ldr	r2, [r4, #0]
 800882a:	1b52      	subs	r2, r2, r5
 800882c:	d41f      	bmi.n	800886e <_malloc_r+0xd6>
 800882e:	2a0b      	cmp	r2, #11
 8008830:	d917      	bls.n	8008862 <_malloc_r+0xca>
 8008832:	1961      	adds	r1, r4, r5
 8008834:	42a3      	cmp	r3, r4
 8008836:	6025      	str	r5, [r4, #0]
 8008838:	bf18      	it	ne
 800883a:	6059      	strne	r1, [r3, #4]
 800883c:	6863      	ldr	r3, [r4, #4]
 800883e:	bf08      	it	eq
 8008840:	f8c8 1000 	streq.w	r1, [r8]
 8008844:	5162      	str	r2, [r4, r5]
 8008846:	604b      	str	r3, [r1, #4]
 8008848:	4638      	mov	r0, r7
 800884a:	f104 060b 	add.w	r6, r4, #11
 800884e:	f000 f829 	bl	80088a4 <__malloc_unlock>
 8008852:	f026 0607 	bic.w	r6, r6, #7
 8008856:	1d23      	adds	r3, r4, #4
 8008858:	1af2      	subs	r2, r6, r3
 800885a:	d0ae      	beq.n	80087ba <_malloc_r+0x22>
 800885c:	1b9b      	subs	r3, r3, r6
 800885e:	50a3      	str	r3, [r4, r2]
 8008860:	e7ab      	b.n	80087ba <_malloc_r+0x22>
 8008862:	42a3      	cmp	r3, r4
 8008864:	6862      	ldr	r2, [r4, #4]
 8008866:	d1dd      	bne.n	8008824 <_malloc_r+0x8c>
 8008868:	f8c8 2000 	str.w	r2, [r8]
 800886c:	e7ec      	b.n	8008848 <_malloc_r+0xb0>
 800886e:	4623      	mov	r3, r4
 8008870:	6864      	ldr	r4, [r4, #4]
 8008872:	e7ac      	b.n	80087ce <_malloc_r+0x36>
 8008874:	4634      	mov	r4, r6
 8008876:	6876      	ldr	r6, [r6, #4]
 8008878:	e7b4      	b.n	80087e4 <_malloc_r+0x4c>
 800887a:	4613      	mov	r3, r2
 800887c:	e7cc      	b.n	8008818 <_malloc_r+0x80>
 800887e:	230c      	movs	r3, #12
 8008880:	603b      	str	r3, [r7, #0]
 8008882:	4638      	mov	r0, r7
 8008884:	f000 f80e 	bl	80088a4 <__malloc_unlock>
 8008888:	e797      	b.n	80087ba <_malloc_r+0x22>
 800888a:	6025      	str	r5, [r4, #0]
 800888c:	e7dc      	b.n	8008848 <_malloc_r+0xb0>
 800888e:	605b      	str	r3, [r3, #4]
 8008890:	deff      	udf	#255	; 0xff
 8008892:	bf00      	nop
 8008894:	20001f34 	.word	0x20001f34

08008898 <__malloc_lock>:
 8008898:	4801      	ldr	r0, [pc, #4]	; (80088a0 <__malloc_lock+0x8>)
 800889a:	f000 bb76 	b.w	8008f8a <__retarget_lock_acquire_recursive>
 800889e:	bf00      	nop
 80088a0:	2000207c 	.word	0x2000207c

080088a4 <__malloc_unlock>:
 80088a4:	4801      	ldr	r0, [pc, #4]	; (80088ac <__malloc_unlock+0x8>)
 80088a6:	f000 bb71 	b.w	8008f8c <__retarget_lock_release_recursive>
 80088aa:	bf00      	nop
 80088ac:	2000207c 	.word	0x2000207c

080088b0 <malloc_usable_size>:
 80088b0:	4b02      	ldr	r3, [pc, #8]	; (80088bc <malloc_usable_size+0xc>)
 80088b2:	4601      	mov	r1, r0
 80088b4:	6818      	ldr	r0, [r3, #0]
 80088b6:	f000 bbb7 	b.w	8009028 <_malloc_usable_size_r>
 80088ba:	bf00      	nop
 80088bc:	20000088 	.word	0x20000088

080088c0 <__sflush_r>:
 80088c0:	898a      	ldrh	r2, [r1, #12]
 80088c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088c6:	4605      	mov	r5, r0
 80088c8:	0710      	lsls	r0, r2, #28
 80088ca:	460c      	mov	r4, r1
 80088cc:	d458      	bmi.n	8008980 <__sflush_r+0xc0>
 80088ce:	684b      	ldr	r3, [r1, #4]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	dc05      	bgt.n	80088e0 <__sflush_r+0x20>
 80088d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	dc02      	bgt.n	80088e0 <__sflush_r+0x20>
 80088da:	2000      	movs	r0, #0
 80088dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80088e2:	2e00      	cmp	r6, #0
 80088e4:	d0f9      	beq.n	80088da <__sflush_r+0x1a>
 80088e6:	2300      	movs	r3, #0
 80088e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80088ec:	682f      	ldr	r7, [r5, #0]
 80088ee:	6a21      	ldr	r1, [r4, #32]
 80088f0:	602b      	str	r3, [r5, #0]
 80088f2:	d032      	beq.n	800895a <__sflush_r+0x9a>
 80088f4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80088f6:	89a3      	ldrh	r3, [r4, #12]
 80088f8:	075a      	lsls	r2, r3, #29
 80088fa:	d505      	bpl.n	8008908 <__sflush_r+0x48>
 80088fc:	6863      	ldr	r3, [r4, #4]
 80088fe:	1ac0      	subs	r0, r0, r3
 8008900:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008902:	b10b      	cbz	r3, 8008908 <__sflush_r+0x48>
 8008904:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008906:	1ac0      	subs	r0, r0, r3
 8008908:	2300      	movs	r3, #0
 800890a:	4602      	mov	r2, r0
 800890c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800890e:	6a21      	ldr	r1, [r4, #32]
 8008910:	4628      	mov	r0, r5
 8008912:	47b0      	blx	r6
 8008914:	1c43      	adds	r3, r0, #1
 8008916:	89a3      	ldrh	r3, [r4, #12]
 8008918:	d106      	bne.n	8008928 <__sflush_r+0x68>
 800891a:	6829      	ldr	r1, [r5, #0]
 800891c:	291d      	cmp	r1, #29
 800891e:	d82b      	bhi.n	8008978 <__sflush_r+0xb8>
 8008920:	4a29      	ldr	r2, [pc, #164]	; (80089c8 <__sflush_r+0x108>)
 8008922:	410a      	asrs	r2, r1
 8008924:	07d6      	lsls	r6, r2, #31
 8008926:	d427      	bmi.n	8008978 <__sflush_r+0xb8>
 8008928:	2200      	movs	r2, #0
 800892a:	6062      	str	r2, [r4, #4]
 800892c:	04d9      	lsls	r1, r3, #19
 800892e:	6922      	ldr	r2, [r4, #16]
 8008930:	6022      	str	r2, [r4, #0]
 8008932:	d504      	bpl.n	800893e <__sflush_r+0x7e>
 8008934:	1c42      	adds	r2, r0, #1
 8008936:	d101      	bne.n	800893c <__sflush_r+0x7c>
 8008938:	682b      	ldr	r3, [r5, #0]
 800893a:	b903      	cbnz	r3, 800893e <__sflush_r+0x7e>
 800893c:	6560      	str	r0, [r4, #84]	; 0x54
 800893e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008940:	602f      	str	r7, [r5, #0]
 8008942:	2900      	cmp	r1, #0
 8008944:	d0c9      	beq.n	80088da <__sflush_r+0x1a>
 8008946:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800894a:	4299      	cmp	r1, r3
 800894c:	d002      	beq.n	8008954 <__sflush_r+0x94>
 800894e:	4628      	mov	r0, r5
 8008950:	f000 fb1e 	bl	8008f90 <_free_r>
 8008954:	2000      	movs	r0, #0
 8008956:	6360      	str	r0, [r4, #52]	; 0x34
 8008958:	e7c0      	b.n	80088dc <__sflush_r+0x1c>
 800895a:	2301      	movs	r3, #1
 800895c:	4628      	mov	r0, r5
 800895e:	47b0      	blx	r6
 8008960:	1c41      	adds	r1, r0, #1
 8008962:	d1c8      	bne.n	80088f6 <__sflush_r+0x36>
 8008964:	682b      	ldr	r3, [r5, #0]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d0c5      	beq.n	80088f6 <__sflush_r+0x36>
 800896a:	2b1d      	cmp	r3, #29
 800896c:	d001      	beq.n	8008972 <__sflush_r+0xb2>
 800896e:	2b16      	cmp	r3, #22
 8008970:	d101      	bne.n	8008976 <__sflush_r+0xb6>
 8008972:	602f      	str	r7, [r5, #0]
 8008974:	e7b1      	b.n	80088da <__sflush_r+0x1a>
 8008976:	89a3      	ldrh	r3, [r4, #12]
 8008978:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800897c:	81a3      	strh	r3, [r4, #12]
 800897e:	e7ad      	b.n	80088dc <__sflush_r+0x1c>
 8008980:	690f      	ldr	r7, [r1, #16]
 8008982:	2f00      	cmp	r7, #0
 8008984:	d0a9      	beq.n	80088da <__sflush_r+0x1a>
 8008986:	0793      	lsls	r3, r2, #30
 8008988:	680e      	ldr	r6, [r1, #0]
 800898a:	bf08      	it	eq
 800898c:	694b      	ldreq	r3, [r1, #20]
 800898e:	600f      	str	r7, [r1, #0]
 8008990:	bf18      	it	ne
 8008992:	2300      	movne	r3, #0
 8008994:	eba6 0807 	sub.w	r8, r6, r7
 8008998:	608b      	str	r3, [r1, #8]
 800899a:	f1b8 0f00 	cmp.w	r8, #0
 800899e:	dd9c      	ble.n	80088da <__sflush_r+0x1a>
 80089a0:	6a21      	ldr	r1, [r4, #32]
 80089a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80089a4:	4643      	mov	r3, r8
 80089a6:	463a      	mov	r2, r7
 80089a8:	4628      	mov	r0, r5
 80089aa:	47b0      	blx	r6
 80089ac:	2800      	cmp	r0, #0
 80089ae:	dc06      	bgt.n	80089be <__sflush_r+0xfe>
 80089b0:	89a3      	ldrh	r3, [r4, #12]
 80089b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089b6:	81a3      	strh	r3, [r4, #12]
 80089b8:	f04f 30ff 	mov.w	r0, #4294967295
 80089bc:	e78e      	b.n	80088dc <__sflush_r+0x1c>
 80089be:	4407      	add	r7, r0
 80089c0:	eba8 0800 	sub.w	r8, r8, r0
 80089c4:	e7e9      	b.n	800899a <__sflush_r+0xda>
 80089c6:	bf00      	nop
 80089c8:	dfbffffe 	.word	0xdfbffffe

080089cc <_fflush_r>:
 80089cc:	b538      	push	{r3, r4, r5, lr}
 80089ce:	690b      	ldr	r3, [r1, #16]
 80089d0:	4605      	mov	r5, r0
 80089d2:	460c      	mov	r4, r1
 80089d4:	b913      	cbnz	r3, 80089dc <_fflush_r+0x10>
 80089d6:	2500      	movs	r5, #0
 80089d8:	4628      	mov	r0, r5
 80089da:	bd38      	pop	{r3, r4, r5, pc}
 80089dc:	b118      	cbz	r0, 80089e6 <_fflush_r+0x1a>
 80089de:	6a03      	ldr	r3, [r0, #32]
 80089e0:	b90b      	cbnz	r3, 80089e6 <_fflush_r+0x1a>
 80089e2:	f000 f8a7 	bl	8008b34 <__sinit>
 80089e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d0f3      	beq.n	80089d6 <_fflush_r+0xa>
 80089ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80089f0:	07d0      	lsls	r0, r2, #31
 80089f2:	d404      	bmi.n	80089fe <_fflush_r+0x32>
 80089f4:	0599      	lsls	r1, r3, #22
 80089f6:	d402      	bmi.n	80089fe <_fflush_r+0x32>
 80089f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089fa:	f000 fac6 	bl	8008f8a <__retarget_lock_acquire_recursive>
 80089fe:	4628      	mov	r0, r5
 8008a00:	4621      	mov	r1, r4
 8008a02:	f7ff ff5d 	bl	80088c0 <__sflush_r>
 8008a06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a08:	07da      	lsls	r2, r3, #31
 8008a0a:	4605      	mov	r5, r0
 8008a0c:	d4e4      	bmi.n	80089d8 <_fflush_r+0xc>
 8008a0e:	89a3      	ldrh	r3, [r4, #12]
 8008a10:	059b      	lsls	r3, r3, #22
 8008a12:	d4e1      	bmi.n	80089d8 <_fflush_r+0xc>
 8008a14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a16:	f000 fab9 	bl	8008f8c <__retarget_lock_release_recursive>
 8008a1a:	e7dd      	b.n	80089d8 <_fflush_r+0xc>

08008a1c <std>:
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	b510      	push	{r4, lr}
 8008a20:	4604      	mov	r4, r0
 8008a22:	e9c0 3300 	strd	r3, r3, [r0]
 8008a26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008a2a:	6083      	str	r3, [r0, #8]
 8008a2c:	8181      	strh	r1, [r0, #12]
 8008a2e:	6643      	str	r3, [r0, #100]	; 0x64
 8008a30:	81c2      	strh	r2, [r0, #14]
 8008a32:	6183      	str	r3, [r0, #24]
 8008a34:	4619      	mov	r1, r3
 8008a36:	2208      	movs	r2, #8
 8008a38:	305c      	adds	r0, #92	; 0x5c
 8008a3a:	f000 f9f7 	bl	8008e2c <memset>
 8008a3e:	4b0d      	ldr	r3, [pc, #52]	; (8008a74 <std+0x58>)
 8008a40:	6263      	str	r3, [r4, #36]	; 0x24
 8008a42:	4b0d      	ldr	r3, [pc, #52]	; (8008a78 <std+0x5c>)
 8008a44:	62a3      	str	r3, [r4, #40]	; 0x28
 8008a46:	4b0d      	ldr	r3, [pc, #52]	; (8008a7c <std+0x60>)
 8008a48:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008a4a:	4b0d      	ldr	r3, [pc, #52]	; (8008a80 <std+0x64>)
 8008a4c:	6323      	str	r3, [r4, #48]	; 0x30
 8008a4e:	4b0d      	ldr	r3, [pc, #52]	; (8008a84 <std+0x68>)
 8008a50:	6224      	str	r4, [r4, #32]
 8008a52:	429c      	cmp	r4, r3
 8008a54:	d006      	beq.n	8008a64 <std+0x48>
 8008a56:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008a5a:	4294      	cmp	r4, r2
 8008a5c:	d002      	beq.n	8008a64 <std+0x48>
 8008a5e:	33d0      	adds	r3, #208	; 0xd0
 8008a60:	429c      	cmp	r4, r3
 8008a62:	d105      	bne.n	8008a70 <std+0x54>
 8008a64:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008a68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a6c:	f000 ba8c 	b.w	8008f88 <__retarget_lock_init_recursive>
 8008a70:	bd10      	pop	{r4, pc}
 8008a72:	bf00      	nop
 8008a74:	08008c7d 	.word	0x08008c7d
 8008a78:	08008c9f 	.word	0x08008c9f
 8008a7c:	08008cd7 	.word	0x08008cd7
 8008a80:	08008cfb 	.word	0x08008cfb
 8008a84:	20001f3c 	.word	0x20001f3c

08008a88 <stdio_exit_handler>:
 8008a88:	4a02      	ldr	r2, [pc, #8]	; (8008a94 <stdio_exit_handler+0xc>)
 8008a8a:	4903      	ldr	r1, [pc, #12]	; (8008a98 <stdio_exit_handler+0x10>)
 8008a8c:	4803      	ldr	r0, [pc, #12]	; (8008a9c <stdio_exit_handler+0x14>)
 8008a8e:	f000 b869 	b.w	8008b64 <_fwalk_sglue>
 8008a92:	bf00      	nop
 8008a94:	20000030 	.word	0x20000030
 8008a98:	080089cd 	.word	0x080089cd
 8008a9c:	2000003c 	.word	0x2000003c

08008aa0 <cleanup_stdio>:
 8008aa0:	6841      	ldr	r1, [r0, #4]
 8008aa2:	4b0c      	ldr	r3, [pc, #48]	; (8008ad4 <cleanup_stdio+0x34>)
 8008aa4:	4299      	cmp	r1, r3
 8008aa6:	b510      	push	{r4, lr}
 8008aa8:	4604      	mov	r4, r0
 8008aaa:	d001      	beq.n	8008ab0 <cleanup_stdio+0x10>
 8008aac:	f7ff ff8e 	bl	80089cc <_fflush_r>
 8008ab0:	68a1      	ldr	r1, [r4, #8]
 8008ab2:	4b09      	ldr	r3, [pc, #36]	; (8008ad8 <cleanup_stdio+0x38>)
 8008ab4:	4299      	cmp	r1, r3
 8008ab6:	d002      	beq.n	8008abe <cleanup_stdio+0x1e>
 8008ab8:	4620      	mov	r0, r4
 8008aba:	f7ff ff87 	bl	80089cc <_fflush_r>
 8008abe:	68e1      	ldr	r1, [r4, #12]
 8008ac0:	4b06      	ldr	r3, [pc, #24]	; (8008adc <cleanup_stdio+0x3c>)
 8008ac2:	4299      	cmp	r1, r3
 8008ac4:	d004      	beq.n	8008ad0 <cleanup_stdio+0x30>
 8008ac6:	4620      	mov	r0, r4
 8008ac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008acc:	f7ff bf7e 	b.w	80089cc <_fflush_r>
 8008ad0:	bd10      	pop	{r4, pc}
 8008ad2:	bf00      	nop
 8008ad4:	20001f3c 	.word	0x20001f3c
 8008ad8:	20001fa4 	.word	0x20001fa4
 8008adc:	2000200c 	.word	0x2000200c

08008ae0 <global_stdio_init.part.0>:
 8008ae0:	b510      	push	{r4, lr}
 8008ae2:	4b0b      	ldr	r3, [pc, #44]	; (8008b10 <global_stdio_init.part.0+0x30>)
 8008ae4:	4c0b      	ldr	r4, [pc, #44]	; (8008b14 <global_stdio_init.part.0+0x34>)
 8008ae6:	4a0c      	ldr	r2, [pc, #48]	; (8008b18 <global_stdio_init.part.0+0x38>)
 8008ae8:	601a      	str	r2, [r3, #0]
 8008aea:	4620      	mov	r0, r4
 8008aec:	2200      	movs	r2, #0
 8008aee:	2104      	movs	r1, #4
 8008af0:	f7ff ff94 	bl	8008a1c <std>
 8008af4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008af8:	2201      	movs	r2, #1
 8008afa:	2109      	movs	r1, #9
 8008afc:	f7ff ff8e 	bl	8008a1c <std>
 8008b00:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008b04:	2202      	movs	r2, #2
 8008b06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b0a:	2112      	movs	r1, #18
 8008b0c:	f7ff bf86 	b.w	8008a1c <std>
 8008b10:	20002074 	.word	0x20002074
 8008b14:	20001f3c 	.word	0x20001f3c
 8008b18:	08008a89 	.word	0x08008a89

08008b1c <__sfp_lock_acquire>:
 8008b1c:	4801      	ldr	r0, [pc, #4]	; (8008b24 <__sfp_lock_acquire+0x8>)
 8008b1e:	f000 ba34 	b.w	8008f8a <__retarget_lock_acquire_recursive>
 8008b22:	bf00      	nop
 8008b24:	2000207d 	.word	0x2000207d

08008b28 <__sfp_lock_release>:
 8008b28:	4801      	ldr	r0, [pc, #4]	; (8008b30 <__sfp_lock_release+0x8>)
 8008b2a:	f000 ba2f 	b.w	8008f8c <__retarget_lock_release_recursive>
 8008b2e:	bf00      	nop
 8008b30:	2000207d 	.word	0x2000207d

08008b34 <__sinit>:
 8008b34:	b510      	push	{r4, lr}
 8008b36:	4604      	mov	r4, r0
 8008b38:	f7ff fff0 	bl	8008b1c <__sfp_lock_acquire>
 8008b3c:	6a23      	ldr	r3, [r4, #32]
 8008b3e:	b11b      	cbz	r3, 8008b48 <__sinit+0x14>
 8008b40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b44:	f7ff bff0 	b.w	8008b28 <__sfp_lock_release>
 8008b48:	4b04      	ldr	r3, [pc, #16]	; (8008b5c <__sinit+0x28>)
 8008b4a:	6223      	str	r3, [r4, #32]
 8008b4c:	4b04      	ldr	r3, [pc, #16]	; (8008b60 <__sinit+0x2c>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d1f5      	bne.n	8008b40 <__sinit+0xc>
 8008b54:	f7ff ffc4 	bl	8008ae0 <global_stdio_init.part.0>
 8008b58:	e7f2      	b.n	8008b40 <__sinit+0xc>
 8008b5a:	bf00      	nop
 8008b5c:	08008aa1 	.word	0x08008aa1
 8008b60:	20002074 	.word	0x20002074

08008b64 <_fwalk_sglue>:
 8008b64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b68:	4607      	mov	r7, r0
 8008b6a:	4688      	mov	r8, r1
 8008b6c:	4614      	mov	r4, r2
 8008b6e:	2600      	movs	r6, #0
 8008b70:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008b74:	f1b9 0901 	subs.w	r9, r9, #1
 8008b78:	d505      	bpl.n	8008b86 <_fwalk_sglue+0x22>
 8008b7a:	6824      	ldr	r4, [r4, #0]
 8008b7c:	2c00      	cmp	r4, #0
 8008b7e:	d1f7      	bne.n	8008b70 <_fwalk_sglue+0xc>
 8008b80:	4630      	mov	r0, r6
 8008b82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b86:	89ab      	ldrh	r3, [r5, #12]
 8008b88:	2b01      	cmp	r3, #1
 8008b8a:	d907      	bls.n	8008b9c <_fwalk_sglue+0x38>
 8008b8c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008b90:	3301      	adds	r3, #1
 8008b92:	d003      	beq.n	8008b9c <_fwalk_sglue+0x38>
 8008b94:	4629      	mov	r1, r5
 8008b96:	4638      	mov	r0, r7
 8008b98:	47c0      	blx	r8
 8008b9a:	4306      	orrs	r6, r0
 8008b9c:	3568      	adds	r5, #104	; 0x68
 8008b9e:	e7e9      	b.n	8008b74 <_fwalk_sglue+0x10>

08008ba0 <iprintf>:
 8008ba0:	b40f      	push	{r0, r1, r2, r3}
 8008ba2:	b507      	push	{r0, r1, r2, lr}
 8008ba4:	4906      	ldr	r1, [pc, #24]	; (8008bc0 <iprintf+0x20>)
 8008ba6:	ab04      	add	r3, sp, #16
 8008ba8:	6808      	ldr	r0, [r1, #0]
 8008baa:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bae:	6881      	ldr	r1, [r0, #8]
 8008bb0:	9301      	str	r3, [sp, #4]
 8008bb2:	f000 fa6b 	bl	800908c <_vfiprintf_r>
 8008bb6:	b003      	add	sp, #12
 8008bb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008bbc:	b004      	add	sp, #16
 8008bbe:	4770      	bx	lr
 8008bc0:	20000088 	.word	0x20000088

08008bc4 <_puts_r>:
 8008bc4:	6a03      	ldr	r3, [r0, #32]
 8008bc6:	b570      	push	{r4, r5, r6, lr}
 8008bc8:	6884      	ldr	r4, [r0, #8]
 8008bca:	4605      	mov	r5, r0
 8008bcc:	460e      	mov	r6, r1
 8008bce:	b90b      	cbnz	r3, 8008bd4 <_puts_r+0x10>
 8008bd0:	f7ff ffb0 	bl	8008b34 <__sinit>
 8008bd4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008bd6:	07db      	lsls	r3, r3, #31
 8008bd8:	d405      	bmi.n	8008be6 <_puts_r+0x22>
 8008bda:	89a3      	ldrh	r3, [r4, #12]
 8008bdc:	0598      	lsls	r0, r3, #22
 8008bde:	d402      	bmi.n	8008be6 <_puts_r+0x22>
 8008be0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008be2:	f000 f9d2 	bl	8008f8a <__retarget_lock_acquire_recursive>
 8008be6:	89a3      	ldrh	r3, [r4, #12]
 8008be8:	0719      	lsls	r1, r3, #28
 8008bea:	d513      	bpl.n	8008c14 <_puts_r+0x50>
 8008bec:	6923      	ldr	r3, [r4, #16]
 8008bee:	b18b      	cbz	r3, 8008c14 <_puts_r+0x50>
 8008bf0:	3e01      	subs	r6, #1
 8008bf2:	68a3      	ldr	r3, [r4, #8]
 8008bf4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008bf8:	3b01      	subs	r3, #1
 8008bfa:	60a3      	str	r3, [r4, #8]
 8008bfc:	b9e9      	cbnz	r1, 8008c3a <_puts_r+0x76>
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	da2e      	bge.n	8008c60 <_puts_r+0x9c>
 8008c02:	4622      	mov	r2, r4
 8008c04:	210a      	movs	r1, #10
 8008c06:	4628      	mov	r0, r5
 8008c08:	f000 f87b 	bl	8008d02 <__swbuf_r>
 8008c0c:	3001      	adds	r0, #1
 8008c0e:	d007      	beq.n	8008c20 <_puts_r+0x5c>
 8008c10:	250a      	movs	r5, #10
 8008c12:	e007      	b.n	8008c24 <_puts_r+0x60>
 8008c14:	4621      	mov	r1, r4
 8008c16:	4628      	mov	r0, r5
 8008c18:	f000 f8b0 	bl	8008d7c <__swsetup_r>
 8008c1c:	2800      	cmp	r0, #0
 8008c1e:	d0e7      	beq.n	8008bf0 <_puts_r+0x2c>
 8008c20:	f04f 35ff 	mov.w	r5, #4294967295
 8008c24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008c26:	07da      	lsls	r2, r3, #31
 8008c28:	d405      	bmi.n	8008c36 <_puts_r+0x72>
 8008c2a:	89a3      	ldrh	r3, [r4, #12]
 8008c2c:	059b      	lsls	r3, r3, #22
 8008c2e:	d402      	bmi.n	8008c36 <_puts_r+0x72>
 8008c30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c32:	f000 f9ab 	bl	8008f8c <__retarget_lock_release_recursive>
 8008c36:	4628      	mov	r0, r5
 8008c38:	bd70      	pop	{r4, r5, r6, pc}
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	da04      	bge.n	8008c48 <_puts_r+0x84>
 8008c3e:	69a2      	ldr	r2, [r4, #24]
 8008c40:	429a      	cmp	r2, r3
 8008c42:	dc06      	bgt.n	8008c52 <_puts_r+0x8e>
 8008c44:	290a      	cmp	r1, #10
 8008c46:	d004      	beq.n	8008c52 <_puts_r+0x8e>
 8008c48:	6823      	ldr	r3, [r4, #0]
 8008c4a:	1c5a      	adds	r2, r3, #1
 8008c4c:	6022      	str	r2, [r4, #0]
 8008c4e:	7019      	strb	r1, [r3, #0]
 8008c50:	e7cf      	b.n	8008bf2 <_puts_r+0x2e>
 8008c52:	4622      	mov	r2, r4
 8008c54:	4628      	mov	r0, r5
 8008c56:	f000 f854 	bl	8008d02 <__swbuf_r>
 8008c5a:	3001      	adds	r0, #1
 8008c5c:	d1c9      	bne.n	8008bf2 <_puts_r+0x2e>
 8008c5e:	e7df      	b.n	8008c20 <_puts_r+0x5c>
 8008c60:	6823      	ldr	r3, [r4, #0]
 8008c62:	250a      	movs	r5, #10
 8008c64:	1c5a      	adds	r2, r3, #1
 8008c66:	6022      	str	r2, [r4, #0]
 8008c68:	701d      	strb	r5, [r3, #0]
 8008c6a:	e7db      	b.n	8008c24 <_puts_r+0x60>

08008c6c <puts>:
 8008c6c:	4b02      	ldr	r3, [pc, #8]	; (8008c78 <puts+0xc>)
 8008c6e:	4601      	mov	r1, r0
 8008c70:	6818      	ldr	r0, [r3, #0]
 8008c72:	f7ff bfa7 	b.w	8008bc4 <_puts_r>
 8008c76:	bf00      	nop
 8008c78:	20000088 	.word	0x20000088

08008c7c <__sread>:
 8008c7c:	b510      	push	{r4, lr}
 8008c7e:	460c      	mov	r4, r1
 8008c80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c84:	f000 f922 	bl	8008ecc <_read_r>
 8008c88:	2800      	cmp	r0, #0
 8008c8a:	bfab      	itete	ge
 8008c8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008c8e:	89a3      	ldrhlt	r3, [r4, #12]
 8008c90:	181b      	addge	r3, r3, r0
 8008c92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008c96:	bfac      	ite	ge
 8008c98:	6563      	strge	r3, [r4, #84]	; 0x54
 8008c9a:	81a3      	strhlt	r3, [r4, #12]
 8008c9c:	bd10      	pop	{r4, pc}

08008c9e <__swrite>:
 8008c9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ca2:	461f      	mov	r7, r3
 8008ca4:	898b      	ldrh	r3, [r1, #12]
 8008ca6:	05db      	lsls	r3, r3, #23
 8008ca8:	4605      	mov	r5, r0
 8008caa:	460c      	mov	r4, r1
 8008cac:	4616      	mov	r6, r2
 8008cae:	d505      	bpl.n	8008cbc <__swrite+0x1e>
 8008cb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cb4:	2302      	movs	r3, #2
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	f000 f8f6 	bl	8008ea8 <_lseek_r>
 8008cbc:	89a3      	ldrh	r3, [r4, #12]
 8008cbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008cc2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008cc6:	81a3      	strh	r3, [r4, #12]
 8008cc8:	4632      	mov	r2, r6
 8008cca:	463b      	mov	r3, r7
 8008ccc:	4628      	mov	r0, r5
 8008cce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008cd2:	f000 b91d 	b.w	8008f10 <_write_r>

08008cd6 <__sseek>:
 8008cd6:	b510      	push	{r4, lr}
 8008cd8:	460c      	mov	r4, r1
 8008cda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cde:	f000 f8e3 	bl	8008ea8 <_lseek_r>
 8008ce2:	1c43      	adds	r3, r0, #1
 8008ce4:	89a3      	ldrh	r3, [r4, #12]
 8008ce6:	bf15      	itete	ne
 8008ce8:	6560      	strne	r0, [r4, #84]	; 0x54
 8008cea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008cee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008cf2:	81a3      	strheq	r3, [r4, #12]
 8008cf4:	bf18      	it	ne
 8008cf6:	81a3      	strhne	r3, [r4, #12]
 8008cf8:	bd10      	pop	{r4, pc}

08008cfa <__sclose>:
 8008cfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cfe:	f000 b8c3 	b.w	8008e88 <_close_r>

08008d02 <__swbuf_r>:
 8008d02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d04:	460e      	mov	r6, r1
 8008d06:	4614      	mov	r4, r2
 8008d08:	4605      	mov	r5, r0
 8008d0a:	b118      	cbz	r0, 8008d14 <__swbuf_r+0x12>
 8008d0c:	6a03      	ldr	r3, [r0, #32]
 8008d0e:	b90b      	cbnz	r3, 8008d14 <__swbuf_r+0x12>
 8008d10:	f7ff ff10 	bl	8008b34 <__sinit>
 8008d14:	69a3      	ldr	r3, [r4, #24]
 8008d16:	60a3      	str	r3, [r4, #8]
 8008d18:	89a3      	ldrh	r3, [r4, #12]
 8008d1a:	071a      	lsls	r2, r3, #28
 8008d1c:	d525      	bpl.n	8008d6a <__swbuf_r+0x68>
 8008d1e:	6923      	ldr	r3, [r4, #16]
 8008d20:	b31b      	cbz	r3, 8008d6a <__swbuf_r+0x68>
 8008d22:	6823      	ldr	r3, [r4, #0]
 8008d24:	6922      	ldr	r2, [r4, #16]
 8008d26:	1a98      	subs	r0, r3, r2
 8008d28:	6963      	ldr	r3, [r4, #20]
 8008d2a:	b2f6      	uxtb	r6, r6
 8008d2c:	4283      	cmp	r3, r0
 8008d2e:	4637      	mov	r7, r6
 8008d30:	dc04      	bgt.n	8008d3c <__swbuf_r+0x3a>
 8008d32:	4621      	mov	r1, r4
 8008d34:	4628      	mov	r0, r5
 8008d36:	f7ff fe49 	bl	80089cc <_fflush_r>
 8008d3a:	b9e0      	cbnz	r0, 8008d76 <__swbuf_r+0x74>
 8008d3c:	68a3      	ldr	r3, [r4, #8]
 8008d3e:	3b01      	subs	r3, #1
 8008d40:	60a3      	str	r3, [r4, #8]
 8008d42:	6823      	ldr	r3, [r4, #0]
 8008d44:	1c5a      	adds	r2, r3, #1
 8008d46:	6022      	str	r2, [r4, #0]
 8008d48:	701e      	strb	r6, [r3, #0]
 8008d4a:	6962      	ldr	r2, [r4, #20]
 8008d4c:	1c43      	adds	r3, r0, #1
 8008d4e:	429a      	cmp	r2, r3
 8008d50:	d004      	beq.n	8008d5c <__swbuf_r+0x5a>
 8008d52:	89a3      	ldrh	r3, [r4, #12]
 8008d54:	07db      	lsls	r3, r3, #31
 8008d56:	d506      	bpl.n	8008d66 <__swbuf_r+0x64>
 8008d58:	2e0a      	cmp	r6, #10
 8008d5a:	d104      	bne.n	8008d66 <__swbuf_r+0x64>
 8008d5c:	4621      	mov	r1, r4
 8008d5e:	4628      	mov	r0, r5
 8008d60:	f7ff fe34 	bl	80089cc <_fflush_r>
 8008d64:	b938      	cbnz	r0, 8008d76 <__swbuf_r+0x74>
 8008d66:	4638      	mov	r0, r7
 8008d68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d6a:	4621      	mov	r1, r4
 8008d6c:	4628      	mov	r0, r5
 8008d6e:	f000 f805 	bl	8008d7c <__swsetup_r>
 8008d72:	2800      	cmp	r0, #0
 8008d74:	d0d5      	beq.n	8008d22 <__swbuf_r+0x20>
 8008d76:	f04f 37ff 	mov.w	r7, #4294967295
 8008d7a:	e7f4      	b.n	8008d66 <__swbuf_r+0x64>

08008d7c <__swsetup_r>:
 8008d7c:	b538      	push	{r3, r4, r5, lr}
 8008d7e:	4b2a      	ldr	r3, [pc, #168]	; (8008e28 <__swsetup_r+0xac>)
 8008d80:	4605      	mov	r5, r0
 8008d82:	6818      	ldr	r0, [r3, #0]
 8008d84:	460c      	mov	r4, r1
 8008d86:	b118      	cbz	r0, 8008d90 <__swsetup_r+0x14>
 8008d88:	6a03      	ldr	r3, [r0, #32]
 8008d8a:	b90b      	cbnz	r3, 8008d90 <__swsetup_r+0x14>
 8008d8c:	f7ff fed2 	bl	8008b34 <__sinit>
 8008d90:	89a3      	ldrh	r3, [r4, #12]
 8008d92:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008d96:	0718      	lsls	r0, r3, #28
 8008d98:	d422      	bmi.n	8008de0 <__swsetup_r+0x64>
 8008d9a:	06d9      	lsls	r1, r3, #27
 8008d9c:	d407      	bmi.n	8008dae <__swsetup_r+0x32>
 8008d9e:	2309      	movs	r3, #9
 8008da0:	602b      	str	r3, [r5, #0]
 8008da2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008da6:	81a3      	strh	r3, [r4, #12]
 8008da8:	f04f 30ff 	mov.w	r0, #4294967295
 8008dac:	e034      	b.n	8008e18 <__swsetup_r+0x9c>
 8008dae:	0758      	lsls	r0, r3, #29
 8008db0:	d512      	bpl.n	8008dd8 <__swsetup_r+0x5c>
 8008db2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008db4:	b141      	cbz	r1, 8008dc8 <__swsetup_r+0x4c>
 8008db6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008dba:	4299      	cmp	r1, r3
 8008dbc:	d002      	beq.n	8008dc4 <__swsetup_r+0x48>
 8008dbe:	4628      	mov	r0, r5
 8008dc0:	f000 f8e6 	bl	8008f90 <_free_r>
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	6363      	str	r3, [r4, #52]	; 0x34
 8008dc8:	89a3      	ldrh	r3, [r4, #12]
 8008dca:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008dce:	81a3      	strh	r3, [r4, #12]
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	6063      	str	r3, [r4, #4]
 8008dd4:	6923      	ldr	r3, [r4, #16]
 8008dd6:	6023      	str	r3, [r4, #0]
 8008dd8:	89a3      	ldrh	r3, [r4, #12]
 8008dda:	f043 0308 	orr.w	r3, r3, #8
 8008dde:	81a3      	strh	r3, [r4, #12]
 8008de0:	6923      	ldr	r3, [r4, #16]
 8008de2:	b94b      	cbnz	r3, 8008df8 <__swsetup_r+0x7c>
 8008de4:	89a3      	ldrh	r3, [r4, #12]
 8008de6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008dea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008dee:	d003      	beq.n	8008df8 <__swsetup_r+0x7c>
 8008df0:	4621      	mov	r1, r4
 8008df2:	4628      	mov	r0, r5
 8008df4:	f000 fc1a 	bl	800962c <__smakebuf_r>
 8008df8:	89a0      	ldrh	r0, [r4, #12]
 8008dfa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008dfe:	f010 0301 	ands.w	r3, r0, #1
 8008e02:	d00a      	beq.n	8008e1a <__swsetup_r+0x9e>
 8008e04:	2300      	movs	r3, #0
 8008e06:	60a3      	str	r3, [r4, #8]
 8008e08:	6963      	ldr	r3, [r4, #20]
 8008e0a:	425b      	negs	r3, r3
 8008e0c:	61a3      	str	r3, [r4, #24]
 8008e0e:	6923      	ldr	r3, [r4, #16]
 8008e10:	b943      	cbnz	r3, 8008e24 <__swsetup_r+0xa8>
 8008e12:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008e16:	d1c4      	bne.n	8008da2 <__swsetup_r+0x26>
 8008e18:	bd38      	pop	{r3, r4, r5, pc}
 8008e1a:	0781      	lsls	r1, r0, #30
 8008e1c:	bf58      	it	pl
 8008e1e:	6963      	ldrpl	r3, [r4, #20]
 8008e20:	60a3      	str	r3, [r4, #8]
 8008e22:	e7f4      	b.n	8008e0e <__swsetup_r+0x92>
 8008e24:	2000      	movs	r0, #0
 8008e26:	e7f7      	b.n	8008e18 <__swsetup_r+0x9c>
 8008e28:	20000088 	.word	0x20000088

08008e2c <memset>:
 8008e2c:	4402      	add	r2, r0
 8008e2e:	4603      	mov	r3, r0
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d100      	bne.n	8008e36 <memset+0xa>
 8008e34:	4770      	bx	lr
 8008e36:	f803 1b01 	strb.w	r1, [r3], #1
 8008e3a:	e7f9      	b.n	8008e30 <memset+0x4>

08008e3c <strncmp>:
 8008e3c:	b510      	push	{r4, lr}
 8008e3e:	b16a      	cbz	r2, 8008e5c <strncmp+0x20>
 8008e40:	3901      	subs	r1, #1
 8008e42:	1884      	adds	r4, r0, r2
 8008e44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e48:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008e4c:	429a      	cmp	r2, r3
 8008e4e:	d103      	bne.n	8008e58 <strncmp+0x1c>
 8008e50:	42a0      	cmp	r0, r4
 8008e52:	d001      	beq.n	8008e58 <strncmp+0x1c>
 8008e54:	2a00      	cmp	r2, #0
 8008e56:	d1f5      	bne.n	8008e44 <strncmp+0x8>
 8008e58:	1ad0      	subs	r0, r2, r3
 8008e5a:	bd10      	pop	{r4, pc}
 8008e5c:	4610      	mov	r0, r2
 8008e5e:	e7fc      	b.n	8008e5a <strncmp+0x1e>

08008e60 <strncpy>:
 8008e60:	b510      	push	{r4, lr}
 8008e62:	3901      	subs	r1, #1
 8008e64:	4603      	mov	r3, r0
 8008e66:	b132      	cbz	r2, 8008e76 <strncpy+0x16>
 8008e68:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008e6c:	f803 4b01 	strb.w	r4, [r3], #1
 8008e70:	3a01      	subs	r2, #1
 8008e72:	2c00      	cmp	r4, #0
 8008e74:	d1f7      	bne.n	8008e66 <strncpy+0x6>
 8008e76:	441a      	add	r2, r3
 8008e78:	2100      	movs	r1, #0
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d100      	bne.n	8008e80 <strncpy+0x20>
 8008e7e:	bd10      	pop	{r4, pc}
 8008e80:	f803 1b01 	strb.w	r1, [r3], #1
 8008e84:	e7f9      	b.n	8008e7a <strncpy+0x1a>
	...

08008e88 <_close_r>:
 8008e88:	b538      	push	{r3, r4, r5, lr}
 8008e8a:	4d06      	ldr	r5, [pc, #24]	; (8008ea4 <_close_r+0x1c>)
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	4604      	mov	r4, r0
 8008e90:	4608      	mov	r0, r1
 8008e92:	602b      	str	r3, [r5, #0]
 8008e94:	f7f8 f836 	bl	8000f04 <_close>
 8008e98:	1c43      	adds	r3, r0, #1
 8008e9a:	d102      	bne.n	8008ea2 <_close_r+0x1a>
 8008e9c:	682b      	ldr	r3, [r5, #0]
 8008e9e:	b103      	cbz	r3, 8008ea2 <_close_r+0x1a>
 8008ea0:	6023      	str	r3, [r4, #0]
 8008ea2:	bd38      	pop	{r3, r4, r5, pc}
 8008ea4:	20002078 	.word	0x20002078

08008ea8 <_lseek_r>:
 8008ea8:	b538      	push	{r3, r4, r5, lr}
 8008eaa:	4d07      	ldr	r5, [pc, #28]	; (8008ec8 <_lseek_r+0x20>)
 8008eac:	4604      	mov	r4, r0
 8008eae:	4608      	mov	r0, r1
 8008eb0:	4611      	mov	r1, r2
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	602a      	str	r2, [r5, #0]
 8008eb6:	461a      	mov	r2, r3
 8008eb8:	f7f8 f82e 	bl	8000f18 <_lseek>
 8008ebc:	1c43      	adds	r3, r0, #1
 8008ebe:	d102      	bne.n	8008ec6 <_lseek_r+0x1e>
 8008ec0:	682b      	ldr	r3, [r5, #0]
 8008ec2:	b103      	cbz	r3, 8008ec6 <_lseek_r+0x1e>
 8008ec4:	6023      	str	r3, [r4, #0]
 8008ec6:	bd38      	pop	{r3, r4, r5, pc}
 8008ec8:	20002078 	.word	0x20002078

08008ecc <_read_r>:
 8008ecc:	b538      	push	{r3, r4, r5, lr}
 8008ece:	4d07      	ldr	r5, [pc, #28]	; (8008eec <_read_r+0x20>)
 8008ed0:	4604      	mov	r4, r0
 8008ed2:	4608      	mov	r0, r1
 8008ed4:	4611      	mov	r1, r2
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	602a      	str	r2, [r5, #0]
 8008eda:	461a      	mov	r2, r3
 8008edc:	f7f8 f802 	bl	8000ee4 <_read>
 8008ee0:	1c43      	adds	r3, r0, #1
 8008ee2:	d102      	bne.n	8008eea <_read_r+0x1e>
 8008ee4:	682b      	ldr	r3, [r5, #0]
 8008ee6:	b103      	cbz	r3, 8008eea <_read_r+0x1e>
 8008ee8:	6023      	str	r3, [r4, #0]
 8008eea:	bd38      	pop	{r3, r4, r5, pc}
 8008eec:	20002078 	.word	0x20002078

08008ef0 <_sbrk_r>:
 8008ef0:	b538      	push	{r3, r4, r5, lr}
 8008ef2:	4d06      	ldr	r5, [pc, #24]	; (8008f0c <_sbrk_r+0x1c>)
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	4604      	mov	r4, r0
 8008ef8:	4608      	mov	r0, r1
 8008efa:	602b      	str	r3, [r5, #0]
 8008efc:	f7f8 f80e 	bl	8000f1c <_sbrk>
 8008f00:	1c43      	adds	r3, r0, #1
 8008f02:	d102      	bne.n	8008f0a <_sbrk_r+0x1a>
 8008f04:	682b      	ldr	r3, [r5, #0]
 8008f06:	b103      	cbz	r3, 8008f0a <_sbrk_r+0x1a>
 8008f08:	6023      	str	r3, [r4, #0]
 8008f0a:	bd38      	pop	{r3, r4, r5, pc}
 8008f0c:	20002078 	.word	0x20002078

08008f10 <_write_r>:
 8008f10:	b538      	push	{r3, r4, r5, lr}
 8008f12:	4d07      	ldr	r5, [pc, #28]	; (8008f30 <_write_r+0x20>)
 8008f14:	4604      	mov	r4, r0
 8008f16:	4608      	mov	r0, r1
 8008f18:	4611      	mov	r1, r2
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	602a      	str	r2, [r5, #0]
 8008f1e:	461a      	mov	r2, r3
 8008f20:	f7f7 fbea 	bl	80006f8 <_write>
 8008f24:	1c43      	adds	r3, r0, #1
 8008f26:	d102      	bne.n	8008f2e <_write_r+0x1e>
 8008f28:	682b      	ldr	r3, [r5, #0]
 8008f2a:	b103      	cbz	r3, 8008f2e <_write_r+0x1e>
 8008f2c:	6023      	str	r3, [r4, #0]
 8008f2e:	bd38      	pop	{r3, r4, r5, pc}
 8008f30:	20002078 	.word	0x20002078

08008f34 <__errno>:
 8008f34:	4b01      	ldr	r3, [pc, #4]	; (8008f3c <__errno+0x8>)
 8008f36:	6818      	ldr	r0, [r3, #0]
 8008f38:	4770      	bx	lr
 8008f3a:	bf00      	nop
 8008f3c:	20000088 	.word	0x20000088

08008f40 <__libc_init_array>:
 8008f40:	b570      	push	{r4, r5, r6, lr}
 8008f42:	4d0d      	ldr	r5, [pc, #52]	; (8008f78 <__libc_init_array+0x38>)
 8008f44:	4c0d      	ldr	r4, [pc, #52]	; (8008f7c <__libc_init_array+0x3c>)
 8008f46:	1b64      	subs	r4, r4, r5
 8008f48:	10a4      	asrs	r4, r4, #2
 8008f4a:	2600      	movs	r6, #0
 8008f4c:	42a6      	cmp	r6, r4
 8008f4e:	d109      	bne.n	8008f64 <__libc_init_array+0x24>
 8008f50:	4d0b      	ldr	r5, [pc, #44]	; (8008f80 <__libc_init_array+0x40>)
 8008f52:	4c0c      	ldr	r4, [pc, #48]	; (8008f84 <__libc_init_array+0x44>)
 8008f54:	f000 fbc8 	bl	80096e8 <_init>
 8008f58:	1b64      	subs	r4, r4, r5
 8008f5a:	10a4      	asrs	r4, r4, #2
 8008f5c:	2600      	movs	r6, #0
 8008f5e:	42a6      	cmp	r6, r4
 8008f60:	d105      	bne.n	8008f6e <__libc_init_array+0x2e>
 8008f62:	bd70      	pop	{r4, r5, r6, pc}
 8008f64:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f68:	4798      	blx	r3
 8008f6a:	3601      	adds	r6, #1
 8008f6c:	e7ee      	b.n	8008f4c <__libc_init_array+0xc>
 8008f6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f72:	4798      	blx	r3
 8008f74:	3601      	adds	r6, #1
 8008f76:	e7f2      	b.n	8008f5e <__libc_init_array+0x1e>
 8008f78:	0800988c 	.word	0x0800988c
 8008f7c:	0800988c 	.word	0x0800988c
 8008f80:	0800988c 	.word	0x0800988c
 8008f84:	08009890 	.word	0x08009890

08008f88 <__retarget_lock_init_recursive>:
 8008f88:	4770      	bx	lr

08008f8a <__retarget_lock_acquire_recursive>:
 8008f8a:	4770      	bx	lr

08008f8c <__retarget_lock_release_recursive>:
 8008f8c:	4770      	bx	lr
	...

08008f90 <_free_r>:
 8008f90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f92:	2900      	cmp	r1, #0
 8008f94:	d044      	beq.n	8009020 <_free_r+0x90>
 8008f96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f9a:	9001      	str	r0, [sp, #4]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	f1a1 0404 	sub.w	r4, r1, #4
 8008fa2:	bfb8      	it	lt
 8008fa4:	18e4      	addlt	r4, r4, r3
 8008fa6:	f7ff fc77 	bl	8008898 <__malloc_lock>
 8008faa:	4a1e      	ldr	r2, [pc, #120]	; (8009024 <_free_r+0x94>)
 8008fac:	9801      	ldr	r0, [sp, #4]
 8008fae:	6813      	ldr	r3, [r2, #0]
 8008fb0:	b933      	cbnz	r3, 8008fc0 <_free_r+0x30>
 8008fb2:	6063      	str	r3, [r4, #4]
 8008fb4:	6014      	str	r4, [r2, #0]
 8008fb6:	b003      	add	sp, #12
 8008fb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008fbc:	f7ff bc72 	b.w	80088a4 <__malloc_unlock>
 8008fc0:	42a3      	cmp	r3, r4
 8008fc2:	d908      	bls.n	8008fd6 <_free_r+0x46>
 8008fc4:	6825      	ldr	r5, [r4, #0]
 8008fc6:	1961      	adds	r1, r4, r5
 8008fc8:	428b      	cmp	r3, r1
 8008fca:	bf01      	itttt	eq
 8008fcc:	6819      	ldreq	r1, [r3, #0]
 8008fce:	685b      	ldreq	r3, [r3, #4]
 8008fd0:	1949      	addeq	r1, r1, r5
 8008fd2:	6021      	streq	r1, [r4, #0]
 8008fd4:	e7ed      	b.n	8008fb2 <_free_r+0x22>
 8008fd6:	461a      	mov	r2, r3
 8008fd8:	685b      	ldr	r3, [r3, #4]
 8008fda:	b10b      	cbz	r3, 8008fe0 <_free_r+0x50>
 8008fdc:	42a3      	cmp	r3, r4
 8008fde:	d9fa      	bls.n	8008fd6 <_free_r+0x46>
 8008fe0:	6811      	ldr	r1, [r2, #0]
 8008fe2:	1855      	adds	r5, r2, r1
 8008fe4:	42a5      	cmp	r5, r4
 8008fe6:	d10b      	bne.n	8009000 <_free_r+0x70>
 8008fe8:	6824      	ldr	r4, [r4, #0]
 8008fea:	4421      	add	r1, r4
 8008fec:	1854      	adds	r4, r2, r1
 8008fee:	42a3      	cmp	r3, r4
 8008ff0:	6011      	str	r1, [r2, #0]
 8008ff2:	d1e0      	bne.n	8008fb6 <_free_r+0x26>
 8008ff4:	681c      	ldr	r4, [r3, #0]
 8008ff6:	685b      	ldr	r3, [r3, #4]
 8008ff8:	6053      	str	r3, [r2, #4]
 8008ffa:	440c      	add	r4, r1
 8008ffc:	6014      	str	r4, [r2, #0]
 8008ffe:	e7da      	b.n	8008fb6 <_free_r+0x26>
 8009000:	d902      	bls.n	8009008 <_free_r+0x78>
 8009002:	230c      	movs	r3, #12
 8009004:	6003      	str	r3, [r0, #0]
 8009006:	e7d6      	b.n	8008fb6 <_free_r+0x26>
 8009008:	6825      	ldr	r5, [r4, #0]
 800900a:	1961      	adds	r1, r4, r5
 800900c:	428b      	cmp	r3, r1
 800900e:	bf04      	itt	eq
 8009010:	6819      	ldreq	r1, [r3, #0]
 8009012:	685b      	ldreq	r3, [r3, #4]
 8009014:	6063      	str	r3, [r4, #4]
 8009016:	bf04      	itt	eq
 8009018:	1949      	addeq	r1, r1, r5
 800901a:	6021      	streq	r1, [r4, #0]
 800901c:	6054      	str	r4, [r2, #4]
 800901e:	e7ca      	b.n	8008fb6 <_free_r+0x26>
 8009020:	b003      	add	sp, #12
 8009022:	bd30      	pop	{r4, r5, pc}
 8009024:	20001f34 	.word	0x20001f34

08009028 <_malloc_usable_size_r>:
 8009028:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800902c:	1f18      	subs	r0, r3, #4
 800902e:	2b00      	cmp	r3, #0
 8009030:	bfbc      	itt	lt
 8009032:	580b      	ldrlt	r3, [r1, r0]
 8009034:	18c0      	addlt	r0, r0, r3
 8009036:	4770      	bx	lr

08009038 <__sfputc_r>:
 8009038:	6893      	ldr	r3, [r2, #8]
 800903a:	3b01      	subs	r3, #1
 800903c:	2b00      	cmp	r3, #0
 800903e:	b410      	push	{r4}
 8009040:	6093      	str	r3, [r2, #8]
 8009042:	da08      	bge.n	8009056 <__sfputc_r+0x1e>
 8009044:	6994      	ldr	r4, [r2, #24]
 8009046:	42a3      	cmp	r3, r4
 8009048:	db01      	blt.n	800904e <__sfputc_r+0x16>
 800904a:	290a      	cmp	r1, #10
 800904c:	d103      	bne.n	8009056 <__sfputc_r+0x1e>
 800904e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009052:	f7ff be56 	b.w	8008d02 <__swbuf_r>
 8009056:	6813      	ldr	r3, [r2, #0]
 8009058:	1c58      	adds	r0, r3, #1
 800905a:	6010      	str	r0, [r2, #0]
 800905c:	7019      	strb	r1, [r3, #0]
 800905e:	4608      	mov	r0, r1
 8009060:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009064:	4770      	bx	lr

08009066 <__sfputs_r>:
 8009066:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009068:	4606      	mov	r6, r0
 800906a:	460f      	mov	r7, r1
 800906c:	4614      	mov	r4, r2
 800906e:	18d5      	adds	r5, r2, r3
 8009070:	42ac      	cmp	r4, r5
 8009072:	d101      	bne.n	8009078 <__sfputs_r+0x12>
 8009074:	2000      	movs	r0, #0
 8009076:	e007      	b.n	8009088 <__sfputs_r+0x22>
 8009078:	f814 1b01 	ldrb.w	r1, [r4], #1
 800907c:	463a      	mov	r2, r7
 800907e:	4630      	mov	r0, r6
 8009080:	f7ff ffda 	bl	8009038 <__sfputc_r>
 8009084:	1c43      	adds	r3, r0, #1
 8009086:	d1f3      	bne.n	8009070 <__sfputs_r+0xa>
 8009088:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800908c <_vfiprintf_r>:
 800908c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009090:	460d      	mov	r5, r1
 8009092:	b09d      	sub	sp, #116	; 0x74
 8009094:	4614      	mov	r4, r2
 8009096:	4698      	mov	r8, r3
 8009098:	4606      	mov	r6, r0
 800909a:	b118      	cbz	r0, 80090a4 <_vfiprintf_r+0x18>
 800909c:	6a03      	ldr	r3, [r0, #32]
 800909e:	b90b      	cbnz	r3, 80090a4 <_vfiprintf_r+0x18>
 80090a0:	f7ff fd48 	bl	8008b34 <__sinit>
 80090a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80090a6:	07d9      	lsls	r1, r3, #31
 80090a8:	d405      	bmi.n	80090b6 <_vfiprintf_r+0x2a>
 80090aa:	89ab      	ldrh	r3, [r5, #12]
 80090ac:	059a      	lsls	r2, r3, #22
 80090ae:	d402      	bmi.n	80090b6 <_vfiprintf_r+0x2a>
 80090b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80090b2:	f7ff ff6a 	bl	8008f8a <__retarget_lock_acquire_recursive>
 80090b6:	89ab      	ldrh	r3, [r5, #12]
 80090b8:	071b      	lsls	r3, r3, #28
 80090ba:	d501      	bpl.n	80090c0 <_vfiprintf_r+0x34>
 80090bc:	692b      	ldr	r3, [r5, #16]
 80090be:	b99b      	cbnz	r3, 80090e8 <_vfiprintf_r+0x5c>
 80090c0:	4629      	mov	r1, r5
 80090c2:	4630      	mov	r0, r6
 80090c4:	f7ff fe5a 	bl	8008d7c <__swsetup_r>
 80090c8:	b170      	cbz	r0, 80090e8 <_vfiprintf_r+0x5c>
 80090ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80090cc:	07dc      	lsls	r4, r3, #31
 80090ce:	d504      	bpl.n	80090da <_vfiprintf_r+0x4e>
 80090d0:	f04f 30ff 	mov.w	r0, #4294967295
 80090d4:	b01d      	add	sp, #116	; 0x74
 80090d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090da:	89ab      	ldrh	r3, [r5, #12]
 80090dc:	0598      	lsls	r0, r3, #22
 80090de:	d4f7      	bmi.n	80090d0 <_vfiprintf_r+0x44>
 80090e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80090e2:	f7ff ff53 	bl	8008f8c <__retarget_lock_release_recursive>
 80090e6:	e7f3      	b.n	80090d0 <_vfiprintf_r+0x44>
 80090e8:	2300      	movs	r3, #0
 80090ea:	9309      	str	r3, [sp, #36]	; 0x24
 80090ec:	2320      	movs	r3, #32
 80090ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80090f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80090f6:	2330      	movs	r3, #48	; 0x30
 80090f8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80092ac <_vfiprintf_r+0x220>
 80090fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009100:	f04f 0901 	mov.w	r9, #1
 8009104:	4623      	mov	r3, r4
 8009106:	469a      	mov	sl, r3
 8009108:	f813 2b01 	ldrb.w	r2, [r3], #1
 800910c:	b10a      	cbz	r2, 8009112 <_vfiprintf_r+0x86>
 800910e:	2a25      	cmp	r2, #37	; 0x25
 8009110:	d1f9      	bne.n	8009106 <_vfiprintf_r+0x7a>
 8009112:	ebba 0b04 	subs.w	fp, sl, r4
 8009116:	d00b      	beq.n	8009130 <_vfiprintf_r+0xa4>
 8009118:	465b      	mov	r3, fp
 800911a:	4622      	mov	r2, r4
 800911c:	4629      	mov	r1, r5
 800911e:	4630      	mov	r0, r6
 8009120:	f7ff ffa1 	bl	8009066 <__sfputs_r>
 8009124:	3001      	adds	r0, #1
 8009126:	f000 80a9 	beq.w	800927c <_vfiprintf_r+0x1f0>
 800912a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800912c:	445a      	add	r2, fp
 800912e:	9209      	str	r2, [sp, #36]	; 0x24
 8009130:	f89a 3000 	ldrb.w	r3, [sl]
 8009134:	2b00      	cmp	r3, #0
 8009136:	f000 80a1 	beq.w	800927c <_vfiprintf_r+0x1f0>
 800913a:	2300      	movs	r3, #0
 800913c:	f04f 32ff 	mov.w	r2, #4294967295
 8009140:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009144:	f10a 0a01 	add.w	sl, sl, #1
 8009148:	9304      	str	r3, [sp, #16]
 800914a:	9307      	str	r3, [sp, #28]
 800914c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009150:	931a      	str	r3, [sp, #104]	; 0x68
 8009152:	4654      	mov	r4, sl
 8009154:	2205      	movs	r2, #5
 8009156:	f814 1b01 	ldrb.w	r1, [r4], #1
 800915a:	4854      	ldr	r0, [pc, #336]	; (80092ac <_vfiprintf_r+0x220>)
 800915c:	f7f7 f850 	bl	8000200 <memchr>
 8009160:	9a04      	ldr	r2, [sp, #16]
 8009162:	b9d8      	cbnz	r0, 800919c <_vfiprintf_r+0x110>
 8009164:	06d1      	lsls	r1, r2, #27
 8009166:	bf44      	itt	mi
 8009168:	2320      	movmi	r3, #32
 800916a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800916e:	0713      	lsls	r3, r2, #28
 8009170:	bf44      	itt	mi
 8009172:	232b      	movmi	r3, #43	; 0x2b
 8009174:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009178:	f89a 3000 	ldrb.w	r3, [sl]
 800917c:	2b2a      	cmp	r3, #42	; 0x2a
 800917e:	d015      	beq.n	80091ac <_vfiprintf_r+0x120>
 8009180:	9a07      	ldr	r2, [sp, #28]
 8009182:	4654      	mov	r4, sl
 8009184:	2000      	movs	r0, #0
 8009186:	f04f 0c0a 	mov.w	ip, #10
 800918a:	4621      	mov	r1, r4
 800918c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009190:	3b30      	subs	r3, #48	; 0x30
 8009192:	2b09      	cmp	r3, #9
 8009194:	d94d      	bls.n	8009232 <_vfiprintf_r+0x1a6>
 8009196:	b1b0      	cbz	r0, 80091c6 <_vfiprintf_r+0x13a>
 8009198:	9207      	str	r2, [sp, #28]
 800919a:	e014      	b.n	80091c6 <_vfiprintf_r+0x13a>
 800919c:	eba0 0308 	sub.w	r3, r0, r8
 80091a0:	fa09 f303 	lsl.w	r3, r9, r3
 80091a4:	4313      	orrs	r3, r2
 80091a6:	9304      	str	r3, [sp, #16]
 80091a8:	46a2      	mov	sl, r4
 80091aa:	e7d2      	b.n	8009152 <_vfiprintf_r+0xc6>
 80091ac:	9b03      	ldr	r3, [sp, #12]
 80091ae:	1d19      	adds	r1, r3, #4
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	9103      	str	r1, [sp, #12]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	bfbb      	ittet	lt
 80091b8:	425b      	neglt	r3, r3
 80091ba:	f042 0202 	orrlt.w	r2, r2, #2
 80091be:	9307      	strge	r3, [sp, #28]
 80091c0:	9307      	strlt	r3, [sp, #28]
 80091c2:	bfb8      	it	lt
 80091c4:	9204      	strlt	r2, [sp, #16]
 80091c6:	7823      	ldrb	r3, [r4, #0]
 80091c8:	2b2e      	cmp	r3, #46	; 0x2e
 80091ca:	d10c      	bne.n	80091e6 <_vfiprintf_r+0x15a>
 80091cc:	7863      	ldrb	r3, [r4, #1]
 80091ce:	2b2a      	cmp	r3, #42	; 0x2a
 80091d0:	d134      	bne.n	800923c <_vfiprintf_r+0x1b0>
 80091d2:	9b03      	ldr	r3, [sp, #12]
 80091d4:	1d1a      	adds	r2, r3, #4
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	9203      	str	r2, [sp, #12]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	bfb8      	it	lt
 80091de:	f04f 33ff 	movlt.w	r3, #4294967295
 80091e2:	3402      	adds	r4, #2
 80091e4:	9305      	str	r3, [sp, #20]
 80091e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80092bc <_vfiprintf_r+0x230>
 80091ea:	7821      	ldrb	r1, [r4, #0]
 80091ec:	2203      	movs	r2, #3
 80091ee:	4650      	mov	r0, sl
 80091f0:	f7f7 f806 	bl	8000200 <memchr>
 80091f4:	b138      	cbz	r0, 8009206 <_vfiprintf_r+0x17a>
 80091f6:	9b04      	ldr	r3, [sp, #16]
 80091f8:	eba0 000a 	sub.w	r0, r0, sl
 80091fc:	2240      	movs	r2, #64	; 0x40
 80091fe:	4082      	lsls	r2, r0
 8009200:	4313      	orrs	r3, r2
 8009202:	3401      	adds	r4, #1
 8009204:	9304      	str	r3, [sp, #16]
 8009206:	f814 1b01 	ldrb.w	r1, [r4], #1
 800920a:	4829      	ldr	r0, [pc, #164]	; (80092b0 <_vfiprintf_r+0x224>)
 800920c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009210:	2206      	movs	r2, #6
 8009212:	f7f6 fff5 	bl	8000200 <memchr>
 8009216:	2800      	cmp	r0, #0
 8009218:	d03f      	beq.n	800929a <_vfiprintf_r+0x20e>
 800921a:	4b26      	ldr	r3, [pc, #152]	; (80092b4 <_vfiprintf_r+0x228>)
 800921c:	bb1b      	cbnz	r3, 8009266 <_vfiprintf_r+0x1da>
 800921e:	9b03      	ldr	r3, [sp, #12]
 8009220:	3307      	adds	r3, #7
 8009222:	f023 0307 	bic.w	r3, r3, #7
 8009226:	3308      	adds	r3, #8
 8009228:	9303      	str	r3, [sp, #12]
 800922a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800922c:	443b      	add	r3, r7
 800922e:	9309      	str	r3, [sp, #36]	; 0x24
 8009230:	e768      	b.n	8009104 <_vfiprintf_r+0x78>
 8009232:	fb0c 3202 	mla	r2, ip, r2, r3
 8009236:	460c      	mov	r4, r1
 8009238:	2001      	movs	r0, #1
 800923a:	e7a6      	b.n	800918a <_vfiprintf_r+0xfe>
 800923c:	2300      	movs	r3, #0
 800923e:	3401      	adds	r4, #1
 8009240:	9305      	str	r3, [sp, #20]
 8009242:	4619      	mov	r1, r3
 8009244:	f04f 0c0a 	mov.w	ip, #10
 8009248:	4620      	mov	r0, r4
 800924a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800924e:	3a30      	subs	r2, #48	; 0x30
 8009250:	2a09      	cmp	r2, #9
 8009252:	d903      	bls.n	800925c <_vfiprintf_r+0x1d0>
 8009254:	2b00      	cmp	r3, #0
 8009256:	d0c6      	beq.n	80091e6 <_vfiprintf_r+0x15a>
 8009258:	9105      	str	r1, [sp, #20]
 800925a:	e7c4      	b.n	80091e6 <_vfiprintf_r+0x15a>
 800925c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009260:	4604      	mov	r4, r0
 8009262:	2301      	movs	r3, #1
 8009264:	e7f0      	b.n	8009248 <_vfiprintf_r+0x1bc>
 8009266:	ab03      	add	r3, sp, #12
 8009268:	9300      	str	r3, [sp, #0]
 800926a:	462a      	mov	r2, r5
 800926c:	4b12      	ldr	r3, [pc, #72]	; (80092b8 <_vfiprintf_r+0x22c>)
 800926e:	a904      	add	r1, sp, #16
 8009270:	4630      	mov	r0, r6
 8009272:	f3af 8000 	nop.w
 8009276:	4607      	mov	r7, r0
 8009278:	1c78      	adds	r0, r7, #1
 800927a:	d1d6      	bne.n	800922a <_vfiprintf_r+0x19e>
 800927c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800927e:	07d9      	lsls	r1, r3, #31
 8009280:	d405      	bmi.n	800928e <_vfiprintf_r+0x202>
 8009282:	89ab      	ldrh	r3, [r5, #12]
 8009284:	059a      	lsls	r2, r3, #22
 8009286:	d402      	bmi.n	800928e <_vfiprintf_r+0x202>
 8009288:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800928a:	f7ff fe7f 	bl	8008f8c <__retarget_lock_release_recursive>
 800928e:	89ab      	ldrh	r3, [r5, #12]
 8009290:	065b      	lsls	r3, r3, #25
 8009292:	f53f af1d 	bmi.w	80090d0 <_vfiprintf_r+0x44>
 8009296:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009298:	e71c      	b.n	80090d4 <_vfiprintf_r+0x48>
 800929a:	ab03      	add	r3, sp, #12
 800929c:	9300      	str	r3, [sp, #0]
 800929e:	462a      	mov	r2, r5
 80092a0:	4b05      	ldr	r3, [pc, #20]	; (80092b8 <_vfiprintf_r+0x22c>)
 80092a2:	a904      	add	r1, sp, #16
 80092a4:	4630      	mov	r0, r6
 80092a6:	f000 f879 	bl	800939c <_printf_i>
 80092aa:	e7e4      	b.n	8009276 <_vfiprintf_r+0x1ea>
 80092ac:	0800984e 	.word	0x0800984e
 80092b0:	08009858 	.word	0x08009858
 80092b4:	00000000 	.word	0x00000000
 80092b8:	08009067 	.word	0x08009067
 80092bc:	08009854 	.word	0x08009854

080092c0 <_printf_common>:
 80092c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092c4:	4616      	mov	r6, r2
 80092c6:	4699      	mov	r9, r3
 80092c8:	688a      	ldr	r2, [r1, #8]
 80092ca:	690b      	ldr	r3, [r1, #16]
 80092cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80092d0:	4293      	cmp	r3, r2
 80092d2:	bfb8      	it	lt
 80092d4:	4613      	movlt	r3, r2
 80092d6:	6033      	str	r3, [r6, #0]
 80092d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80092dc:	4607      	mov	r7, r0
 80092de:	460c      	mov	r4, r1
 80092e0:	b10a      	cbz	r2, 80092e6 <_printf_common+0x26>
 80092e2:	3301      	adds	r3, #1
 80092e4:	6033      	str	r3, [r6, #0]
 80092e6:	6823      	ldr	r3, [r4, #0]
 80092e8:	0699      	lsls	r1, r3, #26
 80092ea:	bf42      	ittt	mi
 80092ec:	6833      	ldrmi	r3, [r6, #0]
 80092ee:	3302      	addmi	r3, #2
 80092f0:	6033      	strmi	r3, [r6, #0]
 80092f2:	6825      	ldr	r5, [r4, #0]
 80092f4:	f015 0506 	ands.w	r5, r5, #6
 80092f8:	d106      	bne.n	8009308 <_printf_common+0x48>
 80092fa:	f104 0a19 	add.w	sl, r4, #25
 80092fe:	68e3      	ldr	r3, [r4, #12]
 8009300:	6832      	ldr	r2, [r6, #0]
 8009302:	1a9b      	subs	r3, r3, r2
 8009304:	42ab      	cmp	r3, r5
 8009306:	dc26      	bgt.n	8009356 <_printf_common+0x96>
 8009308:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800930c:	1e13      	subs	r3, r2, #0
 800930e:	6822      	ldr	r2, [r4, #0]
 8009310:	bf18      	it	ne
 8009312:	2301      	movne	r3, #1
 8009314:	0692      	lsls	r2, r2, #26
 8009316:	d42b      	bmi.n	8009370 <_printf_common+0xb0>
 8009318:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800931c:	4649      	mov	r1, r9
 800931e:	4638      	mov	r0, r7
 8009320:	47c0      	blx	r8
 8009322:	3001      	adds	r0, #1
 8009324:	d01e      	beq.n	8009364 <_printf_common+0xa4>
 8009326:	6823      	ldr	r3, [r4, #0]
 8009328:	6922      	ldr	r2, [r4, #16]
 800932a:	f003 0306 	and.w	r3, r3, #6
 800932e:	2b04      	cmp	r3, #4
 8009330:	bf02      	ittt	eq
 8009332:	68e5      	ldreq	r5, [r4, #12]
 8009334:	6833      	ldreq	r3, [r6, #0]
 8009336:	1aed      	subeq	r5, r5, r3
 8009338:	68a3      	ldr	r3, [r4, #8]
 800933a:	bf0c      	ite	eq
 800933c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009340:	2500      	movne	r5, #0
 8009342:	4293      	cmp	r3, r2
 8009344:	bfc4      	itt	gt
 8009346:	1a9b      	subgt	r3, r3, r2
 8009348:	18ed      	addgt	r5, r5, r3
 800934a:	2600      	movs	r6, #0
 800934c:	341a      	adds	r4, #26
 800934e:	42b5      	cmp	r5, r6
 8009350:	d11a      	bne.n	8009388 <_printf_common+0xc8>
 8009352:	2000      	movs	r0, #0
 8009354:	e008      	b.n	8009368 <_printf_common+0xa8>
 8009356:	2301      	movs	r3, #1
 8009358:	4652      	mov	r2, sl
 800935a:	4649      	mov	r1, r9
 800935c:	4638      	mov	r0, r7
 800935e:	47c0      	blx	r8
 8009360:	3001      	adds	r0, #1
 8009362:	d103      	bne.n	800936c <_printf_common+0xac>
 8009364:	f04f 30ff 	mov.w	r0, #4294967295
 8009368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800936c:	3501      	adds	r5, #1
 800936e:	e7c6      	b.n	80092fe <_printf_common+0x3e>
 8009370:	18e1      	adds	r1, r4, r3
 8009372:	1c5a      	adds	r2, r3, #1
 8009374:	2030      	movs	r0, #48	; 0x30
 8009376:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800937a:	4422      	add	r2, r4
 800937c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009380:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009384:	3302      	adds	r3, #2
 8009386:	e7c7      	b.n	8009318 <_printf_common+0x58>
 8009388:	2301      	movs	r3, #1
 800938a:	4622      	mov	r2, r4
 800938c:	4649      	mov	r1, r9
 800938e:	4638      	mov	r0, r7
 8009390:	47c0      	blx	r8
 8009392:	3001      	adds	r0, #1
 8009394:	d0e6      	beq.n	8009364 <_printf_common+0xa4>
 8009396:	3601      	adds	r6, #1
 8009398:	e7d9      	b.n	800934e <_printf_common+0x8e>
	...

0800939c <_printf_i>:
 800939c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80093a0:	7e0f      	ldrb	r7, [r1, #24]
 80093a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80093a4:	2f78      	cmp	r7, #120	; 0x78
 80093a6:	4691      	mov	r9, r2
 80093a8:	4680      	mov	r8, r0
 80093aa:	460c      	mov	r4, r1
 80093ac:	469a      	mov	sl, r3
 80093ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80093b2:	d807      	bhi.n	80093c4 <_printf_i+0x28>
 80093b4:	2f62      	cmp	r7, #98	; 0x62
 80093b6:	d80a      	bhi.n	80093ce <_printf_i+0x32>
 80093b8:	2f00      	cmp	r7, #0
 80093ba:	f000 80d4 	beq.w	8009566 <_printf_i+0x1ca>
 80093be:	2f58      	cmp	r7, #88	; 0x58
 80093c0:	f000 80c0 	beq.w	8009544 <_printf_i+0x1a8>
 80093c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80093c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80093cc:	e03a      	b.n	8009444 <_printf_i+0xa8>
 80093ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80093d2:	2b15      	cmp	r3, #21
 80093d4:	d8f6      	bhi.n	80093c4 <_printf_i+0x28>
 80093d6:	a101      	add	r1, pc, #4	; (adr r1, 80093dc <_printf_i+0x40>)
 80093d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80093dc:	08009435 	.word	0x08009435
 80093e0:	08009449 	.word	0x08009449
 80093e4:	080093c5 	.word	0x080093c5
 80093e8:	080093c5 	.word	0x080093c5
 80093ec:	080093c5 	.word	0x080093c5
 80093f0:	080093c5 	.word	0x080093c5
 80093f4:	08009449 	.word	0x08009449
 80093f8:	080093c5 	.word	0x080093c5
 80093fc:	080093c5 	.word	0x080093c5
 8009400:	080093c5 	.word	0x080093c5
 8009404:	080093c5 	.word	0x080093c5
 8009408:	0800954d 	.word	0x0800954d
 800940c:	08009475 	.word	0x08009475
 8009410:	08009507 	.word	0x08009507
 8009414:	080093c5 	.word	0x080093c5
 8009418:	080093c5 	.word	0x080093c5
 800941c:	0800956f 	.word	0x0800956f
 8009420:	080093c5 	.word	0x080093c5
 8009424:	08009475 	.word	0x08009475
 8009428:	080093c5 	.word	0x080093c5
 800942c:	080093c5 	.word	0x080093c5
 8009430:	0800950f 	.word	0x0800950f
 8009434:	682b      	ldr	r3, [r5, #0]
 8009436:	1d1a      	adds	r2, r3, #4
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	602a      	str	r2, [r5, #0]
 800943c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009440:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009444:	2301      	movs	r3, #1
 8009446:	e09f      	b.n	8009588 <_printf_i+0x1ec>
 8009448:	6820      	ldr	r0, [r4, #0]
 800944a:	682b      	ldr	r3, [r5, #0]
 800944c:	0607      	lsls	r7, r0, #24
 800944e:	f103 0104 	add.w	r1, r3, #4
 8009452:	6029      	str	r1, [r5, #0]
 8009454:	d501      	bpl.n	800945a <_printf_i+0xbe>
 8009456:	681e      	ldr	r6, [r3, #0]
 8009458:	e003      	b.n	8009462 <_printf_i+0xc6>
 800945a:	0646      	lsls	r6, r0, #25
 800945c:	d5fb      	bpl.n	8009456 <_printf_i+0xba>
 800945e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009462:	2e00      	cmp	r6, #0
 8009464:	da03      	bge.n	800946e <_printf_i+0xd2>
 8009466:	232d      	movs	r3, #45	; 0x2d
 8009468:	4276      	negs	r6, r6
 800946a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800946e:	485a      	ldr	r0, [pc, #360]	; (80095d8 <_printf_i+0x23c>)
 8009470:	230a      	movs	r3, #10
 8009472:	e012      	b.n	800949a <_printf_i+0xfe>
 8009474:	682b      	ldr	r3, [r5, #0]
 8009476:	6820      	ldr	r0, [r4, #0]
 8009478:	1d19      	adds	r1, r3, #4
 800947a:	6029      	str	r1, [r5, #0]
 800947c:	0605      	lsls	r5, r0, #24
 800947e:	d501      	bpl.n	8009484 <_printf_i+0xe8>
 8009480:	681e      	ldr	r6, [r3, #0]
 8009482:	e002      	b.n	800948a <_printf_i+0xee>
 8009484:	0641      	lsls	r1, r0, #25
 8009486:	d5fb      	bpl.n	8009480 <_printf_i+0xe4>
 8009488:	881e      	ldrh	r6, [r3, #0]
 800948a:	4853      	ldr	r0, [pc, #332]	; (80095d8 <_printf_i+0x23c>)
 800948c:	2f6f      	cmp	r7, #111	; 0x6f
 800948e:	bf0c      	ite	eq
 8009490:	2308      	moveq	r3, #8
 8009492:	230a      	movne	r3, #10
 8009494:	2100      	movs	r1, #0
 8009496:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800949a:	6865      	ldr	r5, [r4, #4]
 800949c:	60a5      	str	r5, [r4, #8]
 800949e:	2d00      	cmp	r5, #0
 80094a0:	bfa2      	ittt	ge
 80094a2:	6821      	ldrge	r1, [r4, #0]
 80094a4:	f021 0104 	bicge.w	r1, r1, #4
 80094a8:	6021      	strge	r1, [r4, #0]
 80094aa:	b90e      	cbnz	r6, 80094b0 <_printf_i+0x114>
 80094ac:	2d00      	cmp	r5, #0
 80094ae:	d04b      	beq.n	8009548 <_printf_i+0x1ac>
 80094b0:	4615      	mov	r5, r2
 80094b2:	fbb6 f1f3 	udiv	r1, r6, r3
 80094b6:	fb03 6711 	mls	r7, r3, r1, r6
 80094ba:	5dc7      	ldrb	r7, [r0, r7]
 80094bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80094c0:	4637      	mov	r7, r6
 80094c2:	42bb      	cmp	r3, r7
 80094c4:	460e      	mov	r6, r1
 80094c6:	d9f4      	bls.n	80094b2 <_printf_i+0x116>
 80094c8:	2b08      	cmp	r3, #8
 80094ca:	d10b      	bne.n	80094e4 <_printf_i+0x148>
 80094cc:	6823      	ldr	r3, [r4, #0]
 80094ce:	07de      	lsls	r6, r3, #31
 80094d0:	d508      	bpl.n	80094e4 <_printf_i+0x148>
 80094d2:	6923      	ldr	r3, [r4, #16]
 80094d4:	6861      	ldr	r1, [r4, #4]
 80094d6:	4299      	cmp	r1, r3
 80094d8:	bfde      	ittt	le
 80094da:	2330      	movle	r3, #48	; 0x30
 80094dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80094e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80094e4:	1b52      	subs	r2, r2, r5
 80094e6:	6122      	str	r2, [r4, #16]
 80094e8:	f8cd a000 	str.w	sl, [sp]
 80094ec:	464b      	mov	r3, r9
 80094ee:	aa03      	add	r2, sp, #12
 80094f0:	4621      	mov	r1, r4
 80094f2:	4640      	mov	r0, r8
 80094f4:	f7ff fee4 	bl	80092c0 <_printf_common>
 80094f8:	3001      	adds	r0, #1
 80094fa:	d14a      	bne.n	8009592 <_printf_i+0x1f6>
 80094fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009500:	b004      	add	sp, #16
 8009502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009506:	6823      	ldr	r3, [r4, #0]
 8009508:	f043 0320 	orr.w	r3, r3, #32
 800950c:	6023      	str	r3, [r4, #0]
 800950e:	4833      	ldr	r0, [pc, #204]	; (80095dc <_printf_i+0x240>)
 8009510:	2778      	movs	r7, #120	; 0x78
 8009512:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009516:	6823      	ldr	r3, [r4, #0]
 8009518:	6829      	ldr	r1, [r5, #0]
 800951a:	061f      	lsls	r7, r3, #24
 800951c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009520:	d402      	bmi.n	8009528 <_printf_i+0x18c>
 8009522:	065f      	lsls	r7, r3, #25
 8009524:	bf48      	it	mi
 8009526:	b2b6      	uxthmi	r6, r6
 8009528:	07df      	lsls	r7, r3, #31
 800952a:	bf48      	it	mi
 800952c:	f043 0320 	orrmi.w	r3, r3, #32
 8009530:	6029      	str	r1, [r5, #0]
 8009532:	bf48      	it	mi
 8009534:	6023      	strmi	r3, [r4, #0]
 8009536:	b91e      	cbnz	r6, 8009540 <_printf_i+0x1a4>
 8009538:	6823      	ldr	r3, [r4, #0]
 800953a:	f023 0320 	bic.w	r3, r3, #32
 800953e:	6023      	str	r3, [r4, #0]
 8009540:	2310      	movs	r3, #16
 8009542:	e7a7      	b.n	8009494 <_printf_i+0xf8>
 8009544:	4824      	ldr	r0, [pc, #144]	; (80095d8 <_printf_i+0x23c>)
 8009546:	e7e4      	b.n	8009512 <_printf_i+0x176>
 8009548:	4615      	mov	r5, r2
 800954a:	e7bd      	b.n	80094c8 <_printf_i+0x12c>
 800954c:	682b      	ldr	r3, [r5, #0]
 800954e:	6826      	ldr	r6, [r4, #0]
 8009550:	6961      	ldr	r1, [r4, #20]
 8009552:	1d18      	adds	r0, r3, #4
 8009554:	6028      	str	r0, [r5, #0]
 8009556:	0635      	lsls	r5, r6, #24
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	d501      	bpl.n	8009560 <_printf_i+0x1c4>
 800955c:	6019      	str	r1, [r3, #0]
 800955e:	e002      	b.n	8009566 <_printf_i+0x1ca>
 8009560:	0670      	lsls	r0, r6, #25
 8009562:	d5fb      	bpl.n	800955c <_printf_i+0x1c0>
 8009564:	8019      	strh	r1, [r3, #0]
 8009566:	2300      	movs	r3, #0
 8009568:	6123      	str	r3, [r4, #16]
 800956a:	4615      	mov	r5, r2
 800956c:	e7bc      	b.n	80094e8 <_printf_i+0x14c>
 800956e:	682b      	ldr	r3, [r5, #0]
 8009570:	1d1a      	adds	r2, r3, #4
 8009572:	602a      	str	r2, [r5, #0]
 8009574:	681d      	ldr	r5, [r3, #0]
 8009576:	6862      	ldr	r2, [r4, #4]
 8009578:	2100      	movs	r1, #0
 800957a:	4628      	mov	r0, r5
 800957c:	f7f6 fe40 	bl	8000200 <memchr>
 8009580:	b108      	cbz	r0, 8009586 <_printf_i+0x1ea>
 8009582:	1b40      	subs	r0, r0, r5
 8009584:	6060      	str	r0, [r4, #4]
 8009586:	6863      	ldr	r3, [r4, #4]
 8009588:	6123      	str	r3, [r4, #16]
 800958a:	2300      	movs	r3, #0
 800958c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009590:	e7aa      	b.n	80094e8 <_printf_i+0x14c>
 8009592:	6923      	ldr	r3, [r4, #16]
 8009594:	462a      	mov	r2, r5
 8009596:	4649      	mov	r1, r9
 8009598:	4640      	mov	r0, r8
 800959a:	47d0      	blx	sl
 800959c:	3001      	adds	r0, #1
 800959e:	d0ad      	beq.n	80094fc <_printf_i+0x160>
 80095a0:	6823      	ldr	r3, [r4, #0]
 80095a2:	079b      	lsls	r3, r3, #30
 80095a4:	d413      	bmi.n	80095ce <_printf_i+0x232>
 80095a6:	68e0      	ldr	r0, [r4, #12]
 80095a8:	9b03      	ldr	r3, [sp, #12]
 80095aa:	4298      	cmp	r0, r3
 80095ac:	bfb8      	it	lt
 80095ae:	4618      	movlt	r0, r3
 80095b0:	e7a6      	b.n	8009500 <_printf_i+0x164>
 80095b2:	2301      	movs	r3, #1
 80095b4:	4632      	mov	r2, r6
 80095b6:	4649      	mov	r1, r9
 80095b8:	4640      	mov	r0, r8
 80095ba:	47d0      	blx	sl
 80095bc:	3001      	adds	r0, #1
 80095be:	d09d      	beq.n	80094fc <_printf_i+0x160>
 80095c0:	3501      	adds	r5, #1
 80095c2:	68e3      	ldr	r3, [r4, #12]
 80095c4:	9903      	ldr	r1, [sp, #12]
 80095c6:	1a5b      	subs	r3, r3, r1
 80095c8:	42ab      	cmp	r3, r5
 80095ca:	dcf2      	bgt.n	80095b2 <_printf_i+0x216>
 80095cc:	e7eb      	b.n	80095a6 <_printf_i+0x20a>
 80095ce:	2500      	movs	r5, #0
 80095d0:	f104 0619 	add.w	r6, r4, #25
 80095d4:	e7f5      	b.n	80095c2 <_printf_i+0x226>
 80095d6:	bf00      	nop
 80095d8:	0800985f 	.word	0x0800985f
 80095dc:	08009870 	.word	0x08009870

080095e0 <__swhatbuf_r>:
 80095e0:	b570      	push	{r4, r5, r6, lr}
 80095e2:	460c      	mov	r4, r1
 80095e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095e8:	2900      	cmp	r1, #0
 80095ea:	b096      	sub	sp, #88	; 0x58
 80095ec:	4615      	mov	r5, r2
 80095ee:	461e      	mov	r6, r3
 80095f0:	da0d      	bge.n	800960e <__swhatbuf_r+0x2e>
 80095f2:	89a3      	ldrh	r3, [r4, #12]
 80095f4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80095f8:	f04f 0100 	mov.w	r1, #0
 80095fc:	bf0c      	ite	eq
 80095fe:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009602:	2340      	movne	r3, #64	; 0x40
 8009604:	2000      	movs	r0, #0
 8009606:	6031      	str	r1, [r6, #0]
 8009608:	602b      	str	r3, [r5, #0]
 800960a:	b016      	add	sp, #88	; 0x58
 800960c:	bd70      	pop	{r4, r5, r6, pc}
 800960e:	466a      	mov	r2, sp
 8009610:	f000 f848 	bl	80096a4 <_fstat_r>
 8009614:	2800      	cmp	r0, #0
 8009616:	dbec      	blt.n	80095f2 <__swhatbuf_r+0x12>
 8009618:	9901      	ldr	r1, [sp, #4]
 800961a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800961e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009622:	4259      	negs	r1, r3
 8009624:	4159      	adcs	r1, r3
 8009626:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800962a:	e7eb      	b.n	8009604 <__swhatbuf_r+0x24>

0800962c <__smakebuf_r>:
 800962c:	898b      	ldrh	r3, [r1, #12]
 800962e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009630:	079d      	lsls	r5, r3, #30
 8009632:	4606      	mov	r6, r0
 8009634:	460c      	mov	r4, r1
 8009636:	d507      	bpl.n	8009648 <__smakebuf_r+0x1c>
 8009638:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800963c:	6023      	str	r3, [r4, #0]
 800963e:	6123      	str	r3, [r4, #16]
 8009640:	2301      	movs	r3, #1
 8009642:	6163      	str	r3, [r4, #20]
 8009644:	b002      	add	sp, #8
 8009646:	bd70      	pop	{r4, r5, r6, pc}
 8009648:	ab01      	add	r3, sp, #4
 800964a:	466a      	mov	r2, sp
 800964c:	f7ff ffc8 	bl	80095e0 <__swhatbuf_r>
 8009650:	9900      	ldr	r1, [sp, #0]
 8009652:	4605      	mov	r5, r0
 8009654:	4630      	mov	r0, r6
 8009656:	f7ff f89f 	bl	8008798 <_malloc_r>
 800965a:	b948      	cbnz	r0, 8009670 <__smakebuf_r+0x44>
 800965c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009660:	059a      	lsls	r2, r3, #22
 8009662:	d4ef      	bmi.n	8009644 <__smakebuf_r+0x18>
 8009664:	f023 0303 	bic.w	r3, r3, #3
 8009668:	f043 0302 	orr.w	r3, r3, #2
 800966c:	81a3      	strh	r3, [r4, #12]
 800966e:	e7e3      	b.n	8009638 <__smakebuf_r+0xc>
 8009670:	89a3      	ldrh	r3, [r4, #12]
 8009672:	6020      	str	r0, [r4, #0]
 8009674:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009678:	81a3      	strh	r3, [r4, #12]
 800967a:	9b00      	ldr	r3, [sp, #0]
 800967c:	6163      	str	r3, [r4, #20]
 800967e:	9b01      	ldr	r3, [sp, #4]
 8009680:	6120      	str	r0, [r4, #16]
 8009682:	b15b      	cbz	r3, 800969c <__smakebuf_r+0x70>
 8009684:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009688:	4630      	mov	r0, r6
 800968a:	f000 f81d 	bl	80096c8 <_isatty_r>
 800968e:	b128      	cbz	r0, 800969c <__smakebuf_r+0x70>
 8009690:	89a3      	ldrh	r3, [r4, #12]
 8009692:	f023 0303 	bic.w	r3, r3, #3
 8009696:	f043 0301 	orr.w	r3, r3, #1
 800969a:	81a3      	strh	r3, [r4, #12]
 800969c:	89a3      	ldrh	r3, [r4, #12]
 800969e:	431d      	orrs	r5, r3
 80096a0:	81a5      	strh	r5, [r4, #12]
 80096a2:	e7cf      	b.n	8009644 <__smakebuf_r+0x18>

080096a4 <_fstat_r>:
 80096a4:	b538      	push	{r3, r4, r5, lr}
 80096a6:	4d07      	ldr	r5, [pc, #28]	; (80096c4 <_fstat_r+0x20>)
 80096a8:	2300      	movs	r3, #0
 80096aa:	4604      	mov	r4, r0
 80096ac:	4608      	mov	r0, r1
 80096ae:	4611      	mov	r1, r2
 80096b0:	602b      	str	r3, [r5, #0]
 80096b2:	f7f7 fc2a 	bl	8000f0a <_fstat>
 80096b6:	1c43      	adds	r3, r0, #1
 80096b8:	d102      	bne.n	80096c0 <_fstat_r+0x1c>
 80096ba:	682b      	ldr	r3, [r5, #0]
 80096bc:	b103      	cbz	r3, 80096c0 <_fstat_r+0x1c>
 80096be:	6023      	str	r3, [r4, #0]
 80096c0:	bd38      	pop	{r3, r4, r5, pc}
 80096c2:	bf00      	nop
 80096c4:	20002078 	.word	0x20002078

080096c8 <_isatty_r>:
 80096c8:	b538      	push	{r3, r4, r5, lr}
 80096ca:	4d06      	ldr	r5, [pc, #24]	; (80096e4 <_isatty_r+0x1c>)
 80096cc:	2300      	movs	r3, #0
 80096ce:	4604      	mov	r4, r0
 80096d0:	4608      	mov	r0, r1
 80096d2:	602b      	str	r3, [r5, #0]
 80096d4:	f7f7 fc1e 	bl	8000f14 <_isatty>
 80096d8:	1c43      	adds	r3, r0, #1
 80096da:	d102      	bne.n	80096e2 <_isatty_r+0x1a>
 80096dc:	682b      	ldr	r3, [r5, #0]
 80096de:	b103      	cbz	r3, 80096e2 <_isatty_r+0x1a>
 80096e0:	6023      	str	r3, [r4, #0]
 80096e2:	bd38      	pop	{r3, r4, r5, pc}
 80096e4:	20002078 	.word	0x20002078

080096e8 <_init>:
 80096e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ea:	bf00      	nop
 80096ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096ee:	bc08      	pop	{r3}
 80096f0:	469e      	mov	lr, r3
 80096f2:	4770      	bx	lr

080096f4 <_fini>:
 80096f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096f6:	bf00      	nop
 80096f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096fa:	bc08      	pop	{r3}
 80096fc:	469e      	mov	lr, r3
 80096fe:	4770      	bx	lr
