
Spokane_Application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e07c  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007f4  0800e240  0800e240  0001e240  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ea34  0800ea34  000202f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800ea34  0800ea34  0001ea34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ea3c  0800ea3c  000202f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ea3c  0800ea3c  0001ea3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ea40  0800ea40  0001ea40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002f8  20000000  0800ea44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011c0  200002f8  0800ed3c  000202f8  2**2
                  ALLOC
 10 ._user_heap_stack 00004000  200014b8  0800ed3c  000214b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00034470  00000000  00000000  00020328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006696  00000000  00000000  00054798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001d2f9  00000000  00000000  0005ae2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ba0  00000000  00000000  00078128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001a10  00000000  00000000  00079cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00031bcd  00000000  00000000  0007b6d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003323b  00000000  00000000  000ad2a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010e19a  00000000  00000000  000e04e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001ee67a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000063dc  00000000  00000000  001ee6cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200002f8 	.word	0x200002f8
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800e224 	.word	0x0800e224

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200002fc 	.word	0x200002fc
 80001fc:	0800e224 	.word	0x0800e224

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9aa 	b.w	8001024 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	468e      	mov	lr, r1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d14d      	bne.n	8000dfe <__udivmoddi4+0xaa>
 8000d62:	428a      	cmp	r2, r1
 8000d64:	4694      	mov	ip, r2
 8000d66:	d969      	bls.n	8000e3c <__udivmoddi4+0xe8>
 8000d68:	fab2 f282 	clz	r2, r2
 8000d6c:	b152      	cbz	r2, 8000d84 <__udivmoddi4+0x30>
 8000d6e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d72:	f1c2 0120 	rsb	r1, r2, #32
 8000d76:	fa20 f101 	lsr.w	r1, r0, r1
 8000d7a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d7e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d82:	4094      	lsls	r4, r2
 8000d84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d88:	0c21      	lsrs	r1, r4, #16
 8000d8a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d8e:	fa1f f78c 	uxth.w	r7, ip
 8000d92:	fb08 e316 	mls	r3, r8, r6, lr
 8000d96:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d9a:	fb06 f107 	mul.w	r1, r6, r7
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x64>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000daa:	f080 811f 	bcs.w	8000fec <__udivmoddi4+0x298>
 8000dae:	4299      	cmp	r1, r3
 8000db0:	f240 811c 	bls.w	8000fec <__udivmoddi4+0x298>
 8000db4:	3e02      	subs	r6, #2
 8000db6:	4463      	add	r3, ip
 8000db8:	1a5b      	subs	r3, r3, r1
 8000dba:	b2a4      	uxth	r4, r4
 8000dbc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc8:	fb00 f707 	mul.w	r7, r0, r7
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	d90a      	bls.n	8000de6 <__udivmoddi4+0x92>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd8:	f080 810a 	bcs.w	8000ff0 <__udivmoddi4+0x29c>
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	f240 8107 	bls.w	8000ff0 <__udivmoddi4+0x29c>
 8000de2:	4464      	add	r4, ip
 8000de4:	3802      	subs	r0, #2
 8000de6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dea:	1be4      	subs	r4, r4, r7
 8000dec:	2600      	movs	r6, #0
 8000dee:	b11d      	cbz	r5, 8000df8 <__udivmoddi4+0xa4>
 8000df0:	40d4      	lsrs	r4, r2
 8000df2:	2300      	movs	r3, #0
 8000df4:	e9c5 4300 	strd	r4, r3, [r5]
 8000df8:	4631      	mov	r1, r6
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d909      	bls.n	8000e16 <__udivmoddi4+0xc2>
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	f000 80ef 	beq.w	8000fe6 <__udivmoddi4+0x292>
 8000e08:	2600      	movs	r6, #0
 8000e0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e0e:	4630      	mov	r0, r6
 8000e10:	4631      	mov	r1, r6
 8000e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e16:	fab3 f683 	clz	r6, r3
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	d14a      	bne.n	8000eb4 <__udivmoddi4+0x160>
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d302      	bcc.n	8000e28 <__udivmoddi4+0xd4>
 8000e22:	4282      	cmp	r2, r0
 8000e24:	f200 80f9 	bhi.w	800101a <__udivmoddi4+0x2c6>
 8000e28:	1a84      	subs	r4, r0, r2
 8000e2a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e2e:	2001      	movs	r0, #1
 8000e30:	469e      	mov	lr, r3
 8000e32:	2d00      	cmp	r5, #0
 8000e34:	d0e0      	beq.n	8000df8 <__udivmoddi4+0xa4>
 8000e36:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e3a:	e7dd      	b.n	8000df8 <__udivmoddi4+0xa4>
 8000e3c:	b902      	cbnz	r2, 8000e40 <__udivmoddi4+0xec>
 8000e3e:	deff      	udf	#255	; 0xff
 8000e40:	fab2 f282 	clz	r2, r2
 8000e44:	2a00      	cmp	r2, #0
 8000e46:	f040 8092 	bne.w	8000f6e <__udivmoddi4+0x21a>
 8000e4a:	eba1 010c 	sub.w	r1, r1, ip
 8000e4e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e52:	fa1f fe8c 	uxth.w	lr, ip
 8000e56:	2601      	movs	r6, #1
 8000e58:	0c20      	lsrs	r0, r4, #16
 8000e5a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e5e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e62:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e66:	fb0e f003 	mul.w	r0, lr, r3
 8000e6a:	4288      	cmp	r0, r1
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x12c>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x12a>
 8000e78:	4288      	cmp	r0, r1
 8000e7a:	f200 80cb 	bhi.w	8001014 <__udivmoddi4+0x2c0>
 8000e7e:	4643      	mov	r3, r8
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e88:	fb07 1110 	mls	r1, r7, r0, r1
 8000e8c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e90:	fb0e fe00 	mul.w	lr, lr, r0
 8000e94:	45a6      	cmp	lr, r4
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x156>
 8000e98:	eb1c 0404 	adds.w	r4, ip, r4
 8000e9c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ea0:	d202      	bcs.n	8000ea8 <__udivmoddi4+0x154>
 8000ea2:	45a6      	cmp	lr, r4
 8000ea4:	f200 80bb 	bhi.w	800101e <__udivmoddi4+0x2ca>
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	eba4 040e 	sub.w	r4, r4, lr
 8000eae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000eb2:	e79c      	b.n	8000dee <__udivmoddi4+0x9a>
 8000eb4:	f1c6 0720 	rsb	r7, r6, #32
 8000eb8:	40b3      	lsls	r3, r6
 8000eba:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ebe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ec2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ec6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eca:	431c      	orrs	r4, r3
 8000ecc:	40f9      	lsrs	r1, r7
 8000ece:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ed2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ed6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eda:	0c20      	lsrs	r0, r4, #16
 8000edc:	fa1f fe8c 	uxth.w	lr, ip
 8000ee0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ee4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ee8:	fb08 f00e 	mul.w	r0, r8, lr
 8000eec:	4288      	cmp	r0, r1
 8000eee:	fa02 f206 	lsl.w	r2, r2, r6
 8000ef2:	d90b      	bls.n	8000f0c <__udivmoddi4+0x1b8>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000efc:	f080 8088 	bcs.w	8001010 <__udivmoddi4+0x2bc>
 8000f00:	4288      	cmp	r0, r1
 8000f02:	f240 8085 	bls.w	8001010 <__udivmoddi4+0x2bc>
 8000f06:	f1a8 0802 	sub.w	r8, r8, #2
 8000f0a:	4461      	add	r1, ip
 8000f0c:	1a09      	subs	r1, r1, r0
 8000f0e:	b2a4      	uxth	r4, r4
 8000f10:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f14:	fb09 1110 	mls	r1, r9, r0, r1
 8000f18:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f1c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f20:	458e      	cmp	lr, r1
 8000f22:	d908      	bls.n	8000f36 <__udivmoddi4+0x1e2>
 8000f24:	eb1c 0101 	adds.w	r1, ip, r1
 8000f28:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f2c:	d26c      	bcs.n	8001008 <__udivmoddi4+0x2b4>
 8000f2e:	458e      	cmp	lr, r1
 8000f30:	d96a      	bls.n	8001008 <__udivmoddi4+0x2b4>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4461      	add	r1, ip
 8000f36:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f3a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f3e:	eba1 010e 	sub.w	r1, r1, lr
 8000f42:	42a1      	cmp	r1, r4
 8000f44:	46c8      	mov	r8, r9
 8000f46:	46a6      	mov	lr, r4
 8000f48:	d356      	bcc.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f4a:	d053      	beq.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f4c:	b15d      	cbz	r5, 8000f66 <__udivmoddi4+0x212>
 8000f4e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f52:	eb61 010e 	sbc.w	r1, r1, lr
 8000f56:	fa01 f707 	lsl.w	r7, r1, r7
 8000f5a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f5e:	40f1      	lsrs	r1, r6
 8000f60:	431f      	orrs	r7, r3
 8000f62:	e9c5 7100 	strd	r7, r1, [r5]
 8000f66:	2600      	movs	r6, #0
 8000f68:	4631      	mov	r1, r6
 8000f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f6e:	f1c2 0320 	rsb	r3, r2, #32
 8000f72:	40d8      	lsrs	r0, r3
 8000f74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f78:	fa21 f303 	lsr.w	r3, r1, r3
 8000f7c:	4091      	lsls	r1, r2
 8000f7e:	4301      	orrs	r1, r0
 8000f80:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f84:	fa1f fe8c 	uxth.w	lr, ip
 8000f88:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f8c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f90:	0c0b      	lsrs	r3, r1, #16
 8000f92:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f96:	fb00 f60e 	mul.w	r6, r0, lr
 8000f9a:	429e      	cmp	r6, r3
 8000f9c:	fa04 f402 	lsl.w	r4, r4, r2
 8000fa0:	d908      	bls.n	8000fb4 <__udivmoddi4+0x260>
 8000fa2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000faa:	d22f      	bcs.n	800100c <__udivmoddi4+0x2b8>
 8000fac:	429e      	cmp	r6, r3
 8000fae:	d92d      	bls.n	800100c <__udivmoddi4+0x2b8>
 8000fb0:	3802      	subs	r0, #2
 8000fb2:	4463      	add	r3, ip
 8000fb4:	1b9b      	subs	r3, r3, r6
 8000fb6:	b289      	uxth	r1, r1
 8000fb8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fbc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fc4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fc8:	428b      	cmp	r3, r1
 8000fca:	d908      	bls.n	8000fde <__udivmoddi4+0x28a>
 8000fcc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fd0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fd4:	d216      	bcs.n	8001004 <__udivmoddi4+0x2b0>
 8000fd6:	428b      	cmp	r3, r1
 8000fd8:	d914      	bls.n	8001004 <__udivmoddi4+0x2b0>
 8000fda:	3e02      	subs	r6, #2
 8000fdc:	4461      	add	r1, ip
 8000fde:	1ac9      	subs	r1, r1, r3
 8000fe0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fe4:	e738      	b.n	8000e58 <__udivmoddi4+0x104>
 8000fe6:	462e      	mov	r6, r5
 8000fe8:	4628      	mov	r0, r5
 8000fea:	e705      	b.n	8000df8 <__udivmoddi4+0xa4>
 8000fec:	4606      	mov	r6, r0
 8000fee:	e6e3      	b.n	8000db8 <__udivmoddi4+0x64>
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	e6f8      	b.n	8000de6 <__udivmoddi4+0x92>
 8000ff4:	454b      	cmp	r3, r9
 8000ff6:	d2a9      	bcs.n	8000f4c <__udivmoddi4+0x1f8>
 8000ff8:	ebb9 0802 	subs.w	r8, r9, r2
 8000ffc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001000:	3801      	subs	r0, #1
 8001002:	e7a3      	b.n	8000f4c <__udivmoddi4+0x1f8>
 8001004:	4646      	mov	r6, r8
 8001006:	e7ea      	b.n	8000fde <__udivmoddi4+0x28a>
 8001008:	4620      	mov	r0, r4
 800100a:	e794      	b.n	8000f36 <__udivmoddi4+0x1e2>
 800100c:	4640      	mov	r0, r8
 800100e:	e7d1      	b.n	8000fb4 <__udivmoddi4+0x260>
 8001010:	46d0      	mov	r8, sl
 8001012:	e77b      	b.n	8000f0c <__udivmoddi4+0x1b8>
 8001014:	3b02      	subs	r3, #2
 8001016:	4461      	add	r1, ip
 8001018:	e732      	b.n	8000e80 <__udivmoddi4+0x12c>
 800101a:	4630      	mov	r0, r6
 800101c:	e709      	b.n	8000e32 <__udivmoddi4+0xde>
 800101e:	4464      	add	r4, ip
 8001020:	3802      	subs	r0, #2
 8001022:	e742      	b.n	8000eaa <__udivmoddi4+0x156>

08001024 <__aeabi_idiv0>:
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop

08001028 <Init_Some>:

/**
 * @brief Small state machine to conduct actions in steps. Also if I dont do it this way, the system hard faults.
 */
void Init_Some(void * Task_Data)//Is a task
{
 8001028:	b510      	push	{r4, lr}
	static int state = 0;
	switch(state)
 800102a:	4b25      	ldr	r3, [pc, #148]	; (80010c0 <Init_Some+0x98>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	2b03      	cmp	r3, #3
 8001030:	d806      	bhi.n	8001040 <Init_Some+0x18>
 8001032:	e8df f003 	tbb	[pc, r3]
 8001036:	0602      	.short	0x0602
 8001038:	3621      	.short	0x3621
		//UART_5 =  Init_DMA_UART(&huart5);//4G
		//Init_Console(UART_2, Print_Startup_Banner);//Starts a task
		//I2C_1 = Init_I2C(&hi2c1);//Init the mag I2c
		//HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
		//OSPI_1 = Init_OSPI(&hospi1);
		state ++;
 800103a:	3301      	adds	r3, #1
 800103c:	4a20      	ldr	r2, [pc, #128]	; (80010c0 <Init_Some+0x98>)
 800103e:	6013      	str	r3, [r2, #0]
		//HAL_GPIO_TogglePin (FLASH_CS_GPIO_Port, FLASH_CS_Pin);
		//HAL_Delay(100);
			break;
	}
	}
}
 8001040:	bd10      	pop	{r4, pc}
		OSPI_Set_Features(&hospi1);//0x1F
 8001042:	4c20      	ldr	r4, [pc, #128]	; (80010c4 <Init_Some+0x9c>)
 8001044:	4620      	mov	r0, r4
 8001046:	f001 f861 	bl	800210c <OSPI_Set_Features>
		OSPI_Reset(&hospi1);//0xFF
 800104a:	4620      	mov	r0, r4
 800104c:	f001 f95e 	bl	800230c <OSPI_Reset>
		OSPI_Get_Features(&hospi1);//0x0f
 8001050:	4620      	mov	r0, r4
 8001052:	f001 f821 	bl	8002098 <OSPI_Get_Features>
		OSPI_WriteEnable(&hospi1);//0x06
 8001056:	4620      	mov	r0, r4
 8001058:	f000 ffab 	bl	8001fb2 <OSPI_WriteEnable>
		OSPI_Get_Features(&hospi1);//0x0f
 800105c:	4620      	mov	r0, r4
 800105e:	f001 f81b 	bl	8002098 <OSPI_Get_Features>
		OSPI_Erase_Block(&hospi1);//0xD8
 8001062:	4620      	mov	r0, r4
 8001064:	f000 fff0 	bl	8002048 <OSPI_Erase_Block>
		OSPI_Get_Features(&hospi1);//0x0f
 8001068:	4620      	mov	r0, r4
 800106a:	f001 f815 	bl	8002098 <OSPI_Get_Features>
		state ++;
 800106e:	4a14      	ldr	r2, [pc, #80]	; (80010c0 <Init_Some+0x98>)
 8001070:	6813      	ldr	r3, [r2, #0]
 8001072:	3301      	adds	r3, #1
 8001074:	6013      	str	r3, [r2, #0]
		break;
 8001076:	e7e3      	b.n	8001040 <Init_Some+0x18>
		OSPI_WriteEnable(&hospi1);//0x06
 8001078:	4c12      	ldr	r4, [pc, #72]	; (80010c4 <Init_Some+0x9c>)
 800107a:	4620      	mov	r0, r4
 800107c:	f000 ff99 	bl	8001fb2 <OSPI_WriteEnable>
		OSPI_Get_Features(&hospi1);//0x0f
 8001080:	4620      	mov	r0, r4
 8001082:	f001 f809 	bl	8002098 <OSPI_Get_Features>
		OSPI_Program_Load(&hospi1);//0x02
 8001086:	4620      	mov	r0, r4
 8001088:	f001 f874 	bl	8002174 <OSPI_Program_Load>
		OSPI_Program_Execute(&hospi1);//0x10
 800108c:	4620      	mov	r0, r4
 800108e:	f001 f8a9 	bl	80021e4 <OSPI_Program_Execute>
		OSPI_Get_Features(&hospi1);//0x0f
 8001092:	4620      	mov	r0, r4
 8001094:	f001 f800 	bl	8002098 <OSPI_Get_Features>
		state ++;
 8001098:	4a09      	ldr	r2, [pc, #36]	; (80010c0 <Init_Some+0x98>)
 800109a:	6813      	ldr	r3, [r2, #0]
 800109c:	3301      	adds	r3, #1
 800109e:	6013      	str	r3, [r2, #0]
		break;
 80010a0:	e7ce      	b.n	8001040 <Init_Some+0x18>
		OSPI_Page_Read(&hospi1);//0x13
 80010a2:	4c08      	ldr	r4, [pc, #32]	; (80010c4 <Init_Some+0x9c>)
 80010a4:	4620      	mov	r0, r4
 80010a6:	f001 f8c7 	bl	8002238 <OSPI_Page_Read>
		OSPI_Get_Features(&hospi1);//0x0f
 80010aa:	4620      	mov	r0, r4
 80010ac:	f000 fff4 	bl	8002098 <OSPI_Get_Features>
		OSPI_Read_Cache_X4(&hospi1);//0x0B
 80010b0:	4620      	mov	r0, r4
 80010b2:	f001 f8eb 	bl	800228c <OSPI_Read_Cache_X4>
		state ++;
 80010b6:	4a02      	ldr	r2, [pc, #8]	; (80010c0 <Init_Some+0x98>)
 80010b8:	6813      	ldr	r3, [r2, #0]
 80010ba:	3301      	adds	r3, #1
 80010bc:	6013      	str	r3, [r2, #0]
}
 80010be:	e7bf      	b.n	8001040 <Init_Some+0x18>
 80010c0:	20000314 	.word	0x20000314
 80010c4:	200003cc 	.word	0x200003cc

080010c8 <Debug_Task>:
{
 80010c8:	b508      	push	{r3, lr}
	Start_Task(Init_Some, NULL, 0);//start the state machiene
 80010ca:	2200      	movs	r2, #0
 80010cc:	4611      	mov	r1, r2
 80010ce:	4802      	ldr	r0, [pc, #8]	; (80010d8 <Debug_Task+0x10>)
 80010d0:	f007 fc6c 	bl	80089ac <Start_Task>
}
 80010d4:	bd08      	pop	{r3, pc}
 80010d6:	bf00      	nop
 80010d8:	08001029 	.word	0x08001029

080010dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80010dc:	b500      	push	{lr}
 80010de:	b085      	sub	sp, #20

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80010e0:	4b3b      	ldr	r3, [pc, #236]	; (80011d0 <MX_DMA_Init+0xf4>)
 80010e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80010e4:	f042 0204 	orr.w	r2, r2, #4
 80010e8:	649a      	str	r2, [r3, #72]	; 0x48
 80010ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80010ec:	f002 0204 	and.w	r2, r2, #4
 80010f0:	9201      	str	r2, [sp, #4]
 80010f2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80010f6:	f042 0201 	orr.w	r2, r2, #1
 80010fa:	649a      	str	r2, [r3, #72]	; 0x48
 80010fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80010fe:	f002 0201 	and.w	r2, r2, #1
 8001102:	9202      	str	r2, [sp, #8]
 8001104:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001106:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001108:	f042 0202 	orr.w	r2, r2, #2
 800110c:	649a      	str	r2, [r3, #72]	; 0x48
 800110e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001110:	f003 0302 	and.w	r3, r3, #2
 8001114:	9303      	str	r3, [sp, #12]
 8001116:	9b03      	ldr	r3, [sp, #12]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001118:	2200      	movs	r2, #0
 800111a:	4611      	mov	r1, r2
 800111c:	200b      	movs	r0, #11
 800111e:	f001 f985 	bl	800242c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001122:	200b      	movs	r0, #11
 8001124:	f001 f9ba 	bl	800249c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001128:	2200      	movs	r2, #0
 800112a:	4611      	mov	r1, r2
 800112c:	200c      	movs	r0, #12
 800112e:	f001 f97d 	bl	800242c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001132:	200c      	movs	r0, #12
 8001134:	f001 f9b2 	bl	800249c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001138:	2200      	movs	r2, #0
 800113a:	4611      	mov	r1, r2
 800113c:	200d      	movs	r0, #13
 800113e:	f001 f975 	bl	800242c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001142:	200d      	movs	r0, #13
 8001144:	f001 f9aa 	bl	800249c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001148:	2200      	movs	r2, #0
 800114a:	4611      	mov	r1, r2
 800114c:	200e      	movs	r0, #14
 800114e:	f001 f96d 	bl	800242c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001152:	200e      	movs	r0, #14
 8001154:	f001 f9a2 	bl	800249c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001158:	2200      	movs	r2, #0
 800115a:	4611      	mov	r1, r2
 800115c:	200f      	movs	r0, #15
 800115e:	f001 f965 	bl	800242c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001162:	200f      	movs	r0, #15
 8001164:	f001 f99a 	bl	800249c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001168:	2200      	movs	r2, #0
 800116a:	4611      	mov	r1, r2
 800116c:	2010      	movs	r0, #16
 800116e:	f001 f95d 	bl	800242c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001172:	2010      	movs	r0, #16
 8001174:	f001 f992 	bl	800249c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001178:	2200      	movs	r2, #0
 800117a:	4611      	mov	r1, r2
 800117c:	2011      	movs	r0, #17
 800117e:	f001 f955 	bl	800242c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001182:	2011      	movs	r0, #17
 8001184:	f001 f98a 	bl	800249c <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8001188:	2200      	movs	r2, #0
 800118a:	4611      	mov	r1, r2
 800118c:	2038      	movs	r0, #56	; 0x38
 800118e:	f001 f94d 	bl	800242c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8001192:	2038      	movs	r0, #56	; 0x38
 8001194:	f001 f982 	bl	800249c <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 8001198:	2200      	movs	r2, #0
 800119a:	4611      	mov	r1, r2
 800119c:	2039      	movs	r0, #57	; 0x39
 800119e:	f001 f945 	bl	800242c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 80011a2:	2039      	movs	r0, #57	; 0x39
 80011a4:	f001 f97a 	bl	800249c <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 80011a8:	2200      	movs	r2, #0
 80011aa:	4611      	mov	r1, r2
 80011ac:	203a      	movs	r0, #58	; 0x3a
 80011ae:	f001 f93d 	bl	800242c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 80011b2:	203a      	movs	r0, #58	; 0x3a
 80011b4:	f001 f972 	bl	800249c <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 0, 0);
 80011b8:	2200      	movs	r2, #0
 80011ba:	4611      	mov	r1, r2
 80011bc:	203b      	movs	r0, #59	; 0x3b
 80011be:	f001 f935 	bl	800242c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 80011c2:	203b      	movs	r0, #59	; 0x3b
 80011c4:	f001 f96a 	bl	800249c <HAL_NVIC_EnableIRQ>

}
 80011c8:	b005      	add	sp, #20
 80011ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80011ce:	bf00      	nop
 80011d0:	40021000 	.word	0x40021000

080011d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011d4:	b570      	push	{r4, r5, r6, lr}
 80011d6:	b08c      	sub	sp, #48	; 0x30

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d8:	2400      	movs	r4, #0
 80011da:	9407      	str	r4, [sp, #28]
 80011dc:	9408      	str	r4, [sp, #32]
 80011de:	9409      	str	r4, [sp, #36]	; 0x24
 80011e0:	940a      	str	r4, [sp, #40]	; 0x28
 80011e2:	940b      	str	r4, [sp, #44]	; 0x2c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011e4:	4b39      	ldr	r3, [pc, #228]	; (80012cc <MX_GPIO_Init+0xf8>)
 80011e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80011e8:	f042 0210 	orr.w	r2, r2, #16
 80011ec:	64da      	str	r2, [r3, #76]	; 0x4c
 80011ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80011f0:	f002 0210 	and.w	r2, r2, #16
 80011f4:	9201      	str	r2, [sp, #4]
 80011f6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80011fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80011fe:	64da      	str	r2, [r3, #76]	; 0x4c
 8001200:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001202:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001206:	9202      	str	r2, [sp, #8]
 8001208:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800120a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800120c:	f042 0201 	orr.w	r2, r2, #1
 8001210:	64da      	str	r2, [r3, #76]	; 0x4c
 8001212:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001214:	f002 0201 	and.w	r2, r2, #1
 8001218:	9203      	str	r2, [sp, #12]
 800121a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800121c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800121e:	f042 0204 	orr.w	r2, r2, #4
 8001222:	64da      	str	r2, [r3, #76]	; 0x4c
 8001224:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001226:	f002 0204 	and.w	r2, r2, #4
 800122a:	9204      	str	r2, [sp, #16]
 800122c:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800122e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001230:	f042 0202 	orr.w	r2, r2, #2
 8001234:	64da      	str	r2, [r3, #76]	; 0x4c
 8001236:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001238:	f002 0202 	and.w	r2, r2, #2
 800123c:	9205      	str	r2, [sp, #20]
 800123e:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001240:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001242:	f042 0208 	orr.w	r2, r2, #8
 8001246:	64da      	str	r2, [r3, #76]	; 0x4c
 8001248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124a:	f003 0308 	and.w	r3, r3, #8
 800124e:	9306      	str	r3, [sp, #24]
 8001250:	9b06      	ldr	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LTE_DTR_Pin|LTE_RESET_Pin|GPS_RESET_Pin|GPS_WAKE_Pin
 8001252:	4d1f      	ldr	r5, [pc, #124]	; (80012d0 <MX_GPIO_Init+0xfc>)
 8001254:	4622      	mov	r2, r4
 8001256:	f240 216f 	movw	r1, #623	; 0x26f
 800125a:	4628      	mov	r0, r5
 800125c:	f001 fc22 	bl	8002aa4 <HAL_GPIO_WritePin>
                          |VBUS_ENB_Pin|LTE_PWR_EN_Pin|LTE_ON_OFF_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TH_Pin|nLED_Pin, GPIO_PIN_RESET);
 8001260:	4622      	mov	r2, r4
 8001262:	2103      	movs	r1, #3
 8001264:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001268:	f001 fc1c 	bl	8002aa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(n_FORCEOFF_GPIO_Port, n_FORCEOFF_Pin, GPIO_PIN_SET);
 800126c:	2201      	movs	r2, #1
 800126e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001272:	4628      	mov	r0, r5
 8001274:	f001 fc16 	bl	8002aa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = LTE_DTR_Pin|LTE_RESET_Pin|GPS_RESET_Pin|LTE_ON_OFF_Pin;
 8001278:	232e      	movs	r3, #46	; 0x2e
 800127a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800127c:	2311      	movs	r3, #17
 800127e:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001282:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001284:	a907      	add	r1, sp, #28
 8001286:	4628      	mov	r0, r5
 8001288:	f001 fb14 	bl	80028b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = LTE_ON_SLEEP_Pin|GPS_JAM_Pin|GPS_3D_FIX_Pin|VBUS_DETECT_Pin
 800128c:	f44f 6359 	mov.w	r3, #3472	; 0xd90
 8001290:	9307      	str	r3, [sp, #28]
                          |MagO_INT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001292:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001296:	a907      	add	r1, sp, #28
 8001298:	4628      	mov	r0, r5
 800129a:	f001 fb0b 	bl	80028b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = GPS_WAKE_Pin|VBUS_ENB_Pin|n_FORCEOFF_Pin|LTE_PWR_EN_Pin;
 800129e:	f241 2341 	movw	r3, #4673	; 0x1241
 80012a2:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a4:	2601      	movs	r6, #1
 80012a6:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a8:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012aa:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012ac:	a907      	add	r1, sp, #28
 80012ae:	4628      	mov	r0, r5
 80012b0:	f001 fb00 	bl	80028b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = TH_Pin|nLED_Pin;
 80012b4:	2303      	movs	r3, #3
 80012b6:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b8:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012bc:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012be:	a907      	add	r1, sp, #28
 80012c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012c4:	f001 faf6 	bl	80028b4 <HAL_GPIO_Init>

}
 80012c8:	b00c      	add	sp, #48	; 0x30
 80012ca:	bd70      	pop	{r4, r5, r6, pc}
 80012cc:	40021000 	.word	0x40021000
 80012d0:	48001000 	.word	0x48001000

080012d4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80012d4:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012d6:	4815      	ldr	r0, [pc, #84]	; (800132c <MX_I2C1_Init+0x58>)
 80012d8:	4b15      	ldr	r3, [pc, #84]	; (8001330 <MX_I2C1_Init+0x5c>)
 80012da:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x307075B1;
 80012dc:	f1a3 6378 	sub.w	r3, r3, #260046848	; 0xf800000
 80012e0:	f5a3 237d 	sub.w	r3, r3, #1036288	; 0xfd000
 80012e4:	f6a3 634f 	subw	r3, r3, #3663	; 0xe4f
 80012e8:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80012ea:	2300      	movs	r3, #0
 80012ec:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012ee:	2201      	movs	r2, #1
 80012f0:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012f2:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80012f4:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012f6:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012f8:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012fa:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012fc:	f002 f94b 	bl	8003596 <HAL_I2C_Init>
 8001300:	b950      	cbnz	r0, 8001318 <MX_I2C1_Init+0x44>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001302:	2100      	movs	r1, #0
 8001304:	4809      	ldr	r0, [pc, #36]	; (800132c <MX_I2C1_Init+0x58>)
 8001306:	f002 f9a4 	bl	8003652 <HAL_I2CEx_ConfigAnalogFilter>
 800130a:	b940      	cbnz	r0, 800131e <MX_I2C1_Init+0x4a>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800130c:	2100      	movs	r1, #0
 800130e:	4807      	ldr	r0, [pc, #28]	; (800132c <MX_I2C1_Init+0x58>)
 8001310:	f002 f9cd 	bl	80036ae <HAL_I2CEx_ConfigDigitalFilter>
 8001314:	b930      	cbnz	r0, 8001324 <MX_I2C1_Init+0x50>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001316:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001318:	f000 f850 	bl	80013bc <Error_Handler>
 800131c:	e7f1      	b.n	8001302 <MX_I2C1_Init+0x2e>
    Error_Handler();
 800131e:	f000 f84d 	bl	80013bc <Error_Handler>
 8001322:	e7f3      	b.n	800130c <MX_I2C1_Init+0x38>
    Error_Handler();
 8001324:	f000 f84a 	bl	80013bc <Error_Handler>
}
 8001328:	e7f5      	b.n	8001316 <MX_I2C1_Init+0x42>
 800132a:	bf00      	nop
 800132c:	20000318 	.word	0x20000318
 8001330:	40005400 	.word	0x40005400

08001334 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001334:	b510      	push	{r4, lr}
 8001336:	b0ac      	sub	sp, #176	; 0xb0
 8001338:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133a:	2100      	movs	r1, #0
 800133c:	9127      	str	r1, [sp, #156]	; 0x9c
 800133e:	9128      	str	r1, [sp, #160]	; 0xa0
 8001340:	9129      	str	r1, [sp, #164]	; 0xa4
 8001342:	912a      	str	r1, [sp, #168]	; 0xa8
 8001344:	912b      	str	r1, [sp, #172]	; 0xac
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001346:	2294      	movs	r2, #148	; 0x94
 8001348:	a802      	add	r0, sp, #8
 800134a:	f007 ffd9 	bl	8009300 <memset>
  if(i2cHandle->Instance==I2C1)
 800134e:	6822      	ldr	r2, [r4, #0]
 8001350:	4b17      	ldr	r3, [pc, #92]	; (80013b0 <HAL_I2C_MspInit+0x7c>)
 8001352:	429a      	cmp	r2, r3
 8001354:	d001      	beq.n	800135a <HAL_I2C_MspInit+0x26>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001356:	b02c      	add	sp, #176	; 0xb0
 8001358:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800135a:	2340      	movs	r3, #64	; 0x40
 800135c:	9302      	str	r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800135e:	a802      	add	r0, sp, #8
 8001360:	f003 fe96 	bl	8005090 <HAL_RCCEx_PeriphCLKConfig>
 8001364:	bb08      	cbnz	r0, 80013aa <HAL_I2C_MspInit+0x76>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001366:	4c13      	ldr	r4, [pc, #76]	; (80013b4 <HAL_I2C_MspInit+0x80>)
 8001368:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800136a:	f043 0302 	orr.w	r3, r3, #2
 800136e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8001370:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001372:	f003 0302 	and.w	r3, r3, #2
 8001376:	9300      	str	r3, [sp, #0]
 8001378:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = MagO_I2C1_SCL_Pin|MagO_I2C1_SDA_Pin;
 800137a:	23c0      	movs	r3, #192	; 0xc0
 800137c:	9327      	str	r3, [sp, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800137e:	2312      	movs	r3, #18
 8001380:	9328      	str	r3, [sp, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001382:	2300      	movs	r3, #0
 8001384:	9329      	str	r3, [sp, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001386:	2303      	movs	r3, #3
 8001388:	932a      	str	r3, [sp, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800138a:	2304      	movs	r3, #4
 800138c:	932b      	str	r3, [sp, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800138e:	a927      	add	r1, sp, #156	; 0x9c
 8001390:	4809      	ldr	r0, [pc, #36]	; (80013b8 <HAL_I2C_MspInit+0x84>)
 8001392:	f001 fa8f 	bl	80028b4 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001396:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001398:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800139c:	65a3      	str	r3, [r4, #88]	; 0x58
 800139e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80013a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013a4:	9301      	str	r3, [sp, #4]
 80013a6:	9b01      	ldr	r3, [sp, #4]
}
 80013a8:	e7d5      	b.n	8001356 <HAL_I2C_MspInit+0x22>
      Error_Handler();
 80013aa:	f000 f807 	bl	80013bc <Error_Handler>
 80013ae:	e7da      	b.n	8001366 <HAL_I2C_MspInit+0x32>
 80013b0:	40005400 	.word	0x40005400
 80013b4:	40021000 	.word	0x40021000
 80013b8:	48000400 	.word	0x48000400

080013bc <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013bc:	b672      	cpsid	i
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();

  while (1)
 80013be:	e7fe      	b.n	80013be <Error_Handler+0x2>

080013c0 <SystemClock_Config>:
{
 80013c0:	b500      	push	{lr}
 80013c2:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013c4:	2244      	movs	r2, #68	; 0x44
 80013c6:	2100      	movs	r1, #0
 80013c8:	a805      	add	r0, sp, #20
 80013ca:	f007 ff99 	bl	8009300 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013ce:	2000      	movs	r0, #0
 80013d0:	9000      	str	r0, [sp, #0]
 80013d2:	9001      	str	r0, [sp, #4]
 80013d4:	9002      	str	r0, [sp, #8]
 80013d6:	9003      	str	r0, [sp, #12]
 80013d8:	9004      	str	r0, [sp, #16]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80013da:	f002 ff1b 	bl	8004214 <HAL_PWREx_ControlVoltageScaling>
 80013de:	bb10      	cbnz	r0, 8001426 <SystemClock_Config+0x66>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013e0:	2201      	movs	r2, #1
 80013e2:	9205      	str	r2, [sp, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013e8:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013ea:	2302      	movs	r3, #2
 80013ec:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013ee:	2103      	movs	r1, #3
 80013f0:	9110      	str	r1, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80013f2:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 80013f4:	221e      	movs	r2, #30
 80013f6:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013f8:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80013fa:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80013fc:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013fe:	a805      	add	r0, sp, #20
 8001400:	f003 f874 	bl	80044ec <HAL_RCC_OscConfig>
 8001404:	b988      	cbnz	r0, 800142a <SystemClock_Config+0x6a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001406:	230f      	movs	r3, #15
 8001408:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800140a:	2303      	movs	r3, #3
 800140c:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800140e:	2300      	movs	r3, #0
 8001410:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001412:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001414:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001416:	2105      	movs	r1, #5
 8001418:	4668      	mov	r0, sp
 800141a:	f003 fba5 	bl	8004b68 <HAL_RCC_ClockConfig>
 800141e:	b930      	cbnz	r0, 800142e <SystemClock_Config+0x6e>
}
 8001420:	b017      	add	sp, #92	; 0x5c
 8001422:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001426:	f7ff ffc9 	bl	80013bc <Error_Handler>
    Error_Handler();
 800142a:	f7ff ffc7 	bl	80013bc <Error_Handler>
    Error_Handler();
 800142e:	f7ff ffc5 	bl	80013bc <Error_Handler>

08001432 <main>:
{
 8001432:	b508      	push	{r3, lr}
  HAL_Init();
 8001434:	f000 ffb2 	bl	800239c <HAL_Init>
  SystemClock_Config();
 8001438:	f7ff ffc2 	bl	80013c0 <SystemClock_Config>
  MX_GPIO_Init();
 800143c:	f7ff feca 	bl	80011d4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001440:	f7ff fe4c 	bl	80010dc <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001444:	f000 fb34 	bl	8001ab0 <MX_USART3_UART_Init>
  MX_SPI2_Init();
 8001448:	f000 f8dc 	bl	8001604 <MX_SPI2_Init>
  MX_I2C1_Init();
 800144c:	f7ff ff42 	bl	80012d4 <MX_I2C1_Init>
  MX_OCTOSPI1_Init();
 8001450:	f000 f812 	bl	8001478 <MX_OCTOSPI1_Init>
  MX_UART4_Init();
 8001454:	f000 fa8e 	bl	8001974 <MX_UART4_Init>
  MX_UART5_Init();
 8001458:	f000 fac0 	bl	80019dc <MX_UART5_Init>
  MX_USART2_UART_Init();
 800145c:	f000 faf4 	bl	8001a48 <MX_USART2_UART_Init>
  MX_USB_HOST_Init();
 8001460:	f007 fbae 	bl	8008bc0 <MX_USB_HOST_Init>
  Start_Scheduler();
 8001464:	f007 faec 	bl	8008a40 <Start_Scheduler>
  Debug_Task();
 8001468:	f7ff fe2e 	bl	80010c8 <Debug_Task>
    MX_USB_HOST_Process();
 800146c:	f007 fbc8 	bl	8008c00 <MX_USB_HOST_Process>
	  Run_Scheduler_Tasks();
 8001470:	f007 f94e 	bl	8008710 <Run_Scheduler_Tasks>
  while (1)
 8001474:	e7fa      	b.n	800146c <main+0x3a>
	...

08001478 <MX_OCTOSPI1_Init>:
OSPI_HandleTypeDef hospi1;
DMA_HandleTypeDef hdma_octospi1;

/* OCTOSPI1 init function */
void MX_OCTOSPI1_Init(void)
{
 8001478:	b500      	push	{lr}
 800147a:	b087      	sub	sp, #28

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 800147c:	2300      	movs	r3, #0
 800147e:	9301      	str	r3, [sp, #4]
 8001480:	9302      	str	r3, [sp, #8]
 8001482:	9303      	str	r3, [sp, #12]
 8001484:	9304      	str	r3, [sp, #16]
 8001486:	9305      	str	r3, [sp, #20]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  hospi1.Instance = OCTOSPI1;
 8001488:	4817      	ldr	r0, [pc, #92]	; (80014e8 <MX_OCTOSPI1_Init+0x70>)
 800148a:	4a18      	ldr	r2, [pc, #96]	; (80014ec <MX_OCTOSPI1_Init+0x74>)
 800148c:	6002      	str	r2, [r0, #0]
  hospi1.Init.FifoThreshold = 1;
 800148e:	2201      	movs	r2, #1
 8001490:	6042      	str	r2, [r0, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8001492:	6083      	str	r3, [r0, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 8001494:	60c3      	str	r3, [r0, #12]
  hospi1.Init.DeviceSize = 27;
 8001496:	221b      	movs	r2, #27
 8001498:	6102      	str	r2, [r0, #16]
  hospi1.Init.ChipSelectHighTime = 2;
 800149a:	2202      	movs	r2, #2
 800149c:	6142      	str	r2, [r0, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 800149e:	6183      	str	r3, [r0, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 80014a0:	61c3      	str	r3, [r0, #28]
  hospi1.Init.ClockPrescaler = 60;
 80014a2:	223c      	movs	r2, #60	; 0x3c
 80014a4:	6202      	str	r2, [r0, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80014a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014aa:	6242      	str	r2, [r0, #36]	; 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 80014ac:	6283      	str	r3, [r0, #40]	; 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 80014ae:	62c3      	str	r3, [r0, #44]	; 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 80014b0:	2308      	movs	r3, #8
 80014b2:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 80014b4:	f002 fc9e 	bl	8003df4 <HAL_OSPI_Init>
 80014b8:	b978      	cbnz	r0, 80014da <MX_OCTOSPI1_Init+0x62>
  {
    Error_Handler();
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 80014ba:	2301      	movs	r3, #1
 80014bc:	9301      	str	r3, [sp, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 80014be:	9303      	str	r3, [sp, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 80014c0:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80014c4:	9304      	str	r3, [sp, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80014c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80014ca:	a901      	add	r1, sp, #4
 80014cc:	4806      	ldr	r0, [pc, #24]	; (80014e8 <MX_OCTOSPI1_Init+0x70>)
 80014ce:	f002 fd09 	bl	8003ee4 <HAL_OSPIM_Config>
 80014d2:	b928      	cbnz	r0, 80014e0 <MX_OCTOSPI1_Init+0x68>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 80014d4:	b007      	add	sp, #28
 80014d6:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80014da:	f7ff ff6f 	bl	80013bc <Error_Handler>
 80014de:	e7ec      	b.n	80014ba <MX_OCTOSPI1_Init+0x42>
    Error_Handler();
 80014e0:	f7ff ff6c 	bl	80013bc <Error_Handler>
}
 80014e4:	e7f6      	b.n	80014d4 <MX_OCTOSPI1_Init+0x5c>
 80014e6:	bf00      	nop
 80014e8:	200003cc 	.word	0x200003cc
 80014ec:	a0001000 	.word	0xa0001000

080014f0 <HAL_OSPI_MspInit>:

void HAL_OSPI_MspInit(OSPI_HandleTypeDef* ospiHandle)
{
 80014f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80014f4:	b0ae      	sub	sp, #184	; 0xb8
 80014f6:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f8:	2100      	movs	r1, #0
 80014fa:	9129      	str	r1, [sp, #164]	; 0xa4
 80014fc:	912a      	str	r1, [sp, #168]	; 0xa8
 80014fe:	912b      	str	r1, [sp, #172]	; 0xac
 8001500:	912c      	str	r1, [sp, #176]	; 0xb0
 8001502:	912d      	str	r1, [sp, #180]	; 0xb4
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001504:	2294      	movs	r2, #148	; 0x94
 8001506:	a804      	add	r0, sp, #16
 8001508:	f007 fefa 	bl	8009300 <memset>
  if(ospiHandle->Instance==OCTOSPI1)
 800150c:	6822      	ldr	r2, [r4, #0]
 800150e:	4b38      	ldr	r3, [pc, #224]	; (80015f0 <HAL_OSPI_MspInit+0x100>)
 8001510:	429a      	cmp	r2, r3
 8001512:	d002      	beq.n	800151a <HAL_OSPI_MspInit+0x2a>
    HAL_NVIC_EnableIRQ(OCTOSPI1_IRQn);
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }
}
 8001514:	b02e      	add	sp, #184	; 0xb8
 8001516:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 800151a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800151e:	9304      	str	r3, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001520:	a804      	add	r0, sp, #16
 8001522:	f003 fdb5 	bl	8005090 <HAL_RCCEx_PeriphCLKConfig>
 8001526:	2800      	cmp	r0, #0
 8001528:	d15b      	bne.n	80015e2 <HAL_OSPI_MspInit+0xf2>
    __HAL_RCC_OSPIM_CLK_ENABLE();
 800152a:	4b32      	ldr	r3, [pc, #200]	; (80015f4 <HAL_OSPI_MspInit+0x104>)
 800152c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800152e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001532:	64da      	str	r2, [r3, #76]	; 0x4c
 8001534:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001536:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800153a:	9200      	str	r2, [sp, #0]
 800153c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 800153e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001540:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001544:	651a      	str	r2, [r3, #80]	; 0x50
 8001546:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001548:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800154c:	9201      	str	r2, [sp, #4]
 800154e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001550:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001552:	f042 0201 	orr.w	r2, r2, #1
 8001556:	64da      	str	r2, [r3, #76]	; 0x4c
 8001558:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800155a:	f002 0201 	and.w	r2, r2, #1
 800155e:	9202      	str	r2, [sp, #8]
 8001560:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001562:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001564:	f042 0202 	orr.w	r2, r2, #2
 8001568:	64da      	str	r2, [r3, #76]	; 0x4c
 800156a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800156c:	f003 0302 	and.w	r3, r3, #2
 8001570:	9303      	str	r3, [sp, #12]
 8001572:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = FLASH_CS_Pin|FLASH_CLK_Pin|FLASH_IO3_Pin|FLASH_IO2_Pin;
 8001574:	23cc      	movs	r3, #204	; 0xcc
 8001576:	9329      	str	r3, [sp, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001578:	f04f 0802 	mov.w	r8, #2
 800157c:	f8cd 80a8 	str.w	r8, [sp, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2500      	movs	r5, #0
 8001582:	952b      	str	r5, [sp, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001584:	2603      	movs	r6, #3
 8001586:	962c      	str	r6, [sp, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001588:	270a      	movs	r7, #10
 800158a:	972d      	str	r7, [sp, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800158c:	a929      	add	r1, sp, #164	; 0xa4
 800158e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001592:	f001 f98f 	bl	80028b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = FLASH_IO1_Pin|FLASH_IO0_Pin;
 8001596:	9629      	str	r6, [sp, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001598:	f8cd 80a8 	str.w	r8, [sp, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159c:	952b      	str	r5, [sp, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800159e:	962c      	str	r6, [sp, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80015a0:	972d      	str	r7, [sp, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a2:	a929      	add	r1, sp, #164	; 0xa4
 80015a4:	4814      	ldr	r0, [pc, #80]	; (80015f8 <HAL_OSPI_MspInit+0x108>)
 80015a6:	f001 f985 	bl	80028b4 <HAL_GPIO_Init>
    hdma_octospi1.Instance = DMA2_Channel4;
 80015aa:	4814      	ldr	r0, [pc, #80]	; (80015fc <HAL_OSPI_MspInit+0x10c>)
 80015ac:	4b14      	ldr	r3, [pc, #80]	; (8001600 <HAL_OSPI_MspInit+0x110>)
 80015ae:	6003      	str	r3, [r0, #0]
    hdma_octospi1.Init.Request = DMA_REQUEST_OCTOSPI1;
 80015b0:	2328      	movs	r3, #40	; 0x28
 80015b2:	6043      	str	r3, [r0, #4]
    hdma_octospi1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015b4:	6085      	str	r5, [r0, #8]
    hdma_octospi1.Init.PeriphInc = DMA_PINC_DISABLE;
 80015b6:	60c5      	str	r5, [r0, #12]
    hdma_octospi1.Init.MemInc = DMA_MINC_ENABLE;
 80015b8:	2380      	movs	r3, #128	; 0x80
 80015ba:	6103      	str	r3, [r0, #16]
    hdma_octospi1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015bc:	6145      	str	r5, [r0, #20]
    hdma_octospi1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015be:	6185      	str	r5, [r0, #24]
    hdma_octospi1.Init.Mode = DMA_NORMAL;
 80015c0:	61c5      	str	r5, [r0, #28]
    hdma_octospi1.Init.Priority = DMA_PRIORITY_LOW;
 80015c2:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_octospi1) != HAL_OK)
 80015c4:	f000 ffec 	bl	80025a0 <HAL_DMA_Init>
 80015c8:	b970      	cbnz	r0, 80015e8 <HAL_OSPI_MspInit+0xf8>
    __HAL_LINKDMA(ospiHandle,hdma,hdma_octospi1);
 80015ca:	4b0c      	ldr	r3, [pc, #48]	; (80015fc <HAL_OSPI_MspInit+0x10c>)
 80015cc:	6423      	str	r3, [r4, #64]	; 0x40
 80015ce:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(OCTOSPI1_IRQn, 0, 0);
 80015d0:	2200      	movs	r2, #0
 80015d2:	4611      	mov	r1, r2
 80015d4:	2047      	movs	r0, #71	; 0x47
 80015d6:	f000 ff29 	bl	800242c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OCTOSPI1_IRQn);
 80015da:	2047      	movs	r0, #71	; 0x47
 80015dc:	f000 ff5e 	bl	800249c <HAL_NVIC_EnableIRQ>
}
 80015e0:	e798      	b.n	8001514 <HAL_OSPI_MspInit+0x24>
      Error_Handler();
 80015e2:	f7ff feeb 	bl	80013bc <Error_Handler>
 80015e6:	e7a0      	b.n	800152a <HAL_OSPI_MspInit+0x3a>
      Error_Handler();
 80015e8:	f7ff fee8 	bl	80013bc <Error_Handler>
 80015ec:	e7ed      	b.n	80015ca <HAL_OSPI_MspInit+0xda>
 80015ee:	bf00      	nop
 80015f0:	a0001000 	.word	0xa0001000
 80015f4:	40021000 	.word	0x40021000
 80015f8:	48000400 	.word	0x48000400
 80015fc:	2000036c 	.word	0x2000036c
 8001600:	40020444 	.word	0x40020444

08001604 <MX_SPI2_Init>:
DMA_HandleTypeDef hdma_spi2_rx;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001604:	b508      	push	{r3, lr}
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001606:	480e      	ldr	r0, [pc, #56]	; (8001640 <MX_SPI2_Init+0x3c>)
 8001608:	4b0e      	ldr	r3, [pc, #56]	; (8001644 <MX_SPI2_Init+0x40>)
 800160a:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800160c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001610:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001612:	2300      	movs	r3, #0
 8001614:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001616:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800161a:	60c2      	str	r2, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800161c:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800161e:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8001620:	6183      	str	r3, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001622:	61c3      	str	r3, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001624:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001626:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001628:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800162a:	2207      	movs	r2, #7
 800162c:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800162e:	6303      	str	r3, [r0, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001630:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001632:	f003 ff9b 	bl	800556c <HAL_SPI_Init>
 8001636:	b900      	cbnz	r0, 800163a <MX_SPI2_Init+0x36>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001638:	bd08      	pop	{r3, pc}
    Error_Handler();
 800163a:	f7ff febf 	bl	80013bc <Error_Handler>
}
 800163e:	e7fb      	b.n	8001638 <MX_SPI2_Init+0x34>
 8001640:	200004dc 	.word	0x200004dc
 8001644:	40003800 	.word	0x40003800

08001648 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001648:	b510      	push	{r4, lr}
 800164a:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800164c:	2300      	movs	r3, #0
 800164e:	9303      	str	r3, [sp, #12]
 8001650:	9304      	str	r3, [sp, #16]
 8001652:	9305      	str	r3, [sp, #20]
 8001654:	9306      	str	r3, [sp, #24]
 8001656:	9307      	str	r3, [sp, #28]
  if(spiHandle->Instance==SPI2)
 8001658:	6802      	ldr	r2, [r0, #0]
 800165a:	4b32      	ldr	r3, [pc, #200]	; (8001724 <HAL_SPI_MspInit+0xdc>)
 800165c:	429a      	cmp	r2, r3
 800165e:	d001      	beq.n	8001664 <HAL_SPI_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001660:	b008      	add	sp, #32
 8001662:	bd10      	pop	{r4, pc}
 8001664:	4604      	mov	r4, r0
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001666:	f503 33ec 	add.w	r3, r3, #120832	; 0x1d800
 800166a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800166c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001670:	659a      	str	r2, [r3, #88]	; 0x58
 8001672:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001674:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001678:	9201      	str	r2, [sp, #4]
 800167a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800167c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800167e:	f042 0202 	orr.w	r2, r2, #2
 8001682:	64da      	str	r2, [r3, #76]	; 0x4c
 8001684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	9302      	str	r3, [sp, #8]
 800168c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = NXP_SPI2_CS_Pin|NXP_SPI2_SCK_Pin|NXP_SPI2_DATA_O_Pin|NXP_SPI2_DATA_In_Pin;
 800168e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001692:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001694:	2302      	movs	r3, #2
 8001696:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001698:	2303      	movs	r3, #3
 800169a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800169c:	2305      	movs	r3, #5
 800169e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a0:	a903      	add	r1, sp, #12
 80016a2:	4821      	ldr	r0, [pc, #132]	; (8001728 <HAL_SPI_MspInit+0xe0>)
 80016a4:	f001 f906 	bl	80028b4 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Channel5;
 80016a8:	4820      	ldr	r0, [pc, #128]	; (800172c <HAL_SPI_MspInit+0xe4>)
 80016aa:	4b21      	ldr	r3, [pc, #132]	; (8001730 <HAL_SPI_MspInit+0xe8>)
 80016ac:	6003      	str	r3, [r0, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 80016ae:	230c      	movs	r3, #12
 80016b0:	6043      	str	r3, [r0, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016b2:	2300      	movs	r3, #0
 80016b4:	6083      	str	r3, [r0, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016b6:	60c3      	str	r3, [r0, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80016b8:	2280      	movs	r2, #128	; 0x80
 80016ba:	6102      	str	r2, [r0, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016bc:	6143      	str	r3, [r0, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016be:	6183      	str	r3, [r0, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 80016c0:	2320      	movs	r3, #32
 80016c2:	61c3      	str	r3, [r0, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80016c4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80016c8:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80016ca:	f000 ff69 	bl	80025a0 <HAL_DMA_Init>
 80016ce:	bb10      	cbnz	r0, 8001716 <HAL_SPI_MspInit+0xce>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 80016d0:	4b16      	ldr	r3, [pc, #88]	; (800172c <HAL_SPI_MspInit+0xe4>)
 80016d2:	65a3      	str	r3, [r4, #88]	; 0x58
 80016d4:	629c      	str	r4, [r3, #40]	; 0x28
    hdma_spi2_tx.Instance = DMA1_Channel6;
 80016d6:	4817      	ldr	r0, [pc, #92]	; (8001734 <HAL_SPI_MspInit+0xec>)
 80016d8:	4b17      	ldr	r3, [pc, #92]	; (8001738 <HAL_SPI_MspInit+0xf0>)
 80016da:	6003      	str	r3, [r0, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 80016dc:	230d      	movs	r3, #13
 80016de:	6043      	str	r3, [r0, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016e0:	2310      	movs	r3, #16
 80016e2:	6083      	str	r3, [r0, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016e4:	2300      	movs	r3, #0
 80016e6:	60c3      	str	r3, [r0, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016e8:	2280      	movs	r2, #128	; 0x80
 80016ea:	6102      	str	r2, [r0, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016ec:	6143      	str	r3, [r0, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016ee:	6183      	str	r3, [r0, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80016f0:	61c3      	str	r3, [r0, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80016f2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80016f6:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80016f8:	f000 ff52 	bl	80025a0 <HAL_DMA_Init>
 80016fc:	b970      	cbnz	r0, 800171c <HAL_SPI_MspInit+0xd4>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 80016fe:	4b0d      	ldr	r3, [pc, #52]	; (8001734 <HAL_SPI_MspInit+0xec>)
 8001700:	6563      	str	r3, [r4, #84]	; 0x54
 8001702:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001704:	2200      	movs	r2, #0
 8001706:	4611      	mov	r1, r2
 8001708:	2024      	movs	r0, #36	; 0x24
 800170a:	f000 fe8f 	bl	800242c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800170e:	2024      	movs	r0, #36	; 0x24
 8001710:	f000 fec4 	bl	800249c <HAL_NVIC_EnableIRQ>
}
 8001714:	e7a4      	b.n	8001660 <HAL_SPI_MspInit+0x18>
      Error_Handler();
 8001716:	f7ff fe51 	bl	80013bc <Error_Handler>
 800171a:	e7d9      	b.n	80016d0 <HAL_SPI_MspInit+0x88>
      Error_Handler();
 800171c:	f7ff fe4e 	bl	80013bc <Error_Handler>
 8001720:	e7ed      	b.n	80016fe <HAL_SPI_MspInit+0xb6>
 8001722:	bf00      	nop
 8001724:	40003800 	.word	0x40003800
 8001728:	48000400 	.word	0x48000400
 800172c:	2000041c 	.word	0x2000041c
 8001730:	40020058 	.word	0x40020058
 8001734:	2000047c 	.word	0x2000047c
 8001738:	4002006c 	.word	0x4002006c

0800173c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800173c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800173e:	4b0a      	ldr	r3, [pc, #40]	; (8001768 <HAL_MspInit+0x2c>)
 8001740:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001742:	f042 0201 	orr.w	r2, r2, #1
 8001746:	661a      	str	r2, [r3, #96]	; 0x60
 8001748:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800174a:	f002 0201 	and.w	r2, r2, #1
 800174e:	9200      	str	r2, [sp, #0]
 8001750:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001752:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001754:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001758:	659a      	str	r2, [r3, #88]	; 0x58
 800175a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800175c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001760:	9301      	str	r3, [sp, #4]
 8001762:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001764:	b002      	add	sp, #8
 8001766:	4770      	bx	lr
 8001768:	40021000 	.word	0x40021000

0800176c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800176c:	e7fe      	b.n	800176c <NMI_Handler>

0800176e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800176e:	e7fe      	b.n	800176e <HardFault_Handler>

08001770 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001770:	e7fe      	b.n	8001770 <MemManage_Handler>

08001772 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001772:	e7fe      	b.n	8001772 <BusFault_Handler>

08001774 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001774:	e7fe      	b.n	8001774 <UsageFault_Handler>

08001776 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001776:	4770      	bx	lr

08001778 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001778:	4770      	bx	lr

0800177a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800177a:	4770      	bx	lr

0800177c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800177c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800177e:	f000 fe1d 	bl	80023bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001782:	bd08      	pop	{r3, pc}

08001784 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001784:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8001786:	4802      	ldr	r0, [pc, #8]	; (8001790 <DMA1_Channel1_IRQHandler+0xc>)
 8001788:	f001 f82f 	bl	80027ea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800178c:	bd08      	pop	{r3, pc}
 800178e:	bf00      	nop
 8001790:	20000604 	.word	0x20000604

08001794 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001794:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8001796:	4802      	ldr	r0, [pc, #8]	; (80017a0 <DMA1_Channel2_IRQHandler+0xc>)
 8001798:	f001 f827 	bl	80027ea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800179c:	bd08      	pop	{r3, pc}
 800179e:	bf00      	nop
 80017a0:	20000664 	.word	0x20000664

080017a4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80017a4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80017a6:	4802      	ldr	r0, [pc, #8]	; (80017b0 <DMA1_Channel3_IRQHandler+0xc>)
 80017a8:	f001 f81f 	bl	80027ea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80017ac:	bd08      	pop	{r3, pc}
 80017ae:	bf00      	nop
 80017b0:	20000784 	.word	0x20000784

080017b4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80017b4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80017b6:	4802      	ldr	r0, [pc, #8]	; (80017c0 <DMA1_Channel4_IRQHandler+0xc>)
 80017b8:	f001 f817 	bl	80027ea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80017bc:	bd08      	pop	{r3, pc}
 80017be:	bf00      	nop
 80017c0:	200007e4 	.word	0x200007e4

080017c4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80017c4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80017c6:	4802      	ldr	r0, [pc, #8]	; (80017d0 <DMA1_Channel5_IRQHandler+0xc>)
 80017c8:	f001 f80f 	bl	80027ea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80017cc:	bd08      	pop	{r3, pc}
 80017ce:	bf00      	nop
 80017d0:	2000041c 	.word	0x2000041c

080017d4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80017d4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80017d6:	4802      	ldr	r0, [pc, #8]	; (80017e0 <DMA1_Channel6_IRQHandler+0xc>)
 80017d8:	f001 f807 	bl	80027ea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80017dc:	bd08      	pop	{r3, pc}
 80017de:	bf00      	nop
 80017e0:	2000047c 	.word	0x2000047c

080017e4 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80017e4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80017e6:	4802      	ldr	r0, [pc, #8]	; (80017f0 <DMA1_Channel7_IRQHandler+0xc>)
 80017e8:	f000 ffff 	bl	80027ea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80017ec:	bd08      	pop	{r3, pc}
 80017ee:	bf00      	nop
 80017f0:	20000724 	.word	0x20000724

080017f4 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80017f4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80017f6:	4802      	ldr	r0, [pc, #8]	; (8001800 <SPI2_IRQHandler+0xc>)
 80017f8:	f003 ff28 	bl	800564c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80017fc:	bd08      	pop	{r3, pc}
 80017fe:	bf00      	nop
 8001800:	200004dc 	.word	0x200004dc

08001804 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001804:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001806:	4802      	ldr	r0, [pc, #8]	; (8001810 <USART2_IRQHandler+0xc>)
 8001808:	f004 f8a0 	bl	800594c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800180c:	bd08      	pop	{r3, pc}
 800180e:	bf00      	nop
 8001810:	20000844 	.word	0x20000844

08001814 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001814:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001816:	4802      	ldr	r0, [pc, #8]	; (8001820 <USART3_IRQHandler+0xc>)
 8001818:	f004 f898 	bl	800594c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800181c:	bd08      	pop	{r3, pc}
 800181e:	bf00      	nop
 8001820:	200008d4 	.word	0x200008d4

08001824 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001824:	b508      	push	{r3, lr}
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001826:	4802      	ldr	r0, [pc, #8]	; (8001830 <UART4_IRQHandler+0xc>)
 8001828:	f004 f890 	bl	800594c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800182c:	bd08      	pop	{r3, pc}
 800182e:	bf00      	nop
 8001830:	20000964 	.word	0x20000964

08001834 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001834:	b508      	push	{r3, lr}
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001836:	4802      	ldr	r0, [pc, #8]	; (8001840 <UART5_IRQHandler+0xc>)
 8001838:	f004 f888 	bl	800594c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800183c:	bd08      	pop	{r3, pc}
 800183e:	bf00      	nop
 8001840:	200009f4 	.word	0x200009f4

08001844 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8001844:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001846:	4802      	ldr	r0, [pc, #8]	; (8001850 <DMA2_Channel1_IRQHandler+0xc>)
 8001848:	f000 ffcf 	bl	80027ea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 800184c:	bd08      	pop	{r3, pc}
 800184e:	bf00      	nop
 8001850:	200006c4 	.word	0x200006c4

08001854 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8001854:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8001856:	4802      	ldr	r0, [pc, #8]	; (8001860 <DMA2_Channel2_IRQHandler+0xc>)
 8001858:	f000 ffc7 	bl	80027ea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 800185c:	bd08      	pop	{r3, pc}
 800185e:	bf00      	nop
 8001860:	200005a4 	.word	0x200005a4

08001864 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8001864:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001866:	4802      	ldr	r0, [pc, #8]	; (8001870 <DMA2_Channel3_IRQHandler+0xc>)
 8001868:	f000 ffbf 	bl	80027ea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 800186c:	bd08      	pop	{r3, pc}
 800186e:	bf00      	nop
 8001870:	20000544 	.word	0x20000544

08001874 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8001874:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_octospi1);
 8001876:	4802      	ldr	r0, [pc, #8]	; (8001880 <DMA2_Channel4_IRQHandler+0xc>)
 8001878:	f000 ffb7 	bl	80027ea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 800187c:	bd08      	pop	{r3, pc}
 800187e:	bf00      	nop
 8001880:	2000036c 	.word	0x2000036c

08001884 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001884:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001886:	4802      	ldr	r0, [pc, #8]	; (8001890 <OTG_FS_IRQHandler+0xc>)
 8001888:	f001 fd9a 	bl	80033c0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800188c:	bd08      	pop	{r3, pc}
 800188e:	bf00      	nop
 8001890:	200011a4 	.word	0x200011a4

08001894 <OCTOSPI1_IRQHandler>:

/**
  * @brief This function handles OCTOSPI1 global interrupt.
  */
void OCTOSPI1_IRQHandler(void)
{
 8001894:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OCTOSPI1_IRQn 0 */

  /* USER CODE END OCTOSPI1_IRQn 0 */
  HAL_OSPI_IRQHandler(&hospi1);
 8001896:	4802      	ldr	r0, [pc, #8]	; (80018a0 <OCTOSPI1_IRQHandler+0xc>)
 8001898:	f002 f9da 	bl	8003c50 <HAL_OSPI_IRQHandler>
  /* USER CODE BEGIN OCTOSPI1_IRQn 1 */

  /* USER CODE END OCTOSPI1_IRQn 1 */
}
 800189c:	bd08      	pop	{r3, pc}
 800189e:	bf00      	nop
 80018a0:	200003cc 	.word	0x200003cc

080018a4 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 80018a4:	2001      	movs	r0, #1
 80018a6:	4770      	bx	lr

080018a8 <_kill>:

int _kill(int pid, int sig)
{
 80018a8:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018aa:	f007 fb25 	bl	8008ef8 <__errno>
 80018ae:	2316      	movs	r3, #22
 80018b0:	6003      	str	r3, [r0, #0]
  return -1;
}
 80018b2:	f04f 30ff 	mov.w	r0, #4294967295
 80018b6:	bd08      	pop	{r3, pc}

080018b8 <_exit>:

void _exit (int status)
{
 80018b8:	b508      	push	{r3, lr}
  _kill(status, -1);
 80018ba:	f04f 31ff 	mov.w	r1, #4294967295
 80018be:	f7ff fff3 	bl	80018a8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80018c2:	e7fe      	b.n	80018c2 <_exit+0xa>

080018c4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018c4:	b570      	push	{r4, r5, r6, lr}
 80018c6:	460c      	mov	r4, r1
 80018c8:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ca:	2500      	movs	r5, #0
 80018cc:	e006      	b.n	80018dc <_read+0x18>
  {
    *ptr++ = __io_getchar();
 80018ce:	f3af 8000 	nop.w
 80018d2:	4621      	mov	r1, r4
 80018d4:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018d8:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 80018da:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018dc:	42b5      	cmp	r5, r6
 80018de:	dbf6      	blt.n	80018ce <_read+0xa>
  }

  return len;
}
 80018e0:	4630      	mov	r0, r6
 80018e2:	bd70      	pop	{r4, r5, r6, pc}

080018e4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018e4:	b570      	push	{r4, r5, r6, lr}
 80018e6:	460c      	mov	r4, r1
 80018e8:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ea:	2500      	movs	r5, #0
 80018ec:	e004      	b.n	80018f8 <_write+0x14>
  {
    __io_putchar(*ptr++);
 80018ee:	f814 0b01 	ldrb.w	r0, [r4], #1
 80018f2:	f005 fac1 	bl	8006e78 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018f6:	3501      	adds	r5, #1
 80018f8:	42b5      	cmp	r5, r6
 80018fa:	dbf8      	blt.n	80018ee <_write+0xa>
  }
  return len;
}
 80018fc:	4630      	mov	r0, r6
 80018fe:	bd70      	pop	{r4, r5, r6, pc}

08001900 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8001900:	f04f 30ff 	mov.w	r0, #4294967295
 8001904:	4770      	bx	lr

08001906 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8001906:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800190a:	604b      	str	r3, [r1, #4]
  return 0;
}
 800190c:	2000      	movs	r0, #0
 800190e:	4770      	bx	lr

08001910 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8001910:	2001      	movs	r0, #1
 8001912:	4770      	bx	lr

08001914 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8001914:	2000      	movs	r0, #0
 8001916:	4770      	bx	lr

08001918 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001918:	b510      	push	{r4, lr}
 800191a:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800191c:	4a0c      	ldr	r2, [pc, #48]	; (8001950 <_sbrk+0x38>)
 800191e:	490d      	ldr	r1, [pc, #52]	; (8001954 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001920:	480d      	ldr	r0, [pc, #52]	; (8001958 <_sbrk+0x40>)
 8001922:	6800      	ldr	r0, [r0, #0]
 8001924:	b140      	cbz	r0, 8001938 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001926:	480c      	ldr	r0, [pc, #48]	; (8001958 <_sbrk+0x40>)
 8001928:	6800      	ldr	r0, [r0, #0]
 800192a:	4403      	add	r3, r0
 800192c:	1a52      	subs	r2, r2, r1
 800192e:	4293      	cmp	r3, r2
 8001930:	d806      	bhi.n	8001940 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001932:	4a09      	ldr	r2, [pc, #36]	; (8001958 <_sbrk+0x40>)
 8001934:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8001936:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001938:	4807      	ldr	r0, [pc, #28]	; (8001958 <_sbrk+0x40>)
 800193a:	4c08      	ldr	r4, [pc, #32]	; (800195c <_sbrk+0x44>)
 800193c:	6004      	str	r4, [r0, #0]
 800193e:	e7f2      	b.n	8001926 <_sbrk+0xe>
    errno = ENOMEM;
 8001940:	f007 fada 	bl	8008ef8 <__errno>
 8001944:	230c      	movs	r3, #12
 8001946:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001948:	f04f 30ff 	mov.w	r0, #4294967295
 800194c:	e7f3      	b.n	8001936 <_sbrk+0x1e>
 800194e:	bf00      	nop
 8001950:	200a0000 	.word	0x200a0000
 8001954:	00002000 	.word	0x00002000
 8001958:	20000540 	.word	0x20000540
 800195c:	200014b8 	.word	0x200014b8

08001960 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001960:	4a03      	ldr	r2, [pc, #12]	; (8001970 <SystemInit+0x10>)
 8001962:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001966:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800196a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800196e:	4770      	bx	lr
 8001970:	e000ed00 	.word	0xe000ed00

08001974 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart3_rx;
DMA_HandleTypeDef hdma_usart3_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001974:	b508      	push	{r3, lr}
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001976:	4817      	ldr	r0, [pc, #92]	; (80019d4 <MX_UART4_Init+0x60>)
 8001978:	4b17      	ldr	r3, [pc, #92]	; (80019d8 <MX_UART4_Init+0x64>)
 800197a:	6003      	str	r3, [r0, #0]
  huart4.Init.BaudRate = 9600;
 800197c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001980:	6043      	str	r3, [r0, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001982:	2300      	movs	r3, #0
 8001984:	6083      	str	r3, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001986:	60c3      	str	r3, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001988:	6103      	str	r3, [r0, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800198a:	220c      	movs	r2, #12
 800198c:	6142      	str	r2, [r0, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800198e:	6183      	str	r3, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001990:	61c3      	str	r3, [r0, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001992:	6203      	str	r3, [r0, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001994:	6243      	str	r3, [r0, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001996:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001998:	f004 fc99 	bl	80062ce <HAL_UART_Init>
 800199c:	b970      	cbnz	r0, 80019bc <MX_UART4_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800199e:	2100      	movs	r1, #0
 80019a0:	480c      	ldr	r0, [pc, #48]	; (80019d4 <MX_UART4_Init+0x60>)
 80019a2:	f004 fd97 	bl	80064d4 <HAL_UARTEx_SetTxFifoThreshold>
 80019a6:	b960      	cbnz	r0, 80019c2 <MX_UART4_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019a8:	2100      	movs	r1, #0
 80019aa:	480a      	ldr	r0, [pc, #40]	; (80019d4 <MX_UART4_Init+0x60>)
 80019ac:	f004 fdb7 	bl	800651e <HAL_UARTEx_SetRxFifoThreshold>
 80019b0:	b950      	cbnz	r0, 80019c8 <MX_UART4_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80019b2:	4808      	ldr	r0, [pc, #32]	; (80019d4 <MX_UART4_Init+0x60>)
 80019b4:	f004 fd6f 	bl	8006496 <HAL_UARTEx_DisableFifoMode>
 80019b8:	b948      	cbnz	r0, 80019ce <MX_UART4_Init+0x5a>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80019ba:	bd08      	pop	{r3, pc}
    Error_Handler();
 80019bc:	f7ff fcfe 	bl	80013bc <Error_Handler>
 80019c0:	e7ed      	b.n	800199e <MX_UART4_Init+0x2a>
    Error_Handler();
 80019c2:	f7ff fcfb 	bl	80013bc <Error_Handler>
 80019c6:	e7ef      	b.n	80019a8 <MX_UART4_Init+0x34>
    Error_Handler();
 80019c8:	f7ff fcf8 	bl	80013bc <Error_Handler>
 80019cc:	e7f1      	b.n	80019b2 <MX_UART4_Init+0x3e>
    Error_Handler();
 80019ce:	f7ff fcf5 	bl	80013bc <Error_Handler>
}
 80019d2:	e7f2      	b.n	80019ba <MX_UART4_Init+0x46>
 80019d4:	20000964 	.word	0x20000964
 80019d8:	40004c00 	.word	0x40004c00

080019dc <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 80019dc:	b508      	push	{r3, lr}
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80019de:	4818      	ldr	r0, [pc, #96]	; (8001a40 <MX_UART5_Init+0x64>)
 80019e0:	4b18      	ldr	r3, [pc, #96]	; (8001a44 <MX_UART5_Init+0x68>)
 80019e2:	6003      	str	r3, [r0, #0]
  huart5.Init.BaudRate = 115200;
 80019e4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80019e8:	6043      	str	r3, [r0, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80019ea:	2300      	movs	r3, #0
 80019ec:	6083      	str	r3, [r0, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80019ee:	60c3      	str	r3, [r0, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80019f0:	6103      	str	r3, [r0, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80019f2:	220c      	movs	r2, #12
 80019f4:	6142      	str	r2, [r0, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80019f6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80019fa:	6182      	str	r2, [r0, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80019fc:	61c3      	str	r3, [r0, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019fe:	6203      	str	r3, [r0, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a00:	6243      	str	r3, [r0, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a02:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001a04:	f004 fc63 	bl	80062ce <HAL_UART_Init>
 8001a08:	b970      	cbnz	r0, 8001a28 <MX_UART5_Init+0x4c>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	480c      	ldr	r0, [pc, #48]	; (8001a40 <MX_UART5_Init+0x64>)
 8001a0e:	f004 fd61 	bl	80064d4 <HAL_UARTEx_SetTxFifoThreshold>
 8001a12:	b960      	cbnz	r0, 8001a2e <MX_UART5_Init+0x52>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a14:	2100      	movs	r1, #0
 8001a16:	480a      	ldr	r0, [pc, #40]	; (8001a40 <MX_UART5_Init+0x64>)
 8001a18:	f004 fd81 	bl	800651e <HAL_UARTEx_SetRxFifoThreshold>
 8001a1c:	b950      	cbnz	r0, 8001a34 <MX_UART5_Init+0x58>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8001a1e:	4808      	ldr	r0, [pc, #32]	; (8001a40 <MX_UART5_Init+0x64>)
 8001a20:	f004 fd39 	bl	8006496 <HAL_UARTEx_DisableFifoMode>
 8001a24:	b948      	cbnz	r0, 8001a3a <MX_UART5_Init+0x5e>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001a26:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001a28:	f7ff fcc8 	bl	80013bc <Error_Handler>
 8001a2c:	e7ed      	b.n	8001a0a <MX_UART5_Init+0x2e>
    Error_Handler();
 8001a2e:	f7ff fcc5 	bl	80013bc <Error_Handler>
 8001a32:	e7ef      	b.n	8001a14 <MX_UART5_Init+0x38>
    Error_Handler();
 8001a34:	f7ff fcc2 	bl	80013bc <Error_Handler>
 8001a38:	e7f1      	b.n	8001a1e <MX_UART5_Init+0x42>
    Error_Handler();
 8001a3a:	f7ff fcbf 	bl	80013bc <Error_Handler>
}
 8001a3e:	e7f2      	b.n	8001a26 <MX_UART5_Init+0x4a>
 8001a40:	200009f4 	.word	0x200009f4
 8001a44:	40005000 	.word	0x40005000

08001a48 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001a48:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a4a:	4817      	ldr	r0, [pc, #92]	; (8001aa8 <MX_USART2_UART_Init+0x60>)
 8001a4c:	4b17      	ldr	r3, [pc, #92]	; (8001aac <MX_USART2_UART_Init+0x64>)
 8001a4e:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8001a50:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001a54:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a56:	2300      	movs	r3, #0
 8001a58:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a5a:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a5c:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a5e:	220c      	movs	r2, #12
 8001a60:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a62:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a64:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a66:	6203      	str	r3, [r0, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a68:	6243      	str	r3, [r0, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a6a:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a6c:	f004 fc2f 	bl	80062ce <HAL_UART_Init>
 8001a70:	b970      	cbnz	r0, 8001a90 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a72:	2100      	movs	r1, #0
 8001a74:	480c      	ldr	r0, [pc, #48]	; (8001aa8 <MX_USART2_UART_Init+0x60>)
 8001a76:	f004 fd2d 	bl	80064d4 <HAL_UARTEx_SetTxFifoThreshold>
 8001a7a:	b960      	cbnz	r0, 8001a96 <MX_USART2_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	480a      	ldr	r0, [pc, #40]	; (8001aa8 <MX_USART2_UART_Init+0x60>)
 8001a80:	f004 fd4d 	bl	800651e <HAL_UARTEx_SetRxFifoThreshold>
 8001a84:	b950      	cbnz	r0, 8001a9c <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001a86:	4808      	ldr	r0, [pc, #32]	; (8001aa8 <MX_USART2_UART_Init+0x60>)
 8001a88:	f004 fd05 	bl	8006496 <HAL_UARTEx_DisableFifoMode>
 8001a8c:	b948      	cbnz	r0, 8001aa2 <MX_USART2_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a8e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001a90:	f7ff fc94 	bl	80013bc <Error_Handler>
 8001a94:	e7ed      	b.n	8001a72 <MX_USART2_UART_Init+0x2a>
    Error_Handler();
 8001a96:	f7ff fc91 	bl	80013bc <Error_Handler>
 8001a9a:	e7ef      	b.n	8001a7c <MX_USART2_UART_Init+0x34>
    Error_Handler();
 8001a9c:	f7ff fc8e 	bl	80013bc <Error_Handler>
 8001aa0:	e7f1      	b.n	8001a86 <MX_USART2_UART_Init+0x3e>
    Error_Handler();
 8001aa2:	f7ff fc8b 	bl	80013bc <Error_Handler>
}
 8001aa6:	e7f2      	b.n	8001a8e <MX_USART2_UART_Init+0x46>
 8001aa8:	20000844 	.word	0x20000844
 8001aac:	40004400 	.word	0x40004400

08001ab0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001ab0:	b508      	push	{r3, lr}
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001ab2:	4817      	ldr	r0, [pc, #92]	; (8001b10 <MX_USART3_UART_Init+0x60>)
 8001ab4:	4b17      	ldr	r3, [pc, #92]	; (8001b14 <MX_USART3_UART_Init+0x64>)
 8001ab6:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 8001ab8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001abc:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ac2:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001ac4:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001ac6:	220c      	movs	r2, #12
 8001ac8:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aca:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001acc:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ace:	6203      	str	r3, [r0, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ad0:	6243      	str	r3, [r0, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ad2:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ad4:	f004 fbfb 	bl	80062ce <HAL_UART_Init>
 8001ad8:	b970      	cbnz	r0, 8001af8 <MX_USART3_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ada:	2100      	movs	r1, #0
 8001adc:	480c      	ldr	r0, [pc, #48]	; (8001b10 <MX_USART3_UART_Init+0x60>)
 8001ade:	f004 fcf9 	bl	80064d4 <HAL_UARTEx_SetTxFifoThreshold>
 8001ae2:	b960      	cbnz	r0, 8001afe <MX_USART3_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	480a      	ldr	r0, [pc, #40]	; (8001b10 <MX_USART3_UART_Init+0x60>)
 8001ae8:	f004 fd19 	bl	800651e <HAL_UARTEx_SetRxFifoThreshold>
 8001aec:	b950      	cbnz	r0, 8001b04 <MX_USART3_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001aee:	4808      	ldr	r0, [pc, #32]	; (8001b10 <MX_USART3_UART_Init+0x60>)
 8001af0:	f004 fcd1 	bl	8006496 <HAL_UARTEx_DisableFifoMode>
 8001af4:	b948      	cbnz	r0, 8001b0a <MX_USART3_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001af6:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001af8:	f7ff fc60 	bl	80013bc <Error_Handler>
 8001afc:	e7ed      	b.n	8001ada <MX_USART3_UART_Init+0x2a>
    Error_Handler();
 8001afe:	f7ff fc5d 	bl	80013bc <Error_Handler>
 8001b02:	e7ef      	b.n	8001ae4 <MX_USART3_UART_Init+0x34>
    Error_Handler();
 8001b04:	f7ff fc5a 	bl	80013bc <Error_Handler>
 8001b08:	e7f1      	b.n	8001aee <MX_USART3_UART_Init+0x3e>
    Error_Handler();
 8001b0a:	f7ff fc57 	bl	80013bc <Error_Handler>
}
 8001b0e:	e7f2      	b.n	8001af6 <MX_USART3_UART_Init+0x46>
 8001b10:	200008d4 	.word	0x200008d4
 8001b14:	40004800 	.word	0x40004800

08001b18 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b1c:	b0b6      	sub	sp, #216	; 0xd8
 8001b1e:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b20:	2100      	movs	r1, #0
 8001b22:	9131      	str	r1, [sp, #196]	; 0xc4
 8001b24:	9132      	str	r1, [sp, #200]	; 0xc8
 8001b26:	9133      	str	r1, [sp, #204]	; 0xcc
 8001b28:	9134      	str	r1, [sp, #208]	; 0xd0
 8001b2a:	9135      	str	r1, [sp, #212]	; 0xd4
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b2c:	2294      	movs	r2, #148	; 0x94
 8001b2e:	a80c      	add	r0, sp, #48	; 0x30
 8001b30:	f007 fbe6 	bl	8009300 <memset>
  if(uartHandle->Instance==UART4)
 8001b34:	6823      	ldr	r3, [r4, #0]
 8001b36:	4a81      	ldr	r2, [pc, #516]	; (8001d3c <HAL_UART_MspInit+0x224>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d00d      	beq.n	8001b58 <HAL_UART_MspInit+0x40>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
  else if(uartHandle->Instance==UART5)
 8001b3c:	4a80      	ldr	r2, [pc, #512]	; (8001d40 <HAL_UART_MspInit+0x228>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d06e      	beq.n	8001c20 <HAL_UART_MspInit+0x108>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 8001b42:	4a80      	ldr	r2, [pc, #512]	; (8001d44 <HAL_UART_MspInit+0x22c>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	f000 8119 	beq.w	8001d7c <HAL_UART_MspInit+0x264>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(uartHandle->Instance==USART3)
 8001b4a:	4a7f      	ldr	r2, [pc, #508]	; (8001d48 <HAL_UART_MspInit+0x230>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	f000 818d 	beq.w	8001e6c <HAL_UART_MspInit+0x354>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001b52:	b036      	add	sp, #216	; 0xd8
 8001b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001b58:	2308      	movs	r3, #8
 8001b5a:	930c      	str	r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b5c:	a80c      	add	r0, sp, #48	; 0x30
 8001b5e:	f003 fa97 	bl	8005090 <HAL_RCCEx_PeriphCLKConfig>
 8001b62:	2800      	cmp	r0, #0
 8001b64:	d153      	bne.n	8001c0e <HAL_UART_MspInit+0xf6>
    __HAL_RCC_UART4_CLK_ENABLE();
 8001b66:	4b79      	ldr	r3, [pc, #484]	; (8001d4c <HAL_UART_MspInit+0x234>)
 8001b68:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001b6a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001b6e:	659a      	str	r2, [r3, #88]	; 0x58
 8001b70:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001b72:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8001b76:	9201      	str	r2, [sp, #4]
 8001b78:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b7c:	f042 0204 	orr.w	r2, r2, #4
 8001b80:	64da      	str	r2, [r3, #76]	; 0x4c
 8001b82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b84:	f003 0304 	and.w	r3, r3, #4
 8001b88:	9302      	str	r3, [sp, #8]
 8001b8a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
 8001b8c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001b90:	9331      	str	r3, [sp, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b92:	2302      	movs	r3, #2
 8001b94:	9332      	str	r3, [sp, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b96:	2500      	movs	r5, #0
 8001b98:	9533      	str	r5, [sp, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	9334      	str	r3, [sp, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001b9e:	2308      	movs	r3, #8
 8001ba0:	9335      	str	r3, [sp, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ba2:	a931      	add	r1, sp, #196	; 0xc4
 8001ba4:	486a      	ldr	r0, [pc, #424]	; (8001d50 <HAL_UART_MspInit+0x238>)
 8001ba6:	f000 fe85 	bl	80028b4 <HAL_GPIO_Init>
    hdma_uart4_tx.Instance = DMA2_Channel2;
 8001baa:	486a      	ldr	r0, [pc, #424]	; (8001d54 <HAL_UART_MspInit+0x23c>)
 8001bac:	4b6a      	ldr	r3, [pc, #424]	; (8001d58 <HAL_UART_MspInit+0x240>)
 8001bae:	6003      	str	r3, [r0, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8001bb0:	231f      	movs	r3, #31
 8001bb2:	6043      	str	r3, [r0, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001bb4:	2310      	movs	r3, #16
 8001bb6:	6083      	str	r3, [r0, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bb8:	60c5      	str	r5, [r0, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001bba:	2380      	movs	r3, #128	; 0x80
 8001bbc:	6103      	str	r3, [r0, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bbe:	6145      	str	r5, [r0, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bc0:	6185      	str	r5, [r0, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8001bc2:	61c5      	str	r5, [r0, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001bc4:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8001bc6:	f000 fceb 	bl	80025a0 <HAL_DMA_Init>
 8001bca:	bb18      	cbnz	r0, 8001c14 <HAL_UART_MspInit+0xfc>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 8001bcc:	4b61      	ldr	r3, [pc, #388]	; (8001d54 <HAL_UART_MspInit+0x23c>)
 8001bce:	67a3      	str	r3, [r4, #120]	; 0x78
 8001bd0:	629c      	str	r4, [r3, #40]	; 0x28
    hdma_uart4_rx.Instance = DMA2_Channel3;
 8001bd2:	4862      	ldr	r0, [pc, #392]	; (8001d5c <HAL_UART_MspInit+0x244>)
 8001bd4:	4b62      	ldr	r3, [pc, #392]	; (8001d60 <HAL_UART_MspInit+0x248>)
 8001bd6:	6003      	str	r3, [r0, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8001bd8:	231e      	movs	r3, #30
 8001bda:	6043      	str	r3, [r0, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	6083      	str	r3, [r0, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001be0:	60c3      	str	r3, [r0, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001be2:	2280      	movs	r2, #128	; 0x80
 8001be4:	6102      	str	r2, [r0, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001be6:	6143      	str	r3, [r0, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001be8:	6183      	str	r3, [r0, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8001bea:	2220      	movs	r2, #32
 8001bec:	61c2      	str	r2, [r0, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001bee:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001bf0:	f000 fcd6 	bl	80025a0 <HAL_DMA_Init>
 8001bf4:	b988      	cbnz	r0, 8001c1a <HAL_UART_MspInit+0x102>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8001bf6:	4b59      	ldr	r3, [pc, #356]	; (8001d5c <HAL_UART_MspInit+0x244>)
 8001bf8:	67e3      	str	r3, [r4, #124]	; 0x7c
 8001bfa:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	4611      	mov	r1, r2
 8001c00:	2034      	movs	r0, #52	; 0x34
 8001c02:	f000 fc13 	bl	800242c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001c06:	2034      	movs	r0, #52	; 0x34
 8001c08:	f000 fc48 	bl	800249c <HAL_NVIC_EnableIRQ>
 8001c0c:	e7a1      	b.n	8001b52 <HAL_UART_MspInit+0x3a>
      Error_Handler();
 8001c0e:	f7ff fbd5 	bl	80013bc <Error_Handler>
 8001c12:	e7a8      	b.n	8001b66 <HAL_UART_MspInit+0x4e>
      Error_Handler();
 8001c14:	f7ff fbd2 	bl	80013bc <Error_Handler>
 8001c18:	e7d8      	b.n	8001bcc <HAL_UART_MspInit+0xb4>
      Error_Handler();
 8001c1a:	f7ff fbcf 	bl	80013bc <Error_Handler>
 8001c1e:	e7ea      	b.n	8001bf6 <HAL_UART_MspInit+0xde>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001c20:	2310      	movs	r3, #16
 8001c22:	930c      	str	r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c24:	a80c      	add	r0, sp, #48	; 0x30
 8001c26:	f003 fa33 	bl	8005090 <HAL_RCCEx_PeriphCLKConfig>
 8001c2a:	2800      	cmp	r0, #0
 8001c2c:	d17c      	bne.n	8001d28 <HAL_UART_MspInit+0x210>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001c2e:	4b47      	ldr	r3, [pc, #284]	; (8001d4c <HAL_UART_MspInit+0x234>)
 8001c30:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001c32:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001c36:	659a      	str	r2, [r3, #88]	; 0x58
 8001c38:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001c3a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001c3e:	9203      	str	r2, [sp, #12]
 8001c40:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c44:	f042 0204 	orr.w	r2, r2, #4
 8001c48:	64da      	str	r2, [r3, #76]	; 0x4c
 8001c4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c4c:	f002 0204 	and.w	r2, r2, #4
 8001c50:	9204      	str	r2, [sp, #16]
 8001c52:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c54:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c56:	f042 0208 	orr.w	r2, r2, #8
 8001c5a:	64da      	str	r2, [r3, #76]	; 0x4c
 8001c5c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c5e:	f002 0208 	and.w	r2, r2, #8
 8001c62:	9205      	str	r2, [sp, #20]
 8001c64:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c68:	f042 0202 	orr.w	r2, r2, #2
 8001c6c:	64da      	str	r2, [r3, #76]	; 0x4c
 8001c6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c70:	f003 0302 	and.w	r3, r3, #2
 8001c74:	9306      	str	r3, [sp, #24]
 8001c76:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = LTE_U5_TX_Pin;
 8001c78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c7c:	9331      	str	r3, [sp, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7e:	f04f 0802 	mov.w	r8, #2
 8001c82:	f8cd 80c8 	str.w	r8, [sp, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c86:	2500      	movs	r5, #0
 8001c88:	9533      	str	r5, [sp, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c8a:	2703      	movs	r7, #3
 8001c8c:	9734      	str	r7, [sp, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001c8e:	2608      	movs	r6, #8
 8001c90:	9635      	str	r6, [sp, #212]	; 0xd4
    HAL_GPIO_Init(LTE_U5_TX_GPIO_Port, &GPIO_InitStruct);
 8001c92:	a931      	add	r1, sp, #196	; 0xc4
 8001c94:	482e      	ldr	r0, [pc, #184]	; (8001d50 <HAL_UART_MspInit+0x238>)
 8001c96:	f000 fe0d 	bl	80028b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LTE_U5_RX_Pin;
 8001c9a:	2304      	movs	r3, #4
 8001c9c:	9331      	str	r3, [sp, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9e:	f8cd 80c8 	str.w	r8, [sp, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca2:	9533      	str	r5, [sp, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca4:	9734      	str	r7, [sp, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001ca6:	9635      	str	r6, [sp, #212]	; 0xd4
    HAL_GPIO_Init(LTE_U5_RX_GPIO_Port, &GPIO_InitStruct);
 8001ca8:	a931      	add	r1, sp, #196	; 0xc4
 8001caa:	482e      	ldr	r0, [pc, #184]	; (8001d64 <HAL_UART_MspInit+0x24c>)
 8001cac:	f000 fe02 	bl	80028b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LTE_U5_RTS_Pin|LTE_U5_CTS_Pin;
 8001cb0:	2330      	movs	r3, #48	; 0x30
 8001cb2:	9331      	str	r3, [sp, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb4:	f8cd 80c8 	str.w	r8, [sp, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb8:	9533      	str	r5, [sp, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cba:	9734      	str	r7, [sp, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001cbc:	9635      	str	r6, [sp, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cbe:	a931      	add	r1, sp, #196	; 0xc4
 8001cc0:	4829      	ldr	r0, [pc, #164]	; (8001d68 <HAL_UART_MspInit+0x250>)
 8001cc2:	f000 fdf7 	bl	80028b4 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Channel1;
 8001cc6:	4829      	ldr	r0, [pc, #164]	; (8001d6c <HAL_UART_MspInit+0x254>)
 8001cc8:	4b29      	ldr	r3, [pc, #164]	; (8001d70 <HAL_UART_MspInit+0x258>)
 8001cca:	6003      	str	r3, [r0, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 8001ccc:	2320      	movs	r3, #32
 8001cce:	6043      	str	r3, [r0, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cd0:	6085      	str	r5, [r0, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cd2:	60c5      	str	r5, [r0, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001cd4:	2280      	movs	r2, #128	; 0x80
 8001cd6:	6102      	str	r2, [r0, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001cd8:	6145      	str	r5, [r0, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cda:	6185      	str	r5, [r0, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8001cdc:	61c3      	str	r3, [r0, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001cde:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8001ce0:	f000 fc5e 	bl	80025a0 <HAL_DMA_Init>
 8001ce4:	bb18      	cbnz	r0, 8001d2e <HAL_UART_MspInit+0x216>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 8001ce6:	4b21      	ldr	r3, [pc, #132]	; (8001d6c <HAL_UART_MspInit+0x254>)
 8001ce8:	67e3      	str	r3, [r4, #124]	; 0x7c
 8001cea:	629c      	str	r4, [r3, #40]	; 0x28
    hdma_uart5_tx.Instance = DMA1_Channel2;
 8001cec:	4821      	ldr	r0, [pc, #132]	; (8001d74 <HAL_UART_MspInit+0x25c>)
 8001cee:	4b22      	ldr	r3, [pc, #136]	; (8001d78 <HAL_UART_MspInit+0x260>)
 8001cf0:	6003      	str	r3, [r0, #0]
    hdma_uart5_tx.Init.Request = DMA_REQUEST_UART5_TX;
 8001cf2:	2321      	movs	r3, #33	; 0x21
 8001cf4:	6043      	str	r3, [r0, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001cf6:	2310      	movs	r3, #16
 8001cf8:	6083      	str	r3, [r0, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60c3      	str	r3, [r0, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001cfe:	2280      	movs	r2, #128	; 0x80
 8001d00:	6102      	str	r2, [r0, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d02:	6143      	str	r3, [r0, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d04:	6183      	str	r3, [r0, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8001d06:	61c3      	str	r3, [r0, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d08:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8001d0a:	f000 fc49 	bl	80025a0 <HAL_DMA_Init>
 8001d0e:	b988      	cbnz	r0, 8001d34 <HAL_UART_MspInit+0x21c>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 8001d10:	4b18      	ldr	r3, [pc, #96]	; (8001d74 <HAL_UART_MspInit+0x25c>)
 8001d12:	67a3      	str	r3, [r4, #120]	; 0x78
 8001d14:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8001d16:	2200      	movs	r2, #0
 8001d18:	4611      	mov	r1, r2
 8001d1a:	2035      	movs	r0, #53	; 0x35
 8001d1c:	f000 fb86 	bl	800242c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001d20:	2035      	movs	r0, #53	; 0x35
 8001d22:	f000 fbbb 	bl	800249c <HAL_NVIC_EnableIRQ>
 8001d26:	e714      	b.n	8001b52 <HAL_UART_MspInit+0x3a>
      Error_Handler();
 8001d28:	f7ff fb48 	bl	80013bc <Error_Handler>
 8001d2c:	e77f      	b.n	8001c2e <HAL_UART_MspInit+0x116>
      Error_Handler();
 8001d2e:	f7ff fb45 	bl	80013bc <Error_Handler>
 8001d32:	e7d8      	b.n	8001ce6 <HAL_UART_MspInit+0x1ce>
      Error_Handler();
 8001d34:	f7ff fb42 	bl	80013bc <Error_Handler>
 8001d38:	e7ea      	b.n	8001d10 <HAL_UART_MspInit+0x1f8>
 8001d3a:	bf00      	nop
 8001d3c:	40004c00 	.word	0x40004c00
 8001d40:	40005000 	.word	0x40005000
 8001d44:	40004400 	.word	0x40004400
 8001d48:	40004800 	.word	0x40004800
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	48000800 	.word	0x48000800
 8001d54:	200005a4 	.word	0x200005a4
 8001d58:	4002041c 	.word	0x4002041c
 8001d5c:	20000544 	.word	0x20000544
 8001d60:	40020430 	.word	0x40020430
 8001d64:	48000c00 	.word	0x48000c00
 8001d68:	48000400 	.word	0x48000400
 8001d6c:	20000604 	.word	0x20000604
 8001d70:	40020008 	.word	0x40020008
 8001d74:	20000664 	.word	0x20000664
 8001d78:	4002001c 	.word	0x4002001c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	930c      	str	r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d80:	a80c      	add	r0, sp, #48	; 0x30
 8001d82:	f003 f985 	bl	8005090 <HAL_RCCEx_PeriphCLKConfig>
 8001d86:	2800      	cmp	r0, #0
 8001d88:	d167      	bne.n	8001e5a <HAL_UART_MspInit+0x342>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d8a:	4b6a      	ldr	r3, [pc, #424]	; (8001f34 <HAL_UART_MspInit+0x41c>)
 8001d8c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001d8e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001d92:	659a      	str	r2, [r3, #88]	; 0x58
 8001d94:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001d96:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001d9a:	9207      	str	r2, [sp, #28]
 8001d9c:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001da0:	f042 0201 	orr.w	r2, r2, #1
 8001da4:	64da      	str	r2, [r3, #76]	; 0x4c
 8001da6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001da8:	f002 0201 	and.w	r2, r2, #1
 8001dac:	9208      	str	r2, [sp, #32]
 8001dae:	9a08      	ldr	r2, [sp, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001db0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001db2:	f042 0208 	orr.w	r2, r2, #8
 8001db6:	64da      	str	r2, [r3, #76]	; 0x4c
 8001db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dba:	f003 0308 	and.w	r3, r3, #8
 8001dbe:	9309      	str	r3, [sp, #36]	; 0x24
 8001dc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001dc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001dc6:	9331      	str	r3, [sp, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc8:	2702      	movs	r7, #2
 8001dca:	9732      	str	r7, [sp, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dcc:	2500      	movs	r5, #0
 8001dce:	9533      	str	r5, [sp, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dd0:	2603      	movs	r6, #3
 8001dd2:	9634      	str	r6, [sp, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001dd4:	9635      	str	r6, [sp, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd6:	a931      	add	r1, sp, #196	; 0xc4
 8001dd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ddc:	f000 fd6a 	bl	80028b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001de0:	2320      	movs	r3, #32
 8001de2:	9331      	str	r3, [sp, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de4:	9732      	str	r7, [sp, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de6:	9533      	str	r5, [sp, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001de8:	9634      	str	r6, [sp, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001dea:	2307      	movs	r3, #7
 8001dec:	9335      	str	r3, [sp, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001dee:	a931      	add	r1, sp, #196	; 0xc4
 8001df0:	4851      	ldr	r0, [pc, #324]	; (8001f38 <HAL_UART_MspInit+0x420>)
 8001df2:	f000 fd5f 	bl	80028b4 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8001df6:	4851      	ldr	r0, [pc, #324]	; (8001f3c <HAL_UART_MspInit+0x424>)
 8001df8:	4b51      	ldr	r3, [pc, #324]	; (8001f40 <HAL_UART_MspInit+0x428>)
 8001dfa:	6003      	str	r3, [r0, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8001dfc:	231b      	movs	r3, #27
 8001dfe:	6043      	str	r3, [r0, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e00:	2310      	movs	r3, #16
 8001e02:	6083      	str	r3, [r0, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e04:	60c5      	str	r5, [r0, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e06:	2380      	movs	r3, #128	; 0x80
 8001e08:	6103      	str	r3, [r0, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e0a:	6145      	str	r5, [r0, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e0c:	6185      	str	r5, [r0, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001e0e:	61c5      	str	r5, [r0, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e10:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001e12:	f000 fbc5 	bl	80025a0 <HAL_DMA_Init>
 8001e16:	bb18      	cbnz	r0, 8001e60 <HAL_UART_MspInit+0x348>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001e18:	4b48      	ldr	r3, [pc, #288]	; (8001f3c <HAL_UART_MspInit+0x424>)
 8001e1a:	67a3      	str	r3, [r4, #120]	; 0x78
 8001e1c:	629c      	str	r4, [r3, #40]	; 0x28
    hdma_usart2_rx.Instance = DMA2_Channel1;
 8001e1e:	4849      	ldr	r0, [pc, #292]	; (8001f44 <HAL_UART_MspInit+0x42c>)
 8001e20:	4b49      	ldr	r3, [pc, #292]	; (8001f48 <HAL_UART_MspInit+0x430>)
 8001e22:	6003      	str	r3, [r0, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001e24:	231a      	movs	r3, #26
 8001e26:	6043      	str	r3, [r0, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	6083      	str	r3, [r0, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e2c:	60c3      	str	r3, [r0, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e2e:	2280      	movs	r2, #128	; 0x80
 8001e30:	6102      	str	r2, [r0, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e32:	6143      	str	r3, [r0, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e34:	6183      	str	r3, [r0, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001e36:	2220      	movs	r2, #32
 8001e38:	61c2      	str	r2, [r0, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e3a:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001e3c:	f000 fbb0 	bl	80025a0 <HAL_DMA_Init>
 8001e40:	b988      	cbnz	r0, 8001e66 <HAL_UART_MspInit+0x34e>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001e42:	4b40      	ldr	r3, [pc, #256]	; (8001f44 <HAL_UART_MspInit+0x42c>)
 8001e44:	67e3      	str	r3, [r4, #124]	; 0x7c
 8001e46:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001e48:	2200      	movs	r2, #0
 8001e4a:	4611      	mov	r1, r2
 8001e4c:	2026      	movs	r0, #38	; 0x26
 8001e4e:	f000 faed 	bl	800242c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e52:	2026      	movs	r0, #38	; 0x26
 8001e54:	f000 fb22 	bl	800249c <HAL_NVIC_EnableIRQ>
 8001e58:	e67b      	b.n	8001b52 <HAL_UART_MspInit+0x3a>
      Error_Handler();
 8001e5a:	f7ff faaf 	bl	80013bc <Error_Handler>
 8001e5e:	e794      	b.n	8001d8a <HAL_UART_MspInit+0x272>
      Error_Handler();
 8001e60:	f7ff faac 	bl	80013bc <Error_Handler>
 8001e64:	e7d8      	b.n	8001e18 <HAL_UART_MspInit+0x300>
      Error_Handler();
 8001e66:	f7ff faa9 	bl	80013bc <Error_Handler>
 8001e6a:	e7ea      	b.n	8001e42 <HAL_UART_MspInit+0x32a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001e6c:	2304      	movs	r3, #4
 8001e6e:	930c      	str	r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e70:	a80c      	add	r0, sp, #48	; 0x30
 8001e72:	f003 f90d 	bl	8005090 <HAL_RCCEx_PeriphCLKConfig>
 8001e76:	2800      	cmp	r0, #0
 8001e78:	d152      	bne.n	8001f20 <HAL_UART_MspInit+0x408>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e7a:	4b2e      	ldr	r3, [pc, #184]	; (8001f34 <HAL_UART_MspInit+0x41c>)
 8001e7c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001e7e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001e82:	659a      	str	r2, [r3, #88]	; 0x58
 8001e84:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001e86:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8001e8a:	920a      	str	r2, [sp, #40]	; 0x28
 8001e8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e90:	f042 0204 	orr.w	r2, r2, #4
 8001e94:	64da      	str	r2, [r3, #76]	; 0x4c
 8001e96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e98:	f003 0304 	and.w	r3, r3, #4
 8001e9c:	930b      	str	r3, [sp, #44]	; 0x2c
 8001e9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Pin = NXP_TX_Pin|NXP_RX_Pin;
 8001ea0:	2330      	movs	r3, #48	; 0x30
 8001ea2:	9331      	str	r3, [sp, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	9332      	str	r3, [sp, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea8:	2500      	movs	r5, #0
 8001eaa:	9533      	str	r5, [sp, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eac:	2303      	movs	r3, #3
 8001eae:	9334      	str	r3, [sp, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001eb0:	2307      	movs	r3, #7
 8001eb2:	9335      	str	r3, [sp, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eb4:	a931      	add	r1, sp, #196	; 0xc4
 8001eb6:	4825      	ldr	r0, [pc, #148]	; (8001f4c <HAL_UART_MspInit+0x434>)
 8001eb8:	f000 fcfc 	bl	80028b4 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8001ebc:	4824      	ldr	r0, [pc, #144]	; (8001f50 <HAL_UART_MspInit+0x438>)
 8001ebe:	4b25      	ldr	r3, [pc, #148]	; (8001f54 <HAL_UART_MspInit+0x43c>)
 8001ec0:	6003      	str	r3, [r0, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8001ec2:	231c      	movs	r3, #28
 8001ec4:	6043      	str	r3, [r0, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ec6:	6085      	str	r5, [r0, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ec8:	60c5      	str	r5, [r0, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001eca:	2380      	movs	r3, #128	; 0x80
 8001ecc:	6103      	str	r3, [r0, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ece:	6145      	str	r5, [r0, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ed0:	6185      	str	r5, [r0, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001ed2:	2320      	movs	r3, #32
 8001ed4:	61c3      	str	r3, [r0, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ed6:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001ed8:	f000 fb62 	bl	80025a0 <HAL_DMA_Init>
 8001edc:	bb18      	cbnz	r0, 8001f26 <HAL_UART_MspInit+0x40e>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8001ede:	4b1c      	ldr	r3, [pc, #112]	; (8001f50 <HAL_UART_MspInit+0x438>)
 8001ee0:	67e3      	str	r3, [r4, #124]	; 0x7c
 8001ee2:	629c      	str	r4, [r3, #40]	; 0x28
    hdma_usart3_tx.Instance = DMA1_Channel4;
 8001ee4:	481c      	ldr	r0, [pc, #112]	; (8001f58 <HAL_UART_MspInit+0x440>)
 8001ee6:	4b1d      	ldr	r3, [pc, #116]	; (8001f5c <HAL_UART_MspInit+0x444>)
 8001ee8:	6003      	str	r3, [r0, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8001eea:	231d      	movs	r3, #29
 8001eec:	6043      	str	r3, [r0, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001eee:	2310      	movs	r3, #16
 8001ef0:	6083      	str	r3, [r0, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	60c3      	str	r3, [r0, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ef6:	2280      	movs	r2, #128	; 0x80
 8001ef8:	6102      	str	r2, [r0, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001efa:	6143      	str	r3, [r0, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001efc:	6183      	str	r3, [r0, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001efe:	61c3      	str	r3, [r0, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001f00:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001f02:	f000 fb4d 	bl	80025a0 <HAL_DMA_Init>
 8001f06:	b988      	cbnz	r0, 8001f2c <HAL_UART_MspInit+0x414>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8001f08:	4b13      	ldr	r3, [pc, #76]	; (8001f58 <HAL_UART_MspInit+0x440>)
 8001f0a:	67a3      	str	r3, [r4, #120]	; 0x78
 8001f0c:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001f0e:	2200      	movs	r2, #0
 8001f10:	4611      	mov	r1, r2
 8001f12:	2027      	movs	r0, #39	; 0x27
 8001f14:	f000 fa8a 	bl	800242c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001f18:	2027      	movs	r0, #39	; 0x27
 8001f1a:	f000 fabf 	bl	800249c <HAL_NVIC_EnableIRQ>
}
 8001f1e:	e618      	b.n	8001b52 <HAL_UART_MspInit+0x3a>
      Error_Handler();
 8001f20:	f7ff fa4c 	bl	80013bc <Error_Handler>
 8001f24:	e7a9      	b.n	8001e7a <HAL_UART_MspInit+0x362>
      Error_Handler();
 8001f26:	f7ff fa49 	bl	80013bc <Error_Handler>
 8001f2a:	e7d8      	b.n	8001ede <HAL_UART_MspInit+0x3c6>
      Error_Handler();
 8001f2c:	f7ff fa46 	bl	80013bc <Error_Handler>
 8001f30:	e7ea      	b.n	8001f08 <HAL_UART_MspInit+0x3f0>
 8001f32:	bf00      	nop
 8001f34:	40021000 	.word	0x40021000
 8001f38:	48000c00 	.word	0x48000c00
 8001f3c:	20000724 	.word	0x20000724
 8001f40:	40020080 	.word	0x40020080
 8001f44:	200006c4 	.word	0x200006c4
 8001f48:	40020408 	.word	0x40020408
 8001f4c:	48000800 	.word	0x48000800
 8001f50:	20000784 	.word	0x20000784
 8001f54:	40020030 	.word	0x40020030
 8001f58:	200007e4 	.word	0x200007e4
 8001f5c:	40020044 	.word	0x40020044

08001f60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001f60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f98 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f64:	f7ff fcfc 	bl	8001960 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f68:	480c      	ldr	r0, [pc, #48]	; (8001f9c <LoopForever+0x6>)
  ldr r1, =_edata
 8001f6a:	490d      	ldr	r1, [pc, #52]	; (8001fa0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f6c:	4a0d      	ldr	r2, [pc, #52]	; (8001fa4 <LoopForever+0xe>)
  movs r3, #0
 8001f6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f70:	e002      	b.n	8001f78 <LoopCopyDataInit>

08001f72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f76:	3304      	adds	r3, #4

08001f78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f7c:	d3f9      	bcc.n	8001f72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f7e:	4a0a      	ldr	r2, [pc, #40]	; (8001fa8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f80:	4c0a      	ldr	r4, [pc, #40]	; (8001fac <LoopForever+0x16>)
  movs r3, #0
 8001f82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f84:	e001      	b.n	8001f8a <LoopFillZerobss>

08001f86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f88:	3204      	adds	r2, #4

08001f8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f8c:	d3fb      	bcc.n	8001f86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f8e:	f007 f971 	bl	8009274 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f92:	f7ff fa4e 	bl	8001432 <main>

08001f96 <LoopForever>:

LoopForever:
    b LoopForever
 8001f96:	e7fe      	b.n	8001f96 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001f98:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001f9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fa0:	200002f8 	.word	0x200002f8
  ldr r2, =_sidata
 8001fa4:	0800ea44 	.word	0x0800ea44
  ldr r2, =_sbss
 8001fa8:	200002f8 	.word	0x200002f8
  ldr r4, =_ebss
 8001fac:	200014b8 	.word	0x200014b8

08001fb0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001fb0:	e7fe      	b.n	8001fb0 <ADC1_IRQHandler>

08001fb2 <OSPI_WriteEnable>:
}



void OSPI_WriteEnable(OSPI_HandleTypeDef *hospi)
{
 8001fb2:	b510      	push	{r4, lr}
 8001fb4:	b096      	sub	sp, #88	; 0x58
 8001fb6:	4604      	mov	r4, r0

  uint8_t reg[2];

  /* Enable write operations ------------------------------------------ */

 sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	9302      	str	r3, [sp, #8]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8001fbc:	9303      	str	r3, [sp, #12]
  sCommand.Instruction        = WRITE_ENABLE_CMD;
 8001fbe:	2206      	movs	r2, #6
 8001fc0:	9204      	str	r2, [sp, #16]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	9205      	str	r2, [sp, #20]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8001fc6:	9306      	str	r3, [sp, #24]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8001fc8:	9307      	str	r3, [sp, #28]
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8001fca:	9309      	str	r3, [sp, #36]	; 0x24
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8001fcc:	930d      	str	r3, [sp, #52]	; 0x34
  sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 8001fce:	9310      	str	r3, [sp, #64]	; 0x40
  sCommand.DummyCycles        = 0;
 8001fd0:	9313      	str	r3, [sp, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8001fd2:	9314      	str	r3, [sp, #80]	; 0x50
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8001fd4:	9315      	str	r3, [sp, #84]	; 0x54


  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001fd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fda:	a902      	add	r1, sp, #8
 8001fdc:	f001 fd00 	bl	80039e0 <HAL_OSPI_Command>
 8001fe0:	b988      	cbnz	r0, 8002006 <OSPI_WriteEnable+0x54>
  }



  /* Configure automatic polling mode to wait for write enabling ---- */
  sCommand.Instruction    = GET_FEATURES;
 8001fe2:	230f      	movs	r3, #15
 8001fe4:	9304      	str	r3, [sp, #16]
  sCommand.Address        = 0xC0;
 8001fe6:	23c0      	movs	r3, #192	; 0xc0
 8001fe8:	9308      	str	r3, [sp, #32]
  sCommand.AddressMode    = HAL_OSPI_ADDRESS_1_LINE;
 8001fea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fee:	9309      	str	r3, [sp, #36]	; 0x24
  sCommand.AddressSize    = HAL_OSPI_ADDRESS_8_BITS;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	930a      	str	r3, [sp, #40]	; 0x28
  sCommand.AddressDtrMode = HAL_OSPI_ADDRESS_DTR_DISABLE;
 8001ff4:	930b      	str	r3, [sp, #44]	; 0x2c
  sCommand.DataMode       = HAL_OSPI_DATA_1_LINE;
 8001ff6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ffa:	9210      	str	r2, [sp, #64]	; 0x40
  sCommand.DataDtrMode    = HAL_OSPI_DATA_DTR_DISABLE;
 8001ffc:	9312      	str	r3, [sp, #72]	; 0x48
  sCommand.NbData         = 1;
 8001ffe:	2201      	movs	r2, #1
 8002000:	9211      	str	r2, [sp, #68]	; 0x44
  sCommand.DummyCycles    = 0;//DUMMY_CLOCK_CYCLES_READ_REG;
 8002002:	9313      	str	r3, [sp, #76]	; 0x4c
 8002004:	e00a      	b.n	800201c <OSPI_WriteEnable+0x6a>
    Error_Handler();
 8002006:	f7ff f9d9 	bl	80013bc <Error_Handler>
 800200a:	e7ea      	b.n	8001fe2 <OSPI_WriteEnable+0x30>
  do//NOt sure if to wait here or not
  {

    if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
    {
      Error_Handler();
 800200c:	f7ff f9d6 	bl	80013bc <Error_Handler>
 8002010:	e00c      	b.n	800202c <OSPI_WriteEnable+0x7a>

    if (HAL_OSPI_Receive(hospi, reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
    {
      Error_Handler();
    }
  } while((reg[0] & WRITE_ENABLE_MASK_VALUE) != WRITE_ENABLE_MATCH_VALUE);//when matches x02, we know write enable is ready
 8002012:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002016:	f013 0f02 	tst.w	r3, #2
 800201a:	d112      	bne.n	8002042 <OSPI_WriteEnable+0x90>
    if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800201c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002020:	a902      	add	r1, sp, #8
 8002022:	4620      	mov	r0, r4
 8002024:	f001 fcdc 	bl	80039e0 <HAL_OSPI_Command>
 8002028:	2800      	cmp	r0, #0
 800202a:	d1ef      	bne.n	800200c <OSPI_WriteEnable+0x5a>
    if (HAL_OSPI_Receive(hospi, reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800202c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002030:	a901      	add	r1, sp, #4
 8002032:	4620      	mov	r0, r4
 8002034:	f001 fd7d 	bl	8003b32 <HAL_OSPI_Receive>
 8002038:	2800      	cmp	r0, #0
 800203a:	d0ea      	beq.n	8002012 <OSPI_WriteEnable+0x60>
      Error_Handler();
 800203c:	f7ff f9be 	bl	80013bc <Error_Handler>
 8002040:	e7e7      	b.n	8002012 <OSPI_WriteEnable+0x60>


}
 8002042:	b016      	add	sp, #88	; 0x58
 8002044:	bd10      	pop	{r4, pc}
	...

08002048 <OSPI_Erase_Block>:

}


void OSPI_Erase_Block(OSPI_HandleTypeDef *hospi)//address needed
{
 8002048:	b500      	push	{lr}
 800204a:	b095      	sub	sp, #84	; 0x54
	  OSPI_RegularCmdTypeDef  sCommand;

	  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800204c:	2300      	movs	r3, #0
 800204e:	9300      	str	r3, [sp, #0]
	  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8002050:	9301      	str	r3, [sp, #4]
	  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8002052:	2201      	movs	r2, #1
 8002054:	9203      	str	r2, [sp, #12]
	  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8002056:	9304      	str	r3, [sp, #16]
	  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8002058:	9305      	str	r3, [sp, #20]
	  sCommand.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 800205a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800205e:	9208      	str	r2, [sp, #32]
	  //sCommand.AddressSize        = HAL_OSPI_ADDRESS_24_BITS;
	  sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 8002060:	9309      	str	r3, [sp, #36]	; 0x24
	  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8002062:	930b      	str	r3, [sp, #44]	; 0x2c
	  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 8002064:	9310      	str	r3, [sp, #64]	; 0x40
	  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8002066:	9312      	str	r3, [sp, #72]	; 0x48
	  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8002068:	9313      	str	r3, [sp, #76]	; 0x4c

	  sCommand.Instruction =  0xD8;
 800206a:	22d8      	movs	r2, #216	; 0xd8
 800206c:	9202      	str	r2, [sp, #8]
	  sCommand.AddressMode = HAL_OSPI_ADDRESS_1_LINE;
 800206e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002072:	9207      	str	r2, [sp, #28]
	  sCommand.Address     = ADDR;//address;
 8002074:	4a07      	ldr	r2, [pc, #28]	; (8002094 <OSPI_Erase_Block+0x4c>)
 8002076:	9206      	str	r2, [sp, #24]
	  sCommand.DataMode    = HAL_OSPI_DATA_NONE;
 8002078:	930e      	str	r3, [sp, #56]	; 0x38
	  sCommand.DummyCycles = 0;
 800207a:	9311      	str	r3, [sp, #68]	; 0x44


	  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800207c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002080:	4669      	mov	r1, sp
 8002082:	f001 fcad 	bl	80039e0 <HAL_OSPI_Command>
 8002086:	b910      	cbnz	r0, 800208e <OSPI_Erase_Block+0x46>
        Error_Handler();

      }


}
 8002088:	b015      	add	sp, #84	; 0x54
 800208a:	f85d fb04 	ldr.w	pc, [sp], #4
        Error_Handler();
 800208e:	f7ff f995 	bl	80013bc <Error_Handler>
}
 8002092:	e7f9      	b.n	8002088 <OSPI_Erase_Block+0x40>
 8002094:	07fe0000 	.word	0x07fe0000

08002098 <OSPI_Get_Features>:

void OSPI_Get_Features(OSPI_HandleTypeDef *hospi)
{
 8002098:	b510      	push	{r4, lr}
 800209a:	b096      	sub	sp, #88	; 0x58
 800209c:	4604      	mov	r4, r0
	  OSPI_RegularCmdTypeDef  sCommand;
	  uint8_t reg[2];//2 bytes

	   sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800209e:	2300      	movs	r3, #0
 80020a0:	9302      	str	r3, [sp, #8]
	   sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 80020a2:	9303      	str	r3, [sp, #12]
	   sCommand.Instruction        = GET_FEATURES;
 80020a4:	220f      	movs	r2, #15
 80020a6:	9204      	str	r2, [sp, #16]
	   sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 80020a8:	2201      	movs	r2, #1
 80020aa:	9205      	str	r2, [sp, #20]
	   sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 80020ac:	9306      	str	r3, [sp, #24]
	   sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80020ae:	9307      	str	r3, [sp, #28]
	   sCommand.Address            = 0xC0;
 80020b0:	21c0      	movs	r1, #192	; 0xc0
 80020b2:	9108      	str	r1, [sp, #32]
	   sCommand.AddressMode        = HAL_OSPI_ADDRESS_1_LINE;
 80020b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020b8:	9109      	str	r1, [sp, #36]	; 0x24
	   sCommand.AddressSize        = HAL_OSPI_ADDRESS_8_BITS;
 80020ba:	930a      	str	r3, [sp, #40]	; 0x28
	   sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 80020bc:	930b      	str	r3, [sp, #44]	; 0x2c
	   sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80020be:	930d      	str	r3, [sp, #52]	; 0x34
	   sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 80020c0:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 80020c4:	9110      	str	r1, [sp, #64]	; 0x40
	   sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 80020c6:	9312      	str	r3, [sp, #72]	; 0x48
	   sCommand.NbData             = 1; //1 byte
 80020c8:	9211      	str	r2, [sp, #68]	; 0x44
	   sCommand.DummyCycles        = 0;//DUMMY_CLOCK_CYCLES_READ_REG;
 80020ca:	9313      	str	r3, [sp, #76]	; 0x4c
	   sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80020cc:	9314      	str	r3, [sp, #80]	; 0x50
	   sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80020ce:	9315      	str	r3, [sp, #84]	; 0x54
 80020d0:	e007      	b.n	80020e2 <OSPI_Get_Features+0x4a>
	 //  CS_LOW();
      do//Thimk that the autopolling can be use dthe same as this
       {
          if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
          {
            Error_Handler();
 80020d2:	f7ff f973 	bl	80013bc <Error_Handler>
 80020d6:	e00c      	b.n	80020f2 <OSPI_Get_Features+0x5a>

          if (HAL_OSPI_Receive(hospi, reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
          {
            Error_Handler();
          }
        } while((reg[0] & MEMORY_READY_MASK_VALUE) != MEMORY_READY_MATCH_VALUE);//while not x00
 80020d8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80020dc:	f013 0f01 	tst.w	r3, #1
 80020e0:	d012      	beq.n	8002108 <OSPI_Get_Features+0x70>
          if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80020e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020e6:	a902      	add	r1, sp, #8
 80020e8:	4620      	mov	r0, r4
 80020ea:	f001 fc79 	bl	80039e0 <HAL_OSPI_Command>
 80020ee:	2800      	cmp	r0, #0
 80020f0:	d1ef      	bne.n	80020d2 <OSPI_Get_Features+0x3a>
          if (HAL_OSPI_Receive(hospi, reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80020f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020f6:	a901      	add	r1, sp, #4
 80020f8:	4620      	mov	r0, r4
 80020fa:	f001 fd1a 	bl	8003b32 <HAL_OSPI_Receive>
 80020fe:	2800      	cmp	r0, #0
 8002100:	d0ea      	beq.n	80020d8 <OSPI_Get_Features+0x40>
            Error_Handler();
 8002102:	f7ff f95b 	bl	80013bc <Error_Handler>
 8002106:	e7e7      	b.n	80020d8 <OSPI_Get_Features+0x40>
      //CS_HIGH();

}
 8002108:	b016      	add	sp, #88	; 0x58
 800210a:	bd10      	pop	{r4, pc}

0800210c <OSPI_Set_Features>:

void OSPI_Set_Features(OSPI_HandleTypeDef *hospi)
{
 800210c:	b510      	push	{r4, lr}
 800210e:	b096      	sub	sp, #88	; 0x58
 8002110:	4604      	mov	r4, r0
	  OSPI_RegularCmdTypeDef  sCommand;
	  uint8_t reg = 0x00;//2 bytes
 8002112:	2300      	movs	r3, #0
 8002114:	f88d 3007 	strb.w	r3, [sp, #7]

	   sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8002118:	9302      	str	r3, [sp, #8]
	   sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 800211a:	9303      	str	r3, [sp, #12]
	   sCommand.Instruction        = 0x1F;
 800211c:	221f      	movs	r2, #31
 800211e:	9204      	str	r2, [sp, #16]
	   sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8002120:	2201      	movs	r2, #1
 8002122:	9205      	str	r2, [sp, #20]
	   sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8002124:	9306      	str	r3, [sp, #24]
	   sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8002126:	9307      	str	r3, [sp, #28]
	   sCommand.Address            = 0xA0;
 8002128:	21a0      	movs	r1, #160	; 0xa0
 800212a:	9108      	str	r1, [sp, #32]
	   sCommand.AddressMode        = HAL_OSPI_ADDRESS_1_LINE;
 800212c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002130:	9109      	str	r1, [sp, #36]	; 0x24
	   sCommand.AddressSize        = HAL_OSPI_ADDRESS_8_BITS;
 8002132:	930a      	str	r3, [sp, #40]	; 0x28
	   sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 8002134:	930b      	str	r3, [sp, #44]	; 0x2c
	   sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8002136:	930d      	str	r3, [sp, #52]	; 0x34
	   sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 8002138:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800213c:	9110      	str	r1, [sp, #64]	; 0x40
	   sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 800213e:	9312      	str	r3, [sp, #72]	; 0x48
	   sCommand.NbData             = 1; //1 byte
 8002140:	9211      	str	r2, [sp, #68]	; 0x44
	   sCommand.DummyCycles        = 0;//DUMMY_CLOCK_CYCLES_READ_REG;
 8002142:	9313      	str	r3, [sp, #76]	; 0x4c
	   sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8002144:	9314      	str	r3, [sp, #80]	; 0x50
	   sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8002146:	9315      	str	r3, [sp, #84]	; 0x54

	   if(HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002148:	f241 3288 	movw	r2, #5000	; 0x1388
 800214c:	a902      	add	r1, sp, #8
 800214e:	f001 fc47 	bl	80039e0 <HAL_OSPI_Command>
 8002152:	b948      	cbnz	r0, 8002168 <OSPI_Set_Features+0x5c>
	   {
	   	      Error_Handler();
	   	}


	   if(HAL_OSPI_Transmit(hospi, &reg ,HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002154:	f241 3288 	movw	r2, #5000	; 0x1388
 8002158:	f10d 0107 	add.w	r1, sp, #7
 800215c:	4620      	mov	r0, r4
 800215e:	f001 fc9b 	bl	8003a98 <HAL_OSPI_Transmit>
 8002162:	b920      	cbnz	r0, 800216e <OSPI_Set_Features+0x62>
	   	 {
	   	      Error_Handler();
	   	 }

}
 8002164:	b016      	add	sp, #88	; 0x58
 8002166:	bd10      	pop	{r4, pc}
	   	      Error_Handler();
 8002168:	f7ff f928 	bl	80013bc <Error_Handler>
 800216c:	e7f2      	b.n	8002154 <OSPI_Set_Features+0x48>
	   	      Error_Handler();
 800216e:	f7ff f925 	bl	80013bc <Error_Handler>
}
 8002172:	e7f7      	b.n	8002164 <OSPI_Set_Features+0x58>

08002174 <OSPI_Program_Load>:

void OSPI_Program_Load(OSPI_HandleTypeDef *hospi)//address needed
{
 8002174:	b510      	push	{r4, lr}
 8002176:	b094      	sub	sp, #80	; 0x50
 8002178:	4604      	mov	r4, r0
	 OSPI_RegularCmdTypeDef  sCommand;

	 sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800217a:	2300      	movs	r3, #0
 800217c:	9300      	str	r3, [sp, #0]
	 sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 800217e:	9301      	str	r3, [sp, #4]
	 sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8002180:	2201      	movs	r2, #1
 8002182:	9203      	str	r2, [sp, #12]
	 sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8002184:	9304      	str	r3, [sp, #16]
	 sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8002186:	9305      	str	r3, [sp, #20]
	 sCommand.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8002188:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800218c:	9208      	str	r2, [sp, #32]
	// sCommand.AddressSize        = HAL_OSPI_ADDRESS_24_BITS;
	 sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 800218e:	9309      	str	r3, [sp, #36]	; 0x24
	 sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8002190:	930b      	str	r3, [sp, #44]	; 0x2c
	 sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 8002192:	9310      	str	r3, [sp, #64]	; 0x40
	 sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8002194:	9312      	str	r3, [sp, #72]	; 0x48
	 sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8002196:	9313      	str	r3, [sp, #76]	; 0x4c

	 sCommand.Instruction = 0x02;//PROGRAM_LOAD_X4;
 8002198:	2202      	movs	r2, #2
 800219a:	9202      	str	r2, [sp, #8]
	 sCommand.AddressMode = HAL_OSPI_ADDRESS_1_LINE;
 800219c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021a0:	9207      	str	r2, [sp, #28]
	 sCommand.Address     = ADDR;//0x00;
 80021a2:	4a0e      	ldr	r2, [pc, #56]	; (80021dc <OSPI_Program_Load+0x68>)
 80021a4:	9206      	str	r2, [sp, #24]
	 sCommand.DataMode    = HAL_OSPI_DATA_1_LINE;//HAL_OSPI_DATA_4_LINES;
 80021a6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80021aa:	920e      	str	r2, [sp, #56]	; 0x38
	 sCommand.NbData      = BUFFERSIZE;
 80021ac:	22f4      	movs	r2, #244	; 0xf4
 80021ae:	920f      	str	r2, [sp, #60]	; 0x3c
	 sCommand.DummyCycles = 0;
 80021b0:	9311      	str	r3, [sp, #68]	; 0x44

	 if(HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80021b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021b6:	4669      	mov	r1, sp
 80021b8:	f001 fc12 	bl	80039e0 <HAL_OSPI_Command>
 80021bc:	b940      	cbnz	r0, 80021d0 <OSPI_Program_Load+0x5c>
	 {
	      Error_Handler();
	 }

	 if(HAL_OSPI_Transmit(hospi, aTxBuffer,HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80021be:	f241 3288 	movw	r2, #5000	; 0x1388
 80021c2:	4907      	ldr	r1, [pc, #28]	; (80021e0 <OSPI_Program_Load+0x6c>)
 80021c4:	4620      	mov	r0, r4
 80021c6:	f001 fc67 	bl	8003a98 <HAL_OSPI_Transmit>
 80021ca:	b920      	cbnz	r0, 80021d6 <OSPI_Program_Load+0x62>
	 {
	      Error_Handler();
	 }
}
 80021cc:	b014      	add	sp, #80	; 0x50
 80021ce:	bd10      	pop	{r4, pc}
	      Error_Handler();
 80021d0:	f7ff f8f4 	bl	80013bc <Error_Handler>
 80021d4:	e7f3      	b.n	80021be <OSPI_Program_Load+0x4a>
	      Error_Handler();
 80021d6:	f7ff f8f1 	bl	80013bc <Error_Handler>
}
 80021da:	e7f7      	b.n	80021cc <OSPI_Program_Load+0x58>
 80021dc:	07fe0000 	.word	0x07fe0000
 80021e0:	20000004 	.word	0x20000004

080021e4 <OSPI_Program_Execute>:

void OSPI_Program_Execute(OSPI_HandleTypeDef *hospi)//address needed
{
 80021e4:	b500      	push	{lr}
 80021e6:	b095      	sub	sp, #84	; 0x54
	 	 OSPI_RegularCmdTypeDef  sCommand;

		 sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80021e8:	2300      	movs	r3, #0
 80021ea:	9300      	str	r3, [sp, #0]
		 sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 80021ec:	9301      	str	r3, [sp, #4]
		 sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 80021ee:	2201      	movs	r2, #1
 80021f0:	9203      	str	r2, [sp, #12]
		 sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 80021f2:	9304      	str	r3, [sp, #16]
		 sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80021f4:	9305      	str	r3, [sp, #20]
		 sCommand.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 80021f6:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80021fa:	9108      	str	r1, [sp, #32]
		// sCommand.AddressSize        = HAL_OSPI_ADDRESS_24_BITS;
		 sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 80021fc:	9309      	str	r3, [sp, #36]	; 0x24
		 sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80021fe:	930b      	str	r3, [sp, #44]	; 0x2c
		 sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 8002200:	9310      	str	r3, [sp, #64]	; 0x40
		 sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8002202:	9312      	str	r3, [sp, #72]	; 0x48
		 sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8002204:	9313      	str	r3, [sp, #76]	; 0x4c

		 sCommand.Instruction = PROGRAM_EXECUTE;
 8002206:	2110      	movs	r1, #16
 8002208:	9102      	str	r1, [sp, #8]
		 sCommand.AddressMode = HAL_OSPI_ADDRESS_1_LINE;
 800220a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800220e:	9107      	str	r1, [sp, #28]
		 sCommand.Address     = ADDR;//0x00;
 8002210:	4908      	ldr	r1, [pc, #32]	; (8002234 <OSPI_Program_Execute+0x50>)
 8002212:	9106      	str	r1, [sp, #24]
		 sCommand.DataMode    = HAL_OSPI_DATA_NONE;
 8002214:	930e      	str	r3, [sp, #56]	; 0x38
		 sCommand.NbData      = 1;
 8002216:	920f      	str	r2, [sp, #60]	; 0x3c
		 sCommand.DummyCycles = 0;
 8002218:	9311      	str	r3, [sp, #68]	; 0x44

		  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800221a:	f241 3288 	movw	r2, #5000	; 0x1388
 800221e:	4669      	mov	r1, sp
 8002220:	f001 fbde 	bl	80039e0 <HAL_OSPI_Command>
 8002224:	b910      	cbnz	r0, 800222c <OSPI_Program_Execute+0x48>
		  {
		      Error_Handler();

		  }
}
 8002226:	b015      	add	sp, #84	; 0x54
 8002228:	f85d fb04 	ldr.w	pc, [sp], #4
		      Error_Handler();
 800222c:	f7ff f8c6 	bl	80013bc <Error_Handler>
}
 8002230:	e7f9      	b.n	8002226 <OSPI_Program_Execute+0x42>
 8002232:	bf00      	nop
 8002234:	07fe0000 	.word	0x07fe0000

08002238 <OSPI_Page_Read>:

void OSPI_Page_Read(OSPI_HandleTypeDef *hospi)//address needed
{
 8002238:	b500      	push	{lr}
 800223a:	b095      	sub	sp, #84	; 0x54
	 OSPI_RegularCmdTypeDef  sCommand;

	 	sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800223c:	2300      	movs	r3, #0
 800223e:	9300      	str	r3, [sp, #0]
	 	sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8002240:	9301      	str	r3, [sp, #4]
	 	sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8002242:	2201      	movs	r2, #1
 8002244:	9203      	str	r2, [sp, #12]
	 	sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8002246:	9304      	str	r3, [sp, #16]
	 	sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8002248:	9305      	str	r3, [sp, #20]
	 	sCommand.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 800224a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800224e:	9208      	str	r2, [sp, #32]
		//sCommand.AddressSize        = HAL_OSPI_ADDRESS_24_BITS;
		sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 8002250:	9309      	str	r3, [sp, #36]	; 0x24
		sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8002252:	930b      	str	r3, [sp, #44]	; 0x2c
		sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 8002254:	9310      	str	r3, [sp, #64]	; 0x40
		sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8002256:	9312      	str	r3, [sp, #72]	; 0x48
		sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8002258:	9313      	str	r3, [sp, #76]	; 0x4c

		sCommand.Instruction = PAGE_READ;
 800225a:	2213      	movs	r2, #19
 800225c:	9202      	str	r2, [sp, #8]
		sCommand.AddressMode = HAL_OSPI_ADDRESS_1_LINE;
 800225e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002262:	9207      	str	r2, [sp, #28]
		sCommand.Address     = ADDR;//0x00;
 8002264:	4a08      	ldr	r2, [pc, #32]	; (8002288 <OSPI_Page_Read+0x50>)
 8002266:	9206      	str	r2, [sp, #24]
		sCommand.DataMode    = HAL_OSPI_DATA_NONE;
 8002268:	930e      	str	r3, [sp, #56]	; 0x38
		sCommand.NbData      = 0;
 800226a:	930f      	str	r3, [sp, #60]	; 0x3c
		sCommand.DummyCycles = 0;
 800226c:	9311      	str	r3, [sp, #68]	; 0x44

		 if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800226e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002272:	4669      	mov	r1, sp
 8002274:	f001 fbb4 	bl	80039e0 <HAL_OSPI_Command>
 8002278:	b910      	cbnz	r0, 8002280 <OSPI_Page_Read+0x48>
		{
			 Error_Handler();

		 }
}
 800227a:	b015      	add	sp, #84	; 0x54
 800227c:	f85d fb04 	ldr.w	pc, [sp], #4
			 Error_Handler();
 8002280:	f7ff f89c 	bl	80013bc <Error_Handler>
}
 8002284:	e7f9      	b.n	800227a <OSPI_Page_Read+0x42>
 8002286:	bf00      	nop
 8002288:	07fe0000 	.word	0x07fe0000

0800228c <OSPI_Read_Cache_X4>:

void OSPI_Read_Cache_X4(OSPI_HandleTypeDef *hospi)//address needed
{
 800228c:	b510      	push	{r4, lr}
 800228e:	b094      	sub	sp, #80	; 0x50
 8002290:	4604      	mov	r4, r0
	 OSPI_RegularCmdTypeDef  sCommand;

	  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8002292:	2300      	movs	r3, #0
 8002294:	9300      	str	r3, [sp, #0]
	  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8002296:	9301      	str	r3, [sp, #4]
	  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8002298:	2201      	movs	r2, #1
 800229a:	9203      	str	r2, [sp, #12]
	  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 800229c:	9304      	str	r3, [sp, #16]
	  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800229e:	9305      	str	r3, [sp, #20]
	  sCommand.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 80022a0:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80022a4:	9208      	str	r2, [sp, #32]
	 // sCommand.AddressSize        = HAL_OSPI_ADDRESS_24_BITS;
	  sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 80022a6:	9309      	str	r3, [sp, #36]	; 0x24
	  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80022a8:	930b      	str	r3, [sp, #44]	; 0x2c
	  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 80022aa:	9310      	str	r3, [sp, #64]	; 0x40
	  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80022ac:	9312      	str	r3, [sp, #72]	; 0x48
	  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80022ae:	9313      	str	r3, [sp, #76]	; 0x4c

      sCommand.Instruction = 0x0B;//READ_CACHE_X4;
 80022b0:	230b      	movs	r3, #11
 80022b2:	9302      	str	r3, [sp, #8]
      sCommand.AddressMode = HAL_OSPI_ADDRESS_1_LINE;
 80022b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022b8:	9307      	str	r3, [sp, #28]
      sCommand.Address     = ADDR;//0x00;
 80022ba:	4b11      	ldr	r3, [pc, #68]	; (8002300 <OSPI_Read_Cache_X4+0x74>)
 80022bc:	9306      	str	r3, [sp, #24]
      sCommand.DataMode    = HAL_OSPI_DATA_1_LINE;//HAL_OSPI_DATA_4_LINES;
 80022be:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022c2:	930e      	str	r3, [sp, #56]	; 0x38
      sCommand.NbData      = BUFFERSIZE+1;
 80022c4:	23f5      	movs	r3, #245	; 0xf5
 80022c6:	930f      	str	r3, [sp, #60]	; 0x3c
      sCommand.DummyCycles = 8;//DUMMY_CLOCK_CYCLES_READ;
 80022c8:	2308      	movs	r3, #8
 80022ca:	9311      	str	r3, [sp, #68]	; 0x44

    if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80022cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80022d0:	4669      	mov	r1, sp
 80022d2:	f001 fb85 	bl	80039e0 <HAL_OSPI_Command>
 80022d6:	b960      	cbnz	r0, 80022f2 <OSPI_Read_Cache_X4+0x66>
      {
        Error_Handler();
      }

      if (HAL_OSPI_Receive(hospi, aRxBuffer, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80022d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80022dc:	4909      	ldr	r1, [pc, #36]	; (8002304 <OSPI_Read_Cache_X4+0x78>)
 80022de:	4620      	mov	r0, r4
 80022e0:	f001 fc27 	bl	8003b32 <HAL_OSPI_Receive>
 80022e4:	b940      	cbnz	r0, 80022f8 <OSPI_Read_Cache_X4+0x6c>
      {
        Error_Handler();
      }
      printf("%s",aRxBuffer);
 80022e6:	4907      	ldr	r1, [pc, #28]	; (8002304 <OSPI_Read_Cache_X4+0x78>)
 80022e8:	4807      	ldr	r0, [pc, #28]	; (8002308 <OSPI_Read_Cache_X4+0x7c>)
 80022ea:	f007 ff7b 	bl	800a1e4 <iprintf>


}
 80022ee:	b014      	add	sp, #80	; 0x50
 80022f0:	bd10      	pop	{r4, pc}
        Error_Handler();
 80022f2:	f7ff f863 	bl	80013bc <Error_Handler>
 80022f6:	e7ef      	b.n	80022d8 <OSPI_Read_Cache_X4+0x4c>
        Error_Handler();
 80022f8:	f7ff f860 	bl	80013bc <Error_Handler>
 80022fc:	e7f3      	b.n	80022e6 <OSPI_Read_Cache_X4+0x5a>
 80022fe:	bf00      	nop
 8002300:	07fe0000 	.word	0x07fe0000
 8002304:	20000a84 	.word	0x20000a84
 8002308:	0800e294 	.word	0x0800e294

0800230c <OSPI_Reset>:
		 }
		 printf("%d",reg[1]);
}

void OSPI_Reset(OSPI_HandleTypeDef *hospi)
{
 800230c:	b500      	push	{lr}
 800230e:	b095      	sub	sp, #84	; 0x54
	OSPI_RegularCmdTypeDef  sCommand;
		 uint8_t reg[2];

		 	 sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8002310:	2300      	movs	r3, #0
 8002312:	9300      	str	r3, [sp, #0]
			  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8002314:	9301      	str	r3, [sp, #4]
			  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8002316:	2201      	movs	r2, #1
 8002318:	9203      	str	r2, [sp, #12]
			  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 800231a:	9304      	str	r3, [sp, #16]
			  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800231c:	9305      	str	r3, [sp, #20]
			  sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 800231e:	9309      	str	r3, [sp, #36]	; 0x24
			  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8002320:	930b      	str	r3, [sp, #44]	; 0x2c
			  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 8002322:	9310      	str	r3, [sp, #64]	; 0x40
			  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8002324:	9312      	str	r3, [sp, #72]	; 0x48
			  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8002326:	9313      	str	r3, [sp, #76]	; 0x4c

		      sCommand.Instruction = 0xFF;
 8002328:	22ff      	movs	r2, #255	; 0xff
 800232a:	9202      	str	r2, [sp, #8]
		      sCommand.AddressMode = HAL_OSPI_ADDRESS_NONE;
 800232c:	9307      	str	r3, [sp, #28]
		      sCommand.DataMode    = HAL_OSPI_DATA_NONE;
 800232e:	930e      	str	r3, [sp, #56]	; 0x38
		      sCommand.NbData      = 0;
 8002330:	930f      	str	r3, [sp, #60]	; 0x3c
		      sCommand.DummyCycles = 0;//DUMFERSIZMY_CLOCK_CYCLES_READ;
 8002332:	9311      	str	r3, [sp, #68]	; 0x44

			 if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002334:	f241 3288 	movw	r2, #5000	; 0x1388
 8002338:	4669      	mov	r1, sp
 800233a:	f001 fb51 	bl	80039e0 <HAL_OSPI_Command>
 800233e:	b910      	cbnz	r0, 8002346 <OSPI_Reset+0x3a>
			 {
			 	  Error_Handler();
			 }

}
 8002340:	b015      	add	sp, #84	; 0x54
 8002342:	f85d fb04 	ldr.w	pc, [sp], #4
			 	  Error_Handler();
 8002346:	f7ff f839 	bl	80013bc <Error_Handler>
}
 800234a:	e7f9      	b.n	8002340 <OSPI_Reset+0x34>

0800234c <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800234c:	4b10      	ldr	r3, [pc, #64]	; (8002390 <HAL_InitTick+0x44>)
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	b90b      	cbnz	r3, 8002356 <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8002352:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8002354:	4770      	bx	lr
{
 8002356:	b510      	push	{r4, lr}
 8002358:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800235a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800235e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002362:	4a0c      	ldr	r2, [pc, #48]	; (8002394 <HAL_InitTick+0x48>)
 8002364:	6810      	ldr	r0, [r2, #0]
 8002366:	fbb0 f0f3 	udiv	r0, r0, r3
 800236a:	f000 f8a5 	bl	80024b8 <HAL_SYSTICK_Config>
 800236e:	b968      	cbnz	r0, 800238c <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002370:	2c0f      	cmp	r4, #15
 8002372:	d901      	bls.n	8002378 <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 8002374:	2001      	movs	r0, #1
 8002376:	e00a      	b.n	800238e <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002378:	2200      	movs	r2, #0
 800237a:	4621      	mov	r1, r4
 800237c:	f04f 30ff 	mov.w	r0, #4294967295
 8002380:	f000 f854 	bl	800242c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002384:	4b04      	ldr	r3, [pc, #16]	; (8002398 <HAL_InitTick+0x4c>)
 8002386:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 8002388:	2000      	movs	r0, #0
 800238a:	e000      	b.n	800238e <HAL_InitTick+0x42>
      status = HAL_ERROR;
 800238c:	2001      	movs	r0, #1
}
 800238e:	bd10      	pop	{r4, pc}
 8002390:	200000f9 	.word	0x200000f9
 8002394:	20000000 	.word	0x20000000
 8002398:	200000fc 	.word	0x200000fc

0800239c <HAL_Init>:
{
 800239c:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800239e:	2003      	movs	r0, #3
 80023a0:	f000 f832 	bl	8002408 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023a4:	200f      	movs	r0, #15
 80023a6:	f7ff ffd1 	bl	800234c <HAL_InitTick>
 80023aa:	b110      	cbz	r0, 80023b2 <HAL_Init+0x16>
    status = HAL_ERROR;
 80023ac:	2401      	movs	r4, #1
}
 80023ae:	4620      	mov	r0, r4
 80023b0:	bd10      	pop	{r4, pc}
 80023b2:	4604      	mov	r4, r0
    HAL_MspInit();
 80023b4:	f7ff f9c2 	bl	800173c <HAL_MspInit>
 80023b8:	e7f9      	b.n	80023ae <HAL_Init+0x12>
	...

080023bc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80023bc:	4b03      	ldr	r3, [pc, #12]	; (80023cc <HAL_IncTick+0x10>)
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	4a03      	ldr	r2, [pc, #12]	; (80023d0 <HAL_IncTick+0x14>)
 80023c2:	6811      	ldr	r1, [r2, #0]
 80023c4:	440b      	add	r3, r1
 80023c6:	6013      	str	r3, [r2, #0]
}
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	200000f9 	.word	0x200000f9
 80023d0:	20000b78 	.word	0x20000b78

080023d4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80023d4:	4b01      	ldr	r3, [pc, #4]	; (80023dc <HAL_GetTick+0x8>)
 80023d6:	6818      	ldr	r0, [r3, #0]
}
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	20000b78 	.word	0x20000b78

080023e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023e0:	b538      	push	{r3, r4, r5, lr}
 80023e2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80023e4:	f7ff fff6 	bl	80023d4 <HAL_GetTick>
 80023e8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023ea:	f1b4 3fff 	cmp.w	r4, #4294967295
 80023ee:	d002      	beq.n	80023f6 <HAL_Delay+0x16>
  {
    wait += (uint32_t)uwTickFreq;
 80023f0:	4b04      	ldr	r3, [pc, #16]	; (8002404 <HAL_Delay+0x24>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023f6:	f7ff ffed 	bl	80023d4 <HAL_GetTick>
 80023fa:	1b40      	subs	r0, r0, r5
 80023fc:	42a0      	cmp	r0, r4
 80023fe:	d3fa      	bcc.n	80023f6 <HAL_Delay+0x16>
  {
  }
}
 8002400:	bd38      	pop	{r3, r4, r5, pc}
 8002402:	bf00      	nop
 8002404:	200000f9 	.word	0x200000f9

08002408 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002408:	4a07      	ldr	r2, [pc, #28]	; (8002428 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800240a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800240c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002410:	041b      	lsls	r3, r3, #16
 8002412:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002414:	0200      	lsls	r0, r0, #8
 8002416:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800241a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 800241c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002420:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002424:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002426:	4770      	bx	lr
 8002428:	e000ed00 	.word	0xe000ed00

0800242c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800242c:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800242e:	4b19      	ldr	r3, [pc, #100]	; (8002494 <HAL_NVIC_SetPriority+0x68>)
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002436:	f1c3 0c07 	rsb	ip, r3, #7
 800243a:	f1bc 0f04 	cmp.w	ip, #4
 800243e:	bf28      	it	cs
 8002440:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002444:	f103 0e04 	add.w	lr, r3, #4
 8002448:	f1be 0f06 	cmp.w	lr, #6
 800244c:	d918      	bls.n	8002480 <HAL_NVIC_SetPriority+0x54>
 800244e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002450:	f04f 3eff 	mov.w	lr, #4294967295
 8002454:	fa0e fc0c 	lsl.w	ip, lr, ip
 8002458:	ea21 010c 	bic.w	r1, r1, ip
 800245c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800245e:	fa0e f303 	lsl.w	r3, lr, r3
 8002462:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002466:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8002468:	2800      	cmp	r0, #0
 800246a:	db0b      	blt.n	8002484 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800246c:	0109      	lsls	r1, r1, #4
 800246e:	b2c9      	uxtb	r1, r1
 8002470:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002474:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002478:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800247c:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002480:	2300      	movs	r3, #0
 8002482:	e7e5      	b.n	8002450 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002484:	f000 000f 	and.w	r0, r0, #15
 8002488:	0109      	lsls	r1, r1, #4
 800248a:	b2c9      	uxtb	r1, r1
 800248c:	4b02      	ldr	r3, [pc, #8]	; (8002498 <HAL_NVIC_SetPriority+0x6c>)
 800248e:	5419      	strb	r1, [r3, r0]
 8002490:	e7f4      	b.n	800247c <HAL_NVIC_SetPriority+0x50>
 8002492:	bf00      	nop
 8002494:	e000ed00 	.word	0xe000ed00
 8002498:	e000ed14 	.word	0xe000ed14

0800249c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800249c:	2800      	cmp	r0, #0
 800249e:	db07      	blt.n	80024b0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024a0:	f000 021f 	and.w	r2, r0, #31
 80024a4:	0940      	lsrs	r0, r0, #5
 80024a6:	2301      	movs	r3, #1
 80024a8:	4093      	lsls	r3, r2
 80024aa:	4a02      	ldr	r2, [pc, #8]	; (80024b4 <HAL_NVIC_EnableIRQ+0x18>)
 80024ac:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	e000e100 	.word	0xe000e100

080024b8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024b8:	3801      	subs	r0, #1
 80024ba:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80024be:	d20b      	bcs.n	80024d8 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024c0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80024c4:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024c6:	4a05      	ldr	r2, [pc, #20]	; (80024dc <HAL_SYSTICK_Config+0x24>)
 80024c8:	21f0      	movs	r1, #240	; 0xf0
 80024ca:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024ce:	2000      	movs	r0, #0
 80024d0:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024d2:	2207      	movs	r2, #7
 80024d4:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024d6:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80024d8:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80024da:	4770      	bx	lr
 80024dc:	e000ed00 	.word	0xe000ed00

080024e0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024e0:	b430      	push	{r4, r5}
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80024e2:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 80024e4:	6d05      	ldr	r5, [r0, #80]	; 0x50
 80024e6:	6065      	str	r5, [r4, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 80024e8:	6d44      	ldr	r4, [r0, #84]	; 0x54
 80024ea:	b114      	cbz	r4, 80024f2 <DMA_SetConfig+0x12>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80024ec:	6d84      	ldr	r4, [r0, #88]	; 0x58
 80024ee:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 80024f0:	6065      	str	r5, [r4, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80024f2:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80024f4:	f004 0c1c 	and.w	ip, r4, #28
 80024f8:	2401      	movs	r4, #1
 80024fa:	fa04 f40c 	lsl.w	r4, r4, ip
 80024fe:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8002500:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002502:	6804      	ldr	r4, [r0, #0]
 8002504:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002506:	6883      	ldr	r3, [r0, #8]
 8002508:	2b10      	cmp	r3, #16
 800250a:	d005      	beq.n	8002518 <DMA_SetConfig+0x38>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800250c:	6803      	ldr	r3, [r0, #0]
 800250e:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8002510:	6803      	ldr	r3, [r0, #0]
 8002512:	60da      	str	r2, [r3, #12]
  }
}
 8002514:	bc30      	pop	{r4, r5}
 8002516:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8002518:	6803      	ldr	r3, [r0, #0]
 800251a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 800251c:	6803      	ldr	r3, [r0, #0]
 800251e:	60d9      	str	r1, [r3, #12]
 8002520:	e7f8      	b.n	8002514 <DMA_SetConfig+0x34>
	...

08002524 <DMA_CalcDMAMUXChannelBaseAndMask>:
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002524:	6803      	ldr	r3, [r0, #0]
 8002526:	4a10      	ldr	r2, [pc, #64]	; (8002568 <DMA_CalcDMAMUXChannelBaseAndMask+0x44>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d815      	bhi.n	8002558 <DMA_CalcDMAMUXChannelBaseAndMask+0x34>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800252c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800252e:	f022 0203 	bic.w	r2, r2, #3
 8002532:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8002536:	f502 3202 	add.w	r2, r2, #133120	; 0x20800
 800253a:	6482      	str	r2, [r0, #72]	; 0x48
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800253c:	b2db      	uxtb	r3, r3
 800253e:	3b08      	subs	r3, #8
 8002540:	4a0a      	ldr	r2, [pc, #40]	; (800256c <DMA_CalcDMAMUXChannelBaseAndMask+0x48>)
 8002542:	fba2 2303 	umull	r2, r3, r2, r3
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002546:	4a0a      	ldr	r2, [pc, #40]	; (8002570 <DMA_CalcDMAMUXChannelBaseAndMask+0x4c>)
 8002548:	64c2      	str	r2, [r0, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800254a:	f3c3 1304 	ubfx	r3, r3, #4, #5
 800254e:	2201      	movs	r2, #1
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	6503      	str	r3, [r0, #80]	; 0x50
}
 8002556:	4770      	bx	lr
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002558:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800255a:	f022 0103 	bic.w	r1, r2, #3
 800255e:	4a05      	ldr	r2, [pc, #20]	; (8002574 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8002560:	440a      	add	r2, r1
 8002562:	6482      	str	r2, [r0, #72]	; 0x48
 8002564:	e7ea      	b.n	800253c <DMA_CalcDMAMUXChannelBaseAndMask+0x18>
 8002566:	bf00      	nop
 8002568:	40020407 	.word	0x40020407
 800256c:	cccccccd 	.word	0xcccccccd
 8002570:	40020880 	.word	0x40020880
 8002574:	4002081c 	.word	0x4002081c

08002578 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002578:	7903      	ldrb	r3, [r0, #4]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800257a:	4a07      	ldr	r2, [pc, #28]	; (8002598 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x20>)
 800257c:	441a      	add	r2, r3
 800257e:	0092      	lsls	r2, r2, #2
 8002580:	6542      	str	r2, [r0, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002582:	4a06      	ldr	r2, [pc, #24]	; (800259c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 8002584:	6582      	str	r2, [r0, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002586:	3b01      	subs	r3, #1
 8002588:	f003 0303 	and.w	r3, r3, #3
 800258c:	2201      	movs	r2, #1
 800258e:	fa02 f303 	lsl.w	r3, r2, r3
 8002592:	65c3      	str	r3, [r0, #92]	; 0x5c
}
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	1000823f 	.word	0x1000823f
 800259c:	40020940 	.word	0x40020940

080025a0 <HAL_DMA_Init>:
  if(hdma == NULL)
 80025a0:	2800      	cmp	r0, #0
 80025a2:	d05b      	beq.n	800265c <HAL_DMA_Init+0xbc>
{
 80025a4:	b510      	push	{r4, lr}
 80025a6:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80025a8:	6801      	ldr	r1, [r0, #0]
 80025aa:	4b2d      	ldr	r3, [pc, #180]	; (8002660 <HAL_DMA_Init+0xc0>)
 80025ac:	4299      	cmp	r1, r3
 80025ae:	d83d      	bhi.n	800262c <HAL_DMA_Init+0x8c>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80025b0:	4b2c      	ldr	r3, [pc, #176]	; (8002664 <HAL_DMA_Init+0xc4>)
 80025b2:	440b      	add	r3, r1
 80025b4:	4a2c      	ldr	r2, [pc, #176]	; (8002668 <HAL_DMA_Init+0xc8>)
 80025b6:	fba2 2303 	umull	r2, r3, r2, r3
 80025ba:	091b      	lsrs	r3, r3, #4
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80025c0:	4b2a      	ldr	r3, [pc, #168]	; (800266c <HAL_DMA_Init+0xcc>)
 80025c2:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 80025c4:	2302      	movs	r3, #2
 80025c6:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  tmp = hdma->Instance->CCR;
 80025ca:	680a      	ldr	r2, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80025cc:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 80025d0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmp |=  hdma->Init.Direction        |
 80025d4:	68a3      	ldr	r3, [r4, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025d6:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Direction        |
 80025d8:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025da:	6920      	ldr	r0, [r4, #16]
 80025dc:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025de:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025e0:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025e2:	69a0      	ldr	r0, [r4, #24]
 80025e4:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 80025e6:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025e8:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 80025ea:	6a20      	ldr	r0, [r4, #32]
 80025ec:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 80025ee:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 80025f0:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80025f2:	4620      	mov	r0, r4
 80025f4:	f7ff ff96 	bl	8002524 <DMA_CalcDMAMUXChannelBaseAndMask>
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80025f8:	68a3      	ldr	r3, [r4, #8]
 80025fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80025fe:	d020      	beq.n	8002642 <HAL_DMA_Init+0xa2>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002600:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002602:	7922      	ldrb	r2, [r4, #4]
 8002604:	601a      	str	r2, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002606:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002608:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800260a:	605a      	str	r2, [r3, #4]
  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800260c:	6863      	ldr	r3, [r4, #4]
 800260e:	3b01      	subs	r3, #1
 8002610:	2b03      	cmp	r3, #3
 8002612:	d919      	bls.n	8002648 <HAL_DMA_Init+0xa8>
    hdma->DMAmuxRequestGen = 0U;
 8002614:	2300      	movs	r3, #0
 8002616:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002618:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800261a:	65e3      	str	r3, [r4, #92]	; 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800261c:	2000      	movs	r0, #0
 800261e:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 8002620:	2301      	movs	r3, #1
 8002622:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  hdma->Lock = HAL_UNLOCKED;
 8002626:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 800262a:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800262c:	4b10      	ldr	r3, [pc, #64]	; (8002670 <HAL_DMA_Init+0xd0>)
 800262e:	440b      	add	r3, r1
 8002630:	4a0d      	ldr	r2, [pc, #52]	; (8002668 <HAL_DMA_Init+0xc8>)
 8002632:	fba2 2303 	umull	r2, r3, r2, r3
 8002636:	091b      	lsrs	r3, r3, #4
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800263c:	4b0d      	ldr	r3, [pc, #52]	; (8002674 <HAL_DMA_Init+0xd4>)
 800263e:	6403      	str	r3, [r0, #64]	; 0x40
 8002640:	e7c0      	b.n	80025c4 <HAL_DMA_Init+0x24>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002642:	2300      	movs	r3, #0
 8002644:	6063      	str	r3, [r4, #4]
 8002646:	e7db      	b.n	8002600 <HAL_DMA_Init+0x60>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002648:	4620      	mov	r0, r4
 800264a:	f7ff ff95 	bl	8002578 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800264e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002650:	2200      	movs	r2, #0
 8002652:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002654:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002656:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002658:	605a      	str	r2, [r3, #4]
 800265a:	e7df      	b.n	800261c <HAL_DMA_Init+0x7c>
    return HAL_ERROR;
 800265c:	2001      	movs	r0, #1
}
 800265e:	4770      	bx	lr
 8002660:	40020407 	.word	0x40020407
 8002664:	bffdfff8 	.word	0xbffdfff8
 8002668:	cccccccd 	.word	0xcccccccd
 800266c:	40020000 	.word	0x40020000
 8002670:	bffdfbf8 	.word	0xbffdfbf8
 8002674:	40020400 	.word	0x40020400

08002678 <HAL_DMA_Start_IT>:
{
 8002678:	b538      	push	{r3, r4, r5, lr}
 800267a:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 800267c:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
 8002680:	2801      	cmp	r0, #1
 8002682:	d041      	beq.n	8002708 <HAL_DMA_Start_IT+0x90>
 8002684:	2001      	movs	r0, #1
 8002686:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  if(HAL_DMA_STATE_READY == hdma->State)
 800268a:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
 800268e:	b2c0      	uxtb	r0, r0
 8002690:	2801      	cmp	r0, #1
 8002692:	d004      	beq.n	800269e <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);
 8002694:	2300      	movs	r3, #0
 8002696:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    status = HAL_BUSY;
 800269a:	2002      	movs	r0, #2
}
 800269c:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 800269e:	2002      	movs	r0, #2
 80026a0:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026a4:	2000      	movs	r0, #0
 80026a6:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 80026a8:	6825      	ldr	r5, [r4, #0]
 80026aa:	6828      	ldr	r0, [r5, #0]
 80026ac:	f020 0001 	bic.w	r0, r0, #1
 80026b0:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80026b2:	4620      	mov	r0, r4
 80026b4:	f7ff ff14 	bl	80024e0 <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback )
 80026b8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80026ba:	b1d3      	cbz	r3, 80026f2 <HAL_DMA_Start_IT+0x7a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026bc:	6822      	ldr	r2, [r4, #0]
 80026be:	6813      	ldr	r3, [r2, #0]
 80026c0:	f043 030e 	orr.w	r3, r3, #14
 80026c4:	6013      	str	r3, [r2, #0]
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80026c6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80026ce:	d003      	beq.n	80026d8 <HAL_DMA_Start_IT+0x60>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026d6:	601a      	str	r2, [r3, #0]
    if(hdma->DMAmuxRequestGen != 0U)
 80026d8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80026da:	b11b      	cbz	r3, 80026e4 <HAL_DMA_Start_IT+0x6c>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026e2:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 80026e4:	6822      	ldr	r2, [r4, #0]
 80026e6:	6813      	ldr	r3, [r2, #0]
 80026e8:	f043 0301 	orr.w	r3, r3, #1
 80026ec:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026ee:	2000      	movs	r0, #0
 80026f0:	e7d4      	b.n	800269c <HAL_DMA_Start_IT+0x24>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80026f2:	6822      	ldr	r2, [r4, #0]
 80026f4:	6813      	ldr	r3, [r2, #0]
 80026f6:	f023 0304 	bic.w	r3, r3, #4
 80026fa:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80026fc:	6822      	ldr	r2, [r4, #0]
 80026fe:	6813      	ldr	r3, [r2, #0]
 8002700:	f043 030a 	orr.w	r3, r3, #10
 8002704:	6013      	str	r3, [r2, #0]
 8002706:	e7de      	b.n	80026c6 <HAL_DMA_Start_IT+0x4e>
  __HAL_LOCK(hdma);
 8002708:	2002      	movs	r0, #2
 800270a:	e7c7      	b.n	800269c <HAL_DMA_Start_IT+0x24>

0800270c <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800270c:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8002710:	b2db      	uxtb	r3, r3
 8002712:	2b02      	cmp	r3, #2
 8002714:	d006      	beq.n	8002724 <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002716:	2304      	movs	r3, #4
 8002718:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 800271a:	2300      	movs	r3, #0
 800271c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 8002720:	2001      	movs	r0, #1
 8002722:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002724:	6802      	ldr	r2, [r0, #0]
 8002726:	6813      	ldr	r3, [r2, #0]
 8002728:	f023 030e 	bic.w	r3, r3, #14
 800272c:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800272e:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8002730:	6813      	ldr	r3, [r2, #0]
 8002732:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002736:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8002738:	6802      	ldr	r2, [r0, #0]
 800273a:	6813      	ldr	r3, [r2, #0]
 800273c:	f023 0301 	bic.w	r3, r3, #1
 8002740:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002742:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002744:	f003 021c 	and.w	r2, r3, #28
 8002748:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800274a:	2301      	movs	r3, #1
 800274c:	4093      	lsls	r3, r2
 800274e:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002750:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8002752:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8002754:	605a      	str	r2, [r3, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8002756:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002758:	b133      	cbz	r3, 8002768 <HAL_DMA_Abort+0x5c>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002760:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002762:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002764:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8002766:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002768:	2301      	movs	r3, #1
 800276a:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 800276e:	2300      	movs	r3, #0
 8002770:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    return status;
 8002774:	4618      	mov	r0, r3
}
 8002776:	4770      	bx	lr

08002778 <HAL_DMA_Abort_IT>:
{
 8002778:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800277a:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800277e:	b2db      	uxtb	r3, r3
 8002780:	2b02      	cmp	r3, #2
 8002782:	d003      	beq.n	800278c <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002784:	2304      	movs	r3, #4
 8002786:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8002788:	2001      	movs	r0, #1
}
 800278a:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800278c:	6802      	ldr	r2, [r0, #0]
 800278e:	6813      	ldr	r3, [r2, #0]
 8002790:	f023 030e 	bic.w	r3, r3, #14
 8002794:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8002796:	6802      	ldr	r2, [r0, #0]
 8002798:	6813      	ldr	r3, [r2, #0]
 800279a:	f023 0301 	bic.w	r3, r3, #1
 800279e:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80027a0:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80027a2:	6813      	ldr	r3, [r2, #0]
 80027a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027a8:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80027aa:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80027ac:	f003 021c 	and.w	r2, r3, #28
 80027b0:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80027b2:	2301      	movs	r3, #1
 80027b4:	4093      	lsls	r3, r2
 80027b6:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80027b8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80027ba:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80027bc:	605a      	str	r2, [r3, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 80027be:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80027c0:	b133      	cbz	r3, 80027d0 <HAL_DMA_Abort_IT+0x58>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027c8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80027ca:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80027cc:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80027ce:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80027d0:	2301      	movs	r3, #1
 80027d2:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80027d6:	2300      	movs	r3, #0
 80027d8:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferAbortCallback != NULL)
 80027dc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80027de:	b113      	cbz	r3, 80027e6 <HAL_DMA_Abort_IT+0x6e>
      hdma->XferAbortCallback(hdma);
 80027e0:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80027e2:	2000      	movs	r0, #0
 80027e4:	e7d1      	b.n	800278a <HAL_DMA_Abort_IT+0x12>
 80027e6:	2000      	movs	r0, #0
 80027e8:	e7cf      	b.n	800278a <HAL_DMA_Abort_IT+0x12>

080027ea <HAL_DMA_IRQHandler>:
{
 80027ea:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80027ec:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80027ee:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80027f0:	6804      	ldr	r4, [r0, #0]
 80027f2:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80027f4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80027f6:	f003 031c 	and.w	r3, r3, #28
 80027fa:	2204      	movs	r2, #4
 80027fc:	409a      	lsls	r2, r3
 80027fe:	420a      	tst	r2, r1
 8002800:	d015      	beq.n	800282e <HAL_DMA_IRQHandler+0x44>
 8002802:	f015 0f04 	tst.w	r5, #4
 8002806:	d012      	beq.n	800282e <HAL_DMA_IRQHandler+0x44>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002808:	6823      	ldr	r3, [r4, #0]
 800280a:	f013 0f20 	tst.w	r3, #32
 800280e:	d103      	bne.n	8002818 <HAL_DMA_IRQHandler+0x2e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002810:	6823      	ldr	r3, [r4, #0]
 8002812:	f023 0304 	bic.w	r3, r3, #4
 8002816:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002818:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800281a:	f003 021c 	and.w	r2, r3, #28
 800281e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002820:	2304      	movs	r3, #4
 8002822:	4093      	lsls	r3, r2
 8002824:	604b      	str	r3, [r1, #4]
      if(hdma->XferHalfCpltCallback != NULL)
 8002826:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002828:	b103      	cbz	r3, 800282c <HAL_DMA_IRQHandler+0x42>
        hdma->XferHalfCpltCallback(hdma);
 800282a:	4798      	blx	r3
}
 800282c:	bd38      	pop	{r3, r4, r5, pc}
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800282e:	2202      	movs	r2, #2
 8002830:	409a      	lsls	r2, r3
 8002832:	420a      	tst	r2, r1
 8002834:	d01c      	beq.n	8002870 <HAL_DMA_IRQHandler+0x86>
 8002836:	f015 0f02 	tst.w	r5, #2
 800283a:	d019      	beq.n	8002870 <HAL_DMA_IRQHandler+0x86>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800283c:	6823      	ldr	r3, [r4, #0]
 800283e:	f013 0f20 	tst.w	r3, #32
 8002842:	d106      	bne.n	8002852 <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002844:	6823      	ldr	r3, [r4, #0]
 8002846:	f023 030a 	bic.w	r3, r3, #10
 800284a:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800284c:	2301      	movs	r3, #1
 800284e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002852:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002854:	f003 021c 	and.w	r2, r3, #28
 8002858:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800285a:	2302      	movs	r3, #2
 800285c:	4093      	lsls	r3, r2
 800285e:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);
 8002860:	2300      	movs	r3, #0
 8002862:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferCpltCallback != NULL)
 8002866:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002868:	2b00      	cmp	r3, #0
 800286a:	d0df      	beq.n	800282c <HAL_DMA_IRQHandler+0x42>
      hdma->XferCpltCallback(hdma);
 800286c:	4798      	blx	r3
 800286e:	e7dd      	b.n	800282c <HAL_DMA_IRQHandler+0x42>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002870:	2208      	movs	r2, #8
 8002872:	fa02 f303 	lsl.w	r3, r2, r3
 8002876:	420b      	tst	r3, r1
 8002878:	d0d8      	beq.n	800282c <HAL_DMA_IRQHandler+0x42>
 800287a:	f015 0f08 	tst.w	r5, #8
 800287e:	d0d5      	beq.n	800282c <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002880:	6823      	ldr	r3, [r4, #0]
 8002882:	f023 030e 	bic.w	r3, r3, #14
 8002886:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002888:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800288a:	f003 031c 	and.w	r3, r3, #28
 800288e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002890:	2201      	movs	r2, #1
 8002892:	fa02 f303 	lsl.w	r3, r2, r3
 8002896:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002898:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 800289a:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 800289e:	2300      	movs	r3, #0
 80028a0:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 80028a4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d0c0      	beq.n	800282c <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 80028aa:	4798      	blx	r3
  return;
 80028ac:	e7be      	b.n	800282c <HAL_DMA_IRQHandler+0x42>

080028ae <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 80028ae:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
}
 80028b0:	4770      	bx	lr
	...

080028b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028b6:	b083      	sub	sp, #12
  uint32_t position = 0x00u;
 80028b8:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028ba:	e062      	b.n	8002982 <HAL_GPIO_Init+0xce>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028bc:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80028be:	005e      	lsls	r6, r3, #1
 80028c0:	2403      	movs	r4, #3
 80028c2:	40b4      	lsls	r4, r6
 80028c4:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 80028c8:	68cc      	ldr	r4, [r1, #12]
 80028ca:	40b4      	lsls	r4, r6
 80028cc:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 80028ce:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028d0:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80028d2:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028d6:	684c      	ldr	r4, [r1, #4]
 80028d8:	f3c4 1400 	ubfx	r4, r4, #4, #1
 80028dc:	409c      	lsls	r4, r3
 80028de:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OTYPER = temp;
 80028e2:	6044      	str	r4, [r0, #4]
 80028e4:	e05f      	b.n	80029a6 <HAL_GPIO_Init+0xf2>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80028e6:	08dd      	lsrs	r5, r3, #3
 80028e8:	3508      	adds	r5, #8
 80028ea:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80028ee:	f003 0407 	and.w	r4, r3, #7
 80028f2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80028f6:	240f      	movs	r4, #15
 80028f8:	fa04 f40c 	lsl.w	r4, r4, ip
 80028fc:	ea26 0e04 	bic.w	lr, r6, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002900:	690c      	ldr	r4, [r1, #16]
 8002902:	fa04 f40c 	lsl.w	r4, r4, ip
 8002906:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3u] = temp;
 800290a:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 800290e:	e061      	b.n	80029d4 <HAL_GPIO_Init+0x120>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002910:	2407      	movs	r4, #7
 8002912:	e000      	b.n	8002916 <HAL_GPIO_Init+0x62>
 8002914:	2400      	movs	r4, #0
 8002916:	fa04 f40e 	lsl.w	r4, r4, lr
 800291a:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 800291c:	f10c 0c02 	add.w	ip, ip, #2
 8002920:	4d5c      	ldr	r5, [pc, #368]	; (8002a94 <HAL_GPIO_Init+0x1e0>)
 8002922:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002926:	4c5c      	ldr	r4, [pc, #368]	; (8002a98 <HAL_GPIO_Init+0x1e4>)
 8002928:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 800292a:	43d4      	mvns	r4, r2
 800292c:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002930:	684f      	ldr	r7, [r1, #4]
 8002932:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8002936:	d001      	beq.n	800293c <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 8002938:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 800293c:	4d56      	ldr	r5, [pc, #344]	; (8002a98 <HAL_GPIO_Init+0x1e4>)
 800293e:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 8002940:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 8002942:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002946:	684f      	ldr	r7, [r1, #4]
 8002948:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
 800294c:	d001      	beq.n	8002952 <HAL_GPIO_Init+0x9e>
        {
          temp |= iocurrent;
 800294e:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 8002952:	4d51      	ldr	r5, [pc, #324]	; (8002a98 <HAL_GPIO_Init+0x1e4>)
 8002954:	60ee      	str	r6, [r5, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002956:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8002958:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800295c:	684f      	ldr	r7, [r1, #4]
 800295e:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8002962:	d001      	beq.n	8002968 <HAL_GPIO_Init+0xb4>
        {
          temp |= iocurrent;
 8002964:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 8002968:	4d4b      	ldr	r5, [pc, #300]	; (8002a98 <HAL_GPIO_Init+0x1e4>)
 800296a:	606e      	str	r6, [r5, #4]

        temp = EXTI->IMR1;
 800296c:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 800296e:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002970:	684e      	ldr	r6, [r1, #4]
 8002972:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 8002976:	d001      	beq.n	800297c <HAL_GPIO_Init+0xc8>
        {
          temp |= iocurrent;
 8002978:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->IMR1 = temp;
 800297c:	4a46      	ldr	r2, [pc, #280]	; (8002a98 <HAL_GPIO_Init+0x1e4>)
 800297e:	6014      	str	r4, [r2, #0]
      }
    }

    position++;
 8002980:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002982:	680a      	ldr	r2, [r1, #0]
 8002984:	fa32 f403 	lsrs.w	r4, r2, r3
 8002988:	f000 8081 	beq.w	8002a8e <HAL_GPIO_Init+0x1da>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800298c:	f04f 0c01 	mov.w	ip, #1
 8002990:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 8002994:	ea1c 0202 	ands.w	r2, ip, r2
 8002998:	d0f2      	beq.n	8002980 <HAL_GPIO_Init+0xcc>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800299a:	684c      	ldr	r4, [r1, #4]
 800299c:	f004 0403 	and.w	r4, r4, #3
 80029a0:	3c01      	subs	r4, #1
 80029a2:	2c01      	cmp	r4, #1
 80029a4:	d98a      	bls.n	80028bc <HAL_GPIO_Init+0x8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029a6:	684c      	ldr	r4, [r1, #4]
 80029a8:	f004 0403 	and.w	r4, r4, #3
 80029ac:	2c03      	cmp	r4, #3
 80029ae:	d00c      	beq.n	80029ca <HAL_GPIO_Init+0x116>
        temp = GPIOx->PUPDR;
 80029b0:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80029b2:	005d      	lsls	r5, r3, #1
 80029b4:	f04f 0c03 	mov.w	ip, #3
 80029b8:	fa0c fc05 	lsl.w	ip, ip, r5
 80029bc:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029c0:	688c      	ldr	r4, [r1, #8]
 80029c2:	40ac      	lsls	r4, r5
 80029c4:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 80029c8:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029ca:	684c      	ldr	r4, [r1, #4]
 80029cc:	f004 0403 	and.w	r4, r4, #3
 80029d0:	2c02      	cmp	r4, #2
 80029d2:	d088      	beq.n	80028e6 <HAL_GPIO_Init+0x32>
      temp = GPIOx->MODER;
 80029d4:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80029d6:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80029da:	f04f 0c03 	mov.w	ip, #3
 80029de:	fa0c fc0e 	lsl.w	ip, ip, lr
 80029e2:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80029e6:	684c      	ldr	r4, [r1, #4]
 80029e8:	f004 0403 	and.w	r4, r4, #3
 80029ec:	fa04 f40e 	lsl.w	r4, r4, lr
 80029f0:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 80029f4:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80029f6:	684c      	ldr	r4, [r1, #4]
 80029f8:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 80029fc:	d0c0      	beq.n	8002980 <HAL_GPIO_Init+0xcc>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029fe:	4c27      	ldr	r4, [pc, #156]	; (8002a9c <HAL_GPIO_Init+0x1e8>)
 8002a00:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8002a02:	f045 0501 	orr.w	r5, r5, #1
 8002a06:	6625      	str	r5, [r4, #96]	; 0x60
 8002a08:	6e24      	ldr	r4, [r4, #96]	; 0x60
 8002a0a:	f004 0401 	and.w	r4, r4, #1
 8002a0e:	9401      	str	r4, [sp, #4]
 8002a10:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8002a12:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8002a16:	f10c 0502 	add.w	r5, ip, #2
 8002a1a:	4c1e      	ldr	r4, [pc, #120]	; (8002a94 <HAL_GPIO_Init+0x1e0>)
 8002a1c:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002a20:	f003 0403 	and.w	r4, r3, #3
 8002a24:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8002a28:	240f      	movs	r4, #15
 8002a2a:	fa04 f40e 	lsl.w	r4, r4, lr
 8002a2e:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a32:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8002a36:	f43f af6d 	beq.w	8002914 <HAL_GPIO_Init+0x60>
 8002a3a:	4c19      	ldr	r4, [pc, #100]	; (8002aa0 <HAL_GPIO_Init+0x1ec>)
 8002a3c:	42a0      	cmp	r0, r4
 8002a3e:	d01a      	beq.n	8002a76 <HAL_GPIO_Init+0x1c2>
 8002a40:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002a44:	42a0      	cmp	r0, r4
 8002a46:	d018      	beq.n	8002a7a <HAL_GPIO_Init+0x1c6>
 8002a48:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002a4c:	42a0      	cmp	r0, r4
 8002a4e:	d016      	beq.n	8002a7e <HAL_GPIO_Init+0x1ca>
 8002a50:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002a54:	42a0      	cmp	r0, r4
 8002a56:	d014      	beq.n	8002a82 <HAL_GPIO_Init+0x1ce>
 8002a58:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002a5c:	42a0      	cmp	r0, r4
 8002a5e:	d012      	beq.n	8002a86 <HAL_GPIO_Init+0x1d2>
 8002a60:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002a64:	42a0      	cmp	r0, r4
 8002a66:	d010      	beq.n	8002a8a <HAL_GPIO_Init+0x1d6>
 8002a68:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002a6c:	42a0      	cmp	r0, r4
 8002a6e:	f43f af4f 	beq.w	8002910 <HAL_GPIO_Init+0x5c>
 8002a72:	2408      	movs	r4, #8
 8002a74:	e74f      	b.n	8002916 <HAL_GPIO_Init+0x62>
 8002a76:	2401      	movs	r4, #1
 8002a78:	e74d      	b.n	8002916 <HAL_GPIO_Init+0x62>
 8002a7a:	2402      	movs	r4, #2
 8002a7c:	e74b      	b.n	8002916 <HAL_GPIO_Init+0x62>
 8002a7e:	2403      	movs	r4, #3
 8002a80:	e749      	b.n	8002916 <HAL_GPIO_Init+0x62>
 8002a82:	2404      	movs	r4, #4
 8002a84:	e747      	b.n	8002916 <HAL_GPIO_Init+0x62>
 8002a86:	2405      	movs	r4, #5
 8002a88:	e745      	b.n	8002916 <HAL_GPIO_Init+0x62>
 8002a8a:	2406      	movs	r4, #6
 8002a8c:	e743      	b.n	8002916 <HAL_GPIO_Init+0x62>
  }
}
 8002a8e:	b003      	add	sp, #12
 8002a90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a92:	bf00      	nop
 8002a94:	40010000 	.word	0x40010000
 8002a98:	40010400 	.word	0x40010400
 8002a9c:	40021000 	.word	0x40021000
 8002aa0:	48000400 	.word	0x48000400

08002aa4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002aa4:	b10a      	cbz	r2, 8002aaa <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002aa6:	6181      	str	r1, [r0, #24]
 8002aa8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002aaa:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8002aac:	4770      	bx	lr

08002aae <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002aae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ab0:	6806      	ldr	r6, [r0, #0]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002ab2:	6a34      	ldr	r4, [r6, #32]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002ab4:	f004 070f 	and.w	r7, r4, #15
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002ab8:	f3c4 4343 	ubfx	r3, r4, #17, #4
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002abc:	f3c4 140a 	ubfx	r4, r4, #4, #11

  switch (pktsts)
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d000      	beq.n	8002ac6 <HCD_RXQLVL_IRQHandler+0x18>
    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
  }
}
 8002ac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ac6:	4605      	mov	r5, r0
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002ac8:	2c00      	cmp	r4, #0
 8002aca:	d0fb      	beq.n	8002ac4 <HCD_RXQLVL_IRQHandler+0x16>
 8002acc:	232c      	movs	r3, #44	; 0x2c
 8002ace:	fb03 0307 	mla	r3, r3, r7, r0
 8002ad2:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002ad4:	2900      	cmp	r1, #0
 8002ad6:	d0f5      	beq.n	8002ac4 <HCD_RXQLVL_IRQHandler+0x16>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002ad8:	232c      	movs	r3, #44	; 0x2c
 8002ada:	fb03 0307 	mla	r3, r3, r7, r0
 8002ade:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ae0:	4422      	add	r2, r4
 8002ae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d906      	bls.n	8002af6 <HCD_RXQLVL_IRQHandler+0x48>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ae8:	202c      	movs	r0, #44	; 0x2c
 8002aea:	fb00 5507 	mla	r5, r0, r7, r5
 8002aee:	2304      	movs	r3, #4
 8002af0:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
}
 8002af4:	e7e6      	b.n	8002ac4 <HCD_RXQLVL_IRQHandler+0x16>
          (void)USB_ReadPacket(hhcd->Instance,
 8002af6:	4622      	mov	r2, r4
 8002af8:	4630      	mov	r0, r6
 8002afa:	f003 fde8 	bl	80066ce <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002afe:	232c      	movs	r3, #44	; 0x2c
 8002b00:	fb03 5307 	mla	r3, r3, r7, r5
 8002b04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b06:	4422      	add	r2, r4
 8002b08:	645a      	str	r2, [r3, #68]	; 0x44
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002b0a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b0c:	4422      	add	r2, r4
 8002b0e:	651a      	str	r2, [r3, #80]	; 0x50
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002b10:	eb06 1647 	add.w	r6, r6, r7, lsl #5
 8002b14:	f8d6 2510 	ldr.w	r2, [r6, #1296]	; 0x510
 8002b18:	f3c2 42c9 	ubfx	r2, r2, #19, #10
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002b1c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002b20:	42a3      	cmp	r3, r4
 8002b22:	d1cf      	bne.n	8002ac4 <HCD_RXQLVL_IRQHandler+0x16>
 8002b24:	2a00      	cmp	r2, #0
 8002b26:	d0cd      	beq.n	8002ac4 <HCD_RXQLVL_IRQHandler+0x16>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b28:	f8d6 3500 	ldr.w	r3, [r6, #1280]	; 0x500
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b2c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b30:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b34:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002b38:	232c      	movs	r3, #44	; 0x2c
 8002b3a:	fb03 5507 	mla	r5, r3, r7, r5
 8002b3e:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
 8002b42:	f083 0301 	eor.w	r3, r3, #1
 8002b46:	f885 3054 	strb.w	r3, [r5, #84]	; 0x54
 8002b4a:	e7bb      	b.n	8002ac4 <HCD_RXQLVL_IRQHandler+0x16>

08002b4c <HAL_HCD_HC_Init>:
{
 8002b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b4e:	b085      	sub	sp, #20
 8002b50:	4604      	mov	r4, r0
 8002b52:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
 8002b56:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
 8002b5a:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
  __HAL_LOCK(hhcd);
 8002b5e:	f890 02f8 	ldrb.w	r0, [r0, #760]	; 0x2f8
 8002b62:	2801      	cmp	r0, #1
 8002b64:	d037      	beq.n	8002bd6 <HAL_HCD_HC_Init+0x8a>
 8002b66:	2001      	movs	r0, #1
 8002b68:	f884 02f8 	strb.w	r0, [r4, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002b6c:	202c      	movs	r0, #44	; 0x2c
 8002b6e:	fb00 4001 	mla	r0, r0, r1, r4
 8002b72:	f04f 0c00 	mov.w	ip, #0
 8002b76:	f880 c03d 	strb.w	ip, [r0, #61]	; 0x3d
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002b7a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hhcd->hc[ch_num].max_packet = mps;
 8002b7e:	f8a0 7040 	strh.w	r7, [r0, #64]	; 0x40
  hhcd->hc[ch_num].ch_num = ch_num;
 8002b82:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
  hhcd->hc[ch_num].ep_type = ep_type;
 8002b86:	f880 603f 	strb.w	r6, [r0, #63]	; 0x3f
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002b8a:	f002 0c7f 	and.w	ip, r2, #127	; 0x7f
 8002b8e:	f880 c03a 	strb.w	ip, [r0, #58]	; 0x3a
  if ((epnum & 0x80U) == 0x80U)
 8002b92:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002b96:	d116      	bne.n	8002bc6 <HAL_HCD_HC_Init+0x7a>
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002b98:	202c      	movs	r0, #44	; 0x2c
 8002b9a:	fb00 4001 	mla	r0, r0, r1, r4
 8002b9e:	f04f 0c00 	mov.w	ip, #0
 8002ba2:	f880 c03b 	strb.w	ip, [r0, #59]	; 0x3b
  hhcd->hc[ch_num].speed = speed;
 8002ba6:	202c      	movs	r0, #44	; 0x2c
 8002ba8:	fb00 4001 	mla	r0, r0, r1, r4
 8002bac:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  status =  USB_HC_Init(hhcd->Instance,
 8002bb0:	9702      	str	r7, [sp, #8]
 8002bb2:	9601      	str	r6, [sp, #4]
 8002bb4:	9500      	str	r5, [sp, #0]
 8002bb6:	6820      	ldr	r0, [r4, #0]
 8002bb8:	f003 fead 	bl	8006916 <USB_HC_Init>
  __HAL_UNLOCK(hhcd);
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	f884 32f8 	strb.w	r3, [r4, #760]	; 0x2f8
}
 8002bc2:	b005      	add	sp, #20
 8002bc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002bc6:	202c      	movs	r0, #44	; 0x2c
 8002bc8:	fb00 4001 	mla	r0, r0, r1, r4
 8002bcc:	f04f 0c01 	mov.w	ip, #1
 8002bd0:	f880 c03b 	strb.w	ip, [r0, #59]	; 0x3b
 8002bd4:	e7e7      	b.n	8002ba6 <HAL_HCD_HC_Init+0x5a>
  __HAL_LOCK(hhcd);
 8002bd6:	2002      	movs	r0, #2
 8002bd8:	e7f3      	b.n	8002bc2 <HAL_HCD_HC_Init+0x76>

08002bda <HAL_HCD_HC_Halt>:
  __HAL_LOCK(hhcd);
 8002bda:	f890 32f8 	ldrb.w	r3, [r0, #760]	; 0x2f8
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d00b      	beq.n	8002bfa <HAL_HCD_HC_Halt+0x20>
{
 8002be2:	b510      	push	{r4, lr}
 8002be4:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8002be6:	2301      	movs	r3, #1
 8002be8:	f880 32f8 	strb.w	r3, [r0, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bec:	6800      	ldr	r0, [r0, #0]
 8002bee:	f003 ffb4 	bl	8006b5a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002bf2:	2000      	movs	r0, #0
 8002bf4:	f884 02f8 	strb.w	r0, [r4, #760]	; 0x2f8
}
 8002bf8:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8002bfa:	2002      	movs	r0, #2
}
 8002bfc:	4770      	bx	lr

08002bfe <HAL_HCD_Init>:
  if (hhcd == NULL)
 8002bfe:	2800      	cmp	r0, #0
 8002c00:	d04d      	beq.n	8002c9e <HAL_HCD_Init+0xa0>
{
 8002c02:	b570      	push	{r4, r5, r6, lr}
 8002c04:	b08a      	sub	sp, #40	; 0x28
 8002c06:	4604      	mov	r4, r0
  USBx = hhcd->Instance;
 8002c08:	6805      	ldr	r5, [r0, #0]
  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002c0a:	f890 32f9 	ldrb.w	r3, [r0, #761]	; 0x2f9
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d040      	beq.n	8002c94 <HAL_HCD_Init+0x96>
  hhcd->State = HAL_HCD_STATE_BUSY;
 8002c12:	2303      	movs	r3, #3
 8002c14:	f884 32f9 	strb.w	r3, [r4, #761]	; 0x2f9
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002c18:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8002c1a:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002c1e:	d101      	bne.n	8002c24 <HAL_HCD_Init+0x26>
    hhcd->Init.dma_enable = 0U;
 8002c20:	2300      	movs	r3, #0
 8002c22:	6123      	str	r3, [r4, #16]
  __HAL_HCD_DISABLE(hhcd);
 8002c24:	6820      	ldr	r0, [r4, #0]
 8002c26:	f003 fce9 	bl	80065fc <USB_DisableGlobalInt>
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002c2a:	46a4      	mov	ip, r4
 8002c2c:	f85c 6b10 	ldr.w	r6, [ip], #16
 8002c30:	46ee      	mov	lr, sp
 8002c32:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002c36:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8002c3a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002c3e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8002c42:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8002c46:	e88e 0003 	stmia.w	lr, {r0, r1}
 8002c4a:	1d25      	adds	r5, r4, #4
 8002c4c:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8002c50:	4630      	mov	r0, r6
 8002c52:	f003 fcb1 	bl	80065b8 <USB_CoreInit>
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002c56:	2101      	movs	r1, #1
 8002c58:	6820      	ldr	r0, [r4, #0]
 8002c5a:	f003 fd6a 	bl	8006732 <USB_SetCurrentMode>
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002c5e:	46a4      	mov	ip, r4
 8002c60:	f85c 6b10 	ldr.w	r6, [ip], #16
 8002c64:	46ee      	mov	lr, sp
 8002c66:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002c6a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8002c6e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002c72:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8002c76:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8002c7a:	e88e 0003 	stmia.w	lr, {r0, r1}
 8002c7e:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8002c82:	4630      	mov	r0, r6
 8002c84:	f003 fd86 	bl	8006794 <USB_HostInit>
  hhcd->State = HAL_HCD_STATE_READY;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	f884 32f9 	strb.w	r3, [r4, #761]	; 0x2f9
  return HAL_OK;
 8002c8e:	2000      	movs	r0, #0
}
 8002c90:	b00a      	add	sp, #40	; 0x28
 8002c92:	bd70      	pop	{r4, r5, r6, pc}
    hhcd->Lock = HAL_UNLOCKED;
 8002c94:	f880 32f8 	strb.w	r3, [r0, #760]	; 0x2f8
    HAL_HCD_MspInit(hhcd);
 8002c98:	f005 ffba 	bl	8008c10 <HAL_HCD_MspInit>
 8002c9c:	e7b9      	b.n	8002c12 <HAL_HCD_Init+0x14>
    return HAL_ERROR;
 8002c9e:	2001      	movs	r0, #1
}
 8002ca0:	4770      	bx	lr

08002ca2 <HAL_HCD_HC_SubmitRequest>:
{
 8002ca2:	b570      	push	{r4, r5, r6, lr}
 8002ca4:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8002ca8:	f8bd 6018 	ldrh.w	r6, [sp, #24]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002cac:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
 8002cb0:	fb0c 0c01 	mla	ip, ip, r1, r0
 8002cb4:	f88c 203b 	strb.w	r2, [ip, #59]	; 0x3b
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002cb8:	f88c 303f 	strb.w	r3, [ip, #63]	; 0x3f
  if (token == 0U)
 8002cbc:	b97d      	cbnz	r5, 8002cde <HAL_HCD_HC_SubmitRequest+0x3c>
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002cbe:	4664      	mov	r4, ip
 8002cc0:	f04f 0c03 	mov.w	ip, #3
 8002cc4:	f884 c042 	strb.w	ip, [r4, #66]	; 0x42
    hhcd->hc[ch_num].do_ping = do_ping;
 8002cc8:	f89d c01c 	ldrb.w	ip, [sp, #28]
 8002ccc:	f884 c03d 	strb.w	ip, [r4, #61]	; 0x3d
  switch (ep_type)
 8002cd0:	2b03      	cmp	r3, #3
 8002cd2:	f200 8081 	bhi.w	8002dd8 <HAL_HCD_HC_SubmitRequest+0x136>
 8002cd6:	e8df f003 	tbb	[pc, r3]
 8002cda:	790a      	.short	0x790a
 8002cdc:	5129      	.short	0x5129
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002cde:	242c      	movs	r4, #44	; 0x2c
 8002ce0:	fb04 0401 	mla	r4, r4, r1, r0
 8002ce4:	f04f 0c02 	mov.w	ip, #2
 8002ce8:	f884 c042 	strb.w	ip, [r4, #66]	; 0x42
 8002cec:	e7f0      	b.n	8002cd0 <HAL_HCD_HC_SubmitRequest+0x2e>
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002cee:	2d01      	cmp	r5, #1
 8002cf0:	d172      	bne.n	8002dd8 <HAL_HCD_HC_SubmitRequest+0x136>
 8002cf2:	2a00      	cmp	r2, #0
 8002cf4:	d170      	bne.n	8002dd8 <HAL_HCD_HC_SubmitRequest+0x136>
        if (length == 0U)
 8002cf6:	b92e      	cbnz	r6, 8002d04 <HAL_HCD_HC_SubmitRequest+0x62>
          hhcd->hc[ch_num].toggle_out = 1U;
 8002cf8:	232c      	movs	r3, #44	; 0x2c
 8002cfa:	fb03 0301 	mla	r3, r3, r1, r0
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002d04:	232c      	movs	r3, #44	; 0x2c
 8002d06:	fb03 0301 	mla	r3, r3, r1, r0
 8002d0a:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002d0e:	b933      	cbnz	r3, 8002d1e <HAL_HCD_HC_SubmitRequest+0x7c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d10:	232c      	movs	r3, #44	; 0x2c
 8002d12:	fb03 0301 	mla	r3, r3, r1, r0
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d1c:	e05c      	b.n	8002dd8 <HAL_HCD_HC_SubmitRequest+0x136>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002d1e:	232c      	movs	r3, #44	; 0x2c
 8002d20:	fb03 0301 	mla	r3, r3, r1, r0
 8002d24:	2202      	movs	r2, #2
 8002d26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d2a:	e055      	b.n	8002dd8 <HAL_HCD_HC_SubmitRequest+0x136>
      if (direction == 0U)
 8002d2c:	b992      	cbnz	r2, 8002d54 <HAL_HCD_HC_SubmitRequest+0xb2>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002d2e:	232c      	movs	r3, #44	; 0x2c
 8002d30:	fb03 0301 	mla	r3, r3, r1, r0
 8002d34:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002d38:	b92b      	cbnz	r3, 8002d46 <HAL_HCD_HC_SubmitRequest+0xa4>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d3a:	232c      	movs	r3, #44	; 0x2c
 8002d3c:	fb03 0301 	mla	r3, r3, r1, r0
 8002d40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d44:	e048      	b.n	8002dd8 <HAL_HCD_HC_SubmitRequest+0x136>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002d46:	232c      	movs	r3, #44	; 0x2c
 8002d48:	fb03 0301 	mla	r3, r3, r1, r0
 8002d4c:	2202      	movs	r2, #2
 8002d4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d52:	e041      	b.n	8002dd8 <HAL_HCD_HC_SubmitRequest+0x136>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002d54:	232c      	movs	r3, #44	; 0x2c
 8002d56:	fb03 0301 	mla	r3, r3, r1, r0
 8002d5a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002d5e:	b933      	cbnz	r3, 8002d6e <HAL_HCD_HC_SubmitRequest+0xcc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d60:	232c      	movs	r3, #44	; 0x2c
 8002d62:	fb03 0301 	mla	r3, r3, r1, r0
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d6c:	e034      	b.n	8002dd8 <HAL_HCD_HC_SubmitRequest+0x136>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002d6e:	232c      	movs	r3, #44	; 0x2c
 8002d70:	fb03 0301 	mla	r3, r3, r1, r0
 8002d74:	2202      	movs	r2, #2
 8002d76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d7a:	e02d      	b.n	8002dd8 <HAL_HCD_HC_SubmitRequest+0x136>
      if (direction == 0U)
 8002d7c:	b992      	cbnz	r2, 8002da4 <HAL_HCD_HC_SubmitRequest+0x102>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002d7e:	232c      	movs	r3, #44	; 0x2c
 8002d80:	fb03 0301 	mla	r3, r3, r1, r0
 8002d84:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002d88:	b92b      	cbnz	r3, 8002d96 <HAL_HCD_HC_SubmitRequest+0xf4>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d8a:	232c      	movs	r3, #44	; 0x2c
 8002d8c:	fb03 0301 	mla	r3, r3, r1, r0
 8002d90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d94:	e020      	b.n	8002dd8 <HAL_HCD_HC_SubmitRequest+0x136>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002d96:	232c      	movs	r3, #44	; 0x2c
 8002d98:	fb03 0301 	mla	r3, r3, r1, r0
 8002d9c:	2202      	movs	r2, #2
 8002d9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002da2:	e019      	b.n	8002dd8 <HAL_HCD_HC_SubmitRequest+0x136>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002da4:	232c      	movs	r3, #44	; 0x2c
 8002da6:	fb03 0301 	mla	r3, r3, r1, r0
 8002daa:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002dae:	b933      	cbnz	r3, 8002dbe <HAL_HCD_HC_SubmitRequest+0x11c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002db0:	232c      	movs	r3, #44	; 0x2c
 8002db2:	fb03 0301 	mla	r3, r3, r1, r0
 8002db6:	2200      	movs	r2, #0
 8002db8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002dbc:	e00c      	b.n	8002dd8 <HAL_HCD_HC_SubmitRequest+0x136>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002dbe:	232c      	movs	r3, #44	; 0x2c
 8002dc0:	fb03 0301 	mla	r3, r3, r1, r0
 8002dc4:	2202      	movs	r2, #2
 8002dc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002dca:	e005      	b.n	8002dd8 <HAL_HCD_HC_SubmitRequest+0x136>
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002dcc:	232c      	movs	r3, #44	; 0x2c
 8002dce:	fb03 0301 	mla	r3, r3, r1, r0
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002dd8:	232c      	movs	r3, #44	; 0x2c
 8002dda:	fb01 f303 	mul.w	r3, r1, r3
 8002dde:	18c2      	adds	r2, r0, r3
 8002de0:	9c05      	ldr	r4, [sp, #20]
 8002de2:	6454      	str	r4, [r2, #68]	; 0x44
  hhcd->hc[ch_num].xfer_len  = length;
 8002de4:	64d6      	str	r6, [r2, #76]	; 0x4c
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002de6:	2400      	movs	r4, #0
 8002de8:	f882 4060 	strb.w	r4, [r2, #96]	; 0x60
  hhcd->hc[ch_num].xfer_count = 0U;
 8002dec:	6514      	str	r4, [r2, #80]	; 0x50
  hhcd->hc[ch_num].ch_num = ch_num;
 8002dee:	f882 1039 	strb.w	r1, [r2, #57]	; 0x39
  hhcd->hc[ch_num].state = HC_IDLE;
 8002df2:	f882 4061 	strb.w	r4, [r2, #97]	; 0x61
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num]);
 8002df6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8002dfa:	4401      	add	r1, r0
 8002dfc:	6800      	ldr	r0, [r0, #0]
 8002dfe:	f003 fe15 	bl	8006a2c <USB_HC_StartXfer>
}
 8002e02:	bd70      	pop	{r4, r5, r6, pc}

08002e04 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002e04:	b530      	push	{r4, r5, lr}
 8002e06:	b083      	sub	sp, #12
 8002e08:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e0a:	6805      	ldr	r5, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002e0c:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 8002e10:	9301      	str	r3, [sp, #4]
  hprt0_dup = USBx_HPRT0;
 8002e12:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 8002e16:	9300      	str	r3, [sp, #0]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002e18:	9b00      	ldr	r3, [sp, #0]
 8002e1a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002e1e:	9300      	str	r3, [sp, #0]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002e20:	9b01      	ldr	r3, [sp, #4]
 8002e22:	f013 0f02 	tst.w	r3, #2
 8002e26:	d007      	beq.n	8002e38 <HCD_Port_IRQHandler+0x34>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002e28:	9b01      	ldr	r3, [sp, #4]
 8002e2a:	f013 0f01 	tst.w	r3, #1
 8002e2e:	d125      	bne.n	8002e7c <HCD_Port_IRQHandler+0x78>
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002e30:	9b00      	ldr	r3, [sp, #0]
 8002e32:	f043 0302 	orr.w	r3, r3, #2
 8002e36:	9300      	str	r3, [sp, #0]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002e38:	9b01      	ldr	r3, [sp, #4]
 8002e3a:	f013 0f08 	tst.w	r3, #8
 8002e3e:	d010      	beq.n	8002e62 <HCD_Port_IRQHandler+0x5e>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002e40:	9b00      	ldr	r3, [sp, #0]
 8002e42:	f043 0308 	orr.w	r3, r3, #8
 8002e46:	9300      	str	r3, [sp, #0]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002e48:	9b01      	ldr	r3, [sp, #4]
 8002e4a:	f013 0f04 	tst.w	r3, #4
 8002e4e:	d02d      	beq.n	8002eac <HCD_Port_IRQHandler+0xa8>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002e50:	69a3      	ldr	r3, [r4, #24]
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d015      	beq.n	8002e82 <HCD_Port_IRQHandler+0x7e>
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002e56:	68e3      	ldr	r3, [r4, #12]
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d022      	beq.n	8002ea2 <HCD_Port_IRQHandler+0x9e>
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002e5c:	4620      	mov	r0, r4
 8002e5e:	f005 ff5c 	bl	8008d1a <HAL_HCD_PortEnabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002e62:	9b01      	ldr	r3, [sp, #4]
 8002e64:	f013 0f20 	tst.w	r3, #32
 8002e68:	d003      	beq.n	8002e72 <HCD_Port_IRQHandler+0x6e>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002e6a:	9b00      	ldr	r3, [sp, #0]
 8002e6c:	f043 0320 	orr.w	r3, r3, #32
 8002e70:	9300      	str	r3, [sp, #0]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002e72:	9b00      	ldr	r3, [sp, #0]
 8002e74:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
}
 8002e78:	b003      	add	sp, #12
 8002e7a:	bd30      	pop	{r4, r5, pc}
      HAL_HCD_Connect_Callback(hhcd);
 8002e7c:	f005 ff40 	bl	8008d00 <HAL_HCD_Connect_Callback>
 8002e80:	e7d6      	b.n	8002e30 <HCD_Port_IRQHandler+0x2c>
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002e82:	9b01      	ldr	r3, [sp, #4]
 8002e84:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002e88:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e8c:	d004      	beq.n	8002e98 <HCD_Port_IRQHandler+0x94>
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002e8e:	2101      	movs	r1, #1
 8002e90:	6820      	ldr	r0, [r4, #0]
 8002e92:	f003 fccf 	bl	8006834 <USB_InitFSLSPClkSel>
 8002e96:	e7e1      	b.n	8002e5c <HCD_Port_IRQHandler+0x58>
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002e98:	2102      	movs	r1, #2
 8002e9a:	6820      	ldr	r0, [r4, #0]
 8002e9c:	f003 fcca 	bl	8006834 <USB_InitFSLSPClkSel>
 8002ea0:	e7dc      	b.n	8002e5c <HCD_Port_IRQHandler+0x58>
          USBx_HOST->HFIR = 60000U;
 8002ea2:	f64e 2260 	movw	r2, #60000	; 0xea60
 8002ea6:	f8c5 2404 	str.w	r2, [r5, #1028]	; 0x404
 8002eaa:	e7d7      	b.n	8002e5c <HCD_Port_IRQHandler+0x58>
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002eac:	4620      	mov	r0, r4
 8002eae:	f005 ff3a 	bl	8008d26 <HAL_HCD_PortDisabled_Callback>
 8002eb2:	e7d6      	b.n	8002e62 <HCD_Port_IRQHandler+0x5e>

08002eb4 <HCD_HC_IN_IRQHandler>:
{
 8002eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eb6:	4604      	mov	r4, r0
 8002eb8:	460e      	mov	r6, r1
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002eba:	6807      	ldr	r7, [r0, #0]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002ebc:	eb07 1741 	add.w	r7, r7, r1, lsl #5
 8002ec0:	f507 65a0 	add.w	r5, r7, #1280	; 0x500
 8002ec4:	68ab      	ldr	r3, [r5, #8]
 8002ec6:	f013 0f04 	tst.w	r3, #4
 8002eca:	d10a      	bne.n	8002ee2 <HCD_HC_IN_IRQHandler+0x2e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002ecc:	68ab      	ldr	r3, [r5, #8]
 8002ece:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002ed2:	d13e      	bne.n	8002f52 <HCD_HC_IN_IRQHandler+0x9e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002ed4:	68ab      	ldr	r3, [r5, #8]
 8002ed6:	f013 0f20 	tst.w	r3, #32
 8002eda:	d047      	beq.n	8002f6c <HCD_HC_IN_IRQHandler+0xb8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002edc:	2320      	movs	r3, #32
 8002ede:	60ab      	str	r3, [r5, #8]
 8002ee0:	e00a      	b.n	8002ef8 <HCD_HC_IN_IRQHandler+0x44>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002ee2:	2304      	movs	r3, #4
 8002ee4:	60ab      	str	r3, [r5, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002ee6:	232c      	movs	r3, #44	; 0x2c
 8002ee8:	fb03 0301 	mla	r3, r3, r1, r0
 8002eec:	2206      	movs	r2, #6
 8002eee:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ef2:	6800      	ldr	r0, [r0, #0]
 8002ef4:	f003 fe31 	bl	8006b5a <USB_HC_Halt>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002ef8:	68ab      	ldr	r3, [r5, #8]
 8002efa:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002efe:	d166      	bne.n	8002fce <HCD_HC_IN_IRQHandler+0x11a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002f00:	68ab      	ldr	r3, [r5, #8]
 8002f02:	f013 0f01 	tst.w	r3, #1
 8002f06:	f000 8092 	beq.w	800302e <HCD_HC_IN_IRQHandler+0x17a>
    hhcd->hc[ch_num].state = HC_XFRC;
 8002f0a:	232c      	movs	r3, #44	; 0x2c
 8002f0c:	fb03 4306 	mla	r3, r3, r6, r4
 8002f10:	2201      	movs	r2, #1
 8002f12:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002f16:	2100      	movs	r1, #0
 8002f18:	65d9      	str	r1, [r3, #92]	; 0x5c
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002f1a:	60aa      	str	r2, [r5, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002f1c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d05c      	beq.n	8002fde <HCD_HC_IN_IRQHandler+0x12a>
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d05a      	beq.n	8002fde <HCD_HC_IN_IRQHandler+0x12a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002f28:	2b03      	cmp	r3, #3
 8002f2a:	d001      	beq.n	8002f30 <HCD_HC_IN_IRQHandler+0x7c>
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d15c      	bne.n	8002fea <HCD_HC_IN_IRQHandler+0x136>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002f30:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
 8002f34:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002f38:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002f3c:	232c      	movs	r3, #44	; 0x2c
 8002f3e:	fb03 4306 	mla	r3, r3, r6, r4
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002f48:	4631      	mov	r1, r6
 8002f4a:	4620      	mov	r0, r4
 8002f4c:	f005 fee4 	bl	8008d18 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002f50:	e04b      	b.n	8002fea <HCD_HC_IN_IRQHandler+0x136>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002f52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f56:	60ab      	str	r3, [r5, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002f58:	232c      	movs	r3, #44	; 0x2c
 8002f5a:	fb03 0301 	mla	r3, r3, r1, r0
 8002f5e:	2207      	movs	r2, #7
 8002f60:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f64:	6800      	ldr	r0, [r0, #0]
 8002f66:	f003 fdf8 	bl	8006b5a <USB_HC_Halt>
 8002f6a:	e7c5      	b.n	8002ef8 <HCD_HC_IN_IRQHandler+0x44>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002f6c:	68ab      	ldr	r3, [r5, #8]
 8002f6e:	f013 0f08 	tst.w	r3, #8
 8002f72:	d113      	bne.n	8002f9c <HCD_HC_IN_IRQHandler+0xe8>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002f74:	68ab      	ldr	r3, [r5, #8]
 8002f76:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002f7a:	d11b      	bne.n	8002fb4 <HCD_HC_IN_IRQHandler+0x100>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002f7c:	68ab      	ldr	r3, [r5, #8]
 8002f7e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002f82:	d0b9      	beq.n	8002ef8 <HCD_HC_IN_IRQHandler+0x44>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002f84:	2380      	movs	r3, #128	; 0x80
 8002f86:	60ab      	str	r3, [r5, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002f88:	232c      	movs	r3, #44	; 0x2c
 8002f8a:	fb03 0301 	mla	r3, r3, r1, r0
 8002f8e:	2206      	movs	r2, #6
 8002f90:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f94:	6800      	ldr	r0, [r0, #0]
 8002f96:	f003 fde0 	bl	8006b5a <USB_HC_Halt>
 8002f9a:	e7ad      	b.n	8002ef8 <HCD_HC_IN_IRQHandler+0x44>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002f9c:	2308      	movs	r3, #8
 8002f9e:	60ab      	str	r3, [r5, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002fa0:	232c      	movs	r3, #44	; 0x2c
 8002fa2:	fb03 0301 	mla	r3, r3, r1, r0
 8002fa6:	2205      	movs	r2, #5
 8002fa8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fac:	6800      	ldr	r0, [r0, #0]
 8002fae:	f003 fdd4 	bl	8006b5a <USB_HC_Halt>
 8002fb2:	e7a1      	b.n	8002ef8 <HCD_HC_IN_IRQHandler+0x44>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002fb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fb8:	60ab      	str	r3, [r5, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002fba:	232c      	movs	r3, #44	; 0x2c
 8002fbc:	fb03 0301 	mla	r3, r3, r1, r0
 8002fc0:	2208      	movs	r2, #8
 8002fc2:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fc6:	6800      	ldr	r0, [r0, #0]
 8002fc8:	f003 fdc7 	bl	8006b5a <USB_HC_Halt>
 8002fcc:	e794      	b.n	8002ef8 <HCD_HC_IN_IRQHandler+0x44>
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fce:	4631      	mov	r1, r6
 8002fd0:	6820      	ldr	r0, [r4, #0]
 8002fd2:	f003 fdc2 	bl	8006b5a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002fd6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002fda:	60ab      	str	r3, [r5, #8]
}
 8002fdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fde:	4631      	mov	r1, r6
 8002fe0:	6820      	ldr	r0, [r4, #0]
 8002fe2:	f003 fdba 	bl	8006b5a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002fe6:	2310      	movs	r3, #16
 8002fe8:	60ab      	str	r3, [r5, #8]
    if (hhcd->Init.dma_enable == 1U)
 8002fea:	6923      	ldr	r3, [r4, #16]
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d009      	beq.n	8003004 <HCD_HC_IN_IRQHandler+0x150>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002ff0:	212c      	movs	r1, #44	; 0x2c
 8002ff2:	fb01 4406 	mla	r4, r1, r6, r4
 8002ff6:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8002ffa:	f083 0301 	eor.w	r3, r3, #1
 8002ffe:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8003002:	e7eb      	b.n	8002fdc <HCD_HC_IN_IRQHandler+0x128>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003004:	232c      	movs	r3, #44	; 0x2c
 8003006:	fb03 4306 	mla	r3, r3, r6, r4
 800300a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800300c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003010:	fbb2 f3f3 	udiv	r3, r2, r3
 8003014:	f013 0f01 	tst.w	r3, #1
 8003018:	d0e0      	beq.n	8002fdc <HCD_HC_IN_IRQHandler+0x128>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800301a:	232c      	movs	r3, #44	; 0x2c
 800301c:	fb03 4406 	mla	r4, r3, r6, r4
 8003020:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8003024:	f083 0301 	eor.w	r3, r3, #1
 8003028:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 800302c:	e7d6      	b.n	8002fdc <HCD_HC_IN_IRQHandler+0x128>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800302e:	68ab      	ldr	r3, [r5, #8]
 8003030:	f013 0f02 	tst.w	r3, #2
 8003034:	d060      	beq.n	80030f8 <HCD_HC_IN_IRQHandler+0x244>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003036:	232c      	movs	r3, #44	; 0x2c
 8003038:	fb03 4306 	mla	r3, r3, r6, r4
 800303c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8003040:	2b01      	cmp	r3, #1
 8003042:	d013      	beq.n	800306c <HCD_HC_IN_IRQHandler+0x1b8>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003044:	2b05      	cmp	r3, #5
 8003046:	d023      	beq.n	8003090 <HCD_HC_IN_IRQHandler+0x1dc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003048:	2b06      	cmp	r3, #6
 800304a:	d028      	beq.n	800309e <HCD_HC_IN_IRQHandler+0x1ea>
 800304c:	2b08      	cmp	r3, #8
 800304e:	d026      	beq.n	800309e <HCD_HC_IN_IRQHandler+0x1ea>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003050:	2b03      	cmp	r3, #3
 8003052:	d042      	beq.n	80030da <HCD_HC_IN_IRQHandler+0x226>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003054:	2b07      	cmp	r3, #7
 8003056:	d10f      	bne.n	8003078 <HCD_HC_IN_IRQHandler+0x1c4>
      hhcd->hc[ch_num].ErrCnt++;
 8003058:	232c      	movs	r3, #44	; 0x2c
 800305a:	fb03 4306 	mla	r3, r3, r6, r4
 800305e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003060:	3201      	adds	r2, #1
 8003062:	65da      	str	r2, [r3, #92]	; 0x5c
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003064:	2204      	movs	r2, #4
 8003066:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 800306a:	e005      	b.n	8003078 <HCD_HC_IN_IRQHandler+0x1c4>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800306c:	232c      	movs	r3, #44	; 0x2c
 800306e:	fb03 4306 	mla	r3, r3, r6, r4
 8003072:	2201      	movs	r2, #1
 8003074:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003078:	2302      	movs	r3, #2
 800307a:	60ab      	str	r3, [r5, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800307c:	232c      	movs	r3, #44	; 0x2c
 800307e:	fb03 4306 	mla	r3, r3, r6, r4
 8003082:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 8003086:	4631      	mov	r1, r6
 8003088:	4620      	mov	r0, r4
 800308a:	f005 fe45 	bl	8008d18 <HAL_HCD_HC_NotifyURBChange_Callback>
 800308e:	e7a5      	b.n	8002fdc <HCD_HC_IN_IRQHandler+0x128>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003090:	232c      	movs	r3, #44	; 0x2c
 8003092:	fb03 4306 	mla	r3, r3, r6, r4
 8003096:	2205      	movs	r2, #5
 8003098:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 800309c:	e7ec      	b.n	8003078 <HCD_HC_IN_IRQHandler+0x1c4>
      hhcd->hc[ch_num].ErrCnt++;
 800309e:	222c      	movs	r2, #44	; 0x2c
 80030a0:	fb02 4206 	mla	r2, r2, r6, r4
 80030a4:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 80030a6:	3301      	adds	r3, #1
 80030a8:	65d3      	str	r3, [r2, #92]	; 0x5c
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d906      	bls.n	80030bc <HCD_HC_IN_IRQHandler+0x208>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80030ae:	4613      	mov	r3, r2
 80030b0:	2200      	movs	r2, #0
 80030b2:	65da      	str	r2, [r3, #92]	; 0x5c
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80030b4:	2204      	movs	r2, #4
 80030b6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 80030ba:	e7dd      	b.n	8003078 <HCD_HC_IN_IRQHandler+0x1c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80030bc:	232c      	movs	r3, #44	; 0x2c
 80030be:	fb03 4306 	mla	r3, r3, r6, r4
 80030c2:	2202      	movs	r2, #2
 80030c4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80030c8:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80030cc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80030d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80030d4:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
 80030d8:	e7ce      	b.n	8003078 <HCD_HC_IN_IRQHandler+0x1c4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80030da:	232c      	movs	r3, #44	; 0x2c
 80030dc:	fb03 4306 	mla	r3, r3, r6, r4
 80030e0:	2202      	movs	r2, #2
 80030e2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80030e6:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80030ea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80030ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80030f2:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
 80030f6:	e7bf      	b.n	8003078 <HCD_HC_IN_IRQHandler+0x1c4>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80030f8:	68ab      	ldr	r3, [r5, #8]
 80030fa:	f013 0f10 	tst.w	r3, #16
 80030fe:	f43f af6d 	beq.w	8002fdc <HCD_HC_IN_IRQHandler+0x128>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003102:	232c      	movs	r3, #44	; 0x2c
 8003104:	fb03 4306 	mla	r3, r3, r6, r4
 8003108:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800310c:	2b03      	cmp	r3, #3
 800310e:	d011      	beq.n	8003134 <HCD_HC_IN_IRQHandler+0x280>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003110:	b10b      	cbz	r3, 8003116 <HCD_HC_IN_IRQHandler+0x262>
 8003112:	2b02      	cmp	r3, #2
 8003114:	d10b      	bne.n	800312e <HCD_HC_IN_IRQHandler+0x27a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003116:	232c      	movs	r3, #44	; 0x2c
 8003118:	fb03 4306 	mla	r3, r3, r6, r4
 800311c:	2200      	movs	r2, #0
 800311e:	65da      	str	r2, [r3, #92]	; 0x5c
      hhcd->hc[ch_num].state = HC_NAK;
 8003120:	2203      	movs	r2, #3
 8003122:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003126:	4631      	mov	r1, r6
 8003128:	6820      	ldr	r0, [r4, #0]
 800312a:	f003 fd16 	bl	8006b5a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800312e:	2310      	movs	r3, #16
 8003130:	60ab      	str	r3, [r5, #8]
}
 8003132:	e753      	b.n	8002fdc <HCD_HC_IN_IRQHandler+0x128>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003134:	232c      	movs	r3, #44	; 0x2c
 8003136:	fb03 4306 	mla	r3, r3, r6, r4
 800313a:	2200      	movs	r2, #0
 800313c:	65da      	str	r2, [r3, #92]	; 0x5c
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800313e:	4631      	mov	r1, r6
 8003140:	6820      	ldr	r0, [r4, #0]
 8003142:	f003 fd0a 	bl	8006b5a <USB_HC_Halt>
 8003146:	e7f2      	b.n	800312e <HCD_HC_IN_IRQHandler+0x27a>

08003148 <HCD_HC_OUT_IRQHandler>:
{
 8003148:	b538      	push	{r3, r4, r5, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800314a:	6803      	ldr	r3, [r0, #0]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800314c:	eb03 1241 	add.w	r2, r3, r1, lsl #5
 8003150:	f502 65a0 	add.w	r5, r2, #1280	; 0x500
 8003154:	68ac      	ldr	r4, [r5, #8]
 8003156:	f014 0f04 	tst.w	r4, #4
 800315a:	d119      	bne.n	8003190 <HCD_HC_OUT_IRQHandler+0x48>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800315c:	68ac      	ldr	r4, [r5, #8]
 800315e:	f014 0f20 	tst.w	r4, #32
 8003162:	d021      	beq.n	80031a8 <HCD_HC_OUT_IRQHandler+0x60>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003164:	2320      	movs	r3, #32
 8003166:	60ab      	str	r3, [r5, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003168:	232c      	movs	r3, #44	; 0x2c
 800316a:	fb03 0301 	mla	r3, r3, r1, r0
 800316e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003172:	2b01      	cmp	r3, #1
 8003174:	d117      	bne.n	80031a6 <HCD_HC_OUT_IRQHandler+0x5e>
      hhcd->hc[ch_num].do_ping = 0U;
 8003176:	232c      	movs	r3, #44	; 0x2c
 8003178:	fb03 0301 	mla	r3, r3, r1, r0
 800317c:	2200      	movs	r2, #0
 800317e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003182:	2202      	movs	r2, #2
 8003184:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003188:	6800      	ldr	r0, [r0, #0]
 800318a:	f003 fce6 	bl	8006b5a <USB_HC_Halt>
 800318e:	e00a      	b.n	80031a6 <HCD_HC_OUT_IRQHandler+0x5e>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003190:	2304      	movs	r3, #4
 8003192:	60ab      	str	r3, [r5, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003194:	232c      	movs	r3, #44	; 0x2c
 8003196:	fb03 0301 	mla	r3, r3, r1, r0
 800319a:	2206      	movs	r2, #6
 800319c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031a0:	6800      	ldr	r0, [r0, #0]
 80031a2:	f003 fcda 	bl	8006b5a <USB_HC_Halt>
}
 80031a6:	bd38      	pop	{r3, r4, r5, pc}
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80031a8:	68ac      	ldr	r4, [r5, #8]
 80031aa:	f414 7f00 	tst.w	r4, #512	; 0x200
 80031ae:	d11f      	bne.n	80031f0 <HCD_HC_OUT_IRQHandler+0xa8>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80031b0:	68ac      	ldr	r4, [r5, #8]
 80031b2:	f014 0f01 	tst.w	r4, #1
 80031b6:	d022      	beq.n	80031fe <HCD_HC_OUT_IRQHandler+0xb6>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80031b8:	232c      	movs	r3, #44	; 0x2c
 80031ba:	fb03 0301 	mla	r3, r3, r1, r0
 80031be:	2200      	movs	r2, #0
 80031c0:	65da      	str	r2, [r3, #92]	; 0x5c
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80031c2:	68ab      	ldr	r3, [r5, #8]
 80031c4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80031c8:	d007      	beq.n	80031da <HCD_HC_OUT_IRQHandler+0x92>
      hhcd->hc[ch_num].do_ping = 1U;
 80031ca:	232c      	movs	r3, #44	; 0x2c
 80031cc:	fb03 0301 	mla	r3, r3, r1, r0
 80031d0:	2201      	movs	r2, #1
 80031d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80031d6:	2340      	movs	r3, #64	; 0x40
 80031d8:	60ab      	str	r3, [r5, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80031da:	2201      	movs	r2, #1
 80031dc:	60aa      	str	r2, [r5, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80031de:	232c      	movs	r3, #44	; 0x2c
 80031e0:	fb03 0301 	mla	r3, r3, r1, r0
 80031e4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031e8:	6800      	ldr	r0, [r0, #0]
 80031ea:	f003 fcb6 	bl	8006b5a <USB_HC_Halt>
 80031ee:	e7da      	b.n	80031a6 <HCD_HC_OUT_IRQHandler+0x5e>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80031f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031f4:	60ab      	str	r3, [r5, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031f6:	6800      	ldr	r0, [r0, #0]
 80031f8:	f003 fcaf 	bl	8006b5a <USB_HC_Halt>
 80031fc:	e7d3      	b.n	80031a6 <HCD_HC_OUT_IRQHandler+0x5e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80031fe:	68ac      	ldr	r4, [r5, #8]
 8003200:	f014 0f40 	tst.w	r4, #64	; 0x40
 8003204:	d137      	bne.n	8003276 <HCD_HC_OUT_IRQHandler+0x12e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003206:	68ac      	ldr	r4, [r5, #8]
 8003208:	f014 0f08 	tst.w	r4, #8
 800320c:	d144      	bne.n	8003298 <HCD_HC_OUT_IRQHandler+0x150>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800320e:	68ac      	ldr	r4, [r5, #8]
 8003210:	f014 0f10 	tst.w	r4, #16
 8003214:	d14c      	bne.n	80032b0 <HCD_HC_OUT_IRQHandler+0x168>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003216:	68ac      	ldr	r4, [r5, #8]
 8003218:	f014 0f80 	tst.w	r4, #128	; 0x80
 800321c:	d156      	bne.n	80032cc <HCD_HC_OUT_IRQHandler+0x184>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800321e:	68ac      	ldr	r4, [r5, #8]
 8003220:	f414 6f80 	tst.w	r4, #1024	; 0x400
 8003224:	d15e      	bne.n	80032e4 <HCD_HC_OUT_IRQHandler+0x19c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003226:	68ab      	ldr	r3, [r5, #8]
 8003228:	f013 0f02 	tst.w	r3, #2
 800322c:	d0bb      	beq.n	80031a6 <HCD_HC_OUT_IRQHandler+0x5e>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800322e:	232c      	movs	r3, #44	; 0x2c
 8003230:	fb03 0301 	mla	r3, r3, r1, r0
 8003234:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8003238:	2b01      	cmp	r3, #1
 800323a:	d060      	beq.n	80032fe <HCD_HC_OUT_IRQHandler+0x1b6>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800323c:	2b03      	cmp	r3, #3
 800323e:	f000 8092 	beq.w	8003366 <HCD_HC_OUT_IRQHandler+0x21e>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003242:	2b04      	cmp	r3, #4
 8003244:	f000 809f 	beq.w	8003386 <HCD_HC_OUT_IRQHandler+0x23e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003248:	2b05      	cmp	r3, #5
 800324a:	f000 80a3 	beq.w	8003394 <HCD_HC_OUT_IRQHandler+0x24c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800324e:	2b06      	cmp	r3, #6
 8003250:	d002      	beq.n	8003258 <HCD_HC_OUT_IRQHandler+0x110>
 8003252:	2b08      	cmp	r3, #8
 8003254:	f040 808d 	bne.w	8003372 <HCD_HC_OUT_IRQHandler+0x22a>
      hhcd->hc[ch_num].ErrCnt++;
 8003258:	242c      	movs	r4, #44	; 0x2c
 800325a:	fb04 0401 	mla	r4, r4, r1, r0
 800325e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003260:	3301      	adds	r3, #1
 8003262:	65e3      	str	r3, [r4, #92]	; 0x5c
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003264:	2b02      	cmp	r3, #2
 8003266:	f240 809c 	bls.w	80033a2 <HCD_HC_OUT_IRQHandler+0x25a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800326a:	2200      	movs	r2, #0
 800326c:	65e2      	str	r2, [r4, #92]	; 0x5c
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800326e:	2204      	movs	r2, #4
 8003270:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
 8003274:	e07d      	b.n	8003372 <HCD_HC_OUT_IRQHandler+0x22a>
    hhcd->hc[ch_num].state = HC_NYET;
 8003276:	222c      	movs	r2, #44	; 0x2c
 8003278:	fb02 0001 	mla	r0, r2, r1, r0
 800327c:	2204      	movs	r2, #4
 800327e:	f880 2061 	strb.w	r2, [r0, #97]	; 0x61
    hhcd->hc[ch_num].do_ping = 1U;
 8003282:	2201      	movs	r2, #1
 8003284:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003288:	2200      	movs	r2, #0
 800328a:	65c2      	str	r2, [r0, #92]	; 0x5c
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800328c:	4618      	mov	r0, r3
 800328e:	f003 fc64 	bl	8006b5a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003292:	2340      	movs	r3, #64	; 0x40
 8003294:	60ab      	str	r3, [r5, #8]
 8003296:	e786      	b.n	80031a6 <HCD_HC_OUT_IRQHandler+0x5e>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003298:	2308      	movs	r3, #8
 800329a:	60ab      	str	r3, [r5, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800329c:	232c      	movs	r3, #44	; 0x2c
 800329e:	fb03 0301 	mla	r3, r3, r1, r0
 80032a2:	2205      	movs	r2, #5
 80032a4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032a8:	6800      	ldr	r0, [r0, #0]
 80032aa:	f003 fc56 	bl	8006b5a <USB_HC_Halt>
 80032ae:	e77a      	b.n	80031a6 <HCD_HC_OUT_IRQHandler+0x5e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80032b0:	222c      	movs	r2, #44	; 0x2c
 80032b2:	fb02 0001 	mla	r0, r2, r1, r0
 80032b6:	2200      	movs	r2, #0
 80032b8:	65c2      	str	r2, [r0, #92]	; 0x5c
    hhcd->hc[ch_num].state = HC_NAK;
 80032ba:	2203      	movs	r2, #3
 80032bc:	f880 2061 	strb.w	r2, [r0, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032c0:	4618      	mov	r0, r3
 80032c2:	f003 fc4a 	bl	8006b5a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80032c6:	2310      	movs	r3, #16
 80032c8:	60ab      	str	r3, [r5, #8]
 80032ca:	e76c      	b.n	80031a6 <HCD_HC_OUT_IRQHandler+0x5e>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80032cc:	222c      	movs	r2, #44	; 0x2c
 80032ce:	fb02 0201 	mla	r2, r2, r1, r0
 80032d2:	2006      	movs	r0, #6
 80032d4:	f882 0061 	strb.w	r0, [r2, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032d8:	4618      	mov	r0, r3
 80032da:	f003 fc3e 	bl	8006b5a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80032de:	2380      	movs	r3, #128	; 0x80
 80032e0:	60ab      	str	r3, [r5, #8]
 80032e2:	e760      	b.n	80031a6 <HCD_HC_OUT_IRQHandler+0x5e>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80032e4:	222c      	movs	r2, #44	; 0x2c
 80032e6:	fb02 0201 	mla	r2, r2, r1, r0
 80032ea:	2008      	movs	r0, #8
 80032ec:	f882 0061 	strb.w	r0, [r2, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032f0:	4618      	mov	r0, r3
 80032f2:	f003 fc32 	bl	8006b5a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80032f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032fa:	60ab      	str	r3, [r5, #8]
 80032fc:	e753      	b.n	80031a6 <HCD_HC_OUT_IRQHandler+0x5e>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80032fe:	232c      	movs	r3, #44	; 0x2c
 8003300:	fb03 0301 	mla	r3, r3, r1, r0
 8003304:	2201      	movs	r2, #1
 8003306:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800330a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800330e:	3b02      	subs	r3, #2
 8003310:	b2db      	uxtb	r3, r3
 8003312:	4293      	cmp	r3, r2
 8003314:	d82d      	bhi.n	8003372 <HCD_HC_OUT_IRQHandler+0x22a>
        if (hhcd->Init.dma_enable == 0U)
 8003316:	6904      	ldr	r4, [r0, #16]
 8003318:	b944      	cbnz	r4, 800332c <HCD_HC_OUT_IRQHandler+0x1e4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800331a:	232c      	movs	r3, #44	; 0x2c
 800331c:	fb03 0301 	mla	r3, r3, r1, r0
 8003320:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 8003324:	f082 0201 	eor.w	r2, r2, #1
 8003328:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800332c:	2c01      	cmp	r4, #1
 800332e:	d120      	bne.n	8003372 <HCD_HC_OUT_IRQHandler+0x22a>
 8003330:	232c      	movs	r3, #44	; 0x2c
 8003332:	fb03 0301 	mla	r3, r3, r1, r0
 8003336:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003338:	b1db      	cbz	r3, 8003372 <HCD_HC_OUT_IRQHandler+0x22a>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800333a:	222c      	movs	r2, #44	; 0x2c
 800333c:	fb02 0201 	mla	r2, r2, r1, r0
 8003340:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8003344:	4413      	add	r3, r2
 8003346:	3b01      	subs	r3, #1
 8003348:	fbb3 f3f2 	udiv	r3, r3, r2
          if ((num_packets & 1U) != 0U)
 800334c:	f013 0f01 	tst.w	r3, #1
 8003350:	d00f      	beq.n	8003372 <HCD_HC_OUT_IRQHandler+0x22a>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003352:	232c      	movs	r3, #44	; 0x2c
 8003354:	fb03 0301 	mla	r3, r3, r1, r0
 8003358:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 800335c:	f082 0201 	eor.w	r2, r2, #1
 8003360:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 8003364:	e005      	b.n	8003372 <HCD_HC_OUT_IRQHandler+0x22a>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003366:	232c      	movs	r3, #44	; 0x2c
 8003368:	fb03 0301 	mla	r3, r3, r1, r0
 800336c:	2202      	movs	r2, #2
 800336e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003372:	2302      	movs	r3, #2
 8003374:	60ab      	str	r3, [r5, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003376:	232c      	movs	r3, #44	; 0x2c
 8003378:	fb03 0301 	mla	r3, r3, r1, r0
 800337c:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 8003380:	f005 fcca 	bl	8008d18 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003384:	e70f      	b.n	80031a6 <HCD_HC_OUT_IRQHandler+0x5e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003386:	232c      	movs	r3, #44	; 0x2c
 8003388:	fb03 0301 	mla	r3, r3, r1, r0
 800338c:	2202      	movs	r2, #2
 800338e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8003392:	e7ee      	b.n	8003372 <HCD_HC_OUT_IRQHandler+0x22a>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003394:	232c      	movs	r3, #44	; 0x2c
 8003396:	fb03 0301 	mla	r3, r3, r1, r0
 800339a:	2205      	movs	r2, #5
 800339c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 80033a0:	e7e7      	b.n	8003372 <HCD_HC_OUT_IRQHandler+0x22a>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80033a2:	232c      	movs	r3, #44	; 0x2c
 80033a4:	fb03 0301 	mla	r3, r3, r1, r0
 80033a8:	2402      	movs	r4, #2
 80033aa:	f883 4060 	strb.w	r4, [r3, #96]	; 0x60
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80033ae:	f8d2 3500 	ldr.w	r3, [r2, #1280]	; 0x500
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80033b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80033b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80033ba:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
 80033be:	e7d8      	b.n	8003372 <HCD_HC_OUT_IRQHandler+0x22a>

080033c0 <HAL_HCD_IRQHandler>:
{
 80033c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033c2:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80033c4:	6805      	ldr	r5, [r0, #0]
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80033c6:	4628      	mov	r0, r5
 80033c8:	f003 f9af 	bl	800672a <USB_GetMode>
 80033cc:	2801      	cmp	r0, #1
 80033ce:	d000      	beq.n	80033d2 <HAL_HCD_IRQHandler+0x12>
}
 80033d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80033d2:	6820      	ldr	r0, [r4, #0]
 80033d4:	f003 f9a5 	bl	8006722 <USB_ReadInterrupts>
 80033d8:	2800      	cmp	r0, #0
 80033da:	d0f9      	beq.n	80033d0 <HAL_HCD_IRQHandler+0x10>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80033dc:	6820      	ldr	r0, [r4, #0]
 80033de:	f003 f9a0 	bl	8006722 <USB_ReadInterrupts>
 80033e2:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 80033e6:	d003      	beq.n	80033f0 <HAL_HCD_IRQHandler+0x30>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80033e8:	6823      	ldr	r3, [r4, #0]
 80033ea:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80033ee:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80033f0:	6820      	ldr	r0, [r4, #0]
 80033f2:	f003 f996 	bl	8006722 <USB_ReadInterrupts>
 80033f6:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 80033fa:	d003      	beq.n	8003404 <HAL_HCD_IRQHandler+0x44>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80033fc:	6823      	ldr	r3, [r4, #0]
 80033fe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003402:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003404:	6820      	ldr	r0, [r4, #0]
 8003406:	f003 f98c 	bl	8006722 <USB_ReadInterrupts>
 800340a:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 800340e:	d003      	beq.n	8003418 <HAL_HCD_IRQHandler+0x58>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003410:	6823      	ldr	r3, [r4, #0]
 8003412:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003416:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003418:	6820      	ldr	r0, [r4, #0]
 800341a:	f003 f982 	bl	8006722 <USB_ReadInterrupts>
 800341e:	f010 0f02 	tst.w	r0, #2
 8003422:	d002      	beq.n	800342a <HAL_HCD_IRQHandler+0x6a>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003424:	6823      	ldr	r3, [r4, #0]
 8003426:	2202      	movs	r2, #2
 8003428:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800342a:	6820      	ldr	r0, [r4, #0]
 800342c:	f003 f979 	bl	8006722 <USB_ReadInterrupts>
 8003430:	f010 5f00 	tst.w	r0, #536870912	; 0x20000000
 8003434:	d008      	beq.n	8003448 <HAL_HCD_IRQHandler+0x88>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003436:	6823      	ldr	r3, [r4, #0]
 8003438:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800343c:	615a      	str	r2, [r3, #20]
      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800343e:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 8003442:	f013 0f01 	tst.w	r3, #1
 8003446:	d01d      	beq.n	8003484 <HAL_HCD_IRQHandler+0xc4>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003448:	6820      	ldr	r0, [r4, #0]
 800344a:	f003 f96a 	bl	8006722 <USB_ReadInterrupts>
 800344e:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 8003452:	d126      	bne.n	80034a2 <HAL_HCD_IRQHandler+0xe2>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003454:	6820      	ldr	r0, [r4, #0]
 8003456:	f003 f964 	bl	8006722 <USB_ReadInterrupts>
 800345a:	f010 0f08 	tst.w	r0, #8
 800345e:	d124      	bne.n	80034aa <HAL_HCD_IRQHandler+0xea>
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003460:	6820      	ldr	r0, [r4, #0]
 8003462:	f003 f95e 	bl	8006722 <USB_ReadInterrupts>
 8003466:	f010 0f10 	tst.w	r0, #16
 800346a:	d125      	bne.n	80034b8 <HAL_HCD_IRQHandler+0xf8>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800346c:	6820      	ldr	r0, [r4, #0]
 800346e:	f003 f958 	bl	8006722 <USB_ReadInterrupts>
 8003472:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8003476:	d0ab      	beq.n	80033d0 <HAL_HCD_IRQHandler+0x10>
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003478:	6820      	ldr	r0, [r4, #0]
 800347a:	f003 fb69 	bl	8006b50 <USB_HC_ReadInterrupt>
 800347e:	4607      	mov	r7, r0
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003480:	2600      	movs	r6, #0
 8003482:	e02c      	b.n	80034de <HAL_HCD_IRQHandler+0x11e>
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003484:	2110      	movs	r1, #16
 8003486:	4628      	mov	r0, r5
 8003488:	f003 f8be 	bl	8006608 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800348c:	4628      	mov	r0, r5
 800348e:	f003 f8e3 	bl	8006658 <USB_FlushRxFifo>
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003492:	2101      	movs	r1, #1
 8003494:	6820      	ldr	r0, [r4, #0]
 8003496:	f003 f9cd 	bl	8006834 <USB_InitFSLSPClkSel>
        HAL_HCD_Disconnect_Callback(hhcd);
 800349a:	4620      	mov	r0, r4
 800349c:	f005 fc36 	bl	8008d0c <HAL_HCD_Disconnect_Callback>
 80034a0:	e7d2      	b.n	8003448 <HAL_HCD_IRQHandler+0x88>
      HCD_Port_IRQHandler(hhcd);
 80034a2:	4620      	mov	r0, r4
 80034a4:	f7ff fcae 	bl	8002e04 <HCD_Port_IRQHandler>
 80034a8:	e7d4      	b.n	8003454 <HAL_HCD_IRQHandler+0x94>
      HAL_HCD_SOF_Callback(hhcd);
 80034aa:	4620      	mov	r0, r4
 80034ac:	f005 fc22 	bl	8008cf4 <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80034b0:	6823      	ldr	r3, [r4, #0]
 80034b2:	2208      	movs	r2, #8
 80034b4:	615a      	str	r2, [r3, #20]
 80034b6:	e7d3      	b.n	8003460 <HAL_HCD_IRQHandler+0xa0>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80034b8:	6822      	ldr	r2, [r4, #0]
 80034ba:	6993      	ldr	r3, [r2, #24]
 80034bc:	f023 0310 	bic.w	r3, r3, #16
 80034c0:	6193      	str	r3, [r2, #24]
      HCD_RXQLVL_IRQHandler(hhcd);
 80034c2:	4620      	mov	r0, r4
 80034c4:	f7ff faf3 	bl	8002aae <HCD_RXQLVL_IRQHandler>
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80034c8:	6822      	ldr	r2, [r4, #0]
 80034ca:	6993      	ldr	r3, [r2, #24]
 80034cc:	f043 0310 	orr.w	r3, r3, #16
 80034d0:	6193      	str	r3, [r2, #24]
 80034d2:	e7cb      	b.n	800346c <HAL_HCD_IRQHandler+0xac>
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80034d4:	b2f1      	uxtb	r1, r6
 80034d6:	4620      	mov	r0, r4
 80034d8:	f7ff fe36 	bl	8003148 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80034dc:	3601      	adds	r6, #1
 80034de:	68a3      	ldr	r3, [r4, #8]
 80034e0:	42b3      	cmp	r3, r6
 80034e2:	d912      	bls.n	800350a <HAL_HCD_IRQHandler+0x14a>
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80034e4:	f006 030f 	and.w	r3, r6, #15
 80034e8:	fa27 f303 	lsr.w	r3, r7, r3
 80034ec:	f013 0f01 	tst.w	r3, #1
 80034f0:	d0f4      	beq.n	80034dc <HAL_HCD_IRQHandler+0x11c>
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80034f2:	eb05 1346 	add.w	r3, r5, r6, lsl #5
 80034f6:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 80034fa:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80034fe:	d0e9      	beq.n	80034d4 <HAL_HCD_IRQHandler+0x114>
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003500:	b2f1      	uxtb	r1, r6
 8003502:	4620      	mov	r0, r4
 8003504:	f7ff fcd6 	bl	8002eb4 <HCD_HC_IN_IRQHandler>
 8003508:	e7e8      	b.n	80034dc <HAL_HCD_IRQHandler+0x11c>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800350a:	6823      	ldr	r3, [r4, #0]
 800350c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003510:	615a      	str	r2, [r3, #20]
 8003512:	e75d      	b.n	80033d0 <HAL_HCD_IRQHandler+0x10>

08003514 <HAL_HCD_Start>:
  __HAL_LOCK(hhcd);
 8003514:	f890 32f8 	ldrb.w	r3, [r0, #760]	; 0x2f8
 8003518:	2b01      	cmp	r3, #1
 800351a:	d00e      	beq.n	800353a <HAL_HCD_Start+0x26>
{
 800351c:	b510      	push	{r4, lr}
 800351e:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8003520:	2101      	movs	r1, #1
 8003522:	f880 12f8 	strb.w	r1, [r0, #760]	; 0x2f8
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003526:	6800      	ldr	r0, [r0, #0]
 8003528:	f003 f9c2 	bl	80068b0 <USB_DriveVbus>
  __HAL_HCD_ENABLE(hhcd);
 800352c:	6820      	ldr	r0, [r4, #0]
 800352e:	f003 f85f 	bl	80065f0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003532:	2000      	movs	r0, #0
 8003534:	f884 02f8 	strb.w	r0, [r4, #760]	; 0x2f8
}
 8003538:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 800353a:	2002      	movs	r0, #2
}
 800353c:	4770      	bx	lr

0800353e <HAL_HCD_Stop>:
  __HAL_LOCK(hhcd);
 800353e:	f890 32f8 	ldrb.w	r3, [r0, #760]	; 0x2f8
 8003542:	2b01      	cmp	r3, #1
 8003544:	d00b      	beq.n	800355e <HAL_HCD_Stop+0x20>
{
 8003546:	b510      	push	{r4, lr}
 8003548:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 800354a:	2301      	movs	r3, #1
 800354c:	f880 32f8 	strb.w	r3, [r0, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8003550:	6800      	ldr	r0, [r0, #0]
 8003552:	f003 fb75 	bl	8006c40 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003556:	2000      	movs	r0, #0
 8003558:	f884 02f8 	strb.w	r0, [r4, #760]	; 0x2f8
}
 800355c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 800355e:	2002      	movs	r0, #2
}
 8003560:	4770      	bx	lr

08003562 <HAL_HCD_ResetPort>:
{
 8003562:	b508      	push	{r3, lr}
  return (USB_ResetPort(hhcd->Instance));
 8003564:	6800      	ldr	r0, [r0, #0]
 8003566:	f003 f984 	bl	8006872 <USB_ResetPort>
}
 800356a:	bd08      	pop	{r3, pc}

0800356c <HAL_HCD_HC_GetURBState>:
  return hhcd->hc[chnum].urb_state;
 800356c:	232c      	movs	r3, #44	; 0x2c
 800356e:	fb03 0001 	mla	r0, r3, r1, r0
}
 8003572:	f890 0060 	ldrb.w	r0, [r0, #96]	; 0x60
 8003576:	4770      	bx	lr

08003578 <HAL_HCD_HC_GetXferCount>:
  return hhcd->hc[chnum].xfer_count;
 8003578:	232c      	movs	r3, #44	; 0x2c
 800357a:	fb03 0001 	mla	r0, r3, r1, r0
}
 800357e:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8003580:	4770      	bx	lr

08003582 <HAL_HCD_GetCurrentFrame>:
{
 8003582:	b508      	push	{r3, lr}
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003584:	6800      	ldr	r0, [r0, #0]
 8003586:	f003 f9c1 	bl	800690c <USB_GetCurrentFrame>
}
 800358a:	bd08      	pop	{r3, pc}

0800358c <HAL_HCD_GetCurrentSpeed>:
{
 800358c:	b508      	push	{r3, lr}
  return (USB_GetHostSpeed(hhcd->Instance));
 800358e:	6800      	ldr	r0, [r0, #0]
 8003590:	f003 f9b1 	bl	80068f6 <USB_GetHostSpeed>
}
 8003594:	bd08      	pop	{r3, pc}

08003596 <HAL_I2C_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003596:	2800      	cmp	r0, #0
 8003598:	d059      	beq.n	800364e <HAL_I2C_Init+0xb8>
{
 800359a:	b510      	push	{r4, lr}
 800359c:	4604      	mov	r4, r0
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800359e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d043      	beq.n	800362e <HAL_I2C_Init+0x98>
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035a6:	2324      	movs	r3, #36	; 0x24
 80035a8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035ac:	6822      	ldr	r2, [r4, #0]
 80035ae:	6813      	ldr	r3, [r2, #0]
 80035b0:	f023 0301 	bic.w	r3, r3, #1
 80035b4:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80035b6:	6863      	ldr	r3, [r4, #4]
 80035b8:	6822      	ldr	r2, [r4, #0]
 80035ba:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80035be:	6113      	str	r3, [r2, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80035c0:	6822      	ldr	r2, [r4, #0]
 80035c2:	6893      	ldr	r3, [r2, #8]
 80035c4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80035c8:	6093      	str	r3, [r2, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80035ca:	68e3      	ldr	r3, [r4, #12]
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d033      	beq.n	8003638 <HAL_I2C_Init+0xa2>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80035d0:	68a3      	ldr	r3, [r4, #8]
 80035d2:	6822      	ldr	r2, [r4, #0]
 80035d4:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 80035d8:	6093      	str	r3, [r2, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80035da:	68e3      	ldr	r3, [r4, #12]
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d031      	beq.n	8003644 <HAL_I2C_Init+0xae>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80035e0:	6822      	ldr	r2, [r4, #0]
 80035e2:	6853      	ldr	r3, [r2, #4]
 80035e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80035e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035ec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80035ee:	6822      	ldr	r2, [r4, #0]
 80035f0:	68d3      	ldr	r3, [r2, #12]
 80035f2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80035f6:	60d3      	str	r3, [r2, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80035f8:	6923      	ldr	r3, [r4, #16]
 80035fa:	6962      	ldr	r2, [r4, #20]
 80035fc:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80035fe:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003600:	6822      	ldr	r2, [r4, #0]
 8003602:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003606:	60d3      	str	r3, [r2, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003608:	69e3      	ldr	r3, [r4, #28]
 800360a:	6a21      	ldr	r1, [r4, #32]
 800360c:	6822      	ldr	r2, [r4, #0]
 800360e:	430b      	orrs	r3, r1
 8003610:	6013      	str	r3, [r2, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003612:	6822      	ldr	r2, [r4, #0]
 8003614:	6813      	ldr	r3, [r2, #0]
 8003616:	f043 0301 	orr.w	r3, r3, #1
 800361a:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800361c:	2000      	movs	r0, #0
 800361e:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003620:	2320      	movs	r3, #32
 8003622:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003626:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003628:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42

  return HAL_OK;
}
 800362c:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800362e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8003632:	f7fd fe7f 	bl	8001334 <HAL_I2C_MspInit>
 8003636:	e7b6      	b.n	80035a6 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003638:	68a3      	ldr	r3, [r4, #8]
 800363a:	6822      	ldr	r2, [r4, #0]
 800363c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003640:	6093      	str	r3, [r2, #8]
 8003642:	e7ca      	b.n	80035da <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003644:	6823      	ldr	r3, [r4, #0]
 8003646:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800364a:	605a      	str	r2, [r3, #4]
 800364c:	e7c8      	b.n	80035e0 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 800364e:	2001      	movs	r0, #1
}
 8003650:	4770      	bx	lr

08003652 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003652:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003656:	b2db      	uxtb	r3, r3
 8003658:	2b20      	cmp	r3, #32
 800365a:	d124      	bne.n	80036a6 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800365c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003660:	2b01      	cmp	r3, #1
 8003662:	d022      	beq.n	80036aa <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8003664:	2301      	movs	r3, #1
 8003666:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800366a:	2324      	movs	r3, #36	; 0x24
 800366c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003670:	6802      	ldr	r2, [r0, #0]
 8003672:	6813      	ldr	r3, [r2, #0]
 8003674:	f023 0301 	bic.w	r3, r3, #1
 8003678:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800367a:	6802      	ldr	r2, [r0, #0]
 800367c:	6813      	ldr	r3, [r2, #0]
 800367e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003682:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003684:	6802      	ldr	r2, [r0, #0]
 8003686:	6813      	ldr	r3, [r2, #0]
 8003688:	4319      	orrs	r1, r3
 800368a:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 800368c:	6802      	ldr	r2, [r0, #0]
 800368e:	6813      	ldr	r3, [r2, #0]
 8003690:	f043 0301 	orr.w	r3, r3, #1
 8003694:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003696:	2320      	movs	r3, #32
 8003698:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800369c:	2300      	movs	r3, #0
 800369e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80036a2:	4618      	mov	r0, r3
 80036a4:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 80036a6:	2002      	movs	r0, #2
 80036a8:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80036aa:	2002      	movs	r0, #2
  }
}
 80036ac:	4770      	bx	lr

080036ae <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036ae:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	2b20      	cmp	r3, #32
 80036b6:	d122      	bne.n	80036fe <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036b8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d020      	beq.n	8003702 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 80036c0:	2301      	movs	r3, #1
 80036c2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036c6:	2324      	movs	r3, #36	; 0x24
 80036c8:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036cc:	6802      	ldr	r2, [r0, #0]
 80036ce:	6813      	ldr	r3, [r2, #0]
 80036d0:	f023 0301 	bic.w	r3, r3, #1
 80036d4:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80036d6:	6802      	ldr	r2, [r0, #0]
 80036d8:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80036da:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80036de:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80036e2:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 80036e4:	6802      	ldr	r2, [r0, #0]
 80036e6:	6813      	ldr	r3, [r2, #0]
 80036e8:	f043 0301 	orr.w	r3, r3, #1
 80036ec:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036ee:	2320      	movs	r3, #32
 80036f0:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036f4:	2300      	movs	r3, #0
 80036f6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80036fa:	4618      	mov	r0, r3
 80036fc:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 80036fe:	2002      	movs	r0, #2
 8003700:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8003702:	2002      	movs	r0, #2
  }
}
 8003704:	4770      	bx	lr
	...

08003708 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 8003708:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 800370a:	6802      	ldr	r2, [r0, #0]
 800370c:	6813      	ldr	r3, [r2, #0]
 800370e:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8003712:	6013      	str	r3, [r2, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 8003714:	6883      	ldr	r3, [r0, #8]
 8003716:	b933      	cbnz	r3, 8003726 <OSPI_ConfigCmd+0x1e>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 8003718:	6802      	ldr	r2, [r0, #0]
 800371a:	6813      	ldr	r3, [r2, #0]
 800371c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003720:	684c      	ldr	r4, [r1, #4]
 8003722:	4323      	orrs	r3, r4
 8003724:	6013      	str	r3, [r2, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8003726:	680b      	ldr	r3, [r1, #0]
 8003728:	2b02      	cmp	r3, #2
 800372a:	d04b      	beq.n	80037c4 <OSPI_ConfigCmd+0xbc>
    ir_reg  = &(hospi->Instance->WIR);
    abr_reg = &(hospi->Instance->WABR);
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 800372c:	6803      	ldr	r3, [r0, #0]
 800372e:	f503 7280 	add.w	r2, r3, #256	; 0x100
    tcr_reg = &(hospi->Instance->TCR);
 8003732:	f503 7e84 	add.w	lr, r3, #264	; 0x108
    ir_reg  = &(hospi->Instance->IR);
 8003736:	f503 7c88 	add.w	ip, r3, #272	; 0x110
    abr_reg = &(hospi->Instance->ABR);
 800373a:	f503 7390 	add.w	r3, r3, #288	; 0x120
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 800373e:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 8003740:	6c8d      	ldr	r5, [r1, #72]	; 0x48
 8003742:	432c      	orrs	r4, r5
 8003744:	6014      	str	r4, [r2, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 8003746:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8003748:	b15c      	cbz	r4, 8003762 <OSPI_ConfigCmd+0x5a>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 800374a:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 800374c:	601c      	str	r4, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 800374e:	6813      	ldr	r3, [r2, #0]
 8003750:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8003754:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8003756:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 8003758:	432c      	orrs	r4, r5
 800375a:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 800375c:	432c      	orrs	r4, r5
 800375e:	4323      	orrs	r3, r4
 8003760:	6013      	str	r3, [r2, #0]
                           (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 8003762:	f8de 3000 	ldr.w	r3, [lr]
 8003766:	f023 031f 	bic.w	r3, r3, #31
 800376a:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 800376c:	4323      	orrs	r3, r4
 800376e:	f8ce 3000 	str.w	r3, [lr]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8003772:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8003774:	b12b      	cbz	r3, 8003782 <OSPI_ConfigCmd+0x7a>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8003776:	680b      	ldr	r3, [r1, #0]
 8003778:	b91b      	cbnz	r3, 8003782 <OSPI_ConfigCmd+0x7a>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 800377a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800377c:	6804      	ldr	r4, [r0, #0]
 800377e:	3b01      	subs	r3, #1
 8003780:	6423      	str	r3, [r4, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 8003782:	68cb      	ldr	r3, [r1, #12]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d06d      	beq.n	8003864 <OSPI_ConfigCmd+0x15c>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8003788:	69cc      	ldr	r4, [r1, #28]
 800378a:	2c00      	cmp	r4, #0
 800378c:	d040      	beq.n	8003810 <OSPI_ConfigCmd+0x108>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800378e:	6b8d      	ldr	r5, [r1, #56]	; 0x38
 8003790:	b315      	cbz	r5, 80037d8 <OSPI_ConfigCmd+0xd0>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8003792:	6817      	ldr	r7, [r2, #0]
 8003794:	4e46      	ldr	r6, [pc, #280]	; (80038b0 <OSPI_ConfigCmd+0x1a8>)
 8003796:	403e      	ands	r6, r7
 8003798:	694f      	ldr	r7, [r1, #20]
 800379a:	433b      	orrs	r3, r7
 800379c:	690f      	ldr	r7, [r1, #16]
 800379e:	433b      	orrs	r3, r7
 80037a0:	431c      	orrs	r4, r3
 80037a2:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80037a4:	431c      	orrs	r4, r3
 80037a6:	6a0b      	ldr	r3, [r1, #32]
 80037a8:	431c      	orrs	r4, r3
 80037aa:	432c      	orrs	r4, r5
 80037ac:	6c0d      	ldr	r5, [r1, #64]	; 0x40
 80037ae:	432c      	orrs	r4, r5
 80037b0:	4334      	orrs	r4, r6
 80037b2:	6014      	str	r4, [r2, #0]
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 80037b4:	688b      	ldr	r3, [r1, #8]
 80037b6:	f8cc 3000 	str.w	r3, [ip]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 80037ba:	6803      	ldr	r3, [r0, #0]
 80037bc:	698a      	ldr	r2, [r1, #24]
 80037be:	649a      	str	r2, [r3, #72]	; 0x48
  HAL_StatusTypeDef status = HAL_OK;
 80037c0:	2000      	movs	r0, #0
    }
  }

  /* Return function status */
  return status;
}
 80037c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ccr_reg = &(hospi->Instance->WCCR);
 80037c4:	6803      	ldr	r3, [r0, #0]
 80037c6:	f503 72c0 	add.w	r2, r3, #384	; 0x180
    tcr_reg = &(hospi->Instance->WTCR);
 80037ca:	f503 7ec4 	add.w	lr, r3, #392	; 0x188
    ir_reg  = &(hospi->Instance->WIR);
 80037ce:	f503 7cc8 	add.w	ip, r3, #400	; 0x190
    abr_reg = &(hospi->Instance->WABR);
 80037d2:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80037d6:	e7b2      	b.n	800373e <OSPI_ConfigCmd+0x36>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 80037d8:	6815      	ldr	r5, [r2, #0]
 80037da:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
 80037de:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 80037e2:	694e      	ldr	r6, [r1, #20]
 80037e4:	4333      	orrs	r3, r6
 80037e6:	690e      	ldr	r6, [r1, #16]
 80037e8:	4333      	orrs	r3, r6
 80037ea:	431c      	orrs	r4, r3
 80037ec:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80037ee:	431c      	orrs	r4, r3
 80037f0:	6a0b      	ldr	r3, [r1, #32]
 80037f2:	431c      	orrs	r4, r3
 80037f4:	432c      	orrs	r4, r5
 80037f6:	6014      	str	r4, [r2, #0]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 80037f8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80037fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037fe:	d1d9      	bne.n	80037b4 <OSPI_ConfigCmd+0xac>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8003800:	694b      	ldr	r3, [r1, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8003802:	2b08      	cmp	r3, #8
 8003804:	d1d6      	bne.n	80037b4 <OSPI_ConfigCmd+0xac>
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8003806:	6813      	ldr	r3, [r2, #0]
 8003808:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800380c:	6013      	str	r3, [r2, #0]
 800380e:	e7d1      	b.n	80037b4 <OSPI_ConfigCmd+0xac>
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8003810:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 8003812:	b194      	cbz	r4, 800383a <OSPI_ConfigCmd+0x132>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 8003814:	6810      	ldr	r0, [r2, #0]
 8003816:	f020 6070 	bic.w	r0, r0, #251658240	; 0xf000000
 800381a:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 800381e:	694d      	ldr	r5, [r1, #20]
 8003820:	432b      	orrs	r3, r5
 8003822:	690d      	ldr	r5, [r1, #16]
 8003824:	432b      	orrs	r3, r5
 8003826:	431c      	orrs	r4, r3
 8003828:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800382a:	431c      	orrs	r4, r3
 800382c:	4304      	orrs	r4, r0
 800382e:	6014      	str	r4, [r2, #0]
      *ir_reg = cmd->Instruction;
 8003830:	688b      	ldr	r3, [r1, #8]
 8003832:	f8cc 3000 	str.w	r3, [ip]
  HAL_StatusTypeDef status = HAL_OK;
 8003836:	2000      	movs	r0, #0
 8003838:	e7c3      	b.n	80037c2 <OSPI_ConfigCmd+0xba>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 800383a:	6814      	ldr	r4, [r2, #0]
 800383c:	f024 043f 	bic.w	r4, r4, #63	; 0x3f
 8003840:	694d      	ldr	r5, [r1, #20]
 8003842:	432b      	orrs	r3, r5
 8003844:	690d      	ldr	r5, [r1, #16]
 8003846:	432b      	orrs	r3, r5
 8003848:	4323      	orrs	r3, r4
 800384a:	6013      	str	r3, [r2, #0]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800384c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800384e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003852:	d1ed      	bne.n	8003830 <OSPI_ConfigCmd+0x128>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8003854:	694b      	ldr	r3, [r1, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8003856:	2b08      	cmp	r3, #8
 8003858:	d1ea      	bne.n	8003830 <OSPI_ConfigCmd+0x128>
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800385a:	6813      	ldr	r3, [r2, #0]
 800385c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003860:	6013      	str	r3, [r2, #0]
 8003862:	e7e5      	b.n	8003830 <OSPI_ConfigCmd+0x128>
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8003864:	69cb      	ldr	r3, [r1, #28]
 8003866:	b1f3      	cbz	r3, 80038a6 <OSPI_ConfigCmd+0x19e>
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8003868:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 800386a:	b194      	cbz	r4, 8003892 <OSPI_ConfigCmd+0x18a>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 800386c:	6815      	ldr	r5, [r2, #0]
 800386e:	f025 6570 	bic.w	r5, r5, #251658240	; 0xf000000
 8003872:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
 8003876:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 8003878:	4333      	orrs	r3, r6
 800387a:	6a0e      	ldr	r6, [r1, #32]
 800387c:	4333      	orrs	r3, r6
 800387e:	4323      	orrs	r3, r4
 8003880:	6c0c      	ldr	r4, [r1, #64]	; 0x40
 8003882:	4323      	orrs	r3, r4
 8003884:	432b      	orrs	r3, r5
 8003886:	6013      	str	r3, [r2, #0]
      hospi->Instance->AR = cmd->Address;
 8003888:	6803      	ldr	r3, [r0, #0]
 800388a:	698a      	ldr	r2, [r1, #24]
 800388c:	649a      	str	r2, [r3, #72]	; 0x48
  HAL_StatusTypeDef status = HAL_OK;
 800388e:	2000      	movs	r0, #0
 8003890:	e797      	b.n	80037c2 <OSPI_ConfigCmd+0xba>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 8003892:	6814      	ldr	r4, [r2, #0]
 8003894:	f424 547c 	bic.w	r4, r4, #16128	; 0x3f00
 8003898:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 800389a:	432b      	orrs	r3, r5
 800389c:	6a0d      	ldr	r5, [r1, #32]
 800389e:	432b      	orrs	r3, r5
 80038a0:	4323      	orrs	r3, r4
 80038a2:	6013      	str	r3, [r2, #0]
 80038a4:	e7f0      	b.n	8003888 <OSPI_ConfigCmd+0x180>
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80038a6:	2308      	movs	r3, #8
 80038a8:	6483      	str	r3, [r0, #72]	; 0x48
      status = HAL_ERROR;
 80038aa:	2001      	movs	r0, #1
 80038ac:	e789      	b.n	80037c2 <OSPI_ConfigCmd+0xba>
 80038ae:	bf00      	nop
 80038b0:	f0ffc0c0 	.word	0xf0ffc0c0

080038b4 <OSPIM_GetConfig>:
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t reg;
  uint32_t value = 0U;
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 80038b4:	1e43      	subs	r3, r0, #1
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d901      	bls.n	80038c0 <OSPIM_GetConfig+0xc>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 80038bc:	2001      	movs	r0, #1
 80038be:	4770      	bx	lr
  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 80038c0:	2900      	cmp	r1, #0
 80038c2:	d05d      	beq.n	8003980 <OSPIM_GetConfig+0xcc>
{
 80038c4:	b410      	push	{r4}
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 80038c6:	2300      	movs	r3, #0
 80038c8:	600b      	str	r3, [r1, #0]
    cfg->DQSPort    = 0U;
 80038ca:	604b      	str	r3, [r1, #4]
    cfg->NCSPort    = 0U;
 80038cc:	608b      	str	r3, [r1, #8]
    cfg->IOLowPort  = 0U;
 80038ce:	60cb      	str	r3, [r1, #12]
    cfg->IOHighPort = 0U;
 80038d0:	610b      	str	r3, [r1, #16]

    if (instance_nb == 2U)
 80038d2:	2802      	cmp	r0, #2
 80038d4:	d002      	beq.n	80038dc <OSPIM_GetConfig+0x28>
  uint32_t value = 0U;
 80038d6:	461c      	mov	r4, r3
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80038d8:	2200      	movs	r2, #0
 80038da:	e00b      	b.n	80038f4 <OSPIM_GetConfig+0x40>
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 80038dc:	4c29      	ldr	r4, [pc, #164]	; (8003984 <OSPIM_GetConfig+0xd0>)
 80038de:	e7fb      	b.n	80038d8 <OSPIM_GetConfig+0x24>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 80038e0:	1c50      	adds	r0, r2, #1
 80038e2:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
 80038e6:	60c8      	str	r0, [r1, #12]
 80038e8:	e036      	b.n	8003958 <OSPIM_GetConfig+0xa4>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 80038ea:	1c53      	adds	r3, r2, #1
 80038ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038f0:	610b      	str	r3, [r1, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80038f2:	3201      	adds	r2, #1
 80038f4:	2a01      	cmp	r2, #1
 80038f6:	d83f      	bhi.n	8003978 <OSPIM_GetConfig+0xc4>
      reg = OCTOSPIM->PCR[index];
 80038f8:	0090      	lsls	r0, r2, #2
 80038fa:	4b23      	ldr	r3, [pc, #140]	; (8003988 <OSPIM_GetConfig+0xd4>)
 80038fc:	581b      	ldr	r3, [r3, r0]
      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 80038fe:	f013 0f01 	tst.w	r3, #1
 8003902:	d006      	beq.n	8003912 <OSPIM_GetConfig+0x5e>
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8003904:	ea84 0003 	eor.w	r0, r4, r3
 8003908:	f010 0f02 	tst.w	r0, #2
 800390c:	d101      	bne.n	8003912 <OSPIM_GetConfig+0x5e>
          cfg->ClkPort = index+1U;
 800390e:	1c50      	adds	r0, r2, #1
 8003910:	6008      	str	r0, [r1, #0]
      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8003912:	f013 0f10 	tst.w	r3, #16
 8003916:	d006      	beq.n	8003926 <OSPIM_GetConfig+0x72>
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8003918:	ea84 0003 	eor.w	r0, r4, r3
 800391c:	f010 0f20 	tst.w	r0, #32
 8003920:	d101      	bne.n	8003926 <OSPIM_GetConfig+0x72>
          cfg->DQSPort = index+1U;
 8003922:	1c50      	adds	r0, r2, #1
 8003924:	6048      	str	r0, [r1, #4]
      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8003926:	f413 7f80 	tst.w	r3, #256	; 0x100
 800392a:	d006      	beq.n	800393a <OSPIM_GetConfig+0x86>
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 800392c:	ea84 0003 	eor.w	r0, r4, r3
 8003930:	f410 7f00 	tst.w	r0, #512	; 0x200
 8003934:	d101      	bne.n	800393a <OSPIM_GetConfig+0x86>
          cfg->NCSPort = index+1U;
 8003936:	1c50      	adds	r0, r2, #1
 8003938:	6088      	str	r0, [r1, #8]
      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 800393a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800393e:	d00b      	beq.n	8003958 <OSPIM_GetConfig+0xa4>
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8003940:	ea84 0003 	eor.w	r0, r4, r3
 8003944:	f410 2f80 	tst.w	r0, #262144	; 0x40000
 8003948:	d106      	bne.n	8003958 <OSPIM_GetConfig+0xa4>
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 800394a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800394e:	d1c7      	bne.n	80038e0 <OSPIM_GetConfig+0x2c>
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8003950:	1c50      	adds	r0, r2, #1
 8003952:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8003956:	60c8      	str	r0, [r1, #12]
      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8003958:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800395c:	d0c9      	beq.n	80038f2 <OSPIM_GetConfig+0x3e>
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 800395e:	ea84 0003 	eor.w	r0, r4, r3
 8003962:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 8003966:	d1c4      	bne.n	80038f2 <OSPIM_GetConfig+0x3e>
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8003968:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800396c:	d1bd      	bne.n	80038ea <OSPIM_GetConfig+0x36>
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 800396e:	1c53      	adds	r3, r2, #1
 8003970:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003974:	610b      	str	r3, [r1, #16]
 8003976:	e7bc      	b.n	80038f2 <OSPIM_GetConfig+0x3e>
  HAL_StatusTypeDef status = HAL_OK;
 8003978:	2000      	movs	r0, #0
    }
  }

  /* Return function status */
  return status;
}
 800397a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800397e:	4770      	bx	lr
    status = HAL_ERROR;
 8003980:	2001      	movs	r0, #1
}
 8003982:	4770      	bx	lr
 8003984:	04040222 	.word	0x04040222
 8003988:	50061c04 	.word	0x50061c04

0800398c <OSPI_WaitFlagStateUntilTimeout>:
{
 800398c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003990:	4605      	mov	r5, r0
 8003992:	460f      	mov	r7, r1
 8003994:	4616      	mov	r6, r2
 8003996:	4699      	mov	r9, r3
 8003998:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800399c:	682c      	ldr	r4, [r5, #0]
 800399e:	6a24      	ldr	r4, [r4, #32]
 80039a0:	423c      	tst	r4, r7
 80039a2:	bf14      	ite	ne
 80039a4:	f04f 0c01 	movne.w	ip, #1
 80039a8:	f04f 0c00 	moveq.w	ip, #0
 80039ac:	45b4      	cmp	ip, r6
 80039ae:	d014      	beq.n	80039da <OSPI_WaitFlagStateUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 80039b0:	f1b8 3fff 	cmp.w	r8, #4294967295
 80039b4:	d0f2      	beq.n	800399c <OSPI_WaitFlagStateUntilTimeout+0x10>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039b6:	f7fe fd0d 	bl	80023d4 <HAL_GetTick>
 80039ba:	eba0 0009 	sub.w	r0, r0, r9
 80039be:	4540      	cmp	r0, r8
 80039c0:	d802      	bhi.n	80039c8 <OSPI_WaitFlagStateUntilTimeout+0x3c>
 80039c2:	f1b8 0f00 	cmp.w	r8, #0
 80039c6:	d1e9      	bne.n	800399c <OSPI_WaitFlagStateUntilTimeout+0x10>
        hospi->State     = HAL_OSPI_STATE_ERROR;
 80039c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80039cc:	646b      	str	r3, [r5, #68]	; 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 80039ce:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80039d0:	f043 0301 	orr.w	r3, r3, #1
 80039d4:	64ab      	str	r3, [r5, #72]	; 0x48
        return HAL_ERROR;
 80039d6:	2001      	movs	r0, #1
 80039d8:	e000      	b.n	80039dc <OSPI_WaitFlagStateUntilTimeout+0x50>
  return HAL_OK;
 80039da:	2000      	movs	r0, #0
}
 80039dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080039e0 <HAL_OSPI_Command>:
{
 80039e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039e4:	b082      	sub	sp, #8
 80039e6:	4604      	mov	r4, r0
 80039e8:	4688      	mov	r8, r1
 80039ea:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
 80039ec:	f7fe fcf2 	bl	80023d4 <HAL_GetTick>
 80039f0:	4606      	mov	r6, r0
  state = hospi->State;
 80039f2:	6c65      	ldr	r5, [r4, #68]	; 0x44
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 80039f4:	2d02      	cmp	r5, #2
 80039f6:	d009      	beq.n	8003a0c <HAL_OSPI_Command+0x2c>
 80039f8:	2d14      	cmp	r5, #20
 80039fa:	d024      	beq.n	8003a46 <HAL_OSPI_Command+0x66>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG))     ||
 80039fc:	2d24      	cmp	r5, #36	; 0x24
 80039fe:	d027      	beq.n	8003a50 <HAL_OSPI_Command+0x70>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8003a00:	2310      	movs	r3, #16
 8003a02:	64a3      	str	r3, [r4, #72]	; 0x48
    status = HAL_ERROR;
 8003a04:	2001      	movs	r0, #1
}
 8003a06:	b002      	add	sp, #8
 8003a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 8003a0c:	68e3      	ldr	r3, [r4, #12]
 8003a0e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a12:	d0f1      	beq.n	80039f8 <HAL_OSPI_Command+0x18>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8003a14:	9700      	str	r7, [sp, #0]
 8003a16:	4633      	mov	r3, r6
 8003a18:	2200      	movs	r2, #0
 8003a1a:	2120      	movs	r1, #32
 8003a1c:	4620      	mov	r0, r4
 8003a1e:	f7ff ffb5 	bl	800398c <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8003a22:	2800      	cmp	r0, #0
 8003a24:	d1ef      	bne.n	8003a06 <HAL_OSPI_Command+0x26>
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8003a26:	64a0      	str	r0, [r4, #72]	; 0x48
      status = OSPI_ConfigCmd(hospi, cmd);
 8003a28:	4641      	mov	r1, r8
 8003a2a:	4620      	mov	r0, r4
 8003a2c:	f7ff fe6c 	bl	8003708 <OSPI_ConfigCmd>
      if (status == HAL_OK)
 8003a30:	2800      	cmp	r0, #0
 8003a32:	d1e8      	bne.n	8003a06 <HAL_OSPI_Command+0x26>
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 8003a34:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
 8003a38:	b17b      	cbz	r3, 8003a5a <HAL_OSPI_Command+0x7a>
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8003a3a:	f8d8 3000 	ldr.w	r3, [r8]
 8003a3e:	b9bb      	cbnz	r3, 8003a70 <HAL_OSPI_Command+0x90>
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8003a40:	2304      	movs	r3, #4
 8003a42:	6463      	str	r3, [r4, #68]	; 0x44
 8003a44:	e7df      	b.n	8003a06 <HAL_OSPI_Command+0x26>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG))     ||
 8003a46:	f8d8 3000 	ldr.w	r3, [r8]
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d1d6      	bne.n	80039fc <HAL_OSPI_Command+0x1c>
 8003a4e:	e7e1      	b.n	8003a14 <HAL_OSPI_Command+0x34>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)))
 8003a50:	f8d8 3000 	ldr.w	r3, [r8]
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d1d3      	bne.n	8003a00 <HAL_OSPI_Command+0x20>
 8003a58:	e7dc      	b.n	8003a14 <HAL_OSPI_Command+0x34>
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8003a5a:	9700      	str	r7, [sp, #0]
 8003a5c:	4633      	mov	r3, r6
 8003a5e:	2201      	movs	r2, #1
 8003a60:	2102      	movs	r1, #2
 8003a62:	4620      	mov	r0, r4
 8003a64:	f7ff ff92 	bl	800398c <OSPI_WaitFlagStateUntilTimeout>
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8003a68:	6823      	ldr	r3, [r4, #0]
 8003a6a:	2202      	movs	r2, #2
 8003a6c:	625a      	str	r2, [r3, #36]	; 0x24
 8003a6e:	e7ca      	b.n	8003a06 <HAL_OSPI_Command+0x26>
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d005      	beq.n	8003a80 <HAL_OSPI_Command+0xa0>
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 8003a74:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003a76:	2b14      	cmp	r3, #20
 8003a78:	d00b      	beq.n	8003a92 <HAL_OSPI_Command+0xb2>
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 8003a7a:	2324      	movs	r3, #36	; 0x24
 8003a7c:	6463      	str	r3, [r4, #68]	; 0x44
 8003a7e:	e7c2      	b.n	8003a06 <HAL_OSPI_Command+0x26>
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 8003a80:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003a82:	2b24      	cmp	r3, #36	; 0x24
 8003a84:	d002      	beq.n	8003a8c <HAL_OSPI_Command+0xac>
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 8003a86:	2314      	movs	r3, #20
 8003a88:	6463      	str	r3, [r4, #68]	; 0x44
 8003a8a:	e7bc      	b.n	8003a06 <HAL_OSPI_Command+0x26>
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8003a8c:	2304      	movs	r3, #4
 8003a8e:	6463      	str	r3, [r4, #68]	; 0x44
 8003a90:	e7b9      	b.n	8003a06 <HAL_OSPI_Command+0x26>
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8003a92:	2304      	movs	r3, #4
 8003a94:	6463      	str	r3, [r4, #68]	; 0x44
 8003a96:	e7b6      	b.n	8003a06 <HAL_OSPI_Command+0x26>

08003a98 <HAL_OSPI_Transmit>:
{
 8003a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a9c:	b082      	sub	sp, #8
 8003a9e:	4604      	mov	r4, r0
 8003aa0:	4688      	mov	r8, r1
 8003aa2:	4616      	mov	r6, r2
  uint32_t tickstart = HAL_GetTick();
 8003aa4:	f7fe fc96 	bl	80023d4 <HAL_GetTick>
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8003aa8:	6827      	ldr	r7, [r4, #0]
  if (pData == NULL)
 8003aaa:	f1b8 0f00 	cmp.w	r8, #0
 8003aae:	d00a      	beq.n	8003ac6 <HAL_OSPI_Transmit+0x2e>
 8003ab0:	4605      	mov	r5, r0
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8003ab2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003ab4:	2b04      	cmp	r3, #4
 8003ab6:	d00a      	beq.n	8003ace <HAL_OSPI_Transmit+0x36>
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8003ab8:	2310      	movs	r3, #16
 8003aba:	64a3      	str	r3, [r4, #72]	; 0x48
      status = HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	b002      	add	sp, #8
 8003ac2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8003ac6:	2308      	movs	r3, #8
 8003ac8:	64a3      	str	r3, [r4, #72]	; 0x48
    status = HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e7f7      	b.n	8003abe <HAL_OSPI_Transmit+0x26>
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8003ace:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	63e3      	str	r3, [r4, #60]	; 0x3c
      hospi->XferSize  = hospi->XferCount;
 8003ad4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003ad6:	63a3      	str	r3, [r4, #56]	; 0x38
      hospi->pBuffPtr  = pData;
 8003ad8:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8003ae2:	603b      	str	r3, [r7, #0]
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 8003ae4:	9600      	str	r6, [sp, #0]
 8003ae6:	462b      	mov	r3, r5
 8003ae8:	2201      	movs	r2, #1
 8003aea:	2104      	movs	r1, #4
 8003aec:	4620      	mov	r0, r4
 8003aee:	f7ff ff4d 	bl	800398c <OSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 8003af2:	4603      	mov	r3, r0
 8003af4:	b960      	cbnz	r0, 8003b10 <HAL_OSPI_Transmit+0x78>
        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 8003af6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003af8:	7812      	ldrb	r2, [r2, #0]
 8003afa:	f887 2050 	strb.w	r2, [r7, #80]	; 0x50
        hospi->pBuffPtr++;
 8003afe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003b00:	3101      	adds	r1, #1
 8003b02:	6361      	str	r1, [r4, #52]	; 0x34
        hospi->XferCount--;
 8003b04:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8003b06:	3901      	subs	r1, #1
 8003b08:	63e1      	str	r1, [r4, #60]	; 0x3c
      } while (hospi->XferCount > 0U);
 8003b0a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003b0c:	2a00      	cmp	r2, #0
 8003b0e:	d1e9      	bne.n	8003ae4 <HAL_OSPI_Transmit+0x4c>
      if (status == HAL_OK)
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d1d4      	bne.n	8003abe <HAL_OSPI_Transmit+0x26>
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8003b14:	9600      	str	r6, [sp, #0]
 8003b16:	462b      	mov	r3, r5
 8003b18:	2201      	movs	r2, #1
 8003b1a:	2102      	movs	r1, #2
 8003b1c:	4620      	mov	r0, r4
 8003b1e:	f7ff ff35 	bl	800398c <OSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8003b22:	4603      	mov	r3, r0
 8003b24:	2800      	cmp	r0, #0
 8003b26:	d1ca      	bne.n	8003abe <HAL_OSPI_Transmit+0x26>
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8003b28:	6821      	ldr	r1, [r4, #0]
 8003b2a:	2202      	movs	r2, #2
 8003b2c:	624a      	str	r2, [r1, #36]	; 0x24
          hospi->State = HAL_OSPI_STATE_READY;
 8003b2e:	6462      	str	r2, [r4, #68]	; 0x44
 8003b30:	e7c5      	b.n	8003abe <HAL_OSPI_Transmit+0x26>

08003b32 <HAL_OSPI_Receive>:
{
 8003b32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b36:	b082      	sub	sp, #8
 8003b38:	4604      	mov	r4, r0
 8003b3a:	4688      	mov	r8, r1
 8003b3c:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
 8003b3e:	f7fe fc49 	bl	80023d4 <HAL_GetTick>
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8003b42:	6825      	ldr	r5, [r4, #0]
  uint32_t addr_reg = hospi->Instance->AR;
 8003b44:	6caa      	ldr	r2, [r5, #72]	; 0x48
  uint32_t ir_reg = hospi->Instance->IR;
 8003b46:	f8d5 1110 	ldr.w	r1, [r5, #272]	; 0x110
  if (pData == NULL)
 8003b4a:	f1b8 0f00 	cmp.w	r8, #0
 8003b4e:	d00a      	beq.n	8003b66 <HAL_OSPI_Receive+0x34>
 8003b50:	4606      	mov	r6, r0
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8003b52:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003b54:	2b04      	cmp	r3, #4
 8003b56:	d00a      	beq.n	8003b6e <HAL_OSPI_Receive+0x3c>
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8003b58:	2310      	movs	r3, #16
 8003b5a:	64a3      	str	r3, [r4, #72]	; 0x48
      status = HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	b002      	add	sp, #8
 8003b62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8003b66:	2308      	movs	r3, #8
 8003b68:	64a3      	str	r3, [r4, #72]	; 0x48
    status = HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e7f7      	b.n	8003b5e <HAL_OSPI_Receive+0x2c>
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8003b6e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8003b70:	3301      	adds	r3, #1
 8003b72:	63e3      	str	r3, [r4, #60]	; 0x3c
      hospi->XferSize  = hospi->XferCount;
 8003b74:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003b76:	63a3      	str	r3, [r4, #56]	; 0x38
      hospi->pBuffPtr  = pData;
 8003b78:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8003b7c:	682b      	ldr	r3, [r5, #0]
 8003b7e:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8003b82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b86:	602b      	str	r3, [r5, #0]
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8003b88:	68e3      	ldr	r3, [r4, #12]
 8003b8a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b8e:	d007      	beq.n	8003ba0 <HAL_OSPI_Receive+0x6e>
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8003b90:	6823      	ldr	r3, [r4, #0]
 8003b92:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
 8003b96:	f410 6fe0 	tst.w	r0, #1792	; 0x700
 8003b9a:	d02a      	beq.n	8003bf2 <HAL_OSPI_Receive+0xc0>
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8003b9c:	649a      	str	r2, [r3, #72]	; 0x48
 8003b9e:	e001      	b.n	8003ba4 <HAL_OSPI_Receive+0x72>
        WRITE_REG(hospi->Instance->AR, addr_reg);
 8003ba0:	6823      	ldr	r3, [r4, #0]
 8003ba2:	649a      	str	r2, [r3, #72]	; 0x48
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 8003ba4:	9700      	str	r7, [sp, #0]
 8003ba6:	4633      	mov	r3, r6
 8003ba8:	2201      	movs	r2, #1
 8003baa:	2106      	movs	r1, #6
 8003bac:	4620      	mov	r0, r4
 8003bae:	f7ff feed 	bl	800398c <OSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	b960      	cbnz	r0, 8003bd0 <HAL_OSPI_Receive+0x9e>
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8003bb6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003bb8:	f895 1050 	ldrb.w	r1, [r5, #80]	; 0x50
 8003bbc:	7011      	strb	r1, [r2, #0]
        hospi->pBuffPtr++;
 8003bbe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003bc0:	3101      	adds	r1, #1
 8003bc2:	6361      	str	r1, [r4, #52]	; 0x34
        hospi->XferCount--;
 8003bc4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8003bc6:	3901      	subs	r1, #1
 8003bc8:	63e1      	str	r1, [r4, #60]	; 0x3c
      } while(hospi->XferCount > 0U);
 8003bca:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003bcc:	2a00      	cmp	r2, #0
 8003bce:	d1e9      	bne.n	8003ba4 <HAL_OSPI_Receive+0x72>
      if (status == HAL_OK)
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d1c4      	bne.n	8003b5e <HAL_OSPI_Receive+0x2c>
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8003bd4:	9700      	str	r7, [sp, #0]
 8003bd6:	4633      	mov	r3, r6
 8003bd8:	2201      	movs	r2, #1
 8003bda:	2102      	movs	r1, #2
 8003bdc:	4620      	mov	r0, r4
 8003bde:	f7ff fed5 	bl	800398c <OSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8003be2:	4603      	mov	r3, r0
 8003be4:	2800      	cmp	r0, #0
 8003be6:	d1ba      	bne.n	8003b5e <HAL_OSPI_Receive+0x2c>
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8003be8:	6821      	ldr	r1, [r4, #0]
 8003bea:	2202      	movs	r2, #2
 8003bec:	624a      	str	r2, [r1, #36]	; 0x24
          hospi->State = HAL_OSPI_STATE_READY;
 8003bee:	6462      	str	r2, [r4, #68]	; 0x44
 8003bf0:	e7b5      	b.n	8003b5e <HAL_OSPI_Receive+0x2c>
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8003bf2:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
 8003bf6:	e7d5      	b.n	8003ba4 <HAL_OSPI_Receive+0x72>

08003bf8 <HAL_OSPI_ErrorCallback>:
}
 8003bf8:	4770      	bx	lr

08003bfa <HAL_OSPI_AbortCpltCallback>:
}
 8003bfa:	4770      	bx	lr

08003bfc <OSPI_DMAAbortCplt>:
{
 8003bfc:	b508      	push	{r3, lr}
  OSPI_HandleTypeDef* hospi = ( OSPI_HandleTypeDef* )(hdma->Parent);
 8003bfe:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hospi->XferCount = 0;
 8003c00:	2300      	movs	r3, #0
 8003c02:	63c3      	str	r3, [r0, #60]	; 0x3c
  if (hospi->State == HAL_OSPI_STATE_ABORT)
 8003c04:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003c06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c0a:	d116      	bne.n	8003c3a <OSPI_DMAAbortCplt+0x3e>
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8003c0c:	6803      	ldr	r3, [r0, #0]
 8003c0e:	6a1a      	ldr	r2, [r3, #32]
 8003c10:	f012 0f20 	tst.w	r2, #32
 8003c14:	d00c      	beq.n	8003c30 <OSPI_DMAAbortCplt+0x34>
      __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8003c16:	2202      	movs	r2, #2
 8003c18:	625a      	str	r2, [r3, #36]	; 0x24
      __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TC);
 8003c1a:	6802      	ldr	r2, [r0, #0]
 8003c1c:	6813      	ldr	r3, [r2, #0]
 8003c1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c22:	6013      	str	r3, [r2, #0]
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 8003c24:	6802      	ldr	r2, [r0, #0]
 8003c26:	6813      	ldr	r3, [r2, #0]
 8003c28:	f043 0302 	orr.w	r3, r3, #2
 8003c2c:	6013      	str	r3, [r2, #0]
 8003c2e:	e008      	b.n	8003c42 <OSPI_DMAAbortCplt+0x46>
      hospi->State = HAL_OSPI_STATE_READY;
 8003c30:	2302      	movs	r3, #2
 8003c32:	6443      	str	r3, [r0, #68]	; 0x44
      HAL_OSPI_AbortCpltCallback(hospi);
 8003c34:	f7ff ffe1 	bl	8003bfa <HAL_OSPI_AbortCpltCallback>
 8003c38:	e003      	b.n	8003c42 <OSPI_DMAAbortCplt+0x46>
    hospi->State = HAL_OSPI_STATE_READY;
 8003c3a:	2302      	movs	r3, #2
 8003c3c:	6443      	str	r3, [r0, #68]	; 0x44
    HAL_OSPI_ErrorCallback(hospi);
 8003c3e:	f7ff ffdb 	bl	8003bf8 <HAL_OSPI_ErrorCallback>
}
 8003c42:	bd08      	pop	{r3, pc}

08003c44 <HAL_OSPI_FifoThresholdCallback>:
}
 8003c44:	4770      	bx	lr

08003c46 <HAL_OSPI_CmdCpltCallback>:
}
 8003c46:	4770      	bx	lr

08003c48 <HAL_OSPI_RxCpltCallback>:
}
 8003c48:	4770      	bx	lr

08003c4a <HAL_OSPI_TxCpltCallback>:
}
 8003c4a:	4770      	bx	lr

08003c4c <HAL_OSPI_StatusMatchCallback>:
}
 8003c4c:	4770      	bx	lr

08003c4e <HAL_OSPI_TimeOutCallback>:
}
 8003c4e:	4770      	bx	lr

08003c50 <HAL_OSPI_IRQHandler>:
{
 8003c50:	b510      	push	{r4, lr}
 8003c52:	4604      	mov	r4, r0
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8003c54:	6802      	ldr	r2, [r0, #0]
  uint32_t flag           = hospi->Instance->SR;
 8003c56:	6a13      	ldr	r3, [r2, #32]
  uint32_t itsource       = hospi->Instance->CR;
 8003c58:	6811      	ldr	r1, [r2, #0]
  uint32_t currentstate   = hospi->State;
 8003c5a:	6c40      	ldr	r0, [r0, #68]	; 0x44
  if (((flag & HAL_OSPI_FLAG_FT) != 0U) && ((itsource & HAL_OSPI_IT_FT) != 0U))
 8003c5c:	f013 0f04 	tst.w	r3, #4
 8003c60:	d027      	beq.n	8003cb2 <HAL_OSPI_IRQHandler+0x62>
 8003c62:	f411 2f80 	tst.w	r1, #262144	; 0x40000
 8003c66:	d024      	beq.n	8003cb2 <HAL_OSPI_IRQHandler+0x62>
    if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 8003c68:	2818      	cmp	r0, #24
 8003c6a:	d00c      	beq.n	8003c86 <HAL_OSPI_IRQHandler+0x36>
    else if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8003c6c:	2828      	cmp	r0, #40	; 0x28
 8003c6e:	d015      	beq.n	8003c9c <HAL_OSPI_IRQHandler+0x4c>
    if (hospi->XferCount == 0U)
 8003c70:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003c72:	b923      	cbnz	r3, 8003c7e <HAL_OSPI_IRQHandler+0x2e>
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_FT);
 8003c74:	6822      	ldr	r2, [r4, #0]
 8003c76:	6813      	ldr	r3, [r2, #0]
 8003c78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c7c:	6013      	str	r3, [r2, #0]
    HAL_OSPI_FifoThresholdCallback(hospi);
 8003c7e:	4620      	mov	r0, r4
 8003c80:	f7ff ffe0 	bl	8003c44 <HAL_OSPI_FifoThresholdCallback>
}
 8003c84:	bd10      	pop	{r4, pc}
      *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 8003c86:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
      hospi->pBuffPtr++;
 8003c8e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003c90:	3301      	adds	r3, #1
 8003c92:	6363      	str	r3, [r4, #52]	; 0x34
      hospi->XferCount--;
 8003c94:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003c96:	3b01      	subs	r3, #1
 8003c98:	63e3      	str	r3, [r4, #60]	; 0x3c
 8003c9a:	e7e9      	b.n	8003c70 <HAL_OSPI_IRQHandler+0x20>
      *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8003c9c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003c9e:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 8003ca2:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 8003ca4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	6363      	str	r3, [r4, #52]	; 0x34
      hospi->XferCount--;
 8003caa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003cac:	3b01      	subs	r3, #1
 8003cae:	63e3      	str	r3, [r4, #60]	; 0x3c
 8003cb0:	e7de      	b.n	8003c70 <HAL_OSPI_IRQHandler+0x20>
  else if (((flag & HAL_OSPI_FLAG_TC) != 0U) && ((itsource & HAL_OSPI_IT_TC) != 0U))
 8003cb2:	f013 0f02 	tst.w	r3, #2
 8003cb6:	d044      	beq.n	8003d42 <HAL_OSPI_IRQHandler+0xf2>
 8003cb8:	f411 3f00 	tst.w	r1, #131072	; 0x20000
 8003cbc:	d041      	beq.n	8003d42 <HAL_OSPI_IRQHandler+0xf2>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8003cbe:	2828      	cmp	r0, #40	; 0x28
 8003cc0:	d014      	beq.n	8003cec <HAL_OSPI_IRQHandler+0x9c>
      hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 8003cc2:	2102      	movs	r1, #2
 8003cc4:	6251      	str	r1, [r2, #36]	; 0x24
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 8003cc6:	6822      	ldr	r2, [r4, #0]
 8003cc8:	6813      	ldr	r3, [r2, #0]
 8003cca:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8003cce:	6013      	str	r3, [r2, #0]
      hospi->State = HAL_OSPI_STATE_READY;
 8003cd0:	6461      	str	r1, [r4, #68]	; 0x44
      if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 8003cd2:	2818      	cmp	r0, #24
 8003cd4:	d029      	beq.n	8003d2a <HAL_OSPI_IRQHandler+0xda>
      else if (currentstate == HAL_OSPI_STATE_BUSY_CMD)
 8003cd6:	2808      	cmp	r0, #8
 8003cd8:	d02b      	beq.n	8003d32 <HAL_OSPI_IRQHandler+0xe2>
      else if (currentstate == HAL_OSPI_STATE_ABORT)
 8003cda:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8003cde:	d1d1      	bne.n	8003c84 <HAL_OSPI_IRQHandler+0x34>
        if (hospi->ErrorCode == HAL_OSPI_ERROR_NONE)
 8003ce0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003ce2:	bb53      	cbnz	r3, 8003d3a <HAL_OSPI_IRQHandler+0xea>
          HAL_OSPI_AbortCpltCallback(hospi);
 8003ce4:	4620      	mov	r0, r4
 8003ce6:	f7ff ff88 	bl	8003bfa <HAL_OSPI_AbortCpltCallback>
 8003cea:	e7cb      	b.n	8003c84 <HAL_OSPI_IRQHandler+0x34>
      if ((hospi->XferCount > 0U) && ((flag & OCTOSPI_SR_FLEVEL) != 0U))
 8003cec:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8003cee:	b169      	cbz	r1, 8003d0c <HAL_OSPI_IRQHandler+0xbc>
 8003cf0:	f413 5f7c 	tst.w	r3, #16128	; 0x3f00
 8003cf4:	d00a      	beq.n	8003d0c <HAL_OSPI_IRQHandler+0xbc>
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8003cf6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003cf8:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 8003cfc:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8003cfe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003d00:	3301      	adds	r3, #1
 8003d02:	6363      	str	r3, [r4, #52]	; 0x34
        hospi->XferCount--;
 8003d04:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003d06:	3b01      	subs	r3, #1
 8003d08:	63e3      	str	r3, [r4, #60]	; 0x3c
 8003d0a:	e7bb      	b.n	8003c84 <HAL_OSPI_IRQHandler+0x34>
      else if(hospi->XferCount == 0U)
 8003d0c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d1b8      	bne.n	8003c84 <HAL_OSPI_IRQHandler+0x34>
        hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 8003d12:	2102      	movs	r1, #2
 8003d14:	6251      	str	r1, [r2, #36]	; 0x24
        __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 8003d16:	6822      	ldr	r2, [r4, #0]
 8003d18:	6813      	ldr	r3, [r2, #0]
 8003d1a:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8003d1e:	6013      	str	r3, [r2, #0]
        hospi->State = HAL_OSPI_STATE_READY;
 8003d20:	6461      	str	r1, [r4, #68]	; 0x44
        HAL_OSPI_RxCpltCallback(hospi);
 8003d22:	4620      	mov	r0, r4
 8003d24:	f7ff ff90 	bl	8003c48 <HAL_OSPI_RxCpltCallback>
 8003d28:	e7ac      	b.n	8003c84 <HAL_OSPI_IRQHandler+0x34>
        HAL_OSPI_TxCpltCallback(hospi);
 8003d2a:	4620      	mov	r0, r4
 8003d2c:	f7ff ff8d 	bl	8003c4a <HAL_OSPI_TxCpltCallback>
 8003d30:	e7a8      	b.n	8003c84 <HAL_OSPI_IRQHandler+0x34>
        HAL_OSPI_CmdCpltCallback(hospi);
 8003d32:	4620      	mov	r0, r4
 8003d34:	f7ff ff87 	bl	8003c46 <HAL_OSPI_CmdCpltCallback>
 8003d38:	e7a4      	b.n	8003c84 <HAL_OSPI_IRQHandler+0x34>
          HAL_OSPI_ErrorCallback(hospi);
 8003d3a:	4620      	mov	r0, r4
 8003d3c:	f7ff ff5c 	bl	8003bf8 <HAL_OSPI_ErrorCallback>
 8003d40:	e7a0      	b.n	8003c84 <HAL_OSPI_IRQHandler+0x34>
  else if (((flag & HAL_OSPI_FLAG_SM) != 0U) && ((itsource & HAL_OSPI_IT_SM) != 0U))
 8003d42:	f013 0f08 	tst.w	r3, #8
 8003d46:	d013      	beq.n	8003d70 <HAL_OSPI_IRQHandler+0x120>
 8003d48:	f411 2f00 	tst.w	r1, #524288	; 0x80000
 8003d4c:	d010      	beq.n	8003d70 <HAL_OSPI_IRQHandler+0x120>
    hospi->Instance->FCR = HAL_OSPI_FLAG_SM;
 8003d4e:	2308      	movs	r3, #8
 8003d50:	6253      	str	r3, [r2, #36]	; 0x24
    if ((hospi->Instance->CR & OCTOSPI_CR_APMS) != 0U)
 8003d52:	6823      	ldr	r3, [r4, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 8003d5a:	d005      	beq.n	8003d68 <HAL_OSPI_IRQHandler+0x118>
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_SM | HAL_OSPI_IT_TE);
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8003d62:	601a      	str	r2, [r3, #0]
      hospi->State = HAL_OSPI_STATE_READY;
 8003d64:	2302      	movs	r3, #2
 8003d66:	6463      	str	r3, [r4, #68]	; 0x44
    HAL_OSPI_StatusMatchCallback(hospi);
 8003d68:	4620      	mov	r0, r4
 8003d6a:	f7ff ff6f 	bl	8003c4c <HAL_OSPI_StatusMatchCallback>
 8003d6e:	e789      	b.n	8003c84 <HAL_OSPI_IRQHandler+0x34>
  else if (((flag & HAL_OSPI_FLAG_TE) != 0U) && ((itsource & HAL_OSPI_IT_TE) != 0U))
 8003d70:	f013 0f01 	tst.w	r3, #1
 8003d74:	d029      	beq.n	8003dca <HAL_OSPI_IRQHandler+0x17a>
 8003d76:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 8003d7a:	d026      	beq.n	8003dca <HAL_OSPI_IRQHandler+0x17a>
    hospi->Instance->FCR = HAL_OSPI_FLAG_TE;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_OSPI_DISABLE_IT(hospi, (HAL_OSPI_IT_TO | HAL_OSPI_IT_SM | HAL_OSPI_IT_FT | HAL_OSPI_IT_TC | HAL_OSPI_IT_TE));
 8003d80:	6822      	ldr	r2, [r4, #0]
 8003d82:	6813      	ldr	r3, [r2, #0]
 8003d84:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003d88:	6013      	str	r3, [r2, #0]
    hospi->ErrorCode = HAL_OSPI_ERROR_TRANSFER;
 8003d8a:	2302      	movs	r3, #2
 8003d8c:	64a3      	str	r3, [r4, #72]	; 0x48
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8003d8e:	6823      	ldr	r3, [r4, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	f012 0f04 	tst.w	r2, #4
 8003d96:	d012      	beq.n	8003dbe <HAL_OSPI_IRQHandler+0x16e>
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	f022 0204 	bic.w	r2, r2, #4
 8003d9e:	601a      	str	r2, [r3, #0]
      hospi->hdma->XferAbortCallback = OSPI_DMAAbortCplt;
 8003da0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003da2:	4a11      	ldr	r2, [pc, #68]	; (8003de8 <HAL_OSPI_IRQHandler+0x198>)
 8003da4:	639a      	str	r2, [r3, #56]	; 0x38
      if (HAL_DMA_Abort_IT(hospi->hdma) != HAL_OK)
 8003da6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003da8:	f7fe fce6 	bl	8002778 <HAL_DMA_Abort_IT>
 8003dac:	2800      	cmp	r0, #0
 8003dae:	f43f af69 	beq.w	8003c84 <HAL_OSPI_IRQHandler+0x34>
        hospi->State = HAL_OSPI_STATE_READY;
 8003db2:	2302      	movs	r3, #2
 8003db4:	6463      	str	r3, [r4, #68]	; 0x44
        HAL_OSPI_ErrorCallback(hospi);
 8003db6:	4620      	mov	r0, r4
 8003db8:	f7ff ff1e 	bl	8003bf8 <HAL_OSPI_ErrorCallback>
 8003dbc:	e762      	b.n	8003c84 <HAL_OSPI_IRQHandler+0x34>
      hospi->State = HAL_OSPI_STATE_READY;
 8003dbe:	2302      	movs	r3, #2
 8003dc0:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_OSPI_ErrorCallback(hospi);
 8003dc2:	4620      	mov	r0, r4
 8003dc4:	f7ff ff18 	bl	8003bf8 <HAL_OSPI_ErrorCallback>
 8003dc8:	e75c      	b.n	8003c84 <HAL_OSPI_IRQHandler+0x34>
  else if (((flag & HAL_OSPI_FLAG_TO) != 0U) && ((itsource & HAL_OSPI_IT_TO) != 0U))
 8003dca:	f013 0f10 	tst.w	r3, #16
 8003dce:	f43f af59 	beq.w	8003c84 <HAL_OSPI_IRQHandler+0x34>
 8003dd2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8003dd6:	f43f af55 	beq.w	8003c84 <HAL_OSPI_IRQHandler+0x34>
    hospi->Instance->FCR = HAL_OSPI_FLAG_TO;
 8003dda:	2310      	movs	r3, #16
 8003ddc:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_OSPI_TimeOutCallback(hospi);
 8003dde:	4620      	mov	r0, r4
 8003de0:	f7ff ff35 	bl	8003c4e <HAL_OSPI_TimeOutCallback>
}
 8003de4:	e74e      	b.n	8003c84 <HAL_OSPI_IRQHandler+0x34>
 8003de6:	bf00      	nop
 8003de8:	08003bfd 	.word	0x08003bfd

08003dec <HAL_OSPI_SetTimeout>:
  hospi->Timeout = Timeout;
 8003dec:	64c1      	str	r1, [r0, #76]	; 0x4c
}
 8003dee:	2000      	movs	r0, #0
 8003df0:	4770      	bx	lr
	...

08003df4 <HAL_OSPI_Init>:
{
 8003df4:	b530      	push	{r4, r5, lr}
 8003df6:	b083      	sub	sp, #12
 8003df8:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003dfa:	f7fe faeb 	bl	80023d4 <HAL_GetTick>
  if (hospi == NULL)
 8003dfe:	2c00      	cmp	r4, #0
 8003e00:	d06b      	beq.n	8003eda <HAL_OSPI_Init+0xe6>
 8003e02:	4605      	mov	r5, r0
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8003e04:	2300      	movs	r3, #0
 8003e06:	64a3      	str	r3, [r4, #72]	; 0x48
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8003e08:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003e0a:	b113      	cbz	r3, 8003e12 <HAL_OSPI_Init+0x1e>
  HAL_StatusTypeDef status = HAL_OK;
 8003e0c:	2000      	movs	r0, #0
}
 8003e0e:	b003      	add	sp, #12
 8003e10:	bd30      	pop	{r4, r5, pc}
      HAL_OSPI_MspInit(hospi);
 8003e12:	4620      	mov	r0, r4
 8003e14:	f7fd fb6c 	bl	80014f0 <HAL_OSPI_MspInit>
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8003e18:	f241 3188 	movw	r1, #5000	; 0x1388
 8003e1c:	4620      	mov	r0, r4
 8003e1e:	f7ff ffe5 	bl	8003dec <HAL_OSPI_SetTimeout>
      MODIFY_REG(hospi->Instance->DCR1,
 8003e22:	6820      	ldr	r0, [r4, #0]
 8003e24:	6882      	ldr	r2, [r0, #8]
 8003e26:	4b2e      	ldr	r3, [pc, #184]	; (8003ee0 <HAL_OSPI_Init+0xec>)
 8003e28:	4013      	ands	r3, r2
 8003e2a:	68e2      	ldr	r2, [r4, #12]
 8003e2c:	6921      	ldr	r1, [r4, #16]
 8003e2e:	3901      	subs	r1, #1
 8003e30:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003e34:	6961      	ldr	r1, [r4, #20]
 8003e36:	3901      	subs	r1, #1
 8003e38:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003e3c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003e3e:	430a      	orrs	r2, r1
 8003e40:	69e1      	ldr	r1, [r4, #28]
 8003e42:	430a      	orrs	r2, r1
 8003e44:	4313      	orrs	r3, r2
 8003e46:	6083      	str	r3, [r0, #8]
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 8003e48:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003e4a:	6822      	ldr	r2, [r4, #0]
 8003e4c:	041b      	lsls	r3, r3, #16
 8003e4e:	6113      	str	r3, [r2, #16]
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8003e50:	6821      	ldr	r1, [r4, #0]
 8003e52:	680b      	ldr	r3, [r1, #0]
 8003e54:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8003e58:	6862      	ldr	r2, [r4, #4]
 8003e5a:	3a01      	subs	r2, #1
 8003e5c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003e60:	600b      	str	r3, [r1, #0]
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8003e62:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003e64:	9300      	str	r3, [sp, #0]
 8003e66:	462b      	mov	r3, r5
 8003e68:	2200      	movs	r2, #0
 8003e6a:	2120      	movs	r1, #32
 8003e6c:	4620      	mov	r0, r4
 8003e6e:	f7ff fd8d 	bl	800398c <OSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 8003e72:	2800      	cmp	r0, #0
 8003e74:	d1cb      	bne.n	8003e0e <HAL_OSPI_Init+0x1a>
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8003e76:	6821      	ldr	r1, [r4, #0]
 8003e78:	68cb      	ldr	r3, [r1, #12]
 8003e7a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003e7e:	6a22      	ldr	r2, [r4, #32]
 8003e80:	3a01      	subs	r2, #1
 8003e82:	4313      	orrs	r3, r2
 8003e84:	60cb      	str	r3, [r1, #12]
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8003e86:	6822      	ldr	r2, [r4, #0]
 8003e88:	6813      	ldr	r3, [r2, #0]
 8003e8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e8e:	68a1      	ldr	r1, [r4, #8]
 8003e90:	430b      	orrs	r3, r1
 8003e92:	6013      	str	r3, [r2, #0]
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8003e94:	6821      	ldr	r1, [r4, #0]
 8003e96:	f8d1 3108 	ldr.w	r3, [r1, #264]	; 0x108
 8003e9a:	f023 43a0 	bic.w	r3, r3, #1342177280	; 0x50000000
 8003e9e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003ea0:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8003ea2:	432a      	orrs	r2, r5
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
        __HAL_OSPI_ENABLE(hospi);
 8003eaa:	6822      	ldr	r2, [r4, #0]
 8003eac:	6813      	ldr	r3, [r2, #0]
 8003eae:	f043 0301 	orr.w	r3, r3, #1
 8003eb2:	6013      	str	r3, [r2, #0]
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8003eb4:	69a3      	ldr	r3, [r4, #24]
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d006      	beq.n	8003ec8 <HAL_OSPI_Init+0xd4>
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8003eba:	68e3      	ldr	r3, [r4, #12]
 8003ebc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ec0:	d008      	beq.n	8003ed4 <HAL_OSPI_Init+0xe0>
          hospi->State = HAL_OSPI_STATE_READY;
 8003ec2:	2302      	movs	r3, #2
 8003ec4:	6463      	str	r3, [r4, #68]	; 0x44
 8003ec6:	e7a2      	b.n	8003e0e <HAL_OSPI_Init+0x1a>
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8003ec8:	6822      	ldr	r2, [r4, #0]
 8003eca:	6893      	ldr	r3, [r2, #8]
 8003ecc:	f043 0302 	orr.w	r3, r3, #2
 8003ed0:	6093      	str	r3, [r2, #8]
 8003ed2:	e7f2      	b.n	8003eba <HAL_OSPI_Init+0xc6>
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	6463      	str	r3, [r4, #68]	; 0x44
 8003ed8:	e799      	b.n	8003e0e <HAL_OSPI_Init+0x1a>
    status = HAL_ERROR;
 8003eda:	2001      	movs	r0, #1
 8003edc:	e797      	b.n	8003e0e <HAL_OSPI_Init+0x1a>
 8003ede:	bf00      	nop
 8003ee0:	f8e0f8f4 	.word	0xf8e0f8f4

08003ee4 <HAL_OSPIM_Config>:
{
 8003ee4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003ee8:	b08b      	sub	sp, #44	; 0x2c
 8003eea:	4681      	mov	r9, r0
 8003eec:	460d      	mov	r5, r1
  if (hospi->Instance == OCTOSPI1)
 8003eee:	6802      	ldr	r2, [r0, #0]
 8003ef0:	4bb2      	ldr	r3, [pc, #712]	; (80041bc <HAL_OSPIM_Config+0x2d8>)
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d005      	beq.n	8003f02 <HAL_OSPIM_Config+0x1e>
    other_instance = 0U;
 8003ef6:	f04f 0800 	mov.w	r8, #0
    instance = 1U;
 8003efa:	2601      	movs	r6, #1
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8003efc:	2300      	movs	r3, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003efe:	461f      	mov	r7, r3
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8003f00:	e004      	b.n	8003f0c <HAL_OSPIM_Config+0x28>
    other_instance = 1U;
 8003f02:	f04f 0801 	mov.w	r8, #1
    instance = 0U;
 8003f06:	2600      	movs	r6, #0
 8003f08:	e7f8      	b.n	8003efc <HAL_OSPIM_Config+0x18>
      status = HAL_ERROR;
 8003f0a:	4623      	mov	r3, r4
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d80f      	bhi.n	8003f30 <HAL_OSPIM_Config+0x4c>
    if (OSPIM_GetConfig(index+1U, &(IOM_cfg[index])) != HAL_OK)
 8003f10:	1c5c      	adds	r4, r3, #1
 8003f12:	b2e4      	uxtb	r4, r4
 8003f14:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003f18:	eb0d 0183 	add.w	r1, sp, r3, lsl #2
 8003f1c:	4620      	mov	r0, r4
 8003f1e:	f7ff fcc9 	bl	80038b4 <OSPIM_GetConfig>
 8003f22:	2800      	cmp	r0, #0
 8003f24:	d0f1      	beq.n	8003f0a <HAL_OSPIM_Config+0x26>
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8003f26:	2308      	movs	r3, #8
 8003f28:	f8c9 3048 	str.w	r3, [r9, #72]	; 0x48
      status = HAL_ERROR;
 8003f2c:	2701      	movs	r7, #1
 8003f2e:	e7ec      	b.n	8003f0a <HAL_OSPIM_Config+0x26>
  if (status == HAL_OK)
 8003f30:	2f00      	cmp	r7, #0
 8003f32:	f040 812c 	bne.w	800418e <HAL_OSPIM_Config+0x2aa>
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8003f36:	4ba1      	ldr	r3, [pc, #644]	; (80041bc <HAL_OSPIM_Config+0x2d8>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f013 0f01 	tst.w	r3, #1
 8003f3e:	f000 812a 	beq.w	8004196 <HAL_OSPIM_Config+0x2b2>
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8003f42:	4a9e      	ldr	r2, [pc, #632]	; (80041bc <HAL_OSPIM_Config+0x2d8>)
 8003f44:	6813      	ldr	r3, [r2, #0]
 8003f46:	f023 0301 	bic.w	r3, r3, #1
 8003f4a:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8003f4c:	2101      	movs	r1, #1
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8003f4e:	4b9c      	ldr	r3, [pc, #624]	; (80041c0 <HAL_OSPIM_Config+0x2dc>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f013 0f01 	tst.w	r3, #1
 8003f56:	d007      	beq.n	8003f68 <HAL_OSPIM_Config+0x84>
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8003f58:	4a99      	ldr	r2, [pc, #612]	; (80041c0 <HAL_OSPIM_Config+0x2dc>)
 8003f5a:	6813      	ldr	r3, [r2, #0]
 8003f5c:	f023 0301 	bic.w	r3, r3, #1
 8003f60:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8003f62:	f041 0102 	orr.w	r1, r1, #2
 8003f66:	b2c9      	uxtb	r1, r1
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8003f68:	eb06 0286 	add.w	r2, r6, r6, lsl #2
 8003f6c:	ab0a      	add	r3, sp, #40	; 0x28
 8003f6e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8003f72:	f852 3c20 	ldr.w	r3, [r2, #-32]
 8003f76:	3b01      	subs	r3, #1
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	4892      	ldr	r0, [pc, #584]	; (80041c4 <HAL_OSPIM_Config+0x2e0>)
 8003f7c:	4418      	add	r0, r3
 8003f7e:	6843      	ldr	r3, [r0, #4]
 8003f80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f84:	6043      	str	r3, [r0, #4]
      if (IOM_cfg[instance].ClkPort != 0U)
 8003f86:	f852 3c28 	ldr.w	r3, [r2, #-40]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d03b      	beq.n	8004006 <HAL_OSPIM_Config+0x122>
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8003f8e:	3b01      	subs	r3, #1
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	4a8c      	ldr	r2, [pc, #560]	; (80041c4 <HAL_OSPIM_Config+0x2e0>)
 8003f94:	441a      	add	r2, r3
 8003f96:	6853      	ldr	r3, [r2, #4]
 8003f98:	f023 0301 	bic.w	r3, r3, #1
 8003f9c:	6053      	str	r3, [r2, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8003f9e:	eb06 0386 	add.w	r3, r6, r6, lsl #2
 8003fa2:	aa0a      	add	r2, sp, #40	; 0x28
 8003fa4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003fa8:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8003fac:	b13b      	cbz	r3, 8003fbe <HAL_OSPIM_Config+0xda>
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	4a84      	ldr	r2, [pc, #528]	; (80041c4 <HAL_OSPIM_Config+0x2e0>)
 8003fb4:	441a      	add	r2, r3
 8003fb6:	6853      	ldr	r3, [r2, #4]
 8003fb8:	f023 0310 	bic.w	r3, r3, #16
 8003fbc:	6053      	str	r3, [r2, #4]
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003fbe:	eb06 0386 	add.w	r3, r6, r6, lsl #2
 8003fc2:	aa0a      	add	r2, sp, #40	; 0x28
 8003fc4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003fc8:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8003fcc:	b14b      	cbz	r3, 8003fe2 <HAL_OSPIM_Config+0xfe>
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8003fce:	3b01      	subs	r3, #1
 8003fd0:	f003 0301 	and.w	r3, r3, #1
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	4a7b      	ldr	r2, [pc, #492]	; (80041c4 <HAL_OSPIM_Config+0x2e0>)
 8003fd8:	441a      	add	r2, r3
 8003fda:	6853      	ldr	r3, [r2, #4]
 8003fdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fe0:	6053      	str	r3, [r2, #4]
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003fe2:	eb06 0386 	add.w	r3, r6, r6, lsl #2
 8003fe6:	aa0a      	add	r2, sp, #40	; 0x28
 8003fe8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003fec:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8003ff0:	b14b      	cbz	r3, 8004006 <HAL_OSPIM_Config+0x122>
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8003ff2:	3b01      	subs	r3, #1
 8003ff4:	f003 0301 	and.w	r3, r3, #1
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	4a72      	ldr	r2, [pc, #456]	; (80041c4 <HAL_OSPIM_Config+0x2e0>)
 8003ffc:	441a      	add	r2, r3
 8003ffe:	6853      	ldr	r3, [r2, #4]
 8004000:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004004:	6053      	str	r3, [r2, #4]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8004006:	682a      	ldr	r2, [r5, #0]
 8004008:	4643      	mov	r3, r8
 800400a:	eb08 0088 	add.w	r0, r8, r8, lsl #2
 800400e:	ac0a      	add	r4, sp, #40	; 0x28
 8004010:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8004014:	f850 0c28 	ldr.w	r0, [r0, #-40]
 8004018:	4282      	cmp	r2, r0
 800401a:	d017      	beq.n	800404c <HAL_OSPIM_Config+0x168>
 800401c:	686a      	ldr	r2, [r5, #4]
 800401e:	eb08 0888 	add.w	r8, r8, r8, lsl #2
 8004022:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 8004026:	f858 4c24 	ldr.w	r4, [r8, #-36]
 800402a:	42a2      	cmp	r2, r4
 800402c:	d00e      	beq.n	800404c <HAL_OSPIM_Config+0x168>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800402e:	68ac      	ldr	r4, [r5, #8]
 8004030:	f858 2c20 	ldr.w	r2, [r8, #-32]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8004034:	4294      	cmp	r4, r2
 8004036:	d009      	beq.n	800404c <HAL_OSPIM_Config+0x168>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8004038:	68ec      	ldr	r4, [r5, #12]
 800403a:	f858 2c1c 	ldr.w	r2, [r8, #-28]
 800403e:	4294      	cmp	r4, r2
 8004040:	d004      	beq.n	800404c <HAL_OSPIM_Config+0x168>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8004042:	692c      	ldr	r4, [r5, #16]
 8004044:	f858 2c18 	ldr.w	r2, [r8, #-24]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8004048:	4294      	cmp	r4, r2
 800404a:	d145      	bne.n	80040d8 <HAL_OSPIM_Config+0x1f4>
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 800404c:	3801      	subs	r0, #1
 800404e:	0080      	lsls	r0, r0, #2
 8004050:	4a5c      	ldr	r2, [pc, #368]	; (80041c4 <HAL_OSPIM_Config+0x2e0>)
 8004052:	4402      	add	r2, r0
 8004054:	6850      	ldr	r0, [r2, #4]
 8004056:	f020 0001 	bic.w	r0, r0, #1
 800405a:	6050      	str	r0, [r2, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 800405c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8004060:	a80a      	add	r0, sp, #40	; 0x28
 8004062:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004066:	f852 2c24 	ldr.w	r2, [r2, #-36]
 800406a:	b13a      	cbz	r2, 800407c <HAL_OSPIM_Config+0x198>
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 800406c:	3a01      	subs	r2, #1
 800406e:	0092      	lsls	r2, r2, #2
 8004070:	4854      	ldr	r0, [pc, #336]	; (80041c4 <HAL_OSPIM_Config+0x2e0>)
 8004072:	4410      	add	r0, r2
 8004074:	6842      	ldr	r2, [r0, #4]
 8004076:	f022 0210 	bic.w	r2, r2, #16
 800407a:	6042      	str	r2, [r0, #4]
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 800407c:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8004080:	aa0a      	add	r2, sp, #40	; 0x28
 8004082:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8004086:	f850 2c20 	ldr.w	r2, [r0, #-32]
 800408a:	3a01      	subs	r2, #1
 800408c:	0092      	lsls	r2, r2, #2
 800408e:	4c4d      	ldr	r4, [pc, #308]	; (80041c4 <HAL_OSPIM_Config+0x2e0>)
 8004090:	4414      	add	r4, r2
 8004092:	6862      	ldr	r2, [r4, #4]
 8004094:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004098:	6062      	str	r2, [r4, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800409a:	f850 2c1c 	ldr.w	r2, [r0, #-28]
 800409e:	b14a      	cbz	r2, 80040b4 <HAL_OSPIM_Config+0x1d0>
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 80040a0:	3a01      	subs	r2, #1
 80040a2:	f002 0201 	and.w	r2, r2, #1
 80040a6:	0092      	lsls	r2, r2, #2
 80040a8:	4846      	ldr	r0, [pc, #280]	; (80041c4 <HAL_OSPIM_Config+0x2e0>)
 80040aa:	4410      	add	r0, r2
 80040ac:	6842      	ldr	r2, [r0, #4]
 80040ae:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80040b2:	6042      	str	r2, [r0, #4]
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80040b4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80040b8:	aa0a      	add	r2, sp, #40	; 0x28
 80040ba:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80040be:	f853 3c18 	ldr.w	r3, [r3, #-24]
 80040c2:	b14b      	cbz	r3, 80040d8 <HAL_OSPIM_Config+0x1f4>
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 80040c4:	3b01      	subs	r3, #1
 80040c6:	f003 0301 	and.w	r3, r3, #1
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	4a3d      	ldr	r2, [pc, #244]	; (80041c4 <HAL_OSPIM_Config+0x2e0>)
 80040ce:	441a      	add	r2, r3
 80040d0:	6853      	ldr	r3, [r2, #4]
 80040d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040d6:	6053      	str	r3, [r2, #4]
        MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 80040d8:	68aa      	ldr	r2, [r5, #8]
 80040da:	3a01      	subs	r2, #1
 80040dc:	4839      	ldr	r0, [pc, #228]	; (80041c4 <HAL_OSPIM_Config+0x2e0>)
 80040de:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80040e2:	6853      	ldr	r3, [r2, #4]
 80040e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040e8:	ea43 2346 	orr.w	r3, r3, r6, lsl #9
 80040ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040f0:	6053      	str	r3, [r2, #4]
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 80040f2:	682a      	ldr	r2, [r5, #0]
 80040f4:	3a01      	subs	r2, #1
 80040f6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80040fa:	6853      	ldr	r3, [r2, #4]
 80040fc:	f023 0303 	bic.w	r3, r3, #3
 8004100:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
 8004104:	f043 0301 	orr.w	r3, r3, #1
 8004108:	6053      	str	r3, [r2, #4]
      if (cfg->DQSPort != 0U)
 800410a:	686b      	ldr	r3, [r5, #4]
 800410c:	b15b      	cbz	r3, 8004126 <HAL_OSPIM_Config+0x242>
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 800410e:	3b01      	subs	r3, #1
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	4602      	mov	r2, r0
 8004114:	441a      	add	r2, r3
 8004116:	6853      	ldr	r3, [r2, #4]
 8004118:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800411c:	ea43 1346 	orr.w	r3, r3, r6, lsl #5
 8004120:	f043 0310 	orr.w	r3, r3, #16
 8004124:	6053      	str	r3, [r2, #4]
      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8004126:	68eb      	ldr	r3, [r5, #12]
 8004128:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800412c:	d035      	beq.n	800419a <HAL_OSPIM_Config+0x2b6>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 800412e:	3b01      	subs	r3, #1
 8004130:	f003 0301 	and.w	r3, r3, #1
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	4a23      	ldr	r2, [pc, #140]	; (80041c4 <HAL_OSPIM_Config+0x2e0>)
 8004138:	441a      	add	r2, r3
 800413a:	6853      	ldr	r3, [r2, #4]
 800413c:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8004140:	ea43 4386 	orr.w	r3, r3, r6, lsl #18
 8004144:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004148:	6053      	str	r3, [r2, #4]
      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800414a:	692b      	ldr	r3, [r5, #16]
 800414c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004150:	d03a      	beq.n	80041c8 <HAL_OSPIM_Config+0x2e4>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8004152:	3b01      	subs	r3, #1
 8004154:	f003 0301 	and.w	r3, r3, #1
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	4a1a      	ldr	r2, [pc, #104]	; (80041c4 <HAL_OSPIM_Config+0x2e0>)
 800415c:	441a      	add	r2, r3
 800415e:	6853      	ldr	r3, [r2, #4]
 8004160:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8004164:	ea43 4686 	orr.w	r6, r3, r6, lsl #18
 8004168:	f446 3640 	orr.w	r6, r6, #196608	; 0x30000
 800416c:	6056      	str	r6, [r2, #4]
    if ((ospi_enabled & 0x1U) != 0U)
 800416e:	f011 0f01 	tst.w	r1, #1
 8004172:	d004      	beq.n	800417e <HAL_OSPIM_Config+0x29a>
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8004174:	4a11      	ldr	r2, [pc, #68]	; (80041bc <HAL_OSPIM_Config+0x2d8>)
 8004176:	6813      	ldr	r3, [r2, #0]
 8004178:	f043 0301 	orr.w	r3, r3, #1
 800417c:	6013      	str	r3, [r2, #0]
    if ((ospi_enabled & 0x2U) != 0U)
 800417e:	f011 0f02 	tst.w	r1, #2
 8004182:	d004      	beq.n	800418e <HAL_OSPIM_Config+0x2aa>
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8004184:	4a0e      	ldr	r2, [pc, #56]	; (80041c0 <HAL_OSPIM_Config+0x2dc>)
 8004186:	6813      	ldr	r3, [r2, #0]
 8004188:	f043 0301 	orr.w	r3, r3, #1
 800418c:	6013      	str	r3, [r2, #0]
}
 800418e:	4638      	mov	r0, r7
 8004190:	b00b      	add	sp, #44	; 0x2c
 8004192:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  uint8_t ospi_enabled = 0U;
 8004196:	4639      	mov	r1, r7
 8004198:	e6d9      	b.n	8003f4e <HAL_OSPIM_Config+0x6a>
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800419a:	2b00      	cmp	r3, #0
 800419c:	d0d5      	beq.n	800414a <HAL_OSPIM_Config+0x266>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 800419e:	3b01      	subs	r3, #1
 80041a0:	f003 0301 	and.w	r3, r3, #1
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	4a07      	ldr	r2, [pc, #28]	; (80041c4 <HAL_OSPIM_Config+0x2e0>)
 80041a8:	441a      	add	r2, r3
 80041aa:	6853      	ldr	r3, [r2, #4]
 80041ac:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80041b0:	ea43 6386 	orr.w	r3, r3, r6, lsl #26
 80041b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041b8:	6053      	str	r3, [r2, #4]
 80041ba:	e7c6      	b.n	800414a <HAL_OSPIM_Config+0x266>
 80041bc:	a0001000 	.word	0xa0001000
 80041c0:	a0001400 	.word	0xa0001400
 80041c4:	50061c00 	.word	0x50061c00
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d0d0      	beq.n	800416e <HAL_OSPIM_Config+0x28a>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 80041cc:	3b01      	subs	r3, #1
 80041ce:	f003 0301 	and.w	r3, r3, #1
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	4a05      	ldr	r2, [pc, #20]	; (80041ec <HAL_OSPIM_Config+0x308>)
 80041d6:	441a      	add	r2, r3
 80041d8:	6853      	ldr	r3, [r2, #4]
 80041da:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80041de:	ea43 6686 	orr.w	r6, r3, r6, lsl #26
 80041e2:	f046 7640 	orr.w	r6, r6, #50331648	; 0x3000000
 80041e6:	6056      	str	r6, [r2, #4]
 80041e8:	e7c1      	b.n	800416e <HAL_OSPIM_Config+0x28a>
 80041ea:	bf00      	nop
 80041ec:	50061c00 	.word	0x50061c00

080041f0 <HAL_PWREx_GetVoltageRange>:
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80041f0:	4b07      	ldr	r3, [pc, #28]	; (8004210 <HAL_PWREx_GetVoltageRange+0x20>)
 80041f2:	6818      	ldr	r0, [r3, #0]
 80041f4:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80041f8:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80041fc:	d004      	beq.n	8004208 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80041fe:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8004202:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 8004206:	d100      	bne.n	800420a <HAL_PWREx_GetVoltageRange+0x1a>
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004208:	4770      	bx	lr
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800420a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800420e:	e7fb      	b.n	8004208 <HAL_PWREx_GetVoltageRange+0x18>
 8004210:	40007000 	.word	0x40007000

08004214 <HAL_PWREx_ControlVoltageScaling>:
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004214:	2800      	cmp	r0, #0
 8004216:	d136      	bne.n	8004286 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004218:	4b3e      	ldr	r3, [pc, #248]	; (8004314 <HAL_PWREx_ControlVoltageScaling+0x100>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004220:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004224:	d008      	beq.n	8004238 <HAL_PWREx_ControlVoltageScaling+0x24>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004226:	4a3b      	ldr	r2, [pc, #236]	; (8004314 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8004228:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 800422c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004230:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004234:	2000      	movs	r0, #0
 8004236:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004238:	4a36      	ldr	r2, [pc, #216]	; (8004314 <HAL_PWREx_ControlVoltageScaling+0x100>)
 800423a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 800423e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004242:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004246:	6813      	ldr	r3, [r2, #0]
 8004248:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800424c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004250:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004252:	4b31      	ldr	r3, [pc, #196]	; (8004318 <HAL_PWREx_ControlVoltageScaling+0x104>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2232      	movs	r2, #50	; 0x32
 8004258:	fb02 f303 	mul.w	r3, r2, r3
 800425c:	4a2f      	ldr	r2, [pc, #188]	; (800431c <HAL_PWREx_ControlVoltageScaling+0x108>)
 800425e:	fba2 2303 	umull	r2, r3, r2, r3
 8004262:	0c9b      	lsrs	r3, r3, #18
 8004264:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004266:	e000      	b.n	800426a <HAL_PWREx_ControlVoltageScaling+0x56>
        wait_loop_index--;
 8004268:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800426a:	4a2a      	ldr	r2, [pc, #168]	; (8004314 <HAL_PWREx_ControlVoltageScaling+0x100>)
 800426c:	6952      	ldr	r2, [r2, #20]
 800426e:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8004272:	d001      	beq.n	8004278 <HAL_PWREx_ControlVoltageScaling+0x64>
 8004274:	2b00      	cmp	r3, #0
 8004276:	d1f7      	bne.n	8004268 <HAL_PWREx_ControlVoltageScaling+0x54>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004278:	4b26      	ldr	r3, [pc, #152]	; (8004314 <HAL_PWREx_ControlVoltageScaling+0x100>)
 800427a:	695b      	ldr	r3, [r3, #20]
 800427c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004280:	d144      	bne.n	800430c <HAL_PWREx_ControlVoltageScaling+0xf8>
  return HAL_OK;
 8004282:	2000      	movs	r0, #0
 8004284:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004286:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800428a:	d008      	beq.n	800429e <HAL_PWREx_ControlVoltageScaling+0x8a>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800428c:	4a21      	ldr	r2, [pc, #132]	; (8004314 <HAL_PWREx_ControlVoltageScaling+0x100>)
 800428e:	6813      	ldr	r3, [r2, #0]
 8004290:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004294:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004298:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800429a:	2000      	movs	r0, #0
 800429c:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800429e:	4b1d      	ldr	r3, [pc, #116]	; (8004314 <HAL_PWREx_ControlVoltageScaling+0x100>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80042a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042aa:	d008      	beq.n	80042be <HAL_PWREx_ControlVoltageScaling+0xaa>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80042ac:	4a19      	ldr	r2, [pc, #100]	; (8004314 <HAL_PWREx_ControlVoltageScaling+0x100>)
 80042ae:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80042b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042b6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  return HAL_OK;
 80042ba:	2000      	movs	r0, #0
 80042bc:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80042be:	4a15      	ldr	r2, [pc, #84]	; (8004314 <HAL_PWREx_ControlVoltageScaling+0x100>)
 80042c0:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80042c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80042cc:	6813      	ldr	r3, [r2, #0]
 80042ce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80042d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042d6:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80042d8:	4b0f      	ldr	r3, [pc, #60]	; (8004318 <HAL_PWREx_ControlVoltageScaling+0x104>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2232      	movs	r2, #50	; 0x32
 80042de:	fb02 f303 	mul.w	r3, r2, r3
 80042e2:	4a0e      	ldr	r2, [pc, #56]	; (800431c <HAL_PWREx_ControlVoltageScaling+0x108>)
 80042e4:	fba2 2303 	umull	r2, r3, r2, r3
 80042e8:	0c9b      	lsrs	r3, r3, #18
 80042ea:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042ec:	e000      	b.n	80042f0 <HAL_PWREx_ControlVoltageScaling+0xdc>
        wait_loop_index--;
 80042ee:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042f0:	4a08      	ldr	r2, [pc, #32]	; (8004314 <HAL_PWREx_ControlVoltageScaling+0x100>)
 80042f2:	6952      	ldr	r2, [r2, #20]
 80042f4:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80042f8:	d001      	beq.n	80042fe <HAL_PWREx_ControlVoltageScaling+0xea>
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d1f7      	bne.n	80042ee <HAL_PWREx_ControlVoltageScaling+0xda>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80042fe:	4b05      	ldr	r3, [pc, #20]	; (8004314 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8004300:	695b      	ldr	r3, [r3, #20]
 8004302:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004306:	d103      	bne.n	8004310 <HAL_PWREx_ControlVoltageScaling+0xfc>
  return HAL_OK;
 8004308:	2000      	movs	r0, #0
 800430a:	4770      	bx	lr
        return HAL_TIMEOUT;
 800430c:	2003      	movs	r0, #3
 800430e:	4770      	bx	lr
        return HAL_TIMEOUT;
 8004310:	2003      	movs	r0, #3
}
 8004312:	4770      	bx	lr
 8004314:	40007000 	.word	0x40007000
 8004318:	20000000 	.word	0x20000000
 800431c:	431bde83 	.word	0x431bde83

08004320 <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004320:	4a02      	ldr	r2, [pc, #8]	; (800432c <HAL_PWREx_EnableVddUSB+0xc>)
 8004322:	6853      	ldr	r3, [r2, #4]
 8004324:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004328:	6053      	str	r3, [r2, #4]
}
 800432a:	4770      	bx	lr
 800432c:	40007000 	.word	0x40007000

08004330 <RCC_GetSysClockFreqFromPLLSource>:
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004330:	4b1a      	ldr	r3, [pc, #104]	; (800439c <RCC_GetSysClockFreqFromPLLSource+0x6c>)
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	f003 0303 	and.w	r3, r3, #3

  switch (pllsource)
 8004338:	2b02      	cmp	r3, #2
 800433a:	d02b      	beq.n	8004394 <RCC_GetSysClockFreqFromPLLSource+0x64>
 800433c:	2b03      	cmp	r3, #3
 800433e:	d02b      	beq.n	8004398 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8004340:	2b01      	cmp	r3, #1
 8004342:	d014      	beq.n	800436e <RCC_GetSysClockFreqFromPLLSource+0x3e>
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
    break;
  default:
    /* unexpected */
    pllvco = 0;
 8004344:	2100      	movs	r1, #0
    break;
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004346:	4a15      	ldr	r2, [pc, #84]	; (800439c <RCC_GetSysClockFreqFromPLLSource+0x6c>)
 8004348:	68d3      	ldr	r3, [r2, #12]
 800434a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800434e:	3301      	adds	r3, #1
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004350:	68d0      	ldr	r0, [r2, #12]
 8004352:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8004356:	fb01 f000 	mul.w	r0, r1, r0
 800435a:	fbb0 f0f3 	udiv	r0, r0, r3
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800435e:	68d3      	ldr	r3, [r2, #12]
 8004360:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8004364:	3301      	adds	r3, #1
 8004366:	005b      	lsls	r3, r3, #1
  sysclockfreq = pllvco / pllr;

  return sysclockfreq;
}
 8004368:	fbb0 f0f3 	udiv	r0, r0, r3
 800436c:	4770      	bx	lr
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800436e:	4b0b      	ldr	r3, [pc, #44]	; (800439c <RCC_GetSysClockFreqFromPLLSource+0x6c>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f013 0f08 	tst.w	r3, #8
 8004376:	d108      	bne.n	800438a <RCC_GetSysClockFreqFromPLLSource+0x5a>
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004378:	4b08      	ldr	r3, [pc, #32]	; (800439c <RCC_GetSysClockFreqFromPLLSource+0x6c>)
 800437a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800437e:	f3c3 2303 	ubfx	r3, r3, #8, #4
    pllvco = MSIRangeTable[msirange];
 8004382:	4a07      	ldr	r2, [pc, #28]	; (80043a0 <RCC_GetSysClockFreqFromPLLSource+0x70>)
 8004384:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    break;
 8004388:	e7dd      	b.n	8004346 <RCC_GetSysClockFreqFromPLLSource+0x16>
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800438a:	4b04      	ldr	r3, [pc, #16]	; (800439c <RCC_GetSysClockFreqFromPLLSource+0x6c>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004392:	e7f6      	b.n	8004382 <RCC_GetSysClockFreqFromPLLSource+0x52>
  switch (pllsource)
 8004394:	4903      	ldr	r1, [pc, #12]	; (80043a4 <RCC_GetSysClockFreqFromPLLSource+0x74>)
 8004396:	e7d6      	b.n	8004346 <RCC_GetSysClockFreqFromPLLSource+0x16>
    pllvco = HSE_VALUE;
 8004398:	4903      	ldr	r1, [pc, #12]	; (80043a8 <RCC_GetSysClockFreqFromPLLSource+0x78>)
 800439a:	e7d4      	b.n	8004346 <RCC_GetSysClockFreqFromPLLSource+0x16>
 800439c:	40021000 	.word	0x40021000
 80043a0:	0800e264 	.word	0x0800e264
 80043a4:	00f42400 	.word	0x00f42400
 80043a8:	007a1200 	.word	0x007a1200

080043ac <RCC_SetFlashLatencyFromMSIRange>:
{
 80043ac:	b530      	push	{r4, r5, lr}
 80043ae:	b083      	sub	sp, #12
 80043b0:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80043b2:	4b1f      	ldr	r3, [pc, #124]	; (8004430 <RCC_SetFlashLatencyFromMSIRange+0x84>)
 80043b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043b6:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80043ba:	d00a      	beq.n	80043d2 <RCC_SetFlashLatencyFromMSIRange+0x26>
    vos = HAL_PWREx_GetVoltageRange();
 80043bc:	f7ff ff18 	bl	80041f0 <HAL_PWREx_GetVoltageRange>
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80043c0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80043c4:	d016      	beq.n	80043f4 <RCC_SetFlashLatencyFromMSIRange+0x48>
    if(msirange >= RCC_MSIRANGE_8)
 80043c6:	2c7f      	cmp	r4, #127	; 0x7f
 80043c8:	d81e      	bhi.n	8004408 <RCC_SetFlashLatencyFromMSIRange+0x5c>
      if(msirange == RCC_MSIRANGE_7)
 80043ca:	2c70      	cmp	r4, #112	; 0x70
 80043cc:	d02b      	beq.n	8004426 <RCC_SetFlashLatencyFromMSIRange+0x7a>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80043ce:	2100      	movs	r1, #0
 80043d0:	e01b      	b.n	800440a <RCC_SetFlashLatencyFromMSIRange+0x5e>
    __HAL_RCC_PWR_CLK_ENABLE();
 80043d2:	4d17      	ldr	r5, [pc, #92]	; (8004430 <RCC_SetFlashLatencyFromMSIRange+0x84>)
 80043d4:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80043d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043da:	65ab      	str	r3, [r5, #88]	; 0x58
 80043dc:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80043de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043e2:	9301      	str	r3, [sp, #4]
 80043e4:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 80043e6:	f7ff ff03 	bl	80041f0 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 80043ea:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80043ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043f0:	65ab      	str	r3, [r5, #88]	; 0x58
 80043f2:	e7e5      	b.n	80043c0 <RCC_SetFlashLatencyFromMSIRange+0x14>
    if(msirange > RCC_MSIRANGE_8)
 80043f4:	2c80      	cmp	r4, #128	; 0x80
 80043f6:	d903      	bls.n	8004400 <RCC_SetFlashLatencyFromMSIRange+0x54>
      if(msirange > RCC_MSIRANGE_10)
 80043f8:	2ca0      	cmp	r4, #160	; 0xa0
 80043fa:	d903      	bls.n	8004404 <RCC_SetFlashLatencyFromMSIRange+0x58>
        latency = FLASH_LATENCY_2; /* 2WS */
 80043fc:	2102      	movs	r1, #2
 80043fe:	e004      	b.n	800440a <RCC_SetFlashLatencyFromMSIRange+0x5e>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004400:	2100      	movs	r1, #0
 8004402:	e002      	b.n	800440a <RCC_SetFlashLatencyFromMSIRange+0x5e>
        latency = FLASH_LATENCY_1; /* 1WS */
 8004404:	2101      	movs	r1, #1
 8004406:	e000      	b.n	800440a <RCC_SetFlashLatencyFromMSIRange+0x5e>
      latency = FLASH_LATENCY_2; /* 2WS */
 8004408:	2102      	movs	r1, #2
  __HAL_FLASH_SET_LATENCY(latency);
 800440a:	4a0a      	ldr	r2, [pc, #40]	; (8004434 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 800440c:	6813      	ldr	r3, [r2, #0]
 800440e:	f023 030f 	bic.w	r3, r3, #15
 8004412:	430b      	orrs	r3, r1
 8004414:	6013      	str	r3, [r2, #0]
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004416:	6813      	ldr	r3, [r2, #0]
 8004418:	f003 030f 	and.w	r3, r3, #15
 800441c:	428b      	cmp	r3, r1
 800441e:	d104      	bne.n	800442a <RCC_SetFlashLatencyFromMSIRange+0x7e>
  return HAL_OK;
 8004420:	2000      	movs	r0, #0
}
 8004422:	b003      	add	sp, #12
 8004424:	bd30      	pop	{r4, r5, pc}
        latency = FLASH_LATENCY_1; /* 1WS */
 8004426:	2101      	movs	r1, #1
 8004428:	e7ef      	b.n	800440a <RCC_SetFlashLatencyFromMSIRange+0x5e>
    return HAL_ERROR;
 800442a:	2001      	movs	r0, #1
 800442c:	e7f9      	b.n	8004422 <RCC_SetFlashLatencyFromMSIRange+0x76>
 800442e:	bf00      	nop
 8004430:	40021000 	.word	0x40021000
 8004434:	40022000 	.word	0x40022000

08004438 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004438:	4a28      	ldr	r2, [pc, #160]	; (80044dc <HAL_RCC_GetSysClockFreq+0xa4>)
 800443a:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800443c:	68d2      	ldr	r2, [r2, #12]
 800443e:	f002 0203 	and.w	r2, r2, #3
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004442:	f013 030c 	ands.w	r3, r3, #12
 8004446:	d00a      	beq.n	800445e <HAL_RCC_GetSysClockFreq+0x26>
 8004448:	2b0c      	cmp	r3, #12
 800444a:	d006      	beq.n	800445a <HAL_RCC_GetSysClockFreq+0x22>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800444c:	2b04      	cmp	r3, #4
 800444e:	d01f      	beq.n	8004490 <HAL_RCC_GetSysClockFreq+0x58>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004450:	2b08      	cmp	r3, #8
 8004452:	d020      	beq.n	8004496 <HAL_RCC_GetSysClockFreq+0x5e>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004454:	2000      	movs	r0, #0
 8004456:	4602      	mov	r2, r0
 8004458:	e010      	b.n	800447c <HAL_RCC_GetSysClockFreq+0x44>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800445a:	2a01      	cmp	r2, #1
 800445c:	d1f6      	bne.n	800444c <HAL_RCC_GetSysClockFreq+0x14>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800445e:	4a1f      	ldr	r2, [pc, #124]	; (80044dc <HAL_RCC_GetSysClockFreq+0xa4>)
 8004460:	6812      	ldr	r2, [r2, #0]
 8004462:	f012 0f08 	tst.w	r2, #8
 8004466:	d10c      	bne.n	8004482 <HAL_RCC_GetSysClockFreq+0x4a>
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004468:	4a1c      	ldr	r2, [pc, #112]	; (80044dc <HAL_RCC_GetSysClockFreq+0xa4>)
 800446a:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 800446e:	f3c2 2203 	ubfx	r2, r2, #8, #4
    msirange = MSIRangeTable[msirange];
 8004472:	491b      	ldr	r1, [pc, #108]	; (80044e0 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004474:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004478:	b143      	cbz	r3, 800448c <HAL_RCC_GetSysClockFreq+0x54>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800447a:	2000      	movs	r0, #0
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800447c:	2b0c      	cmp	r3, #12
 800447e:	d00d      	beq.n	800449c <HAL_RCC_GetSysClockFreq+0x64>
}
 8004480:	4770      	bx	lr
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004482:	4a16      	ldr	r2, [pc, #88]	; (80044dc <HAL_RCC_GetSysClockFreq+0xa4>)
 8004484:	6812      	ldr	r2, [r2, #0]
 8004486:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800448a:	e7f2      	b.n	8004472 <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = msirange;
 800448c:	4610      	mov	r0, r2
 800448e:	e7f5      	b.n	800447c <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSI_VALUE;
 8004490:	4814      	ldr	r0, [pc, #80]	; (80044e4 <HAL_RCC_GetSysClockFreq+0xac>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004492:	2200      	movs	r2, #0
 8004494:	e7f2      	b.n	800447c <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSE_VALUE;
 8004496:	4814      	ldr	r0, [pc, #80]	; (80044e8 <HAL_RCC_GetSysClockFreq+0xb0>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004498:	2200      	movs	r2, #0
 800449a:	e7ef      	b.n	800447c <HAL_RCC_GetSysClockFreq+0x44>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800449c:	4b0f      	ldr	r3, [pc, #60]	; (80044dc <HAL_RCC_GetSysClockFreq+0xa4>)
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	d016      	beq.n	80044d6 <HAL_RCC_GetSysClockFreq+0x9e>
 80044a8:	2b03      	cmp	r3, #3
 80044aa:	d100      	bne.n	80044ae <HAL_RCC_GetSysClockFreq+0x76>
      pllvco = HSE_VALUE;
 80044ac:	4a0e      	ldr	r2, [pc, #56]	; (80044e8 <HAL_RCC_GetSysClockFreq+0xb0>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80044ae:	490b      	ldr	r1, [pc, #44]	; (80044dc <HAL_RCC_GetSysClockFreq+0xa4>)
 80044b0:	68c8      	ldr	r0, [r1, #12]
 80044b2:	f3c0 1003 	ubfx	r0, r0, #4, #4
 80044b6:	1c43      	adds	r3, r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80044b8:	68c8      	ldr	r0, [r1, #12]
 80044ba:	f3c0 2006 	ubfx	r0, r0, #8, #7
 80044be:	fb02 f000 	mul.w	r0, r2, r0
 80044c2:	fbb0 f0f3 	udiv	r0, r0, r3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80044c6:	68cb      	ldr	r3, [r1, #12]
 80044c8:	f3c3 6341 	ubfx	r3, r3, #25, #2
 80044cc:	3301      	adds	r3, #1
 80044ce:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco / pllr;
 80044d0:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 80044d4:	e7d4      	b.n	8004480 <HAL_RCC_GetSysClockFreq+0x48>
    switch (pllsource)
 80044d6:	4a03      	ldr	r2, [pc, #12]	; (80044e4 <HAL_RCC_GetSysClockFreq+0xac>)
 80044d8:	e7e9      	b.n	80044ae <HAL_RCC_GetSysClockFreq+0x76>
 80044da:	bf00      	nop
 80044dc:	40021000 	.word	0x40021000
 80044e0:	0800e264 	.word	0x0800e264
 80044e4:	00f42400 	.word	0x00f42400
 80044e8:	007a1200 	.word	0x007a1200

080044ec <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 80044ec:	2800      	cmp	r0, #0
 80044ee:	f000 8322 	beq.w	8004b36 <HAL_RCC_OscConfig+0x64a>
{
 80044f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044f4:	b083      	sub	sp, #12
 80044f6:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044f8:	4b96      	ldr	r3, [pc, #600]	; (8004754 <HAL_RCC_OscConfig+0x268>)
 80044fa:	689d      	ldr	r5, [r3, #8]
 80044fc:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004500:	68de      	ldr	r6, [r3, #12]
 8004502:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004506:	6803      	ldr	r3, [r0, #0]
 8004508:	f013 0f10 	tst.w	r3, #16
 800450c:	d05a      	beq.n	80045c4 <HAL_RCC_OscConfig+0xd8>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800450e:	b1e5      	cbz	r5, 800454a <HAL_RCC_OscConfig+0x5e>
 8004510:	2d0c      	cmp	r5, #12
 8004512:	d018      	beq.n	8004546 <HAL_RCC_OscConfig+0x5a>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004514:	69a3      	ldr	r3, [r4, #24]
 8004516:	2b00      	cmp	r3, #0
 8004518:	f000 80bb 	beq.w	8004692 <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_MSI_ENABLE();
 800451c:	4a8d      	ldr	r2, [pc, #564]	; (8004754 <HAL_RCC_OscConfig+0x268>)
 800451e:	6813      	ldr	r3, [r2, #0]
 8004520:	f043 0301 	orr.w	r3, r3, #1
 8004524:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004526:	f7fd ff55 	bl	80023d4 <HAL_GetTick>
 800452a:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800452c:	4b89      	ldr	r3, [pc, #548]	; (8004754 <HAL_RCC_OscConfig+0x268>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f013 0f02 	tst.w	r3, #2
 8004534:	f040 809a 	bne.w	800466c <HAL_RCC_OscConfig+0x180>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004538:	f7fd ff4c 	bl	80023d4 <HAL_GetTick>
 800453c:	1bc0      	subs	r0, r0, r7
 800453e:	2802      	cmp	r0, #2
 8004540:	d9f4      	bls.n	800452c <HAL_RCC_OscConfig+0x40>
            return HAL_TIMEOUT;
 8004542:	2003      	movs	r0, #3
 8004544:	e302      	b.n	8004b4c <HAL_RCC_OscConfig+0x660>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004546:	2e01      	cmp	r6, #1
 8004548:	d1e4      	bne.n	8004514 <HAL_RCC_OscConfig+0x28>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800454a:	4b82      	ldr	r3, [pc, #520]	; (8004754 <HAL_RCC_OscConfig+0x268>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f013 0f02 	tst.w	r3, #2
 8004552:	d003      	beq.n	800455c <HAL_RCC_OscConfig+0x70>
 8004554:	69a3      	ldr	r3, [r4, #24]
 8004556:	2b00      	cmp	r3, #0
 8004558:	f000 82ef 	beq.w	8004b3a <HAL_RCC_OscConfig+0x64e>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800455c:	6a20      	ldr	r0, [r4, #32]
 800455e:	4b7d      	ldr	r3, [pc, #500]	; (8004754 <HAL_RCC_OscConfig+0x268>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f013 0f08 	tst.w	r3, #8
 8004566:	d05b      	beq.n	8004620 <HAL_RCC_OscConfig+0x134>
 8004568:	4b7a      	ldr	r3, [pc, #488]	; (8004754 <HAL_RCC_OscConfig+0x268>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004570:	4298      	cmp	r0, r3
 8004572:	d85c      	bhi.n	800462e <HAL_RCC_OscConfig+0x142>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004574:	4b77      	ldr	r3, [pc, #476]	; (8004754 <HAL_RCC_OscConfig+0x268>)
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	f042 0208 	orr.w	r2, r2, #8
 800457c:	601a      	str	r2, [r3, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004584:	6a21      	ldr	r1, [r4, #32]
 8004586:	430a      	orrs	r2, r1
 8004588:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800458a:	685a      	ldr	r2, [r3, #4]
 800458c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004590:	69e1      	ldr	r1, [r4, #28]
 8004592:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004596:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004598:	2d00      	cmp	r5, #0
 800459a:	d060      	beq.n	800465e <HAL_RCC_OscConfig+0x172>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800459c:	f7ff ff4c 	bl	8004438 <HAL_RCC_GetSysClockFreq>
 80045a0:	4b6c      	ldr	r3, [pc, #432]	; (8004754 <HAL_RCC_OscConfig+0x268>)
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80045a8:	4a6b      	ldr	r2, [pc, #428]	; (8004758 <HAL_RCC_OscConfig+0x26c>)
 80045aa:	5cd3      	ldrb	r3, [r2, r3]
 80045ac:	f003 031f 	and.w	r3, r3, #31
 80045b0:	40d8      	lsrs	r0, r3
 80045b2:	4b6a      	ldr	r3, [pc, #424]	; (800475c <HAL_RCC_OscConfig+0x270>)
 80045b4:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 80045b6:	4b6a      	ldr	r3, [pc, #424]	; (8004760 <HAL_RCC_OscConfig+0x274>)
 80045b8:	6818      	ldr	r0, [r3, #0]
 80045ba:	f7fd fec7 	bl	800234c <HAL_InitTick>
        if(status != HAL_OK)
 80045be:	2800      	cmp	r0, #0
 80045c0:	f040 82c4 	bne.w	8004b4c <HAL_RCC_OscConfig+0x660>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045c4:	6823      	ldr	r3, [r4, #0]
 80045c6:	f013 0f01 	tst.w	r3, #1
 80045ca:	f000 8081 	beq.w	80046d0 <HAL_RCC_OscConfig+0x1e4>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80045ce:	2d08      	cmp	r5, #8
 80045d0:	d075      	beq.n	80046be <HAL_RCC_OscConfig+0x1d2>
 80045d2:	2d0c      	cmp	r5, #12
 80045d4:	d071      	beq.n	80046ba <HAL_RCC_OscConfig+0x1ce>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045d6:	6863      	ldr	r3, [r4, #4]
 80045d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045dc:	f000 8097 	beq.w	800470e <HAL_RCC_OscConfig+0x222>
 80045e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045e4:	f000 8099 	beq.w	800471a <HAL_RCC_OscConfig+0x22e>
 80045e8:	4b5a      	ldr	r3, [pc, #360]	; (8004754 <HAL_RCC_OscConfig+0x268>)
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80045f0:	601a      	str	r2, [r3, #0]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80045f8:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045fa:	6863      	ldr	r3, [r4, #4]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	f000 8099 	beq.w	8004734 <HAL_RCC_OscConfig+0x248>
        tickstart = HAL_GetTick();
 8004602:	f7fd fee7 	bl	80023d4 <HAL_GetTick>
 8004606:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004608:	4b52      	ldr	r3, [pc, #328]	; (8004754 <HAL_RCC_OscConfig+0x268>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004610:	d15e      	bne.n	80046d0 <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004612:	f7fd fedf 	bl	80023d4 <HAL_GetTick>
 8004616:	1bc0      	subs	r0, r0, r7
 8004618:	2864      	cmp	r0, #100	; 0x64
 800461a:	d9f5      	bls.n	8004608 <HAL_RCC_OscConfig+0x11c>
            return HAL_TIMEOUT;
 800461c:	2003      	movs	r0, #3
 800461e:	e295      	b.n	8004b4c <HAL_RCC_OscConfig+0x660>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004620:	4b4c      	ldr	r3, [pc, #304]	; (8004754 <HAL_RCC_OscConfig+0x268>)
 8004622:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004626:	091b      	lsrs	r3, r3, #4
 8004628:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800462c:	e7a0      	b.n	8004570 <HAL_RCC_OscConfig+0x84>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800462e:	f7ff febd 	bl	80043ac <RCC_SetFlashLatencyFromMSIRange>
 8004632:	2800      	cmp	r0, #0
 8004634:	f040 8283 	bne.w	8004b3e <HAL_RCC_OscConfig+0x652>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004638:	4b46      	ldr	r3, [pc, #280]	; (8004754 <HAL_RCC_OscConfig+0x268>)
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	f042 0208 	orr.w	r2, r2, #8
 8004640:	601a      	str	r2, [r3, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004648:	6a21      	ldr	r1, [r4, #32]
 800464a:	430a      	orrs	r2, r1
 800464c:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800464e:	685a      	ldr	r2, [r3, #4]
 8004650:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004654:	69e1      	ldr	r1, [r4, #28]
 8004656:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800465a:	605a      	str	r2, [r3, #4]
 800465c:	e79e      	b.n	800459c <HAL_RCC_OscConfig+0xb0>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800465e:	6a20      	ldr	r0, [r4, #32]
 8004660:	f7ff fea4 	bl	80043ac <RCC_SetFlashLatencyFromMSIRange>
 8004664:	2800      	cmp	r0, #0
 8004666:	d099      	beq.n	800459c <HAL_RCC_OscConfig+0xb0>
              return HAL_ERROR;
 8004668:	2001      	movs	r0, #1
 800466a:	e26f      	b.n	8004b4c <HAL_RCC_OscConfig+0x660>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800466c:	4b39      	ldr	r3, [pc, #228]	; (8004754 <HAL_RCC_OscConfig+0x268>)
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	f042 0208 	orr.w	r2, r2, #8
 8004674:	601a      	str	r2, [r3, #0]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800467c:	6a21      	ldr	r1, [r4, #32]
 800467e:	430a      	orrs	r2, r1
 8004680:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004682:	685a      	ldr	r2, [r3, #4]
 8004684:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004688:	69e1      	ldr	r1, [r4, #28]
 800468a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800468e:	605a      	str	r2, [r3, #4]
 8004690:	e798      	b.n	80045c4 <HAL_RCC_OscConfig+0xd8>
        __HAL_RCC_MSI_DISABLE();
 8004692:	4a30      	ldr	r2, [pc, #192]	; (8004754 <HAL_RCC_OscConfig+0x268>)
 8004694:	6813      	ldr	r3, [r2, #0]
 8004696:	f023 0301 	bic.w	r3, r3, #1
 800469a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800469c:	f7fd fe9a 	bl	80023d4 <HAL_GetTick>
 80046a0:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80046a2:	4b2c      	ldr	r3, [pc, #176]	; (8004754 <HAL_RCC_OscConfig+0x268>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f013 0f02 	tst.w	r3, #2
 80046aa:	d08b      	beq.n	80045c4 <HAL_RCC_OscConfig+0xd8>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80046ac:	f7fd fe92 	bl	80023d4 <HAL_GetTick>
 80046b0:	1bc0      	subs	r0, r0, r7
 80046b2:	2802      	cmp	r0, #2
 80046b4:	d9f5      	bls.n	80046a2 <HAL_RCC_OscConfig+0x1b6>
            return HAL_TIMEOUT;
 80046b6:	2003      	movs	r0, #3
 80046b8:	e248      	b.n	8004b4c <HAL_RCC_OscConfig+0x660>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80046ba:	2e03      	cmp	r6, #3
 80046bc:	d18b      	bne.n	80045d6 <HAL_RCC_OscConfig+0xea>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046be:	4b25      	ldr	r3, [pc, #148]	; (8004754 <HAL_RCC_OscConfig+0x268>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80046c6:	d003      	beq.n	80046d0 <HAL_RCC_OscConfig+0x1e4>
 80046c8:	6863      	ldr	r3, [r4, #4]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	f000 8239 	beq.w	8004b42 <HAL_RCC_OscConfig+0x656>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046d0:	6823      	ldr	r3, [r4, #0]
 80046d2:	f013 0f02 	tst.w	r3, #2
 80046d6:	d058      	beq.n	800478a <HAL_RCC_OscConfig+0x29e>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80046d8:	2d04      	cmp	r5, #4
 80046da:	d045      	beq.n	8004768 <HAL_RCC_OscConfig+0x27c>
 80046dc:	2d0c      	cmp	r5, #12
 80046de:	d041      	beq.n	8004764 <HAL_RCC_OscConfig+0x278>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80046e0:	68e3      	ldr	r3, [r4, #12]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d077      	beq.n	80047d6 <HAL_RCC_OscConfig+0x2ea>
        __HAL_RCC_HSI_ENABLE();
 80046e6:	4a1b      	ldr	r2, [pc, #108]	; (8004754 <HAL_RCC_OscConfig+0x268>)
 80046e8:	6813      	ldr	r3, [r2, #0]
 80046ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046ee:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80046f0:	f7fd fe70 	bl	80023d4 <HAL_GetTick>
 80046f4:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046f6:	4b17      	ldr	r3, [pc, #92]	; (8004754 <HAL_RCC_OscConfig+0x268>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80046fe:	d161      	bne.n	80047c4 <HAL_RCC_OscConfig+0x2d8>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004700:	f7fd fe68 	bl	80023d4 <HAL_GetTick>
 8004704:	1b80      	subs	r0, r0, r6
 8004706:	2802      	cmp	r0, #2
 8004708:	d9f5      	bls.n	80046f6 <HAL_RCC_OscConfig+0x20a>
            return HAL_TIMEOUT;
 800470a:	2003      	movs	r0, #3
 800470c:	e21e      	b.n	8004b4c <HAL_RCC_OscConfig+0x660>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800470e:	4a11      	ldr	r2, [pc, #68]	; (8004754 <HAL_RCC_OscConfig+0x268>)
 8004710:	6813      	ldr	r3, [r2, #0]
 8004712:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004716:	6013      	str	r3, [r2, #0]
 8004718:	e76f      	b.n	80045fa <HAL_RCC_OscConfig+0x10e>
 800471a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800471e:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004728:	601a      	str	r2, [r3, #0]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004730:	601a      	str	r2, [r3, #0]
 8004732:	e762      	b.n	80045fa <HAL_RCC_OscConfig+0x10e>
        tickstart = HAL_GetTick();
 8004734:	f7fd fe4e 	bl	80023d4 <HAL_GetTick>
 8004738:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800473a:	4b06      	ldr	r3, [pc, #24]	; (8004754 <HAL_RCC_OscConfig+0x268>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004742:	d0c5      	beq.n	80046d0 <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004744:	f7fd fe46 	bl	80023d4 <HAL_GetTick>
 8004748:	1bc0      	subs	r0, r0, r7
 800474a:	2864      	cmp	r0, #100	; 0x64
 800474c:	d9f5      	bls.n	800473a <HAL_RCC_OscConfig+0x24e>
            return HAL_TIMEOUT;
 800474e:	2003      	movs	r0, #3
 8004750:	e1fc      	b.n	8004b4c <HAL_RCC_OscConfig+0x660>
 8004752:	bf00      	nop
 8004754:	40021000 	.word	0x40021000
 8004758:	0800e24c 	.word	0x0800e24c
 800475c:	20000000 	.word	0x20000000
 8004760:	200000fc 	.word	0x200000fc
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004764:	2e02      	cmp	r6, #2
 8004766:	d1bb      	bne.n	80046e0 <HAL_RCC_OscConfig+0x1f4>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004768:	4ba7      	ldr	r3, [pc, #668]	; (8004a08 <HAL_RCC_OscConfig+0x51c>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004770:	d003      	beq.n	800477a <HAL_RCC_OscConfig+0x28e>
 8004772:	68e3      	ldr	r3, [r4, #12]
 8004774:	2b00      	cmp	r3, #0
 8004776:	f000 81e6 	beq.w	8004b46 <HAL_RCC_OscConfig+0x65a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800477a:	4aa3      	ldr	r2, [pc, #652]	; (8004a08 <HAL_RCC_OscConfig+0x51c>)
 800477c:	6853      	ldr	r3, [r2, #4]
 800477e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004782:	6921      	ldr	r1, [r4, #16]
 8004784:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004788:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800478a:	6823      	ldr	r3, [r4, #0]
 800478c:	f013 0f08 	tst.w	r3, #8
 8004790:	d04c      	beq.n	800482c <HAL_RCC_OscConfig+0x340>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004792:	6963      	ldr	r3, [r4, #20]
 8004794:	b39b      	cbz	r3, 80047fe <HAL_RCC_OscConfig+0x312>
      __HAL_RCC_LSI_ENABLE();
 8004796:	4a9c      	ldr	r2, [pc, #624]	; (8004a08 <HAL_RCC_OscConfig+0x51c>)
 8004798:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800479c:	f043 0301 	orr.w	r3, r3, #1
 80047a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 80047a4:	f7fd fe16 	bl	80023d4 <HAL_GetTick>
 80047a8:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80047aa:	4b97      	ldr	r3, [pc, #604]	; (8004a08 <HAL_RCC_OscConfig+0x51c>)
 80047ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047b0:	f013 0f02 	tst.w	r3, #2
 80047b4:	d13a      	bne.n	800482c <HAL_RCC_OscConfig+0x340>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047b6:	f7fd fe0d 	bl	80023d4 <HAL_GetTick>
 80047ba:	1b80      	subs	r0, r0, r6
 80047bc:	2802      	cmp	r0, #2
 80047be:	d9f4      	bls.n	80047aa <HAL_RCC_OscConfig+0x2be>
          return HAL_TIMEOUT;
 80047c0:	2003      	movs	r0, #3
 80047c2:	e1c3      	b.n	8004b4c <HAL_RCC_OscConfig+0x660>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047c4:	4a90      	ldr	r2, [pc, #576]	; (8004a08 <HAL_RCC_OscConfig+0x51c>)
 80047c6:	6853      	ldr	r3, [r2, #4]
 80047c8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80047cc:	6921      	ldr	r1, [r4, #16]
 80047ce:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80047d2:	6053      	str	r3, [r2, #4]
 80047d4:	e7d9      	b.n	800478a <HAL_RCC_OscConfig+0x29e>
        __HAL_RCC_HSI_DISABLE();
 80047d6:	4a8c      	ldr	r2, [pc, #560]	; (8004a08 <HAL_RCC_OscConfig+0x51c>)
 80047d8:	6813      	ldr	r3, [r2, #0]
 80047da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047de:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80047e0:	f7fd fdf8 	bl	80023d4 <HAL_GetTick>
 80047e4:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80047e6:	4b88      	ldr	r3, [pc, #544]	; (8004a08 <HAL_RCC_OscConfig+0x51c>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80047ee:	d0cc      	beq.n	800478a <HAL_RCC_OscConfig+0x29e>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047f0:	f7fd fdf0 	bl	80023d4 <HAL_GetTick>
 80047f4:	1b80      	subs	r0, r0, r6
 80047f6:	2802      	cmp	r0, #2
 80047f8:	d9f5      	bls.n	80047e6 <HAL_RCC_OscConfig+0x2fa>
            return HAL_TIMEOUT;
 80047fa:	2003      	movs	r0, #3
 80047fc:	e1a6      	b.n	8004b4c <HAL_RCC_OscConfig+0x660>
      __HAL_RCC_LSI_DISABLE();
 80047fe:	4a82      	ldr	r2, [pc, #520]	; (8004a08 <HAL_RCC_OscConfig+0x51c>)
 8004800:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8004804:	f023 0301 	bic.w	r3, r3, #1
 8004808:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 800480c:	f7fd fde2 	bl	80023d4 <HAL_GetTick>
 8004810:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004812:	4b7d      	ldr	r3, [pc, #500]	; (8004a08 <HAL_RCC_OscConfig+0x51c>)
 8004814:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004818:	f013 0f02 	tst.w	r3, #2
 800481c:	d006      	beq.n	800482c <HAL_RCC_OscConfig+0x340>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800481e:	f7fd fdd9 	bl	80023d4 <HAL_GetTick>
 8004822:	1b80      	subs	r0, r0, r6
 8004824:	2802      	cmp	r0, #2
 8004826:	d9f4      	bls.n	8004812 <HAL_RCC_OscConfig+0x326>
          return HAL_TIMEOUT;
 8004828:	2003      	movs	r0, #3
 800482a:	e18f      	b.n	8004b4c <HAL_RCC_OscConfig+0x660>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800482c:	6823      	ldr	r3, [r4, #0]
 800482e:	f013 0f04 	tst.w	r3, #4
 8004832:	d07a      	beq.n	800492a <HAL_RCC_OscConfig+0x43e>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004834:	4b74      	ldr	r3, [pc, #464]	; (8004a08 <HAL_RCC_OscConfig+0x51c>)
 8004836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004838:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800483c:	d136      	bne.n	80048ac <HAL_RCC_OscConfig+0x3c0>
      __HAL_RCC_PWR_CLK_ENABLE();
 800483e:	4b72      	ldr	r3, [pc, #456]	; (8004a08 <HAL_RCC_OscConfig+0x51c>)
 8004840:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004842:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004846:	659a      	str	r2, [r3, #88]	; 0x58
 8004848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800484a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800484e:	9301      	str	r3, [sp, #4]
 8004850:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004852:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004854:	4b6d      	ldr	r3, [pc, #436]	; (8004a0c <HAL_RCC_OscConfig+0x520>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f413 7f80 	tst.w	r3, #256	; 0x100
 800485c:	d028      	beq.n	80048b0 <HAL_RCC_OscConfig+0x3c4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800485e:	68a3      	ldr	r3, [r4, #8]
 8004860:	2b01      	cmp	r3, #1
 8004862:	d039      	beq.n	80048d8 <HAL_RCC_OscConfig+0x3ec>
 8004864:	2b05      	cmp	r3, #5
 8004866:	d03f      	beq.n	80048e8 <HAL_RCC_OscConfig+0x3fc>
 8004868:	4b67      	ldr	r3, [pc, #412]	; (8004a08 <HAL_RCC_OscConfig+0x51c>)
 800486a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800486e:	f022 0201 	bic.w	r2, r2, #1
 8004872:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8004876:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800487a:	f022 0204 	bic.w	r2, r2, #4
 800487e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004882:	68a3      	ldr	r3, [r4, #8]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d03d      	beq.n	8004904 <HAL_RCC_OscConfig+0x418>
      tickstart = HAL_GetTick();
 8004888:	f7fd fda4 	bl	80023d4 <HAL_GetTick>
 800488c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800488e:	4b5e      	ldr	r3, [pc, #376]	; (8004a08 <HAL_RCC_OscConfig+0x51c>)
 8004890:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004894:	f013 0f02 	tst.w	r3, #2
 8004898:	d146      	bne.n	8004928 <HAL_RCC_OscConfig+0x43c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800489a:	f7fd fd9b 	bl	80023d4 <HAL_GetTick>
 800489e:	1bc0      	subs	r0, r0, r7
 80048a0:	f241 3388 	movw	r3, #5000	; 0x1388
 80048a4:	4298      	cmp	r0, r3
 80048a6:	d9f2      	bls.n	800488e <HAL_RCC_OscConfig+0x3a2>
          return HAL_TIMEOUT;
 80048a8:	2003      	movs	r0, #3
 80048aa:	e14f      	b.n	8004b4c <HAL_RCC_OscConfig+0x660>
    FlagStatus       pwrclkchanged = RESET;
 80048ac:	2600      	movs	r6, #0
 80048ae:	e7d1      	b.n	8004854 <HAL_RCC_OscConfig+0x368>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048b0:	4a56      	ldr	r2, [pc, #344]	; (8004a0c <HAL_RCC_OscConfig+0x520>)
 80048b2:	6813      	ldr	r3, [r2, #0]
 80048b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048b8:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80048ba:	f7fd fd8b 	bl	80023d4 <HAL_GetTick>
 80048be:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048c0:	4b52      	ldr	r3, [pc, #328]	; (8004a0c <HAL_RCC_OscConfig+0x520>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f413 7f80 	tst.w	r3, #256	; 0x100
 80048c8:	d1c9      	bne.n	800485e <HAL_RCC_OscConfig+0x372>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048ca:	f7fd fd83 	bl	80023d4 <HAL_GetTick>
 80048ce:	1bc0      	subs	r0, r0, r7
 80048d0:	2802      	cmp	r0, #2
 80048d2:	d9f5      	bls.n	80048c0 <HAL_RCC_OscConfig+0x3d4>
          return HAL_TIMEOUT;
 80048d4:	2003      	movs	r0, #3
 80048d6:	e139      	b.n	8004b4c <HAL_RCC_OscConfig+0x660>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048d8:	4a4b      	ldr	r2, [pc, #300]	; (8004a08 <HAL_RCC_OscConfig+0x51c>)
 80048da:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80048de:	f043 0301 	orr.w	r3, r3, #1
 80048e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80048e6:	e7cc      	b.n	8004882 <HAL_RCC_OscConfig+0x396>
 80048e8:	4b47      	ldr	r3, [pc, #284]	; (8004a08 <HAL_RCC_OscConfig+0x51c>)
 80048ea:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80048ee:	f042 0204 	orr.w	r2, r2, #4
 80048f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80048f6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80048fa:	f042 0201 	orr.w	r2, r2, #1
 80048fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8004902:	e7be      	b.n	8004882 <HAL_RCC_OscConfig+0x396>
      tickstart = HAL_GetTick();
 8004904:	f7fd fd66 	bl	80023d4 <HAL_GetTick>
 8004908:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800490a:	4b3f      	ldr	r3, [pc, #252]	; (8004a08 <HAL_RCC_OscConfig+0x51c>)
 800490c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004910:	f013 0f02 	tst.w	r3, #2
 8004914:	d008      	beq.n	8004928 <HAL_RCC_OscConfig+0x43c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004916:	f7fd fd5d 	bl	80023d4 <HAL_GetTick>
 800491a:	1bc0      	subs	r0, r0, r7
 800491c:	f241 3388 	movw	r3, #5000	; 0x1388
 8004920:	4298      	cmp	r0, r3
 8004922:	d9f2      	bls.n	800490a <HAL_RCC_OscConfig+0x41e>
          return HAL_TIMEOUT;
 8004924:	2003      	movs	r0, #3
 8004926:	e111      	b.n	8004b4c <HAL_RCC_OscConfig+0x660>
    if(pwrclkchanged == SET)
 8004928:	b9e6      	cbnz	r6, 8004964 <HAL_RCC_OscConfig+0x478>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800492a:	6823      	ldr	r3, [r4, #0]
 800492c:	f013 0f20 	tst.w	r3, #32
 8004930:	d035      	beq.n	800499e <HAL_RCC_OscConfig+0x4b2>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004932:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004934:	b1e3      	cbz	r3, 8004970 <HAL_RCC_OscConfig+0x484>
      __HAL_RCC_HSI48_ENABLE();
 8004936:	4a34      	ldr	r2, [pc, #208]	; (8004a08 <HAL_RCC_OscConfig+0x51c>)
 8004938:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 800493c:	f043 0301 	orr.w	r3, r3, #1
 8004940:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8004944:	f7fd fd46 	bl	80023d4 <HAL_GetTick>
 8004948:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800494a:	4b2f      	ldr	r3, [pc, #188]	; (8004a08 <HAL_RCC_OscConfig+0x51c>)
 800494c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004950:	f013 0f02 	tst.w	r3, #2
 8004954:	d123      	bne.n	800499e <HAL_RCC_OscConfig+0x4b2>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004956:	f7fd fd3d 	bl	80023d4 <HAL_GetTick>
 800495a:	1b80      	subs	r0, r0, r6
 800495c:	2802      	cmp	r0, #2
 800495e:	d9f4      	bls.n	800494a <HAL_RCC_OscConfig+0x45e>
          return HAL_TIMEOUT;
 8004960:	2003      	movs	r0, #3
 8004962:	e0f3      	b.n	8004b4c <HAL_RCC_OscConfig+0x660>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004964:	4a28      	ldr	r2, [pc, #160]	; (8004a08 <HAL_RCC_OscConfig+0x51c>)
 8004966:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004968:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800496c:	6593      	str	r3, [r2, #88]	; 0x58
 800496e:	e7dc      	b.n	800492a <HAL_RCC_OscConfig+0x43e>
      __HAL_RCC_HSI48_DISABLE();
 8004970:	4a25      	ldr	r2, [pc, #148]	; (8004a08 <HAL_RCC_OscConfig+0x51c>)
 8004972:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8004976:	f023 0301 	bic.w	r3, r3, #1
 800497a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 800497e:	f7fd fd29 	bl	80023d4 <HAL_GetTick>
 8004982:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004984:	4b20      	ldr	r3, [pc, #128]	; (8004a08 <HAL_RCC_OscConfig+0x51c>)
 8004986:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800498a:	f013 0f02 	tst.w	r3, #2
 800498e:	d006      	beq.n	800499e <HAL_RCC_OscConfig+0x4b2>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004990:	f7fd fd20 	bl	80023d4 <HAL_GetTick>
 8004994:	1b80      	subs	r0, r0, r6
 8004996:	2802      	cmp	r0, #2
 8004998:	d9f4      	bls.n	8004984 <HAL_RCC_OscConfig+0x498>
          return HAL_TIMEOUT;
 800499a:	2003      	movs	r0, #3
 800499c:	e0d6      	b.n	8004b4c <HAL_RCC_OscConfig+0x660>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800499e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	f000 80d2 	beq.w	8004b4a <HAL_RCC_OscConfig+0x65e>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	d017      	beq.n	80049da <HAL_RCC_OscConfig+0x4ee>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80049aa:	2d0c      	cmp	r5, #12
 80049ac:	f000 80d4 	beq.w	8004b58 <HAL_RCC_OscConfig+0x66c>
        __HAL_RCC_PLL_DISABLE();
 80049b0:	4a15      	ldr	r2, [pc, #84]	; (8004a08 <HAL_RCC_OscConfig+0x51c>)
 80049b2:	6813      	ldr	r3, [r2, #0]
 80049b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049b8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80049ba:	f7fd fd0b 	bl	80023d4 <HAL_GetTick>
 80049be:	4604      	mov	r4, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049c0:	4b11      	ldr	r3, [pc, #68]	; (8004a08 <HAL_RCC_OscConfig+0x51c>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80049c8:	f000 80ae 	beq.w	8004b28 <HAL_RCC_OscConfig+0x63c>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049cc:	f7fd fd02 	bl	80023d4 <HAL_GetTick>
 80049d0:	1b00      	subs	r0, r0, r4
 80049d2:	2802      	cmp	r0, #2
 80049d4:	d9f4      	bls.n	80049c0 <HAL_RCC_OscConfig+0x4d4>
            return HAL_TIMEOUT;
 80049d6:	2003      	movs	r0, #3
 80049d8:	e0b8      	b.n	8004b4c <HAL_RCC_OscConfig+0x660>
      pll_config = RCC->PLLCFGR;
 80049da:	4b0b      	ldr	r3, [pc, #44]	; (8004a08 <HAL_RCC_OscConfig+0x51c>)
 80049dc:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80049de:	f003 0103 	and.w	r1, r3, #3
 80049e2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80049e4:	4291      	cmp	r1, r2
 80049e6:	d013      	beq.n	8004a10 <HAL_RCC_OscConfig+0x524>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80049e8:	2d0c      	cmp	r5, #12
 80049ea:	f000 80b1 	beq.w	8004b50 <HAL_RCC_OscConfig+0x664>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80049ee:	4b06      	ldr	r3, [pc, #24]	; (8004a08 <HAL_RCC_OscConfig+0x51c>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 80049f6:	f040 80ad 	bne.w	8004b54 <HAL_RCC_OscConfig+0x668>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80049fa:	4b03      	ldr	r3, [pc, #12]	; (8004a08 <HAL_RCC_OscConfig+0x51c>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8004a02:	d02f      	beq.n	8004a64 <HAL_RCC_OscConfig+0x578>
            return HAL_ERROR;
 8004a04:	2001      	movs	r0, #1
 8004a06:	e0a1      	b.n	8004b4c <HAL_RCC_OscConfig+0x660>
 8004a08:	40021000 	.word	0x40021000
 8004a0c:	40007000 	.word	0x40007000
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a10:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004a14:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004a16:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a18:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8004a1c:	d1e4      	bne.n	80049e8 <HAL_RCC_OscConfig+0x4fc>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a1e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004a22:	6b61      	ldr	r1, [r4, #52]	; 0x34
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a24:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8004a28:	d1de      	bne.n	80049e8 <HAL_RCC_OscConfig+0x4fc>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004a2a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004a2e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a30:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8004a34:	d1d8      	bne.n	80049e8 <HAL_RCC_OscConfig+0x4fc>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a36:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8004a3a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004a3c:	0852      	lsrs	r2, r2, #1
 8004a3e:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004a40:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8004a44:	d1d0      	bne.n	80049e8 <HAL_RCC_OscConfig+0x4fc>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004a46:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8004a4a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004a4c:	0852      	lsrs	r2, r2, #1
 8004a4e:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a50:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8004a54:	d1c8      	bne.n	80049e8 <HAL_RCC_OscConfig+0x4fc>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a56:	4b41      	ldr	r3, [pc, #260]	; (8004b5c <HAL_RCC_OscConfig+0x670>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004a5e:	d049      	beq.n	8004af4 <HAL_RCC_OscConfig+0x608>
  return HAL_OK;
 8004a60:	2000      	movs	r0, #0
 8004a62:	e073      	b.n	8004b4c <HAL_RCC_OscConfig+0x660>
            __HAL_RCC_PLL_DISABLE();
 8004a64:	4a3d      	ldr	r2, [pc, #244]	; (8004b5c <HAL_RCC_OscConfig+0x670>)
 8004a66:	6813      	ldr	r3, [r2, #0]
 8004a68:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a6c:	6013      	str	r3, [r2, #0]
            tickstart = HAL_GetTick();
 8004a6e:	f7fd fcb1 	bl	80023d4 <HAL_GetTick>
 8004a72:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a74:	4b39      	ldr	r3, [pc, #228]	; (8004b5c <HAL_RCC_OscConfig+0x670>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004a7c:	d006      	beq.n	8004a8c <HAL_RCC_OscConfig+0x5a0>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a7e:	f7fd fca9 	bl	80023d4 <HAL_GetTick>
 8004a82:	1b40      	subs	r0, r0, r5
 8004a84:	2802      	cmp	r0, #2
 8004a86:	d9f5      	bls.n	8004a74 <HAL_RCC_OscConfig+0x588>
                return HAL_TIMEOUT;
 8004a88:	2003      	movs	r0, #3
 8004a8a:	e05f      	b.n	8004b4c <HAL_RCC_OscConfig+0x660>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a8c:	4a33      	ldr	r2, [pc, #204]	; (8004b5c <HAL_RCC_OscConfig+0x670>)
 8004a8e:	68d3      	ldr	r3, [r2, #12]
 8004a90:	4933      	ldr	r1, [pc, #204]	; (8004b60 <HAL_RCC_OscConfig+0x674>)
 8004a92:	4019      	ands	r1, r3
 8004a94:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004a96:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004a98:	3801      	subs	r0, #1
 8004a9a:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8004a9e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8004aa0:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8004aa4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004aa6:	0840      	lsrs	r0, r0, #1
 8004aa8:	3801      	subs	r0, #1
 8004aaa:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 8004aae:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004ab0:	0840      	lsrs	r0, r0, #1
 8004ab2:	3801      	subs	r0, #1
 8004ab4:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8004ab8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004aba:	ea43 63c0 	orr.w	r3, r3, r0, lsl #27
 8004abe:	430b      	orrs	r3, r1
 8004ac0:	60d3      	str	r3, [r2, #12]
            __HAL_RCC_PLL_ENABLE();
 8004ac2:	6813      	ldr	r3, [r2, #0]
 8004ac4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ac8:	6013      	str	r3, [r2, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004aca:	68d3      	ldr	r3, [r2, #12]
 8004acc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ad0:	60d3      	str	r3, [r2, #12]
            tickstart = HAL_GetTick();
 8004ad2:	f7fd fc7f 	bl	80023d4 <HAL_GetTick>
 8004ad6:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ad8:	4b20      	ldr	r3, [pc, #128]	; (8004b5c <HAL_RCC_OscConfig+0x670>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004ae0:	d106      	bne.n	8004af0 <HAL_RCC_OscConfig+0x604>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ae2:	f7fd fc77 	bl	80023d4 <HAL_GetTick>
 8004ae6:	1b00      	subs	r0, r0, r4
 8004ae8:	2802      	cmp	r0, #2
 8004aea:	d9f5      	bls.n	8004ad8 <HAL_RCC_OscConfig+0x5ec>
                return HAL_TIMEOUT;
 8004aec:	2003      	movs	r0, #3
 8004aee:	e02d      	b.n	8004b4c <HAL_RCC_OscConfig+0x660>
  return HAL_OK;
 8004af0:	2000      	movs	r0, #0
 8004af2:	e02b      	b.n	8004b4c <HAL_RCC_OscConfig+0x660>
          __HAL_RCC_PLL_ENABLE();
 8004af4:	4b19      	ldr	r3, [pc, #100]	; (8004b5c <HAL_RCC_OscConfig+0x670>)
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8004afc:	601a      	str	r2, [r3, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004afe:	68da      	ldr	r2, [r3, #12]
 8004b00:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8004b04:	60da      	str	r2, [r3, #12]
          tickstart = HAL_GetTick();
 8004b06:	f7fd fc65 	bl	80023d4 <HAL_GetTick>
 8004b0a:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b0c:	4b13      	ldr	r3, [pc, #76]	; (8004b5c <HAL_RCC_OscConfig+0x670>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004b14:	d106      	bne.n	8004b24 <HAL_RCC_OscConfig+0x638>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b16:	f7fd fc5d 	bl	80023d4 <HAL_GetTick>
 8004b1a:	1b03      	subs	r3, r0, r4
 8004b1c:	2b02      	cmp	r3, #2
 8004b1e:	d9f5      	bls.n	8004b0c <HAL_RCC_OscConfig+0x620>
              return HAL_TIMEOUT;
 8004b20:	2003      	movs	r0, #3
 8004b22:	e013      	b.n	8004b4c <HAL_RCC_OscConfig+0x660>
  return HAL_OK;
 8004b24:	2000      	movs	r0, #0
 8004b26:	e011      	b.n	8004b4c <HAL_RCC_OscConfig+0x660>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004b28:	4a0c      	ldr	r2, [pc, #48]	; (8004b5c <HAL_RCC_OscConfig+0x670>)
 8004b2a:	68d1      	ldr	r1, [r2, #12]
 8004b2c:	4b0d      	ldr	r3, [pc, #52]	; (8004b64 <HAL_RCC_OscConfig+0x678>)
 8004b2e:	400b      	ands	r3, r1
 8004b30:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 8004b32:	2000      	movs	r0, #0
 8004b34:	e00a      	b.n	8004b4c <HAL_RCC_OscConfig+0x660>
    return HAL_ERROR;
 8004b36:	2001      	movs	r0, #1
}
 8004b38:	4770      	bx	lr
        return HAL_ERROR;
 8004b3a:	2001      	movs	r0, #1
 8004b3c:	e006      	b.n	8004b4c <HAL_RCC_OscConfig+0x660>
            return HAL_ERROR;
 8004b3e:	2001      	movs	r0, #1
 8004b40:	e004      	b.n	8004b4c <HAL_RCC_OscConfig+0x660>
        return HAL_ERROR;
 8004b42:	2001      	movs	r0, #1
 8004b44:	e002      	b.n	8004b4c <HAL_RCC_OscConfig+0x660>
        return HAL_ERROR;
 8004b46:	2001      	movs	r0, #1
 8004b48:	e000      	b.n	8004b4c <HAL_RCC_OscConfig+0x660>
  return HAL_OK;
 8004b4a:	2000      	movs	r0, #0
}
 8004b4c:	b003      	add	sp, #12
 8004b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
          return HAL_ERROR;
 8004b50:	2001      	movs	r0, #1
 8004b52:	e7fb      	b.n	8004b4c <HAL_RCC_OscConfig+0x660>
            return HAL_ERROR;
 8004b54:	2001      	movs	r0, #1
 8004b56:	e7f9      	b.n	8004b4c <HAL_RCC_OscConfig+0x660>
        return HAL_ERROR;
 8004b58:	2001      	movs	r0, #1
 8004b5a:	e7f7      	b.n	8004b4c <HAL_RCC_OscConfig+0x660>
 8004b5c:	40021000 	.word	0x40021000
 8004b60:	019d800c 	.word	0x019d800c
 8004b64:	feeefffc 	.word	0xfeeefffc

08004b68 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8004b68:	2800      	cmp	r0, #0
 8004b6a:	f000 80ea 	beq.w	8004d42 <HAL_RCC_ClockConfig+0x1da>
{
 8004b6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b70:	460d      	mov	r5, r1
 8004b72:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b74:	4b77      	ldr	r3, [pc, #476]	; (8004d54 <HAL_RCC_ClockConfig+0x1ec>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 030f 	and.w	r3, r3, #15
 8004b7c:	428b      	cmp	r3, r1
 8004b7e:	d20b      	bcs.n	8004b98 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b80:	4a74      	ldr	r2, [pc, #464]	; (8004d54 <HAL_RCC_ClockConfig+0x1ec>)
 8004b82:	6813      	ldr	r3, [r2, #0]
 8004b84:	f023 030f 	bic.w	r3, r3, #15
 8004b88:	430b      	orrs	r3, r1
 8004b8a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b8c:	6813      	ldr	r3, [r2, #0]
 8004b8e:	f003 030f 	and.w	r3, r3, #15
 8004b92:	428b      	cmp	r3, r1
 8004b94:	f040 80d7 	bne.w	8004d46 <HAL_RCC_ClockConfig+0x1de>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b98:	6823      	ldr	r3, [r4, #0]
 8004b9a:	f013 0f02 	tst.w	r3, #2
 8004b9e:	d00c      	beq.n	8004bba <HAL_RCC_ClockConfig+0x52>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004ba0:	68a2      	ldr	r2, [r4, #8]
 8004ba2:	4b6d      	ldr	r3, [pc, #436]	; (8004d58 <HAL_RCC_ClockConfig+0x1f0>)
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d905      	bls.n	8004bba <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bae:	496a      	ldr	r1, [pc, #424]	; (8004d58 <HAL_RCC_ClockConfig+0x1f0>)
 8004bb0:	688b      	ldr	r3, [r1, #8]
 8004bb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004bb6:	431a      	orrs	r2, r3
 8004bb8:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bba:	6823      	ldr	r3, [r4, #0]
 8004bbc:	f013 0f01 	tst.w	r3, #1
 8004bc0:	d06e      	beq.n	8004ca0 <HAL_RCC_ClockConfig+0x138>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004bc2:	6863      	ldr	r3, [r4, #4]
 8004bc4:	2b03      	cmp	r3, #3
 8004bc6:	d00d      	beq.n	8004be4 <HAL_RCC_ClockConfig+0x7c>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bc8:	2b02      	cmp	r3, #2
 8004bca:	d025      	beq.n	8004c18 <HAL_RCC_ClockConfig+0xb0>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d13c      	bne.n	8004c4a <HAL_RCC_ClockConfig+0xe2>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004bd0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004bd4:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f013 0f02 	tst.w	r3, #2
 8004bde:	d121      	bne.n	8004c24 <HAL_RCC_ClockConfig+0xbc>
          return HAL_ERROR;
 8004be0:	2001      	movs	r0, #1
 8004be2:	e0a7      	b.n	8004d34 <HAL_RCC_ClockConfig+0x1cc>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004be4:	4b5c      	ldr	r3, [pc, #368]	; (8004d58 <HAL_RCC_ClockConfig+0x1f0>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004bec:	d101      	bne.n	8004bf2 <HAL_RCC_ClockConfig+0x8a>
        return HAL_ERROR;
 8004bee:	2001      	movs	r0, #1
 8004bf0:	e0a0      	b.n	8004d34 <HAL_RCC_ClockConfig+0x1cc>
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004bf2:	f7ff fb9d 	bl	8004330 <RCC_GetSysClockFreqFromPLLSource>
 8004bf6:	4b59      	ldr	r3, [pc, #356]	; (8004d5c <HAL_RCC_ClockConfig+0x1f4>)
 8004bf8:	4298      	cmp	r0, r3
 8004bfa:	d92d      	bls.n	8004c58 <HAL_RCC_ClockConfig+0xf0>
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004bfc:	4b56      	ldr	r3, [pc, #344]	; (8004d58 <HAL_RCC_ClockConfig+0x1f0>)
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 8004c04:	d12a      	bne.n	8004c5c <HAL_RCC_ClockConfig+0xf4>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004c06:	4a54      	ldr	r2, [pc, #336]	; (8004d58 <HAL_RCC_ClockConfig+0x1f0>)
 8004c08:	6893      	ldr	r3, [r2, #8]
 8004c0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c12:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004c14:	2780      	movs	r7, #128	; 0x80
 8004c16:	e024      	b.n	8004c62 <HAL_RCC_ClockConfig+0xfa>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c18:	4b4f      	ldr	r3, [pc, #316]	; (8004d58 <HAL_RCC_ClockConfig+0x1f0>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004c20:	f000 8093 	beq.w	8004d4a <HAL_RCC_ClockConfig+0x1e2>
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004c24:	f7ff fc08 	bl	8004438 <HAL_RCC_GetSysClockFreq>
 8004c28:	4b4c      	ldr	r3, [pc, #304]	; (8004d5c <HAL_RCC_ClockConfig+0x1f4>)
 8004c2a:	4298      	cmp	r0, r3
 8004c2c:	d918      	bls.n	8004c60 <HAL_RCC_ClockConfig+0xf8>
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004c2e:	4b4a      	ldr	r3, [pc, #296]	; (8004d58 <HAL_RCC_ClockConfig+0x1f0>)
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 8004c36:	d12f      	bne.n	8004c98 <HAL_RCC_ClockConfig+0x130>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004c38:	4a47      	ldr	r2, [pc, #284]	; (8004d58 <HAL_RCC_ClockConfig+0x1f0>)
 8004c3a:	6893      	ldr	r3, [r2, #8]
 8004c3c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c44:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004c46:	2780      	movs	r7, #128	; 0x80
 8004c48:	e00b      	b.n	8004c62 <HAL_RCC_ClockConfig+0xfa>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c4a:	4b43      	ldr	r3, [pc, #268]	; (8004d58 <HAL_RCC_ClockConfig+0x1f0>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004c52:	d1e7      	bne.n	8004c24 <HAL_RCC_ClockConfig+0xbc>
          return HAL_ERROR;
 8004c54:	2001      	movs	r0, #1
 8004c56:	e06d      	b.n	8004d34 <HAL_RCC_ClockConfig+0x1cc>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004c58:	2700      	movs	r7, #0
 8004c5a:	e002      	b.n	8004c62 <HAL_RCC_ClockConfig+0xfa>
 8004c5c:	2700      	movs	r7, #0
 8004c5e:	e000      	b.n	8004c62 <HAL_RCC_ClockConfig+0xfa>
 8004c60:	2700      	movs	r7, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004c62:	4a3d      	ldr	r2, [pc, #244]	; (8004d58 <HAL_RCC_ClockConfig+0x1f0>)
 8004c64:	6893      	ldr	r3, [r2, #8]
 8004c66:	f023 0303 	bic.w	r3, r3, #3
 8004c6a:	6861      	ldr	r1, [r4, #4]
 8004c6c:	430b      	orrs	r3, r1
 8004c6e:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8004c70:	f7fd fbb0 	bl	80023d4 <HAL_GetTick>
 8004c74:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c76:	4b38      	ldr	r3, [pc, #224]	; (8004d58 <HAL_RCC_ClockConfig+0x1f0>)
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	f003 030c 	and.w	r3, r3, #12
 8004c7e:	6862      	ldr	r2, [r4, #4]
 8004c80:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004c84:	d00a      	beq.n	8004c9c <HAL_RCC_ClockConfig+0x134>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c86:	f7fd fba5 	bl	80023d4 <HAL_GetTick>
 8004c8a:	1b80      	subs	r0, r0, r6
 8004c8c:	f241 3388 	movw	r3, #5000	; 0x1388
 8004c90:	4298      	cmp	r0, r3
 8004c92:	d9f0      	bls.n	8004c76 <HAL_RCC_ClockConfig+0x10e>
        return HAL_TIMEOUT;
 8004c94:	2003      	movs	r0, #3
 8004c96:	e04d      	b.n	8004d34 <HAL_RCC_ClockConfig+0x1cc>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004c98:	2700      	movs	r7, #0
 8004c9a:	e7e2      	b.n	8004c62 <HAL_RCC_ClockConfig+0xfa>
  if(hpre == RCC_SYSCLK_DIV2)
 8004c9c:	2f00      	cmp	r7, #0
 8004c9e:	d14a      	bne.n	8004d36 <HAL_RCC_ClockConfig+0x1ce>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ca0:	6823      	ldr	r3, [r4, #0]
 8004ca2:	f013 0f02 	tst.w	r3, #2
 8004ca6:	d00c      	beq.n	8004cc2 <HAL_RCC_ClockConfig+0x15a>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004ca8:	68a2      	ldr	r2, [r4, #8]
 8004caa:	4b2b      	ldr	r3, [pc, #172]	; (8004d58 <HAL_RCC_ClockConfig+0x1f0>)
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d205      	bcs.n	8004cc2 <HAL_RCC_ClockConfig+0x15a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cb6:	4928      	ldr	r1, [pc, #160]	; (8004d58 <HAL_RCC_ClockConfig+0x1f0>)
 8004cb8:	688b      	ldr	r3, [r1, #8]
 8004cba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cbe:	431a      	orrs	r2, r3
 8004cc0:	608a      	str	r2, [r1, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004cc2:	4b24      	ldr	r3, [pc, #144]	; (8004d54 <HAL_RCC_ClockConfig+0x1ec>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 030f 	and.w	r3, r3, #15
 8004cca:	42ab      	cmp	r3, r5
 8004ccc:	d90a      	bls.n	8004ce4 <HAL_RCC_ClockConfig+0x17c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cce:	4a21      	ldr	r2, [pc, #132]	; (8004d54 <HAL_RCC_ClockConfig+0x1ec>)
 8004cd0:	6813      	ldr	r3, [r2, #0]
 8004cd2:	f023 030f 	bic.w	r3, r3, #15
 8004cd6:	432b      	orrs	r3, r5
 8004cd8:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cda:	6813      	ldr	r3, [r2, #0]
 8004cdc:	f003 030f 	and.w	r3, r3, #15
 8004ce0:	42ab      	cmp	r3, r5
 8004ce2:	d134      	bne.n	8004d4e <HAL_RCC_ClockConfig+0x1e6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ce4:	6823      	ldr	r3, [r4, #0]
 8004ce6:	f013 0f04 	tst.w	r3, #4
 8004cea:	d006      	beq.n	8004cfa <HAL_RCC_ClockConfig+0x192>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cec:	4a1a      	ldr	r2, [pc, #104]	; (8004d58 <HAL_RCC_ClockConfig+0x1f0>)
 8004cee:	6893      	ldr	r3, [r2, #8]
 8004cf0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004cf4:	68e1      	ldr	r1, [r4, #12]
 8004cf6:	430b      	orrs	r3, r1
 8004cf8:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cfa:	6823      	ldr	r3, [r4, #0]
 8004cfc:	f013 0f08 	tst.w	r3, #8
 8004d00:	d007      	beq.n	8004d12 <HAL_RCC_ClockConfig+0x1aa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d02:	4a15      	ldr	r2, [pc, #84]	; (8004d58 <HAL_RCC_ClockConfig+0x1f0>)
 8004d04:	6893      	ldr	r3, [r2, #8]
 8004d06:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8004d0a:	6921      	ldr	r1, [r4, #16]
 8004d0c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004d10:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004d12:	f7ff fb91 	bl	8004438 <HAL_RCC_GetSysClockFreq>
 8004d16:	4b10      	ldr	r3, [pc, #64]	; (8004d58 <HAL_RCC_ClockConfig+0x1f0>)
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004d1e:	4a10      	ldr	r2, [pc, #64]	; (8004d60 <HAL_RCC_ClockConfig+0x1f8>)
 8004d20:	5cd3      	ldrb	r3, [r2, r3]
 8004d22:	f003 031f 	and.w	r3, r3, #31
 8004d26:	40d8      	lsrs	r0, r3
 8004d28:	4b0e      	ldr	r3, [pc, #56]	; (8004d64 <HAL_RCC_ClockConfig+0x1fc>)
 8004d2a:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8004d2c:	4b0e      	ldr	r3, [pc, #56]	; (8004d68 <HAL_RCC_ClockConfig+0x200>)
 8004d2e:	6818      	ldr	r0, [r3, #0]
 8004d30:	f7fd fb0c 	bl	800234c <HAL_InitTick>
}
 8004d34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004d36:	4a08      	ldr	r2, [pc, #32]	; (8004d58 <HAL_RCC_ClockConfig+0x1f0>)
 8004d38:	6893      	ldr	r3, [r2, #8]
 8004d3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d3e:	6093      	str	r3, [r2, #8]
 8004d40:	e7ae      	b.n	8004ca0 <HAL_RCC_ClockConfig+0x138>
    return HAL_ERROR;
 8004d42:	2001      	movs	r0, #1
}
 8004d44:	4770      	bx	lr
      return HAL_ERROR;
 8004d46:	2001      	movs	r0, #1
 8004d48:	e7f4      	b.n	8004d34 <HAL_RCC_ClockConfig+0x1cc>
          return HAL_ERROR;
 8004d4a:	2001      	movs	r0, #1
 8004d4c:	e7f2      	b.n	8004d34 <HAL_RCC_ClockConfig+0x1cc>
      return HAL_ERROR;
 8004d4e:	2001      	movs	r0, #1
 8004d50:	e7f0      	b.n	8004d34 <HAL_RCC_ClockConfig+0x1cc>
 8004d52:	bf00      	nop
 8004d54:	40022000 	.word	0x40022000
 8004d58:	40021000 	.word	0x40021000
 8004d5c:	04c4b400 	.word	0x04c4b400
 8004d60:	0800e24c 	.word	0x0800e24c
 8004d64:	20000000 	.word	0x20000000
 8004d68:	200000fc 	.word	0x200000fc

08004d6c <HAL_RCC_GetHCLKFreq>:
}
 8004d6c:	4b01      	ldr	r3, [pc, #4]	; (8004d74 <HAL_RCC_GetHCLKFreq+0x8>)
 8004d6e:	6818      	ldr	r0, [r3, #0]
 8004d70:	4770      	bx	lr
 8004d72:	bf00      	nop
 8004d74:	20000000 	.word	0x20000000

08004d78 <HAL_RCC_GetPCLK1Freq>:
{
 8004d78:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004d7a:	f7ff fff7 	bl	8004d6c <HAL_RCC_GetHCLKFreq>
 8004d7e:	4b05      	ldr	r3, [pc, #20]	; (8004d94 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8004d86:	4a04      	ldr	r2, [pc, #16]	; (8004d98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d88:	5cd3      	ldrb	r3, [r2, r3]
 8004d8a:	f003 031f 	and.w	r3, r3, #31
}
 8004d8e:	40d8      	lsrs	r0, r3
 8004d90:	bd08      	pop	{r3, pc}
 8004d92:	bf00      	nop
 8004d94:	40021000 	.word	0x40021000
 8004d98:	0800e25c 	.word	0x0800e25c

08004d9c <HAL_RCC_GetPCLK2Freq>:
{
 8004d9c:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004d9e:	f7ff ffe5 	bl	8004d6c <HAL_RCC_GetHCLKFreq>
 8004da2:	4b05      	ldr	r3, [pc, #20]	; (8004db8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8004daa:	4a04      	ldr	r2, [pc, #16]	; (8004dbc <HAL_RCC_GetPCLK2Freq+0x20>)
 8004dac:	5cd3      	ldrb	r3, [r2, r3]
 8004dae:	f003 031f 	and.w	r3, r3, #31
}
 8004db2:	40d8      	lsrs	r0, r3
 8004db4:	bd08      	pop	{r3, pc}
 8004db6:	bf00      	nop
 8004db8:	40021000 	.word	0x40021000
 8004dbc:	0800e25c 	.word	0x0800e25c

08004dc0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dc2:	4604      	mov	r4, r0
 8004dc4:	460f      	mov	r7, r1
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004dc6:	4b54      	ldr	r3, [pc, #336]	; (8004f18 <RCCEx_PLLSAI2_Config+0x158>)
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	f013 0f03 	tst.w	r3, #3
 8004dce:	d00e      	beq.n	8004dee <RCCEx_PLLSAI2_Config+0x2e>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004dd0:	4b51      	ldr	r3, [pc, #324]	; (8004f18 <RCCEx_PLLSAI2_Config+0x158>)
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	f003 0303 	and.w	r3, r3, #3
 8004dd8:	6802      	ldr	r2, [r0, #0]
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d002      	beq.n	8004de4 <RCCEx_PLLSAI2_Config+0x24>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004dde:	2501      	movs	r5, #1
      }
    }
  }

  return status;
}
 8004de0:	4628      	mov	r0, r5
 8004de2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 8004de4:	2a00      	cmp	r2, #0
 8004de6:	f000 8095 	beq.w	8004f14 <RCCEx_PLLSAI2_Config+0x154>
  HAL_StatusTypeDef status = HAL_OK;
 8004dea:	2500      	movs	r5, #0
 8004dec:	e009      	b.n	8004e02 <RCCEx_PLLSAI2_Config+0x42>
    switch(PllSai2->PLLSAI2Source)
 8004dee:	6803      	ldr	r3, [r0, #0]
 8004df0:	2b02      	cmp	r3, #2
 8004df2:	d054      	beq.n	8004e9e <RCCEx_PLLSAI2_Config+0xde>
 8004df4:	2b03      	cmp	r3, #3
 8004df6:	d059      	beq.n	8004eac <RCCEx_PLLSAI2_Config+0xec>
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d043      	beq.n	8004e84 <RCCEx_PLLSAI2_Config+0xc4>
 8004dfc:	2501      	movs	r5, #1
  if(status == HAL_OK)
 8004dfe:	2d00      	cmp	r5, #0
 8004e00:	d1ee      	bne.n	8004de0 <RCCEx_PLLSAI2_Config+0x20>
    __HAL_RCC_PLLSAI2_DISABLE();
 8004e02:	4a45      	ldr	r2, [pc, #276]	; (8004f18 <RCCEx_PLLSAI2_Config+0x158>)
 8004e04:	6813      	ldr	r3, [r2, #0]
 8004e06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e0a:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004e0c:	f7fd fae2 	bl	80023d4 <HAL_GetTick>
 8004e10:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004e12:	4b41      	ldr	r3, [pc, #260]	; (8004f18 <RCCEx_PLLSAI2_Config+0x158>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8004e1a:	d005      	beq.n	8004e28 <RCCEx_PLLSAI2_Config+0x68>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004e1c:	f7fd fada 	bl	80023d4 <HAL_GetTick>
 8004e20:	1b83      	subs	r3, r0, r6
 8004e22:	2b02      	cmp	r3, #2
 8004e24:	d9f5      	bls.n	8004e12 <RCCEx_PLLSAI2_Config+0x52>
        status = HAL_TIMEOUT;
 8004e26:	2503      	movs	r5, #3
    if(status == HAL_OK)
 8004e28:	2d00      	cmp	r5, #0
 8004e2a:	d1d9      	bne.n	8004de0 <RCCEx_PLLSAI2_Config+0x20>
      if(Divider == DIVIDER_P_UPDATE)
 8004e2c:	2f00      	cmp	r7, #0
 8004e2e:	d14b      	bne.n	8004ec8 <RCCEx_PLLSAI2_Config+0x108>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004e30:	4839      	ldr	r0, [pc, #228]	; (8004f18 <RCCEx_PLLSAI2_Config+0x158>)
 8004e32:	6943      	ldr	r3, [r0, #20]
 8004e34:	4a39      	ldr	r2, [pc, #228]	; (8004f1c <RCCEx_PLLSAI2_Config+0x15c>)
 8004e36:	401a      	ands	r2, r3
 8004e38:	68a1      	ldr	r1, [r4, #8]
 8004e3a:	68e3      	ldr	r3, [r4, #12]
 8004e3c:	06db      	lsls	r3, r3, #27
 8004e3e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004e42:	6861      	ldr	r1, [r4, #4]
 8004e44:	3901      	subs	r1, #1
 8004e46:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	6143      	str	r3, [r0, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 8004e4e:	4a32      	ldr	r2, [pc, #200]	; (8004f18 <RCCEx_PLLSAI2_Config+0x158>)
 8004e50:	6813      	ldr	r3, [r2, #0]
 8004e52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e56:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8004e58:	f7fd fabc 	bl	80023d4 <HAL_GetTick>
 8004e5c:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004e5e:	4b2e      	ldr	r3, [pc, #184]	; (8004f18 <RCCEx_PLLSAI2_Config+0x158>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8004e66:	d105      	bne.n	8004e74 <RCCEx_PLLSAI2_Config+0xb4>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004e68:	f7fd fab4 	bl	80023d4 <HAL_GetTick>
 8004e6c:	1b83      	subs	r3, r0, r6
 8004e6e:	2b02      	cmp	r3, #2
 8004e70:	d9f5      	bls.n	8004e5e <RCCEx_PLLSAI2_Config+0x9e>
          status = HAL_TIMEOUT;
 8004e72:	2503      	movs	r5, #3
      if(status == HAL_OK)
 8004e74:	2d00      	cmp	r5, #0
 8004e76:	d1b3      	bne.n	8004de0 <RCCEx_PLLSAI2_Config+0x20>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004e78:	4a27      	ldr	r2, [pc, #156]	; (8004f18 <RCCEx_PLLSAI2_Config+0x158>)
 8004e7a:	6953      	ldr	r3, [r2, #20]
 8004e7c:	69a1      	ldr	r1, [r4, #24]
 8004e7e:	430b      	orrs	r3, r1
 8004e80:	6153      	str	r3, [r2, #20]
 8004e82:	e7ad      	b.n	8004de0 <RCCEx_PLLSAI2_Config+0x20>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004e84:	4a24      	ldr	r2, [pc, #144]	; (8004f18 <RCCEx_PLLSAI2_Config+0x158>)
 8004e86:	6812      	ldr	r2, [r2, #0]
 8004e88:	f012 0f02 	tst.w	r2, #2
 8004e8c:	d01a      	beq.n	8004ec4 <RCCEx_PLLSAI2_Config+0x104>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004e8e:	4922      	ldr	r1, [pc, #136]	; (8004f18 <RCCEx_PLLSAI2_Config+0x158>)
 8004e90:	68ca      	ldr	r2, [r1, #12]
 8004e92:	f022 0203 	bic.w	r2, r2, #3
 8004e96:	4313      	orrs	r3, r2
 8004e98:	60cb      	str	r3, [r1, #12]
 8004e9a:	2500      	movs	r5, #0
 8004e9c:	e7af      	b.n	8004dfe <RCCEx_PLLSAI2_Config+0x3e>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004e9e:	4a1e      	ldr	r2, [pc, #120]	; (8004f18 <RCCEx_PLLSAI2_Config+0x158>)
 8004ea0:	6812      	ldr	r2, [r2, #0]
 8004ea2:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8004ea6:	d1f2      	bne.n	8004e8e <RCCEx_PLLSAI2_Config+0xce>
        status = HAL_ERROR;
 8004ea8:	2501      	movs	r5, #1
 8004eaa:	e7a8      	b.n	8004dfe <RCCEx_PLLSAI2_Config+0x3e>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004eac:	4a1a      	ldr	r2, [pc, #104]	; (8004f18 <RCCEx_PLLSAI2_Config+0x158>)
 8004eae:	6812      	ldr	r2, [r2, #0]
 8004eb0:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8004eb4:	d1eb      	bne.n	8004e8e <RCCEx_PLLSAI2_Config+0xce>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004eb6:	4a18      	ldr	r2, [pc, #96]	; (8004f18 <RCCEx_PLLSAI2_Config+0x158>)
 8004eb8:	6812      	ldr	r2, [r2, #0]
 8004eba:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8004ebe:	d1e6      	bne.n	8004e8e <RCCEx_PLLSAI2_Config+0xce>
          status = HAL_ERROR;
 8004ec0:	2501      	movs	r5, #1
 8004ec2:	e79c      	b.n	8004dfe <RCCEx_PLLSAI2_Config+0x3e>
        status = HAL_ERROR;
 8004ec4:	2501      	movs	r5, #1
 8004ec6:	e79a      	b.n	8004dfe <RCCEx_PLLSAI2_Config+0x3e>
      else if(Divider == DIVIDER_Q_UPDATE)
 8004ec8:	2f01      	cmp	r7, #1
 8004eca:	d011      	beq.n	8004ef0 <RCCEx_PLLSAI2_Config+0x130>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004ecc:	4812      	ldr	r0, [pc, #72]	; (8004f18 <RCCEx_PLLSAI2_Config+0x158>)
 8004ece:	6943      	ldr	r3, [r0, #20]
 8004ed0:	4a13      	ldr	r2, [pc, #76]	; (8004f20 <RCCEx_PLLSAI2_Config+0x160>)
 8004ed2:	401a      	ands	r2, r3
 8004ed4:	68a1      	ldr	r1, [r4, #8]
 8004ed6:	6963      	ldr	r3, [r4, #20]
 8004ed8:	085b      	lsrs	r3, r3, #1
 8004eda:	3b01      	subs	r3, #1
 8004edc:	065b      	lsls	r3, r3, #25
 8004ede:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004ee2:	6861      	ldr	r1, [r4, #4]
 8004ee4:	3901      	subs	r1, #1
 8004ee6:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8004eea:	4313      	orrs	r3, r2
 8004eec:	6143      	str	r3, [r0, #20]
 8004eee:	e7ae      	b.n	8004e4e <RCCEx_PLLSAI2_Config+0x8e>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004ef0:	4809      	ldr	r0, [pc, #36]	; (8004f18 <RCCEx_PLLSAI2_Config+0x158>)
 8004ef2:	6943      	ldr	r3, [r0, #20]
 8004ef4:	4a0b      	ldr	r2, [pc, #44]	; (8004f24 <RCCEx_PLLSAI2_Config+0x164>)
 8004ef6:	401a      	ands	r2, r3
 8004ef8:	68a1      	ldr	r1, [r4, #8]
 8004efa:	6923      	ldr	r3, [r4, #16]
 8004efc:	085b      	lsrs	r3, r3, #1
 8004efe:	3b01      	subs	r3, #1
 8004f00:	055b      	lsls	r3, r3, #21
 8004f02:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004f06:	6861      	ldr	r1, [r4, #4]
 8004f08:	3901      	subs	r1, #1
 8004f0a:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	6143      	str	r3, [r0, #20]
 8004f12:	e79c      	b.n	8004e4e <RCCEx_PLLSAI2_Config+0x8e>
      status = HAL_ERROR;
 8004f14:	2501      	movs	r5, #1
 8004f16:	e763      	b.n	8004de0 <RCCEx_PLLSAI2_Config+0x20>
 8004f18:	40021000 	.word	0x40021000
 8004f1c:	07ff800f 	.word	0x07ff800f
 8004f20:	f9ff800f 	.word	0xf9ff800f
 8004f24:	ff9f800f 	.word	0xff9f800f

08004f28 <RCCEx_PLLSAI1_Config>:
{
 8004f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f2a:	4604      	mov	r4, r0
 8004f2c:	460f      	mov	r7, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004f2e:	4b54      	ldr	r3, [pc, #336]	; (8005080 <RCCEx_PLLSAI1_Config+0x158>)
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	f013 0f03 	tst.w	r3, #3
 8004f36:	d00e      	beq.n	8004f56 <RCCEx_PLLSAI1_Config+0x2e>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004f38:	4b51      	ldr	r3, [pc, #324]	; (8005080 <RCCEx_PLLSAI1_Config+0x158>)
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	f003 0303 	and.w	r3, r3, #3
 8004f40:	6802      	ldr	r2, [r0, #0]
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d002      	beq.n	8004f4c <RCCEx_PLLSAI1_Config+0x24>
      status = HAL_ERROR;
 8004f46:	2501      	movs	r5, #1
}
 8004f48:	4628      	mov	r0, r5
 8004f4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 8004f4c:	2a00      	cmp	r2, #0
 8004f4e:	f000 8095 	beq.w	800507c <RCCEx_PLLSAI1_Config+0x154>
  HAL_StatusTypeDef status = HAL_OK;
 8004f52:	2500      	movs	r5, #0
 8004f54:	e009      	b.n	8004f6a <RCCEx_PLLSAI1_Config+0x42>
    switch(PllSai1->PLLSAI1Source)
 8004f56:	6803      	ldr	r3, [r0, #0]
 8004f58:	2b02      	cmp	r3, #2
 8004f5a:	d054      	beq.n	8005006 <RCCEx_PLLSAI1_Config+0xde>
 8004f5c:	2b03      	cmp	r3, #3
 8004f5e:	d059      	beq.n	8005014 <RCCEx_PLLSAI1_Config+0xec>
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d043      	beq.n	8004fec <RCCEx_PLLSAI1_Config+0xc4>
 8004f64:	2501      	movs	r5, #1
  if(status == HAL_OK)
 8004f66:	2d00      	cmp	r5, #0
 8004f68:	d1ee      	bne.n	8004f48 <RCCEx_PLLSAI1_Config+0x20>
    __HAL_RCC_PLLSAI1_DISABLE();
 8004f6a:	4a45      	ldr	r2, [pc, #276]	; (8005080 <RCCEx_PLLSAI1_Config+0x158>)
 8004f6c:	6813      	ldr	r3, [r2, #0]
 8004f6e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004f72:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004f74:	f7fd fa2e 	bl	80023d4 <HAL_GetTick>
 8004f78:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004f7a:	4b41      	ldr	r3, [pc, #260]	; (8005080 <RCCEx_PLLSAI1_Config+0x158>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8004f82:	d005      	beq.n	8004f90 <RCCEx_PLLSAI1_Config+0x68>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f84:	f7fd fa26 	bl	80023d4 <HAL_GetTick>
 8004f88:	1b83      	subs	r3, r0, r6
 8004f8a:	2b02      	cmp	r3, #2
 8004f8c:	d9f5      	bls.n	8004f7a <RCCEx_PLLSAI1_Config+0x52>
        status = HAL_TIMEOUT;
 8004f8e:	2503      	movs	r5, #3
    if(status == HAL_OK)
 8004f90:	2d00      	cmp	r5, #0
 8004f92:	d1d9      	bne.n	8004f48 <RCCEx_PLLSAI1_Config+0x20>
      if(Divider == DIVIDER_P_UPDATE)
 8004f94:	2f00      	cmp	r7, #0
 8004f96:	d14b      	bne.n	8005030 <RCCEx_PLLSAI1_Config+0x108>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f98:	4839      	ldr	r0, [pc, #228]	; (8005080 <RCCEx_PLLSAI1_Config+0x158>)
 8004f9a:	6903      	ldr	r3, [r0, #16]
 8004f9c:	4a39      	ldr	r2, [pc, #228]	; (8005084 <RCCEx_PLLSAI1_Config+0x15c>)
 8004f9e:	401a      	ands	r2, r3
 8004fa0:	68a1      	ldr	r1, [r4, #8]
 8004fa2:	68e3      	ldr	r3, [r4, #12]
 8004fa4:	06db      	lsls	r3, r3, #27
 8004fa6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004faa:	6861      	ldr	r1, [r4, #4]
 8004fac:	3901      	subs	r1, #1
 8004fae:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	6103      	str	r3, [r0, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 8004fb6:	4a32      	ldr	r2, [pc, #200]	; (8005080 <RCCEx_PLLSAI1_Config+0x158>)
 8004fb8:	6813      	ldr	r3, [r2, #0]
 8004fba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004fbe:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8004fc0:	f7fd fa08 	bl	80023d4 <HAL_GetTick>
 8004fc4:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004fc6:	4b2e      	ldr	r3, [pc, #184]	; (8005080 <RCCEx_PLLSAI1_Config+0x158>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8004fce:	d105      	bne.n	8004fdc <RCCEx_PLLSAI1_Config+0xb4>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004fd0:	f7fd fa00 	bl	80023d4 <HAL_GetTick>
 8004fd4:	1b83      	subs	r3, r0, r6
 8004fd6:	2b02      	cmp	r3, #2
 8004fd8:	d9f5      	bls.n	8004fc6 <RCCEx_PLLSAI1_Config+0x9e>
          status = HAL_TIMEOUT;
 8004fda:	2503      	movs	r5, #3
      if(status == HAL_OK)
 8004fdc:	2d00      	cmp	r5, #0
 8004fde:	d1b3      	bne.n	8004f48 <RCCEx_PLLSAI1_Config+0x20>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004fe0:	4a27      	ldr	r2, [pc, #156]	; (8005080 <RCCEx_PLLSAI1_Config+0x158>)
 8004fe2:	6913      	ldr	r3, [r2, #16]
 8004fe4:	69a1      	ldr	r1, [r4, #24]
 8004fe6:	430b      	orrs	r3, r1
 8004fe8:	6113      	str	r3, [r2, #16]
 8004fea:	e7ad      	b.n	8004f48 <RCCEx_PLLSAI1_Config+0x20>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004fec:	4a24      	ldr	r2, [pc, #144]	; (8005080 <RCCEx_PLLSAI1_Config+0x158>)
 8004fee:	6812      	ldr	r2, [r2, #0]
 8004ff0:	f012 0f02 	tst.w	r2, #2
 8004ff4:	d01a      	beq.n	800502c <RCCEx_PLLSAI1_Config+0x104>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004ff6:	4922      	ldr	r1, [pc, #136]	; (8005080 <RCCEx_PLLSAI1_Config+0x158>)
 8004ff8:	68ca      	ldr	r2, [r1, #12]
 8004ffa:	f022 0203 	bic.w	r2, r2, #3
 8004ffe:	4313      	orrs	r3, r2
 8005000:	60cb      	str	r3, [r1, #12]
 8005002:	2500      	movs	r5, #0
 8005004:	e7af      	b.n	8004f66 <RCCEx_PLLSAI1_Config+0x3e>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005006:	4a1e      	ldr	r2, [pc, #120]	; (8005080 <RCCEx_PLLSAI1_Config+0x158>)
 8005008:	6812      	ldr	r2, [r2, #0]
 800500a:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800500e:	d1f2      	bne.n	8004ff6 <RCCEx_PLLSAI1_Config+0xce>
        status = HAL_ERROR;
 8005010:	2501      	movs	r5, #1
 8005012:	e7a8      	b.n	8004f66 <RCCEx_PLLSAI1_Config+0x3e>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005014:	4a1a      	ldr	r2, [pc, #104]	; (8005080 <RCCEx_PLLSAI1_Config+0x158>)
 8005016:	6812      	ldr	r2, [r2, #0]
 8005018:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800501c:	d1eb      	bne.n	8004ff6 <RCCEx_PLLSAI1_Config+0xce>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800501e:	4a18      	ldr	r2, [pc, #96]	; (8005080 <RCCEx_PLLSAI1_Config+0x158>)
 8005020:	6812      	ldr	r2, [r2, #0]
 8005022:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8005026:	d1e6      	bne.n	8004ff6 <RCCEx_PLLSAI1_Config+0xce>
          status = HAL_ERROR;
 8005028:	2501      	movs	r5, #1
 800502a:	e79c      	b.n	8004f66 <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_ERROR;
 800502c:	2501      	movs	r5, #1
 800502e:	e79a      	b.n	8004f66 <RCCEx_PLLSAI1_Config+0x3e>
      else if(Divider == DIVIDER_Q_UPDATE)
 8005030:	2f01      	cmp	r7, #1
 8005032:	d011      	beq.n	8005058 <RCCEx_PLLSAI1_Config+0x130>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005034:	4812      	ldr	r0, [pc, #72]	; (8005080 <RCCEx_PLLSAI1_Config+0x158>)
 8005036:	6903      	ldr	r3, [r0, #16]
 8005038:	4a13      	ldr	r2, [pc, #76]	; (8005088 <RCCEx_PLLSAI1_Config+0x160>)
 800503a:	401a      	ands	r2, r3
 800503c:	68a1      	ldr	r1, [r4, #8]
 800503e:	6963      	ldr	r3, [r4, #20]
 8005040:	085b      	lsrs	r3, r3, #1
 8005042:	3b01      	subs	r3, #1
 8005044:	065b      	lsls	r3, r3, #25
 8005046:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800504a:	6861      	ldr	r1, [r4, #4]
 800504c:	3901      	subs	r1, #1
 800504e:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8005052:	4313      	orrs	r3, r2
 8005054:	6103      	str	r3, [r0, #16]
 8005056:	e7ae      	b.n	8004fb6 <RCCEx_PLLSAI1_Config+0x8e>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005058:	4809      	ldr	r0, [pc, #36]	; (8005080 <RCCEx_PLLSAI1_Config+0x158>)
 800505a:	6903      	ldr	r3, [r0, #16]
 800505c:	4a0b      	ldr	r2, [pc, #44]	; (800508c <RCCEx_PLLSAI1_Config+0x164>)
 800505e:	401a      	ands	r2, r3
 8005060:	68a1      	ldr	r1, [r4, #8]
 8005062:	6923      	ldr	r3, [r4, #16]
 8005064:	085b      	lsrs	r3, r3, #1
 8005066:	3b01      	subs	r3, #1
 8005068:	055b      	lsls	r3, r3, #21
 800506a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800506e:	6861      	ldr	r1, [r4, #4]
 8005070:	3901      	subs	r1, #1
 8005072:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8005076:	4313      	orrs	r3, r2
 8005078:	6103      	str	r3, [r0, #16]
 800507a:	e79c      	b.n	8004fb6 <RCCEx_PLLSAI1_Config+0x8e>
      status = HAL_ERROR;
 800507c:	2501      	movs	r5, #1
 800507e:	e763      	b.n	8004f48 <RCCEx_PLLSAI1_Config+0x20>
 8005080:	40021000 	.word	0x40021000
 8005084:	07ff800f 	.word	0x07ff800f
 8005088:	f9ff800f 	.word	0xf9ff800f
 800508c:	ff9f800f 	.word	0xff9f800f

08005090 <HAL_RCCEx_PeriphCLKConfig>:
{
 8005090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005094:	b082      	sub	sp, #8
 8005096:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005098:	6803      	ldr	r3, [r0, #0]
 800509a:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800509e:	d034      	beq.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x7a>
    switch(PeriphClkInit->Sai1ClockSelection)
 80050a0:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80050a2:	2b40      	cmp	r3, #64	; 0x40
 80050a4:	d01f      	beq.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80050a6:	d80b      	bhi.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x30>
 80050a8:	b323      	cbz	r3, 80050f4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80050aa:	2b20      	cmp	r3, #32
 80050ac:	d105      	bne.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80050ae:	2100      	movs	r1, #0
 80050b0:	3020      	adds	r0, #32
 80050b2:	f7ff fe85 	bl	8004dc0 <RCCEx_PLLSAI2_Config>
 80050b6:	4606      	mov	r6, r0
      break;
 80050b8:	e021      	b.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch(PeriphClkInit->Sai1ClockSelection)
 80050ba:	2701      	movs	r7, #1
 80050bc:	463e      	mov	r6, r7
 80050be:	e026      	b.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x7e>
 80050c0:	2b60      	cmp	r3, #96	; 0x60
 80050c2:	d020      	beq.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80050c4:	2b80      	cmp	r3, #128	; 0x80
 80050c6:	d10b      	bne.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80050c8:	2600      	movs	r6, #0
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80050ca:	4a63      	ldr	r2, [pc, #396]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80050cc:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 80050d0:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80050d4:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80050d6:	430b      	orrs	r3, r1
 80050d8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80050dc:	2700      	movs	r7, #0
 80050de:	e016      	b.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    switch(PeriphClkInit->Sai1ClockSelection)
 80050e0:	2701      	movs	r7, #1
 80050e2:	463e      	mov	r6, r7
 80050e4:	e013      	b.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80050e6:	4a5c      	ldr	r2, [pc, #368]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80050e8:	68d3      	ldr	r3, [r2, #12]
 80050ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050ee:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80050f0:	2600      	movs	r6, #0
 80050f2:	e7ea      	b.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x3a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80050f4:	2100      	movs	r1, #0
 80050f6:	3004      	adds	r0, #4
 80050f8:	f7ff ff16 	bl	8004f28 <RCCEx_PLLSAI1_Config>
 80050fc:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 80050fe:	2e00      	cmp	r6, #0
 8005100:	d0e3      	beq.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x3a>
 8005102:	4637      	mov	r7, r6
 8005104:	e003      	b.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    switch(PeriphClkInit->Sai1ClockSelection)
 8005106:	2600      	movs	r6, #0
 8005108:	e7df      	b.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x3a>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800510a:	2700      	movs	r7, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800510c:	463e      	mov	r6, r7
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800510e:	6823      	ldr	r3, [r4, #0]
 8005110:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8005114:	d033      	beq.n	800517e <HAL_RCCEx_PeriphCLKConfig+0xee>
    switch(PeriphClkInit->Sai2ClockSelection)
 8005116:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8005118:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800511c:	d022      	beq.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800511e:	d80d      	bhi.n	800513c <HAL_RCCEx_PeriphCLKConfig+0xac>
 8005120:	b333      	cbz	r3, 8005170 <HAL_RCCEx_PeriphCLKConfig+0xe0>
 8005122:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005126:	d106      	bne.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0xa6>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005128:	2100      	movs	r1, #0
 800512a:	f104 0020 	add.w	r0, r4, #32
 800512e:	f7ff fe47 	bl	8004dc0 <RCCEx_PLLSAI2_Config>
 8005132:	4606      	mov	r6, r0
      break;
 8005134:	e008      	b.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    switch(PeriphClkInit->Sai2ClockSelection)
 8005136:	2701      	movs	r7, #1
 8005138:	463e      	mov	r6, r7
 800513a:	e020      	b.n	800517e <HAL_RCCEx_PeriphCLKConfig+0xee>
 800513c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005140:	d002      	beq.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0xb8>
 8005142:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005146:	d10a      	bne.n	800515e <HAL_RCCEx_PeriphCLKConfig+0xce>
    if(ret == HAL_OK)
 8005148:	b9c6      	cbnz	r6, 800517c <HAL_RCCEx_PeriphCLKConfig+0xec>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800514a:	4a43      	ldr	r2, [pc, #268]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800514c:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8005150:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005154:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8005156:	430b      	orrs	r3, r1
 8005158:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800515c:	e00f      	b.n	800517e <HAL_RCCEx_PeriphCLKConfig+0xee>
    switch(PeriphClkInit->Sai2ClockSelection)
 800515e:	2701      	movs	r7, #1
 8005160:	463e      	mov	r6, r7
 8005162:	e00c      	b.n	800517e <HAL_RCCEx_PeriphCLKConfig+0xee>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005164:	4a3c      	ldr	r2, [pc, #240]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8005166:	68d3      	ldr	r3, [r2, #12]
 8005168:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800516c:	60d3      	str	r3, [r2, #12]
      break;
 800516e:	e7eb      	b.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005170:	2100      	movs	r1, #0
 8005172:	1d20      	adds	r0, r4, #4
 8005174:	f7ff fed8 	bl	8004f28 <RCCEx_PLLSAI1_Config>
 8005178:	4606      	mov	r6, r0
      break;
 800517a:	e7e5      	b.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0xb8>
 800517c:	4637      	mov	r7, r6
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800517e:	6823      	ldr	r3, [r4, #0]
 8005180:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005184:	d071      	beq.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x1da>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005186:	4b34      	ldr	r3, [pc, #208]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8005188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800518a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800518e:	d14e      	bne.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x19e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8005190:	4b31      	ldr	r3, [pc, #196]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8005192:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005194:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005198:	659a      	str	r2, [r3, #88]	; 0x58
 800519a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800519c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051a0:	9301      	str	r3, [sp, #4]
 80051a2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80051a4:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80051a8:	4a2c      	ldr	r2, [pc, #176]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80051aa:	6813      	ldr	r3, [r2, #0]
 80051ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051b0:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80051b2:	f7fd f90f 	bl	80023d4 <HAL_GetTick>
 80051b6:	4605      	mov	r5, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80051b8:	4b28      	ldr	r3, [pc, #160]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f413 7f80 	tst.w	r3, #256	; 0x100
 80051c0:	d105      	bne.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x13e>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051c2:	f7fd f907 	bl	80023d4 <HAL_GetTick>
 80051c6:	1b40      	subs	r0, r0, r5
 80051c8:	2802      	cmp	r0, #2
 80051ca:	d9f5      	bls.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x128>
        ret = HAL_TIMEOUT;
 80051cc:	2603      	movs	r6, #3
    if(ret == HAL_OK)
 80051ce:	2e00      	cmp	r6, #0
 80051d0:	d146      	bne.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80051d2:	4b21      	ldr	r3, [pc, #132]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80051d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80051d8:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80051dc:	d016      	beq.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80051de:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d012      	beq.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x17c>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80051e6:	4a1c      	ldr	r2, [pc, #112]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80051e8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80051ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 80051f0:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 80051f4:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80051f8:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80051fc:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8005200:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8005204:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8005208:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800520c:	f013 0f01 	tst.w	r3, #1
 8005210:	d110      	bne.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      if(ret == HAL_OK)
 8005212:	2e00      	cmp	r6, #0
 8005214:	f040 8159 	bne.w	80054ca <HAL_RCCEx_PeriphCLKConfig+0x43a>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005218:	4a0f      	ldr	r2, [pc, #60]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800521a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800521e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005222:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8005226:	430b      	orrs	r3, r1
 8005228:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800522c:	e019      	b.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    FlagStatus       pwrclkchanged = RESET;
 800522e:	f04f 0800 	mov.w	r8, #0
 8005232:	e7b9      	b.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
        tickstart = HAL_GetTick();
 8005234:	f7fd f8ce 	bl	80023d4 <HAL_GetTick>
 8005238:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800523a:	4b07      	ldr	r3, [pc, #28]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800523c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005240:	f013 0f02 	tst.w	r3, #2
 8005244:	d1e5      	bne.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x182>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005246:	f7fd f8c5 	bl	80023d4 <HAL_GetTick>
 800524a:	1b40      	subs	r0, r0, r5
 800524c:	f241 3388 	movw	r3, #5000	; 0x1388
 8005250:	4298      	cmp	r0, r3
 8005252:	d9f2      	bls.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
            ret = HAL_TIMEOUT;
 8005254:	2603      	movs	r6, #3
 8005256:	e7dc      	b.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8005258:	40021000 	.word	0x40021000
 800525c:	40007000 	.word	0x40007000
      status = ret;
 8005260:	4637      	mov	r7, r6
    if(pwrclkchanged == SET)
 8005262:	f1b8 0f00 	cmp.w	r8, #0
 8005266:	f040 8132 	bne.w	80054ce <HAL_RCCEx_PeriphCLKConfig+0x43e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800526a:	6823      	ldr	r3, [r4, #0]
 800526c:	f013 0f01 	tst.w	r3, #1
 8005270:	d008      	beq.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005272:	4ab6      	ldr	r2, [pc, #728]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8005274:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005278:	f023 0303 	bic.w	r3, r3, #3
 800527c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800527e:	430b      	orrs	r3, r1
 8005280:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005284:	6823      	ldr	r3, [r4, #0]
 8005286:	f013 0f02 	tst.w	r3, #2
 800528a:	d008      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800528c:	4aaf      	ldr	r2, [pc, #700]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800528e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005292:	f023 030c 	bic.w	r3, r3, #12
 8005296:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005298:	430b      	orrs	r3, r1
 800529a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800529e:	6823      	ldr	r3, [r4, #0]
 80052a0:	f013 0f04 	tst.w	r3, #4
 80052a4:	d008      	beq.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x228>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80052a6:	4aa9      	ldr	r2, [pc, #676]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80052a8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80052ac:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80052b0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80052b2:	430b      	orrs	r3, r1
 80052b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80052b8:	6823      	ldr	r3, [r4, #0]
 80052ba:	f013 0f08 	tst.w	r3, #8
 80052be:	d008      	beq.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x242>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80052c0:	4aa2      	ldr	r2, [pc, #648]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80052c2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80052c6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80052ca:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80052cc:	430b      	orrs	r3, r1
 80052ce:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80052d2:	6823      	ldr	r3, [r4, #0]
 80052d4:	f013 0f10 	tst.w	r3, #16
 80052d8:	d008      	beq.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x25c>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80052da:	4a9c      	ldr	r2, [pc, #624]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80052dc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80052e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052e4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80052e6:	430b      	orrs	r3, r1
 80052e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80052ec:	6823      	ldr	r3, [r4, #0]
 80052ee:	f013 0f20 	tst.w	r3, #32
 80052f2:	d008      	beq.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x276>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80052f4:	4a95      	ldr	r2, [pc, #596]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80052f6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80052fa:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80052fe:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8005300:	430b      	orrs	r3, r1
 8005302:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005306:	6823      	ldr	r3, [r4, #0]
 8005308:	f413 7f00 	tst.w	r3, #512	; 0x200
 800530c:	d008      	beq.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x290>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800530e:	4a8f      	ldr	r2, [pc, #572]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8005310:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005314:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8005318:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800531a:	430b      	orrs	r3, r1
 800531c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005320:	6823      	ldr	r3, [r4, #0]
 8005322:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8005326:	d008      	beq.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005328:	4a88      	ldr	r2, [pc, #544]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800532a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800532e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005332:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8005334:	430b      	orrs	r3, r1
 8005336:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800533a:	6823      	ldr	r3, [r4, #0]
 800533c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005340:	d008      	beq.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005342:	4a82      	ldr	r2, [pc, #520]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8005344:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005348:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800534c:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800534e:	430b      	orrs	r3, r1
 8005350:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005354:	6823      	ldr	r3, [r4, #0]
 8005356:	f013 0f80 	tst.w	r3, #128	; 0x80
 800535a:	d008      	beq.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800535c:	4a7b      	ldr	r2, [pc, #492]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800535e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005362:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8005366:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005368:	430b      	orrs	r3, r1
 800536a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800536e:	6823      	ldr	r3, [r4, #0]
 8005370:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005374:	d008      	beq.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005376:	4a75      	ldr	r2, [pc, #468]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8005378:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800537c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005380:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005382:	430b      	orrs	r3, r1
 8005384:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005388:	6823      	ldr	r3, [r4, #0]
 800538a:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800538e:	d008      	beq.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x312>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005390:	4a6e      	ldr	r2, [pc, #440]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8005392:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8005396:	f023 0303 	bic.w	r3, r3, #3
 800539a:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800539c:	430b      	orrs	r3, r1
 800539e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80053a2:	6823      	ldr	r3, [r4, #0]
 80053a4:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80053a8:	d011      	beq.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x33e>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80053aa:	4a68      	ldr	r2, [pc, #416]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80053ac:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80053b0:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80053b4:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80053b6:	430b      	orrs	r3, r1
 80053b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80053bc:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80053be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053c2:	f000 808a 	beq.w	80054da <HAL_RCCEx_PeriphCLKConfig+0x44a>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80053c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80053ca:	f000 808b 	beq.w	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80053ce:	6823      	ldr	r3, [r4, #0]
 80053d0:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80053d4:	d01f      	beq.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x386>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80053d6:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80053d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053dc:	f000 808b 	beq.w	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x466>
 80053e0:	4a5a      	ldr	r2, [pc, #360]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80053e2:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 80053e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053ea:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80053ee:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80053f2:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80053f6:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 80053f8:	430b      	orrs	r3, r1
 80053fa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80053fe:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8005400:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005404:	d07f      	beq.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x476>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8005406:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800540a:	f000 8082 	beq.w	8005512 <HAL_RCCEx_PeriphCLKConfig+0x482>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800540e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005412:	f000 8084 	beq.w	800551e <HAL_RCCEx_PeriphCLKConfig+0x48e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005416:	6823      	ldr	r3, [r4, #0]
 8005418:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800541c:	d00f      	beq.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800541e:	4a4b      	ldr	r2, [pc, #300]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8005420:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005424:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8005428:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800542a:	430b      	orrs	r3, r1
 800542c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005430:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8005432:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005436:	d07b      	beq.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005438:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800543c:	d07d      	beq.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800543e:	6823      	ldr	r3, [r4, #0]
 8005440:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8005444:	d00e      	beq.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005446:	4a41      	ldr	r2, [pc, #260]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8005448:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800544c:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8005450:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8005454:	430b      	orrs	r3, r1
 8005456:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800545a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800545e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005462:	d075      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005464:	6823      	ldr	r3, [r4, #0]
 8005466:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800546a:	d009      	beq.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800546c:	4a37      	ldr	r2, [pc, #220]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800546e:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8005472:	f023 0304 	bic.w	r3, r3, #4
 8005476:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 800547a:	430b      	orrs	r3, r1
 800547c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005480:	6823      	ldr	r3, [r4, #0]
 8005482:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8005486:	d009      	beq.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x40c>
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005488:	4a30      	ldr	r2, [pc, #192]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800548a:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 800548e:	f023 0318 	bic.w	r3, r3, #24
 8005492:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8005496:	430b      	orrs	r3, r1
 8005498:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800549c:	6823      	ldr	r3, [r4, #0]
 800549e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80054a2:	d00e      	beq.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x432>
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80054a4:	4a29      	ldr	r2, [pc, #164]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80054a6:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 80054aa:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80054ae:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80054b2:	430b      	orrs	r3, r1
 80054b4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80054b8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80054bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80054c0:	d04e      	beq.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
}
 80054c2:	4638      	mov	r0, r7
 80054c4:	b002      	add	sp, #8
 80054c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = ret;
 80054ca:	4637      	mov	r7, r6
 80054cc:	e6c9      	b.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
      __HAL_RCC_PWR_CLK_DISABLE();
 80054ce:	4a1f      	ldr	r2, [pc, #124]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80054d0:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80054d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054d6:	6593      	str	r3, [r2, #88]	; 0x58
 80054d8:	e6c7      	b.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x1da>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054da:	68d3      	ldr	r3, [r2, #12]
 80054dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054e0:	60d3      	str	r3, [r2, #12]
 80054e2:	e774      	b.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x33e>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80054e4:	2101      	movs	r1, #1
 80054e6:	1d20      	adds	r0, r4, #4
 80054e8:	f7ff fd1e 	bl	8004f28 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 80054ec:	2800      	cmp	r0, #0
 80054ee:	f43f af6e 	beq.w	80053ce <HAL_RCCEx_PeriphCLKConfig+0x33e>
          status = ret;
 80054f2:	4607      	mov	r7, r0
 80054f4:	e76b      	b.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x33e>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80054f6:	4a15      	ldr	r2, [pc, #84]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80054f8:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 80054fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005500:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005504:	e77b      	b.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x36e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005506:	4a11      	ldr	r2, [pc, #68]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8005508:	68d3      	ldr	r3, [r2, #12]
 800550a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800550e:	60d3      	str	r3, [r2, #12]
 8005510:	e781      	b.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x386>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005512:	4a0e      	ldr	r2, [pc, #56]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8005514:	68d3      	ldr	r3, [r2, #12]
 8005516:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800551a:	60d3      	str	r3, [r2, #12]
 800551c:	e77b      	b.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x386>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800551e:	2101      	movs	r1, #1
 8005520:	1d20      	adds	r0, r4, #4
 8005522:	f7ff fd01 	bl	8004f28 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8005526:	2800      	cmp	r0, #0
 8005528:	f43f af75 	beq.w	8005416 <HAL_RCCEx_PeriphCLKConfig+0x386>
        status = ret;
 800552c:	4607      	mov	r7, r0
 800552e:	e772      	b.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x386>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005530:	68d3      	ldr	r3, [r2, #12]
 8005532:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005536:	60d3      	str	r3, [r2, #12]
 8005538:	e781      	b.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800553a:	2101      	movs	r1, #1
 800553c:	1d20      	adds	r0, r4, #4
 800553e:	f7ff fcf3 	bl	8004f28 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8005542:	2800      	cmp	r0, #0
 8005544:	f43f af7b 	beq.w	800543e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
        status = ret;
 8005548:	4607      	mov	r7, r0
 800554a:	e778      	b.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800554c:	40021000 	.word	0x40021000
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005550:	2102      	movs	r1, #2
 8005552:	1d20      	adds	r0, r4, #4
 8005554:	f7ff fce8 	bl	8004f28 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8005558:	2800      	cmp	r0, #0
 800555a:	d083      	beq.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
        status = ret;
 800555c:	4607      	mov	r7, r0
 800555e:	e781      	b.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005560:	68d3      	ldr	r3, [r2, #12]
 8005562:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005566:	60d3      	str	r3, [r2, #12]
 8005568:	e7ab      	b.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800556a:	bf00      	nop

0800556c <HAL_SPI_Init>:
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800556c:	2800      	cmp	r0, #0
 800556e:	d06a      	beq.n	8005646 <HAL_SPI_Init+0xda>
{
 8005570:	b510      	push	{r4, lr}
 8005572:	4604      	mov	r4, r0
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005574:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005576:	b933      	cbnz	r3, 8005586 <HAL_SPI_Init+0x1a>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005578:	6843      	ldr	r3, [r0, #4]
 800557a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800557e:	d005      	beq.n	800558c <HAL_SPI_Init+0x20>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005580:	2300      	movs	r3, #0
 8005582:	61c3      	str	r3, [r0, #28]
 8005584:	e002      	b.n	800558c <HAL_SPI_Init+0x20>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005586:	2300      	movs	r3, #0
 8005588:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800558a:	6143      	str	r3, [r0, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800558c:	2300      	movs	r3, #0
 800558e:	62a3      	str	r3, [r4, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005590:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8005594:	2b00      	cmp	r3, #0
 8005596:	d04d      	beq.n	8005634 <HAL_SPI_Init+0xc8>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005598:	2302      	movs	r3, #2
 800559a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800559e:	6822      	ldr	r2, [r4, #0]
 80055a0:	6813      	ldr	r3, [r2, #0]
 80055a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055a6:	6013      	str	r3, [r2, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80055a8:	68e3      	ldr	r3, [r4, #12]
 80055aa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80055ae:	d947      	bls.n	8005640 <HAL_SPI_Init+0xd4>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80055b0:	2200      	movs	r2, #0
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80055b2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80055b6:	d004      	beq.n	80055c2 <HAL_SPI_Init+0x56>
 80055b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80055bc:	d001      	beq.n	80055c2 <HAL_SPI_Init+0x56>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055be:	2300      	movs	r3, #0
 80055c0:	62a3      	str	r3, [r4, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80055c2:	6863      	ldr	r3, [r4, #4]
 80055c4:	f403 7382 	and.w	r3, r3, #260	; 0x104
 80055c8:	68a1      	ldr	r1, [r4, #8]
 80055ca:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 80055ce:	430b      	orrs	r3, r1
 80055d0:	6921      	ldr	r1, [r4, #16]
 80055d2:	f001 0102 	and.w	r1, r1, #2
 80055d6:	430b      	orrs	r3, r1
 80055d8:	6961      	ldr	r1, [r4, #20]
 80055da:	f001 0101 	and.w	r1, r1, #1
 80055de:	430b      	orrs	r3, r1
 80055e0:	69a1      	ldr	r1, [r4, #24]
 80055e2:	f401 7100 	and.w	r1, r1, #512	; 0x200
 80055e6:	430b      	orrs	r3, r1
 80055e8:	69e1      	ldr	r1, [r4, #28]
 80055ea:	f001 0138 	and.w	r1, r1, #56	; 0x38
 80055ee:	430b      	orrs	r3, r1
 80055f0:	6a21      	ldr	r1, [r4, #32]
 80055f2:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80055f6:	430b      	orrs	r3, r1
 80055f8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80055fa:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 80055fe:	6820      	ldr	r0, [r4, #0]
 8005600:	430b      	orrs	r3, r1
 8005602:	6003      	str	r3, [r0, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005604:	8b63      	ldrh	r3, [r4, #26]
 8005606:	f003 0304 	and.w	r3, r3, #4
 800560a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800560c:	f001 0110 	and.w	r1, r1, #16
 8005610:	430b      	orrs	r3, r1
 8005612:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005614:	f001 0108 	and.w	r1, r1, #8
 8005618:	430b      	orrs	r3, r1
 800561a:	68e1      	ldr	r1, [r4, #12]
 800561c:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 8005620:	430b      	orrs	r3, r1
 8005622:	6821      	ldr	r1, [r4, #0]
 8005624:	4313      	orrs	r3, r2
 8005626:	604b      	str	r3, [r1, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005628:	2000      	movs	r0, #0
 800562a:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800562c:	2301      	movs	r3, #1
 800562e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
}
 8005632:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8005634:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8005638:	4620      	mov	r0, r4
 800563a:	f7fc f805 	bl	8001648 <HAL_SPI_MspInit>
 800563e:	e7ab      	b.n	8005598 <HAL_SPI_Init+0x2c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005640:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005644:	e7b5      	b.n	80055b2 <HAL_SPI_Init+0x46>
    return HAL_ERROR;
 8005646:	2001      	movs	r0, #1
}
 8005648:	4770      	bx	lr

0800564a <HAL_SPI_ErrorCallback>:
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800564a:	4770      	bx	lr

0800564c <HAL_SPI_IRQHandler>:
{
 800564c:	b530      	push	{r4, r5, lr}
 800564e:	b085      	sub	sp, #20
 8005650:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 8005652:	6802      	ldr	r2, [r0, #0]
 8005654:	6851      	ldr	r1, [r2, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8005656:	6893      	ldr	r3, [r2, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005658:	f3c3 1080 	ubfx	r0, r3, #6, #1
 800565c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005660:	d105      	bne.n	800566e <HAL_SPI_IRQHandler+0x22>
 8005662:	f013 0f01 	tst.w	r3, #1
 8005666:	d002      	beq.n	800566e <HAL_SPI_IRQHandler+0x22>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005668:	f011 0f40 	tst.w	r1, #64	; 0x40
 800566c:	d169      	bne.n	8005742 <HAL_SPI_IRQHandler+0xf6>
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800566e:	f013 0f02 	tst.w	r3, #2
 8005672:	d002      	beq.n	800567a <HAL_SPI_IRQHandler+0x2e>
 8005674:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005678:	d167      	bne.n	800574a <HAL_SPI_IRQHandler+0xfe>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800567a:	f3c3 1540 	ubfx	r5, r3, #5, #1
 800567e:	f013 0f20 	tst.w	r3, #32
 8005682:	d103      	bne.n	800568c <HAL_SPI_IRQHandler+0x40>
 8005684:	b910      	cbnz	r0, 800568c <HAL_SPI_IRQHandler+0x40>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005686:	f413 7f80 	tst.w	r3, #256	; 0x100
 800568a:	d061      	beq.n	8005750 <HAL_SPI_IRQHandler+0x104>
 800568c:	f011 0f20 	tst.w	r1, #32
 8005690:	d05e      	beq.n	8005750 <HAL_SPI_IRQHandler+0x104>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005692:	b178      	cbz	r0, 80056b4 <HAL_SPI_IRQHandler+0x68>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005694:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8005698:	b2c0      	uxtb	r0, r0
 800569a:	2803      	cmp	r0, #3
 800569c:	d05a      	beq.n	8005754 <HAL_SPI_IRQHandler+0x108>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800569e:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80056a0:	f040 0004 	orr.w	r0, r0, #4
 80056a4:	6620      	str	r0, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80056a6:	2000      	movs	r0, #0
 80056a8:	9000      	str	r0, [sp, #0]
 80056aa:	68d0      	ldr	r0, [r2, #12]
 80056ac:	9000      	str	r0, [sp, #0]
 80056ae:	6890      	ldr	r0, [r2, #8]
 80056b0:	9000      	str	r0, [sp, #0]
 80056b2:	9800      	ldr	r0, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80056b4:	b165      	cbz	r5, 80056d0 <HAL_SPI_IRQHandler+0x84>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80056b6:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80056b8:	f040 0001 	orr.w	r0, r0, #1
 80056bc:	6620      	str	r0, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80056be:	2000      	movs	r0, #0
 80056c0:	9002      	str	r0, [sp, #8]
 80056c2:	6890      	ldr	r0, [r2, #8]
 80056c4:	9002      	str	r0, [sp, #8]
 80056c6:	6810      	ldr	r0, [r2, #0]
 80056c8:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 80056cc:	6010      	str	r0, [r2, #0]
 80056ce:	9a02      	ldr	r2, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80056d0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80056d4:	d009      	beq.n	80056ea <HAL_SPI_IRQHandler+0x9e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80056d6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80056d8:	f043 0308 	orr.w	r3, r3, #8
 80056dc:	6623      	str	r3, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80056de:	2300      	movs	r3, #0
 80056e0:	9303      	str	r3, [sp, #12]
 80056e2:	6823      	ldr	r3, [r4, #0]
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	9303      	str	r3, [sp, #12]
 80056e8:	9b03      	ldr	r3, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80056ea:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d02f      	beq.n	8005750 <HAL_SPI_IRQHandler+0x104>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80056f0:	6822      	ldr	r2, [r4, #0]
 80056f2:	6853      	ldr	r3, [r2, #4]
 80056f4:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80056f8:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 80056fa:	2301      	movs	r3, #1
 80056fc:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005700:	f011 0f03 	tst.w	r1, #3
 8005704:	d02e      	beq.n	8005764 <HAL_SPI_IRQHandler+0x118>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005706:	6822      	ldr	r2, [r4, #0]
 8005708:	6853      	ldr	r3, [r2, #4]
 800570a:	f023 0303 	bic.w	r3, r3, #3
 800570e:	6053      	str	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 8005710:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005712:	b14b      	cbz	r3, 8005728 <HAL_SPI_IRQHandler+0xdc>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005714:	4a15      	ldr	r2, [pc, #84]	; (800576c <HAL_SPI_IRQHandler+0x120>)
 8005716:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005718:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800571a:	f7fd f82d 	bl	8002778 <HAL_DMA_Abort_IT>
 800571e:	b118      	cbz	r0, 8005728 <HAL_SPI_IRQHandler+0xdc>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005720:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005722:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005726:	6623      	str	r3, [r4, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8005728:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800572a:	b18b      	cbz	r3, 8005750 <HAL_SPI_IRQHandler+0x104>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800572c:	4a0f      	ldr	r2, [pc, #60]	; (800576c <HAL_SPI_IRQHandler+0x120>)
 800572e:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005730:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005732:	f7fd f821 	bl	8002778 <HAL_DMA_Abort_IT>
 8005736:	b158      	cbz	r0, 8005750 <HAL_SPI_IRQHandler+0x104>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005738:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800573a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800573e:	6623      	str	r3, [r4, #96]	; 0x60
 8005740:	e006      	b.n	8005750 <HAL_SPI_IRQHandler+0x104>
    hspi->RxISR(hspi);
 8005742:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005744:	4620      	mov	r0, r4
 8005746:	4798      	blx	r3
    return;
 8005748:	e002      	b.n	8005750 <HAL_SPI_IRQHandler+0x104>
    hspi->TxISR(hspi);
 800574a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800574c:	4620      	mov	r0, r4
 800574e:	4798      	blx	r3
}
 8005750:	b005      	add	sp, #20
 8005752:	bd30      	pop	{r4, r5, pc}
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005754:	2300      	movs	r3, #0
 8005756:	9301      	str	r3, [sp, #4]
 8005758:	68d3      	ldr	r3, [r2, #12]
 800575a:	9301      	str	r3, [sp, #4]
 800575c:	6893      	ldr	r3, [r2, #8]
 800575e:	9301      	str	r3, [sp, #4]
 8005760:	9b01      	ldr	r3, [sp, #4]
        return;
 8005762:	e7f5      	b.n	8005750 <HAL_SPI_IRQHandler+0x104>
        HAL_SPI_ErrorCallback(hspi);
 8005764:	4620      	mov	r0, r4
 8005766:	f7ff ff70 	bl	800564a <HAL_SPI_ErrorCallback>
    return;
 800576a:	e7f1      	b.n	8005750 <HAL_SPI_IRQHandler+0x104>
 800576c:	08005771 	.word	0x08005771

08005770 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005770:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005772:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hspi->RxXferCount = 0U;
 8005774:	2300      	movs	r3, #0
 8005776:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800577a:	87c3      	strh	r3, [r0, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800577c:	f7ff ff65 	bl	800564a <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005780:	bd08      	pop	{r3, pc}

08005782 <UART_EndTxTransfer>:
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
#if defined(USART_CR1_FIFOEN)
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8005782:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005784:	e852 3f00 	ldrex	r3, [r2]
 8005788:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800578c:	e842 3100 	strex	r1, r3, [r2]
 8005790:	2900      	cmp	r1, #0
 8005792:	d1f6      	bne.n	8005782 <UART_EndTxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8005794:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005796:	f102 0308 	add.w	r3, r2, #8
 800579a:	e853 3f00 	ldrex	r3, [r3]
 800579e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a2:	3208      	adds	r2, #8
 80057a4:	e842 3100 	strex	r1, r3, [r2]
 80057a8:	2900      	cmp	r1, #0
 80057aa:	d1f3      	bne.n	8005794 <UART_EndTxTransfer+0x12>
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80057ac:	2320      	movs	r3, #32
 80057ae:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
}
 80057b2:	4770      	bx	lr

080057b4 <UART_EndRxTransfer>:
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80057b4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b6:	e852 3f00 	ldrex	r3, [r2]
 80057ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057be:	e842 3100 	strex	r1, r3, [r2]
 80057c2:	2900      	cmp	r1, #0
 80057c4:	d1f6      	bne.n	80057b4 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80057c6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c8:	f102 0308 	add.w	r3, r2, #8
 80057cc:	e853 3f00 	ldrex	r3, [r3]
 80057d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057d4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d8:	3208      	adds	r2, #8
 80057da:	e842 3100 	strex	r1, r3, [r2]
 80057de:	2900      	cmp	r1, #0
 80057e0:	d1f1      	bne.n	80057c6 <UART_EndRxTransfer+0x12>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057e2:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d006      	beq.n	80057f6 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80057e8:	2320      	movs	r3, #32
 80057ea:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057ee:	2300      	movs	r3, #0
 80057f0:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80057f2:	6703      	str	r3, [r0, #112]	; 0x70
}
 80057f4:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057f6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f8:	e852 3f00 	ldrex	r3, [r2]
 80057fc:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005800:	e842 3100 	strex	r1, r3, [r2]
 8005804:	2900      	cmp	r1, #0
 8005806:	d1f6      	bne.n	80057f6 <UART_EndRxTransfer+0x42>
 8005808:	e7ee      	b.n	80057e8 <UART_EndRxTransfer+0x34>

0800580a <HAL_UART_DMAStop>:
{
 800580a:	b538      	push	{r3, r4, r5, lr}
 800580c:	4604      	mov	r4, r0
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800580e:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005812:	f8d0 5088 	ldr.w	r5, [r0, #136]	; 0x88
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005816:	6803      	ldr	r3, [r0, #0]
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800581e:	d001      	beq.n	8005824 <HAL_UART_DMAStop+0x1a>
 8005820:	2a21      	cmp	r2, #33	; 0x21
 8005822:	d008      	beq.n	8005836 <HAL_UART_DMAStop+0x2c>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005824:	6823      	ldr	r3, [r4, #0]
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	f013 0f40 	tst.w	r3, #64	; 0x40
 800582c:	d042      	beq.n	80058b4 <HAL_UART_DMAStop+0xaa>
 800582e:	2d22      	cmp	r5, #34	; 0x22
 8005830:	d020      	beq.n	8005874 <HAL_UART_DMAStop+0x6a>
  return HAL_OK;
 8005832:	2000      	movs	r0, #0
 8005834:	e03f      	b.n	80058b6 <HAL_UART_DMAStop+0xac>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005836:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005838:	f102 0308 	add.w	r3, r2, #8
 800583c:	e853 3f00 	ldrex	r3, [r3]
 8005840:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005844:	3208      	adds	r2, #8
 8005846:	e842 3100 	strex	r1, r3, [r2]
 800584a:	2900      	cmp	r1, #0
 800584c:	d1f3      	bne.n	8005836 <HAL_UART_DMAStop+0x2c>
    if (huart->hdmatx != NULL)
 800584e:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8005850:	b110      	cbz	r0, 8005858 <HAL_UART_DMAStop+0x4e>
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8005852:	f7fc ff5b 	bl	800270c <HAL_DMA_Abort>
 8005856:	b918      	cbnz	r0, 8005860 <HAL_UART_DMAStop+0x56>
    UART_EndTxTransfer(huart);
 8005858:	4620      	mov	r0, r4
 800585a:	f7ff ff92 	bl	8005782 <UART_EndTxTransfer>
 800585e:	e7e1      	b.n	8005824 <HAL_UART_DMAStop+0x1a>
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8005860:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8005862:	f7fd f824 	bl	80028ae <HAL_DMA_GetError>
 8005866:	2820      	cmp	r0, #32
 8005868:	d1f6      	bne.n	8005858 <HAL_UART_DMAStop+0x4e>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800586a:	2310      	movs	r3, #16
 800586c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
          return HAL_TIMEOUT;
 8005870:	2003      	movs	r0, #3
 8005872:	e020      	b.n	80058b6 <HAL_UART_DMAStop+0xac>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005874:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005876:	f102 0308 	add.w	r3, r2, #8
 800587a:	e853 3f00 	ldrex	r3, [r3]
 800587e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005882:	3208      	adds	r2, #8
 8005884:	e842 3100 	strex	r1, r3, [r2]
 8005888:	2900      	cmp	r1, #0
 800588a:	d1f3      	bne.n	8005874 <HAL_UART_DMAStop+0x6a>
    if (huart->hdmarx != NULL)
 800588c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800588e:	b110      	cbz	r0, 8005896 <HAL_UART_DMAStop+0x8c>
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8005890:	f7fc ff3c 	bl	800270c <HAL_DMA_Abort>
 8005894:	b920      	cbnz	r0, 80058a0 <HAL_UART_DMAStop+0x96>
    UART_EndRxTransfer(huart);
 8005896:	4620      	mov	r0, r4
 8005898:	f7ff ff8c 	bl	80057b4 <UART_EndRxTransfer>
  return HAL_OK;
 800589c:	2000      	movs	r0, #0
 800589e:	e00a      	b.n	80058b6 <HAL_UART_DMAStop+0xac>
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80058a0:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80058a2:	f7fd f804 	bl	80028ae <HAL_DMA_GetError>
 80058a6:	2820      	cmp	r0, #32
 80058a8:	d1f5      	bne.n	8005896 <HAL_UART_DMAStop+0x8c>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80058aa:	2310      	movs	r3, #16
 80058ac:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
          return HAL_TIMEOUT;
 80058b0:	2003      	movs	r0, #3
 80058b2:	e000      	b.n	80058b6 <HAL_UART_DMAStop+0xac>
  return HAL_OK;
 80058b4:	2000      	movs	r0, #0
}
 80058b6:	bd38      	pop	{r3, r4, r5, pc}

080058b8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80058b8:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80058ba:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058bc:	e852 3f00 	ldrex	r3, [r2]
 80058c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c4:	e842 3100 	strex	r1, r3, [r2]
 80058c8:	2900      	cmp	r1, #0
 80058ca:	d1f6      	bne.n	80058ba <UART_EndTransmit_IT+0x2>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80058cc:	2320      	movs	r3, #32
 80058ce:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80058d2:	2300      	movs	r3, #0
 80058d4:	6743      	str	r3, [r0, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80058d6:	f003 f915 	bl	8008b04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058da:	bd08      	pop	{r3, pc}

080058dc <HAL_UART_RxHalfCpltCallback>:
}
 80058dc:	4770      	bx	lr

080058de <UART_DMAError>:
{
 80058de:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80058e0:	6a84      	ldr	r4, [r0, #40]	; 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 80058e2:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80058e6:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80058ea:	6823      	ldr	r3, [r4, #0]
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	f013 0f80 	tst.w	r3, #128	; 0x80
 80058f2:	d001      	beq.n	80058f8 <UART_DMAError+0x1a>
 80058f4:	2a21      	cmp	r2, #33	; 0x21
 80058f6:	d010      	beq.n	800591a <UART_DMAError+0x3c>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80058f8:	6823      	ldr	r3, [r4, #0]
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005900:	d001      	beq.n	8005906 <UART_DMAError+0x28>
 8005902:	2d22      	cmp	r5, #34	; 0x22
 8005904:	d010      	beq.n	8005928 <UART_DMAError+0x4a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005906:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800590a:	f043 0310 	orr.w	r3, r3, #16
 800590e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  HAL_UART_ErrorCallback(huart);
 8005912:	4620      	mov	r0, r4
 8005914:	f003 f90e 	bl	8008b34 <HAL_UART_ErrorCallback>
}
 8005918:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 800591a:	2300      	movs	r3, #0
 800591c:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8005920:	4620      	mov	r0, r4
 8005922:	f7ff ff2e 	bl	8005782 <UART_EndTxTransfer>
 8005926:	e7e7      	b.n	80058f8 <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 8005928:	2300      	movs	r3, #0
 800592a:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800592e:	4620      	mov	r0, r4
 8005930:	f7ff ff40 	bl	80057b4 <UART_EndRxTransfer>
 8005934:	e7e7      	b.n	8005906 <UART_DMAError+0x28>

08005936 <UART_DMAAbortOnError>:
{
 8005936:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005938:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 800593a:	2300      	movs	r3, #0
 800593c:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005940:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 8005944:	f003 f8f6 	bl	8008b34 <HAL_UART_ErrorCallback>
}
 8005948:	bd08      	pop	{r3, pc}

0800594a <HAL_UARTEx_RxEventCallback>:
}
 800594a:	4770      	bx	lr

0800594c <HAL_UART_IRQHandler>:
{
 800594c:	b570      	push	{r4, r5, r6, lr}
 800594e:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005950:	6801      	ldr	r1, [r0, #0]
 8005952:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005954:	6808      	ldr	r0, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005956:	688d      	ldr	r5, [r1, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005958:	f640 020f 	movw	r2, #2063	; 0x80f
  if (errorflags == 0U)
 800595c:	401a      	ands	r2, r3
 800595e:	d108      	bne.n	8005972 <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005960:	f013 0f20 	tst.w	r3, #32
 8005964:	d005      	beq.n	8005972 <HAL_UART_IRQHandler+0x26>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005966:	f010 0f20 	tst.w	r0, #32
 800596a:	d134      	bne.n	80059d6 <HAL_UART_IRQHandler+0x8a>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800596c:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 8005970:	d131      	bne.n	80059d6 <HAL_UART_IRQHandler+0x8a>
  if ((errorflags != 0U)
 8005972:	b12a      	cbz	r2, 8005980 <HAL_UART_IRQHandler+0x34>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005974:	4a95      	ldr	r2, [pc, #596]	; (8005bcc <HAL_UART_IRQHandler+0x280>)
 8005976:	402a      	ands	r2, r5
 8005978:	d133      	bne.n	80059e2 <HAL_UART_IRQHandler+0x96>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800597a:	4e95      	ldr	r6, [pc, #596]	; (8005bd0 <HAL_UART_IRQHandler+0x284>)
 800597c:	4230      	tst	r0, r6
 800597e:	d130      	bne.n	80059e2 <HAL_UART_IRQHandler+0x96>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005980:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8005982:	2a01      	cmp	r2, #1
 8005984:	f000 80c3 	beq.w	8005b0e <HAL_UART_IRQHandler+0x1c2>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005988:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800598c:	d003      	beq.n	8005996 <HAL_UART_IRQHandler+0x4a>
 800598e:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
 8005992:	f040 815b 	bne.w	8005c4c <HAL_UART_IRQHandler+0x300>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005996:	f013 0f80 	tst.w	r3, #128	; 0x80
 800599a:	d007      	beq.n	80059ac <HAL_UART_IRQHandler+0x60>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800599c:	f010 0f80 	tst.w	r0, #128	; 0x80
 80059a0:	f040 815b 	bne.w	8005c5a <HAL_UART_IRQHandler+0x30e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80059a4:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
 80059a8:	f040 8157 	bne.w	8005c5a <HAL_UART_IRQHandler+0x30e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80059ac:	f013 0f40 	tst.w	r3, #64	; 0x40
 80059b0:	d003      	beq.n	80059ba <HAL_UART_IRQHandler+0x6e>
 80059b2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80059b6:	f040 8157 	bne.w	8005c68 <HAL_UART_IRQHandler+0x31c>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80059ba:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 80059be:	d003      	beq.n	80059c8 <HAL_UART_IRQHandler+0x7c>
 80059c0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80059c4:	f040 8154 	bne.w	8005c70 <HAL_UART_IRQHandler+0x324>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80059c8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80059cc:	d002      	beq.n	80059d4 <HAL_UART_IRQHandler+0x88>
 80059ce:	2800      	cmp	r0, #0
 80059d0:	f2c0 8152 	blt.w	8005c78 <HAL_UART_IRQHandler+0x32c>
}
 80059d4:	bd70      	pop	{r4, r5, r6, pc}
      if (huart->RxISR != NULL)
 80059d6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d0fb      	beq.n	80059d4 <HAL_UART_IRQHandler+0x88>
        huart->RxISR(huart);
 80059dc:	4620      	mov	r0, r4
 80059de:	4798      	blx	r3
      return;
 80059e0:	e7f8      	b.n	80059d4 <HAL_UART_IRQHandler+0x88>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80059e2:	f013 0f01 	tst.w	r3, #1
 80059e6:	d009      	beq.n	80059fc <HAL_UART_IRQHandler+0xb0>
 80059e8:	f410 7f80 	tst.w	r0, #256	; 0x100
 80059ec:	d006      	beq.n	80059fc <HAL_UART_IRQHandler+0xb0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80059ee:	2601      	movs	r6, #1
 80059f0:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80059f2:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80059f6:	4331      	orrs	r1, r6
 80059f8:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80059fc:	f013 0f02 	tst.w	r3, #2
 8005a00:	d00b      	beq.n	8005a1a <HAL_UART_IRQHandler+0xce>
 8005a02:	f015 0f01 	tst.w	r5, #1
 8005a06:	d008      	beq.n	8005a1a <HAL_UART_IRQHandler+0xce>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005a08:	6821      	ldr	r1, [r4, #0]
 8005a0a:	2602      	movs	r6, #2
 8005a0c:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a0e:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8005a12:	f041 0104 	orr.w	r1, r1, #4
 8005a16:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a1a:	f013 0f04 	tst.w	r3, #4
 8005a1e:	d00b      	beq.n	8005a38 <HAL_UART_IRQHandler+0xec>
 8005a20:	f015 0f01 	tst.w	r5, #1
 8005a24:	d008      	beq.n	8005a38 <HAL_UART_IRQHandler+0xec>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005a26:	6821      	ldr	r1, [r4, #0]
 8005a28:	2604      	movs	r6, #4
 8005a2a:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a2c:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8005a30:	f041 0102 	orr.w	r1, r1, #2
 8005a34:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005a38:	f013 0f08 	tst.w	r3, #8
 8005a3c:	d00b      	beq.n	8005a56 <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005a3e:	f010 0f20 	tst.w	r0, #32
 8005a42:	d100      	bne.n	8005a46 <HAL_UART_IRQHandler+0xfa>
 8005a44:	b13a      	cbz	r2, 8005a56 <HAL_UART_IRQHandler+0x10a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a46:	6822      	ldr	r2, [r4, #0]
 8005a48:	2108      	movs	r1, #8
 8005a4a:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a4c:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8005a50:	430a      	orrs	r2, r1
 8005a52:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005a56:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8005a5a:	d00c      	beq.n	8005a76 <HAL_UART_IRQHandler+0x12a>
 8005a5c:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 8005a60:	d009      	beq.n	8005a76 <HAL_UART_IRQHandler+0x12a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a62:	6822      	ldr	r2, [r4, #0]
 8005a64:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005a68:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005a6a:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8005a6e:	f042 0220 	orr.w	r2, r2, #32
 8005a72:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a76:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8005a7a:	2a00      	cmp	r2, #0
 8005a7c:	d0aa      	beq.n	80059d4 <HAL_UART_IRQHandler+0x88>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005a7e:	f013 0f20 	tst.w	r3, #32
 8005a82:	d009      	beq.n	8005a98 <HAL_UART_IRQHandler+0x14c>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005a84:	f010 0f20 	tst.w	r0, #32
 8005a88:	d102      	bne.n	8005a90 <HAL_UART_IRQHandler+0x144>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005a8a:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 8005a8e:	d003      	beq.n	8005a98 <HAL_UART_IRQHandler+0x14c>
        if (huart->RxISR != NULL)
 8005a90:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8005a92:	b10b      	cbz	r3, 8005a98 <HAL_UART_IRQHandler+0x14c>
          huart->RxISR(huart);
 8005a94:	4620      	mov	r0, r4
 8005a96:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8005a98:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005a9c:	6823      	ldr	r3, [r4, #0]
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005aa4:	d102      	bne.n	8005aac <HAL_UART_IRQHandler+0x160>
 8005aa6:	f012 0f28 	tst.w	r2, #40	; 0x28
 8005aaa:	d029      	beq.n	8005b00 <HAL_UART_IRQHandler+0x1b4>
        UART_EndRxTransfer(huart);
 8005aac:	4620      	mov	r0, r4
 8005aae:	f7ff fe81 	bl	80057b4 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ab2:	6823      	ldr	r3, [r4, #0]
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005aba:	d01d      	beq.n	8005af8 <HAL_UART_IRQHandler+0x1ac>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005abc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005abe:	f102 0308 	add.w	r3, r2, #8
 8005ac2:	e853 3f00 	ldrex	r3, [r3]
 8005ac6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aca:	3208      	adds	r2, #8
 8005acc:	e842 3100 	strex	r1, r3, [r2]
 8005ad0:	2900      	cmp	r1, #0
 8005ad2:	d1f3      	bne.n	8005abc <HAL_UART_IRQHandler+0x170>
          if (huart->hdmarx != NULL)
 8005ad4:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8005ad6:	b15b      	cbz	r3, 8005af0 <HAL_UART_IRQHandler+0x1a4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ad8:	4a3e      	ldr	r2, [pc, #248]	; (8005bd4 <HAL_UART_IRQHandler+0x288>)
 8005ada:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005adc:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8005ade:	f7fc fe4b 	bl	8002778 <HAL_DMA_Abort_IT>
 8005ae2:	2800      	cmp	r0, #0
 8005ae4:	f43f af76 	beq.w	80059d4 <HAL_UART_IRQHandler+0x88>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ae8:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8005aea:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005aec:	4798      	blx	r3
 8005aee:	e771      	b.n	80059d4 <HAL_UART_IRQHandler+0x88>
            HAL_UART_ErrorCallback(huart);
 8005af0:	4620      	mov	r0, r4
 8005af2:	f003 f81f 	bl	8008b34 <HAL_UART_ErrorCallback>
 8005af6:	e76d      	b.n	80059d4 <HAL_UART_IRQHandler+0x88>
          HAL_UART_ErrorCallback(huart);
 8005af8:	4620      	mov	r0, r4
 8005afa:	f003 f81b 	bl	8008b34 <HAL_UART_ErrorCallback>
 8005afe:	e769      	b.n	80059d4 <HAL_UART_IRQHandler+0x88>
        HAL_UART_ErrorCallback(huart);
 8005b00:	4620      	mov	r0, r4
 8005b02:	f003 f817 	bl	8008b34 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b06:	2300      	movs	r3, #0
 8005b08:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    return;
 8005b0c:	e762      	b.n	80059d4 <HAL_UART_IRQHandler+0x88>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005b0e:	f013 0f10 	tst.w	r3, #16
 8005b12:	f43f af39 	beq.w	8005988 <HAL_UART_IRQHandler+0x3c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005b16:	f010 0f10 	tst.w	r0, #16
 8005b1a:	f43f af35 	beq.w	8005988 <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b1e:	2310      	movs	r3, #16
 8005b20:	620b      	str	r3, [r1, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b22:	6823      	ldr	r3, [r4, #0]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005b2a:	d055      	beq.n	8005bd8 <HAL_UART_IRQHandler+0x28c>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005b2c:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8005b2e:	6813      	ldr	r3, [r2, #0]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	f43f af4d 	beq.w	80059d4 <HAL_UART_IRQHandler+0x88>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005b3a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8005b3e:	4299      	cmp	r1, r3
 8005b40:	f67f af48 	bls.w	80059d4 <HAL_UART_IRQHandler+0x88>
        huart->RxXferCount = nb_remaining_rx_data;
 8005b44:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005b48:	6813      	ldr	r3, [r2, #0]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f013 0f20 	tst.w	r3, #32
 8005b50:	d131      	bne.n	8005bb6 <HAL_UART_IRQHandler+0x26a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b52:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b54:	e852 3f00 	ldrex	r3, [r2]
 8005b58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b5c:	e842 3100 	strex	r1, r3, [r2]
 8005b60:	2900      	cmp	r1, #0
 8005b62:	d1f6      	bne.n	8005b52 <HAL_UART_IRQHandler+0x206>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b64:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b66:	f102 0308 	add.w	r3, r2, #8
 8005b6a:	e853 3f00 	ldrex	r3, [r3]
 8005b6e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b72:	3208      	adds	r2, #8
 8005b74:	e842 3100 	strex	r1, r3, [r2]
 8005b78:	2900      	cmp	r1, #0
 8005b7a:	d1f3      	bne.n	8005b64 <HAL_UART_IRQHandler+0x218>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b7c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b7e:	f102 0308 	add.w	r3, r2, #8
 8005b82:	e853 3f00 	ldrex	r3, [r3]
 8005b86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b8a:	3208      	adds	r2, #8
 8005b8c:	e842 3100 	strex	r1, r3, [r2]
 8005b90:	2900      	cmp	r1, #0
 8005b92:	d1f3      	bne.n	8005b7c <HAL_UART_IRQHandler+0x230>
          huart->RxState = HAL_UART_STATE_READY;
 8005b94:	2320      	movs	r3, #32
 8005b96:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b9e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba0:	e852 3f00 	ldrex	r3, [r2]
 8005ba4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ba8:	e842 3100 	strex	r1, r3, [r2]
 8005bac:	2900      	cmp	r1, #0
 8005bae:	d1f6      	bne.n	8005b9e <HAL_UART_IRQHandler+0x252>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005bb0:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8005bb2:	f7fc fdab 	bl	800270c <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005bb6:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8005bba:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	1ac9      	subs	r1, r1, r3
 8005bc2:	b289      	uxth	r1, r1
 8005bc4:	4620      	mov	r0, r4
 8005bc6:	f7ff fec0 	bl	800594a <HAL_UARTEx_RxEventCallback>
      return;
 8005bca:	e703      	b.n	80059d4 <HAL_UART_IRQHandler+0x88>
 8005bcc:	10000001 	.word	0x10000001
 8005bd0:	04000120 	.word	0x04000120
 8005bd4:	08005937 	.word	0x08005937
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005bd8:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8005bdc:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005be0:	b29b      	uxth	r3, r3
 8005be2:	1ac9      	subs	r1, r1, r3
 8005be4:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8005be6:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	f43f aef1 	beq.w	80059d4 <HAL_UART_IRQHandler+0x88>
          && (nb_rx_data > 0U))
 8005bf2:	2900      	cmp	r1, #0
 8005bf4:	f43f aeee 	beq.w	80059d4 <HAL_UART_IRQHandler+0x88>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005bf8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bfa:	e852 3f00 	ldrex	r3, [r2]
 8005bfe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c02:	e842 3000 	strex	r0, r3, [r2]
 8005c06:	2800      	cmp	r0, #0
 8005c08:	d1f6      	bne.n	8005bf8 <HAL_UART_IRQHandler+0x2ac>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005c0a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c0c:	f102 0308 	add.w	r3, r2, #8
 8005c10:	e853 3f00 	ldrex	r3, [r3]
 8005c14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c18:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c1c:	3208      	adds	r2, #8
 8005c1e:	e842 3000 	strex	r0, r3, [r2]
 8005c22:	2800      	cmp	r0, #0
 8005c24:	d1f1      	bne.n	8005c0a <HAL_UART_IRQHandler+0x2be>
        huart->RxState = HAL_UART_STATE_READY;
 8005c26:	2320      	movs	r3, #32
 8005c28:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	66e3      	str	r3, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 8005c30:	6723      	str	r3, [r4, #112]	; 0x70
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c32:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c34:	e852 3f00 	ldrex	r3, [r2]
 8005c38:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c3c:	e842 3000 	strex	r0, r3, [r2]
 8005c40:	2800      	cmp	r0, #0
 8005c42:	d1f6      	bne.n	8005c32 <HAL_UART_IRQHandler+0x2e6>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005c44:	4620      	mov	r0, r4
 8005c46:	f7ff fe80 	bl	800594a <HAL_UARTEx_RxEventCallback>
      return;
 8005c4a:	e6c3      	b.n	80059d4 <HAL_UART_IRQHandler+0x88>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005c4c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005c50:	620b      	str	r3, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8005c52:	4620      	mov	r0, r4
 8005c54:	f000 fc1c 	bl	8006490 <HAL_UARTEx_WakeupCallback>
    return;
 8005c58:	e6bc      	b.n	80059d4 <HAL_UART_IRQHandler+0x88>
    if (huart->TxISR != NULL)
 8005c5a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	f43f aeb9 	beq.w	80059d4 <HAL_UART_IRQHandler+0x88>
      huart->TxISR(huart);
 8005c62:	4620      	mov	r0, r4
 8005c64:	4798      	blx	r3
    return;
 8005c66:	e6b5      	b.n	80059d4 <HAL_UART_IRQHandler+0x88>
    UART_EndTransmit_IT(huart);
 8005c68:	4620      	mov	r0, r4
 8005c6a:	f7ff fe25 	bl	80058b8 <UART_EndTransmit_IT>
    return;
 8005c6e:	e6b1      	b.n	80059d4 <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005c70:	4620      	mov	r0, r4
 8005c72:	f000 fc0f 	bl	8006494 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 8005c76:	e6ad      	b.n	80059d4 <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005c78:	4620      	mov	r0, r4
 8005c7a:	f000 fc0a 	bl	8006492 <HAL_UARTEx_RxFifoFullCallback>
    return;
 8005c7e:	e6a9      	b.n	80059d4 <HAL_UART_IRQHandler+0x88>

08005c80 <UART_DMARxHalfCplt>:
{
 8005c80:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c82:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c84:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	d002      	beq.n	8005c90 <UART_DMARxHalfCplt+0x10>
    HAL_UART_RxHalfCpltCallback(huart);
 8005c8a:	f7ff fe27 	bl	80058dc <HAL_UART_RxHalfCpltCallback>
}
 8005c8e:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005c90:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8005c94:	0849      	lsrs	r1, r1, #1
 8005c96:	f7ff fe58 	bl	800594a <HAL_UARTEx_RxEventCallback>
 8005c9a:	e7f8      	b.n	8005c8e <UART_DMARxHalfCplt+0xe>

08005c9c <UART_DMAReceiveCplt>:
{
 8005c9c:	b508      	push	{r3, lr}
 8005c9e:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005ca0:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f013 0f20 	tst.w	r3, #32
 8005caa:	d129      	bne.n	8005d00 <UART_DMAReceiveCplt+0x64>
    huart->RxXferCount = 0U;
 8005cac:	2300      	movs	r3, #0
 8005cae:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005cb2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb4:	e852 3f00 	ldrex	r3, [r2]
 8005cb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cbc:	e842 3100 	strex	r1, r3, [r2]
 8005cc0:	2900      	cmp	r1, #0
 8005cc2:	d1f6      	bne.n	8005cb2 <UART_DMAReceiveCplt+0x16>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cc4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc6:	f102 0308 	add.w	r3, r2, #8
 8005cca:	e853 3f00 	ldrex	r3, [r3]
 8005cce:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd2:	3208      	adds	r2, #8
 8005cd4:	e842 3100 	strex	r1, r3, [r2]
 8005cd8:	2900      	cmp	r1, #0
 8005cda:	d1f3      	bne.n	8005cc4 <UART_DMAReceiveCplt+0x28>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cdc:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cde:	f102 0308 	add.w	r3, r2, #8
 8005ce2:	e853 3f00 	ldrex	r3, [r3]
 8005ce6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cea:	3208      	adds	r2, #8
 8005cec:	e842 3100 	strex	r1, r3, [r2]
 8005cf0:	2900      	cmp	r1, #0
 8005cf2:	d1f3      	bne.n	8005cdc <UART_DMAReceiveCplt+0x40>
    huart->RxState = HAL_UART_STATE_READY;
 8005cf4:	2320      	movs	r3, #32
 8005cf6:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cfa:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d005      	beq.n	8005d0c <UART_DMAReceiveCplt+0x70>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d00:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d00c      	beq.n	8005d20 <UART_DMAReceiveCplt+0x84>
    HAL_UART_RxCpltCallback(huart);
 8005d06:	f002 ff13 	bl	8008b30 <HAL_UART_RxCpltCallback>
}
 8005d0a:	bd08      	pop	{r3, pc}
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d0c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d0e:	e852 3f00 	ldrex	r3, [r2]
 8005d12:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d16:	e842 3100 	strex	r1, r3, [r2]
 8005d1a:	2900      	cmp	r1, #0
 8005d1c:	d1f6      	bne.n	8005d0c <UART_DMAReceiveCplt+0x70>
 8005d1e:	e7ef      	b.n	8005d00 <UART_DMAReceiveCplt+0x64>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d20:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8005d24:	f7ff fe11 	bl	800594a <HAL_UARTEx_RxEventCallback>
 8005d28:	e7ef      	b.n	8005d0a <UART_DMAReceiveCplt+0x6e>
	...

08005d2c <UART_SetConfig>:
{
 8005d2c:	b570      	push	{r4, r5, r6, lr}
 8005d2e:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8005d30:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d32:	6883      	ldr	r3, [r0, #8]
 8005d34:	6902      	ldr	r2, [r0, #16]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	6942      	ldr	r2, [r0, #20]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	69c2      	ldr	r2, [r0, #28]
 8005d3e:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d40:	6808      	ldr	r0, [r1, #0]
 8005d42:	4a96      	ldr	r2, [pc, #600]	; (8005f9c <UART_SetConfig+0x270>)
 8005d44:	4002      	ands	r2, r0
 8005d46:	4313      	orrs	r3, r2
 8005d48:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d4a:	6822      	ldr	r2, [r4, #0]
 8005d4c:	6853      	ldr	r3, [r2, #4]
 8005d4e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005d52:	68e1      	ldr	r1, [r4, #12]
 8005d54:	430b      	orrs	r3, r1
 8005d56:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d58:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005d5a:	6822      	ldr	r2, [r4, #0]
 8005d5c:	4b90      	ldr	r3, [pc, #576]	; (8005fa0 <UART_SetConfig+0x274>)
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d001      	beq.n	8005d66 <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 8005d62:	6a23      	ldr	r3, [r4, #32]
 8005d64:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d66:	6893      	ldr	r3, [r2, #8]
 8005d68:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005d6c:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005d70:	430b      	orrs	r3, r1
 8005d72:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005d74:	6822      	ldr	r2, [r4, #0]
 8005d76:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005d78:	f023 030f 	bic.w	r3, r3, #15
 8005d7c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005d7e:	430b      	orrs	r3, r1
 8005d80:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d82:	6823      	ldr	r3, [r4, #0]
 8005d84:	4a87      	ldr	r2, [pc, #540]	; (8005fa4 <UART_SetConfig+0x278>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d010      	beq.n	8005dac <UART_SetConfig+0x80>
 8005d8a:	4a87      	ldr	r2, [pc, #540]	; (8005fa8 <UART_SetConfig+0x27c>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d021      	beq.n	8005dd4 <UART_SetConfig+0xa8>
 8005d90:	4a86      	ldr	r2, [pc, #536]	; (8005fac <UART_SetConfig+0x280>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d037      	beq.n	8005e06 <UART_SetConfig+0xda>
 8005d96:	4a86      	ldr	r2, [pc, #536]	; (8005fb0 <UART_SetConfig+0x284>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d05c      	beq.n	8005e56 <UART_SetConfig+0x12a>
 8005d9c:	4a85      	ldr	r2, [pc, #532]	; (8005fb4 <UART_SetConfig+0x288>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d06b      	beq.n	8005e7a <UART_SetConfig+0x14e>
 8005da2:	4a7f      	ldr	r2, [pc, #508]	; (8005fa0 <UART_SetConfig+0x274>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d07d      	beq.n	8005ea4 <UART_SetConfig+0x178>
 8005da8:	2210      	movs	r2, #16
 8005daa:	e03a      	b.n	8005e22 <UART_SetConfig+0xf6>
 8005dac:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 8005db0:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8005db4:	f002 0203 	and.w	r2, r2, #3
 8005db8:	2a03      	cmp	r2, #3
 8005dba:	d809      	bhi.n	8005dd0 <UART_SetConfig+0xa4>
 8005dbc:	e8df f002 	tbb	[pc, r2]
 8005dc0:	06870402 	.word	0x06870402
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	e02c      	b.n	8005e22 <UART_SetConfig+0xf6>
 8005dc8:	2204      	movs	r2, #4
 8005dca:	e02a      	b.n	8005e22 <UART_SetConfig+0xf6>
 8005dcc:	2208      	movs	r2, #8
 8005dce:	e028      	b.n	8005e22 <UART_SetConfig+0xf6>
 8005dd0:	2210      	movs	r2, #16
 8005dd2:	e026      	b.n	8005e22 <UART_SetConfig+0xf6>
 8005dd4:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 8005dd8:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8005ddc:	f002 020c 	and.w	r2, r2, #12
 8005de0:	2a0c      	cmp	r2, #12
 8005de2:	d80e      	bhi.n	8005e02 <UART_SetConfig+0xd6>
 8005de4:	e8df f002 	tbb	[pc, r2]
 8005de8:	0d0d0d07 	.word	0x0d0d0d07
 8005dec:	0d0d0d09 	.word	0x0d0d0d09
 8005df0:	0d0d0d75 	.word	0x0d0d0d75
 8005df4:	0b          	.byte	0x0b
 8005df5:	00          	.byte	0x00
 8005df6:	2200      	movs	r2, #0
 8005df8:	e013      	b.n	8005e22 <UART_SetConfig+0xf6>
 8005dfa:	2204      	movs	r2, #4
 8005dfc:	e011      	b.n	8005e22 <UART_SetConfig+0xf6>
 8005dfe:	2208      	movs	r2, #8
 8005e00:	e00f      	b.n	8005e22 <UART_SetConfig+0xf6>
 8005e02:	2210      	movs	r2, #16
 8005e04:	e00d      	b.n	8005e22 <UART_SetConfig+0xf6>
 8005e06:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 8005e0a:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8005e0e:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8005e12:	2a20      	cmp	r2, #32
 8005e14:	d05f      	beq.n	8005ed6 <UART_SetConfig+0x1aa>
 8005e16:	d81a      	bhi.n	8005e4e <UART_SetConfig+0x122>
 8005e18:	2a00      	cmp	r2, #0
 8005e1a:	d05e      	beq.n	8005eda <UART_SetConfig+0x1ae>
 8005e1c:	2a10      	cmp	r2, #16
 8005e1e:	d15e      	bne.n	8005ede <UART_SetConfig+0x1b2>
 8005e20:	2204      	movs	r2, #4
  if (UART_INSTANCE_LOWPOWER(huart))
 8005e22:	495f      	ldr	r1, [pc, #380]	; (8005fa0 <UART_SetConfig+0x274>)
 8005e24:	428b      	cmp	r3, r1
 8005e26:	d076      	beq.n	8005f16 <UART_SetConfig+0x1ea>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e28:	69e0      	ldr	r0, [r4, #28]
 8005e2a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8005e2e:	f000 80c9 	beq.w	8005fc4 <UART_SetConfig+0x298>
    switch (clocksource)
 8005e32:	2a08      	cmp	r2, #8
 8005e34:	f200 8134 	bhi.w	80060a0 <UART_SetConfig+0x374>
 8005e38:	e8df f012 	tbh	[pc, r2, lsl #1]
 8005e3c:	011900f7 	.word	0x011900f7
 8005e40:	013200f5 	.word	0x013200f5
 8005e44:	0132011c 	.word	0x0132011c
 8005e48:	01320132 	.word	0x01320132
 8005e4c:	011f      	.short	0x011f
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e4e:	2a30      	cmp	r2, #48	; 0x30
 8005e50:	d147      	bne.n	8005ee2 <UART_SetConfig+0x1b6>
 8005e52:	2208      	movs	r2, #8
 8005e54:	e7e5      	b.n	8005e22 <UART_SetConfig+0xf6>
 8005e56:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 8005e5a:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8005e5e:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8005e62:	2a80      	cmp	r2, #128	; 0x80
 8005e64:	d03f      	beq.n	8005ee6 <UART_SetConfig+0x1ba>
 8005e66:	d804      	bhi.n	8005e72 <UART_SetConfig+0x146>
 8005e68:	b3fa      	cbz	r2, 8005eea <UART_SetConfig+0x1be>
 8005e6a:	2a40      	cmp	r2, #64	; 0x40
 8005e6c:	d13f      	bne.n	8005eee <UART_SetConfig+0x1c2>
 8005e6e:	2204      	movs	r2, #4
 8005e70:	e7d7      	b.n	8005e22 <UART_SetConfig+0xf6>
 8005e72:	2ac0      	cmp	r2, #192	; 0xc0
 8005e74:	d13d      	bne.n	8005ef2 <UART_SetConfig+0x1c6>
 8005e76:	2208      	movs	r2, #8
 8005e78:	e7d3      	b.n	8005e22 <UART_SetConfig+0xf6>
 8005e7a:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 8005e7e:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8005e82:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8005e86:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8005e8a:	d034      	beq.n	8005ef6 <UART_SetConfig+0x1ca>
 8005e8c:	d805      	bhi.n	8005e9a <UART_SetConfig+0x16e>
 8005e8e:	b3a2      	cbz	r2, 8005efa <UART_SetConfig+0x1ce>
 8005e90:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8005e94:	d133      	bne.n	8005efe <UART_SetConfig+0x1d2>
 8005e96:	2204      	movs	r2, #4
 8005e98:	e7c3      	b.n	8005e22 <UART_SetConfig+0xf6>
 8005e9a:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8005e9e:	d130      	bne.n	8005f02 <UART_SetConfig+0x1d6>
 8005ea0:	2208      	movs	r2, #8
 8005ea2:	e7be      	b.n	8005e22 <UART_SetConfig+0xf6>
 8005ea4:	f502 32c8 	add.w	r2, r2, #102400	; 0x19000
 8005ea8:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8005eac:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8005eb0:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8005eb4:	d027      	beq.n	8005f06 <UART_SetConfig+0x1da>
 8005eb6:	d805      	bhi.n	8005ec4 <UART_SetConfig+0x198>
 8005eb8:	b33a      	cbz	r2, 8005f0a <UART_SetConfig+0x1de>
 8005eba:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8005ebe:	d126      	bne.n	8005f0e <UART_SetConfig+0x1e2>
 8005ec0:	2204      	movs	r2, #4
 8005ec2:	e7ae      	b.n	8005e22 <UART_SetConfig+0xf6>
 8005ec4:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8005ec8:	d123      	bne.n	8005f12 <UART_SetConfig+0x1e6>
 8005eca:	2208      	movs	r2, #8
 8005ecc:	e7a9      	b.n	8005e22 <UART_SetConfig+0xf6>
 8005ece:	2202      	movs	r2, #2
 8005ed0:	e7a7      	b.n	8005e22 <UART_SetConfig+0xf6>
 8005ed2:	2202      	movs	r2, #2
 8005ed4:	e7a5      	b.n	8005e22 <UART_SetConfig+0xf6>
 8005ed6:	2202      	movs	r2, #2
 8005ed8:	e7a3      	b.n	8005e22 <UART_SetConfig+0xf6>
 8005eda:	2200      	movs	r2, #0
 8005edc:	e7a1      	b.n	8005e22 <UART_SetConfig+0xf6>
 8005ede:	2210      	movs	r2, #16
 8005ee0:	e79f      	b.n	8005e22 <UART_SetConfig+0xf6>
 8005ee2:	2210      	movs	r2, #16
 8005ee4:	e79d      	b.n	8005e22 <UART_SetConfig+0xf6>
 8005ee6:	2202      	movs	r2, #2
 8005ee8:	e79b      	b.n	8005e22 <UART_SetConfig+0xf6>
 8005eea:	2200      	movs	r2, #0
 8005eec:	e799      	b.n	8005e22 <UART_SetConfig+0xf6>
 8005eee:	2210      	movs	r2, #16
 8005ef0:	e797      	b.n	8005e22 <UART_SetConfig+0xf6>
 8005ef2:	2210      	movs	r2, #16
 8005ef4:	e795      	b.n	8005e22 <UART_SetConfig+0xf6>
 8005ef6:	2202      	movs	r2, #2
 8005ef8:	e793      	b.n	8005e22 <UART_SetConfig+0xf6>
 8005efa:	2200      	movs	r2, #0
 8005efc:	e791      	b.n	8005e22 <UART_SetConfig+0xf6>
 8005efe:	2210      	movs	r2, #16
 8005f00:	e78f      	b.n	8005e22 <UART_SetConfig+0xf6>
 8005f02:	2210      	movs	r2, #16
 8005f04:	e78d      	b.n	8005e22 <UART_SetConfig+0xf6>
 8005f06:	2202      	movs	r2, #2
 8005f08:	e78b      	b.n	8005e22 <UART_SetConfig+0xf6>
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	e789      	b.n	8005e22 <UART_SetConfig+0xf6>
 8005f0e:	2210      	movs	r2, #16
 8005f10:	e787      	b.n	8005e22 <UART_SetConfig+0xf6>
 8005f12:	2210      	movs	r2, #16
 8005f14:	e785      	b.n	8005e22 <UART_SetConfig+0xf6>
    switch (clocksource)
 8005f16:	2a08      	cmp	r2, #8
 8005f18:	f200 80b2 	bhi.w	8006080 <UART_SetConfig+0x354>
 8005f1c:	e8df f002 	tbb	[pc, r2]
 8005f20:	b03bb008 	.word	0xb03bb008
 8005f24:	b0b0b038 	.word	0xb0b0b038
 8005f28:	05          	.byte	0x05
 8005f29:	00          	.byte	0x00
 8005f2a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005f2e:	e004      	b.n	8005f3a <UART_SetConfig+0x20e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f30:	f7fe ff22 	bl	8004d78 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005f34:	2800      	cmp	r0, #0
 8005f36:	f000 80a5 	beq.w	8006084 <UART_SetConfig+0x358>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005f3a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005f3c:	4b1e      	ldr	r3, [pc, #120]	; (8005fb8 <UART_SetConfig+0x28c>)
 8005f3e:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8005f42:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005f46:	6865      	ldr	r5, [r4, #4]
 8005f48:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8005f4c:	4299      	cmp	r1, r3
 8005f4e:	f200 809b 	bhi.w	8006088 <UART_SetConfig+0x35c>
 8005f52:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8005f56:	f200 8099 	bhi.w	800608c <UART_SetConfig+0x360>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f5a:	2600      	movs	r6, #0
 8005f5c:	4633      	mov	r3, r6
 8005f5e:	4631      	mov	r1, r6
 8005f60:	f7fa feaa 	bl	8000cb8 <__aeabi_uldivmod>
 8005f64:	0209      	lsls	r1, r1, #8
 8005f66:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8005f6a:	0200      	lsls	r0, r0, #8
 8005f6c:	086b      	lsrs	r3, r5, #1
 8005f6e:	18c0      	adds	r0, r0, r3
 8005f70:	462a      	mov	r2, r5
 8005f72:	4633      	mov	r3, r6
 8005f74:	f141 0100 	adc.w	r1, r1, #0
 8005f78:	f7fa fe9e 	bl	8000cb8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005f7c:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8005f80:	4b0e      	ldr	r3, [pc, #56]	; (8005fbc <UART_SetConfig+0x290>)
 8005f82:	429a      	cmp	r2, r3
 8005f84:	f200 8084 	bhi.w	8006090 <UART_SetConfig+0x364>
          huart->Instance->BRR = usartdiv;
 8005f88:	6823      	ldr	r3, [r4, #0]
 8005f8a:	60d8      	str	r0, [r3, #12]
 8005f8c:	4630      	mov	r0, r6
 8005f8e:	e065      	b.n	800605c <UART_SetConfig+0x330>
        pclk = HAL_RCC_GetSysClockFreq();
 8005f90:	f7fe fa52 	bl	8004438 <HAL_RCC_GetSysClockFreq>
        break;
 8005f94:	e7ce      	b.n	8005f34 <UART_SetConfig+0x208>
        pclk = (uint32_t) HSI_VALUE;
 8005f96:	480a      	ldr	r0, [pc, #40]	; (8005fc0 <UART_SetConfig+0x294>)
 8005f98:	e7cf      	b.n	8005f3a <UART_SetConfig+0x20e>
 8005f9a:	bf00      	nop
 8005f9c:	cfff69f3 	.word	0xcfff69f3
 8005fa0:	40008000 	.word	0x40008000
 8005fa4:	40013800 	.word	0x40013800
 8005fa8:	40004400 	.word	0x40004400
 8005fac:	40004800 	.word	0x40004800
 8005fb0:	40004c00 	.word	0x40004c00
 8005fb4:	40005000 	.word	0x40005000
 8005fb8:	0800e298 	.word	0x0800e298
 8005fbc:	000ffcff 	.word	0x000ffcff
 8005fc0:	00f42400 	.word	0x00f42400
    switch (clocksource)
 8005fc4:	2a08      	cmp	r2, #8
 8005fc6:	d865      	bhi.n	8006094 <UART_SetConfig+0x368>
 8005fc8:	e8df f002 	tbb	[pc, r2]
 8005fcc:	64052707 	.word	0x64052707
 8005fd0:	6464642a 	.word	0x6464642a
 8005fd4:	0b          	.byte	0x0b
 8005fd5:	00          	.byte	0x00
 8005fd6:	4835      	ldr	r0, [pc, #212]	; (80060ac <UART_SetConfig+0x380>)
 8005fd8:	e003      	b.n	8005fe2 <UART_SetConfig+0x2b6>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fda:	f7fe fecd 	bl	8004d78 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005fde:	2800      	cmp	r0, #0
 8005fe0:	d05a      	beq.n	8006098 <UART_SetConfig+0x36c>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005fe2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005fe4:	4b32      	ldr	r3, [pc, #200]	; (80060b0 <UART_SetConfig+0x384>)
 8005fe6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8005fea:	fbb0 f0f3 	udiv	r0, r0, r3
 8005fee:	6862      	ldr	r2, [r4, #4]
 8005ff0:	0853      	lsrs	r3, r2, #1
 8005ff2:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8005ff6:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ffa:	f1a0 0210 	sub.w	r2, r0, #16
 8005ffe:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8006002:	429a      	cmp	r2, r3
 8006004:	d84a      	bhi.n	800609c <UART_SetConfig+0x370>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006006:	b283      	uxth	r3, r0
 8006008:	f023 030f 	bic.w	r3, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800600c:	f3c0 0042 	ubfx	r0, r0, #1, #3
 8006010:	4318      	orrs	r0, r3
        huart->Instance->BRR = brrtemp;
 8006012:	6823      	ldr	r3, [r4, #0]
 8006014:	60d8      	str	r0, [r3, #12]
 8006016:	2000      	movs	r0, #0
 8006018:	e020      	b.n	800605c <UART_SetConfig+0x330>
        pclk = HAL_RCC_GetPCLK2Freq();
 800601a:	f7fe febf 	bl	8004d9c <HAL_RCC_GetPCLK2Freq>
        break;
 800601e:	e7de      	b.n	8005fde <UART_SetConfig+0x2b2>
        pclk = HAL_RCC_GetSysClockFreq();
 8006020:	f7fe fa0a 	bl	8004438 <HAL_RCC_GetSysClockFreq>
        break;
 8006024:	e7db      	b.n	8005fde <UART_SetConfig+0x2b2>
    switch (clocksource)
 8006026:	4821      	ldr	r0, [pc, #132]	; (80060ac <UART_SetConfig+0x380>)
 8006028:	e003      	b.n	8006032 <UART_SetConfig+0x306>
        pclk = HAL_RCC_GetPCLK1Freq();
 800602a:	f7fe fea5 	bl	8004d78 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800602e:	2800      	cmp	r0, #0
 8006030:	d038      	beq.n	80060a4 <UART_SetConfig+0x378>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006032:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006034:	4b1e      	ldr	r3, [pc, #120]	; (80060b0 <UART_SetConfig+0x384>)
 8006036:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800603a:	fbb0 f0f3 	udiv	r0, r0, r3
 800603e:	6863      	ldr	r3, [r4, #4]
 8006040:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8006044:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006048:	f1a0 0210 	sub.w	r2, r0, #16
 800604c:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8006050:	429a      	cmp	r2, r3
 8006052:	d829      	bhi.n	80060a8 <UART_SetConfig+0x37c>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006054:	6823      	ldr	r3, [r4, #0]
 8006056:	b280      	uxth	r0, r0
 8006058:	60d8      	str	r0, [r3, #12]
 800605a:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 800605c:	2301      	movs	r3, #1
 800605e:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006062:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 8006066:	2300      	movs	r3, #0
 8006068:	6723      	str	r3, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 800606a:	6763      	str	r3, [r4, #116]	; 0x74
}
 800606c:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 800606e:	f7fe fe95 	bl	8004d9c <HAL_RCC_GetPCLK2Freq>
        break;
 8006072:	e7dc      	b.n	800602e <UART_SetConfig+0x302>
        pclk = HAL_RCC_GetSysClockFreq();
 8006074:	f7fe f9e0 	bl	8004438 <HAL_RCC_GetSysClockFreq>
        break;
 8006078:	e7d9      	b.n	800602e <UART_SetConfig+0x302>
        pclk = (uint32_t) LSE_VALUE;
 800607a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800607e:	e7d8      	b.n	8006032 <UART_SetConfig+0x306>
    switch (clocksource)
 8006080:	2001      	movs	r0, #1
 8006082:	e7eb      	b.n	800605c <UART_SetConfig+0x330>
 8006084:	2000      	movs	r0, #0
 8006086:	e7e9      	b.n	800605c <UART_SetConfig+0x330>
        ret = HAL_ERROR;
 8006088:	2001      	movs	r0, #1
 800608a:	e7e7      	b.n	800605c <UART_SetConfig+0x330>
 800608c:	2001      	movs	r0, #1
 800608e:	e7e5      	b.n	800605c <UART_SetConfig+0x330>
          ret = HAL_ERROR;
 8006090:	2001      	movs	r0, #1
 8006092:	e7e3      	b.n	800605c <UART_SetConfig+0x330>
    switch (clocksource)
 8006094:	2001      	movs	r0, #1
 8006096:	e7e1      	b.n	800605c <UART_SetConfig+0x330>
 8006098:	2000      	movs	r0, #0
 800609a:	e7df      	b.n	800605c <UART_SetConfig+0x330>
        ret = HAL_ERROR;
 800609c:	2001      	movs	r0, #1
 800609e:	e7dd      	b.n	800605c <UART_SetConfig+0x330>
    switch (clocksource)
 80060a0:	2001      	movs	r0, #1
 80060a2:	e7db      	b.n	800605c <UART_SetConfig+0x330>
 80060a4:	2000      	movs	r0, #0
 80060a6:	e7d9      	b.n	800605c <UART_SetConfig+0x330>
        ret = HAL_ERROR;
 80060a8:	2001      	movs	r0, #1
 80060aa:	e7d7      	b.n	800605c <UART_SetConfig+0x330>
 80060ac:	00f42400 	.word	0x00f42400
 80060b0:	0800e298 	.word	0x0800e298

080060b4 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80060b4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80060b6:	f013 0f01 	tst.w	r3, #1
 80060ba:	d006      	beq.n	80060ca <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80060bc:	6802      	ldr	r2, [r0, #0]
 80060be:	6853      	ldr	r3, [r2, #4]
 80060c0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80060c4:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80060c6:	430b      	orrs	r3, r1
 80060c8:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80060ca:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80060cc:	f013 0f02 	tst.w	r3, #2
 80060d0:	d006      	beq.n	80060e0 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80060d2:	6802      	ldr	r2, [r0, #0]
 80060d4:	6853      	ldr	r3, [r2, #4]
 80060d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060da:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80060dc:	430b      	orrs	r3, r1
 80060de:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80060e0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80060e2:	f013 0f04 	tst.w	r3, #4
 80060e6:	d006      	beq.n	80060f6 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80060e8:	6802      	ldr	r2, [r0, #0]
 80060ea:	6853      	ldr	r3, [r2, #4]
 80060ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80060f0:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80060f2:	430b      	orrs	r3, r1
 80060f4:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80060f6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80060f8:	f013 0f08 	tst.w	r3, #8
 80060fc:	d006      	beq.n	800610c <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80060fe:	6802      	ldr	r2, [r0, #0]
 8006100:	6853      	ldr	r3, [r2, #4]
 8006102:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006106:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8006108:	430b      	orrs	r3, r1
 800610a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800610c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800610e:	f013 0f10 	tst.w	r3, #16
 8006112:	d006      	beq.n	8006122 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006114:	6802      	ldr	r2, [r0, #0]
 8006116:	6893      	ldr	r3, [r2, #8]
 8006118:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800611c:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800611e:	430b      	orrs	r3, r1
 8006120:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006122:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006124:	f013 0f20 	tst.w	r3, #32
 8006128:	d006      	beq.n	8006138 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800612a:	6802      	ldr	r2, [r0, #0]
 800612c:	6893      	ldr	r3, [r2, #8]
 800612e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006132:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8006134:	430b      	orrs	r3, r1
 8006136:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006138:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800613a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800613e:	d00a      	beq.n	8006156 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006140:	6802      	ldr	r2, [r0, #0]
 8006142:	6853      	ldr	r3, [r2, #4]
 8006144:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006148:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800614a:	430b      	orrs	r3, r1
 800614c:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800614e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006150:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006154:	d00b      	beq.n	800616e <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006156:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006158:	f013 0f80 	tst.w	r3, #128	; 0x80
 800615c:	d006      	beq.n	800616c <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800615e:	6802      	ldr	r2, [r0, #0]
 8006160:	6853      	ldr	r3, [r2, #4]
 8006162:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8006166:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8006168:	430b      	orrs	r3, r1
 800616a:	6053      	str	r3, [r2, #4]
}
 800616c:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800616e:	6802      	ldr	r2, [r0, #0]
 8006170:	6853      	ldr	r3, [r2, #4]
 8006172:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006176:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8006178:	430b      	orrs	r3, r1
 800617a:	6053      	str	r3, [r2, #4]
 800617c:	e7eb      	b.n	8006156 <UART_AdvFeatureConfig+0xa2>

0800617e <UART_WaitOnFlagUntilTimeout>:
{
 800617e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006182:	4605      	mov	r5, r0
 8006184:	460f      	mov	r7, r1
 8006186:	4616      	mov	r6, r2
 8006188:	4699      	mov	r9, r3
 800618a:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800618e:	682c      	ldr	r4, [r5, #0]
 8006190:	69e4      	ldr	r4, [r4, #28]
 8006192:	ea37 0304 	bics.w	r3, r7, r4
 8006196:	bf0c      	ite	eq
 8006198:	f04f 0c01 	moveq.w	ip, #1
 800619c:	f04f 0c00 	movne.w	ip, #0
 80061a0:	45b4      	cmp	ip, r6
 80061a2:	d157      	bne.n	8006254 <UART_WaitOnFlagUntilTimeout+0xd6>
    if (Timeout != HAL_MAX_DELAY)
 80061a4:	f1b8 3fff 	cmp.w	r8, #4294967295
 80061a8:	d0f1      	beq.n	800618e <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061aa:	f7fc f913 	bl	80023d4 <HAL_GetTick>
 80061ae:	eba0 0009 	sub.w	r0, r0, r9
 80061b2:	4540      	cmp	r0, r8
 80061b4:	d82f      	bhi.n	8006216 <UART_WaitOnFlagUntilTimeout+0x98>
 80061b6:	f1b8 0f00 	cmp.w	r8, #0
 80061ba:	d02c      	beq.n	8006216 <UART_WaitOnFlagUntilTimeout+0x98>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80061bc:	682b      	ldr	r3, [r5, #0]
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	f012 0f04 	tst.w	r2, #4
 80061c4:	d0e3      	beq.n	800618e <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80061c6:	69da      	ldr	r2, [r3, #28]
 80061c8:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80061cc:	d0df      	beq.n	800618e <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80061ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80061d2:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80061d4:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d6:	e852 3f00 	ldrex	r3, [r2]
 80061da:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061de:	e842 3100 	strex	r1, r3, [r2]
 80061e2:	2900      	cmp	r1, #0
 80061e4:	d1f6      	bne.n	80061d4 <UART_WaitOnFlagUntilTimeout+0x56>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061e6:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e8:	f102 0308 	add.w	r3, r2, #8
 80061ec:	e853 3f00 	ldrex	r3, [r3]
 80061f0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f4:	3208      	adds	r2, #8
 80061f6:	e842 3100 	strex	r1, r3, [r2]
 80061fa:	2900      	cmp	r1, #0
 80061fc:	d1f3      	bne.n	80061e6 <UART_WaitOnFlagUntilTimeout+0x68>
          huart->gState = HAL_UART_STATE_READY;
 80061fe:	2320      	movs	r3, #32
 8006200:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006204:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006208:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
          __HAL_UNLOCK(huart);
 800620c:	2300      	movs	r3, #0
 800620e:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
          return HAL_TIMEOUT;
 8006212:	2003      	movs	r0, #3
 8006214:	e01f      	b.n	8006256 <UART_WaitOnFlagUntilTimeout+0xd8>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006216:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006218:	e852 3f00 	ldrex	r3, [r2]
 800621c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006220:	e842 3100 	strex	r1, r3, [r2]
 8006224:	2900      	cmp	r1, #0
 8006226:	d1f6      	bne.n	8006216 <UART_WaitOnFlagUntilTimeout+0x98>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006228:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800622a:	f102 0308 	add.w	r3, r2, #8
 800622e:	e853 3f00 	ldrex	r3, [r3]
 8006232:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006236:	3208      	adds	r2, #8
 8006238:	e842 3100 	strex	r1, r3, [r2]
 800623c:	2900      	cmp	r1, #0
 800623e:	d1f3      	bne.n	8006228 <UART_WaitOnFlagUntilTimeout+0xaa>
        huart->gState = HAL_UART_STATE_READY;
 8006240:	2320      	movs	r3, #32
 8006242:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006246:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        __HAL_UNLOCK(huart);
 800624a:	2300      	movs	r3, #0
 800624c:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
        return HAL_TIMEOUT;
 8006250:	2003      	movs	r0, #3
 8006252:	e000      	b.n	8006256 <UART_WaitOnFlagUntilTimeout+0xd8>
  return HAL_OK;
 8006254:	2000      	movs	r0, #0
}
 8006256:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800625a <UART_CheckIdleState>:
{
 800625a:	b530      	push	{r4, r5, lr}
 800625c:	b083      	sub	sp, #12
 800625e:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006260:	2300      	movs	r3, #0
 8006262:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 8006266:	f7fc f8b5 	bl	80023d4 <HAL_GetTick>
 800626a:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800626c:	6822      	ldr	r2, [r4, #0]
 800626e:	6812      	ldr	r2, [r2, #0]
 8006270:	f012 0f08 	tst.w	r2, #8
 8006274:	d10f      	bne.n	8006296 <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006276:	6823      	ldr	r3, [r4, #0]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f013 0f04 	tst.w	r3, #4
 800627e:	d118      	bne.n	80062b2 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 8006280:	2320      	movs	r3, #32
 8006282:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006286:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800628a:	2000      	movs	r0, #0
 800628c:	66e0      	str	r0, [r4, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 800628e:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8006292:	b003      	add	sp, #12
 8006294:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006296:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800629a:	9300      	str	r3, [sp, #0]
 800629c:	4603      	mov	r3, r0
 800629e:	2200      	movs	r2, #0
 80062a0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80062a4:	4620      	mov	r0, r4
 80062a6:	f7ff ff6a 	bl	800617e <UART_WaitOnFlagUntilTimeout>
 80062aa:	2800      	cmp	r0, #0
 80062ac:	d0e3      	beq.n	8006276 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 80062ae:	2003      	movs	r0, #3
 80062b0:	e7ef      	b.n	8006292 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062b2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80062b6:	9300      	str	r3, [sp, #0]
 80062b8:	462b      	mov	r3, r5
 80062ba:	2200      	movs	r2, #0
 80062bc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80062c0:	4620      	mov	r0, r4
 80062c2:	f7ff ff5c 	bl	800617e <UART_WaitOnFlagUntilTimeout>
 80062c6:	2800      	cmp	r0, #0
 80062c8:	d0da      	beq.n	8006280 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 80062ca:	2003      	movs	r0, #3
 80062cc:	e7e1      	b.n	8006292 <UART_CheckIdleState+0x38>

080062ce <HAL_UART_Init>:
  if (huart == NULL)
 80062ce:	b378      	cbz	r0, 8006330 <HAL_UART_Init+0x62>
{
 80062d0:	b510      	push	{r4, lr}
 80062d2:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80062d4:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 80062d8:	b30b      	cbz	r3, 800631e <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80062da:	2324      	movs	r3, #36	; 0x24
 80062dc:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 80062e0:	6822      	ldr	r2, [r4, #0]
 80062e2:	6813      	ldr	r3, [r2, #0]
 80062e4:	f023 0301 	bic.w	r3, r3, #1
 80062e8:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80062ea:	4620      	mov	r0, r4
 80062ec:	f7ff fd1e 	bl	8005d2c <UART_SetConfig>
 80062f0:	2801      	cmp	r0, #1
 80062f2:	d013      	beq.n	800631c <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80062f4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80062f6:	b9bb      	cbnz	r3, 8006328 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062f8:	6822      	ldr	r2, [r4, #0]
 80062fa:	6853      	ldr	r3, [r2, #4]
 80062fc:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8006300:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006302:	6822      	ldr	r2, [r4, #0]
 8006304:	6893      	ldr	r3, [r2, #8]
 8006306:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800630a:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 800630c:	6822      	ldr	r2, [r4, #0]
 800630e:	6813      	ldr	r3, [r2, #0]
 8006310:	f043 0301 	orr.w	r3, r3, #1
 8006314:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8006316:	4620      	mov	r0, r4
 8006318:	f7ff ff9f 	bl	800625a <UART_CheckIdleState>
}
 800631c:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800631e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 8006322:	f7fb fbf9 	bl	8001b18 <HAL_UART_MspInit>
 8006326:	e7d8      	b.n	80062da <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8006328:	4620      	mov	r0, r4
 800632a:	f7ff fec3 	bl	80060b4 <UART_AdvFeatureConfig>
 800632e:	e7e3      	b.n	80062f8 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8006330:	2001      	movs	r0, #1
}
 8006332:	4770      	bx	lr

08006334 <UART_Start_Receive_DMA>:
{
 8006334:	b510      	push	{r4, lr}
 8006336:	4604      	mov	r4, r0
 8006338:	4613      	mov	r3, r2
  huart->pRxBuffPtr = pData;
 800633a:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxXferSize = Size;
 800633c:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006340:	2200      	movs	r2, #0
 8006342:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006346:	2222      	movs	r2, #34	; 0x22
 8006348:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  if (huart->hdmarx != NULL)
 800634c:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 800634e:	b18a      	cbz	r2, 8006374 <UART_Start_Receive_DMA+0x40>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006350:	4922      	ldr	r1, [pc, #136]	; (80063dc <UART_Start_Receive_DMA+0xa8>)
 8006352:	62d1      	str	r1, [r2, #44]	; 0x2c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006354:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8006356:	4922      	ldr	r1, [pc, #136]	; (80063e0 <UART_Start_Receive_DMA+0xac>)
 8006358:	6311      	str	r1, [r2, #48]	; 0x30
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800635a:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 800635c:	4921      	ldr	r1, [pc, #132]	; (80063e4 <UART_Start_Receive_DMA+0xb0>)
 800635e:	6351      	str	r1, [r2, #52]	; 0x34
    huart->hdmarx->XferAbortCallback = NULL;
 8006360:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8006362:	2100      	movs	r1, #0
 8006364:	6391      	str	r1, [r2, #56]	; 0x38
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006366:	6801      	ldr	r1, [r0, #0]
 8006368:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800636a:	3124      	adds	r1, #36	; 0x24
 800636c:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 800636e:	f7fc f983 	bl	8002678 <HAL_DMA_Start_IT>
 8006372:	bb38      	cbnz	r0, 80063c4 <UART_Start_Receive_DMA+0x90>
  __HAL_UNLOCK(huart);
 8006374:	2300      	movs	r3, #0
 8006376:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  if (huart->Init.Parity != UART_PARITY_NONE)
 800637a:	6923      	ldr	r3, [r4, #16]
 800637c:	b143      	cbz	r3, 8006390 <UART_Start_Receive_DMA+0x5c>
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800637e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006380:	e852 3f00 	ldrex	r3, [r2]
 8006384:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006388:	e842 3100 	strex	r1, r3, [r2]
 800638c:	2900      	cmp	r1, #0
 800638e:	d1f6      	bne.n	800637e <UART_Start_Receive_DMA+0x4a>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006390:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006392:	f102 0308 	add.w	r3, r2, #8
 8006396:	e853 3f00 	ldrex	r3, [r3]
 800639a:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800639e:	3208      	adds	r2, #8
 80063a0:	e842 3100 	strex	r1, r3, [r2]
 80063a4:	2900      	cmp	r1, #0
 80063a6:	d1f3      	bne.n	8006390 <UART_Start_Receive_DMA+0x5c>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063a8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063aa:	f102 0308 	add.w	r3, r2, #8
 80063ae:	e853 3f00 	ldrex	r3, [r3]
 80063b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b6:	3208      	adds	r2, #8
 80063b8:	e842 3100 	strex	r1, r3, [r2]
 80063bc:	2900      	cmp	r1, #0
 80063be:	d1f3      	bne.n	80063a8 <UART_Start_Receive_DMA+0x74>
  return HAL_OK;
 80063c0:	2000      	movs	r0, #0
}
 80063c2:	bd10      	pop	{r4, pc}
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80063c4:	2310      	movs	r3, #16
 80063c6:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      __HAL_UNLOCK(huart);
 80063ca:	2300      	movs	r3, #0
 80063cc:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
      huart->RxState = HAL_UART_STATE_READY;
 80063d0:	2320      	movs	r3, #32
 80063d2:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
      return HAL_ERROR;
 80063d6:	2001      	movs	r0, #1
 80063d8:	e7f3      	b.n	80063c2 <UART_Start_Receive_DMA+0x8e>
 80063da:	bf00      	nop
 80063dc:	08005c9d 	.word	0x08005c9d
 80063e0:	08005c81 	.word	0x08005c81
 80063e4:	080058df 	.word	0x080058df

080063e8 <HAL_UART_Receive_DMA>:
{
 80063e8:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 80063ea:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 80063ee:	2b20      	cmp	r3, #32
 80063f0:	d11e      	bne.n	8006430 <HAL_UART_Receive_DMA+0x48>
    if ((pData == NULL) || (Size == 0U))
 80063f2:	b1f9      	cbz	r1, 8006434 <HAL_UART_Receive_DMA+0x4c>
 80063f4:	b302      	cbz	r2, 8006438 <HAL_UART_Receive_DMA+0x50>
    __HAL_LOCK(huart);
 80063f6:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d01e      	beq.n	800643c <HAL_UART_Receive_DMA+0x54>
 80063fe:	2301      	movs	r3, #1
 8006400:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006404:	2300      	movs	r3, #0
 8006406:	66c3      	str	r3, [r0, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006408:	6803      	ldr	r3, [r0, #0]
 800640a:	4c0d      	ldr	r4, [pc, #52]	; (8006440 <HAL_UART_Receive_DMA+0x58>)
 800640c:	42a3      	cmp	r3, r4
 800640e:	d00c      	beq.n	800642a <HAL_UART_Receive_DMA+0x42>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8006416:	d008      	beq.n	800642a <HAL_UART_Receive_DMA+0x42>
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006418:	6804      	ldr	r4, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800641a:	e854 3f00 	ldrex	r3, [r4]
 800641e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006422:	e844 3500 	strex	r5, r3, [r4]
 8006426:	2d00      	cmp	r5, #0
 8006428:	d1f6      	bne.n	8006418 <HAL_UART_Receive_DMA+0x30>
    return (UART_Start_Receive_DMA(huart, pData, Size));
 800642a:	f7ff ff83 	bl	8006334 <UART_Start_Receive_DMA>
 800642e:	e000      	b.n	8006432 <HAL_UART_Receive_DMA+0x4a>
    return HAL_BUSY;
 8006430:	2002      	movs	r0, #2
}
 8006432:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8006434:	2001      	movs	r0, #1
 8006436:	e7fc      	b.n	8006432 <HAL_UART_Receive_DMA+0x4a>
 8006438:	2001      	movs	r0, #1
 800643a:	e7fa      	b.n	8006432 <HAL_UART_Receive_DMA+0x4a>
    __HAL_LOCK(huart);
 800643c:	2002      	movs	r0, #2
 800643e:	e7f8      	b.n	8006432 <HAL_UART_Receive_DMA+0x4a>
 8006440:	40008000 	.word	0x40008000

08006444 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006444:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8006446:	b92b      	cbnz	r3, 8006454 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 8006448:	2301      	movs	r3, #1
 800644a:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800644e:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 8006452:	4770      	bx	lr
{
 8006454:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006456:	6803      	ldr	r3, [r0, #0]
 8006458:	689a      	ldr	r2, [r3, #8]
 800645a:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800645e:	6899      	ldr	r1, [r3, #8]
 8006460:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006462:	4d09      	ldr	r5, [pc, #36]	; (8006488 <UARTEx_SetNbDataToProcess+0x44>)
 8006464:	5c6b      	ldrb	r3, [r5, r1]
 8006466:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006468:	4c08      	ldr	r4, [pc, #32]	; (800648c <UARTEx_SetNbDataToProcess+0x48>)
 800646a:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800646c:	fb93 f3f1 	sdiv	r3, r3, r1
 8006470:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006474:	5cab      	ldrb	r3, [r5, r2]
 8006476:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006478:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800647a:	fb93 f3f2 	sdiv	r3, r3, r2
 800647e:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 8006482:	bc30      	pop	{r4, r5}
 8006484:	4770      	bx	lr
 8006486:	bf00      	nop
 8006488:	0800e2b8 	.word	0x0800e2b8
 800648c:	0800e2b0 	.word	0x0800e2b0

08006490 <HAL_UARTEx_WakeupCallback>:
}
 8006490:	4770      	bx	lr

08006492 <HAL_UARTEx_RxFifoFullCallback>:
}
 8006492:	4770      	bx	lr

08006494 <HAL_UARTEx_TxFifoEmptyCallback>:
}
 8006494:	4770      	bx	lr

08006496 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8006496:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800649a:	2b01      	cmp	r3, #1
 800649c:	d018      	beq.n	80064d0 <HAL_UARTEx_DisableFifoMode+0x3a>
 800649e:	2301      	movs	r3, #1
 80064a0:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 80064a4:	2324      	movs	r3, #36	; 0x24
 80064a6:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80064aa:	6803      	ldr	r3, [r0, #0]
 80064ac:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80064ae:	6819      	ldr	r1, [r3, #0]
 80064b0:	f021 0101 	bic.w	r1, r1, #1
 80064b4:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80064b6:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80064ba:	2300      	movs	r3, #0
 80064bc:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80064be:	6801      	ldr	r1, [r0, #0]
 80064c0:	600a      	str	r2, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 80064c2:	2220      	movs	r2, #32
 80064c4:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  __HAL_UNLOCK(huart);
 80064c8:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return HAL_OK;
 80064cc:	4618      	mov	r0, r3
 80064ce:	4770      	bx	lr
  __HAL_LOCK(huart);
 80064d0:	2002      	movs	r0, #2
}
 80064d2:	4770      	bx	lr

080064d4 <HAL_UARTEx_SetTxFifoThreshold>:
{
 80064d4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 80064d6:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80064da:	2b01      	cmp	r3, #1
 80064dc:	d01d      	beq.n	800651a <HAL_UARTEx_SetTxFifoThreshold+0x46>
 80064de:	4604      	mov	r4, r0
 80064e0:	2301      	movs	r3, #1
 80064e2:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 80064e6:	2324      	movs	r3, #36	; 0x24
 80064e8:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80064ec:	6803      	ldr	r3, [r0, #0]
 80064ee:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80064f0:	681a      	ldr	r2, [r3, #0]
 80064f2:	f022 0201 	bic.w	r2, r2, #1
 80064f6:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80064f8:	6802      	ldr	r2, [r0, #0]
 80064fa:	6893      	ldr	r3, [r2, #8]
 80064fc:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8006500:	4319      	orrs	r1, r3
 8006502:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8006504:	f7ff ff9e 	bl	8006444 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006508:	6823      	ldr	r3, [r4, #0]
 800650a:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800650c:	2320      	movs	r3, #32
 800650e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8006512:	2000      	movs	r0, #0
 8006514:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8006518:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800651a:	2002      	movs	r0, #2
 800651c:	e7fc      	b.n	8006518 <HAL_UARTEx_SetTxFifoThreshold+0x44>

0800651e <HAL_UARTEx_SetRxFifoThreshold>:
{
 800651e:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8006520:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006524:	2b01      	cmp	r3, #1
 8006526:	d01d      	beq.n	8006564 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8006528:	4604      	mov	r4, r0
 800652a:	2301      	movs	r3, #1
 800652c:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8006530:	2324      	movs	r3, #36	; 0x24
 8006532:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006536:	6803      	ldr	r3, [r0, #0]
 8006538:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	f022 0201 	bic.w	r2, r2, #1
 8006540:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006542:	6802      	ldr	r2, [r0, #0]
 8006544:	6893      	ldr	r3, [r2, #8]
 8006546:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 800654a:	4319      	orrs	r1, r3
 800654c:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800654e:	f7ff ff79 	bl	8006444 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006552:	6823      	ldr	r3, [r4, #0]
 8006554:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006556:	2320      	movs	r3, #32
 8006558:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800655c:	2000      	movs	r0, #0
 800655e:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8006562:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8006564:	2002      	movs	r0, #2
 8006566:	e7fc      	b.n	8006562 <HAL_UARTEx_SetRxFifoThreshold+0x44>

08006568 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006568:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800656a:	2300      	movs	r3, #0
 800656c:	9301      	str	r3, [sp, #4]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800656e:	9b01      	ldr	r3, [sp, #4]
 8006570:	3301      	adds	r3, #1
 8006572:	9301      	str	r3, [sp, #4]

    if (count > 200000U)
 8006574:	9a01      	ldr	r2, [sp, #4]
 8006576:	4b0f      	ldr	r3, [pc, #60]	; (80065b4 <USB_CoreReset+0x4c>)
 8006578:	429a      	cmp	r2, r3
 800657a:	d815      	bhi.n	80065a8 <USB_CoreReset+0x40>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800657c:	6903      	ldr	r3, [r0, #16]
 800657e:	2b00      	cmp	r3, #0
 8006580:	daf5      	bge.n	800656e <USB_CoreReset+0x6>

  /* Core Soft Reset */
  count = 0U;
 8006582:	2300      	movs	r3, #0
 8006584:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006586:	6903      	ldr	r3, [r0, #16]
 8006588:	f043 0301 	orr.w	r3, r3, #1
 800658c:	6103      	str	r3, [r0, #16]

  do
  {
    count++;
 800658e:	9b01      	ldr	r3, [sp, #4]
 8006590:	3301      	adds	r3, #1
 8006592:	9301      	str	r3, [sp, #4]

    if (count > 200000U)
 8006594:	9a01      	ldr	r2, [sp, #4]
 8006596:	4b07      	ldr	r3, [pc, #28]	; (80065b4 <USB_CoreReset+0x4c>)
 8006598:	429a      	cmp	r2, r3
 800659a:	d808      	bhi.n	80065ae <USB_CoreReset+0x46>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800659c:	6903      	ldr	r3, [r0, #16]
 800659e:	f013 0f01 	tst.w	r3, #1
 80065a2:	d1f4      	bne.n	800658e <USB_CoreReset+0x26>

  return HAL_OK;
 80065a4:	2000      	movs	r0, #0
 80065a6:	e000      	b.n	80065aa <USB_CoreReset+0x42>
      return HAL_TIMEOUT;
 80065a8:	2003      	movs	r0, #3
}
 80065aa:	b002      	add	sp, #8
 80065ac:	4770      	bx	lr
      return HAL_TIMEOUT;
 80065ae:	2003      	movs	r0, #3
 80065b0:	e7fb      	b.n	80065aa <USB_CoreReset+0x42>
 80065b2:	bf00      	nop
 80065b4:	00030d40 	.word	0x00030d40

080065b8 <USB_CoreInit>:
{
 80065b8:	b084      	sub	sp, #16
 80065ba:	b510      	push	{r4, lr}
 80065bc:	4604      	mov	r4, r0
 80065be:	f10d 0c0c 	add.w	ip, sp, #12
 80065c2:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80065c6:	68c3      	ldr	r3, [r0, #12]
 80065c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065cc:	60c3      	str	r3, [r0, #12]
  ret = USB_CoreReset(USBx);
 80065ce:	f7ff ffcb 	bl	8006568 <USB_CoreReset>
  if (cfg.battery_charging_enable == 0U)
 80065d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80065d4:	b93b      	cbnz	r3, 80065e6 <USB_CoreInit+0x2e>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80065d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80065d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065dc:	63a3      	str	r3, [r4, #56]	; 0x38
}
 80065de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065e2:	b004      	add	sp, #16
 80065e4:	4770      	bx	lr
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80065e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80065e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065ec:	63a3      	str	r3, [r4, #56]	; 0x38
 80065ee:	e7f6      	b.n	80065de <USB_CoreInit+0x26>

080065f0 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80065f0:	6883      	ldr	r3, [r0, #8]
 80065f2:	f043 0301 	orr.w	r3, r3, #1
 80065f6:	6083      	str	r3, [r0, #8]
}
 80065f8:	2000      	movs	r0, #0
 80065fa:	4770      	bx	lr

080065fc <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80065fc:	6883      	ldr	r3, [r0, #8]
 80065fe:	f023 0301 	bic.w	r3, r3, #1
 8006602:	6083      	str	r3, [r0, #8]
}
 8006604:	2000      	movs	r0, #0
 8006606:	4770      	bx	lr

08006608 <USB_FlushTxFifo>:
{
 8006608:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800660a:	2300      	movs	r3, #0
 800660c:	9301      	str	r3, [sp, #4]
    count++;
 800660e:	9b01      	ldr	r3, [sp, #4]
 8006610:	3301      	adds	r3, #1
 8006612:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8006614:	9a01      	ldr	r2, [sp, #4]
 8006616:	4b0f      	ldr	r3, [pc, #60]	; (8006654 <USB_FlushTxFifo+0x4c>)
 8006618:	429a      	cmp	r2, r3
 800661a:	d815      	bhi.n	8006648 <USB_FlushTxFifo+0x40>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800661c:	6903      	ldr	r3, [r0, #16]
 800661e:	2b00      	cmp	r3, #0
 8006620:	daf5      	bge.n	800660e <USB_FlushTxFifo+0x6>
  count = 0U;
 8006622:	2300      	movs	r3, #0
 8006624:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006626:	0189      	lsls	r1, r1, #6
 8006628:	f041 0120 	orr.w	r1, r1, #32
 800662c:	6101      	str	r1, [r0, #16]
    count++;
 800662e:	9b01      	ldr	r3, [sp, #4]
 8006630:	3301      	adds	r3, #1
 8006632:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8006634:	9a01      	ldr	r2, [sp, #4]
 8006636:	4b07      	ldr	r3, [pc, #28]	; (8006654 <USB_FlushTxFifo+0x4c>)
 8006638:	429a      	cmp	r2, r3
 800663a:	d808      	bhi.n	800664e <USB_FlushTxFifo+0x46>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800663c:	6903      	ldr	r3, [r0, #16]
 800663e:	f013 0f20 	tst.w	r3, #32
 8006642:	d1f4      	bne.n	800662e <USB_FlushTxFifo+0x26>
  return HAL_OK;
 8006644:	2000      	movs	r0, #0
 8006646:	e000      	b.n	800664a <USB_FlushTxFifo+0x42>
      return HAL_TIMEOUT;
 8006648:	2003      	movs	r0, #3
}
 800664a:	b002      	add	sp, #8
 800664c:	4770      	bx	lr
      return HAL_TIMEOUT;
 800664e:	2003      	movs	r0, #3
 8006650:	e7fb      	b.n	800664a <USB_FlushTxFifo+0x42>
 8006652:	bf00      	nop
 8006654:	00030d40 	.word	0x00030d40

08006658 <USB_FlushRxFifo>:
{
 8006658:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800665a:	2300      	movs	r3, #0
 800665c:	9301      	str	r3, [sp, #4]
    count++;
 800665e:	9b01      	ldr	r3, [sp, #4]
 8006660:	3301      	adds	r3, #1
 8006662:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8006664:	9a01      	ldr	r2, [sp, #4]
 8006666:	4b0e      	ldr	r3, [pc, #56]	; (80066a0 <USB_FlushRxFifo+0x48>)
 8006668:	429a      	cmp	r2, r3
 800666a:	d813      	bhi.n	8006694 <USB_FlushRxFifo+0x3c>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800666c:	6903      	ldr	r3, [r0, #16]
 800666e:	2b00      	cmp	r3, #0
 8006670:	daf5      	bge.n	800665e <USB_FlushRxFifo+0x6>
  count = 0U;
 8006672:	2300      	movs	r3, #0
 8006674:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006676:	2310      	movs	r3, #16
 8006678:	6103      	str	r3, [r0, #16]
    count++;
 800667a:	9b01      	ldr	r3, [sp, #4]
 800667c:	3301      	adds	r3, #1
 800667e:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8006680:	9a01      	ldr	r2, [sp, #4]
 8006682:	4b07      	ldr	r3, [pc, #28]	; (80066a0 <USB_FlushRxFifo+0x48>)
 8006684:	429a      	cmp	r2, r3
 8006686:	d808      	bhi.n	800669a <USB_FlushRxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006688:	6903      	ldr	r3, [r0, #16]
 800668a:	f013 0f10 	tst.w	r3, #16
 800668e:	d1f4      	bne.n	800667a <USB_FlushRxFifo+0x22>
  return HAL_OK;
 8006690:	2000      	movs	r0, #0
 8006692:	e000      	b.n	8006696 <USB_FlushRxFifo+0x3e>
      return HAL_TIMEOUT;
 8006694:	2003      	movs	r0, #3
}
 8006696:	b002      	add	sp, #8
 8006698:	4770      	bx	lr
      return HAL_TIMEOUT;
 800669a:	2003      	movs	r0, #3
 800669c:	e7fb      	b.n	8006696 <USB_FlushRxFifo+0x3e>
 800669e:	bf00      	nop
 80066a0:	00030d40 	.word	0x00030d40

080066a4 <USB_WritePacket>:
{
 80066a4:	b510      	push	{r4, lr}
  count32b = ((uint32_t)len + 3U) / 4U;
 80066a6:	f103 0e03 	add.w	lr, r3, #3
 80066aa:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
  for (i = 0U; i < count32b; i++)
 80066ae:	f04f 0c00 	mov.w	ip, #0
 80066b2:	e008      	b.n	80066c6 <USB_WritePacket+0x22>
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80066b4:	eb00 3302 	add.w	r3, r0, r2, lsl #12
 80066b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066bc:	f851 4b04 	ldr.w	r4, [r1], #4
 80066c0:	601c      	str	r4, [r3, #0]
  for (i = 0U; i < count32b; i++)
 80066c2:	f10c 0c01 	add.w	ip, ip, #1
 80066c6:	45f4      	cmp	ip, lr
 80066c8:	d3f4      	bcc.n	80066b4 <USB_WritePacket+0x10>
}
 80066ca:	2000      	movs	r0, #0
 80066cc:	bd10      	pop	{r4, pc}

080066ce <USB_ReadPacket>:
{
 80066ce:	b500      	push	{lr}
 80066d0:	b083      	sub	sp, #12
 80066d2:	4684      	mov	ip, r0
 80066d4:	4608      	mov	r0, r1
  uint32_t count32b = (uint32_t)len >> 2U;
 80066d6:	ea4f 0e92 	mov.w	lr, r2, lsr #2
  uint16_t remaining_bytes = len % 4U;
 80066da:	f002 0203 	and.w	r2, r2, #3
  for (i = 0U; i < count32b; i++)
 80066de:	2300      	movs	r3, #0
 80066e0:	e005      	b.n	80066ee <USB_ReadPacket+0x20>
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80066e2:	f50c 5180 	add.w	r1, ip, #4096	; 0x1000
 80066e6:	6809      	ldr	r1, [r1, #0]
 80066e8:	f840 1b04 	str.w	r1, [r0], #4
  for (i = 0U; i < count32b; i++)
 80066ec:	3301      	adds	r3, #1
 80066ee:	4573      	cmp	r3, lr
 80066f0:	d3f7      	bcc.n	80066e2 <USB_ReadPacket+0x14>
  if (remaining_bytes != 0U)
 80066f2:	b19a      	cbz	r2, 800671c <USB_ReadPacket+0x4e>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80066f4:	f50c 5c80 	add.w	ip, ip, #4096	; 0x1000
 80066f8:	f8dc 3000 	ldr.w	r3, [ip]
 80066fc:	9301      	str	r3, [sp, #4]
    i = 0U;
 80066fe:	f04f 0c00 	mov.w	ip, #0
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006702:	fa5f f38c 	uxtb.w	r3, ip
 8006706:	00d9      	lsls	r1, r3, #3
 8006708:	9b01      	ldr	r3, [sp, #4]
 800670a:	40cb      	lsrs	r3, r1
 800670c:	f800 3b01 	strb.w	r3, [r0], #1
      i++;
 8006710:	f10c 0c01 	add.w	ip, ip, #1
      remaining_bytes--;
 8006714:	3a01      	subs	r2, #1
 8006716:	b292      	uxth	r2, r2
    } while (remaining_bytes != 0U);
 8006718:	2a00      	cmp	r2, #0
 800671a:	d1f2      	bne.n	8006702 <USB_ReadPacket+0x34>
}
 800671c:	b003      	add	sp, #12
 800671e:	f85d fb04 	ldr.w	pc, [sp], #4

08006722 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8006722:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8006724:	6980      	ldr	r0, [r0, #24]
}
 8006726:	4010      	ands	r0, r2
 8006728:	4770      	bx	lr

0800672a <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 800672a:	6940      	ldr	r0, [r0, #20]
}
 800672c:	f000 0001 	and.w	r0, r0, #1
 8006730:	4770      	bx	lr

08006732 <USB_SetCurrentMode>:
{
 8006732:	b538      	push	{r3, r4, r5, lr}
 8006734:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006736:	68c3      	ldr	r3, [r0, #12]
 8006738:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800673c:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800673e:	2901      	cmp	r1, #1
 8006740:	d013      	beq.n	800676a <USB_SetCurrentMode+0x38>
  else if (mode == USB_DEVICE_MODE)
 8006742:	bb19      	cbnz	r1, 800678c <USB_SetCurrentMode+0x5a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006744:	68c3      	ldr	r3, [r0, #12]
 8006746:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800674a:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 800674c:	2400      	movs	r4, #0
      HAL_Delay(1U);
 800674e:	2001      	movs	r0, #1
 8006750:	f7fb fe46 	bl	80023e0 <HAL_Delay>
      ms++;
 8006754:	3401      	adds	r4, #1
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006756:	4628      	mov	r0, r5
 8006758:	f7ff ffe7 	bl	800672a <USB_GetMode>
 800675c:	b108      	cbz	r0, 8006762 <USB_SetCurrentMode+0x30>
 800675e:	2c31      	cmp	r4, #49	; 0x31
 8006760:	d9f5      	bls.n	800674e <USB_SetCurrentMode+0x1c>
  if (ms == 50U)
 8006762:	2c32      	cmp	r4, #50	; 0x32
 8006764:	d014      	beq.n	8006790 <USB_SetCurrentMode+0x5e>
  return HAL_OK;
 8006766:	2000      	movs	r0, #0
}
 8006768:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800676a:	68c3      	ldr	r3, [r0, #12]
 800676c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006770:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 8006772:	2400      	movs	r4, #0
      HAL_Delay(1U);
 8006774:	2001      	movs	r0, #1
 8006776:	f7fb fe33 	bl	80023e0 <HAL_Delay>
      ms++;
 800677a:	3401      	adds	r4, #1
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800677c:	4628      	mov	r0, r5
 800677e:	f7ff ffd4 	bl	800672a <USB_GetMode>
 8006782:	2801      	cmp	r0, #1
 8006784:	d0ed      	beq.n	8006762 <USB_SetCurrentMode+0x30>
 8006786:	2c31      	cmp	r4, #49	; 0x31
 8006788:	d9f4      	bls.n	8006774 <USB_SetCurrentMode+0x42>
 800678a:	e7ea      	b.n	8006762 <USB_SetCurrentMode+0x30>
    return HAL_ERROR;
 800678c:	2001      	movs	r0, #1
 800678e:	e7eb      	b.n	8006768 <USB_SetCurrentMode+0x36>
    return HAL_ERROR;
 8006790:	2001      	movs	r0, #1
 8006792:	e7e9      	b.n	8006768 <USB_SetCurrentMode+0x36>

08006794 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006794:	b084      	sub	sp, #16
 8006796:	b538      	push	{r3, r4, r5, lr}
 8006798:	4604      	mov	r4, r0
 800679a:	ad05      	add	r5, sp, #20
 800679c:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80067a0:	2300      	movs	r3, #0
 80067a2:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 80067a6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80067a8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80067ac:	6383      	str	r3, [r0, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 80067ae:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80067b0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80067b4:	6383      	str	r3, [r0, #56]	; 0x38

  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80067b6:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 80067ba:	f023 0304 	bic.w	r3, r3, #4
 80067be:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80067c2:	2110      	movs	r1, #16
 80067c4:	f7ff ff20 	bl	8006608 <USB_FlushTxFifo>
 80067c8:	4605      	mov	r5, r0
 80067ca:	b100      	cbz	r0, 80067ce <USB_HostInit+0x3a>
  {
    ret = HAL_ERROR;
 80067cc:	2501      	movs	r5, #1
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80067ce:	4620      	mov	r0, r4
 80067d0:	f7ff ff42 	bl	8006658 <USB_FlushRxFifo>
 80067d4:	b100      	cbz	r0, 80067d8 <USB_HostInit+0x44>
  {
    ret = HAL_ERROR;
 80067d6:	2501      	movs	r5, #1
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80067d8:	2200      	movs	r2, #0
 80067da:	e009      	b.n	80067f0 <USB_HostInit+0x5c>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80067dc:	eb04 1342 	add.w	r3, r4, r2, lsl #5
 80067e0:	f04f 31ff 	mov.w	r1, #4294967295
 80067e4:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    USBx_HC(i)->HCINTMSK = 0U;
 80067e8:	2100      	movs	r1, #0
 80067ea:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
  for (i = 0U; i < cfg.Host_channels; i++)
 80067ee:	3201      	adds	r2, #1
 80067f0:	9b06      	ldr	r3, [sp, #24]
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d8f2      	bhi.n	80067dc <USB_HostInit+0x48>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80067f6:	2300      	movs	r3, #0
 80067f8:	61a3      	str	r3, [r4, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80067fa:	f04f 33ff 	mov.w	r3, #4294967295
 80067fe:	6163      	str	r3, [r4, #20]

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 8006800:	2380      	movs	r3, #128	; 0x80
 8006802:	6263      	str	r3, [r4, #36]	; 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006804:	f503 03c0 	add.w	r3, r3, #6291456	; 0x600000
 8006808:	62a3      	str	r3, [r4, #40]	; 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800680a:	4b08      	ldr	r3, [pc, #32]	; (800682c <USB_HostInit+0x98>)
 800680c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006810:	69a3      	ldr	r3, [r4, #24]
 8006812:	f043 0310 	orr.w	r3, r3, #16
 8006816:	61a3      	str	r3, [r4, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006818:	69a2      	ldr	r2, [r4, #24]
 800681a:	4b05      	ldr	r3, [pc, #20]	; (8006830 <USB_HostInit+0x9c>)
 800681c:	4313      	orrs	r3, r2
 800681e:	61a3      	str	r3, [r4, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
}
 8006820:	4628      	mov	r0, r5
 8006822:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006826:	b004      	add	sp, #16
 8006828:	4770      	bx	lr
 800682a:	bf00      	nop
 800682c:	004000e0 	.word	0x004000e0
 8006830:	a3200008 	.word	0xa3200008

08006834 <USB_InitFSLSPClkSel>:
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006834:	f500 6c80 	add.w	ip, r0, #1024	; 0x400
 8006838:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 800683c:	f023 0303 	bic.w	r3, r3, #3
 8006840:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006844:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 8006848:	f001 0203 	and.w	r2, r1, #3
 800684c:	4313      	orrs	r3, r2
 800684e:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400

  if (freq == HCFG_48_MHZ)
 8006852:	2901      	cmp	r1, #1
 8006854:	d003      	beq.n	800685e <USB_InitFSLSPClkSel+0x2a>
  {
    USBx_HOST->HFIR = 48000U;
  }
  else if (freq == HCFG_6_MHZ)
 8006856:	2902      	cmp	r1, #2
 8006858:	d006      	beq.n	8006868 <USB_InitFSLSPClkSel+0x34>
  {
    /* ... */
  }

  return HAL_OK;
}
 800685a:	2000      	movs	r0, #0
 800685c:	4770      	bx	lr
    USBx_HOST->HFIR = 48000U;
 800685e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006862:	f8cc 3004 	str.w	r3, [ip, #4]
 8006866:	e7f8      	b.n	800685a <USB_InitFSLSPClkSel+0x26>
    USBx_HOST->HFIR = 6000U;
 8006868:	f241 7370 	movw	r3, #6000	; 0x1770
 800686c:	f8cc 3004 	str.w	r3, [ip, #4]
 8006870:	e7f3      	b.n	800685a <USB_InitFSLSPClkSel+0x26>

08006872 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006872:	b530      	push	{r4, r5, lr}
 8006874:	b083      	sub	sp, #12
 8006876:	4604      	mov	r4, r0
  uint32_t USBx_BASE = (uint32_t)USBx;

  __IO uint32_t hprt0 = 0U;
 8006878:	2500      	movs	r5, #0
 800687a:	9501      	str	r5, [sp, #4]

  hprt0 = USBx_HPRT0;
 800687c:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8006880:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006882:	9b01      	ldr	r3, [sp, #4]
 8006884:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006888:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800688a:	9b01      	ldr	r3, [sp, #4]
 800688c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006890:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  HAL_Delay(100U);                                 /* See Note #1 */
 8006894:	2064      	movs	r0, #100	; 0x64
 8006896:	f7fb fda3 	bl	80023e0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800689a:	9b01      	ldr	r3, [sp, #4]
 800689c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068a0:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
  HAL_Delay(10U);
 80068a4:	200a      	movs	r0, #10
 80068a6:	f7fb fd9b 	bl	80023e0 <HAL_Delay>

  return HAL_OK;
}
 80068aa:	4628      	mov	r0, r5
 80068ac:	b003      	add	sp, #12
 80068ae:	bd30      	pop	{r4, r5, pc}

080068b0 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80068b0:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 80068b2:	2300      	movs	r3, #0
 80068b4:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 80068b6:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 80068ba:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80068bc:	9b01      	ldr	r3, [sp, #4]
 80068be:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80068c2:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80068c4:	9b01      	ldr	r3, [sp, #4]
 80068c6:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80068ca:	d101      	bne.n	80068d0 <USB_DriveVbus+0x20>
 80068cc:	2901      	cmp	r1, #1
 80068ce:	d00c      	beq.n	80068ea <USB_DriveVbus+0x3a>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80068d0:	9b01      	ldr	r3, [sp, #4]
 80068d2:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80068d6:	d005      	beq.n	80068e4 <USB_DriveVbus+0x34>
 80068d8:	b921      	cbnz	r1, 80068e4 <USB_DriveVbus+0x34>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80068da:	9b01      	ldr	r3, [sp, #4]
 80068dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80068e0:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  return HAL_OK;
}
 80068e4:	2000      	movs	r0, #0
 80068e6:	b002      	add	sp, #8
 80068e8:	4770      	bx	lr
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80068ea:	9b01      	ldr	r3, [sp, #4]
 80068ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80068f0:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
 80068f4:	e7ec      	b.n	80068d0 <USB_DriveVbus+0x20>

080068f6 <USB_GetHostSpeed>:
  *          This parameter can be one of these values:
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80068f6:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 80068f8:	2300      	movs	r3, #0
 80068fa:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 80068fc:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8006900:	9301      	str	r3, [sp, #4]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006902:	9801      	ldr	r0, [sp, #4]
}
 8006904:	f3c0 4041 	ubfx	r0, r0, #17, #2
 8006908:	b002      	add	sp, #8
 800690a:	4770      	bx	lr

0800690c <USB_GetCurrentFrame>:
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800690c:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8006910:	6880      	ldr	r0, [r0, #8]
}
 8006912:	b280      	uxth	r0, r0
 8006914:	4770      	bx	lr

08006916 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006916:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800691a:	4691      	mov	r9, r2
 800691c:	461c      	mov	r4, r3
 800691e:	f89d 5024 	ldrb.w	r5, [sp, #36]	; 0x24
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006922:	eb00 1641 	add.w	r6, r0, r1, lsl #5
 8006926:	f506 63a0 	add.w	r3, r6, #1280	; 0x500
 800692a:	f04f 32ff 	mov.w	r2, #4294967295
 800692e:	609a      	str	r2, [r3, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006930:	2d03      	cmp	r5, #3
 8006932:	d86e      	bhi.n	8006a12 <USB_HC_Init+0xfc>
 8006934:	e8df f005 	tbb	[pc, r5]
 8006938:	51025f02 	.word	0x51025f02
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800693c:	f240 429d 	movw	r2, #1181	; 0x49d
 8006940:	60da      	str	r2, [r3, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006942:	f019 0f80 	tst.w	r9, #128	; 0x80
 8006946:	d142      	bne.n	80069ce <USB_HC_Init+0xb8>
  HAL_StatusTypeDef ret = HAL_OK;
 8006948:	2700      	movs	r7, #0
      ret = HAL_ERROR;
      break;
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800694a:	68da      	ldr	r2, [r3, #12]
 800694c:	f042 0202 	orr.w	r2, r2, #2
 8006950:	60da      	str	r2, [r3, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006952:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
 8006956:	f001 010f 	and.w	r1, r1, #15
 800695a:	2201      	movs	r2, #1
 800695c:	fa02 f101 	lsl.w	r1, r2, r1
 8006960:	4319      	orrs	r1, r3
 8006962:	f8c0 1418 	str.w	r1, [r0, #1048]	; 0x418

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006966:	6983      	ldr	r3, [r0, #24]
 8006968:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800696c:	6183      	str	r3, [r0, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800696e:	f019 0f80 	tst.w	r9, #128	; 0x80
 8006972:	d150      	bne.n	8006a16 <USB_HC_Init+0x100>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
  }
  else
  {
    HCcharEpDir = 0U;
 8006974:	f04f 0800 	mov.w	r8, #0
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006978:	f7ff ffbd 	bl	80068f6 <USB_GetHostSpeed>

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800697c:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8006980:	2b02      	cmp	r3, #2
 8006982:	d04b      	beq.n	8006a1c <USB_HC_Init+0x106>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006984:	2100      	movs	r1, #0
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006986:	05a3      	lsls	r3, r4, #22
 8006988:	f003 53fe 	and.w	r3, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800698c:	ea4f 29c9 	mov.w	r9, r9, lsl #11
 8006990:	f409 49f0 	and.w	r9, r9, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006994:	ea43 0309 	orr.w	r3, r3, r9
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006998:	04ac      	lsls	r4, r5, #18
 800699a:	f404 2440 	and.w	r4, r4, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800699e:	4323      	orrs	r3, r4
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80069a0:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 80069a4:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80069a8:	4313      	orrs	r3, r2
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80069aa:	ea43 0308 	orr.w	r3, r3, r8
 80069ae:	430b      	orrs	r3, r1
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80069b0:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80069b4:	2d03      	cmp	r5, #3
 80069b6:	d001      	beq.n	80069bc <USB_HC_Init+0xa6>
 80069b8:	2d01      	cmp	r5, #1
 80069ba:	d105      	bne.n	80069c8 <USB_HC_Init+0xb2>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80069bc:	f8d6 3500 	ldr.w	r3, [r6, #1280]	; 0x500
 80069c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80069c4:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
  }

  return ret;
}
 80069c8:	4638      	mov	r0, r7
 80069ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80069ce:	68da      	ldr	r2, [r3, #12]
 80069d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80069d4:	60da      	str	r2, [r3, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80069d6:	2700      	movs	r7, #0
 80069d8:	e7b7      	b.n	800694a <USB_HC_Init+0x34>
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80069da:	f240 629d 	movw	r2, #1693	; 0x69d
 80069de:	60da      	str	r2, [r3, #12]
      if ((epnum & 0x80U) == 0x80U)
 80069e0:	f019 0f80 	tst.w	r9, #128	; 0x80
 80069e4:	d101      	bne.n	80069ea <USB_HC_Init+0xd4>
  HAL_StatusTypeDef ret = HAL_OK;
 80069e6:	2700      	movs	r7, #0
 80069e8:	e7af      	b.n	800694a <USB_HC_Init+0x34>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80069ea:	68da      	ldr	r2, [r3, #12]
 80069ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80069f0:	60da      	str	r2, [r3, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80069f2:	2700      	movs	r7, #0
 80069f4:	e7a9      	b.n	800694a <USB_HC_Init+0x34>
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80069f6:	f240 2225 	movw	r2, #549	; 0x225
 80069fa:	60da      	str	r2, [r3, #12]
      if ((epnum & 0x80U) == 0x80U)
 80069fc:	f019 0f80 	tst.w	r9, #128	; 0x80
 8006a00:	d101      	bne.n	8006a06 <USB_HC_Init+0xf0>
  HAL_StatusTypeDef ret = HAL_OK;
 8006a02:	2700      	movs	r7, #0
 8006a04:	e7a1      	b.n	800694a <USB_HC_Init+0x34>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006a06:	68da      	ldr	r2, [r3, #12]
 8006a08:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006a0c:	60da      	str	r2, [r3, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006a0e:	2700      	movs	r7, #0
 8006a10:	e79b      	b.n	800694a <USB_HC_Init+0x34>
  switch (ep_type)
 8006a12:	2701      	movs	r7, #1
 8006a14:	e799      	b.n	800694a <USB_HC_Init+0x34>
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006a16:	f44f 4800 	mov.w	r8, #32768	; 0x8000
 8006a1a:	e7ad      	b.n	8006978 <USB_HC_Init+0x62>
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006a1c:	2802      	cmp	r0, #2
 8006a1e:	d002      	beq.n	8006a26 <USB_HC_Init+0x110>
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006a20:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8006a24:	e7af      	b.n	8006986 <USB_HC_Init+0x70>
    HCcharLowSpeed = 0U;
 8006a26:	2100      	movs	r1, #0
 8006a28:	e7ad      	b.n	8006986 <USB_HC_Init+0x70>
	...

08006a2c <USB_HC_StartXfer>:
  * @param  USBx  Selected device
  * @param  hc  pointer to host channel structure
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc)
{
 8006a2c:	b510      	push	{r4, lr}
 8006a2e:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006a30:	784b      	ldrb	r3, [r1, #1]
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006a32:	694a      	ldr	r2, [r1, #20]
 8006a34:	b182      	cbz	r2, 8006a58 <USB_HC_StartXfer+0x2c>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006a36:	890c      	ldrh	r4, [r1, #8]
 8006a38:	eb02 0c04 	add.w	ip, r2, r4
 8006a3c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006a40:	fbbc fcf4 	udiv	ip, ip, r4
 8006a44:	fa1f fc8c 	uxth.w	ip, ip

    if (num_packets > max_hc_pkt_count)
 8006a48:	f5bc 7f80 	cmp.w	ip, #256	; 0x100
 8006a4c:	d906      	bls.n	8006a5c <USB_HC_StartXfer+0x30>
    {
      num_packets = max_hc_pkt_count;
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006a4e:	0224      	lsls	r4, r4, #8
 8006a50:	610c      	str	r4, [r1, #16]
      num_packets = max_hc_pkt_count;
 8006a52:	f44f 7c80 	mov.w	ip, #256	; 0x100
 8006a56:	e001      	b.n	8006a5c <USB_HC_StartXfer+0x30>
    }
  }
  else
  {
    num_packets = 1U;
 8006a58:	f04f 0c01 	mov.w	ip, #1

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006a5c:	78cc      	ldrb	r4, [r1, #3]
 8006a5e:	2c00      	cmp	r4, #0
 8006a60:	d04d      	beq.n	8006afe <USB_HC_StartXfer+0xd2>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006a62:	890a      	ldrh	r2, [r1, #8]
 8006a64:	fb02 f20c 	mul.w	r2, r2, ip
 8006a68:	610a      	str	r2, [r1, #16]
  {
    hc->XferSize = hc->xfer_len;
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006a6a:	690a      	ldr	r2, [r1, #16]
 8006a6c:	f3c2 0212 	ubfx	r2, r2, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006a70:	4c36      	ldr	r4, [pc, #216]	; (8006b4c <USB_HC_StartXfer+0x120>)
 8006a72:	ea04 4ccc 	and.w	ip, r4, ip, lsl #19
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006a76:	ea42 020c 	orr.w	r2, r2, ip
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006a7a:	f891 c00a 	ldrb.w	ip, [r1, #10]
 8006a7e:	ea4f 7c4c 	mov.w	ip, ip, lsl #29
 8006a82:	f00c 4cc0 	and.w	ip, ip, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006a86:	eb00 1343 	add.w	r3, r0, r3, lsl #5
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006a8a:	ea42 020c 	orr.w	r2, r2, ip
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006a8e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006a92:	f500 6c80 	add.w	ip, r0, #1024	; 0x400
 8006a96:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8006a9a:	f012 0f01 	tst.w	r2, #1
 8006a9e:	bf0c      	ite	eq
 8006aa0:	f04f 0e01 	moveq.w	lr, #1
 8006aa4:	f04f 0e00 	movne.w	lr, #0
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006aa8:	f8d3 4500 	ldr.w	r4, [r3, #1280]	; 0x500
 8006aac:	f024 5400 	bic.w	r4, r4, #536870912	; 0x20000000
 8006ab0:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006ab4:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
 8006ab8:	ea42 724e 	orr.w	r2, r2, lr, lsl #29
 8006abc:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006ac0:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
 8006ac4:	9201      	str	r2, [sp, #4]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006ac6:	9a01      	ldr	r2, [sp, #4]
 8006ac8:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8006acc:	9201      	str	r2, [sp, #4]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006ace:	78ca      	ldrb	r2, [r1, #3]
 8006ad0:	b1ba      	cbz	r2, 8006b02 <USB_HC_StartXfer+0xd6>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006ad2:	9a01      	ldr	r2, [sp, #4]
 8006ad4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006ad8:	9201      	str	r2, [sp, #4]
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006ada:	9a01      	ldr	r2, [sp, #4]
 8006adc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8006ae0:	9201      	str	r2, [sp, #4]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006ae2:	9a01      	ldr	r2, [sp, #4]
 8006ae4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006ae8:	78cb      	ldrb	r3, [r1, #3]
 8006aea:	b9fb      	cbnz	r3, 8006b2c <USB_HC_StartXfer+0x100>
 8006aec:	694b      	ldr	r3, [r1, #20]
 8006aee:	b1eb      	cbz	r3, 8006b2c <USB_HC_StartXfer+0x100>
  {
    switch (hc->ep_type)
 8006af0:	79ca      	ldrb	r2, [r1, #7]
 8006af2:	2a03      	cmp	r2, #3
 8006af4:	d815      	bhi.n	8006b22 <USB_HC_StartXfer+0xf6>
 8006af6:	e8df f002 	tbb	[pc, r2]
 8006afa:	1c09      	.short	0x1c09
 8006afc:	1c09      	.short	0x1c09
    hc->XferSize = hc->xfer_len;
 8006afe:	610a      	str	r2, [r1, #16]
 8006b00:	e7b3      	b.n	8006a6a <USB_HC_StartXfer+0x3e>
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006b02:	9a01      	ldr	r2, [sp, #4]
 8006b04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006b08:	9201      	str	r2, [sp, #4]
 8006b0a:	e7e6      	b.n	8006ada <USB_HC_StartXfer+0xae>
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006b0c:	3303      	adds	r3, #3

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006b0e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8006b10:	b292      	uxth	r2, r2
 8006b12:	f3c3 038f 	ubfx	r3, r3, #2, #16
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d203      	bcs.n	8006b22 <USB_HC_StartXfer+0xf6>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006b1a:	6983      	ldr	r3, [r0, #24]
 8006b1c:	f043 0320 	orr.w	r3, r3, #32
 8006b20:	6183      	str	r3, [r0, #24]
      default:
        break;
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len);
 8006b22:	8a8b      	ldrh	r3, [r1, #20]
 8006b24:	784a      	ldrb	r2, [r1, #1]
 8006b26:	68c9      	ldr	r1, [r1, #12]
 8006b28:	f7ff fdbc 	bl	80066a4 <USB_WritePacket>
  }

  return HAL_OK;
}
 8006b2c:	2000      	movs	r0, #0
 8006b2e:	b002      	add	sp, #8
 8006b30:	bd10      	pop	{r4, pc}
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006b32:	3303      	adds	r3, #3
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006b34:	f8dc 2010 	ldr.w	r2, [ip, #16]
 8006b38:	b292      	uxth	r2, r2
 8006b3a:	f3c3 038f 	ubfx	r3, r3, #2, #16
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d2ef      	bcs.n	8006b22 <USB_HC_StartXfer+0xf6>
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006b42:	6983      	ldr	r3, [r0, #24]
 8006b44:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006b48:	6183      	str	r3, [r0, #24]
 8006b4a:	e7ea      	b.n	8006b22 <USB_HC_StartXfer+0xf6>
 8006b4c:	1ff80000 	.word	0x1ff80000

08006b50 <USB_HC_ReadInterrupt>:
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006b50:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8006b54:	6940      	ldr	r0, [r0, #20]
}
 8006b56:	b280      	uxth	r0, r0
 8006b58:	4770      	bx	lr

08006b5a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006b5a:	b410      	push	{r4}
 8006b5c:	b083      	sub	sp, #12
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t hcnum = (uint32_t)hc_num;
  __IO uint32_t count = 0U;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	9301      	str	r3, [sp, #4]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006b62:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8006b66:	f501 6ca0 	add.w	ip, r1, #1280	; 0x500
 8006b6a:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8006b6e:	f3c3 4381 	ubfx	r3, r3, #18, #2
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006b72:	f8d1 2500 	ldr.w	r2, [r1, #1280]	; 0x500

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8006b76:	6884      	ldr	r4, [r0, #8]
 8006b78:	f014 0f20 	tst.w	r4, #32
 8006b7c:	d002      	beq.n	8006b84 <USB_HC_Halt+0x2a>
 8006b7e:	0fd2      	lsrs	r2, r2, #31
 8006b80:	2a00      	cmp	r2, #0
 8006b82:	d051      	beq.n	8006c28 <USB_HC_Halt+0xce>
  {
    return HAL_OK;
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006b84:	b323      	cbz	r3, 8006bd0 <USB_HC_Halt+0x76>
 8006b86:	2b02      	cmp	r3, #2
 8006b88:	d022      	beq.n	8006bd0 <USB_HC_Halt+0x76>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006b8a:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8006b8e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b92:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006b96:	f8d0 3410 	ldr.w	r3, [r0, #1040]	; 0x410
 8006b9a:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
 8006b9e:	d148      	bne.n	8006c32 <USB_HC_Halt+0xd8>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006ba0:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8006ba4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ba8:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006bac:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8006bb0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006bb4:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      do
      {
        count++;
 8006bb8:	9b01      	ldr	r3, [sp, #4]
 8006bba:	3301      	adds	r3, #1
 8006bbc:	9301      	str	r3, [sp, #4]

        if (count > 1000U)
 8006bbe:	9b01      	ldr	r3, [sp, #4]
 8006bc0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006bc4:	d830      	bhi.n	8006c28 <USB_HC_Halt+0xce>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006bc6:	f8dc 3000 	ldr.w	r3, [ip]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	dbf4      	blt.n	8006bb8 <USB_HC_Halt+0x5e>
 8006bce:	e02b      	b.n	8006c28 <USB_HC_Halt+0xce>
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006bd0:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8006bd4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006bd8:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006bdc:	6883      	ldr	r3, [r0, #8]
 8006bde:	f013 0f20 	tst.w	r3, #32
 8006be2:	d121      	bne.n	8006c28 <USB_HC_Halt+0xce>
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006be4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8006be6:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
 8006bea:	d117      	bne.n	8006c1c <USB_HC_Halt+0xc2>
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006bec:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8006bf0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006bf4:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006bf8:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8006bfc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c00:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
          count++;
 8006c04:	9b01      	ldr	r3, [sp, #4]
 8006c06:	3301      	adds	r3, #1
 8006c08:	9301      	str	r3, [sp, #4]
          if (count > 1000U)
 8006c0a:	9b01      	ldr	r3, [sp, #4]
 8006c0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006c10:	d80a      	bhi.n	8006c28 <USB_HC_Halt+0xce>
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006c12:	f8dc 3000 	ldr.w	r3, [ip]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	dbf4      	blt.n	8006c04 <USB_HC_Halt+0xaa>
 8006c1a:	e005      	b.n	8006c28 <USB_HC_Halt+0xce>
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006c1c:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8006c20:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c24:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
    }
  }

  return HAL_OK;
}
 8006c28:	2000      	movs	r0, #0
 8006c2a:	b003      	add	sp, #12
 8006c2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c30:	4770      	bx	lr
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006c32:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8006c36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c3a:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8006c3e:	e7f3      	b.n	8006c28 <USB_HC_Halt+0xce>

08006c40 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006c40:	b530      	push	{r4, r5, lr}
 8006c42:	b083      	sub	sp, #12
 8006c44:	4604      	mov	r4, r0
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t count = 0U;
 8006c46:	2300      	movs	r3, #0
 8006c48:	9301      	str	r3, [sp, #4]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006c4a:	f7ff fcd7 	bl	80065fc <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006c4e:	2110      	movs	r1, #16
 8006c50:	4620      	mov	r0, r4
 8006c52:	f7ff fcd9 	bl	8006608 <USB_FlushTxFifo>
 8006c56:	4605      	mov	r5, r0
 8006c58:	b100      	cbz	r0, 8006c5c <USB_StopHost+0x1c>
  {
    ret = HAL_ERROR;
 8006c5a:	2501      	movs	r5, #1
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006c5c:	4620      	mov	r0, r4
 8006c5e:	f7ff fcfb 	bl	8006658 <USB_FlushRxFifo>
 8006c62:	b100      	cbz	r0, 8006c66 <USB_StopHost+0x26>
  {
    ret = HAL_ERROR;
 8006c64:	2501      	movs	r5, #1
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006c66:	2200      	movs	r2, #0
 8006c68:	e00a      	b.n	8006c80 <USB_StopHost+0x40>
  {
    value = USBx_HC(i)->HCCHAR;
 8006c6a:	eb04 1142 	add.w	r1, r4, r2, lsl #5
 8006c6e:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    value |=  USB_OTG_HCCHAR_CHDIS;
    value &= ~USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006c72:	f023 2380 	bic.w	r3, r3, #2147516416	; 0x80008000
 8006c76:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 8006c7a:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
  for (i = 0U; i <= 15U; i++)
 8006c7e:	3201      	adds	r2, #1
 8006c80:	2a0f      	cmp	r2, #15
 8006c82:	d9f2      	bls.n	8006c6a <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006c84:	2100      	movs	r1, #0
 8006c86:	e000      	b.n	8006c8a <USB_StopHost+0x4a>
 8006c88:	3101      	adds	r1, #1
 8006c8a:	290f      	cmp	r1, #15
 8006c8c:	d816      	bhi.n	8006cbc <USB_StopHost+0x7c>
  {
    value = USBx_HC(i)->HCCHAR;
 8006c8e:	eb04 1041 	add.w	r0, r4, r1, lsl #5
 8006c92:	f500 62a0 	add.w	r2, r0, #1280	; 0x500
 8006c96:	f8d0 3500 	ldr.w	r3, [r0, #1280]	; 0x500
    value |= USB_OTG_HCCHAR_CHDIS;
    value |= USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006c9a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006c9e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    USBx_HC(i)->HCCHAR = value;
 8006ca2:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500

    do
    {
      count++;
 8006ca6:	9b01      	ldr	r3, [sp, #4]
 8006ca8:	3301      	adds	r3, #1
 8006caa:	9301      	str	r3, [sp, #4]

      if (count > 1000U)
 8006cac:	9b01      	ldr	r3, [sp, #4]
 8006cae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006cb2:	d8e9      	bhi.n	8006c88 <USB_StopHost+0x48>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006cb4:	6813      	ldr	r3, [r2, #0]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	dbf5      	blt.n	8006ca6 <USB_StopHost+0x66>
 8006cba:	e7e5      	b.n	8006c88 <USB_StopHost+0x48>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8006cc0:	f8c4 3414 	str.w	r3, [r4, #1044]	; 0x414
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006cc4:	6163      	str	r3, [r4, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006cc6:	4620      	mov	r0, r4
 8006cc8:	f7ff fc92 	bl	80065f0 <USB_EnableGlobalInt>

  return ret;
}
 8006ccc:	4628      	mov	r0, r5
 8006cce:	b003      	add	sp, #12
 8006cd0:	bd30      	pop	{r4, r5, pc}
	...

08006cd4 <Add_Console_Top_Level_Command>:
	// Print the command prompt
	printf("\r\n\r\nCommand: ");
}

bool Add_Console_Top_Level_Command(const char * Command, const char * Description, void * Call_Function, void * Call_Function_Data)
{
 8006cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cd8:	4604      	mov	r4, r0
 8006cda:	460d      	mov	r5, r1
 8006cdc:	4617      	mov	r7, r2
 8006cde:	461e      	mov	r6, r3
	Console_Command * command = (Console_Command *)Task_malloc(console.Repeat_Commands_Task_ID, sizeof(Console_Command));
 8006ce0:	2120      	movs	r1, #32
 8006ce2:	4b1c      	ldr	r3, [pc, #112]	; (8006d54 <Add_Console_Top_Level_Command+0x80>)
 8006ce4:	f8d3 0224 	ldr.w	r0, [r3, #548]	; 0x224
 8006ce8:	f001 fe06 	bl	80088f8 <Task_malloc>

	if(command != NULL)
 8006cec:	b368      	cbz	r0, 8006d4a <Add_Console_Top_Level_Command+0x76>
 8006cee:	4680      	mov	r8, r0
	{
		command->Command = (const char *)Task_malloc(console.Repeat_Commands_Task_ID, (strlen(Command) + 1) * sizeof(char));
 8006cf0:	4620      	mov	r0, r4
 8006cf2:	f7f9 fa85 	bl	8000200 <strlen>
 8006cf6:	1c41      	adds	r1, r0, #1
 8006cf8:	4b16      	ldr	r3, [pc, #88]	; (8006d54 <Add_Console_Top_Level_Command+0x80>)
 8006cfa:	f8d3 0224 	ldr.w	r0, [r3, #548]	; 0x224
 8006cfe:	f001 fdfb 	bl	80088f8 <Task_malloc>
 8006d02:	f8c8 0004 	str.w	r0, [r8, #4]

		if(command->Command != NULL)
 8006d06:	b318      	cbz	r0, 8006d50 <Add_Console_Top_Level_Command+0x7c>
		{
			strcpy((char *)command->Command, Command);
 8006d08:	4621      	mov	r1, r4
 8006d0a:	f003 fba0 	bl	800a44e <strcpy>

			command->Description = (const char *)Task_malloc(console.Repeat_Commands_Task_ID, (strlen(Description) + 1) * sizeof(char));
 8006d0e:	4628      	mov	r0, r5
 8006d10:	f7f9 fa76 	bl	8000200 <strlen>
 8006d14:	1c41      	adds	r1, r0, #1
 8006d16:	4b0f      	ldr	r3, [pc, #60]	; (8006d54 <Add_Console_Top_Level_Command+0x80>)
 8006d18:	f8d3 0224 	ldr.w	r0, [r3, #548]	; 0x224
 8006d1c:	f001 fdec 	bl	80088f8 <Task_malloc>
 8006d20:	f8c8 0008 	str.w	r0, [r8, #8]

			if(command->Description != NULL)
 8006d24:	b908      	cbnz	r0, 8006d2a <Add_Console_Top_Level_Command+0x56>
				return true;
			}
		}
	}

	return false;
 8006d26:	2000      	movs	r0, #0
 8006d28:	e010      	b.n	8006d4c <Add_Console_Top_Level_Command+0x78>
				strcpy((char *)command->Description, Description);
 8006d2a:	4629      	mov	r1, r5
 8006d2c:	f003 fb8f 	bl	800a44e <strcpy>
				command->Call_Function = Call_Function;
 8006d30:	f8c8 700c 	str.w	r7, [r8, #12]
				command->Call_Function_Data = Call_Function_Data;
 8006d34:	f8c8 6018 	str.w	r6, [r8, #24]
				command->Command_Type = eConsole_Command_Top_Level;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	f888 3000 	strb.w	r3, [r8]
				Enqueue(&console.Console_Commands, (void *)command);
 8006d3e:	4641      	mov	r1, r8
 8006d40:	4805      	ldr	r0, [pc, #20]	; (8006d58 <Add_Console_Top_Level_Command+0x84>)
 8006d42:	f000 f8cb 	bl	8006edc <Enqueue>
				return true;
 8006d46:	2001      	movs	r0, #1
 8006d48:	e000      	b.n	8006d4c <Add_Console_Top_Level_Command+0x78>
	return false;
 8006d4a:	2000      	movs	r0, #0
}
 8006d4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return false;
 8006d50:	2000      	movs	r0, #0
 8006d52:	e7fb      	b.n	8006d4c <Add_Console_Top_Level_Command+0x78>
 8006d54:	20000b7c 	.word	0x20000b7c
 8006d58:	20000d94 	.word	0x20000d94

08006d5c <Add_Console_Complete_Command>:

bool Add_Console_Complete_Command(const char * Command, void * Call_Function, void * Call_Function_Data)
{
 8006d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d5e:	4604      	mov	r4, r0
 8006d60:	460e      	mov	r6, r1
 8006d62:	4617      	mov	r7, r2
	Console_Command * command = (Console_Command *)Task_malloc(console.Repeat_Commands_Task_ID, sizeof(Console_Command));
 8006d64:	2120      	movs	r1, #32
 8006d66:	4b11      	ldr	r3, [pc, #68]	; (8006dac <Add_Console_Complete_Command+0x50>)
 8006d68:	f8d3 0224 	ldr.w	r0, [r3, #548]	; 0x224
 8006d6c:	f001 fdc4 	bl	80088f8 <Task_malloc>

	if(command != NULL)
 8006d70:	b1d0      	cbz	r0, 8006da8 <Add_Console_Complete_Command+0x4c>
 8006d72:	4605      	mov	r5, r0
	{
		command->Command = (const char *)Task_malloc(console.Repeat_Commands_Task_ID, (strlen(Command) + 1) * sizeof(char));
 8006d74:	4620      	mov	r0, r4
 8006d76:	f7f9 fa43 	bl	8000200 <strlen>
 8006d7a:	1c41      	adds	r1, r0, #1
 8006d7c:	4b0b      	ldr	r3, [pc, #44]	; (8006dac <Add_Console_Complete_Command+0x50>)
 8006d7e:	f8d3 0224 	ldr.w	r0, [r3, #548]	; 0x224
 8006d82:	f001 fdb9 	bl	80088f8 <Task_malloc>
 8006d86:	6068      	str	r0, [r5, #4]

		if(command->Command != NULL)
 8006d88:	b908      	cbnz	r0, 8006d8e <Add_Console_Complete_Command+0x32>
			return true;

		}
	}

	return false;
 8006d8a:	2000      	movs	r0, #0
 8006d8c:	e00d      	b.n	8006daa <Add_Console_Complete_Command+0x4e>
			strcpy((char *)command->Command, Command);
 8006d8e:	4621      	mov	r1, r4
 8006d90:	f003 fb5d 	bl	800a44e <strcpy>
			command->Call_Function = Call_Function;
 8006d94:	60ee      	str	r6, [r5, #12]
			command->Call_Function_Data = Call_Function_Data;
 8006d96:	61af      	str	r7, [r5, #24]
			command->Command_Type = eConsole_Complete_Command;
 8006d98:	2401      	movs	r4, #1
 8006d9a:	702c      	strb	r4, [r5, #0]
			Enqueue(&console.Console_Commands, (void *)command);
 8006d9c:	4629      	mov	r1, r5
 8006d9e:	4804      	ldr	r0, [pc, #16]	; (8006db0 <Add_Console_Complete_Command+0x54>)
 8006da0:	f000 f89c 	bl	8006edc <Enqueue>
			return true;
 8006da4:	4620      	mov	r0, r4
 8006da6:	e000      	b.n	8006daa <Add_Console_Complete_Command+0x4e>
	return false;
 8006da8:	2000      	movs	r0, #0
}
 8006daa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006dac:	20000b7c 	.word	0x20000b7c
 8006db0:	20000d94 	.word	0x20000d94

08006db4 <Add_Console_Partial_Command>:

bool Add_Console_Partial_Command(const char * Command, void * Call_Function, void * Call_Function_Data)
{
 8006db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006db6:	4604      	mov	r4, r0
 8006db8:	460e      	mov	r6, r1
 8006dba:	4617      	mov	r7, r2
	Console_Command * command = (Console_Command *)Task_malloc(console.Repeat_Commands_Task_ID, sizeof(Console_Command));
 8006dbc:	2120      	movs	r1, #32
 8006dbe:	4b11      	ldr	r3, [pc, #68]	; (8006e04 <Add_Console_Partial_Command+0x50>)
 8006dc0:	f8d3 0224 	ldr.w	r0, [r3, #548]	; 0x224
 8006dc4:	f001 fd98 	bl	80088f8 <Task_malloc>

	if(command != NULL)
 8006dc8:	b1d0      	cbz	r0, 8006e00 <Add_Console_Partial_Command+0x4c>
 8006dca:	4605      	mov	r5, r0
	{
		command->Command = (const char *)Task_malloc(console.Repeat_Commands_Task_ID, (strlen(Command) + 1) * sizeof(char));
 8006dcc:	4620      	mov	r0, r4
 8006dce:	f7f9 fa17 	bl	8000200 <strlen>
 8006dd2:	1c41      	adds	r1, r0, #1
 8006dd4:	4b0b      	ldr	r3, [pc, #44]	; (8006e04 <Add_Console_Partial_Command+0x50>)
 8006dd6:	f8d3 0224 	ldr.w	r0, [r3, #548]	; 0x224
 8006dda:	f001 fd8d 	bl	80088f8 <Task_malloc>
 8006dde:	6068      	str	r0, [r5, #4]

		if(command->Command != NULL)
 8006de0:	b908      	cbnz	r0, 8006de6 <Add_Console_Partial_Command+0x32>
			return true;

		}
	}

	return false;
 8006de2:	2000      	movs	r0, #0
 8006de4:	e00d      	b.n	8006e02 <Add_Console_Partial_Command+0x4e>
			strcpy((char *)command->Command, Command);
 8006de6:	4621      	mov	r1, r4
 8006de8:	f003 fb31 	bl	800a44e <strcpy>
			command->Call_Function_With_Data = Call_Function;
 8006dec:	612e      	str	r6, [r5, #16]
			command->Call_Function_Data = Call_Function_Data;
 8006dee:	61af      	str	r7, [r5, #24]
			command->Command_Type = eConsole_Partial_Command;
 8006df0:	2302      	movs	r3, #2
 8006df2:	702b      	strb	r3, [r5, #0]
			Enqueue(&console.Console_Commands, (void *)command);
 8006df4:	4629      	mov	r1, r5
 8006df6:	4804      	ldr	r0, [pc, #16]	; (8006e08 <Add_Console_Partial_Command+0x54>)
 8006df8:	f000 f870 	bl	8006edc <Enqueue>
			return true;
 8006dfc:	2001      	movs	r0, #1
 8006dfe:	e000      	b.n	8006e02 <Add_Console_Partial_Command+0x4e>
	return false;
 8006e00:	2000      	movs	r0, #0
}
 8006e02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e04:	20000b7c 	.word	0x20000b7c
 8006e08:	20000d94 	.word	0x20000d94

08006e0c <Add_Console_Repeat_Command>:

bool Add_Console_Repeat_Command(const char * Command, void * Call_Function, void * Call_Function_Data, uint32_t Repeat_Timer)
{
 8006e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e10:	4604      	mov	r4, r0
 8006e12:	460f      	mov	r7, r1
 8006e14:	4616      	mov	r6, r2
 8006e16:	461d      	mov	r5, r3
	Console_Command * command = (Console_Command *)Task_malloc(console.Repeat_Commands_Task_ID, sizeof(Console_Command));
 8006e18:	2120      	movs	r1, #32
 8006e1a:	4b15      	ldr	r3, [pc, #84]	; (8006e70 <Add_Console_Repeat_Command+0x64>)
 8006e1c:	f8d3 0224 	ldr.w	r0, [r3, #548]	; 0x224
 8006e20:	f001 fd6a 	bl	80088f8 <Task_malloc>

	if(command != NULL)
 8006e24:	b300      	cbz	r0, 8006e68 <Add_Console_Repeat_Command+0x5c>
 8006e26:	4680      	mov	r8, r0
	{
		command->Command = (const char *)Task_malloc(console.Repeat_Commands_Task_ID, (strlen(Command) + 1) * sizeof(char));
 8006e28:	4620      	mov	r0, r4
 8006e2a:	f7f9 f9e9 	bl	8000200 <strlen>
 8006e2e:	1c41      	adds	r1, r0, #1
 8006e30:	4b0f      	ldr	r3, [pc, #60]	; (8006e70 <Add_Console_Repeat_Command+0x64>)
 8006e32:	f8d3 0224 	ldr.w	r0, [r3, #548]	; 0x224
 8006e36:	f001 fd5f 	bl	80088f8 <Task_malloc>
 8006e3a:	f8c8 0004 	str.w	r0, [r8, #4]

		if(command->Command != NULL)
 8006e3e:	b908      	cbnz	r0, 8006e44 <Add_Console_Repeat_Command+0x38>
			return true;

		}
	}

	return false;
 8006e40:	2000      	movs	r0, #0
 8006e42:	e012      	b.n	8006e6a <Add_Console_Repeat_Command+0x5e>
			strcpy((char *)command->Command, Command);
 8006e44:	4621      	mov	r1, r4
 8006e46:	f003 fb02 	bl	800a44e <strcpy>
			command->Call_Function = Call_Function;
 8006e4a:	f8c8 700c 	str.w	r7, [r8, #12]
			command->Call_Function_Data = Call_Function_Data;
 8006e4e:	f8c8 6018 	str.w	r6, [r8, #24]
			command->Repeat_Time = Repeat_Timer;
 8006e52:	f8c8 501c 	str.w	r5, [r8, #28]
			command->Command_Type = eConsole_Repeat_Command;
 8006e56:	2303      	movs	r3, #3
 8006e58:	f888 3000 	strb.w	r3, [r8]
			Enqueue(&console.Console_Commands, (void *)command);
 8006e5c:	4641      	mov	r1, r8
 8006e5e:	4805      	ldr	r0, [pc, #20]	; (8006e74 <Add_Console_Repeat_Command+0x68>)
 8006e60:	f000 f83c 	bl	8006edc <Enqueue>
			return true;
 8006e64:	2001      	movs	r0, #1
 8006e66:	e000      	b.n	8006e6a <Add_Console_Repeat_Command+0x5e>
	return false;
 8006e68:	2000      	movs	r0, #0
}
 8006e6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e6e:	bf00      	nop
 8006e70:	20000b7c 	.word	0x20000b7c
 8006e74:	20000d94 	.word	0x20000d94

08006e78 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8006e78:	b538      	push	{r3, r4, r5, lr}
 8006e7a:	4604      	mov	r4, r0

	// Save the byte
	console.TX_Buff[console.TX_Buff_Size++] = ch;
 8006e7c:	4b13      	ldr	r3, [pc, #76]	; (8006ecc <__io_putchar+0x54>)
 8006e7e:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
 8006e82:	1c4a      	adds	r2, r1, #1
 8006e84:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 8006e88:	440b      	add	r3, r1
 8006e8a:	7118      	strb	r0, [r3, #4]

	// If the byte is a \n then flush the buffer
	if(ch == '\r')
 8006e8c:	280d      	cmp	r0, #13
 8006e8e:	d006      	beq.n	8006e9e <__io_putchar+0x26>
		UART_Transmit(console.Bus_Handle, console.TX_Buff, console.TX_Buff_Size);
		console.TX_Buff_Size = 0;
	}

	// If the buffer is full then flush the buffer
	if(console.TX_Buff_Size >= MAX_CONSOLE_BUFF_SIZE)
 8006e90:	4b0e      	ldr	r3, [pc, #56]	; (8006ecc <__io_putchar+0x54>)
 8006e92:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8006e96:	2aff      	cmp	r2, #255	; 0xff
 8006e98:	d80c      	bhi.n	8006eb4 <__io_putchar+0x3c>
		UART_Transmit(console.Bus_Handle, console.TX_Buff, console.TX_Buff_Size);
		console.TX_Buff_Size = 0;
	}

	return ch;
}
 8006e9a:	4620      	mov	r0, r4
 8006e9c:	bd38      	pop	{r3, r4, r5, pc}
		UART_Transmit(console.Bus_Handle, console.TX_Buff, console.TX_Buff_Size);
 8006e9e:	4d0b      	ldr	r5, [pc, #44]	; (8006ecc <__io_putchar+0x54>)
 8006ea0:	4629      	mov	r1, r5
 8006ea2:	f851 0b04 	ldr.w	r0, [r1], #4
 8006ea6:	b292      	uxth	r2, r2
 8006ea8:	f001 fdee 	bl	8008a88 <UART_Transmit>
		console.TX_Buff_Size = 0;
 8006eac:	2300      	movs	r3, #0
 8006eae:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
 8006eb2:	e7ed      	b.n	8006e90 <__io_putchar+0x18>
		UART_Transmit(console.Bus_Handle, console.TX_Buff, console.TX_Buff_Size);
 8006eb4:	461d      	mov	r5, r3
 8006eb6:	4619      	mov	r1, r3
 8006eb8:	f851 0b04 	ldr.w	r0, [r1], #4
 8006ebc:	b292      	uxth	r2, r2
 8006ebe:	f001 fde3 	bl	8008a88 <UART_Transmit>
		console.TX_Buff_Size = 0;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
 8006ec8:	e7e7      	b.n	8006e9a <__io_putchar+0x22>
 8006eca:	bf00      	nop
 8006ecc:	20000b7c 	.word	0x20000b7c

08006ed0 <Prep_Queue>:
#include <stdlib.h>
#include <stdio.h>

void Prep_Queue(Queue * que)
{
	que->Head = NULL;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	6003      	str	r3, [r0, #0]
	que->Tail = NULL;
 8006ed4:	6043      	str	r3, [r0, #4]
	que->Size = 0;
 8006ed6:	6083      	str	r3, [r0, #8]
}
 8006ed8:	4770      	bx	lr
	...

08006edc <Enqueue>:

uint8_t Enqueue(Queue * que, void * data)
{
 8006edc:	b538      	push	{r3, r4, r5, lr}
 8006ede:	4604      	mov	r4, r0
 8006ee0:	460d      	mov	r5, r1
	Node * node = (Node *)malloc(sizeof(Node));
 8006ee2:	2008      	movs	r0, #8
 8006ee4:	f002 f9ee 	bl	80092c4 <malloc>

	if(node != NULL)
 8006ee8:	b178      	cbz	r0, 8006f0a <Enqueue+0x2e>
	{
		node->Next = NULL;
 8006eea:	2200      	movs	r2, #0
 8006eec:	6042      	str	r2, [r0, #4]
		node->Data = data;
 8006eee:	6005      	str	r5, [r0, #0]

		if(que->Size == 0)
 8006ef0:	68a2      	ldr	r2, [r4, #8]
 8006ef2:	b932      	cbnz	r2, 8006f02 <Enqueue+0x26>
		{
			que->Head = node;
 8006ef4:	6020      	str	r0, [r4, #0]
			que->Tail = node;
 8006ef6:	6060      	str	r0, [r4, #4]
		{
			que->Tail->Next = (Node *)node;
			que->Tail = node;
		}

		que->Size++;
 8006ef8:	68a3      	ldr	r3, [r4, #8]
 8006efa:	3301      	adds	r3, #1
 8006efc:	60a3      	str	r3, [r4, #8]
		return 1;
 8006efe:	2001      	movs	r0, #1
	else
	{
		printf("Enqueue malloc error\r\n");
		return 0;
	}
}
 8006f00:	bd38      	pop	{r3, r4, r5, pc}
			que->Tail->Next = (Node *)node;
 8006f02:	6862      	ldr	r2, [r4, #4]
 8006f04:	6050      	str	r0, [r2, #4]
			que->Tail = node;
 8006f06:	6060      	str	r0, [r4, #4]
 8006f08:	e7f6      	b.n	8006ef8 <Enqueue+0x1c>
		printf("Enqueue malloc error\r\n");
 8006f0a:	4802      	ldr	r0, [pc, #8]	; (8006f14 <Enqueue+0x38>)
 8006f0c:	f003 f9f0 	bl	800a2f0 <puts>
		return 0;
 8006f10:	2000      	movs	r0, #0
 8006f12:	e7f5      	b.n	8006f00 <Enqueue+0x24>
 8006f14:	0800e2c0 	.word	0x0800e2c0

08006f18 <Queue_Peek>:
		return NULL;
}

void * Queue_Peek(Queue * que, uint32_t index)
{
	if(index < que->Size)
 8006f18:	6883      	ldr	r3, [r0, #8]
 8006f1a:	428b      	cmp	r3, r1
 8006f1c:	d908      	bls.n	8006f30 <Queue_Peek+0x18>
	{
		Node * travler = que->Head;
 8006f1e:	6802      	ldr	r2, [r0, #0]
		uint32_t counter = 0;
 8006f20:	2300      	movs	r3, #0
		for(; counter < index; counter++)
 8006f22:	e001      	b.n	8006f28 <Queue_Peek+0x10>
			travler = (Node *)travler->Next;
 8006f24:	6852      	ldr	r2, [r2, #4]
		for(; counter < index; counter++)
 8006f26:	3301      	adds	r3, #1
 8006f28:	428b      	cmp	r3, r1
 8006f2a:	d3fb      	bcc.n	8006f24 <Queue_Peek+0xc>

		return travler->Data;
 8006f2c:	6810      	ldr	r0, [r2, #0]
 8006f2e:	4770      	bx	lr
	}
	else
		return NULL;
 8006f30:	2000      	movs	r0, #0
}
 8006f32:	4770      	bx	lr

08006f34 <USBH_MSC_SOFProcess>:
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
}
 8006f34:	2000      	movs	r0, #0
 8006f36:	4770      	bx	lr

08006f38 <USBH_MSC_Process>:
{
 8006f38:	b570      	push	{r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006f3a:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8006f3e:	69de      	ldr	r6, [r3, #28]
  switch (MSC_Handle->state)
 8006f40:	7b33      	ldrb	r3, [r6, #12]
 8006f42:	b123      	cbz	r3, 8006f4e <USBH_MSC_Process+0x16>
 8006f44:	2b01      	cmp	r3, #1
 8006f46:	f040 8145 	bne.w	80071d4 <USBH_MSC_Process+0x29c>
      error = USBH_OK;
 8006f4a:	2000      	movs	r0, #0
}
 8006f4c:	bd70      	pop	{r4, r5, r6, pc}
 8006f4e:	4604      	mov	r4, r0
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8006f50:	f8b6 10f8 	ldrh.w	r1, [r6, #248]	; 0xf8
 8006f54:	7833      	ldrb	r3, [r6, #0]
 8006f56:	4299      	cmp	r1, r3
 8006f58:	f080 8131 	bcs.w	80071be <USBH_MSC_Process+0x286>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8006f5c:	2334      	movs	r3, #52	; 0x34
 8006f5e:	fb03 6301 	mla	r3, r3, r1, r6
 8006f62:	2201      	movs	r2, #1
 8006f64:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8006f68:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8006f6c:	2b08      	cmp	r3, #8
 8006f6e:	f200 8133 	bhi.w	80071d8 <USBH_MSC_Process+0x2a0>
 8006f72:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006f76:	0009      	.short	0x0009
 8006f78:	00440131 	.word	0x00440131
 8006f7c:	0015009e 	.word	0x0015009e
 8006f80:	013100d3 	.word	0x013100d3
 8006f84:	011f0131 	.word	0x011f0131
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8006f88:	2334      	movs	r3, #52	; 0x34
 8006f8a:	fb03 6101 	mla	r1, r3, r1, r6
 8006f8e:	2304      	movs	r3, #4
 8006f90:	f881 3090 	strb.w	r3, [r1, #144]	; 0x90
            MSC_Handle->timer = phost->Timer;
 8006f94:	f8d0 33c4 	ldr.w	r3, [r0, #964]	; 0x3c4
 8006f98:	f8c6 30fc 	str.w	r3, [r6, #252]	; 0xfc
  USBH_StatusTypeDef error = USBH_BUSY;
 8006f9c:	2001      	movs	r0, #1
            break;
 8006f9e:	e7d5      	b.n	8006f4c <USBH_MSC_Process+0x14>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8006fa0:	2234      	movs	r2, #52	; 0x34
 8006fa2:	fb01 f202 	mul.w	r2, r1, r2
 8006fa6:	3298      	adds	r2, #152	; 0x98
 8006fa8:	4432      	add	r2, r6
 8006faa:	3207      	adds	r2, #7
 8006fac:	b2c9      	uxtb	r1, r1
 8006fae:	f000 fc02 	bl	80077b6 <USBH_MSC_SCSI_Inquiry>
            if (scsi_status == USBH_OK)
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	b938      	cbnz	r0, 8006fc6 <USBH_MSC_Process+0x8e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8006fb6:	f8b6 20f8 	ldrh.w	r2, [r6, #248]	; 0xf8
 8006fba:	2134      	movs	r1, #52	; 0x34
 8006fbc:	fb01 6202 	mla	r2, r1, r2, r6
 8006fc0:	2102      	movs	r1, #2
 8006fc2:	f882 1090 	strb.w	r1, [r2, #144]	; 0x90
            if (scsi_status == USBH_FAIL)
 8006fc6:	2b02      	cmp	r3, #2
 8006fc8:	d003      	beq.n	8006fd2 <USBH_MSC_Process+0x9a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8006fca:	2b04      	cmp	r3, #4
 8006fcc:	d00b      	beq.n	8006fe6 <USBH_MSC_Process+0xae>
  USBH_StatusTypeDef error = USBH_BUSY;
 8006fce:	2001      	movs	r0, #1
 8006fd0:	e7bc      	b.n	8006f4c <USBH_MSC_Process+0x14>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8006fd2:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 8006fd6:	2234      	movs	r2, #52	; 0x34
 8006fd8:	fb02 6603 	mla	r6, r2, r3, r6
 8006fdc:	2305      	movs	r3, #5
 8006fde:	f886 3090 	strb.w	r3, [r6, #144]	; 0x90
  USBH_StatusTypeDef error = USBH_BUSY;
 8006fe2:	2001      	movs	r0, #1
 8006fe4:	e7b2      	b.n	8006f4c <USBH_MSC_Process+0x14>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8006fe6:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 8006fea:	2234      	movs	r2, #52	; 0x34
 8006fec:	fb02 6603 	mla	r6, r2, r3, r6
 8006ff0:	2001      	movs	r0, #1
 8006ff2:	f886 0090 	strb.w	r0, [r6, #144]	; 0x90
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8006ff6:	2302      	movs	r3, #2
 8006ff8:	f886 3091 	strb.w	r3, [r6, #145]	; 0x91
 8006ffc:	e7a6      	b.n	8006f4c <USBH_MSC_Process+0x14>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8006ffe:	b2c9      	uxtb	r1, r1
 8007000:	f000 fb6b 	bl	80076da <USBH_MSC_SCSI_TestUnitReady>
            if (ready_status == USBH_OK)
 8007004:	4602      	mov	r2, r0
 8007006:	b9c0      	cbnz	r0, 800703a <USBH_MSC_Process+0x102>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8007008:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 800700c:	2134      	movs	r1, #52	; 0x34
 800700e:	fb01 6103 	mla	r1, r1, r3, r6
 8007012:	f891 1092 	ldrb.w	r1, [r1, #146]	; 0x92
 8007016:	b1b1      	cbz	r1, 8007046 <USBH_MSC_Process+0x10e>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8007018:	2134      	movs	r1, #52	; 0x34
 800701a:	fb01 6103 	mla	r1, r1, r3, r6
 800701e:	2001      	movs	r0, #1
 8007020:	f881 00c1 	strb.w	r0, [r1, #193]	; 0xc1
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8007024:	2134      	movs	r1, #52	; 0x34
 8007026:	fb01 6303 	mla	r3, r1, r3, r6
 800702a:	2103      	movs	r1, #3
 800702c:	f883 1090 	strb.w	r1, [r3, #144]	; 0x90
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8007030:	2100      	movs	r1, #0
 8007032:	f883 1091 	strb.w	r1, [r3, #145]	; 0x91
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8007036:	f883 1092 	strb.w	r1, [r3, #146]	; 0x92
            if (ready_status == USBH_FAIL)
 800703a:	2a02      	cmp	r2, #2
 800703c:	d00a      	beq.n	8007054 <USBH_MSC_Process+0x11c>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800703e:	2a04      	cmp	r2, #4
 8007040:	d02b      	beq.n	800709a <USBH_MSC_Process+0x162>
  USBH_StatusTypeDef error = USBH_BUSY;
 8007042:	2001      	movs	r0, #1
 8007044:	e782      	b.n	8006f4c <USBH_MSC_Process+0x14>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8007046:	2134      	movs	r1, #52	; 0x34
 8007048:	fb01 6103 	mla	r1, r1, r3, r6
 800704c:	2000      	movs	r0, #0
 800704e:	f881 00c1 	strb.w	r0, [r1, #193]	; 0xc1
 8007052:	e7e7      	b.n	8007024 <USBH_MSC_Process+0xec>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8007054:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 8007058:	2234      	movs	r2, #52	; 0x34
 800705a:	fb02 6203 	mla	r2, r2, r3, r6
 800705e:	f892 2092 	ldrb.w	r2, [r2, #146]	; 0x92
 8007062:	2a02      	cmp	r2, #2
 8007064:	d012      	beq.n	800708c <USBH_MSC_Process+0x154>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8007066:	2234      	movs	r2, #52	; 0x34
 8007068:	fb02 6203 	mla	r2, r2, r3, r6
 800706c:	2101      	movs	r1, #1
 800706e:	f882 10c1 	strb.w	r1, [r2, #193]	; 0xc1
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8007072:	2234      	movs	r2, #52	; 0x34
 8007074:	fb02 6603 	mla	r6, r2, r3, r6
 8007078:	2305      	movs	r3, #5
 800707a:	f886 3090 	strb.w	r3, [r6, #144]	; 0x90
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800707e:	2001      	movs	r0, #1
 8007080:	f886 0091 	strb.w	r0, [r6, #145]	; 0x91
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8007084:	2302      	movs	r3, #2
 8007086:	f886 3092 	strb.w	r3, [r6, #146]	; 0x92
 800708a:	e75f      	b.n	8006f4c <USBH_MSC_Process+0x14>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800708c:	2234      	movs	r2, #52	; 0x34
 800708e:	fb02 6203 	mla	r2, r2, r3, r6
 8007092:	2100      	movs	r1, #0
 8007094:	f882 10c1 	strb.w	r1, [r2, #193]	; 0xc1
 8007098:	e7eb      	b.n	8007072 <USBH_MSC_Process+0x13a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800709a:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 800709e:	2234      	movs	r2, #52	; 0x34
 80070a0:	fb02 6603 	mla	r6, r2, r3, r6
 80070a4:	2001      	movs	r0, #1
 80070a6:	f886 0090 	strb.w	r0, [r6, #144]	; 0x90
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80070aa:	2302      	movs	r3, #2
 80070ac:	f886 3091 	strb.w	r3, [r6, #145]	; 0x91
 80070b0:	e74c      	b.n	8006f4c <USBH_MSC_Process+0x14>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 80070b2:	2234      	movs	r2, #52	; 0x34
 80070b4:	fb01 f202 	mul.w	r2, r1, r2
 80070b8:	3290      	adds	r2, #144	; 0x90
 80070ba:	4432      	add	r2, r6
 80070bc:	3204      	adds	r2, #4
 80070be:	b2c9      	uxtb	r1, r1
 80070c0:	f000 fb32 	bl	8007728 <USBH_MSC_SCSI_ReadCapacity>
            if (scsi_status == USBH_OK)
 80070c4:	b970      	cbnz	r0, 80070e4 <USBH_MSC_Process+0x1ac>
              if (MSC_Handle->unit[MSC_Handle->current_lun].state_changed == 1U)
 80070c6:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80070ca:	2234      	movs	r2, #52	; 0x34
 80070cc:	fb02 6203 	mla	r2, r2, r3, r6
 80070d0:	2001      	movs	r0, #1
 80070d2:	f882 0090 	strb.w	r0, [r2, #144]	; 0x90
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80070d6:	2100      	movs	r1, #0
 80070d8:	f882 1091 	strb.w	r1, [r2, #145]	; 0x91
              MSC_Handle->current_lun++;
 80070dc:	4403      	add	r3, r0
 80070de:	f8a6 30f8 	strh.w	r3, [r6, #248]	; 0xf8
 80070e2:	e733      	b.n	8006f4c <USBH_MSC_Process+0x14>
            else if (scsi_status == USBH_FAIL)
 80070e4:	2802      	cmp	r0, #2
 80070e6:	d003      	beq.n	80070f0 <USBH_MSC_Process+0x1b8>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80070e8:	2804      	cmp	r0, #4
 80070ea:	d00b      	beq.n	8007104 <USBH_MSC_Process+0x1cc>
  USBH_StatusTypeDef error = USBH_BUSY;
 80070ec:	2001      	movs	r0, #1
 80070ee:	e72d      	b.n	8006f4c <USBH_MSC_Process+0x14>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80070f0:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 80070f4:	2234      	movs	r2, #52	; 0x34
 80070f6:	fb02 6603 	mla	r6, r2, r3, r6
 80070fa:	2305      	movs	r3, #5
 80070fc:	f886 3090 	strb.w	r3, [r6, #144]	; 0x90
  USBH_StatusTypeDef error = USBH_BUSY;
 8007100:	2001      	movs	r0, #1
 8007102:	e723      	b.n	8006f4c <USBH_MSC_Process+0x14>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007104:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 8007108:	2234      	movs	r2, #52	; 0x34
 800710a:	fb02 6603 	mla	r6, r2, r3, r6
 800710e:	2001      	movs	r0, #1
 8007110:	f886 0090 	strb.w	r0, [r6, #144]	; 0x90
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8007114:	2302      	movs	r3, #2
 8007116:	f886 3091 	strb.w	r3, [r6, #145]	; 0x91
 800711a:	e717      	b.n	8006f4c <USBH_MSC_Process+0x14>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800711c:	2234      	movs	r2, #52	; 0x34
 800711e:	fb01 f202 	mul.w	r2, r1, r2
 8007122:	3298      	adds	r2, #152	; 0x98
 8007124:	4432      	add	r2, r6
 8007126:	3204      	adds	r2, #4
 8007128:	b2c9      	uxtb	r1, r1
 800712a:	f000 fbaa 	bl	8007882 <USBH_MSC_SCSI_RequestSense>
            if (scsi_status == USBH_OK)
 800712e:	4602      	mov	r2, r0
 8007130:	b998      	cbnz	r0, 800715a <USBH_MSC_Process+0x222>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8007132:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 8007136:	2134      	movs	r1, #52	; 0x34
 8007138:	fb01 6103 	mla	r1, r1, r3, r6
 800713c:	f891 109c 	ldrb.w	r1, [r1, #156]	; 0x9c
 8007140:	2906      	cmp	r1, #6
 8007142:	d010      	beq.n	8007166 <USBH_MSC_Process+0x22e>
 8007144:	2902      	cmp	r1, #2
 8007146:	d00e      	beq.n	8007166 <USBH_MSC_Process+0x22e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007148:	2134      	movs	r1, #52	; 0x34
 800714a:	fb01 6103 	mla	r1, r1, r3, r6
 800714e:	2001      	movs	r0, #1
 8007150:	f881 0090 	strb.w	r0, [r1, #144]	; 0x90
              MSC_Handle->current_lun++;
 8007154:	4403      	add	r3, r0
 8007156:	f8a6 30f8 	strh.w	r3, [r6, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 800715a:	2a02      	cmp	r2, #2
 800715c:	d014      	beq.n	8007188 <USBH_MSC_Process+0x250>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800715e:	2a04      	cmp	r2, #4
 8007160:	d01c      	beq.n	800719c <USBH_MSC_Process+0x264>
  USBH_StatusTypeDef error = USBH_BUSY;
 8007162:	2001      	movs	r0, #1
 8007164:	e6f2      	b.n	8006f4c <USBH_MSC_Process+0x14>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8007166:	f8d4 13c4 	ldr.w	r1, [r4, #964]	; 0x3c4
 800716a:	f8d6 00fc 	ldr.w	r0, [r6, #252]	; 0xfc
 800716e:	1a09      	subs	r1, r1, r0
 8007170:	f242 700f 	movw	r0, #9999	; 0x270f
 8007174:	4281      	cmp	r1, r0
 8007176:	d8e7      	bhi.n	8007148 <USBH_MSC_Process+0x210>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8007178:	2234      	movs	r2, #52	; 0x34
 800717a:	fb02 6303 	mla	r3, r2, r3, r6
 800717e:	2202      	movs	r2, #2
 8007180:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  USBH_StatusTypeDef error = USBH_BUSY;
 8007184:	2001      	movs	r0, #1
                  break;
 8007186:	e6e1      	b.n	8006f4c <USBH_MSC_Process+0x14>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8007188:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 800718c:	2234      	movs	r2, #52	; 0x34
 800718e:	fb02 6603 	mla	r6, r2, r3, r6
 8007192:	2308      	movs	r3, #8
 8007194:	f886 3090 	strb.w	r3, [r6, #144]	; 0x90
  USBH_StatusTypeDef error = USBH_BUSY;
 8007198:	2001      	movs	r0, #1
 800719a:	e6d7      	b.n	8006f4c <USBH_MSC_Process+0x14>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800719c:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 80071a0:	2234      	movs	r2, #52	; 0x34
 80071a2:	fb02 6603 	mla	r6, r2, r3, r6
 80071a6:	2001      	movs	r0, #1
 80071a8:	f886 0090 	strb.w	r0, [r6, #144]	; 0x90
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80071ac:	2302      	movs	r3, #2
 80071ae:	f886 3091 	strb.w	r3, [r6, #145]	; 0x91
 80071b2:	e6cb      	b.n	8006f4c <USBH_MSC_Process+0x14>
            MSC_Handle->current_lun++;
 80071b4:	3101      	adds	r1, #1
 80071b6:	f8a6 10f8 	strh.w	r1, [r6, #248]	; 0xf8
  USBH_StatusTypeDef error = USBH_BUSY;
 80071ba:	2001      	movs	r0, #1
            break;
 80071bc:	e6c6      	b.n	8006f4c <USBH_MSC_Process+0x14>
        MSC_Handle->current_lun = 0U;
 80071be:	2300      	movs	r3, #0
 80071c0:	f8a6 30f8 	strh.w	r3, [r6, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 80071c4:	2501      	movs	r5, #1
 80071c6:	7335      	strb	r5, [r6, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80071c8:	f8d0 33d4 	ldr.w	r3, [r0, #980]	; 0x3d4
 80071cc:	2102      	movs	r1, #2
 80071ce:	4798      	blx	r3
  USBH_StatusTypeDef error = USBH_BUSY;
 80071d0:	4628      	mov	r0, r5
 80071d2:	e6bb      	b.n	8006f4c <USBH_MSC_Process+0x14>
  switch (MSC_Handle->state)
 80071d4:	2001      	movs	r0, #1
 80071d6:	e6b9      	b.n	8006f4c <USBH_MSC_Process+0x14>
 80071d8:	2001      	movs	r0, #1
 80071da:	e6b7      	b.n	8006f4c <USBH_MSC_Process+0x14>

080071dc <USBH_MSC_ClassRequest>:
{
 80071dc:	b510      	push	{r4, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80071de:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 80071e2:	69dc      	ldr	r4, [r3, #28]
  switch (MSC_Handle->req_state)
 80071e4:	7ba3      	ldrb	r3, [r4, #14]
 80071e6:	2b02      	cmp	r3, #2
 80071e8:	d004      	beq.n	80071f4 <USBH_MSC_ClassRequest+0x18>
 80071ea:	2b03      	cmp	r3, #3
 80071ec:	d025      	beq.n	800723a <USBH_MSC_ClassRequest+0x5e>
 80071ee:	b10b      	cbz	r3, 80071f4 <USBH_MSC_ClassRequest+0x18>
 80071f0:	2001      	movs	r0, #1
}
 80071f2:	bd10      	pop	{r4, pc}
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 80071f4:	4621      	mov	r1, r4
 80071f6:	f000 f925 	bl	8007444 <USBH_MSC_BOT_REQ_GetMaxLUN>
      if (status == USBH_NOT_SUPPORTED)
 80071fa:	2803      	cmp	r0, #3
 80071fc:	d002      	beq.n	8007204 <USBH_MSC_ClassRequest+0x28>
      if (status == USBH_OK)
 80071fe:	2800      	cmp	r0, #0
 8007200:	d1f7      	bne.n	80071f2 <USBH_MSC_ClassRequest+0x16>
 8007202:	e001      	b.n	8007208 <USBH_MSC_ClassRequest+0x2c>
        MSC_Handle->max_lun = 0U;
 8007204:	2000      	movs	r0, #0
 8007206:	7020      	strb	r0, [r4, #0]
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8007208:	7821      	ldrb	r1, [r4, #0]
 800720a:	2902      	cmp	r1, #2
 800720c:	d813      	bhi.n	8007236 <USBH_MSC_ClassRequest+0x5a>
 800720e:	3101      	adds	r1, #1
 8007210:	b2c9      	uxtb	r1, r1
 8007212:	7021      	strb	r1, [r4, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8007214:	2300      	movs	r3, #0
 8007216:	428b      	cmp	r3, r1
 8007218:	d2eb      	bcs.n	80071f2 <USBH_MSC_ClassRequest+0x16>
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800721a:	2234      	movs	r2, #52	; 0x34
 800721c:	fb02 4203 	mla	r2, r2, r3, r4
 8007220:	f04f 0c02 	mov.w	ip, #2
 8007224:	f882 c092 	strb.w	ip, [r2, #146]	; 0x92
          MSC_Handle->unit[i].state_changed = 0U;
 8007228:	f04f 0c00 	mov.w	ip, #0
 800722c:	f882 c0c1 	strb.w	ip, [r2, #193]	; 0xc1
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8007230:	3301      	adds	r3, #1
 8007232:	b2db      	uxtb	r3, r3
 8007234:	e7ef      	b.n	8007216 <USBH_MSC_ClassRequest+0x3a>
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8007236:	2102      	movs	r1, #2
 8007238:	e7eb      	b.n	8007212 <USBH_MSC_ClassRequest+0x36>
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 800723a:	2100      	movs	r1, #0
 800723c:	f001 f933 	bl	80084a6 <USBH_ClrFeature>
 8007240:	b918      	cbnz	r0, 800724a <USBH_MSC_ClassRequest+0x6e>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8007242:	7be3      	ldrb	r3, [r4, #15]
 8007244:	73a3      	strb	r3, [r4, #14]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007246:	2001      	movs	r0, #1
 8007248:	e7d3      	b.n	80071f2 <USBH_MSC_ClassRequest+0x16>
 800724a:	2001      	movs	r0, #1
 800724c:	e7d1      	b.n	80071f2 <USBH_MSC_ClassRequest+0x16>

0800724e <USBH_MSC_InterfaceDeInit>:
{
 800724e:	b538      	push	{r3, r4, r5, lr}
 8007250:	4604      	mov	r4, r0
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007252:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8007256:	69dd      	ldr	r5, [r3, #28]
  if (MSC_Handle->OutPipe)
 8007258:	7969      	ldrb	r1, [r5, #5]
 800725a:	b969      	cbnz	r1, 8007278 <USBH_MSC_InterfaceDeInit+0x2a>
  if (MSC_Handle->InPipe)
 800725c:	7929      	ldrb	r1, [r5, #4]
 800725e:	b9a1      	cbnz	r1, 800728a <USBH_MSC_InterfaceDeInit+0x3c>
  if (phost->pActiveClass->pData)
 8007260:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 8007264:	69d8      	ldr	r0, [r3, #28]
 8007266:	b128      	cbz	r0, 8007274 <USBH_MSC_InterfaceDeInit+0x26>
    USBH_free(phost->pActiveClass->pData);
 8007268:	f002 f834 	bl	80092d4 <free>
    phost->pActiveClass->pData = 0U;
 800726c:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 8007270:	2200      	movs	r2, #0
 8007272:	61da      	str	r2, [r3, #28]
}
 8007274:	2000      	movs	r0, #0
 8007276:	bd38      	pop	{r3, r4, r5, pc}
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8007278:	f001 f9a7 	bl	80085ca <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 800727c:	7969      	ldrb	r1, [r5, #5]
 800727e:	4620      	mov	r0, r4
 8007280:	f001 f9bb 	bl	80085fa <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8007284:	2300      	movs	r3, #0
 8007286:	716b      	strb	r3, [r5, #5]
 8007288:	e7e8      	b.n	800725c <USBH_MSC_InterfaceDeInit+0xe>
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 800728a:	4620      	mov	r0, r4
 800728c:	f001 f99d 	bl	80085ca <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 8007290:	7929      	ldrb	r1, [r5, #4]
 8007292:	4620      	mov	r0, r4
 8007294:	f001 f9b1 	bl	80085fa <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8007298:	2300      	movs	r3, #0
 800729a:	712b      	strb	r3, [r5, #4]
 800729c:	e7e0      	b.n	8007260 <USBH_MSC_InterfaceDeInit+0x12>

0800729e <USBH_MSC_InterfaceInit>:
{
 800729e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072a0:	b085      	sub	sp, #20
 80072a2:	4604      	mov	r4, r0
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 80072a4:	f8d0 137c 	ldr.w	r1, [r0, #892]	; 0x37c
 80072a8:	2350      	movs	r3, #80	; 0x50
 80072aa:	2206      	movs	r2, #6
 80072ac:	7909      	ldrb	r1, [r1, #4]
 80072ae:	f000 fcdd 	bl	8007c6c <USBH_FindInterface>
  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 80072b2:	2801      	cmp	r0, #1
 80072b4:	d87c      	bhi.n	80073b0 <USBH_MSC_InterfaceInit+0x112>
 80072b6:	4605      	mov	r5, r0
  status = USBH_SelectInterface(phost, interface);
 80072b8:	4601      	mov	r1, r0
 80072ba:	4620      	mov	r0, r4
 80072bc:	f000 fccc 	bl	8007c58 <USBH_SelectInterface>
  if (status != USBH_OK)
 80072c0:	4607      	mov	r7, r0
 80072c2:	2800      	cmp	r0, #0
 80072c4:	d178      	bne.n	80073b8 <USBH_MSC_InterfaceInit+0x11a>
  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 80072c6:	f8d4 637c 	ldr.w	r6, [r4, #892]	; 0x37c
 80072ca:	f44f 7080 	mov.w	r0, #256	; 0x100
 80072ce:	f001 fff9 	bl	80092c4 <malloc>
 80072d2:	61f0      	str	r0, [r6, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80072d4:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 80072d8:	69de      	ldr	r6, [r3, #28]
  if (MSC_Handle == NULL)
 80072da:	2e00      	cmp	r6, #0
 80072dc:	d06e      	beq.n	80073bc <USBH_MSC_InterfaceInit+0x11e>
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 80072de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80072e2:	2100      	movs	r1, #0
 80072e4:	4630      	mov	r0, r6
 80072e6:	f002 f80b 	bl	8009300 <memset>
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80072ea:	231a      	movs	r3, #26
 80072ec:	fb03 4305 	mla	r3, r3, r5, r4
 80072f0:	f893 234e 	ldrb.w	r2, [r3, #846]	; 0x34e
 80072f4:	f993 334e 	ldrsb.w	r3, [r3, #846]	; 0x34e
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	db49      	blt.n	8007390 <USBH_MSC_InterfaceInit+0xf2>
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 80072fc:	71b2      	strb	r2, [r6, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80072fe:	231a      	movs	r3, #26
 8007300:	fb03 4305 	mla	r3, r3, r5, r4
 8007304:	f8b3 3350 	ldrh.w	r3, [r3, #848]	; 0x350
 8007308:	8133      	strh	r3, [r6, #8]
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800730a:	231a      	movs	r3, #26
 800730c:	fb03 4305 	mla	r3, r3, r5, r4
 8007310:	f893 2356 	ldrb.w	r2, [r3, #854]	; 0x356
 8007314:	f993 3356 	ldrsb.w	r3, [r3, #854]	; 0x356
 8007318:	2b00      	cmp	r3, #0
 800731a:	db41      	blt.n	80073a0 <USBH_MSC_InterfaceInit+0x102>
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800731c:	71b2      	strb	r2, [r6, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800731e:	201a      	movs	r0, #26
 8007320:	fb00 4505 	mla	r5, r0, r5, r4
 8007324:	f8b5 3358 	ldrh.w	r3, [r5, #856]	; 0x358
 8007328:	8133      	strh	r3, [r6, #8]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800732a:	79b1      	ldrb	r1, [r6, #6]
 800732c:	4620      	mov	r0, r4
 800732e:	f001 f951 	bl	80085d4 <USBH_AllocPipe>
 8007332:	7170      	strb	r0, [r6, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8007334:	79f1      	ldrb	r1, [r6, #7]
 8007336:	4620      	mov	r0, r4
 8007338:	f001 f94c 	bl	80085d4 <USBH_AllocPipe>
 800733c:	7130      	strb	r0, [r6, #4]
  USBH_MSC_BOT_Init(phost);
 800733e:	4620      	mov	r0, r4
 8007340:	f000 f88e 	bl	8007460 <USBH_MSC_BOT_Init>
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8007344:	79b2      	ldrb	r2, [r6, #6]
 8007346:	7971      	ldrb	r1, [r6, #5]
 8007348:	8933      	ldrh	r3, [r6, #8]
 800734a:	9302      	str	r3, [sp, #8]
 800734c:	2502      	movs	r5, #2
 800734e:	9501      	str	r5, [sp, #4]
 8007350:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 8007354:	9300      	str	r3, [sp, #0]
 8007356:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 800735a:	4620      	mov	r0, r4
 800735c:	f001 f925 	bl	80085aa <USBH_OpenPipe>
  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8007360:	79f2      	ldrb	r2, [r6, #7]
 8007362:	7931      	ldrb	r1, [r6, #4]
 8007364:	8973      	ldrh	r3, [r6, #10]
 8007366:	9302      	str	r3, [sp, #8]
 8007368:	9501      	str	r5, [sp, #4]
 800736a:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 800736e:	9300      	str	r3, [sp, #0]
 8007370:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8007374:	4620      	mov	r0, r4
 8007376:	f001 f918 	bl	80085aa <USBH_OpenPipe>
  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800737a:	2200      	movs	r2, #0
 800737c:	7931      	ldrb	r1, [r6, #4]
 800737e:	4620      	mov	r0, r4
 8007380:	f001 fd2e 	bl	8008de0 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8007384:	2200      	movs	r2, #0
 8007386:	7971      	ldrb	r1, [r6, #5]
 8007388:	4620      	mov	r0, r4
 800738a:	f001 fd29 	bl	8008de0 <USBH_LL_SetToggle>
  return USBH_OK;
 800738e:	e010      	b.n	80073b2 <USBH_MSC_InterfaceInit+0x114>
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8007390:	71f2      	strb	r2, [r6, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007392:	231a      	movs	r3, #26
 8007394:	fb03 4305 	mla	r3, r3, r5, r4
 8007398:	f8b3 3350 	ldrh.w	r3, [r3, #848]	; 0x350
 800739c:	8173      	strh	r3, [r6, #10]
 800739e:	e7b4      	b.n	800730a <USBH_MSC_InterfaceInit+0x6c>
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 80073a0:	71f2      	strb	r2, [r6, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80073a2:	201a      	movs	r0, #26
 80073a4:	fb00 4505 	mla	r5, r0, r5, r4
 80073a8:	f8b5 3358 	ldrh.w	r3, [r5, #856]	; 0x358
 80073ac:	8173      	strh	r3, [r6, #10]
 80073ae:	e7bc      	b.n	800732a <USBH_MSC_InterfaceInit+0x8c>
    return USBH_FAIL;
 80073b0:	2702      	movs	r7, #2
}
 80073b2:	4638      	mov	r0, r7
 80073b4:	b005      	add	sp, #20
 80073b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return USBH_FAIL;
 80073b8:	2702      	movs	r7, #2
 80073ba:	e7fa      	b.n	80073b2 <USBH_MSC_InterfaceInit+0x114>
    return USBH_FAIL;
 80073bc:	2702      	movs	r7, #2
 80073be:	e7f8      	b.n	80073b2 <USBH_MSC_InterfaceInit+0x114>

080073c0 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 80073c0:	b510      	push	{r4, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80073c2:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 80073c6:	69dc      	ldr	r4, [r3, #28]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 80073c8:	7921      	ldrb	r1, [r4, #4]
 80073ca:	f001 fcef 	bl	8008dac <USBH_LL_GetLastXferSize>
 80073ce:	280d      	cmp	r0, #13
 80073d0:	d001      	beq.n	80073d6 <USBH_MSC_DecodeCSW+0x16>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 80073d2:	2002      	movs	r0, #2
      status = BOT_CSW_PHASE_ERROR;
    }
  } /* CSW Length Check*/

  return status;
}
 80073d4:	bd10      	pop	{r4, pc}
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 80073d6:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 80073d8:	4b0a      	ldr	r3, [pc, #40]	; (8007404 <USBH_MSC_DecodeCSW+0x44>)
 80073da:	429a      	cmp	r2, r3
 80073dc:	d001      	beq.n	80073e2 <USBH_MSC_DecodeCSW+0x22>
      status = BOT_CSW_PHASE_ERROR;
 80073de:	2002      	movs	r0, #2
 80073e0:	e7f8      	b.n	80073d4 <USBH_MSC_DecodeCSW+0x14>
      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 80073e2:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80073e4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80073e6:	429a      	cmp	r2, r3
 80073e8:	d001      	beq.n	80073ee <USBH_MSC_DecodeCSW+0x2e>
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 80073ea:	2001      	movs	r0, #1
 80073ec:	e7f2      	b.n	80073d4 <USBH_MSC_DecodeCSW+0x14>
        if (MSC_Handle->hbot.csw.field.Status == 0U)
 80073ee:	f894 0084 	ldrb.w	r0, [r4, #132]	; 0x84
 80073f2:	2800      	cmp	r0, #0
 80073f4:	d0ee      	beq.n	80073d4 <USBH_MSC_DecodeCSW+0x14>
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 80073f6:	2801      	cmp	r0, #1
 80073f8:	d0ec      	beq.n	80073d4 <USBH_MSC_DecodeCSW+0x14>
        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 80073fa:	2802      	cmp	r0, #2
 80073fc:	d0ea      	beq.n	80073d4 <USBH_MSC_DecodeCSW+0x14>
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 80073fe:	2001      	movs	r0, #1
 8007400:	e7e8      	b.n	80073d4 <USBH_MSC_DecodeCSW+0x14>
 8007402:	bf00      	nop
 8007404:	53425355 	.word	0x53425355

08007408 <USBH_MSC_BOT_Abort>:
{
 8007408:	b508      	push	{r3, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800740a:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 800740e:	69d9      	ldr	r1, [r3, #28]
  switch (dir)
 8007410:	b11a      	cbz	r2, 800741a <USBH_MSC_BOT_Abort+0x12>
 8007412:	2a01      	cmp	r2, #1
 8007414:	d005      	beq.n	8007422 <USBH_MSC_BOT_Abort+0x1a>
 8007416:	2002      	movs	r0, #2
}
 8007418:	bd08      	pop	{r3, pc}
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800741a:	79c9      	ldrb	r1, [r1, #7]
 800741c:	f001 f843 	bl	80084a6 <USBH_ClrFeature>
      break;
 8007420:	e7fa      	b.n	8007418 <USBH_MSC_BOT_Abort+0x10>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8007422:	7989      	ldrb	r1, [r1, #6]
 8007424:	f001 f83f 	bl	80084a6 <USBH_ClrFeature>
      break;
 8007428:	e7f6      	b.n	8007418 <USBH_MSC_BOT_Abort+0x10>

0800742a <USBH_MSC_BOT_REQ_Reset>:
{
 800742a:	b508      	push	{r3, lr}
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800742c:	2221      	movs	r2, #33	; 0x21
 800742e:	7402      	strb	r2, [r0, #16]
  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8007430:	22ff      	movs	r2, #255	; 0xff
 8007432:	7442      	strb	r2, [r0, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007434:	2100      	movs	r1, #0
 8007436:	8241      	strh	r1, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007438:	8281      	strh	r1, [r0, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800743a:	82c1      	strh	r1, [r0, #22]
  return USBH_CtlReq(phost, 0U, 0U);
 800743c:	460a      	mov	r2, r1
 800743e:	f000 ff74 	bl	800832a <USBH_CtlReq>
}
 8007442:	bd08      	pop	{r3, pc}

08007444 <USBH_MSC_BOT_REQ_GetMaxLUN>:
{
 8007444:	b508      	push	{r3, lr}
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8007446:	22a1      	movs	r2, #161	; 0xa1
 8007448:	7402      	strb	r2, [r0, #16]
  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800744a:	22fe      	movs	r2, #254	; 0xfe
 800744c:	7442      	strb	r2, [r0, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800744e:	2200      	movs	r2, #0
 8007450:	8242      	strh	r2, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007452:	8282      	strh	r2, [r0, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8007454:	2201      	movs	r2, #1
 8007456:	82c2      	strh	r2, [r0, #22]
  return USBH_CtlReq(phost, Maxlun, 1U);
 8007458:	f000 ff67 	bl	800832a <USBH_CtlReq>
}
 800745c:	bd08      	pop	{r3, pc}
	...

08007460 <USBH_MSC_BOT_Init>:
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007460:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8007464:	69db      	ldr	r3, [r3, #28]
  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8007466:	4a05      	ldr	r2, [pc, #20]	; (800747c <USBH_MSC_BOT_Init+0x1c>)
 8007468:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800746a:	4a05      	ldr	r2, [pc, #20]	; (8007480 <USBH_MSC_BOT_Init+0x20>)
 800746c:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800746e:	2201      	movs	r2, #1
 8007470:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8007474:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
}
 8007478:	2000      	movs	r0, #0
 800747a:	4770      	bx	lr
 800747c:	43425355 	.word	0x43425355
 8007480:	20304050 	.word	0x20304050

08007484 <USBH_MSC_BOT_Process>:
{
 8007484:	b570      	push	{r4, r5, r6, lr}
 8007486:	b082      	sub	sp, #8
 8007488:	4605      	mov	r5, r0
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800748a:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 800748e:	69de      	ldr	r6, [r3, #28]
  switch (MSC_Handle->hbot.state)
 8007490:	f896 4050 	ldrb.w	r4, [r6, #80]	; 0x50
 8007494:	1e63      	subs	r3, r4, #1
 8007496:	2b0a      	cmp	r3, #10
 8007498:	f200 811d 	bhi.w	80076d6 <USBH_MSC_BOT_Process+0x252>
 800749c:	e8df f013 	tbh	[pc, r3, lsl #1]
 80074a0:	001b000b 	.word	0x001b000b
 80074a4:	004d0042 	.word	0x004d0042
 80074a8:	00830077 	.word	0x00830077
 80074ac:	00c100b6 	.word	0x00c100b6
 80074b0:	00ef00dd 	.word	0x00ef00dd
 80074b4:	0111      	.short	0x0111
      MSC_Handle->hbot.cbw.field.LUN = lun;
 80074b6:	f886 1061 	strb.w	r1, [r6, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 80074ba:	2302      	movs	r3, #2
 80074bc:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 80074c0:	7973      	ldrb	r3, [r6, #5]
 80074c2:	2201      	movs	r2, #1
 80074c4:	9200      	str	r2, [sp, #0]
 80074c6:	221f      	movs	r2, #31
 80074c8:	f106 0154 	add.w	r1, r6, #84	; 0x54
 80074cc:	f001 f834 	bl	8008538 <USBH_BulkSendData>
}
 80074d0:	4620      	mov	r0, r4
 80074d2:	b002      	add	sp, #8
 80074d4:	bd70      	pop	{r4, r5, r6, pc}
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 80074d6:	7971      	ldrb	r1, [r6, #5]
 80074d8:	f001 fc6e 	bl	8008db8 <USBH_LL_GetURBState>
 80074dc:	4604      	mov	r4, r0
      if (URB_Status == USBH_URB_DONE)
 80074de:	2801      	cmp	r0, #1
 80074e0:	d005      	beq.n	80074ee <USBH_MSC_BOT_Process+0x6a>
      else if (URB_Status == USBH_URB_NOTREADY)
 80074e2:	2802      	cmp	r0, #2
 80074e4:	d015      	beq.n	8007512 <USBH_MSC_BOT_Process+0x8e>
        if (URB_Status == USBH_URB_STALL)
 80074e6:	2805      	cmp	r0, #5
 80074e8:	d017      	beq.n	800751a <USBH_MSC_BOT_Process+0x96>
  USBH_StatusTypeDef   status = USBH_BUSY;
 80074ea:	2401      	movs	r4, #1
 80074ec:	e7f0      	b.n	80074d0 <USBH_MSC_BOT_Process+0x4c>
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 80074ee:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 80074f0:	b15b      	cbz	r3, 800750a <USBH_MSC_BOT_Process+0x86>
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 80074f2:	f996 3060 	ldrsb.w	r3, [r6, #96]	; 0x60
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	db03      	blt.n	8007502 <USBH_MSC_BOT_Process+0x7e>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 80074fa:	2305      	movs	r3, #5
 80074fc:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
 8007500:	e7e6      	b.n	80074d0 <USBH_MSC_BOT_Process+0x4c>
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8007502:	2303      	movs	r3, #3
 8007504:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
 8007508:	e7e2      	b.n	80074d0 <USBH_MSC_BOT_Process+0x4c>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800750a:	2307      	movs	r3, #7
 800750c:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
 8007510:	e7de      	b.n	80074d0 <USBH_MSC_BOT_Process+0x4c>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007512:	2401      	movs	r4, #1
 8007514:	f886 4050 	strb.w	r4, [r6, #80]	; 0x50
 8007518:	e7da      	b.n	80074d0 <USBH_MSC_BOT_Process+0x4c>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800751a:	230a      	movs	r3, #10
 800751c:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 8007520:	2401      	movs	r4, #1
 8007522:	e7d5      	b.n	80074d0 <USBH_MSC_BOT_Process+0x4c>
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8007524:	7933      	ldrb	r3, [r6, #4]
 8007526:	8972      	ldrh	r2, [r6, #10]
 8007528:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 800752c:	f001 f81a 	bl	8008564 <USBH_BulkReceiveData>
      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8007530:	2304      	movs	r3, #4
 8007532:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 8007536:	2401      	movs	r4, #1
      break;
 8007538:	e7ca      	b.n	80074d0 <USBH_MSC_BOT_Process+0x4c>
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800753a:	7931      	ldrb	r1, [r6, #4]
 800753c:	f001 fc3c 	bl	8008db8 <USBH_LL_GetURBState>
 8007540:	4604      	mov	r4, r0
      if (URB_Status == USBH_URB_DONE)
 8007542:	2801      	cmp	r0, #1
 8007544:	d003      	beq.n	800754e <USBH_MSC_BOT_Process+0xca>
      else if (URB_Status == USBH_URB_STALL)
 8007546:	2805      	cmp	r0, #5
 8007548:	d01c      	beq.n	8007584 <USBH_MSC_BOT_Process+0x100>
  USBH_StatusTypeDef   status = USBH_BUSY;
 800754a:	2401      	movs	r4, #1
 800754c:	e7c0      	b.n	80074d0 <USBH_MSC_BOT_Process+0x4c>
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800754e:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 8007550:	8972      	ldrh	r2, [r6, #10]
 8007552:	4293      	cmp	r3, r2
 8007554:	d90c      	bls.n	8007570 <USBH_MSC_BOT_Process+0xec>
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8007556:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 800755a:	4411      	add	r1, r2
 800755c:	f8c6 108c 	str.w	r1, [r6, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8007560:	1a9b      	subs	r3, r3, r2
 8007562:	65f3      	str	r3, [r6, #92]	; 0x5c
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8007564:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 8007566:	b933      	cbnz	r3, 8007576 <USBH_MSC_BOT_Process+0xf2>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8007568:	2307      	movs	r3, #7
 800756a:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
 800756e:	e7af      	b.n	80074d0 <USBH_MSC_BOT_Process+0x4c>
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8007570:	2300      	movs	r3, #0
 8007572:	65f3      	str	r3, [r6, #92]	; 0x5c
 8007574:	e7f6      	b.n	8007564 <USBH_MSC_BOT_Process+0xe0>
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8007576:	7933      	ldrb	r3, [r6, #4]
 8007578:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 800757c:	4628      	mov	r0, r5
 800757e:	f000 fff1 	bl	8008564 <USBH_BulkReceiveData>
 8007582:	e7a5      	b.n	80074d0 <USBH_MSC_BOT_Process+0x4c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8007584:	2309      	movs	r3, #9
 8007586:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 800758a:	2401      	movs	r4, #1
 800758c:	e7a0      	b.n	80074d0 <USBH_MSC_BOT_Process+0x4c>
      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800758e:	7973      	ldrb	r3, [r6, #5]
 8007590:	8932      	ldrh	r2, [r6, #8]
 8007592:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 8007596:	2401      	movs	r4, #1
 8007598:	9400      	str	r4, [sp, #0]
 800759a:	f000 ffcd 	bl	8008538 <USBH_BulkSendData>
      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800759e:	2306      	movs	r3, #6
 80075a0:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
      break;
 80075a4:	e794      	b.n	80074d0 <USBH_MSC_BOT_Process+0x4c>
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 80075a6:	7971      	ldrb	r1, [r6, #5]
 80075a8:	f001 fc06 	bl	8008db8 <USBH_LL_GetURBState>
 80075ac:	4604      	mov	r4, r0
      if (URB_Status == USBH_URB_DONE)
 80075ae:	2801      	cmp	r0, #1
 80075b0:	d005      	beq.n	80075be <USBH_MSC_BOT_Process+0x13a>
      else if (URB_Status == USBH_URB_NOTREADY)
 80075b2:	2802      	cmp	r0, #2
 80075b4:	d020      	beq.n	80075f8 <USBH_MSC_BOT_Process+0x174>
      else if (URB_Status == USBH_URB_STALL)
 80075b6:	2805      	cmp	r0, #5
 80075b8:	d023      	beq.n	8007602 <USBH_MSC_BOT_Process+0x17e>
  USBH_StatusTypeDef   status = USBH_BUSY;
 80075ba:	2401      	movs	r4, #1
 80075bc:	e788      	b.n	80074d0 <USBH_MSC_BOT_Process+0x4c>
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 80075be:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 80075c0:	8932      	ldrh	r2, [r6, #8]
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d90c      	bls.n	80075e0 <USBH_MSC_BOT_Process+0x15c>
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 80075c6:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 80075ca:	4411      	add	r1, r2
 80075cc:	f8c6 108c 	str.w	r1, [r6, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 80075d0:	1a9b      	subs	r3, r3, r2
 80075d2:	65f3      	str	r3, [r6, #92]	; 0x5c
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 80075d4:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 80075d6:	b933      	cbnz	r3, 80075e6 <USBH_MSC_BOT_Process+0x162>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 80075d8:	2307      	movs	r3, #7
 80075da:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
 80075de:	e777      	b.n	80074d0 <USBH_MSC_BOT_Process+0x4c>
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 80075e0:	2300      	movs	r3, #0
 80075e2:	65f3      	str	r3, [r6, #92]	; 0x5c
 80075e4:	e7f6      	b.n	80075d4 <USBH_MSC_BOT_Process+0x150>
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 80075e6:	7973      	ldrb	r3, [r6, #5]
 80075e8:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 80075ec:	2001      	movs	r0, #1
 80075ee:	9000      	str	r0, [sp, #0]
 80075f0:	4628      	mov	r0, r5
 80075f2:	f000 ffa1 	bl	8008538 <USBH_BulkSendData>
 80075f6:	e76b      	b.n	80074d0 <USBH_MSC_BOT_Process+0x4c>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 80075f8:	2305      	movs	r3, #5
 80075fa:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 80075fe:	2401      	movs	r4, #1
 8007600:	e766      	b.n	80074d0 <USBH_MSC_BOT_Process+0x4c>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8007602:	230a      	movs	r3, #10
 8007604:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 8007608:	2401      	movs	r4, #1
 800760a:	e761      	b.n	80074d0 <USBH_MSC_BOT_Process+0x4c>
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800760c:	7933      	ldrb	r3, [r6, #4]
 800760e:	220d      	movs	r2, #13
 8007610:	f106 0178 	add.w	r1, r6, #120	; 0x78
 8007614:	f000 ffa6 	bl	8008564 <USBH_BulkReceiveData>
      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8007618:	2308      	movs	r3, #8
 800761a:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 800761e:	2401      	movs	r4, #1
      break;
 8007620:	e756      	b.n	80074d0 <USBH_MSC_BOT_Process+0x4c>
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8007622:	7931      	ldrb	r1, [r6, #4]
 8007624:	f001 fbc8 	bl	8008db8 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8007628:	2801      	cmp	r0, #1
 800762a:	d003      	beq.n	8007634 <USBH_MSC_BOT_Process+0x1b0>
      else if (URB_Status == USBH_URB_STALL)
 800762c:	2805      	cmp	r0, #5
 800762e:	d00f      	beq.n	8007650 <USBH_MSC_BOT_Process+0x1cc>
  USBH_StatusTypeDef   status = USBH_BUSY;
 8007630:	2401      	movs	r4, #1
 8007632:	e74d      	b.n	80074d0 <USBH_MSC_BOT_Process+0x4c>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007634:	2301      	movs	r3, #1
 8007636:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800763a:	f886 3052 	strb.w	r3, [r6, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 800763e:	4628      	mov	r0, r5
 8007640:	f7ff febe 	bl	80073c0 <USBH_MSC_DecodeCSW>
        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8007644:	4604      	mov	r4, r0
 8007646:	2800      	cmp	r0, #0
 8007648:	f43f af42 	beq.w	80074d0 <USBH_MSC_BOT_Process+0x4c>
          status = USBH_FAIL;
 800764c:	2402      	movs	r4, #2
 800764e:	e73f      	b.n	80074d0 <USBH_MSC_BOT_Process+0x4c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8007650:	2309      	movs	r3, #9
 8007652:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 8007656:	2401      	movs	r4, #1
 8007658:	e73a      	b.n	80074d0 <USBH_MSC_BOT_Process+0x4c>
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800765a:	2200      	movs	r2, #0
 800765c:	f7ff fed4 	bl	8007408 <USBH_MSC_BOT_Abort>
      if (error == USBH_OK)
 8007660:	b920      	cbnz	r0, 800766c <USBH_MSC_BOT_Process+0x1e8>
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8007662:	2307      	movs	r3, #7
 8007664:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 8007668:	2401      	movs	r4, #1
 800766a:	e731      	b.n	80074d0 <USBH_MSC_BOT_Process+0x4c>
      else if (error == USBH_UNRECOVERED_ERROR)
 800766c:	2804      	cmp	r0, #4
 800766e:	d001      	beq.n	8007674 <USBH_MSC_BOT_Process+0x1f0>
  USBH_StatusTypeDef   status = USBH_BUSY;
 8007670:	2401      	movs	r4, #1
 8007672:	e72d      	b.n	80074d0 <USBH_MSC_BOT_Process+0x4c>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8007674:	230b      	movs	r3, #11
 8007676:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 800767a:	2401      	movs	r4, #1
 800767c:	e728      	b.n	80074d0 <USBH_MSC_BOT_Process+0x4c>
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800767e:	2201      	movs	r2, #1
 8007680:	f7ff fec2 	bl	8007408 <USBH_MSC_BOT_Abort>
      if (error == USBH_OK)
 8007684:	b118      	cbz	r0, 800768e <USBH_MSC_BOT_Process+0x20a>
        if (error == USBH_UNRECOVERED_ERROR)
 8007686:	2804      	cmp	r0, #4
 8007688:	d016      	beq.n	80076b8 <USBH_MSC_BOT_Process+0x234>
  USBH_StatusTypeDef   status = USBH_BUSY;
 800768a:	2401      	movs	r4, #1
 800768c:	e720      	b.n	80074d0 <USBH_MSC_BOT_Process+0x4c>
        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800768e:	7971      	ldrb	r1, [r6, #5]
 8007690:	4628      	mov	r0, r5
 8007692:	f001 fbba 	bl	8008e0a <USBH_LL_GetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8007696:	f1c0 0201 	rsb	r2, r0, #1
 800769a:	b2d2      	uxtb	r2, r2
 800769c:	7971      	ldrb	r1, [r6, #5]
 800769e:	4628      	mov	r0, r5
 80076a0:	f001 fb9e 	bl	8008de0 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 80076a4:	2200      	movs	r2, #0
 80076a6:	7931      	ldrb	r1, [r6, #4]
 80076a8:	4628      	mov	r0, r5
 80076aa:	f001 fb99 	bl	8008de0 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 80076ae:	2309      	movs	r3, #9
 80076b0:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 80076b4:	2401      	movs	r4, #1
 80076b6:	e70b      	b.n	80074d0 <USBH_MSC_BOT_Process+0x4c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 80076b8:	230b      	movs	r3, #11
 80076ba:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 80076be:	2401      	movs	r4, #1
 80076c0:	e706      	b.n	80074d0 <USBH_MSC_BOT_Process+0x4c>
      status = USBH_MSC_BOT_REQ_Reset(phost);
 80076c2:	f7ff feb2 	bl	800742a <USBH_MSC_BOT_REQ_Reset>
      if (status == USBH_OK)
 80076c6:	4604      	mov	r4, r0
 80076c8:	2800      	cmp	r0, #0
 80076ca:	f47f af01 	bne.w	80074d0 <USBH_MSC_BOT_Process+0x4c>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80076ce:	2301      	movs	r3, #1
 80076d0:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
 80076d4:	e6fc      	b.n	80074d0 <USBH_MSC_BOT_Process+0x4c>
  switch (MSC_Handle->hbot.state)
 80076d6:	2401      	movs	r4, #1
 80076d8:	e6fa      	b.n	80074d0 <USBH_MSC_BOT_Process+0x4c>

080076da <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 80076da:	b508      	push	{r3, lr}
 80076dc:	4602      	mov	r2, r0
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80076de:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 80076e2:	69db      	ldr	r3, [r3, #28]

  switch (MSC_Handle->hbot.cmd_state)
 80076e4:	f893 0052 	ldrb.w	r0, [r3, #82]	; 0x52
 80076e8:	2801      	cmp	r0, #1
 80076ea:	d003      	beq.n	80076f4 <USBH_MSC_SCSI_TestUnitReady+0x1a>
 80076ec:	2802      	cmp	r0, #2
 80076ee:	d017      	beq.n	8007720 <USBH_MSC_SCSI_TestUnitReady+0x46>
 80076f0:	2002      	movs	r0, #2
    default:
      break;
  }

  return error;
}
 80076f2:	bd08      	pop	{r3, pc}
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 80076f4:	2200      	movs	r2, #0
 80076f6:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 80076f8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80076fc:	210a      	movs	r1, #10
 80076fe:	f883 1062 	strb.w	r1, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8007702:	f8c3 2063 	str.w	r2, [r3, #99]	; 0x63
 8007706:	f8c3 2067 	str.w	r2, [r3, #103]	; 0x67
 800770a:	f8c3 206b 	str.w	r2, [r3, #107]	; 0x6b
 800770e:	f8c3 206f 	str.w	r2, [r3, #111]	; 0x6f
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007712:	2201      	movs	r2, #1
 8007714:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007718:	2202      	movs	r2, #2
 800771a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      break;
 800771e:	e7e8      	b.n	80076f2 <USBH_MSC_SCSI_TestUnitReady+0x18>
      error = USBH_MSC_BOT_Process(phost, lun);
 8007720:	4610      	mov	r0, r2
 8007722:	f7ff feaf 	bl	8007484 <USBH_MSC_BOT_Process>
      break;
 8007726:	e7e4      	b.n	80076f2 <USBH_MSC_SCSI_TestUnitReady+0x18>

08007728 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 8007728:	b538      	push	{r3, r4, r5, lr}
 800772a:	4603      	mov	r3, r0
  USBH_StatusTypeDef    error = USBH_BUSY ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800772c:	f8d0 037c 	ldr.w	r0, [r0, #892]	; 0x37c
 8007730:	69c4      	ldr	r4, [r0, #28]

  switch (MSC_Handle->hbot.cmd_state)
 8007732:	f894 0052 	ldrb.w	r0, [r4, #82]	; 0x52
 8007736:	2801      	cmp	r0, #1
 8007738:	d004      	beq.n	8007744 <USBH_MSC_SCSI_ReadCapacity+0x1c>
 800773a:	4615      	mov	r5, r2
 800773c:	2802      	cmp	r0, #2
 800773e:	d020      	beq.n	8007782 <USBH_MSC_SCSI_ReadCapacity+0x5a>
 8007740:	2001      	movs	r0, #1
    default:
      break;
  }

  return error;
}
 8007742:	bd38      	pop	{r3, r4, r5, pc}
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8007744:	2308      	movs	r3, #8
 8007746:	65e3      	str	r3, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8007748:	2380      	movs	r3, #128	; 0x80
 800774a:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800774e:	230a      	movs	r3, #10
 8007750:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8007754:	2300      	movs	r3, #0
 8007756:	f8c4 3063 	str.w	r3, [r4, #99]	; 0x63
 800775a:	f8c4 3067 	str.w	r3, [r4, #103]	; 0x67
 800775e:	f8c4 306b 	str.w	r3, [r4, #107]	; 0x6b
 8007762:	f8c4 306f 	str.w	r3, [r4, #111]	; 0x6f
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8007766:	2325      	movs	r3, #37	; 0x25
 8007768:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800776c:	2301      	movs	r3, #1
 800776e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007772:	2302      	movs	r3, #2
 8007774:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8007778:	f104 0310 	add.w	r3, r4, #16
 800777c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      break;
 8007780:	e7df      	b.n	8007742 <USBH_MSC_SCSI_ReadCapacity+0x1a>
      error = USBH_MSC_BOT_Process(phost, lun);
 8007782:	4618      	mov	r0, r3
 8007784:	f7ff fe7e 	bl	8007484 <USBH_MSC_BOT_Process>
      if (error == USBH_OK)
 8007788:	2800      	cmp	r0, #0
 800778a:	d1da      	bne.n	8007742 <USBH_MSC_SCSI_ReadCapacity+0x1a>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800778c:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8007790:	78d3      	ldrb	r3, [r2, #3]
 8007792:	7891      	ldrb	r1, [r2, #2]
 8007794:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8007798:	7851      	ldrb	r1, [r2, #1]
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800779a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800779e:	7812      	ldrb	r2, [r2, #0]
 80077a0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 80077a4:	602b      	str	r3, [r5, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 80077a6:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80077aa:	79d3      	ldrb	r3, [r2, #7]
 80077ac:	7992      	ldrb	r2, [r2, #6]
 80077ae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80077b2:	80ab      	strh	r3, [r5, #4]
 80077b4:	e7c5      	b.n	8007742 <USBH_MSC_SCSI_ReadCapacity+0x1a>

080077b6 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 80077b6:	b570      	push	{r4, r5, r6, lr}
  USBH_StatusTypeDef error = USBH_FAIL;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80077b8:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 80077bc:	69dc      	ldr	r4, [r3, #28]

  switch (MSC_Handle->hbot.cmd_state)
 80077be:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 80077c2:	2d01      	cmp	r5, #1
 80077c4:	d005      	beq.n	80077d2 <USBH_MSC_SCSI_Inquiry+0x1c>
 80077c6:	4616      	mov	r6, r2
 80077c8:	2d02      	cmp	r5, #2
 80077ca:	d024      	beq.n	8007816 <USBH_MSC_SCSI_Inquiry+0x60>
 80077cc:	2502      	movs	r5, #2
    default:
      break;
  }

  return error;
}
 80077ce:	4628      	mov	r0, r5
 80077d0:	bd70      	pop	{r4, r5, r6, pc}
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 80077d2:	2224      	movs	r2, #36	; 0x24
 80077d4:	65e2      	str	r2, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80077d6:	2380      	movs	r3, #128	; 0x80
 80077d8:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80077dc:	230a      	movs	r3, #10
 80077de:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 80077e2:	2300      	movs	r3, #0
 80077e4:	f8c4 3063 	str.w	r3, [r4, #99]	; 0x63
 80077e8:	f8c4 3067 	str.w	r3, [r4, #103]	; 0x67
 80077ec:	f8a4 306b 	strh.w	r3, [r4, #107]	; 0x6b
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 80077f0:	2312      	movs	r3, #18
 80077f2:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 80077f6:	0149      	lsls	r1, r1, #5
 80077f8:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 80077fc:	f884 2067 	strb.w	r2, [r4, #103]	; 0x67
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007800:	2301      	movs	r3, #1
 8007802:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007806:	2302      	movs	r3, #2
 8007808:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800780c:	f104 0310 	add.w	r3, r4, #16
 8007810:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      break;
 8007814:	e7db      	b.n	80077ce <USBH_MSC_SCSI_Inquiry+0x18>
      error = USBH_MSC_BOT_Process(phost, lun);
 8007816:	f7ff fe35 	bl	8007484 <USBH_MSC_BOT_Process>
      if (error == USBH_OK)
 800781a:	4605      	mov	r5, r0
 800781c:	2800      	cmp	r0, #0
 800781e:	d1d6      	bne.n	80077ce <USBH_MSC_SCSI_Inquiry+0x18>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8007820:	2222      	movs	r2, #34	; 0x22
 8007822:	2100      	movs	r1, #0
 8007824:	4630      	mov	r0, r6
 8007826:	f001 fd6b 	bl	8009300 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800782a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800782e:	781b      	ldrb	r3, [r3, #0]
 8007830:	f003 031f 	and.w	r3, r3, #31
 8007834:	7073      	strb	r3, [r6, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 8007836:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800783a:	781b      	ldrb	r3, [r3, #0]
 800783c:	095b      	lsrs	r3, r3, #5
 800783e:	7033      	strb	r3, [r6, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 8007840:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8007844:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8007848:	2b00      	cmp	r3, #0
 800784a:	db17      	blt.n	800787c <USBH_MSC_SCSI_Inquiry+0xc6>
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800784c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8007850:	689a      	ldr	r2, [r3, #8]
 8007852:	68db      	ldr	r3, [r3, #12]
 8007854:	f8c6 2003 	str.w	r2, [r6, #3]
 8007858:	f8c6 3007 	str.w	r3, [r6, #7]
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800785c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8007860:	6918      	ldr	r0, [r3, #16]
 8007862:	6959      	ldr	r1, [r3, #20]
 8007864:	699a      	ldr	r2, [r3, #24]
 8007866:	69db      	ldr	r3, [r3, #28]
 8007868:	60f0      	str	r0, [r6, #12]
 800786a:	6131      	str	r1, [r6, #16]
 800786c:	6172      	str	r2, [r6, #20]
 800786e:	61b3      	str	r3, [r6, #24]
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8007870:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8007874:	6a1b      	ldr	r3, [r3, #32]
 8007876:	f8c6 301d 	str.w	r3, [r6, #29]
 800787a:	e7a8      	b.n	80077ce <USBH_MSC_SCSI_Inquiry+0x18>
          inquiry->RemovableMedia = 1U;
 800787c:	2301      	movs	r3, #1
 800787e:	70b3      	strb	r3, [r6, #2]
 8007880:	e7e4      	b.n	800784c <USBH_MSC_SCSI_Inquiry+0x96>

08007882 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 8007882:	b538      	push	{r3, r4, r5, lr}
 8007884:	4603      	mov	r3, r0
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007886:	f8d0 037c 	ldr.w	r0, [r0, #892]	; 0x37c
 800788a:	69c4      	ldr	r4, [r0, #28]

  switch (MSC_Handle->hbot.cmd_state)
 800788c:	f894 0052 	ldrb.w	r0, [r4, #82]	; 0x52
 8007890:	2801      	cmp	r0, #1
 8007892:	d004      	beq.n	800789e <USBH_MSC_SCSI_RequestSense+0x1c>
 8007894:	4615      	mov	r5, r2
 8007896:	2802      	cmp	r0, #2
 8007898:	d025      	beq.n	80078e6 <USBH_MSC_SCSI_RequestSense+0x64>
 800789a:	2002      	movs	r0, #2
    default:
      break;
  }

  return error;
}
 800789c:	bd38      	pop	{r3, r4, r5, pc}
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800789e:	220e      	movs	r2, #14
 80078a0:	65e2      	str	r2, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80078a2:	2380      	movs	r3, #128	; 0x80
 80078a4:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80078a8:	230a      	movs	r3, #10
 80078aa:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80078ae:	2300      	movs	r3, #0
 80078b0:	f8c4 3063 	str.w	r3, [r4, #99]	; 0x63
 80078b4:	f8c4 3067 	str.w	r3, [r4, #103]	; 0x67
 80078b8:	f8c4 306b 	str.w	r3, [r4, #107]	; 0x6b
 80078bc:	f8c4 306f 	str.w	r3, [r4, #111]	; 0x6f
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 80078c0:	2303      	movs	r3, #3
 80078c2:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 80078c6:	0149      	lsls	r1, r1, #5
 80078c8:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 80078cc:	f884 2067 	strb.w	r2, [r4, #103]	; 0x67
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80078d0:	2301      	movs	r3, #1
 80078d2:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80078d6:	2302      	movs	r3, #2
 80078d8:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80078dc:	f104 0310 	add.w	r3, r4, #16
 80078e0:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      break;
 80078e4:	e7da      	b.n	800789c <USBH_MSC_SCSI_RequestSense+0x1a>
      error = USBH_MSC_BOT_Process(phost, lun);
 80078e6:	4618      	mov	r0, r3
 80078e8:	f7ff fdcc 	bl	8007484 <USBH_MSC_BOT_Process>
      if (error == USBH_OK)
 80078ec:	2800      	cmp	r0, #0
 80078ee:	d1d5      	bne.n	800789c <USBH_MSC_SCSI_RequestSense+0x1a>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 80078f0:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80078f4:	789b      	ldrb	r3, [r3, #2]
 80078f6:	f003 030f 	and.w	r3, r3, #15
 80078fa:	702b      	strb	r3, [r5, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 80078fc:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8007900:	7b1b      	ldrb	r3, [r3, #12]
 8007902:	706b      	strb	r3, [r5, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8007904:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8007908:	7b5b      	ldrb	r3, [r3, #13]
 800790a:	70ab      	strb	r3, [r5, #2]
 800790c:	e7c6      	b.n	800789c <USBH_MSC_SCSI_RequestSense+0x1a>

0800790e <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800790e:	4684      	mov	ip, r0
  uint32_t i = 0U;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007910:	2300      	movs	r3, #0
 8007912:	e006      	b.n	8007922 <DeInitStateMachine+0x14>
  {
    phost->Pipes[i] = 0U;
 8007914:	f103 02e0 	add.w	r2, r3, #224	; 0xe0
 8007918:	eb0c 0282 	add.w	r2, ip, r2, lsl #2
 800791c:	2100      	movs	r1, #0
 800791e:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007920:	3301      	adds	r3, #1
 8007922:	2b0e      	cmp	r3, #14
 8007924:	d9f6      	bls.n	8007914 <DeInitStateMachine+0x6>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007926:	2300      	movs	r3, #0
 8007928:	e005      	b.n	8007936 <DeInitStateMachine+0x28>
  {
    phost->device.Data[i] = 0U;
 800792a:	eb0c 0203 	add.w	r2, ip, r3
 800792e:	2100      	movs	r1, #0
 8007930:	f882 111c 	strb.w	r1, [r2, #284]	; 0x11c
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007934:	3301      	adds	r3, #1
 8007936:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800793a:	d3f6      	bcc.n	800792a <DeInitStateMachine+0x1c>
  }

  phost->gState = HOST_IDLE;
 800793c:	2000      	movs	r0, #0
 800793e:	f88c 0000 	strb.w	r0, [ip]
  phost->EnumState = ENUM_IDLE;
 8007942:	f88c 0001 	strb.w	r0, [ip, #1]
  phost->RequestState = CMD_SEND;
 8007946:	2301      	movs	r3, #1
 8007948:	f88c 3002 	strb.w	r3, [ip, #2]
  phost->Timer = 0U;
 800794c:	f8cc 03c4 	str.w	r0, [ip, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007950:	f88c 3018 	strb.w	r3, [ip, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007954:	2240      	movs	r2, #64	; 0x40
 8007956:	f88c 2006 	strb.w	r2, [ip, #6]
  phost->Control.errorcount = 0U;
 800795a:	f88c 0019 	strb.w	r0, [ip, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800795e:	f88c 031c 	strb.w	r0, [ip, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8007962:	f88c 331d 	strb.w	r3, [ip, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007966:	f88c 031f 	strb.w	r0, [ip, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800796a:	f88c 031e 	strb.w	r0, [ip, #798]	; 0x31e

  return USBH_OK;
}
 800796e:	4770      	bx	lr

08007970 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007970:	b508      	push	{r3, lr}
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007972:	7803      	ldrb	r3, [r0, #0]
 8007974:	b2db      	uxtb	r3, r3
 8007976:	2b0b      	cmp	r3, #11
 8007978:	d000      	beq.n	800797c <USBH_HandleSof+0xc>
  {
    phost->pActiveClass->SOFProcess(phost);
  }
}
 800797a:	bd08      	pop	{r3, pc}
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800797c:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8007980:	2b00      	cmp	r3, #0
 8007982:	d0fa      	beq.n	800797a <USBH_HandleSof+0xa>
    phost->pActiveClass->SOFProcess(phost);
 8007984:	699b      	ldr	r3, [r3, #24]
 8007986:	4798      	blx	r3
}
 8007988:	e7f7      	b.n	800797a <USBH_HandleSof+0xa>

0800798a <USBH_HandleEnum>:
{
 800798a:	b570      	push	{r4, r5, r6, lr}
 800798c:	b084      	sub	sp, #16
 800798e:	4604      	mov	r4, r0
  switch (phost->EnumState)
 8007990:	7845      	ldrb	r5, [r0, #1]
 8007992:	2d07      	cmp	r5, #7
 8007994:	f200 812c 	bhi.w	8007bf0 <USBH_HandleEnum+0x266>
 8007998:	e8df f015 	tbh	[pc, r5, lsl #1]
 800799c:	00480008 	.word	0x00480008
 80079a0:	009a0069 	.word	0x009a0069
 80079a4:	00e500bf 	.word	0x00e500bf
 80079a8:	011700fe 	.word	0x011700fe
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80079ac:	2108      	movs	r1, #8
 80079ae:	f000 fcfd 	bl	80083ac <USBH_Get_DevDesc>
      if (ReqStatus == USBH_OK)
 80079b2:	b118      	cbz	r0, 80079bc <USBH_HandleEnum+0x32>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80079b4:	2803      	cmp	r0, #3
 80079b6:	d021      	beq.n	80079fc <USBH_HandleEnum+0x72>
  USBH_StatusTypeDef Status = USBH_BUSY;
 80079b8:	2501      	movs	r5, #1
 80079ba:	e109      	b.n	8007bd0 <USBH_HandleEnum+0x246>
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80079bc:	f894 332d 	ldrb.w	r3, [r4, #813]	; 0x32d
 80079c0:	71a3      	strb	r3, [r4, #6]
        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80079c2:	2501      	movs	r5, #1
 80079c4:	7065      	strb	r5, [r4, #1]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80079c6:	9302      	str	r3, [sp, #8]
 80079c8:	2600      	movs	r6, #0
 80079ca:	9601      	str	r6, [sp, #4]
 80079cc:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 80079d0:	9300      	str	r3, [sp, #0]
 80079d2:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 80079d6:	2280      	movs	r2, #128	; 0x80
 80079d8:	7921      	ldrb	r1, [r4, #4]
 80079da:	4620      	mov	r0, r4
 80079dc:	f000 fde5 	bl	80085aa <USBH_OpenPipe>
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80079e0:	79a3      	ldrb	r3, [r4, #6]
 80079e2:	9302      	str	r3, [sp, #8]
 80079e4:	9601      	str	r6, [sp, #4]
 80079e6:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 80079ea:	9300      	str	r3, [sp, #0]
 80079ec:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 80079f0:	4632      	mov	r2, r6
 80079f2:	7961      	ldrb	r1, [r4, #5]
 80079f4:	4620      	mov	r0, r4
 80079f6:	f000 fdd8 	bl	80085aa <USBH_OpenPipe>
 80079fa:	e0e9      	b.n	8007bd0 <USBH_HandleEnum+0x246>
        phost->device.EnumCnt++;
 80079fc:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 8007a00:	3301      	adds	r3, #1
 8007a02:	b2db      	uxtb	r3, r3
 8007a04:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007a08:	2b03      	cmp	r3, #3
 8007a0a:	d903      	bls.n	8007a14 <USBH_HandleEnum+0x8a>
          phost->gState = HOST_ABORT_STATE;
 8007a0c:	230d      	movs	r3, #13
 8007a0e:	7023      	strb	r3, [r4, #0]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007a10:	2501      	movs	r5, #1
 8007a12:	e0dd      	b.n	8007bd0 <USBH_HandleEnum+0x246>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007a14:	7961      	ldrb	r1, [r4, #5]
 8007a16:	4620      	mov	r0, r4
 8007a18:	f000 fdef 	bl	80085fa <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007a1c:	7921      	ldrb	r1, [r4, #4]
 8007a1e:	4620      	mov	r0, r4
 8007a20:	f000 fdeb 	bl	80085fa <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007a24:	2300      	movs	r3, #0
 8007a26:	7023      	strb	r3, [r4, #0]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007a28:	2501      	movs	r5, #1
 8007a2a:	e0d1      	b.n	8007bd0 <USBH_HandleEnum+0x246>
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007a2c:	2112      	movs	r1, #18
 8007a2e:	f000 fcbd 	bl	80083ac <USBH_Get_DevDesc>
      if (ReqStatus == USBH_OK)
 8007a32:	b910      	cbnz	r0, 8007a3a <USBH_HandleEnum+0xb0>
        phost->EnumState = ENUM_SET_ADDR;
 8007a34:	2302      	movs	r3, #2
 8007a36:	7063      	strb	r3, [r4, #1]
 8007a38:	e0ca      	b.n	8007bd0 <USBH_HandleEnum+0x246>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a3a:	2803      	cmp	r0, #3
 8007a3c:	f040 80c8 	bne.w	8007bd0 <USBH_HandleEnum+0x246>
        phost->device.EnumCnt++;
 8007a40:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 8007a44:	3301      	adds	r3, #1
 8007a46:	b2db      	uxtb	r3, r3
 8007a48:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007a4c:	2b03      	cmp	r3, #3
 8007a4e:	d902      	bls.n	8007a56 <USBH_HandleEnum+0xcc>
          phost->gState = HOST_ABORT_STATE;
 8007a50:	230d      	movs	r3, #13
 8007a52:	7023      	strb	r3, [r4, #0]
 8007a54:	e0bc      	b.n	8007bd0 <USBH_HandleEnum+0x246>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007a56:	7961      	ldrb	r1, [r4, #5]
 8007a58:	4620      	mov	r0, r4
 8007a5a:	f000 fdce 	bl	80085fa <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007a5e:	7921      	ldrb	r1, [r4, #4]
 8007a60:	4620      	mov	r0, r4
 8007a62:	f000 fdca 	bl	80085fa <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007a66:	2300      	movs	r3, #0
 8007a68:	7063      	strb	r3, [r4, #1]
          phost->gState = HOST_IDLE;
 8007a6a:	7023      	strb	r3, [r4, #0]
 8007a6c:	e0b0      	b.n	8007bd0 <USBH_HandleEnum+0x246>
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007a6e:	2101      	movs	r1, #1
 8007a70:	f000 fce6 	bl	8008440 <USBH_SetAddress>
      if (ReqStatus == USBH_OK)
 8007a74:	b118      	cbz	r0, 8007a7e <USBH_HandleEnum+0xf4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a76:	2803      	cmp	r0, #3
 8007a78:	d024      	beq.n	8007ac4 <USBH_HandleEnum+0x13a>
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007a7a:	2501      	movs	r5, #1
 8007a7c:	e0a8      	b.n	8007bd0 <USBH_HandleEnum+0x246>
        USBH_Delay(2U);
 8007a7e:	2002      	movs	r0, #2
 8007a80:	f001 f9d7 	bl	8008e32 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007a84:	2501      	movs	r5, #1
 8007a86:	f884 531c 	strb.w	r5, [r4, #796]	; 0x31c
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007a8a:	2303      	movs	r3, #3
 8007a8c:	7063      	strb	r3, [r4, #1]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007a8e:	79a3      	ldrb	r3, [r4, #6]
 8007a90:	9302      	str	r3, [sp, #8]
 8007a92:	2600      	movs	r6, #0
 8007a94:	9601      	str	r6, [sp, #4]
 8007a96:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 8007a9a:	9300      	str	r3, [sp, #0]
 8007a9c:	462b      	mov	r3, r5
 8007a9e:	2280      	movs	r2, #128	; 0x80
 8007aa0:	7921      	ldrb	r1, [r4, #4]
 8007aa2:	4620      	mov	r0, r4
 8007aa4:	f000 fd81 	bl	80085aa <USBH_OpenPipe>
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007aa8:	79a3      	ldrb	r3, [r4, #6]
 8007aaa:	9302      	str	r3, [sp, #8]
 8007aac:	9601      	str	r6, [sp, #4]
 8007aae:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 8007ab2:	9300      	str	r3, [sp, #0]
 8007ab4:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8007ab8:	4632      	mov	r2, r6
 8007aba:	7961      	ldrb	r1, [r4, #5]
 8007abc:	4620      	mov	r0, r4
 8007abe:	f000 fd74 	bl	80085aa <USBH_OpenPipe>
 8007ac2:	e085      	b.n	8007bd0 <USBH_HandleEnum+0x246>
        phost->gState = HOST_ABORT_STATE;
 8007ac4:	230d      	movs	r3, #13
 8007ac6:	7023      	strb	r3, [r4, #0]
        phost->EnumState = ENUM_IDLE;
 8007ac8:	2300      	movs	r3, #0
 8007aca:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007acc:	2501      	movs	r5, #1
 8007ace:	e07f      	b.n	8007bd0 <USBH_HandleEnum+0x246>
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007ad0:	2109      	movs	r1, #9
 8007ad2:	f000 fc84 	bl	80083de <USBH_Get_CfgDesc>
      if (ReqStatus == USBH_OK)
 8007ad6:	b918      	cbnz	r0, 8007ae0 <USBH_HandleEnum+0x156>
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007ad8:	2304      	movs	r3, #4
 8007ada:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007adc:	2501      	movs	r5, #1
 8007ade:	e077      	b.n	8007bd0 <USBH_HandleEnum+0x246>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007ae0:	2803      	cmp	r0, #3
 8007ae2:	d001      	beq.n	8007ae8 <USBH_HandleEnum+0x15e>
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007ae4:	2501      	movs	r5, #1
 8007ae6:	e073      	b.n	8007bd0 <USBH_HandleEnum+0x246>
        phost->device.EnumCnt++;
 8007ae8:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 8007aec:	3301      	adds	r3, #1
 8007aee:	b2db      	uxtb	r3, r3
 8007af0:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007af4:	2b03      	cmp	r3, #3
 8007af6:	d903      	bls.n	8007b00 <USBH_HandleEnum+0x176>
          phost->gState = HOST_ABORT_STATE;
 8007af8:	230d      	movs	r3, #13
 8007afa:	7023      	strb	r3, [r4, #0]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007afc:	2501      	movs	r5, #1
 8007afe:	e067      	b.n	8007bd0 <USBH_HandleEnum+0x246>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007b00:	7961      	ldrb	r1, [r4, #5]
 8007b02:	4620      	mov	r0, r4
 8007b04:	f000 fd79 	bl	80085fa <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007b08:	7921      	ldrb	r1, [r4, #4]
 8007b0a:	4620      	mov	r0, r4
 8007b0c:	f000 fd75 	bl	80085fa <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007b10:	2300      	movs	r3, #0
 8007b12:	7063      	strb	r3, [r4, #1]
          phost->gState = HOST_IDLE;
 8007b14:	7023      	strb	r3, [r4, #0]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007b16:	2501      	movs	r5, #1
 8007b18:	e05a      	b.n	8007bd0 <USBH_HandleEnum+0x246>
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007b1a:	f8b0 133a 	ldrh.w	r1, [r0, #826]	; 0x33a
 8007b1e:	f000 fc5e 	bl	80083de <USBH_Get_CfgDesc>
      if (ReqStatus == USBH_OK)
 8007b22:	b918      	cbnz	r0, 8007b2c <USBH_HandleEnum+0x1a2>
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007b24:	2305      	movs	r3, #5
 8007b26:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007b28:	2501      	movs	r5, #1
 8007b2a:	e051      	b.n	8007bd0 <USBH_HandleEnum+0x246>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b2c:	2803      	cmp	r0, #3
 8007b2e:	d001      	beq.n	8007b34 <USBH_HandleEnum+0x1aa>
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007b30:	2501      	movs	r5, #1
 8007b32:	e04d      	b.n	8007bd0 <USBH_HandleEnum+0x246>
        phost->device.EnumCnt++;
 8007b34:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 8007b38:	3301      	adds	r3, #1
 8007b3a:	b2db      	uxtb	r3, r3
 8007b3c:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007b40:	2b03      	cmp	r3, #3
 8007b42:	d903      	bls.n	8007b4c <USBH_HandleEnum+0x1c2>
          phost->gState = HOST_ABORT_STATE;
 8007b44:	230d      	movs	r3, #13
 8007b46:	7023      	strb	r3, [r4, #0]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007b48:	2501      	movs	r5, #1
 8007b4a:	e041      	b.n	8007bd0 <USBH_HandleEnum+0x246>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007b4c:	7961      	ldrb	r1, [r4, #5]
 8007b4e:	4620      	mov	r0, r4
 8007b50:	f000 fd53 	bl	80085fa <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007b54:	7921      	ldrb	r1, [r4, #4]
 8007b56:	4620      	mov	r0, r4
 8007b58:	f000 fd4f 	bl	80085fa <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	7063      	strb	r3, [r4, #1]
          phost->gState = HOST_IDLE;
 8007b60:	7023      	strb	r3, [r4, #0]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007b62:	2501      	movs	r5, #1
 8007b64:	e034      	b.n	8007bd0 <USBH_HandleEnum+0x246>
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007b66:	f890 1334 	ldrb.w	r1, [r0, #820]	; 0x334
 8007b6a:	b919      	cbnz	r1, 8007b74 <USBH_HandleEnum+0x1ea>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007b6c:	2306      	movs	r3, #6
 8007b6e:	7043      	strb	r3, [r0, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007b70:	2501      	movs	r5, #1
 8007b72:	e02d      	b.n	8007bd0 <USBH_HandleEnum+0x246>
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007b74:	23ff      	movs	r3, #255	; 0xff
 8007b76:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 8007b7a:	f000 fc49 	bl	8008410 <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
 8007b7e:	b918      	cbnz	r0, 8007b88 <USBH_HandleEnum+0x1fe>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007b80:	2306      	movs	r3, #6
 8007b82:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007b84:	2501      	movs	r5, #1
 8007b86:	e023      	b.n	8007bd0 <USBH_HandleEnum+0x246>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b88:	2803      	cmp	r0, #3
 8007b8a:	d001      	beq.n	8007b90 <USBH_HandleEnum+0x206>
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007b8c:	2501      	movs	r5, #1
 8007b8e:	e01f      	b.n	8007bd0 <USBH_HandleEnum+0x246>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007b90:	2306      	movs	r3, #6
 8007b92:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007b94:	2501      	movs	r5, #1
 8007b96:	e01b      	b.n	8007bd0 <USBH_HandleEnum+0x246>
      if (phost->device.DevDesc.iProduct != 0U)
 8007b98:	f890 1335 	ldrb.w	r1, [r0, #821]	; 0x335
 8007b9c:	b919      	cbnz	r1, 8007ba6 <USBH_HandleEnum+0x21c>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007b9e:	2307      	movs	r3, #7
 8007ba0:	7043      	strb	r3, [r0, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007ba2:	2501      	movs	r5, #1
 8007ba4:	e014      	b.n	8007bd0 <USBH_HandleEnum+0x246>
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007ba6:	23ff      	movs	r3, #255	; 0xff
 8007ba8:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 8007bac:	f000 fc30 	bl	8008410 <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
 8007bb0:	b918      	cbnz	r0, 8007bba <USBH_HandleEnum+0x230>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007bb2:	2307      	movs	r3, #7
 8007bb4:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007bb6:	2501      	movs	r5, #1
 8007bb8:	e00a      	b.n	8007bd0 <USBH_HandleEnum+0x246>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007bba:	2803      	cmp	r0, #3
 8007bbc:	d001      	beq.n	8007bc2 <USBH_HandleEnum+0x238>
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007bbe:	2501      	movs	r5, #1
 8007bc0:	e006      	b.n	8007bd0 <USBH_HandleEnum+0x246>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007bc2:	2307      	movs	r3, #7
 8007bc4:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007bc6:	2501      	movs	r5, #1
 8007bc8:	e002      	b.n	8007bd0 <USBH_HandleEnum+0x246>
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007bca:	f890 5336 	ldrb.w	r5, [r0, #822]	; 0x336
 8007bce:	b915      	cbnz	r5, 8007bd6 <USBH_HandleEnum+0x24c>
}
 8007bd0:	4628      	mov	r0, r5
 8007bd2:	b004      	add	sp, #16
 8007bd4:	bd70      	pop	{r4, r5, r6, pc}
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007bd6:	23ff      	movs	r3, #255	; 0xff
 8007bd8:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 8007bdc:	4629      	mov	r1, r5
 8007bde:	f000 fc17 	bl	8008410 <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
 8007be2:	4605      	mov	r5, r0
 8007be4:	2800      	cmp	r0, #0
 8007be6:	d0f3      	beq.n	8007bd0 <USBH_HandleEnum+0x246>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007be8:	2803      	cmp	r0, #3
 8007bea:	d003      	beq.n	8007bf4 <USBH_HandleEnum+0x26a>
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007bec:	2501      	movs	r5, #1
 8007bee:	e7ef      	b.n	8007bd0 <USBH_HandleEnum+0x246>
  switch (phost->EnumState)
 8007bf0:	2501      	movs	r5, #1
 8007bf2:	e7ed      	b.n	8007bd0 <USBH_HandleEnum+0x246>
          Status = USBH_OK;
 8007bf4:	2500      	movs	r5, #0
 8007bf6:	e7eb      	b.n	8007bd0 <USBH_HandleEnum+0x246>

08007bf8 <USBH_Init>:
  if (phost == NULL)
 8007bf8:	b1d8      	cbz	r0, 8007c32 <USBH_Init+0x3a>
{
 8007bfa:	b570      	push	{r4, r5, r6, lr}
 8007bfc:	460e      	mov	r6, r1
 8007bfe:	4604      	mov	r4, r0
  phost->id = id;
 8007c00:	f880 23cc 	strb.w	r2, [r0, #972]	; 0x3cc
  phost->pActiveClass = NULL;
 8007c04:	2500      	movs	r5, #0
 8007c06:	f8c0 537c 	str.w	r5, [r0, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007c0a:	f8c0 5380 	str.w	r5, [r0, #896]	; 0x380
  DeInitStateMachine(phost);
 8007c0e:	f7ff fe7e 	bl	800790e <DeInitStateMachine>
  phost->device.PortEnabled = 0U;
 8007c12:	f884 5323 	strb.w	r5, [r4, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007c16:	f884 5320 	strb.w	r5, [r4, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007c1a:	f884 5321 	strb.w	r5, [r4, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007c1e:	f884 5322 	strb.w	r5, [r4, #802]	; 0x322
  if (pUsrFunc != NULL)
 8007c22:	b10e      	cbz	r6, 8007c28 <USBH_Init+0x30>
    phost->pUser = pUsrFunc;
 8007c24:	f8c4 63d4 	str.w	r6, [r4, #980]	; 0x3d4
  USBH_LL_Init(phost);
 8007c28:	4620      	mov	r0, r4
 8007c2a:	f001 f883 	bl	8008d34 <USBH_LL_Init>
  return USBH_OK;
 8007c2e:	2000      	movs	r0, #0
}
 8007c30:	bd70      	pop	{r4, r5, r6, pc}
    return USBH_FAIL;
 8007c32:	2002      	movs	r0, #2
}
 8007c34:	4770      	bx	lr

08007c36 <USBH_RegisterClass>:
  if (pclass != NULL)
 8007c36:	460a      	mov	r2, r1
 8007c38:	b151      	cbz	r1, 8007c50 <USBH_RegisterClass+0x1a>
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007c3a:	f8d0 3380 	ldr.w	r3, [r0, #896]	; 0x380
 8007c3e:	b94b      	cbnz	r3, 8007c54 <USBH_RegisterClass+0x1e>
      phost->pClass[phost->ClassNumber++] = pclass;
 8007c40:	1c59      	adds	r1, r3, #1
 8007c42:	f8c0 1380 	str.w	r1, [r0, #896]	; 0x380
 8007c46:	33de      	adds	r3, #222	; 0xde
 8007c48:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      status = USBH_OK;
 8007c4c:	2000      	movs	r0, #0
 8007c4e:	4770      	bx	lr
    status = USBH_FAIL;
 8007c50:	2002      	movs	r0, #2
 8007c52:	4770      	bx	lr
      status = USBH_FAIL;
 8007c54:	2002      	movs	r0, #2
}
 8007c56:	4770      	bx	lr

08007c58 <USBH_SelectInterface>:
  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007c58:	f890 333c 	ldrb.w	r3, [r0, #828]	; 0x33c
 8007c5c:	428b      	cmp	r3, r1
 8007c5e:	d903      	bls.n	8007c68 <USBH_SelectInterface+0x10>
    phost->device.current_interface = interface;
 8007c60:	f880 1324 	strb.w	r1, [r0, #804]	; 0x324
  USBH_StatusTypeDef status = USBH_OK;
 8007c64:	2000      	movs	r0, #0
 8007c66:	4770      	bx	lr
    status = USBH_FAIL;
 8007c68:	2002      	movs	r0, #2
}
 8007c6a:	4770      	bx	lr

08007c6c <USBH_FindInterface>:
{
 8007c6c:	b510      	push	{r4, lr}
 8007c6e:	4604      	mov	r4, r0
  uint8_t if_ix = 0U;
 8007c70:	2000      	movs	r0, #0
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007c72:	e00b      	b.n	8007c8c <USBH_FindInterface+0x20>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007c74:	f04f 0c1a 	mov.w	ip, #26
 8007c78:	fb0c 4e0e 	mla	lr, ip, lr, r4
 8007c7c:	f89e c349 	ldrb.w	ip, [lr, #841]	; 0x349
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007c80:	459c      	cmp	ip, r3
 8007c82:	d01c      	beq.n	8007cbe <USBH_FindInterface+0x52>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007c84:	2bff      	cmp	r3, #255	; 0xff
 8007c86:	d01a      	beq.n	8007cbe <USBH_FindInterface+0x52>
    if_ix++;
 8007c88:	3001      	adds	r0, #1
 8007c8a:	b2c0      	uxtb	r0, r0
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007c8c:	2801      	cmp	r0, #1
 8007c8e:	d815      	bhi.n	8007cbc <USBH_FindInterface+0x50>
    pif = &pcfg->Itf_Desc[if_ix];
 8007c90:	4686      	mov	lr, r0
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007c92:	f04f 0c1a 	mov.w	ip, #26
 8007c96:	fb0c 4c00 	mla	ip, ip, r0, r4
 8007c9a:	f89c c347 	ldrb.w	ip, [ip, #839]	; 0x347
 8007c9e:	458c      	cmp	ip, r1
 8007ca0:	d001      	beq.n	8007ca6 <USBH_FindInterface+0x3a>
 8007ca2:	29ff      	cmp	r1, #255	; 0xff
 8007ca4:	d1f0      	bne.n	8007c88 <USBH_FindInterface+0x1c>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007ca6:	f04f 0c1a 	mov.w	ip, #26
 8007caa:	fb0c 4c0e 	mla	ip, ip, lr, r4
 8007cae:	f89c c348 	ldrb.w	ip, [ip, #840]	; 0x348
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007cb2:	4594      	cmp	ip, r2
 8007cb4:	d0de      	beq.n	8007c74 <USBH_FindInterface+0x8>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007cb6:	2aff      	cmp	r2, #255	; 0xff
 8007cb8:	d1e6      	bne.n	8007c88 <USBH_FindInterface+0x1c>
 8007cba:	e7db      	b.n	8007c74 <USBH_FindInterface+0x8>
  return 0xFFU;
 8007cbc:	20ff      	movs	r0, #255	; 0xff
}
 8007cbe:	bd10      	pop	{r4, pc}

08007cc0 <USBH_Start>:
{
 8007cc0:	b510      	push	{r4, lr}
 8007cc2:	4604      	mov	r4, r0
  USBH_LL_Start(phost);
 8007cc4:	f001 f8c3 	bl	8008e4e <USBH_LL_Start>
  USBH_LL_DriverVBUS(phost, TRUE);
 8007cc8:	2101      	movs	r1, #1
 8007cca:	4620      	mov	r0, r4
 8007ccc:	f001 f87a 	bl	8008dc4 <USBH_LL_DriverVBUS>
}
 8007cd0:	2000      	movs	r0, #0
 8007cd2:	bd10      	pop	{r4, pc}

08007cd4 <USBH_Process>:
{
 8007cd4:	b530      	push	{r4, r5, lr}
 8007cd6:	b087      	sub	sp, #28
 8007cd8:	4604      	mov	r4, r0
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007cda:	2302      	movs	r3, #2
 8007cdc:	f88d 3017 	strb.w	r3, [sp, #23]
  if (phost->device.is_disconnected == 1U)
 8007ce0:	f890 3321 	ldrb.w	r3, [r0, #801]	; 0x321
 8007ce4:	b2db      	uxtb	r3, r3
 8007ce6:	2b01      	cmp	r3, #1
 8007ce8:	d011      	beq.n	8007d0e <USBH_Process+0x3a>
  switch (phost->gState)
 8007cea:	7823      	ldrb	r3, [r4, #0]
 8007cec:	b2db      	uxtb	r3, r3
 8007cee:	2b0b      	cmp	r3, #11
 8007cf0:	d87b      	bhi.n	8007dea <USBH_Process+0x116>
 8007cf2:	e8df f013 	tbh	[pc, r3, lsl #1]
 8007cf6:	000f      	.short	0x000f
 8007cf8:	00450021 	.word	0x00450021
 8007cfc:	007a0105 	.word	0x007a0105
 8007d00:	00e3007d 	.word	0x00e3007d
 8007d04:	009c0092 	.word	0x009c0092
 8007d08:	00b700a6 	.word	0x00b700a6
 8007d0c:	00fc      	.short	0x00fc
    phost->gState = HOST_DEV_DISCONNECTED;
 8007d0e:	2303      	movs	r3, #3
 8007d10:	7003      	strb	r3, [r0, #0]
 8007d12:	e7ea      	b.n	8007cea <USBH_Process+0x16>
      if (phost->device.is_connected)
 8007d14:	f894 3320 	ldrb.w	r3, [r4, #800]	; 0x320
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d066      	beq.n	8007dea <USBH_Process+0x116>
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	7023      	strb	r3, [r4, #0]
        USBH_Delay(200U);
 8007d20:	20c8      	movs	r0, #200	; 0xc8
 8007d22:	f001 f886 	bl	8008e32 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8007d26:	4620      	mov	r0, r4
 8007d28:	f001 f8a1 	bl	8008e6e <USBH_LL_ResetPort>
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	f884 331c 	strb.w	r3, [r4, #796]	; 0x31c
        phost->Timeout = 0U;
 8007d32:	f8c4 33c8 	str.w	r3, [r4, #968]	; 0x3c8
 8007d36:	e058      	b.n	8007dea <USBH_Process+0x116>
      if (phost->device.PortEnabled == 1U)
 8007d38:	f894 3323 	ldrb.w	r3, [r4, #803]	; 0x323
 8007d3c:	2b01      	cmp	r3, #1
 8007d3e:	d00f      	beq.n	8007d60 <USBH_Process+0x8c>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007d40:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 8007d44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007d48:	d913      	bls.n	8007d72 <USBH_Process+0x9e>
          phost->device.RstCnt++;
 8007d4a:	f894 331f 	ldrb.w	r3, [r4, #799]	; 0x31f
 8007d4e:	3301      	adds	r3, #1
 8007d50:	b2db      	uxtb	r3, r3
 8007d52:	f884 331f 	strb.w	r3, [r4, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007d56:	2b03      	cmp	r3, #3
 8007d58:	d908      	bls.n	8007d6c <USBH_Process+0x98>
            phost->gState = HOST_ABORT_STATE;
 8007d5a:	230d      	movs	r3, #13
 8007d5c:	7023      	strb	r3, [r4, #0]
 8007d5e:	e044      	b.n	8007dea <USBH_Process+0x116>
        phost->device.RstCnt = 0U;
 8007d60:	2300      	movs	r3, #0
 8007d62:	f884 331f 	strb.w	r3, [r4, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007d66:	2302      	movs	r3, #2
 8007d68:	7023      	strb	r3, [r4, #0]
 8007d6a:	e03e      	b.n	8007dea <USBH_Process+0x116>
            phost->gState = HOST_IDLE;
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	7023      	strb	r3, [r4, #0]
 8007d70:	e03b      	b.n	8007dea <USBH_Process+0x116>
          phost->Timeout += 10U;
 8007d72:	330a      	adds	r3, #10
 8007d74:	f8c4 33c8 	str.w	r3, [r4, #968]	; 0x3c8
          USBH_Delay(10U);
 8007d78:	200a      	movs	r0, #10
 8007d7a:	f001 f85a 	bl	8008e32 <USBH_Delay>
 8007d7e:	e034      	b.n	8007dea <USBH_Process+0x116>
      if (phost->pUser != NULL)
 8007d80:	f8d4 33d4 	ldr.w	r3, [r4, #980]	; 0x3d4
 8007d84:	b113      	cbz	r3, 8007d8c <USBH_Process+0xb8>
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007d86:	2104      	movs	r1, #4
 8007d88:	4620      	mov	r0, r4
 8007d8a:	4798      	blx	r3
      USBH_Delay(100U);
 8007d8c:	2064      	movs	r0, #100	; 0x64
 8007d8e:	f001 f850 	bl	8008e32 <USBH_Delay>
      phost->device.speed = USBH_LL_GetSpeed(phost);
 8007d92:	4620      	mov	r0, r4
 8007d94:	f000 fffa 	bl	8008d8c <USBH_LL_GetSpeed>
 8007d98:	f884 031d 	strb.w	r0, [r4, #797]	; 0x31d
      phost->gState = HOST_ENUMERATION;
 8007d9c:	2305      	movs	r3, #5
 8007d9e:	7023      	strb	r3, [r4, #0]
      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007da0:	2100      	movs	r1, #0
 8007da2:	4620      	mov	r0, r4
 8007da4:	f000 fc16 	bl	80085d4 <USBH_AllocPipe>
 8007da8:	7160      	strb	r0, [r4, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007daa:	2180      	movs	r1, #128	; 0x80
 8007dac:	4620      	mov	r0, r4
 8007dae:	f000 fc11 	bl	80085d4 <USBH_AllocPipe>
 8007db2:	4601      	mov	r1, r0
 8007db4:	7120      	strb	r0, [r4, #4]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007db6:	79a3      	ldrb	r3, [r4, #6]
 8007db8:	9302      	str	r3, [sp, #8]
 8007dba:	2500      	movs	r5, #0
 8007dbc:	9501      	str	r5, [sp, #4]
 8007dbe:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 8007dc2:	9300      	str	r3, [sp, #0]
 8007dc4:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8007dc8:	2280      	movs	r2, #128	; 0x80
 8007dca:	4620      	mov	r0, r4
 8007dcc:	f000 fbed 	bl	80085aa <USBH_OpenPipe>
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007dd0:	79a3      	ldrb	r3, [r4, #6]
 8007dd2:	9302      	str	r3, [sp, #8]
 8007dd4:	9501      	str	r5, [sp, #4]
 8007dd6:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 8007dda:	9300      	str	r3, [sp, #0]
 8007ddc:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8007de0:	462a      	mov	r2, r5
 8007de2:	7961      	ldrb	r1, [r4, #5]
 8007de4:	4620      	mov	r0, r4
 8007de6:	f000 fbe0 	bl	80085aa <USBH_OpenPipe>
}
 8007dea:	2000      	movs	r0, #0
 8007dec:	b007      	add	sp, #28
 8007dee:	bd30      	pop	{r4, r5, pc}
      status = USBH_HandleEnum(phost);
 8007df0:	4620      	mov	r0, r4
 8007df2:	f7ff fdca 	bl	800798a <USBH_HandleEnum>
 8007df6:	f88d 0017 	strb.w	r0, [sp, #23]
      if (status == USBH_OK)
 8007dfa:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d1f3      	bne.n	8007dea <USBH_Process+0x116>
        phost->device.current_interface = 0U;
 8007e02:	f884 3324 	strb.w	r3, [r4, #804]	; 0x324
        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007e06:	f894 3337 	ldrb.w	r3, [r4, #823]	; 0x337
 8007e0a:	2b01      	cmp	r3, #1
 8007e0c:	d002      	beq.n	8007e14 <USBH_Process+0x140>
          phost->gState = HOST_INPUT;
 8007e0e:	2307      	movs	r3, #7
 8007e10:	7023      	strb	r3, [r4, #0]
 8007e12:	e7ea      	b.n	8007dea <USBH_Process+0x116>
          phost->gState = HOST_SET_CONFIGURATION;
 8007e14:	2308      	movs	r3, #8
 8007e16:	7023      	strb	r3, [r4, #0]
 8007e18:	e7e7      	b.n	8007dea <USBH_Process+0x116>
      if (phost->pUser != NULL)
 8007e1a:	f8d4 33d4 	ldr.w	r3, [r4, #980]	; 0x3d4
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d0e3      	beq.n	8007dea <USBH_Process+0x116>
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007e22:	2101      	movs	r1, #1
 8007e24:	4620      	mov	r0, r4
 8007e26:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007e28:	2308      	movs	r3, #8
 8007e2a:	7023      	strb	r3, [r4, #0]
 8007e2c:	e7dd      	b.n	8007dea <USBH_Process+0x116>
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007e2e:	f894 133d 	ldrb.w	r1, [r4, #829]	; 0x33d
 8007e32:	4620      	mov	r0, r4
 8007e34:	f000 fb15 	bl	8008462 <USBH_SetCfg>
 8007e38:	2800      	cmp	r0, #0
 8007e3a:	d1d6      	bne.n	8007dea <USBH_Process+0x116>
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007e3c:	2309      	movs	r3, #9
 8007e3e:	7023      	strb	r3, [r4, #0]
 8007e40:	e7d3      	b.n	8007dea <USBH_Process+0x116>
      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8007e42:	f894 333f 	ldrb.w	r3, [r4, #831]	; 0x33f
 8007e46:	f013 0f20 	tst.w	r3, #32
 8007e4a:	d102      	bne.n	8007e52 <USBH_Process+0x17e>
        phost->gState = HOST_CHECK_CLASS;
 8007e4c:	230a      	movs	r3, #10
 8007e4e:	7023      	strb	r3, [r4, #0]
 8007e50:	e7cb      	b.n	8007dea <USBH_Process+0x116>
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8007e52:	2101      	movs	r1, #1
 8007e54:	4620      	mov	r0, r4
 8007e56:	f000 fb15 	bl	8008484 <USBH_SetFeature>
 8007e5a:	2800      	cmp	r0, #0
 8007e5c:	d1c5      	bne.n	8007dea <USBH_Process+0x116>
          phost->gState = HOST_CHECK_CLASS;
 8007e5e:	230a      	movs	r3, #10
 8007e60:	7023      	strb	r3, [r4, #0]
 8007e62:	e7c2      	b.n	8007dea <USBH_Process+0x116>
      if (phost->ClassNumber == 0U)
 8007e64:	f8d4 3380 	ldr.w	r3, [r4, #896]	; 0x380
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d0be      	beq.n	8007dea <USBH_Process+0x116>
        phost->pActiveClass = NULL;
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	f8c4 337c 	str.w	r3, [r4, #892]	; 0x37c
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007e72:	b173      	cbz	r3, 8007e92 <USBH_Process+0x1be>
        if (phost->pActiveClass != NULL)
 8007e74:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 8007e78:	b1eb      	cbz	r3, 8007eb6 <USBH_Process+0x1e2>
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007e7a:	689b      	ldr	r3, [r3, #8]
 8007e7c:	4620      	mov	r0, r4
 8007e7e:	4798      	blx	r3
 8007e80:	b9b0      	cbnz	r0, 8007eb0 <USBH_Process+0x1dc>
            phost->gState = HOST_CLASS_REQUEST;
 8007e82:	2306      	movs	r3, #6
 8007e84:	7023      	strb	r3, [r4, #0]
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007e86:	f8d4 33d4 	ldr.w	r3, [r4, #980]	; 0x3d4
 8007e8a:	2103      	movs	r1, #3
 8007e8c:	4620      	mov	r0, r4
 8007e8e:	4798      	blx	r3
 8007e90:	e7ab      	b.n	8007dea <USBH_Process+0x116>
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007e92:	f103 02de 	add.w	r2, r3, #222	; 0xde
 8007e96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007e9a:	7910      	ldrb	r0, [r2, #4]
 8007e9c:	f894 1347 	ldrb.w	r1, [r4, #839]	; 0x347
 8007ea0:	4288      	cmp	r0, r1
 8007ea2:	d002      	beq.n	8007eaa <USBH_Process+0x1d6>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007ea4:	3301      	adds	r3, #1
 8007ea6:	b2db      	uxtb	r3, r3
 8007ea8:	e7e3      	b.n	8007e72 <USBH_Process+0x19e>
            phost->pActiveClass = phost->pClass[idx];
 8007eaa:	f8c4 237c 	str.w	r2, [r4, #892]	; 0x37c
            break;
 8007eae:	e7e1      	b.n	8007e74 <USBH_Process+0x1a0>
            phost->gState = HOST_ABORT_STATE;
 8007eb0:	230d      	movs	r3, #13
 8007eb2:	7023      	strb	r3, [r4, #0]
 8007eb4:	e799      	b.n	8007dea <USBH_Process+0x116>
          phost->gState = HOST_ABORT_STATE;
 8007eb6:	230d      	movs	r3, #13
 8007eb8:	7023      	strb	r3, [r4, #0]
 8007eba:	e796      	b.n	8007dea <USBH_Process+0x116>
      if (phost->pActiveClass != NULL)
 8007ebc:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 8007ec0:	b193      	cbz	r3, 8007ee8 <USBH_Process+0x214>
        status = phost->pActiveClass->Requests(phost);
 8007ec2:	691b      	ldr	r3, [r3, #16]
 8007ec4:	4620      	mov	r0, r4
 8007ec6:	4798      	blx	r3
 8007ec8:	f88d 0017 	strb.w	r0, [sp, #23]
        if (status == USBH_OK)
 8007ecc:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8007ed0:	b913      	cbnz	r3, 8007ed8 <USBH_Process+0x204>
          phost->gState = HOST_CLASS;
 8007ed2:	230b      	movs	r3, #11
 8007ed4:	7023      	strb	r3, [r4, #0]
 8007ed6:	e788      	b.n	8007dea <USBH_Process+0x116>
        else if (status == USBH_FAIL)
 8007ed8:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8007edc:	b2db      	uxtb	r3, r3
 8007ede:	2b02      	cmp	r3, #2
 8007ee0:	d183      	bne.n	8007dea <USBH_Process+0x116>
          phost->gState = HOST_ABORT_STATE;
 8007ee2:	230d      	movs	r3, #13
 8007ee4:	7023      	strb	r3, [r4, #0]
          USBH_ErrLog("Device not responding Please Unplug.");
 8007ee6:	e780      	b.n	8007dea <USBH_Process+0x116>
        phost->gState = HOST_ABORT_STATE;
 8007ee8:	230d      	movs	r3, #13
 8007eea:	7023      	strb	r3, [r4, #0]
 8007eec:	e77d      	b.n	8007dea <USBH_Process+0x116>
      if (phost->pActiveClass != NULL)
 8007eee:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	f43f af79 	beq.w	8007dea <USBH_Process+0x116>
        phost->pActiveClass->BgndProcess(phost);
 8007ef8:	695b      	ldr	r3, [r3, #20]
 8007efa:	4620      	mov	r0, r4
 8007efc:	4798      	blx	r3
 8007efe:	e774      	b.n	8007dea <USBH_Process+0x116>
      phost->device.is_disconnected = 0U;
 8007f00:	2300      	movs	r3, #0
 8007f02:	f884 3321 	strb.w	r3, [r4, #801]	; 0x321
      DeInitStateMachine(phost);
 8007f06:	4620      	mov	r0, r4
 8007f08:	f7ff fd01 	bl	800790e <DeInitStateMachine>
      if (phost->pActiveClass != NULL)
 8007f0c:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 8007f10:	b12b      	cbz	r3, 8007f1e <USBH_Process+0x24a>
        phost->pActiveClass->DeInit(phost);
 8007f12:	68db      	ldr	r3, [r3, #12]
 8007f14:	4620      	mov	r0, r4
 8007f16:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007f18:	2300      	movs	r3, #0
 8007f1a:	f8c4 337c 	str.w	r3, [r4, #892]	; 0x37c
      if (phost->pUser != NULL)
 8007f1e:	f8d4 33d4 	ldr.w	r3, [r4, #980]	; 0x3d4
 8007f22:	b113      	cbz	r3, 8007f2a <USBH_Process+0x256>
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007f24:	2105      	movs	r1, #5
 8007f26:	4620      	mov	r0, r4
 8007f28:	4798      	blx	r3
      if (phost->device.is_ReEnumerated == 1U)
 8007f2a:	f894 3322 	ldrb.w	r3, [r4, #802]	; 0x322
 8007f2e:	b2db      	uxtb	r3, r3
 8007f30:	2b01      	cmp	r3, #1
 8007f32:	d003      	beq.n	8007f3c <USBH_Process+0x268>
        USBH_LL_Start(phost);
 8007f34:	4620      	mov	r0, r4
 8007f36:	f000 ff8a 	bl	8008e4e <USBH_LL_Start>
 8007f3a:	e756      	b.n	8007dea <USBH_Process+0x116>
        phost->device.is_ReEnumerated = 0U;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	f884 3322 	strb.w	r3, [r4, #802]	; 0x322
        USBH_Start(phost);
 8007f42:	4620      	mov	r0, r4
 8007f44:	f7ff febc 	bl	8007cc0 <USBH_Start>
 8007f48:	e74f      	b.n	8007dea <USBH_Process+0x116>

08007f4a <USBH_LL_SetTimer>:
  phost->Timer = time;
 8007f4a:	f8c0 13c4 	str.w	r1, [r0, #964]	; 0x3c4
}
 8007f4e:	4770      	bx	lr

08007f50 <USBH_LL_IncTimer>:
{
 8007f50:	b508      	push	{r3, lr}
  phost->Timer++;
 8007f52:	f8d0 23c4 	ldr.w	r2, [r0, #964]	; 0x3c4
 8007f56:	3201      	adds	r2, #1
 8007f58:	f8c0 23c4 	str.w	r2, [r0, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007f5c:	f7ff fd08 	bl	8007970 <USBH_HandleSof>
}
 8007f60:	bd08      	pop	{r3, pc}

08007f62 <USBH_LL_PortEnabled>:
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
  phost->device.PortEnabled = 1U;
 8007f62:	2301      	movs	r3, #1
 8007f64:	f880 3323 	strb.w	r3, [r0, #803]	; 0x323
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
}
 8007f68:	4770      	bx	lr

08007f6a <USBH_LL_PortDisabled>:
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
  phost->device.PortEnabled = 0U;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	f880 3323 	strb.w	r3, [r0, #803]	; 0x323

  return;
}
 8007f70:	4770      	bx	lr

08007f72 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007f72:	4603      	mov	r3, r0
  phost->device.is_connected = 1U;
 8007f74:	2201      	movs	r2, #1
 8007f76:	f880 2320 	strb.w	r2, [r0, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007f7a:	2000      	movs	r0, #0
 8007f7c:	f883 0321 	strb.w	r0, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007f80:	f883 0322 	strb.w	r0, [r3, #802]	; 0x322
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
}
 8007f84:	4770      	bx	lr

08007f86 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007f86:	b538      	push	{r3, r4, r5, lr}
 8007f88:	4604      	mov	r4, r0
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	f880 3321 	strb.w	r3, [r0, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007f90:	2500      	movs	r5, #0
 8007f92:	f880 5320 	strb.w	r5, [r0, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007f96:	f880 5323 	strb.w	r5, [r0, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8007f9a:	f000 ff60 	bl	8008e5e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8007f9e:	7921      	ldrb	r1, [r4, #4]
 8007fa0:	4620      	mov	r0, r4
 8007fa2:	f000 fb2a 	bl	80085fa <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8007fa6:	7961      	ldrb	r1, [r4, #5]
 8007fa8:	4620      	mov	r0, r4
 8007faa:	f000 fb26 	bl	80085fa <USBH_FreePipe>
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
}
 8007fae:	4628      	mov	r0, r5
 8007fb0:	bd38      	pop	{r3, r4, r5, pc}

08007fb2 <USBH_ParseDevDesc>:
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007fb2:	780b      	ldrb	r3, [r1, #0]
 8007fb4:	7003      	strb	r3, [r0, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007fb6:	784b      	ldrb	r3, [r1, #1]
 8007fb8:	7043      	strb	r3, [r0, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007fba:	788b      	ldrb	r3, [r1, #2]
 8007fbc:	f891 c003 	ldrb.w	ip, [r1, #3]
 8007fc0:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8007fc4:	8043      	strh	r3, [r0, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007fc6:	790b      	ldrb	r3, [r1, #4]
 8007fc8:	7103      	strb	r3, [r0, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007fca:	794b      	ldrb	r3, [r1, #5]
 8007fcc:	7143      	strb	r3, [r0, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007fce:	798b      	ldrb	r3, [r1, #6]
 8007fd0:	7183      	strb	r3, [r0, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007fd2:	79cb      	ldrb	r3, [r1, #7]
 8007fd4:	71c3      	strb	r3, [r0, #7]

  if (length > 8U)
 8007fd6:	2a08      	cmp	r2, #8
 8007fd8:	d916      	bls.n	8008008 <USBH_ParseDevDesc+0x56>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007fda:	7a0b      	ldrb	r3, [r1, #8]
 8007fdc:	7a4a      	ldrb	r2, [r1, #9]
 8007fde:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007fe2:	8103      	strh	r3, [r0, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007fe4:	7a8b      	ldrb	r3, [r1, #10]
 8007fe6:	7aca      	ldrb	r2, [r1, #11]
 8007fe8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007fec:	8143      	strh	r3, [r0, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007fee:	7b0b      	ldrb	r3, [r1, #12]
 8007ff0:	7b4a      	ldrb	r2, [r1, #13]
 8007ff2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007ff6:	8183      	strh	r3, [r0, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007ff8:	7b8b      	ldrb	r3, [r1, #14]
 8007ffa:	7383      	strb	r3, [r0, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007ffc:	7bcb      	ldrb	r3, [r1, #15]
 8007ffe:	73c3      	strb	r3, [r0, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8008000:	7c0b      	ldrb	r3, [r1, #16]
 8008002:	7403      	strb	r3, [r0, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8008004:	7c4b      	ldrb	r3, [r1, #17]
 8008006:	7443      	strb	r3, [r0, #17]
  }
}
 8008008:	4770      	bx	lr

0800800a <USBH_ParseInterfaceDesc>:
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800800a:	780b      	ldrb	r3, [r1, #0]
 800800c:	7003      	strb	r3, [r0, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800800e:	784b      	ldrb	r3, [r1, #1]
 8008010:	7043      	strb	r3, [r0, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008012:	788b      	ldrb	r3, [r1, #2]
 8008014:	7083      	strb	r3, [r0, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008016:	78cb      	ldrb	r3, [r1, #3]
 8008018:	70c3      	strb	r3, [r0, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800801a:	790b      	ldrb	r3, [r1, #4]
 800801c:	7103      	strb	r3, [r0, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800801e:	794b      	ldrb	r3, [r1, #5]
 8008020:	7143      	strb	r3, [r0, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008022:	798b      	ldrb	r3, [r1, #6]
 8008024:	7183      	strb	r3, [r0, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008026:	79cb      	ldrb	r3, [r1, #7]
 8008028:	71c3      	strb	r3, [r0, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800802a:	7a0b      	ldrb	r3, [r1, #8]
 800802c:	7203      	strb	r3, [r0, #8]
}
 800802e:	4770      	bx	lr

08008030 <USBH_ParseEPDesc>:
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008030:	780b      	ldrb	r3, [r1, #0]
 8008032:	7003      	strb	r3, [r0, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008034:	784b      	ldrb	r3, [r1, #1]
 8008036:	7043      	strb	r3, [r0, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8008038:	788b      	ldrb	r3, [r1, #2]
 800803a:	7083      	strb	r3, [r0, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800803c:	78cb      	ldrb	r3, [r1, #3]
 800803e:	70c3      	strb	r3, [r0, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8008040:	790b      	ldrb	r3, [r1, #4]
 8008042:	794a      	ldrb	r2, [r1, #5]
 8008044:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008048:	8083      	strh	r3, [r0, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800804a:	798b      	ldrb	r3, [r1, #6]
 800804c:	7183      	strb	r3, [r0, #6]
}
 800804e:	4770      	bx	lr

08008050 <USBH_ParseStringDesc>:
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008050:	7843      	ldrb	r3, [r0, #1]
 8008052:	2b03      	cmp	r3, #3
 8008054:	d000      	beq.n	8008058 <USBH_ParseStringDesc+0x8>
      *pdest =  psrc[idx];
      pdest++;
    }
    *pdest = 0U; /* mark end of string */
  }
}
 8008056:	4770      	bx	lr
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008058:	7803      	ldrb	r3, [r0, #0]
 800805a:	3b02      	subs	r3, #2
 800805c:	429a      	cmp	r2, r3
 800805e:	bf28      	it	cs
 8008060:	461a      	movcs	r2, r3
 8008062:	b292      	uxth	r2, r2
    for (idx = 0U; idx < strlength; idx += 2U)
 8008064:	2300      	movs	r3, #0
 8008066:	e007      	b.n	8008078 <USBH_ParseStringDesc+0x28>
      *pdest =  psrc[idx];
 8008068:	eb00 0c03 	add.w	ip, r0, r3
 800806c:	f89c c002 	ldrb.w	ip, [ip, #2]
 8008070:	f801 cb01 	strb.w	ip, [r1], #1
    for (idx = 0U; idx < strlength; idx += 2U)
 8008074:	3302      	adds	r3, #2
 8008076:	b29b      	uxth	r3, r3
 8008078:	4293      	cmp	r3, r2
 800807a:	d3f5      	bcc.n	8008068 <USBH_ParseStringDesc+0x18>
    *pdest = 0U; /* mark end of string */
 800807c:	2300      	movs	r3, #0
 800807e:	700b      	strb	r3, [r1, #0]
}
 8008080:	e7e9      	b.n	8008056 <USBH_ParseStringDesc+0x6>

08008082 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008082:	b530      	push	{r4, r5, lr}
 8008084:	b083      	sub	sp, #12
 8008086:	4604      	mov	r4, r0
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;

  switch (phost->Control.state)
 8008088:	7e05      	ldrb	r5, [r0, #24]
 800808a:	1e6b      	subs	r3, r5, #1
 800808c:	2b0a      	cmp	r3, #10
 800808e:	f200 80de 	bhi.w	800824e <USBH_HandleControl+0x1cc>
 8008092:	e8df f003 	tbb	[pc, r3]
 8008096:	1006      	.short	0x1006
 8008098:	61544135 	.word	0x61544135
 800809c:	aa9d8a7e 	.word	0xaa9d8a7e
 80080a0:	c1          	.byte	0xc1
 80080a1:	00          	.byte	0x00
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80080a2:	7942      	ldrb	r2, [r0, #5]
 80080a4:	f100 0110 	add.w	r1, r0, #16
 80080a8:	f000 fa0f 	bl	80084ca <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80080ac:	2302      	movs	r3, #2
 80080ae:	7623      	strb	r3, [r4, #24]
    default:
      break;
  }

  return status;
}
 80080b0:	4628      	mov	r0, r5
 80080b2:	b003      	add	sp, #12
 80080b4:	bd30      	pop	{r4, r5, pc}
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80080b6:	7941      	ldrb	r1, [r0, #5]
 80080b8:	f000 fe7e 	bl	8008db8 <USBH_LL_GetURBState>
 80080bc:	4605      	mov	r5, r0
      if (URB_Status == USBH_URB_DONE)
 80080be:	2801      	cmp	r0, #1
 80080c0:	d005      	beq.n	80080ce <USBH_HandleControl+0x4c>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80080c2:	2804      	cmp	r0, #4
 80080c4:	d018      	beq.n	80080f8 <USBH_HandleControl+0x76>
 80080c6:	2802      	cmp	r0, #2
 80080c8:	d016      	beq.n	80080f8 <USBH_HandleControl+0x76>
  USBH_StatusTypeDef status = USBH_BUSY;
 80080ca:	2501      	movs	r5, #1
 80080cc:	e7f0      	b.n	80080b0 <USBH_HandleControl+0x2e>
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80080ce:	7c23      	ldrb	r3, [r4, #16]
        if (phost->Control.setup.b.wLength.w != 0U)
 80080d0:	8ae2      	ldrh	r2, [r4, #22]
 80080d2:	b142      	cbz	r2, 80080e6 <USBH_HandleControl+0x64>
          if (direction == USB_D2H)
 80080d4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80080d8:	d102      	bne.n	80080e0 <USBH_HandleControl+0x5e>
            phost->Control.state = CTRL_DATA_OUT;
 80080da:	2305      	movs	r3, #5
 80080dc:	7623      	strb	r3, [r4, #24]
 80080de:	e7e7      	b.n	80080b0 <USBH_HandleControl+0x2e>
            phost->Control.state = CTRL_DATA_IN;
 80080e0:	2303      	movs	r3, #3
 80080e2:	7623      	strb	r3, [r4, #24]
 80080e4:	e7e4      	b.n	80080b0 <USBH_HandleControl+0x2e>
          if (direction == USB_D2H)
 80080e6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80080ea:	d102      	bne.n	80080f2 <USBH_HandleControl+0x70>
            phost->Control.state = CTRL_STATUS_IN;
 80080ec:	2307      	movs	r3, #7
 80080ee:	7623      	strb	r3, [r4, #24]
 80080f0:	e7de      	b.n	80080b0 <USBH_HandleControl+0x2e>
            phost->Control.state = CTRL_STATUS_OUT;
 80080f2:	2309      	movs	r3, #9
 80080f4:	7623      	strb	r3, [r4, #24]
 80080f6:	e7db      	b.n	80080b0 <USBH_HandleControl+0x2e>
          phost->Control.state = CTRL_ERROR;
 80080f8:	230b      	movs	r3, #11
 80080fa:	7623      	strb	r3, [r4, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 80080fc:	2501      	movs	r5, #1
 80080fe:	e7d7      	b.n	80080b0 <USBH_HandleControl+0x2e>
      phost->Control.timer = (uint16_t)phost->Timer;
 8008100:	f8d0 33c4 	ldr.w	r3, [r0, #964]	; 0x3c4
 8008104:	81c3      	strh	r3, [r0, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8008106:	7903      	ldrb	r3, [r0, #4]
 8008108:	8982      	ldrh	r2, [r0, #12]
 800810a:	6881      	ldr	r1, [r0, #8]
 800810c:	f000 fa04 	bl	8008518 <USBH_CtlReceiveData>
      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008110:	2304      	movs	r3, #4
 8008112:	7623      	strb	r3, [r4, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008114:	2501      	movs	r5, #1
      break;
 8008116:	e7cb      	b.n	80080b0 <USBH_HandleControl+0x2e>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008118:	7901      	ldrb	r1, [r0, #4]
 800811a:	f000 fe4d 	bl	8008db8 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 800811e:	2801      	cmp	r0, #1
 8008120:	d006      	beq.n	8008130 <USBH_HandleControl+0xae>
      if (URB_Status == USBH_URB_STALL)
 8008122:	2805      	cmp	r0, #5
 8008124:	f000 8095 	beq.w	8008252 <USBH_HandleControl+0x1d0>
        if (URB_Status == USBH_URB_ERROR)
 8008128:	2804      	cmp	r0, #4
 800812a:	d004      	beq.n	8008136 <USBH_HandleControl+0xb4>
  USBH_StatusTypeDef status = USBH_BUSY;
 800812c:	2501      	movs	r5, #1
 800812e:	e7bf      	b.n	80080b0 <USBH_HandleControl+0x2e>
        phost->Control.state = CTRL_STATUS_OUT;
 8008130:	2309      	movs	r3, #9
 8008132:	7623      	strb	r3, [r4, #24]
 8008134:	e7f5      	b.n	8008122 <USBH_HandleControl+0xa0>
          phost->Control.state = CTRL_ERROR;
 8008136:	230b      	movs	r3, #11
 8008138:	7623      	strb	r3, [r4, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 800813a:	2501      	movs	r5, #1
 800813c:	e7b8      	b.n	80080b0 <USBH_HandleControl+0x2e>
      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800813e:	2501      	movs	r5, #1
 8008140:	9500      	str	r5, [sp, #0]
 8008142:	7943      	ldrb	r3, [r0, #5]
 8008144:	8982      	ldrh	r2, [r0, #12]
 8008146:	6881      	ldr	r1, [r0, #8]
 8008148:	f000 f9d0 	bl	80084ec <USBH_CtlSendData>
      phost->Control.timer = (uint16_t)phost->Timer;
 800814c:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 8008150:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008152:	2306      	movs	r3, #6
 8008154:	7623      	strb	r3, [r4, #24]
      break;
 8008156:	e7ab      	b.n	80080b0 <USBH_HandleControl+0x2e>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008158:	7941      	ldrb	r1, [r0, #5]
 800815a:	f000 fe2d 	bl	8008db8 <USBH_LL_GetURBState>
 800815e:	4605      	mov	r5, r0
      if (URB_Status == USBH_URB_DONE)
 8008160:	2801      	cmp	r0, #1
 8008162:	d007      	beq.n	8008174 <USBH_HandleControl+0xf2>
      else if (URB_Status == USBH_URB_STALL)
 8008164:	2805      	cmp	r0, #5
 8008166:	d008      	beq.n	800817a <USBH_HandleControl+0xf8>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008168:	2802      	cmp	r0, #2
 800816a:	d00a      	beq.n	8008182 <USBH_HandleControl+0x100>
        if (URB_Status == USBH_URB_ERROR)
 800816c:	2804      	cmp	r0, #4
 800816e:	d00c      	beq.n	800818a <USBH_HandleControl+0x108>
  USBH_StatusTypeDef status = USBH_BUSY;
 8008170:	2501      	movs	r5, #1
 8008172:	e79d      	b.n	80080b0 <USBH_HandleControl+0x2e>
        phost->Control.state = CTRL_STATUS_IN;
 8008174:	2307      	movs	r3, #7
 8008176:	7623      	strb	r3, [r4, #24]
 8008178:	e79a      	b.n	80080b0 <USBH_HandleControl+0x2e>
        phost->Control.state = CTRL_STALLED;
 800817a:	230c      	movs	r3, #12
 800817c:	7623      	strb	r3, [r4, #24]
        status = USBH_NOT_SUPPORTED;
 800817e:	2503      	movs	r5, #3
 8008180:	e796      	b.n	80080b0 <USBH_HandleControl+0x2e>
        phost->Control.state = CTRL_DATA_OUT;
 8008182:	2305      	movs	r3, #5
 8008184:	7623      	strb	r3, [r4, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008186:	2501      	movs	r5, #1
 8008188:	e792      	b.n	80080b0 <USBH_HandleControl+0x2e>
          phost->Control.state = CTRL_ERROR;
 800818a:	230b      	movs	r3, #11
 800818c:	7623      	strb	r3, [r4, #24]
          status = USBH_FAIL;
 800818e:	2502      	movs	r5, #2
 8008190:	e78e      	b.n	80080b0 <USBH_HandleControl+0x2e>
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8008192:	7903      	ldrb	r3, [r0, #4]
 8008194:	2200      	movs	r2, #0
 8008196:	4611      	mov	r1, r2
 8008198:	f000 f9be 	bl	8008518 <USBH_CtlReceiveData>
      phost->Control.timer = (uint16_t)phost->Timer;
 800819c:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 80081a0:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80081a2:	2308      	movs	r3, #8
 80081a4:	7623      	strb	r3, [r4, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 80081a6:	2501      	movs	r5, #1
      break;
 80081a8:	e782      	b.n	80080b0 <USBH_HandleControl+0x2e>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80081aa:	7901      	ldrb	r1, [r0, #4]
 80081ac:	f000 fe04 	bl	8008db8 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 80081b0:	2801      	cmp	r0, #1
 80081b2:	d005      	beq.n	80081c0 <USBH_HandleControl+0x13e>
      else if (URB_Status == USBH_URB_ERROR)
 80081b4:	2804      	cmp	r0, #4
 80081b6:	d007      	beq.n	80081c8 <USBH_HandleControl+0x146>
        if (URB_Status == USBH_URB_STALL)
 80081b8:	2805      	cmp	r0, #5
 80081ba:	d04c      	beq.n	8008256 <USBH_HandleControl+0x1d4>
  USBH_StatusTypeDef status = USBH_BUSY;
 80081bc:	2501      	movs	r5, #1
 80081be:	e777      	b.n	80080b0 <USBH_HandleControl+0x2e>
        phost->Control.state = CTRL_COMPLETE;
 80081c0:	230d      	movs	r3, #13
 80081c2:	7623      	strb	r3, [r4, #24]
        status = USBH_OK;
 80081c4:	2500      	movs	r5, #0
 80081c6:	e773      	b.n	80080b0 <USBH_HandleControl+0x2e>
        phost->Control.state = CTRL_ERROR;
 80081c8:	230b      	movs	r3, #11
 80081ca:	7623      	strb	r3, [r4, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 80081cc:	2501      	movs	r5, #1
 80081ce:	e76f      	b.n	80080b0 <USBH_HandleControl+0x2e>
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 80081d0:	2501      	movs	r5, #1
 80081d2:	9500      	str	r5, [sp, #0]
 80081d4:	7943      	ldrb	r3, [r0, #5]
 80081d6:	2200      	movs	r2, #0
 80081d8:	4611      	mov	r1, r2
 80081da:	f000 f987 	bl	80084ec <USBH_CtlSendData>
      phost->Control.timer = (uint16_t)phost->Timer;
 80081de:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 80081e2:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80081e4:	230a      	movs	r3, #10
 80081e6:	7623      	strb	r3, [r4, #24]
      break;
 80081e8:	e762      	b.n	80080b0 <USBH_HandleControl+0x2e>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80081ea:	7941      	ldrb	r1, [r0, #5]
 80081ec:	f000 fde4 	bl	8008db8 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 80081f0:	2801      	cmp	r0, #1
 80081f2:	d005      	beq.n	8008200 <USBH_HandleControl+0x17e>
      else if (URB_Status == USBH_URB_NOTREADY)
 80081f4:	2802      	cmp	r0, #2
 80081f6:	d007      	beq.n	8008208 <USBH_HandleControl+0x186>
        if (URB_Status == USBH_URB_ERROR)
 80081f8:	2804      	cmp	r0, #4
 80081fa:	d009      	beq.n	8008210 <USBH_HandleControl+0x18e>
  USBH_StatusTypeDef status = USBH_BUSY;
 80081fc:	2501      	movs	r5, #1
 80081fe:	e757      	b.n	80080b0 <USBH_HandleControl+0x2e>
        phost->Control.state = CTRL_COMPLETE;
 8008200:	230d      	movs	r3, #13
 8008202:	7623      	strb	r3, [r4, #24]
        status = USBH_OK;
 8008204:	2500      	movs	r5, #0
 8008206:	e753      	b.n	80080b0 <USBH_HandleControl+0x2e>
        phost->Control.state = CTRL_STATUS_OUT;
 8008208:	2309      	movs	r3, #9
 800820a:	7623      	strb	r3, [r4, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 800820c:	2501      	movs	r5, #1
 800820e:	e74f      	b.n	80080b0 <USBH_HandleControl+0x2e>
          phost->Control.state = CTRL_ERROR;
 8008210:	230b      	movs	r3, #11
 8008212:	7623      	strb	r3, [r4, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008214:	2501      	movs	r5, #1
 8008216:	e74b      	b.n	80080b0 <USBH_HandleControl+0x2e>
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008218:	7e43      	ldrb	r3, [r0, #25]
 800821a:	3301      	adds	r3, #1
 800821c:	b2db      	uxtb	r3, r3
 800821e:	7643      	strb	r3, [r0, #25]
 8008220:	2b02      	cmp	r3, #2
 8008222:	d803      	bhi.n	800822c <USBH_HandleControl+0x1aa>
        phost->Control.state = CTRL_SETUP;
 8008224:	2501      	movs	r5, #1
 8008226:	7605      	strb	r5, [r0, #24]
        phost->RequestState = CMD_SEND;
 8008228:	7085      	strb	r5, [r0, #2]
 800822a:	e741      	b.n	80080b0 <USBH_HandleControl+0x2e>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800822c:	f8d0 33d4 	ldr.w	r3, [r0, #980]	; 0x3d4
 8008230:	2106      	movs	r1, #6
 8008232:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008234:	2500      	movs	r5, #0
 8008236:	7665      	strb	r5, [r4, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8008238:	7961      	ldrb	r1, [r4, #5]
 800823a:	4620      	mov	r0, r4
 800823c:	f000 f9dd 	bl	80085fa <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8008240:	7921      	ldrb	r1, [r4, #4]
 8008242:	4620      	mov	r0, r4
 8008244:	f000 f9d9 	bl	80085fa <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008248:	7025      	strb	r5, [r4, #0]
        status = USBH_FAIL;
 800824a:	2502      	movs	r5, #2
 800824c:	e730      	b.n	80080b0 <USBH_HandleControl+0x2e>
  switch (phost->Control.state)
 800824e:	2501      	movs	r5, #1
 8008250:	e72e      	b.n	80080b0 <USBH_HandleControl+0x2e>
        status = USBH_NOT_SUPPORTED;
 8008252:	2503      	movs	r5, #3
 8008254:	e72c      	b.n	80080b0 <USBH_HandleControl+0x2e>
          status = USBH_NOT_SUPPORTED;
 8008256:	2503      	movs	r5, #3
 8008258:	e72a      	b.n	80080b0 <USBH_HandleControl+0x2e>

0800825a <USBH_GetNextDesc>:
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800825a:	7803      	ldrb	r3, [r0, #0]
 800825c:	880a      	ldrh	r2, [r1, #0]
 800825e:	4413      	add	r3, r2
 8008260:	800b      	strh	r3, [r1, #0]
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008262:	7803      	ldrb	r3, [r0, #0]
}
 8008264:	4418      	add	r0, r3
 8008266:	4770      	bx	lr

08008268 <USBH_ParseCfgDesc>:
{
 8008268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800826c:	b082      	sub	sp, #8
 800826e:	460c      	mov	r4, r1
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008270:	780b      	ldrb	r3, [r1, #0]
 8008272:	7003      	strb	r3, [r0, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8008274:	784b      	ldrb	r3, [r1, #1]
 8008276:	7043      	strb	r3, [r0, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8008278:	788b      	ldrb	r3, [r1, #2]
 800827a:	78c9      	ldrb	r1, [r1, #3]
 800827c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8008280:	8043      	strh	r3, [r0, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8008282:	7923      	ldrb	r3, [r4, #4]
 8008284:	7103      	strb	r3, [r0, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8008286:	7963      	ldrb	r3, [r4, #5]
 8008288:	7143      	strb	r3, [r0, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800828a:	79a3      	ldrb	r3, [r4, #6]
 800828c:	7183      	strb	r3, [r0, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800828e:	79e3      	ldrb	r3, [r4, #7]
 8008290:	71c3      	strb	r3, [r0, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008292:	7a23      	ldrb	r3, [r4, #8]
 8008294:	7203      	strb	r3, [r0, #8]
  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008296:	2a09      	cmp	r2, #9
 8008298:	d944      	bls.n	8008324 <USBH_ParseCfgDesc+0xbc>
 800829a:	4605      	mov	r5, r0
    ptr = USB_LEN_CFG_DESC;
 800829c:	2309      	movs	r3, #9
 800829e:	f8ad 3006 	strh.w	r3, [sp, #6]
  uint8_t                      if_ix = 0U;
 80082a2:	2600      	movs	r6, #0
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80082a4:	2e01      	cmp	r6, #1
 80082a6:	d83d      	bhi.n	8008324 <USBH_ParseCfgDesc+0xbc>
 80082a8:	886a      	ldrh	r2, [r5, #2]
 80082aa:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80082ae:	429a      	cmp	r2, r3
 80082b0:	d938      	bls.n	8008324 <USBH_ParseCfgDesc+0xbc>
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80082b2:	f10d 0106 	add.w	r1, sp, #6
 80082b6:	4620      	mov	r0, r4
 80082b8:	f7ff ffcf 	bl	800825a <USBH_GetNextDesc>
 80082bc:	4604      	mov	r4, r0
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 80082be:	7843      	ldrb	r3, [r0, #1]
 80082c0:	2b04      	cmp	r3, #4
 80082c2:	d1ef      	bne.n	80082a4 <USBH_ParseCfgDesc+0x3c>
        pif = &cfg_desc->Itf_Desc[if_ix];
 80082c4:	46b0      	mov	r8, r6
 80082c6:	201a      	movs	r0, #26
 80082c8:	fb06 f000 	mul.w	r0, r6, r0
 80082cc:	3008      	adds	r0, #8
 80082ce:	4428      	add	r0, r5
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80082d0:	4621      	mov	r1, r4
 80082d2:	3002      	adds	r0, #2
 80082d4:	f7ff fe99 	bl	800800a <USBH_ParseInterfaceDesc>
        ep_ix = 0U;
 80082d8:	2700      	movs	r7, #0
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80082da:	231a      	movs	r3, #26
 80082dc:	fb03 5308 	mla	r3, r3, r8, r5
 80082e0:	7b9b      	ldrb	r3, [r3, #14]
 80082e2:	42bb      	cmp	r3, r7
 80082e4:	d91b      	bls.n	800831e <USBH_ParseCfgDesc+0xb6>
 80082e6:	886a      	ldrh	r2, [r5, #2]
 80082e8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80082ec:	429a      	cmp	r2, r3
 80082ee:	d916      	bls.n	800831e <USBH_ParseCfgDesc+0xb6>
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80082f0:	f10d 0106 	add.w	r1, sp, #6
 80082f4:	4620      	mov	r0, r4
 80082f6:	f7ff ffb0 	bl	800825a <USBH_GetNextDesc>
 80082fa:	4604      	mov	r4, r0
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 80082fc:	7843      	ldrb	r3, [r0, #1]
 80082fe:	2b05      	cmp	r3, #5
 8008300:	d1eb      	bne.n	80082da <USBH_ParseCfgDesc+0x72>
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008302:	3701      	adds	r7, #1
 8008304:	201a      	movs	r0, #26
 8008306:	fb00 f008 	mul.w	r0, r0, r8
 800830a:	eb00 00c7 	add.w	r0, r0, r7, lsl #3
 800830e:	3008      	adds	r0, #8
 8008310:	4428      	add	r0, r5
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8008312:	4621      	mov	r1, r4
 8008314:	3004      	adds	r0, #4
 8008316:	f7ff fe8b 	bl	8008030 <USBH_ParseEPDesc>
            ep_ix++;
 800831a:	b2ff      	uxtb	r7, r7
 800831c:	e7dd      	b.n	80082da <USBH_ParseCfgDesc+0x72>
        if_ix++;
 800831e:	3601      	adds	r6, #1
 8008320:	b2f6      	uxtb	r6, r6
 8008322:	e7bf      	b.n	80082a4 <USBH_ParseCfgDesc+0x3c>
}
 8008324:	b002      	add	sp, #8
 8008326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800832a <USBH_CtlReq>:
{
 800832a:	b510      	push	{r4, lr}
 800832c:	4604      	mov	r4, r0
  switch (phost->RequestState)
 800832e:	7880      	ldrb	r0, [r0, #2]
 8008330:	2801      	cmp	r0, #1
 8008332:	d003      	beq.n	800833c <USBH_CtlReq+0x12>
 8008334:	2802      	cmp	r0, #2
 8008336:	d008      	beq.n	800834a <USBH_CtlReq+0x20>
 8008338:	2001      	movs	r0, #1
}
 800833a:	bd10      	pop	{r4, pc}
      phost->Control.buff = buff;
 800833c:	60a1      	str	r1, [r4, #8]
      phost->Control.length = length;
 800833e:	81a2      	strh	r2, [r4, #12]
      phost->Control.state = CTRL_SETUP;
 8008340:	2301      	movs	r3, #1
 8008342:	7623      	strb	r3, [r4, #24]
      phost->RequestState = CMD_WAIT;
 8008344:	2302      	movs	r3, #2
 8008346:	70a3      	strb	r3, [r4, #2]
      break;
 8008348:	e7f7      	b.n	800833a <USBH_CtlReq+0x10>
      status = USBH_HandleControl(phost);
 800834a:	4620      	mov	r0, r4
 800834c:	f7ff fe99 	bl	8008082 <USBH_HandleControl>
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008350:	b130      	cbz	r0, 8008360 <USBH_CtlReq+0x36>
 8008352:	2803      	cmp	r0, #3
 8008354:	d004      	beq.n	8008360 <USBH_CtlReq+0x36>
      else if (status == USBH_FAIL)
 8008356:	2802      	cmp	r0, #2
 8008358:	d1ef      	bne.n	800833a <USBH_CtlReq+0x10>
        phost->RequestState = CMD_SEND;
 800835a:	2301      	movs	r3, #1
 800835c:	70a3      	strb	r3, [r4, #2]
 800835e:	e7ec      	b.n	800833a <USBH_CtlReq+0x10>
        phost->RequestState = CMD_SEND;
 8008360:	2301      	movs	r3, #1
 8008362:	70a3      	strb	r3, [r4, #2]
        phost->Control.state = CTRL_IDLE;
 8008364:	2300      	movs	r3, #0
 8008366:	7623      	strb	r3, [r4, #24]
 8008368:	e7e7      	b.n	800833a <USBH_CtlReq+0x10>

0800836a <USBH_GetDescriptor>:
{
 800836a:	b508      	push	{r3, lr}
 800836c:	468e      	mov	lr, r1
 800836e:	4694      	mov	ip, r2
 8008370:	4619      	mov	r1, r3
 8008372:	f8bd 2008 	ldrh.w	r2, [sp, #8]
  if (phost->RequestState == CMD_SEND)
 8008376:	7883      	ldrb	r3, [r0, #2]
 8008378:	2b01      	cmp	r3, #1
 800837a:	d002      	beq.n	8008382 <USBH_GetDescriptor+0x18>
  return USBH_CtlReq(phost, buff, length);
 800837c:	f7ff ffd5 	bl	800832a <USBH_CtlReq>
}
 8008380:	bd08      	pop	{r3, pc}
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008382:	f06e 0e7f 	orn	lr, lr, #127	; 0x7f
 8008386:	f880 e010 	strb.w	lr, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800838a:	2306      	movs	r3, #6
 800838c:	7443      	strb	r3, [r0, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800838e:	f8a0 c012 	strh.w	ip, [r0, #18]
    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008392:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8008396:	f5bc 7f40 	cmp.w	ip, #768	; 0x300
 800839a:	d003      	beq.n	80083a4 <USBH_GetDescriptor+0x3a>
      phost->Control.setup.b.wIndex.w = 0U;
 800839c:	2300      	movs	r3, #0
 800839e:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = length;
 80083a0:	82c2      	strh	r2, [r0, #22]
 80083a2:	e7eb      	b.n	800837c <USBH_GetDescriptor+0x12>
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80083a4:	f240 4309 	movw	r3, #1033	; 0x409
 80083a8:	8283      	strh	r3, [r0, #20]
 80083aa:	e7f9      	b.n	80083a0 <USBH_GetDescriptor+0x36>

080083ac <USBH_Get_DevDesc>:
{
 80083ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083ae:	b083      	sub	sp, #12
 80083b0:	4604      	mov	r4, r0
                                   USB_DESC_DEVICE, phost->device.Data,
 80083b2:	f500 768e 	add.w	r6, r0, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80083b6:	460d      	mov	r5, r1
 80083b8:	9100      	str	r1, [sp, #0]
 80083ba:	4633      	mov	r3, r6
 80083bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80083c0:	2100      	movs	r1, #0
 80083c2:	f7ff ffd2 	bl	800836a <USBH_GetDescriptor>
 80083c6:	4607      	mov	r7, r0
 80083c8:	b110      	cbz	r0, 80083d0 <USBH_Get_DevDesc+0x24>
}
 80083ca:	4638      	mov	r0, r7
 80083cc:	b003      	add	sp, #12
 80083ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80083d0:	462a      	mov	r2, r5
 80083d2:	4631      	mov	r1, r6
 80083d4:	f204 3026 	addw	r0, r4, #806	; 0x326
 80083d8:	f7ff fdeb 	bl	8007fb2 <USBH_ParseDevDesc>
 80083dc:	e7f5      	b.n	80083ca <USBH_Get_DevDesc+0x1e>

080083de <USBH_Get_CfgDesc>:
{
 80083de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083e0:	b083      	sub	sp, #12
 80083e2:	4604      	mov	r4, r0
 80083e4:	460d      	mov	r5, r1
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 80083e6:	f100 061c 	add.w	r6, r0, #28
  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80083ea:	9100      	str	r1, [sp, #0]
 80083ec:	4633      	mov	r3, r6
 80083ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80083f2:	2100      	movs	r1, #0
 80083f4:	f7ff ffb9 	bl	800836a <USBH_GetDescriptor>
 80083f8:	4607      	mov	r7, r0
 80083fa:	b110      	cbz	r0, 8008402 <USBH_Get_CfgDesc+0x24>
}
 80083fc:	4638      	mov	r0, r7
 80083fe:	b003      	add	sp, #12
 8008400:	bdf0      	pop	{r4, r5, r6, r7, pc}
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8008402:	462a      	mov	r2, r5
 8008404:	4631      	mov	r1, r6
 8008406:	f504 704e 	add.w	r0, r4, #824	; 0x338
 800840a:	f7ff ff2d 	bl	8008268 <USBH_ParseCfgDesc>
 800840e:	e7f5      	b.n	80083fc <USBH_Get_CfgDesc+0x1e>

08008410 <USBH_Get_StringDesc>:
{
 8008410:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008412:	b083      	sub	sp, #12
 8008414:	4616      	mov	r6, r2
 8008416:	461d      	mov	r5, r3
                                   phost->device.Data, length)) == USBH_OK)
 8008418:	f500 748e 	add.w	r4, r0, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800841c:	9300      	str	r3, [sp, #0]
 800841e:	4623      	mov	r3, r4
 8008420:	f441 7240 	orr.w	r2, r1, #768	; 0x300
 8008424:	2100      	movs	r1, #0
 8008426:	f7ff ffa0 	bl	800836a <USBH_GetDescriptor>
 800842a:	4607      	mov	r7, r0
 800842c:	b110      	cbz	r0, 8008434 <USBH_Get_StringDesc+0x24>
}
 800842e:	4638      	mov	r0, r7
 8008430:	b003      	add	sp, #12
 8008432:	bdf0      	pop	{r4, r5, r6, r7, pc}
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008434:	462a      	mov	r2, r5
 8008436:	4631      	mov	r1, r6
 8008438:	4620      	mov	r0, r4
 800843a:	f7ff fe09 	bl	8008050 <USBH_ParseStringDesc>
 800843e:	e7f6      	b.n	800842e <USBH_Get_StringDesc+0x1e>

08008440 <USBH_SetAddress>:
{
 8008440:	b508      	push	{r3, lr}
  if (phost->RequestState == CMD_SEND)
 8008442:	7883      	ldrb	r3, [r0, #2]
 8008444:	2b01      	cmp	r3, #1
 8008446:	d004      	beq.n	8008452 <USBH_SetAddress+0x12>
  return USBH_CtlReq(phost, 0U, 0U);
 8008448:	2200      	movs	r2, #0
 800844a:	4611      	mov	r1, r2
 800844c:	f7ff ff6d 	bl	800832a <USBH_CtlReq>
}
 8008450:	bd08      	pop	{r3, pc}
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008452:	2300      	movs	r3, #0
 8008454:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008456:	2205      	movs	r2, #5
 8008458:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800845a:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800845c:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800845e:	82c3      	strh	r3, [r0, #22]
 8008460:	e7f2      	b.n	8008448 <USBH_SetAddress+0x8>

08008462 <USBH_SetCfg>:
{
 8008462:	b508      	push	{r3, lr}
  if (phost->RequestState == CMD_SEND)
 8008464:	7883      	ldrb	r3, [r0, #2]
 8008466:	2b01      	cmp	r3, #1
 8008468:	d004      	beq.n	8008474 <USBH_SetCfg+0x12>
  return USBH_CtlReq(phost, 0U, 0U);
 800846a:	2200      	movs	r2, #0
 800846c:	4611      	mov	r1, r2
 800846e:	f7ff ff5c 	bl	800832a <USBH_CtlReq>
}
 8008472:	bd08      	pop	{r3, pc}
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008474:	2300      	movs	r3, #0
 8008476:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008478:	2209      	movs	r2, #9
 800847a:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800847c:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800847e:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008480:	82c3      	strh	r3, [r0, #22]
 8008482:	e7f2      	b.n	800846a <USBH_SetCfg+0x8>

08008484 <USBH_SetFeature>:
{
 8008484:	b508      	push	{r3, lr}
  if (phost->RequestState == CMD_SEND)
 8008486:	7883      	ldrb	r3, [r0, #2]
 8008488:	2b01      	cmp	r3, #1
 800848a:	d004      	beq.n	8008496 <USBH_SetFeature+0x12>
  return USBH_CtlReq(phost, 0U, 0U);
 800848c:	2200      	movs	r2, #0
 800848e:	4611      	mov	r1, r2
 8008490:	f7ff ff4b 	bl	800832a <USBH_CtlReq>
}
 8008494:	bd08      	pop	{r3, pc}
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008496:	2300      	movs	r3, #0
 8008498:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800849a:	2203      	movs	r2, #3
 800849c:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800849e:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80084a0:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80084a2:	82c3      	strh	r3, [r0, #22]
 80084a4:	e7f2      	b.n	800848c <USBH_SetFeature+0x8>

080084a6 <USBH_ClrFeature>:
{
 80084a6:	b508      	push	{r3, lr}
  if (phost->RequestState == CMD_SEND)
 80084a8:	7883      	ldrb	r3, [r0, #2]
 80084aa:	2b01      	cmp	r3, #1
 80084ac:	d004      	beq.n	80084b8 <USBH_ClrFeature+0x12>
  return USBH_CtlReq(phost, 0U, 0U);
 80084ae:	2200      	movs	r2, #0
 80084b0:	4611      	mov	r1, r2
 80084b2:	f7ff ff3a 	bl	800832a <USBH_CtlReq>
}
 80084b6:	bd08      	pop	{r3, pc}
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80084b8:	2302      	movs	r3, #2
 80084ba:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80084bc:	2301      	movs	r3, #1
 80084be:	7443      	strb	r3, [r0, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80084c0:	2300      	movs	r3, #0
 80084c2:	8243      	strh	r3, [r0, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80084c4:	8281      	strh	r1, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80084c6:	82c3      	strh	r3, [r0, #22]
 80084c8:	e7f1      	b.n	80084ae <USBH_ClrFeature+0x8>

080084ca <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80084ca:	b510      	push	{r4, lr}
 80084cc:	b084      	sub	sp, #16
 80084ce:	460b      	mov	r3, r1
 80084d0:	4611      	mov	r1, r2

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80084d2:	2400      	movs	r4, #0
 80084d4:	9403      	str	r4, [sp, #12]
 80084d6:	2208      	movs	r2, #8
 80084d8:	9202      	str	r2, [sp, #8]
 80084da:	9301      	str	r3, [sp, #4]
 80084dc:	9400      	str	r4, [sp, #0]
 80084de:	4623      	mov	r3, r4
 80084e0:	4622      	mov	r2, r4
 80084e2:	f000 fce7 	bl	8008eb4 <USBH_LL_SubmitURB>
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
}
 80084e6:	4620      	mov	r0, r4
 80084e8:	b004      	add	sp, #16
 80084ea:	bd10      	pop	{r4, pc}

080084ec <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80084ec:	b530      	push	{r4, r5, lr}
 80084ee:	b085      	sub	sp, #20
 80084f0:	460c      	mov	r4, r1
 80084f2:	4619      	mov	r1, r3
 80084f4:	f89d 3020 	ldrb.w	r3, [sp, #32]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80084f8:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
 80084fc:	b105      	cbz	r5, 8008500 <USBH_CtlSendData+0x14>
  {
    do_ping = 0U;
 80084fe:	2300      	movs	r3, #0
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008500:	9303      	str	r3, [sp, #12]
 8008502:	9202      	str	r2, [sp, #8]
 8008504:	9401      	str	r4, [sp, #4]
 8008506:	2301      	movs	r3, #1
 8008508:	9300      	str	r3, [sp, #0]
 800850a:	2300      	movs	r3, #0
 800850c:	461a      	mov	r2, r3
 800850e:	f000 fcd1 	bl	8008eb4 <USBH_LL_SubmitURB>
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
}
 8008512:	2000      	movs	r0, #0
 8008514:	b005      	add	sp, #20
 8008516:	bd30      	pop	{r4, r5, pc}

08008518 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008518:	b530      	push	{r4, r5, lr}
 800851a:	b085      	sub	sp, #20
 800851c:	460d      	mov	r5, r1
 800851e:	4619      	mov	r1, r3
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008520:	2400      	movs	r4, #0
 8008522:	9403      	str	r4, [sp, #12]
 8008524:	9202      	str	r2, [sp, #8]
 8008526:	9501      	str	r5, [sp, #4]
 8008528:	2201      	movs	r2, #1
 800852a:	9200      	str	r2, [sp, #0]
 800852c:	4623      	mov	r3, r4
 800852e:	f000 fcc1 	bl	8008eb4 <USBH_LL_SubmitURB>
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;

}
 8008532:	4620      	mov	r0, r4
 8008534:	b005      	add	sp, #20
 8008536:	bd30      	pop	{r4, r5, pc}

08008538 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008538:	b530      	push	{r4, r5, lr}
 800853a:	b085      	sub	sp, #20
 800853c:	460c      	mov	r4, r1
 800853e:	4619      	mov	r1, r3
 8008540:	f89d 3020 	ldrb.w	r3, [sp, #32]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008544:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
 8008548:	b105      	cbz	r5, 800854c <USBH_BulkSendData+0x14>
  {
    do_ping = 0U;
 800854a:	2300      	movs	r3, #0
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800854c:	9303      	str	r3, [sp, #12]
 800854e:	9202      	str	r2, [sp, #8]
 8008550:	9401      	str	r4, [sp, #4]
 8008552:	2301      	movs	r3, #1
 8008554:	9300      	str	r3, [sp, #0]
 8008556:	2302      	movs	r3, #2
 8008558:	2200      	movs	r2, #0
 800855a:	f000 fcab 	bl	8008eb4 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
}
 800855e:	2000      	movs	r0, #0
 8008560:	b005      	add	sp, #20
 8008562:	bd30      	pop	{r4, r5, pc}

08008564 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008564:	b530      	push	{r4, r5, lr}
 8008566:	b085      	sub	sp, #20
 8008568:	460d      	mov	r5, r1
 800856a:	4619      	mov	r1, r3
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800856c:	2400      	movs	r4, #0
 800856e:	9403      	str	r4, [sp, #12]
 8008570:	9202      	str	r2, [sp, #8]
 8008572:	9501      	str	r5, [sp, #4]
 8008574:	2201      	movs	r2, #1
 8008576:	9200      	str	r2, [sp, #0]
 8008578:	2302      	movs	r3, #2
 800857a:	f000 fc9b 	bl	8008eb4 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
}
 800857e:	4620      	mov	r0, r4
 8008580:	b005      	add	sp, #20
 8008582:	bd30      	pop	{r4, r5, pc}

08008584 <USBH_GetFreePipe>:
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
  uint8_t idx = 0U;

  for (idx = 0U ; idx < 11U ; idx++)
 8008584:	2300      	movs	r3, #0
 8008586:	2b0a      	cmp	r3, #10
 8008588:	d80c      	bhi.n	80085a4 <USBH_GetFreePipe+0x20>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800858a:	f103 02e0 	add.w	r2, r3, #224	; 0xe0
 800858e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8008592:	6852      	ldr	r2, [r2, #4]
 8008594:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8008598:	d002      	beq.n	80085a0 <USBH_GetFreePipe+0x1c>
  for (idx = 0U ; idx < 11U ; idx++)
 800859a:	3301      	adds	r3, #1
 800859c:	b2db      	uxtb	r3, r3
 800859e:	e7f2      	b.n	8008586 <USBH_GetFreePipe+0x2>
    {
      return (uint16_t)idx;
 80085a0:	b298      	uxth	r0, r3
 80085a2:	4770      	bx	lr
    }
  }

  return 0xFFFFU;
 80085a4:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 80085a8:	4770      	bx	lr

080085aa <USBH_OpenPipe>:
{
 80085aa:	b510      	push	{r4, lr}
 80085ac:	b084      	sub	sp, #16
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80085ae:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 80085b2:	9402      	str	r4, [sp, #8]
 80085b4:	f89d 401c 	ldrb.w	r4, [sp, #28]
 80085b8:	9401      	str	r4, [sp, #4]
 80085ba:	f89d 4018 	ldrb.w	r4, [sp, #24]
 80085be:	9400      	str	r4, [sp, #0]
 80085c0:	f000 fc5d 	bl	8008e7e <USBH_LL_OpenPipe>
}
 80085c4:	2000      	movs	r0, #0
 80085c6:	b004      	add	sp, #16
 80085c8:	bd10      	pop	{r4, pc}

080085ca <USBH_ClosePipe>:
{
 80085ca:	b508      	push	{r3, lr}
  USBH_LL_ClosePipe(phost, pipe_num);
 80085cc:	f000 fc6a 	bl	8008ea4 <USBH_LL_ClosePipe>
}
 80085d0:	2000      	movs	r0, #0
 80085d2:	bd08      	pop	{r3, pc}

080085d4 <USBH_AllocPipe>:
{
 80085d4:	b538      	push	{r3, r4, r5, lr}
 80085d6:	4604      	mov	r4, r0
 80085d8:	460d      	mov	r5, r1
  pipe =  USBH_GetFreePipe(phost);
 80085da:	f7ff ffd3 	bl	8008584 <USBH_GetFreePipe>
  if (pipe != 0xFFFFU)
 80085de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80085e2:	4298      	cmp	r0, r3
 80085e4:	d007      	beq.n	80085f6 <USBH_AllocPipe+0x22>
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 80085e6:	f000 030f 	and.w	r3, r0, #15
 80085ea:	f445 4500 	orr.w	r5, r5, #32768	; 0x8000
 80085ee:	33e0      	adds	r3, #224	; 0xe0
 80085f0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80085f4:	605d      	str	r5, [r3, #4]
}
 80085f6:	b2c0      	uxtb	r0, r0
 80085f8:	bd38      	pop	{r3, r4, r5, pc}

080085fa <USBH_FreePipe>:
  if (idx < 11U)
 80085fa:	290a      	cmp	r1, #10
 80085fc:	d806      	bhi.n	800860c <USBH_FreePipe+0x12>
    phost->Pipes[idx] &= 0x7FFFU;
 80085fe:	31e0      	adds	r1, #224	; 0xe0
 8008600:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8008604:	6843      	ldr	r3, [r0, #4]
 8008606:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800860a:	6043      	str	r3, [r0, #4]
}
 800860c:	2000      	movs	r0, #0
 800860e:	4770      	bx	lr

08008610 <Scheduler_Tasks>:
	tTask * t = (tTask *)Queue_Peek(&Scheduler.Tasks,Task_ID - 1);
	Task_Add_Heap_Size(Task_ID, t);
}

static void Scheduler_Tasks(void * task_data)
{
 8008610:	b510      	push	{r4, lr}
#ifdef USE_CONSOLE
	static bool Console_Commands_Added = false;
	if(!Console_Commands_Added)
 8008612:	4b21      	ldr	r3, [pc, #132]	; (8008698 <Scheduler_Tasks+0x88>)
 8008614:	781b      	ldrb	r3, [r3, #0]
 8008616:	b10b      	cbz	r3, 800861c <Scheduler_Tasks+0xc>
{
 8008618:	2400      	movs	r4, #0
 800861a:	e037      	b.n	800868c <Scheduler_Tasks+0x7c>
	{
		Add_Console_Top_Level_Command("proc", "Display and modify Scheduler processes", Display_Processes, NULL);
 800861c:	4c1f      	ldr	r4, [pc, #124]	; (800869c <Scheduler_Tasks+0x8c>)
 800861e:	4622      	mov	r2, r4
 8008620:	491f      	ldr	r1, [pc, #124]	; (80086a0 <Scheduler_Tasks+0x90>)
 8008622:	4820      	ldr	r0, [pc, #128]	; (80086a4 <Scheduler_Tasks+0x94>)
 8008624:	f7fe fb56 	bl	8006cd4 <Add_Console_Top_Level_Command>
		Add_Console_Complete_Command("proc help", Display_Console_Help, NULL);
 8008628:	2200      	movs	r2, #0
 800862a:	491f      	ldr	r1, [pc, #124]	; (80086a8 <Scheduler_Tasks+0x98>)
 800862c:	481f      	ldr	r0, [pc, #124]	; (80086ac <Scheduler_Tasks+0x9c>)
 800862e:	f7fe fb95 	bl	8006d5c <Add_Console_Complete_Command>
		Add_Console_Repeat_Command("proc over", Display_Processes, NULL, 1000);
 8008632:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008636:	2200      	movs	r2, #0
 8008638:	4621      	mov	r1, r4
 800863a:	481d      	ldr	r0, [pc, #116]	; (80086b0 <Scheduler_Tasks+0xa0>)
 800863c:	f7fe fbe6 	bl	8006e0c <Add_Console_Repeat_Command>
		Add_Console_Partial_Command("proc halt ", Halt_Process, NULL);
 8008640:	2200      	movs	r2, #0
 8008642:	491c      	ldr	r1, [pc, #112]	; (80086b4 <Scheduler_Tasks+0xa4>)
 8008644:	481c      	ldr	r0, [pc, #112]	; (80086b8 <Scheduler_Tasks+0xa8>)
 8008646:	f7fe fbb5 	bl	8006db4 <Add_Console_Partial_Command>
		Add_Console_Partial_Command("proc resume ", Resume_Process, NULL);
 800864a:	2200      	movs	r2, #0
 800864c:	491b      	ldr	r1, [pc, #108]	; (80086bc <Scheduler_Tasks+0xac>)
 800864e:	481c      	ldr	r0, [pc, #112]	; (80086c0 <Scheduler_Tasks+0xb0>)
 8008650:	f7fe fbb0 	bl	8006db4 <Add_Console_Partial_Command>
		Console_Commands_Added = true;
 8008654:	4b10      	ldr	r3, [pc, #64]	; (8008698 <Scheduler_Tasks+0x88>)
 8008656:	2201      	movs	r2, #1
 8008658:	701a      	strb	r2, [r3, #0]
 800865a:	e7dd      	b.n	8008618 <Scheduler_Tasks+0x8>

	tTask * task;
	uint32_t counter = 0;
	for(; counter < Scheduler.Tasks.Size; counter++)
	{
		task = (tTask *)Queue_Peek(&Scheduler.Tasks,counter);
 800865c:	4621      	mov	r1, r4
 800865e:	4819      	ldr	r0, [pc, #100]	; (80086c4 <Scheduler_Tasks+0xb4>)
 8008660:	f7fe fc5a 	bl	8006f18 <Queue_Peek>

		float percent = (float)task->Task_Running_Time / 1000.0;
 8008664:	edd0 7a04 	vldr	s15, [r0, #16]
 8008668:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800866c:	eddf 6a16 	vldr	s13, [pc, #88]	; 80086c8 <Scheduler_Tasks+0xb8>
 8008670:	eec7 7a26 	vdiv.f32	s15, s14, s13
		task->Task_Running_Percentage = percent * 100;
 8008674:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80086cc <Scheduler_Tasks+0xbc>
 8008678:	ee67 7a87 	vmul.f32	s15, s15, s14
 800867c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008680:	ee17 3a90 	vmov	r3, s15
 8008684:	7503      	strb	r3, [r0, #20]

		task->Task_Running_Time = 0;
 8008686:	2300      	movs	r3, #0
 8008688:	6103      	str	r3, [r0, #16]
	for(; counter < Scheduler.Tasks.Size; counter++)
 800868a:	3401      	adds	r4, #1
 800868c:	4b0d      	ldr	r3, [pc, #52]	; (80086c4 <Scheduler_Tasks+0xb4>)
 800868e:	689b      	ldr	r3, [r3, #8]
 8008690:	42a3      	cmp	r3, r4
 8008692:	d8e3      	bhi.n	800865c <Scheduler_Tasks+0x4c>
	}
}
 8008694:	bd10      	pop	{r4, pc}
 8008696:	bf00      	nop
 8008698:	20000da8 	.word	0x20000da8
 800869c:	08008855 	.word	0x08008855
 80086a0:	0800e2dc 	.word	0x0800e2dc
 80086a4:	0800e304 	.word	0x0800e304
 80086a8:	080086d1 	.word	0x080086d1
 80086ac:	0800e30c 	.word	0x0800e30c
 80086b0:	0800e318 	.word	0x0800e318
 80086b4:	080087ed 	.word	0x080087ed
 80086b8:	0800e324 	.word	0x0800e324
 80086bc:	08008799 	.word	0x08008799
 80086c0:	0800e330 	.word	0x0800e330
 80086c4:	20000dac 	.word	0x20000dac
 80086c8:	447a0000 	.word	0x447a0000
 80086cc:	42c80000 	.word	0x42c80000

080086d0 <Display_Console_Help>:
}

#ifdef USE_CONSOLE

static void Display_Console_Help(void * Data)
{
 80086d0:	b508      	push	{r3, lr}
	printf("\t\t- Available Commands -\r\n\r\n");
 80086d2:	4809      	ldr	r0, [pc, #36]	; (80086f8 <Display_Console_Help+0x28>)
 80086d4:	f001 fe0c 	bl	800a2f0 <puts>
	printf("proc: \t\t\tDisplay all the Scheduler process information.\r\n");
 80086d8:	4808      	ldr	r0, [pc, #32]	; (80086fc <Display_Console_Help+0x2c>)
 80086da:	f001 fe09 	bl	800a2f0 <puts>
	printf("proc over: \t\tContinuously display all the Scheduler process information.\r\n");
 80086de:	4808      	ldr	r0, [pc, #32]	; (8008700 <Display_Console_Help+0x30>)
 80086e0:	f001 fe06 	bl	800a2f0 <puts>
	printf("proc halt [PID]: \tHalt a running process.\r\n");
 80086e4:	4807      	ldr	r0, [pc, #28]	; (8008704 <Display_Console_Help+0x34>)
 80086e6:	f001 fe03 	bl	800a2f0 <puts>
	printf("proc resume [PID]: \tResume a halted process.\r\n");
 80086ea:	4807      	ldr	r0, [pc, #28]	; (8008708 <Display_Console_Help+0x38>)
 80086ec:	f001 fe00 	bl	800a2f0 <puts>
	printf("proc help: \t\tDisplay this help message.\r\n");
 80086f0:	4806      	ldr	r0, [pc, #24]	; (800870c <Display_Console_Help+0x3c>)
 80086f2:	f001 fdfd 	bl	800a2f0 <puts>
}
 80086f6:	bd08      	pop	{r3, pc}
 80086f8:	0800e340 	.word	0x0800e340
 80086fc:	0800e35c 	.word	0x0800e35c
 8008700:	0800e398 	.word	0x0800e398
 8008704:	0800e3e4 	.word	0x0800e3e4
 8008708:	0800e410 	.word	0x0800e410
 800870c:	0800e440 	.word	0x0800e440

08008710 <Run_Scheduler_Tasks>:
	if(Scheduler.Tasks.Size > 0)
 8008710:	4b15      	ldr	r3, [pc, #84]	; (8008768 <Run_Scheduler_Tasks+0x58>)
 8008712:	689b      	ldr	r3, [r3, #8]
 8008714:	bb23      	cbnz	r3, 8008760 <Run_Scheduler_Tasks+0x50>
 8008716:	4770      	bx	lr
				task->Start_Time = HAL_GetTick();
 8008718:	f7f9 fe5c 	bl	80023d4 <HAL_GetTick>
 800871c:	6060      	str	r0, [r4, #4]
		for(; counter < Scheduler.Tasks.Size; counter++)
 800871e:	3501      	adds	r5, #1
 8008720:	4b11      	ldr	r3, [pc, #68]	; (8008768 <Run_Scheduler_Tasks+0x58>)
 8008722:	689b      	ldr	r3, [r3, #8]
 8008724:	42ab      	cmp	r3, r5
 8008726:	d91e      	bls.n	8008766 <Run_Scheduler_Tasks+0x56>
			task = (tTask *)Queue_Peek(&Scheduler.Tasks,counter);
 8008728:	4629      	mov	r1, r5
 800872a:	480f      	ldr	r0, [pc, #60]	; (8008768 <Run_Scheduler_Tasks+0x58>)
 800872c:	f7fe fbf4 	bl	8006f18 <Queue_Peek>
 8008730:	4604      	mov	r4, r0
			if((HAL_GetTick() - task->Start_Time) > task->Timeout)
 8008732:	f7f9 fe4f 	bl	80023d4 <HAL_GetTick>
 8008736:	6863      	ldr	r3, [r4, #4]
 8008738:	1ac0      	subs	r0, r0, r3
 800873a:	68a3      	ldr	r3, [r4, #8]
 800873c:	4298      	cmp	r0, r3
 800873e:	d9ee      	bls.n	800871e <Run_Scheduler_Tasks+0xe>
				if(!task->Task_Halted)
 8008740:	7b23      	ldrb	r3, [r4, #12]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d1e8      	bne.n	8008718 <Run_Scheduler_Tasks+0x8>
					uint32_t start = HAL_GetTick();
 8008746:	f7f9 fe45 	bl	80023d4 <HAL_GetTick>
 800874a:	4606      	mov	r6, r0
					task->Task_Exe(task->Task_Data);
 800874c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800874e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8008750:	4798      	blx	r3
					uint32_t stop = HAL_GetTick();
 8008752:	f7f9 fe3f 	bl	80023d4 <HAL_GetTick>
					task->Task_Running_Time += (stop - start);
 8008756:	1b80      	subs	r0, r0, r6
 8008758:	6923      	ldr	r3, [r4, #16]
 800875a:	4403      	add	r3, r0
 800875c:	6123      	str	r3, [r4, #16]
 800875e:	e7db      	b.n	8008718 <Run_Scheduler_Tasks+0x8>
{
 8008760:	b570      	push	{r4, r5, r6, lr}
		uint32_t counter = 0;
 8008762:	2500      	movs	r5, #0
 8008764:	e7dc      	b.n	8008720 <Run_Scheduler_Tasks+0x10>
}
 8008766:	bd70      	pop	{r4, r5, r6, pc}
 8008768:	20000dac 	.word	0x20000dac

0800876c <Resume_Task>:
{
 800876c:	b538      	push	{r3, r4, r5, lr}
 800876e:	4605      	mov	r5, r0
	uint32_t counter = 0;
 8008770:	2400      	movs	r4, #0
	for(; counter < Scheduler.Tasks.Size; counter++)
 8008772:	e000      	b.n	8008776 <Resume_Task+0xa>
 8008774:	3401      	adds	r4, #1
 8008776:	4b07      	ldr	r3, [pc, #28]	; (8008794 <Resume_Task+0x28>)
 8008778:	689b      	ldr	r3, [r3, #8]
 800877a:	42a3      	cmp	r3, r4
 800877c:	d908      	bls.n	8008790 <Resume_Task+0x24>
		t = (tTask *)Queue_Peek(&Scheduler.Tasks,counter);
 800877e:	4621      	mov	r1, r4
 8008780:	4804      	ldr	r0, [pc, #16]	; (8008794 <Resume_Task+0x28>)
 8008782:	f7fe fbc9 	bl	8006f18 <Queue_Peek>
		if(t->TID == task)
 8008786:	6803      	ldr	r3, [r0, #0]
 8008788:	42ab      	cmp	r3, r5
 800878a:	d1f3      	bne.n	8008774 <Resume_Task+0x8>
			t->Task_Halted = 0;
 800878c:	2300      	movs	r3, #0
 800878e:	7303      	strb	r3, [r0, #12]
}
 8008790:	bd38      	pop	{r3, r4, r5, pc}
 8008792:	bf00      	nop
 8008794:	20000dac 	.word	0x20000dac

08008798 <Resume_Process>:
	Halt_Task((uint32_t)process_id);
	printf("Process %d Halted\r\n", process_id);
}

static void Resume_Process(uint8_t * Console_Buff, void * Data)
{
 8008798:	b500      	push	{lr}
 800879a:	b083      	sub	sp, #12
	int process_id;
	sscanf((char *)Console_Buff, "proc resume %d", &process_id);
 800879c:	aa01      	add	r2, sp, #4
 800879e:	4906      	ldr	r1, [pc, #24]	; (80087b8 <Resume_Process+0x20>)
 80087a0:	f001 fde4 	bl	800a36c <siscanf>

	Resume_Task((uint32_t)process_id);
 80087a4:	9801      	ldr	r0, [sp, #4]
 80087a6:	f7ff ffe1 	bl	800876c <Resume_Task>
	printf("Process %d Resumed\r\n", process_id);
 80087aa:	9901      	ldr	r1, [sp, #4]
 80087ac:	4803      	ldr	r0, [pc, #12]	; (80087bc <Resume_Process+0x24>)
 80087ae:	f001 fd19 	bl	800a1e4 <iprintf>
}
 80087b2:	b003      	add	sp, #12
 80087b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80087b8:	0800e46c 	.word	0x0800e46c
 80087bc:	0800e47c 	.word	0x0800e47c

080087c0 <Halt_Task>:
{
 80087c0:	b538      	push	{r3, r4, r5, lr}
 80087c2:	4605      	mov	r5, r0
	uint32_t counter = 0;
 80087c4:	2400      	movs	r4, #0
	for(; counter < Scheduler.Tasks.Size; counter++)
 80087c6:	e000      	b.n	80087ca <Halt_Task+0xa>
 80087c8:	3401      	adds	r4, #1
 80087ca:	4b07      	ldr	r3, [pc, #28]	; (80087e8 <Halt_Task+0x28>)
 80087cc:	689b      	ldr	r3, [r3, #8]
 80087ce:	42a3      	cmp	r3, r4
 80087d0:	d908      	bls.n	80087e4 <Halt_Task+0x24>
		t = (tTask *)Queue_Peek(&Scheduler.Tasks,counter);
 80087d2:	4621      	mov	r1, r4
 80087d4:	4804      	ldr	r0, [pc, #16]	; (80087e8 <Halt_Task+0x28>)
 80087d6:	f7fe fb9f 	bl	8006f18 <Queue_Peek>
		if(t->TID == task)
 80087da:	6803      	ldr	r3, [r0, #0]
 80087dc:	42ab      	cmp	r3, r5
 80087de:	d1f3      	bne.n	80087c8 <Halt_Task+0x8>
			t->Task_Halted = 1;
 80087e0:	2301      	movs	r3, #1
 80087e2:	7303      	strb	r3, [r0, #12]
}
 80087e4:	bd38      	pop	{r3, r4, r5, pc}
 80087e6:	bf00      	nop
 80087e8:	20000dac 	.word	0x20000dac

080087ec <Halt_Process>:
{
 80087ec:	b500      	push	{lr}
 80087ee:	b083      	sub	sp, #12
	sscanf((char *)Console_Buff, "proc halt %d", &process_id);
 80087f0:	aa01      	add	r2, sp, #4
 80087f2:	4906      	ldr	r1, [pc, #24]	; (800880c <Halt_Process+0x20>)
 80087f4:	f001 fdba 	bl	800a36c <siscanf>
	Halt_Task((uint32_t)process_id);
 80087f8:	9801      	ldr	r0, [sp, #4]
 80087fa:	f7ff ffe1 	bl	80087c0 <Halt_Task>
	printf("Process %d Halted\r\n", process_id);
 80087fe:	9901      	ldr	r1, [sp, #4]
 8008800:	4803      	ldr	r0, [pc, #12]	; (8008810 <Halt_Process+0x24>)
 8008802:	f001 fcef 	bl	800a1e4 <iprintf>
}
 8008806:	b003      	add	sp, #12
 8008808:	f85d fb04 	ldr.w	pc, [sp], #4
 800880c:	0800e494 	.word	0x0800e494
 8008810:	0800e4a4 	.word	0x0800e4a4

08008814 <Set_Task_Name>:
{
 8008814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008816:	4606      	mov	r6, r0
 8008818:	460f      	mov	r7, r1
	uint32_t counter = 0;
 800881a:	2400      	movs	r4, #0
	for(; counter < Scheduler.Tasks.Size; counter++)
 800881c:	e000      	b.n	8008820 <Set_Task_Name+0xc>
 800881e:	3401      	adds	r4, #1
 8008820:	4b09      	ldr	r3, [pc, #36]	; (8008848 <Set_Task_Name+0x34>)
 8008822:	689b      	ldr	r3, [r3, #8]
 8008824:	42a3      	cmp	r3, r4
 8008826:	d90e      	bls.n	8008846 <Set_Task_Name+0x32>
		t = (tTask *)Queue_Peek(&Scheduler.Tasks,counter);
 8008828:	4621      	mov	r1, r4
 800882a:	4807      	ldr	r0, [pc, #28]	; (8008848 <Set_Task_Name+0x34>)
 800882c:	f7fe fb74 	bl	8006f18 <Queue_Peek>
 8008830:	4605      	mov	r5, r0
			if(7 == task)
 8008832:	2e07      	cmp	r6, #7
 8008834:	d1f3      	bne.n	800881e <Set_Task_Name+0xa>
			strncpy((char *)t->Task_Name,name,15);
 8008836:	220f      	movs	r2, #15
 8008838:	4639      	mov	r1, r7
 800883a:	3015      	adds	r0, #21
 800883c:	f001 fe0f 	bl	800a45e <strncpy>
			t->Task_Name[15] = '\0';
 8008840:	2300      	movs	r3, #0
 8008842:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
}
 8008846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008848:	20000dac 	.word	0x20000dac

0800884c <Get_Scheduler_Tasks>:
}
 800884c:	4800      	ldr	r0, [pc, #0]	; (8008850 <Get_Scheduler_Tasks+0x4>)
 800884e:	4770      	bx	lr
 8008850:	20000dac 	.word	0x20000dac

08008854 <Display_Processes>:
{
 8008854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	tScheduler * Scheduler = Get_Scheduler_Tasks();
 8008858:	f7ff fff8 	bl	800884c <Get_Scheduler_Tasks>
 800885c:	4606      	mov	r6, r0
	printf("\r\nPID\tName\t\tState\t%%(CPU)\tMem(Bytes)\r\n");
 800885e:	481e      	ldr	r0, [pc, #120]	; (80088d8 <Display_Processes+0x84>)
 8008860:	f001 fcc0 	bl	800a1e4 <iprintf>
	int total_mem = 0;
 8008864:	2700      	movs	r7, #0
	int total_cpu = 0;
 8008866:	46b8      	mov	r8, r7
	uint32_t counter = 0;
 8008868:	463d      	mov	r5, r7
	for(; counter < Scheduler->Tasks.Size; counter++)
 800886a:	e009      	b.n	8008880 <Display_Processes+0x2c>
		state = 'H';
 800886c:	2348      	movs	r3, #72	; 0x48
 800886e:	e013      	b.n	8008898 <Display_Processes+0x44>
			printf("\t-");
 8008870:	481a      	ldr	r0, [pc, #104]	; (80088dc <Display_Processes+0x88>)
 8008872:	f001 fcb7 	bl	800a1e4 <iprintf>
 8008876:	e01c      	b.n	80088b2 <Display_Processes+0x5e>
			printf("\t-\r\n");
 8008878:	4819      	ldr	r0, [pc, #100]	; (80088e0 <Display_Processes+0x8c>)
 800887a:	f001 fd39 	bl	800a2f0 <puts>
	for(; counter < Scheduler->Tasks.Size; counter++)
 800887e:	3501      	adds	r5, #1
 8008880:	68b3      	ldr	r3, [r6, #8]
 8008882:	42ab      	cmp	r3, r5
 8008884:	d91d      	bls.n	80088c2 <Display_Processes+0x6e>
		task = (tTask *)Queue_Peek(&Scheduler->Tasks,counter);
 8008886:	4629      	mov	r1, r5
 8008888:	4630      	mov	r0, r6
 800888a:	f7fe fb45 	bl	8006f18 <Queue_Peek>
 800888e:	4604      	mov	r4, r0
		if(task->Task_Halted)
 8008890:	7b03      	ldrb	r3, [r0, #12]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d1ea      	bne.n	800886c <Display_Processes+0x18>
		char state = 'R';
 8008896:	2352      	movs	r3, #82	; 0x52
		printf("%i\t%s\t  %c",(int)task->TID,task->Task_Name,state);
 8008898:	4622      	mov	r2, r4
 800889a:	f852 1b15 	ldr.w	r1, [r2], #21
 800889e:	4811      	ldr	r0, [pc, #68]	; (80088e4 <Display_Processes+0x90>)
 80088a0:	f001 fca0 	bl	800a1e4 <iprintf>
		if(task->Task_Running_Percentage > 0)
 80088a4:	7d21      	ldrb	r1, [r4, #20]
 80088a6:	2900      	cmp	r1, #0
 80088a8:	d0e2      	beq.n	8008870 <Display_Processes+0x1c>
			total_cpu += (int)task->Task_Running_Percentage;
 80088aa:	4488      	add	r8, r1
			printf("\t%i", (int)task->Task_Running_Percentage);
 80088ac:	480e      	ldr	r0, [pc, #56]	; (80088e8 <Display_Processes+0x94>)
 80088ae:	f001 fc99 	bl	800a1e4 <iprintf>
		if(task->Task_Heap_Usage > 0)
 80088b2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80088b4:	2900      	cmp	r1, #0
 80088b6:	d0df      	beq.n	8008878 <Display_Processes+0x24>
			total_mem += (int)task->Task_Heap_Usage;
 80088b8:	440f      	add	r7, r1
			printf("\t%i\r\n", (int)task->Task_Heap_Usage);
 80088ba:	480c      	ldr	r0, [pc, #48]	; (80088ec <Display_Processes+0x98>)
 80088bc:	f001 fc92 	bl	800a1e4 <iprintf>
 80088c0:	e7dd      	b.n	800887e <Display_Processes+0x2a>
	printf("---------------------------------------------------\r\n");
 80088c2:	480b      	ldr	r0, [pc, #44]	; (80088f0 <Display_Processes+0x9c>)
 80088c4:	f001 fd14 	bl	800a2f0 <puts>
	printf("\t\t\t\t%i\t%i\r\n", total_cpu, total_mem);
 80088c8:	463a      	mov	r2, r7
 80088ca:	4641      	mov	r1, r8
 80088cc:	4809      	ldr	r0, [pc, #36]	; (80088f4 <Display_Processes+0xa0>)
 80088ce:	f001 fc89 	bl	800a1e4 <iprintf>
}
 80088d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088d6:	bf00      	nop
 80088d8:	0800e4b8 	.word	0x0800e4b8
 80088dc:	0800e4f0 	.word	0x0800e4f0
 80088e0:	0800e4fc 	.word	0x0800e4fc
 80088e4:	0800e4e0 	.word	0x0800e4e0
 80088e8:	0800e4ec 	.word	0x0800e4ec
 80088ec:	0800e4f4 	.word	0x0800e4f4
 80088f0:	0800e500 	.word	0x0800e500
 80088f4:	0800e538 	.word	0x0800e538

080088f8 <Task_malloc>:
{
 80088f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088fa:	4606      	mov	r6, r0
	void * ptr = malloc(size);
 80088fc:	4608      	mov	r0, r1
 80088fe:	f000 fce1 	bl	80092c4 <malloc>
	if(ptr != NULL)
 8008902:	4607      	mov	r7, r0
 8008904:	b1a0      	cbz	r0, 8008930 <Task_malloc+0x38>
		for(int counter = 0; counter < Scheduler.Tasks.Size; counter++)
 8008906:	2500      	movs	r5, #0
 8008908:	4b0a      	ldr	r3, [pc, #40]	; (8008934 <Task_malloc+0x3c>)
 800890a:	689b      	ldr	r3, [r3, #8]
 800890c:	42ab      	cmp	r3, r5
 800890e:	d90f      	bls.n	8008930 <Task_malloc+0x38>
			t = (tTask *)Queue_Peek(&Scheduler.Tasks,counter);
 8008910:	4629      	mov	r1, r5
 8008912:	4808      	ldr	r0, [pc, #32]	; (8008934 <Task_malloc+0x3c>)
 8008914:	f7fe fb00 	bl	8006f18 <Queue_Peek>
 8008918:	4604      	mov	r4, r0
			if(t->TID == task)
 800891a:	6803      	ldr	r3, [r0, #0]
 800891c:	42b3      	cmp	r3, r6
 800891e:	d001      	beq.n	8008924 <Task_malloc+0x2c>
		for(int counter = 0; counter < Scheduler.Tasks.Size; counter++)
 8008920:	3501      	adds	r5, #1
 8008922:	e7f1      	b.n	8008908 <Task_malloc+0x10>
				t->Task_Heap_Usage += malloc_usable_size(ptr);
 8008924:	4638      	mov	r0, r7
 8008926:	f000 fcf3 	bl	8009310 <malloc_usable_size>
 800892a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800892c:	4403      	add	r3, r0
 800892e:	6323      	str	r3, [r4, #48]	; 0x30
}
 8008930:	4638      	mov	r0, r7
 8008932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008934:	20000dac 	.word	0x20000dac

08008938 <Task_free>:
{
 8008938:	b570      	push	{r4, r5, r6, lr}
 800893a:	4605      	mov	r5, r0
 800893c:	460c      	mov	r4, r1
	size_t data_size = malloc_usable_size(data_ptr);
 800893e:	4608      	mov	r0, r1
 8008940:	f000 fce6 	bl	8009310 <malloc_usable_size>
 8008944:	4606      	mov	r6, r0
	free(data_ptr);
 8008946:	4620      	mov	r0, r4
 8008948:	f000 fcc4 	bl	80092d4 <free>
	for(int counter = 0; counter < Scheduler.Tasks.Size; counter++)
 800894c:	2400      	movs	r4, #0
 800894e:	e000      	b.n	8008952 <Task_free+0x1a>
 8008950:	3401      	adds	r4, #1
 8008952:	4b07      	ldr	r3, [pc, #28]	; (8008970 <Task_free+0x38>)
 8008954:	689b      	ldr	r3, [r3, #8]
 8008956:	42a3      	cmp	r3, r4
 8008958:	d909      	bls.n	800896e <Task_free+0x36>
		t = (tTask *)Queue_Peek(&Scheduler.Tasks,counter);
 800895a:	4621      	mov	r1, r4
 800895c:	4804      	ldr	r0, [pc, #16]	; (8008970 <Task_free+0x38>)
 800895e:	f7fe fadb 	bl	8006f18 <Queue_Peek>
		if(t->TID == task)
 8008962:	6803      	ldr	r3, [r0, #0]
 8008964:	42ab      	cmp	r3, r5
 8008966:	d1f3      	bne.n	8008950 <Task_free+0x18>
			t->Task_Heap_Usage -= data_size;
 8008968:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800896a:	1b9b      	subs	r3, r3, r6
 800896c:	6303      	str	r3, [r0, #48]	; 0x30
}
 800896e:	bd70      	pop	{r4, r5, r6, pc}
 8008970:	20000dac 	.word	0x20000dac

08008974 <Task_Add_Heap_Size>:
{
 8008974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008976:	4606      	mov	r6, r0
 8008978:	460f      	mov	r7, r1
	for(int counter = 0; counter < Scheduler.Tasks.Size; counter++)
 800897a:	2500      	movs	r5, #0
 800897c:	e000      	b.n	8008980 <Task_Add_Heap_Size+0xc>
 800897e:	3501      	adds	r5, #1
 8008980:	4b09      	ldr	r3, [pc, #36]	; (80089a8 <Task_Add_Heap_Size+0x34>)
 8008982:	689b      	ldr	r3, [r3, #8]
 8008984:	42ab      	cmp	r3, r5
 8008986:	d90d      	bls.n	80089a4 <Task_Add_Heap_Size+0x30>
		t = (tTask *)Queue_Peek(&Scheduler.Tasks,counter);
 8008988:	4629      	mov	r1, r5
 800898a:	4807      	ldr	r0, [pc, #28]	; (80089a8 <Task_Add_Heap_Size+0x34>)
 800898c:	f7fe fac4 	bl	8006f18 <Queue_Peek>
 8008990:	4604      	mov	r4, r0
		if(t->TID == task)
 8008992:	6803      	ldr	r3, [r0, #0]
 8008994:	42b3      	cmp	r3, r6
 8008996:	d1f2      	bne.n	800897e <Task_Add_Heap_Size+0xa>
			t->Task_Heap_Usage += malloc_usable_size(data_ptr);
 8008998:	4638      	mov	r0, r7
 800899a:	f000 fcb9 	bl	8009310 <malloc_usable_size>
 800899e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80089a0:	4403      	add	r3, r0
 80089a2:	6323      	str	r3, [r4, #48]	; 0x30
}
 80089a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089a6:	bf00      	nop
 80089a8:	20000dac 	.word	0x20000dac

080089ac <Start_Task>:
{
 80089ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089b0:	4607      	mov	r7, r0
 80089b2:	460e      	mov	r6, r1
 80089b4:	4615      	mov	r5, r2
	tTask * task = (tTask *)malloc(sizeof(tTask));
 80089b6:	2034      	movs	r0, #52	; 0x34
 80089b8:	f000 fc84 	bl	80092c4 <malloc>
 80089bc:	4604      	mov	r4, r0
	if(Task_ID != 0xFFFFFFFF)
 80089be:	4b1c      	ldr	r3, [pc, #112]	; (8008a30 <Start_Task+0x84>)
 80089c0:	6818      	ldr	r0, [r3, #0]
 80089c2:	f1b0 3fff 	cmp.w	r0, #4294967295
 80089c6:	d127      	bne.n	8008a18 <Start_Task+0x6c>
	if(task != NULL)
 80089c8:	b354      	cbz	r4, 8008a20 <Start_Task+0x74>
		task->TID = Scheduler.Next_TID;
 80089ca:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8008a3c <Start_Task+0x90>
 80089ce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80089d2:	6023      	str	r3, [r4, #0]
		Scheduler.Next_TID++;
 80089d4:	3301      	adds	r3, #1
 80089d6:	f8c8 300c 	str.w	r3, [r8, #12]
		task->Task_Halted = 0;
 80089da:	f04f 0900 	mov.w	r9, #0
 80089de:	f884 900c 	strb.w	r9, [r4, #12]
		task->Start_Time = HAL_GetTick();
 80089e2:	f7f9 fcf7 	bl	80023d4 <HAL_GetTick>
 80089e6:	6060      	str	r0, [r4, #4]
		task->Timeout = timeout;
 80089e8:	60a5      	str	r5, [r4, #8]
		task->Task_Running_Time = 0;
 80089ea:	f8c4 9010 	str.w	r9, [r4, #16]
		strcpy((char *)task->Task_Name,"               ");
 80089ee:	4d11      	ldr	r5, [pc, #68]	; (8008a34 <Start_Task+0x88>)
 80089f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80089f2:	f8c4 0015 	str.w	r0, [r4, #21]
 80089f6:	f8c4 1019 	str.w	r1, [r4, #25]
 80089fa:	f8c4 201d 	str.w	r2, [r4, #29]
 80089fe:	f8c4 3021 	str.w	r3, [r4, #33]	; 0x21
		task->Task_Exe = Task_CallBack;
 8008a02:	62a7      	str	r7, [r4, #40]	; 0x28
		task->Task_Data = Data;
 8008a04:	62e6      	str	r6, [r4, #44]	; 0x2c
		task->Task_Heap_Usage = 0;
 8008a06:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
		if(Enqueue(&Scheduler.Tasks,(void *)task))
 8008a0a:	4621      	mov	r1, r4
 8008a0c:	4640      	mov	r0, r8
 8008a0e:	f7fe fa65 	bl	8006edc <Enqueue>
 8008a12:	b150      	cbz	r0, 8008a2a <Start_Task+0x7e>
			return task->TID;
 8008a14:	6820      	ldr	r0, [r4, #0]
 8008a16:	e009      	b.n	8008a2c <Start_Task+0x80>
		Task_Add_Heap_Size(Task_ID, task);
 8008a18:	4621      	mov	r1, r4
 8008a1a:	f7ff ffab 	bl	8008974 <Task_Add_Heap_Size>
 8008a1e:	e7d3      	b.n	80089c8 <Start_Task+0x1c>
		printf("Task start malloc error\r\n");
 8008a20:	4805      	ldr	r0, [pc, #20]	; (8008a38 <Start_Task+0x8c>)
 8008a22:	f001 fc65 	bl	800a2f0 <puts>
		return 0;
 8008a26:	2000      	movs	r0, #0
 8008a28:	e000      	b.n	8008a2c <Start_Task+0x80>
			return 0;
 8008a2a:	2000      	movs	r0, #0
}
 8008a2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a30:	20000120 	.word	0x20000120
 8008a34:	0800e544 	.word	0x0800e544
 8008a38:	0800e554 	.word	0x0800e554
 8008a3c:	20000dac 	.word	0x20000dac

08008a40 <Start_Scheduler>:
{
 8008a40:	b538      	push	{r3, r4, r5, lr}
	Prep_Queue(&Scheduler.Tasks);
 8008a42:	4d0d      	ldr	r5, [pc, #52]	; (8008a78 <Start_Scheduler+0x38>)
 8008a44:	4628      	mov	r0, r5
 8008a46:	f7fe fa43 	bl	8006ed0 <Prep_Queue>
	Scheduler.Next_TID = 1;
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	60eb      	str	r3, [r5, #12]
	Task_ID = Start_Task(Scheduler_Tasks,NULL,1000);
 8008a4e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008a52:	2100      	movs	r1, #0
 8008a54:	4809      	ldr	r0, [pc, #36]	; (8008a7c <Start_Scheduler+0x3c>)
 8008a56:	f7ff ffa9 	bl	80089ac <Start_Task>
 8008a5a:	4c09      	ldr	r4, [pc, #36]	; (8008a80 <Start_Scheduler+0x40>)
 8008a5c:	6020      	str	r0, [r4, #0]
	Set_Task_Name(Task_ID,"Scheduler");
 8008a5e:	4909      	ldr	r1, [pc, #36]	; (8008a84 <Start_Scheduler+0x44>)
 8008a60:	f7ff fed8 	bl	8008814 <Set_Task_Name>
	tTask * t = (tTask *)Queue_Peek(&Scheduler.Tasks,Task_ID - 1);
 8008a64:	6821      	ldr	r1, [r4, #0]
 8008a66:	3901      	subs	r1, #1
 8008a68:	4628      	mov	r0, r5
 8008a6a:	f7fe fa55 	bl	8006f18 <Queue_Peek>
 8008a6e:	4601      	mov	r1, r0
	Task_Add_Heap_Size(Task_ID, t);
 8008a70:	6820      	ldr	r0, [r4, #0]
 8008a72:	f7ff ff7f 	bl	8008974 <Task_Add_Heap_Size>
}
 8008a76:	bd38      	pop	{r3, r4, r5, pc}
 8008a78:	20000dac 	.word	0x20000dac
 8008a7c:	08008611 	.word	0x08008611
 8008a80:	20000120 	.word	0x20000120
 8008a84:	0800e570 	.word	0x0800e570

08008a88 <UART_Transmit>:

	return uart;
}

int32_t UART_Transmit(UART * uart, uint8_t * Data, uint16_t Data_Size)
{
 8008a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// Only transmit if the UART is enabled
	if(!uart->UART_Is_Enabled)
 8008a8a:	7943      	ldrb	r3, [r0, #5]
 8008a8c:	b383      	cbz	r3, 8008af0 <UART_Transmit+0x68>
 8008a8e:	4605      	mov	r5, r0
 8008a90:	460e      	mov	r6, r1
 8008a92:	4614      	mov	r4, r2
		return 0;

	if(Data_Size > 2000)
 8008a94:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
 8008a98:	d82c      	bhi.n	8008af4 <UART_Transmit+0x6c>
		return 0;

	if(uart->UART_Handle == NULL)
 8008a9a:	6803      	ldr	r3, [r0, #0]
 8008a9c:	b1cb      	cbz	r3, 8008ad2 <UART_Transmit+0x4a>
			return -1;
		}
	}
	else
	{
		UART_TX_Node * new_node = (UART_TX_Node *)Task_malloc(uart->Task_ID, sizeof(UART_TX_Node));
 8008a9e:	2108      	movs	r1, #8
 8008aa0:	f8d0 022c 	ldr.w	r0, [r0, #556]	; 0x22c
 8008aa4:	f7ff ff28 	bl	80088f8 <Task_malloc>
		if(new_node != NULL)
 8008aa8:	4607      	mov	r7, r0
 8008aaa:	b340      	cbz	r0, 8008afe <UART_Transmit+0x76>
		{
			new_node->Data = (uint8_t *)Task_malloc(uart->Task_ID, Data_Size * sizeof(uint8_t));
 8008aac:	4621      	mov	r1, r4
 8008aae:	f8d5 022c 	ldr.w	r0, [r5, #556]	; 0x22c
 8008ab2:	f7ff ff21 	bl	80088f8 <Task_malloc>
 8008ab6:	6038      	str	r0, [r7, #0]
			if(new_node->Data != NULL)
 8008ab8:	b190      	cbz	r0, 8008ae0 <UART_Transmit+0x58>
			{
				memcpy(new_node->Data, Data, Data_Size);
 8008aba:	4622      	mov	r2, r4
 8008abc:	4631      	mov	r1, r6
 8008abe:	f000 fc11 	bl	80092e4 <memcpy>
				new_node->Data_Size = Data_Size;
 8008ac2:	80bc      	strh	r4, [r7, #4]

				Enqueue(&uart->TX_Queue, (void *)new_node);
 8008ac4:	4639      	mov	r1, r7
 8008ac6:	f505 7003 	add.w	r0, r5, #524	; 0x20c
 8008aca:	f7fe fa07 	bl	8006edc <Enqueue>

				return Data_Size;
 8008ace:	4620      	mov	r0, r4
 8008ad0:	e00f      	b.n	8008af2 <UART_Transmit+0x6a>
		if(uart->SUDO_Transmit != NULL)
 8008ad2:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
 8008ad6:	b17b      	cbz	r3, 8008af8 <UART_Transmit+0x70>
			int32_t ret = uart->SUDO_Transmit(Data, Data_Size);
 8008ad8:	4611      	mov	r1, r2
 8008ada:	4630      	mov	r0, r6
 8008adc:	4798      	blx	r3
			return ret;
 8008ade:	e008      	b.n	8008af2 <UART_Transmit+0x6a>
			}
			else
			{
				Task_free(uart->Task_ID, new_node);
 8008ae0:	4639      	mov	r1, r7
 8008ae2:	f8d5 022c 	ldr.w	r0, [r5, #556]	; 0x22c
 8008ae6:	f7ff ff27 	bl	8008938 <Task_free>
				return -1;
 8008aea:	f04f 30ff 	mov.w	r0, #4294967295
 8008aee:	e000      	b.n	8008af2 <UART_Transmit+0x6a>
		return 0;
 8008af0:	2000      	movs	r0, #0
			}
		}
		else
			return -1;
	}
}
 8008af2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0;
 8008af4:	2000      	movs	r0, #0
 8008af6:	e7fc      	b.n	8008af2 <UART_Transmit+0x6a>
			return -1;
 8008af8:	f04f 30ff 	mov.w	r0, #4294967295
 8008afc:	e7f9      	b.n	8008af2 <UART_Transmit+0x6a>
			return -1;
 8008afe:	f04f 30ff 	mov.w	r0, #4294967295
 8008b02:	e7f6      	b.n	8008af2 <UART_Transmit+0x6a>

08008b04 <HAL_UART_TxCpltCallback>:
		UART_Tasks((void *)uart);
	}
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008b04:	b538      	push	{r3, r4, r5, lr}
 8008b06:	4605      	mov	r5, r0
	// Find who the callback is for
	int c = 0;
 8008b08:	2400      	movs	r4, #0
	for(; c < UART_Callback_Handles.Size; c++)
 8008b0a:	e000      	b.n	8008b0e <HAL_UART_TxCpltCallback+0xa>
 8008b0c:	3401      	adds	r4, #1
 8008b0e:	4b07      	ldr	r3, [pc, #28]	; (8008b2c <HAL_UART_TxCpltCallback+0x28>)
 8008b10:	689b      	ldr	r3, [r3, #8]
 8008b12:	42a3      	cmp	r3, r4
 8008b14:	d909      	bls.n	8008b2a <HAL_UART_TxCpltCallback+0x26>
	{
		UART * uart = (UART *)Queue_Peek(&UART_Callback_Handles, c);
 8008b16:	4621      	mov	r1, r4
 8008b18:	4804      	ldr	r0, [pc, #16]	; (8008b2c <HAL_UART_TxCpltCallback+0x28>)
 8008b1a:	f7fe f9fd 	bl	8006f18 <Queue_Peek>

		if(uart->UART_Handle == huart)
 8008b1e:	6803      	ldr	r3, [r0, #0]
 8008b20:	42ab      	cmp	r3, r5
 8008b22:	d1f3      	bne.n	8008b0c <HAL_UART_TxCpltCallback+0x8>
		{
			uart->Currently_Transmitting = false;
 8008b24:	2300      	movs	r3, #0
 8008b26:	f880 321c 	strb.w	r3, [r0, #540]	; 0x21c
			return;
		}
	}
}
 8008b2a:	bd38      	pop	{r3, r4, r5, pc}
 8008b2c:	20000dbc 	.word	0x20000dbc

08008b30 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	UNUSED(huart);
}
 8008b30:	4770      	bx	lr
	...

08008b34 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008b34:	b570      	push	{r4, r5, r6, lr}
 8008b36:	4606      	mov	r6, r0
	// Find who the callback is for
	int c = 0;
 8008b38:	2500      	movs	r5, #0
	for(; c < UART_Callback_Handles.Size; c++)
 8008b3a:	e000      	b.n	8008b3e <HAL_UART_ErrorCallback+0xa>
 8008b3c:	3501      	adds	r5, #1
 8008b3e:	4b10      	ldr	r3, [pc, #64]	; (8008b80 <HAL_UART_ErrorCallback+0x4c>)
 8008b40:	689b      	ldr	r3, [r3, #8]
 8008b42:	42ab      	cmp	r3, r5
 8008b44:	d91a      	bls.n	8008b7c <HAL_UART_ErrorCallback+0x48>
	{
		UART * uart = (UART *)Queue_Peek(&UART_Callback_Handles, c);
 8008b46:	4629      	mov	r1, r5
 8008b48:	480d      	ldr	r0, [pc, #52]	; (8008b80 <HAL_UART_ErrorCallback+0x4c>)
 8008b4a:	f7fe f9e5 	bl	8006f18 <Queue_Peek>
 8008b4e:	4604      	mov	r4, r0

		if(uart->UART_Handle == huart)
 8008b50:	6803      	ldr	r3, [r0, #0]
 8008b52:	42b3      	cmp	r3, r6
 8008b54:	d1f2      	bne.n	8008b3c <HAL_UART_ErrorCallback+0x8>
		{
			uart->RX_Buff_Tail_Ptr = 0;
 8008b56:	2200      	movs	r2, #0
 8008b58:	f8c0 2208 	str.w	r2, [r0, #520]	; 0x208
			uart->Currently_Transmitting = false;
 8008b5c:	f880 221c 	strb.w	r2, [r0, #540]	; 0x21c
			HAL_DMA_Abort_IT(uart->UART_Handle->hdmarx);
 8008b60:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8008b62:	f7f9 fe09 	bl	8002778 <HAL_DMA_Abort_IT>
			HAL_UART_DMAStop(uart->UART_Handle);
 8008b66:	6820      	ldr	r0, [r4, #0]
 8008b68:	f7fc fe4f 	bl	800580a <HAL_UART_DMAStop>
			HAL_UART_Receive_DMA(uart->UART_Handle, uart->RX_Buffer, UART_RX_BUFF_SIZE);
 8008b6c:	4621      	mov	r1, r4
 8008b6e:	f851 0b06 	ldr.w	r0, [r1], #6
 8008b72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b76:	f7fd fc37 	bl	80063e8 <HAL_UART_Receive_DMA>
 8008b7a:	e7df      	b.n	8008b3c <HAL_UART_ErrorCallback+0x8>
		}
	}
}
 8008b7c:	bd70      	pop	{r4, r5, r6, pc}
 8008b7e:	bf00      	nop
 8008b80:	20000dbc 	.word	0x20000dbc

08008b84 <USBH_UserProcess>:
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008b84:	2904      	cmp	r1, #4
 8008b86:	d012      	beq.n	8008bae <USBH_UserProcess+0x2a>
 8008b88:	2905      	cmp	r1, #5
 8008b8a:	d002      	beq.n	8008b92 <USBH_UserProcess+0xe>
 8008b8c:	2902      	cmp	r1, #2
 8008b8e:	d007      	beq.n	8008ba0 <USBH_UserProcess+0x1c>

  default:
  break;
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008b90:	4770      	bx	lr
	  USB_MSD_Mounted = 0;
 8008b92:	4b09      	ldr	r3, [pc, #36]	; (8008bb8 <USBH_UserProcess+0x34>)
 8008b94:	2200      	movs	r2, #0
 8008b96:	701a      	strb	r2, [r3, #0]
  Appli_state = APPLICATION_DISCONNECT;
 8008b98:	4b08      	ldr	r3, [pc, #32]	; (8008bbc <USBH_UserProcess+0x38>)
 8008b9a:	2203      	movs	r2, #3
 8008b9c:	701a      	strb	r2, [r3, #0]
  break;
 8008b9e:	4770      	bx	lr
	  USB_MSD_Mounted = 1;
 8008ba0:	4b05      	ldr	r3, [pc, #20]	; (8008bb8 <USBH_UserProcess+0x34>)
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	701a      	strb	r2, [r3, #0]
  Appli_state = APPLICATION_READY;
 8008ba6:	4b05      	ldr	r3, [pc, #20]	; (8008bbc <USBH_UserProcess+0x38>)
 8008ba8:	2202      	movs	r2, #2
 8008baa:	701a      	strb	r2, [r3, #0]
  break;
 8008bac:	4770      	bx	lr
  Appli_state = APPLICATION_START;
 8008bae:	4b03      	ldr	r3, [pc, #12]	; (8008bbc <USBH_UserProcess+0x38>)
 8008bb0:	2201      	movs	r2, #1
 8008bb2:	701a      	strb	r2, [r3, #0]
}
 8008bb4:	e7ec      	b.n	8008b90 <USBH_UserProcess+0xc>
 8008bb6:	bf00      	nop
 8008bb8:	20000dc9 	.word	0x20000dc9
 8008bbc:	20000dc8 	.word	0x20000dc8

08008bc0 <MX_USB_HOST_Init>:
{
 8008bc0:	b508      	push	{r3, lr}
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008bc2:	2201      	movs	r2, #1
 8008bc4:	490b      	ldr	r1, [pc, #44]	; (8008bf4 <MX_USB_HOST_Init+0x34>)
 8008bc6:	480c      	ldr	r0, [pc, #48]	; (8008bf8 <MX_USB_HOST_Init+0x38>)
 8008bc8:	f7ff f816 	bl	8007bf8 <USBH_Init>
 8008bcc:	b948      	cbnz	r0, 8008be2 <MX_USB_HOST_Init+0x22>
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 8008bce:	490b      	ldr	r1, [pc, #44]	; (8008bfc <MX_USB_HOST_Init+0x3c>)
 8008bd0:	4809      	ldr	r0, [pc, #36]	; (8008bf8 <MX_USB_HOST_Init+0x38>)
 8008bd2:	f7ff f830 	bl	8007c36 <USBH_RegisterClass>
 8008bd6:	b938      	cbnz	r0, 8008be8 <MX_USB_HOST_Init+0x28>
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008bd8:	4807      	ldr	r0, [pc, #28]	; (8008bf8 <MX_USB_HOST_Init+0x38>)
 8008bda:	f7ff f871 	bl	8007cc0 <USBH_Start>
 8008bde:	b930      	cbnz	r0, 8008bee <MX_USB_HOST_Init+0x2e>
}
 8008be0:	bd08      	pop	{r3, pc}
    Error_Handler();
 8008be2:	f7f8 fbeb 	bl	80013bc <Error_Handler>
 8008be6:	e7f2      	b.n	8008bce <MX_USB_HOST_Init+0xe>
    Error_Handler();
 8008be8:	f7f8 fbe8 	bl	80013bc <Error_Handler>
 8008bec:	e7f4      	b.n	8008bd8 <MX_USB_HOST_Init+0x18>
    Error_Handler();
 8008bee:	f7f8 fbe5 	bl	80013bc <Error_Handler>
}
 8008bf2:	e7f5      	b.n	8008be0 <MX_USB_HOST_Init+0x20>
 8008bf4:	08008b85 	.word	0x08008b85
 8008bf8:	20000dcc 	.word	0x20000dcc
 8008bfc:	20000100 	.word	0x20000100

08008c00 <MX_USB_HOST_Process>:
{
 8008c00:	b508      	push	{r3, lr}
  USBH_Process(&hUsbHostFS);
 8008c02:	4802      	ldr	r0, [pc, #8]	; (8008c0c <MX_USB_HOST_Process+0xc>)
 8008c04:	f7ff f866 	bl	8007cd4 <USBH_Process>
}
 8008c08:	bd08      	pop	{r3, pc}
 8008c0a:	bf00      	nop
 8008c0c:	20000dcc 	.word	0x20000dcc

08008c10 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008c10:	b510      	push	{r4, lr}
 8008c12:	b0ae      	sub	sp, #184	; 0xb8
 8008c14:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c16:	2100      	movs	r1, #0
 8008c18:	9129      	str	r1, [sp, #164]	; 0xa4
 8008c1a:	912a      	str	r1, [sp, #168]	; 0xa8
 8008c1c:	912b      	str	r1, [sp, #172]	; 0xac
 8008c1e:	912c      	str	r1, [sp, #176]	; 0xb0
 8008c20:	912d      	str	r1, [sp, #180]	; 0xb4
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008c22:	2294      	movs	r2, #148	; 0x94
 8008c24:	a804      	add	r0, sp, #16
 8008c26:	f000 fb6b 	bl	8009300 <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 8008c2a:	6823      	ldr	r3, [r4, #0]
 8008c2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008c30:	d001      	beq.n	8008c36 <HAL_HCD_MspInit+0x26>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008c32:	b02e      	add	sp, #184	; 0xb8
 8008c34:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8008c36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008c3a:	9304      	str	r3, [sp, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8008c3c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008c40:	9321      	str	r3, [sp, #132]	; 0x84
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8008c42:	2303      	movs	r3, #3
 8008c44:	9305      	str	r3, [sp, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8008c46:	2301      	movs	r3, #1
 8008c48:	9306      	str	r3, [sp, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 8008c4a:	230c      	movs	r3, #12
 8008c4c:	9307      	str	r3, [sp, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8008c4e:	2302      	movs	r3, #2
 8008c50:	9308      	str	r3, [sp, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8008c52:	9309      	str	r3, [sp, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8008c54:	930a      	str	r3, [sp, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8008c56:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008c5a:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008c5c:	a804      	add	r0, sp, #16
 8008c5e:	f7fc fa17 	bl	8005090 <HAL_RCCEx_PeriphCLKConfig>
 8008c62:	2800      	cmp	r0, #0
 8008c64:	d13e      	bne.n	8008ce4 <HAL_HCD_MspInit+0xd4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008c66:	4c22      	ldr	r4, [pc, #136]	; (8008cf0 <HAL_HCD_MspInit+0xe0>)
 8008c68:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8008c6a:	f043 0301 	orr.w	r3, r3, #1
 8008c6e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8008c70:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8008c72:	f003 0301 	and.w	r3, r3, #1
 8008c76:	9301      	str	r3, [sp, #4]
 8008c78:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008c7a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008c7e:	9329      	str	r3, [sp, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c80:	2302      	movs	r3, #2
 8008c82:	932a      	str	r3, [sp, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c84:	2300      	movs	r3, #0
 8008c86:	932b      	str	r3, [sp, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008c88:	2303      	movs	r3, #3
 8008c8a:	932c      	str	r3, [sp, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008c8c:	230a      	movs	r3, #10
 8008c8e:	932d      	str	r3, [sp, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008c90:	a929      	add	r1, sp, #164	; 0xa4
 8008c92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008c96:	f7f9 fe0d 	bl	80028b4 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008c9a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8008c9c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008ca0:	64e3      	str	r3, [r4, #76]	; 0x4c
 8008ca2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8008ca4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008ca8:	9302      	str	r3, [sp, #8]
 8008caa:	9b02      	ldr	r3, [sp, #8]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008cac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008cae:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8008cb2:	d11a      	bne.n	8008cea <HAL_HCD_MspInit+0xda>
      __HAL_RCC_PWR_CLK_ENABLE();
 8008cb4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008cb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008cba:	65a3      	str	r3, [r4, #88]	; 0x58
 8008cbc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008cc2:	9303      	str	r3, [sp, #12]
 8008cc4:	9b03      	ldr	r3, [sp, #12]
      HAL_PWREx_EnableVddUSB();
 8008cc6:	f7fb fb2b 	bl	8004320 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8008cca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008ccc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008cd0:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	4611      	mov	r1, r2
 8008cd6:	2043      	movs	r0, #67	; 0x43
 8008cd8:	f7f9 fba8 	bl	800242c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008cdc:	2043      	movs	r0, #67	; 0x43
 8008cde:	f7f9 fbdd 	bl	800249c <HAL_NVIC_EnableIRQ>
}
 8008ce2:	e7a6      	b.n	8008c32 <HAL_HCD_MspInit+0x22>
      Error_Handler();
 8008ce4:	f7f8 fb6a 	bl	80013bc <Error_Handler>
 8008ce8:	e7bd      	b.n	8008c66 <HAL_HCD_MspInit+0x56>
      HAL_PWREx_EnableVddUSB();
 8008cea:	f7fb fb19 	bl	8004320 <HAL_PWREx_EnableVddUSB>
 8008cee:	e7f0      	b.n	8008cd2 <HAL_HCD_MspInit+0xc2>
 8008cf0:	40021000 	.word	0x40021000

08008cf4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008cf4:	b508      	push	{r3, lr}
  USBH_LL_IncTimer(hhcd->pData);
 8008cf6:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 8008cfa:	f7ff f929 	bl	8007f50 <USBH_LL_IncTimer>
}
 8008cfe:	bd08      	pop	{r3, pc}

08008d00 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008d00:	b508      	push	{r3, lr}
  USBH_LL_Connect(hhcd->pData);
 8008d02:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 8008d06:	f7ff f934 	bl	8007f72 <USBH_LL_Connect>
}
 8008d0a:	bd08      	pop	{r3, pc}

08008d0c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008d0c:	b508      	push	{r3, lr}
  USBH_LL_Disconnect(hhcd->pData);
 8008d0e:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 8008d12:	f7ff f938 	bl	8007f86 <USBH_LL_Disconnect>
}
 8008d16:	bd08      	pop	{r3, pc}

08008d18 <HAL_HCD_HC_NotifyURBChange_Callback>:
{
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008d18:	4770      	bx	lr

08008d1a <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008d1a:	b508      	push	{r3, lr}
  USBH_LL_PortEnabled(hhcd->pData);
 8008d1c:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 8008d20:	f7ff f91f 	bl	8007f62 <USBH_LL_PortEnabled>
}
 8008d24:	bd08      	pop	{r3, pc}

08008d26 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008d26:	b508      	push	{r3, lr}
  USBH_LL_PortDisabled(hhcd->pData);
 8008d28:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 8008d2c:	f7ff f91d 	bl	8007f6a <USBH_LL_PortDisabled>
}
 8008d30:	bd08      	pop	{r3, pc}
	...

08008d34 <USBH_LL_Init>:
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008d34:	f890 33cc 	ldrb.w	r3, [r0, #972]	; 0x3cc
 8008d38:	2b01      	cmp	r3, #1
 8008d3a:	d001      	beq.n	8008d40 <USBH_LL_Init+0xc>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
  }
  return USBH_OK;
}
 8008d3c:	2000      	movs	r0, #0
 8008d3e:	4770      	bx	lr
{
 8008d40:	b510      	push	{r4, lr}
 8008d42:	4604      	mov	r4, r0
  hhcd_USB_OTG_FS.pData = phost;
 8008d44:	4810      	ldr	r0, [pc, #64]	; (8008d88 <USBH_LL_Init+0x54>)
 8008d46:	f8c0 4300 	str.w	r4, [r0, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8008d4a:	f8c4 03d0 	str.w	r0, [r4, #976]	; 0x3d0
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008d4e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8008d52:	6003      	str	r3, [r0, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 8008d54:	230c      	movs	r3, #12
 8008d56:	6083      	str	r3, [r0, #8]
  hhcd_USB_OTG_FS.Init.speed = USB_OTG_SPEED_FULL;
 8008d58:	2303      	movs	r3, #3
 8008d5a:	60c3      	str	r3, [r0, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	6103      	str	r3, [r0, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008d60:	2202      	movs	r2, #2
 8008d62:	6182      	str	r2, [r0, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008d64:	61c3      	str	r3, [r0, #28]
  hhcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008d66:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008d68:	f7f9 ff49 	bl	8002bfe <HAL_HCD_Init>
 8008d6c:	b940      	cbnz	r0, 8008d80 <USBH_LL_Init+0x4c>
  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008d6e:	4806      	ldr	r0, [pc, #24]	; (8008d88 <USBH_LL_Init+0x54>)
 8008d70:	f7fa fc07 	bl	8003582 <HAL_HCD_GetCurrentFrame>
 8008d74:	4601      	mov	r1, r0
 8008d76:	4620      	mov	r0, r4
 8008d78:	f7ff f8e7 	bl	8007f4a <USBH_LL_SetTimer>
}
 8008d7c:	2000      	movs	r0, #0
 8008d7e:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8008d80:	f7f8 fb1c 	bl	80013bc <Error_Handler>
 8008d84:	e7f3      	b.n	8008d6e <USBH_LL_Init+0x3a>
 8008d86:	bf00      	nop
 8008d88:	200011a4 	.word	0x200011a4

08008d8c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008d8c:	b508      	push	{r3, lr}
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008d8e:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 8008d92:	f7fa fbfb 	bl	800358c <HAL_HCD_GetCurrentSpeed>
 8008d96:	2801      	cmp	r0, #1
 8008d98:	d004      	beq.n	8008da4 <USBH_LL_GetSpeed+0x18>
 8008d9a:	2802      	cmp	r0, #2
 8008d9c:	d004      	beq.n	8008da8 <USBH_LL_GetSpeed+0x1c>
 8008d9e:	b100      	cbz	r0, 8008da2 <USBH_LL_GetSpeed+0x16>
  case 2 :
    speed = USBH_SPEED_LOW;
    break;

  default:
   speed = USBH_SPEED_FULL;
 8008da0:	2001      	movs	r0, #1
    break;
  }
  return  speed;
}
 8008da2:	bd08      	pop	{r3, pc}
    speed = USBH_SPEED_FULL;
 8008da4:	2001      	movs	r0, #1
 8008da6:	e7fc      	b.n	8008da2 <USBH_LL_GetSpeed+0x16>
    speed = USBH_SPEED_LOW;
 8008da8:	2002      	movs	r0, #2
 8008daa:	e7fa      	b.n	8008da2 <USBH_LL_GetSpeed+0x16>

08008dac <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008dac:	b508      	push	{r3, lr}
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008dae:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 8008db2:	f7fa fbe1 	bl	8003578 <HAL_HCD_HC_GetXferCount>
}
 8008db6:	bd08      	pop	{r3, pc}

08008db8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008db8:	b508      	push	{r3, lr}
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008dba:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 8008dbe:	f7fa fbd5 	bl	800356c <HAL_HCD_HC_GetURBState>
}
 8008dc2:	bd08      	pop	{r3, pc}

08008dc4 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008dc4:	b508      	push	{r3, lr}
  if (phost->id == HOST_FS) {
 8008dc6:	f890 33cc 	ldrb.w	r3, [r0, #972]	; 0x3cc
 8008dca:	2b01      	cmp	r3, #1
 8008dcc:	d004      	beq.n	8008dd8 <USBH_LL_DriverVBUS+0x14>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008dce:	20c8      	movs	r0, #200	; 0xc8
 8008dd0:	f7f9 fb06 	bl	80023e0 <HAL_Delay>
  return USBH_OK;
}
 8008dd4:	2000      	movs	r0, #0
 8008dd6:	bd08      	pop	{r3, pc}
    MX_DriverVbusFS(state);
 8008dd8:	4608      	mov	r0, r1
 8008dda:	f000 f881 	bl	8008ee0 <MX_DriverVbusFS>
 8008dde:	e7f6      	b.n	8008dce <USBH_LL_DriverVBUS+0xa>

08008de0 <USBH_LL_SetToggle>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008de0:	f8d0 33d0 	ldr.w	r3, [r0, #976]	; 0x3d0

  if(pHandle->hc[pipe].ep_is_in)
 8008de4:	202c      	movs	r0, #44	; 0x2c
 8008de6:	fb00 3001 	mla	r0, r0, r1, r3
 8008dea:	f890 003b 	ldrb.w	r0, [r0, #59]	; 0x3b
 8008dee:	b130      	cbz	r0, 8008dfe <USBH_LL_SetToggle+0x1e>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008df0:	202c      	movs	r0, #44	; 0x2c
 8008df2:	fb00 3301 	mla	r3, r0, r1, r3
 8008df6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  {
    pHandle->hc[pipe].toggle_out = toggle;
  }

  return USBH_OK;
}
 8008dfa:	2000      	movs	r0, #0
 8008dfc:	4770      	bx	lr
    pHandle->hc[pipe].toggle_out = toggle;
 8008dfe:	202c      	movs	r0, #44	; 0x2c
 8008e00:	fb00 3301 	mla	r3, r0, r1, r3
 8008e04:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 8008e08:	e7f7      	b.n	8008dfa <USBH_LL_SetToggle+0x1a>

08008e0a <USBH_LL_GetToggle>:
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  uint8_t toggle = 0;
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008e0a:	f8d0 33d0 	ldr.w	r3, [r0, #976]	; 0x3d0

  if(pHandle->hc[pipe].ep_is_in)
 8008e0e:	222c      	movs	r2, #44	; 0x2c
 8008e10:	fb02 3201 	mla	r2, r2, r1, r3
 8008e14:	f892 203b 	ldrb.w	r2, [r2, #59]	; 0x3b
 8008e18:	b12a      	cbz	r2, 8008e26 <USBH_LL_GetToggle+0x1c>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 8008e1a:	222c      	movs	r2, #44	; 0x2c
 8008e1c:	fb02 3301 	mla	r3, r2, r1, r3
 8008e20:	f893 0054 	ldrb.w	r0, [r3, #84]	; 0x54
 8008e24:	4770      	bx	lr
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 8008e26:	222c      	movs	r2, #44	; 0x2c
 8008e28:	fb02 3301 	mla	r3, r2, r1, r3
 8008e2c:	f893 0055 	ldrb.w	r0, [r3, #85]	; 0x55
  }
  return toggle;
}
 8008e30:	4770      	bx	lr

08008e32 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008e32:	b508      	push	{r3, lr}
  HAL_Delay(Delay);
 8008e34:	f7f9 fad4 	bl	80023e0 <HAL_Delay>
}
 8008e38:	bd08      	pop	{r3, pc}

08008e3a <USBH_Get_USB_Status>:
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBH_StatusTypeDef usb_status = USBH_OK;

  switch (hal_status)
 8008e3a:	2802      	cmp	r0, #2
 8008e3c:	d805      	bhi.n	8008e4a <USBH_Get_USB_Status+0x10>
 8008e3e:	e8df f000 	tbb	[pc, r0]
 8008e42:	0405      	.short	0x0405
 8008e44:	02          	.byte	0x02
 8008e45:	00          	.byte	0x00
    break;
    case HAL_ERROR :
      usb_status = USBH_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008e46:	2001      	movs	r0, #1
    break;
 8008e48:	4770      	bx	lr
      usb_status = USBH_FAIL;
 8008e4a:	2002      	movs	r0, #2
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 8008e4c:	4770      	bx	lr

08008e4e <USBH_LL_Start>:
{
 8008e4e:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_Start(phost->pData);
 8008e50:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 8008e54:	f7fa fb5e 	bl	8003514 <HAL_HCD_Start>
  usb_status = USBH_Get_USB_Status(hal_status);
 8008e58:	f7ff ffef 	bl	8008e3a <USBH_Get_USB_Status>
}
 8008e5c:	bd08      	pop	{r3, pc}

08008e5e <USBH_LL_Stop>:
{
 8008e5e:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_Stop(phost->pData);
 8008e60:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 8008e64:	f7fa fb6b 	bl	800353e <HAL_HCD_Stop>
  usb_status = USBH_Get_USB_Status(hal_status);
 8008e68:	f7ff ffe7 	bl	8008e3a <USBH_Get_USB_Status>
}
 8008e6c:	bd08      	pop	{r3, pc}

08008e6e <USBH_LL_ResetPort>:
{
 8008e6e:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008e70:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 8008e74:	f7fa fb75 	bl	8003562 <HAL_HCD_ResetPort>
  usb_status = USBH_Get_USB_Status(hal_status);
 8008e78:	f7ff ffdf 	bl	8008e3a <USBH_Get_USB_Status>
}
 8008e7c:	bd08      	pop	{r3, pc}

08008e7e <USBH_LL_OpenPipe>:
{
 8008e7e:	b510      	push	{r4, lr}
 8008e80:	b084      	sub	sp, #16
  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008e82:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 8008e86:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8008e8a:	9402      	str	r4, [sp, #8]
 8008e8c:	f89d 401c 	ldrb.w	r4, [sp, #28]
 8008e90:	9401      	str	r4, [sp, #4]
 8008e92:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8008e96:	9400      	str	r4, [sp, #0]
 8008e98:	f7f9 fe58 	bl	8002b4c <HAL_HCD_HC_Init>
  usb_status = USBH_Get_USB_Status(hal_status);
 8008e9c:	f7ff ffcd 	bl	8008e3a <USBH_Get_USB_Status>
}
 8008ea0:	b004      	add	sp, #16
 8008ea2:	bd10      	pop	{r4, pc}

08008ea4 <USBH_LL_ClosePipe>:
{
 8008ea4:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008ea6:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 8008eaa:	f7f9 fe96 	bl	8002bda <HAL_HCD_HC_Halt>
  usb_status = USBH_Get_USB_Status(hal_status);
 8008eae:	f7ff ffc4 	bl	8008e3a <USBH_Get_USB_Status>
}
 8008eb2:	bd08      	pop	{r3, pc}

08008eb4 <USBH_LL_SubmitURB>:
{
 8008eb4:	b510      	push	{r4, lr}
 8008eb6:	b084      	sub	sp, #16
  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008eb8:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 8008ebc:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 8008ec0:	9403      	str	r4, [sp, #12]
 8008ec2:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8008ec6:	9402      	str	r4, [sp, #8]
 8008ec8:	9c07      	ldr	r4, [sp, #28]
 8008eca:	9401      	str	r4, [sp, #4]
 8008ecc:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8008ed0:	9400      	str	r4, [sp, #0]
 8008ed2:	f7f9 fee6 	bl	8002ca2 <HAL_HCD_HC_SubmitRequest>
  usb_status = USBH_Get_USB_Status(hal_status);
 8008ed6:	f7ff ffb0 	bl	8008e3a <USBH_Get_USB_Status>
}
 8008eda:	b004      	add	sp, #16
 8008edc:	bd10      	pop	{r4, pc}
	...

08008ee0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008ee0:	b508      	push	{r3, lr}
  uint8_t data = state;
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008ee2:	4602      	mov	r2, r0
 8008ee4:	b100      	cbz	r0, 8008ee8 <MX_DriverVbusFS+0x8>
    data = GPIO_PIN_RESET;
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008ee6:	2201      	movs	r2, #1
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_9,(GPIO_PinState)data);
 8008ee8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008eec:	4801      	ldr	r0, [pc, #4]	; (8008ef4 <MX_DriverVbusFS+0x14>)
 8008eee:	f7f9 fdd9 	bl	8002aa4 <HAL_GPIO_WritePin>
}
 8008ef2:	bd08      	pop	{r3, pc}
 8008ef4:	48001000 	.word	0x48001000

08008ef8 <__errno>:
 8008ef8:	4b01      	ldr	r3, [pc, #4]	; (8008f00 <__errno+0x8>)
 8008efa:	6818      	ldr	r0, [r3, #0]
 8008efc:	4770      	bx	lr
 8008efe:	bf00      	nop
 8008f00:	20000124 	.word	0x20000124

08008f04 <__sflush_r>:
 8008f04:	898a      	ldrh	r2, [r1, #12]
 8008f06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f0a:	4605      	mov	r5, r0
 8008f0c:	0710      	lsls	r0, r2, #28
 8008f0e:	460c      	mov	r4, r1
 8008f10:	d458      	bmi.n	8008fc4 <__sflush_r+0xc0>
 8008f12:	684b      	ldr	r3, [r1, #4]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	dc05      	bgt.n	8008f24 <__sflush_r+0x20>
 8008f18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	dc02      	bgt.n	8008f24 <__sflush_r+0x20>
 8008f1e:	2000      	movs	r0, #0
 8008f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f26:	2e00      	cmp	r6, #0
 8008f28:	d0f9      	beq.n	8008f1e <__sflush_r+0x1a>
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008f30:	682f      	ldr	r7, [r5, #0]
 8008f32:	602b      	str	r3, [r5, #0]
 8008f34:	d032      	beq.n	8008f9c <__sflush_r+0x98>
 8008f36:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008f38:	89a3      	ldrh	r3, [r4, #12]
 8008f3a:	075a      	lsls	r2, r3, #29
 8008f3c:	d505      	bpl.n	8008f4a <__sflush_r+0x46>
 8008f3e:	6863      	ldr	r3, [r4, #4]
 8008f40:	1ac0      	subs	r0, r0, r3
 8008f42:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008f44:	b10b      	cbz	r3, 8008f4a <__sflush_r+0x46>
 8008f46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008f48:	1ac0      	subs	r0, r0, r3
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	4602      	mov	r2, r0
 8008f4e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f50:	6a21      	ldr	r1, [r4, #32]
 8008f52:	4628      	mov	r0, r5
 8008f54:	47b0      	blx	r6
 8008f56:	1c43      	adds	r3, r0, #1
 8008f58:	89a3      	ldrh	r3, [r4, #12]
 8008f5a:	d106      	bne.n	8008f6a <__sflush_r+0x66>
 8008f5c:	6829      	ldr	r1, [r5, #0]
 8008f5e:	291d      	cmp	r1, #29
 8008f60:	d82c      	bhi.n	8008fbc <__sflush_r+0xb8>
 8008f62:	4a2a      	ldr	r2, [pc, #168]	; (800900c <__sflush_r+0x108>)
 8008f64:	40ca      	lsrs	r2, r1
 8008f66:	07d6      	lsls	r6, r2, #31
 8008f68:	d528      	bpl.n	8008fbc <__sflush_r+0xb8>
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	6062      	str	r2, [r4, #4]
 8008f6e:	04d9      	lsls	r1, r3, #19
 8008f70:	6922      	ldr	r2, [r4, #16]
 8008f72:	6022      	str	r2, [r4, #0]
 8008f74:	d504      	bpl.n	8008f80 <__sflush_r+0x7c>
 8008f76:	1c42      	adds	r2, r0, #1
 8008f78:	d101      	bne.n	8008f7e <__sflush_r+0x7a>
 8008f7a:	682b      	ldr	r3, [r5, #0]
 8008f7c:	b903      	cbnz	r3, 8008f80 <__sflush_r+0x7c>
 8008f7e:	6560      	str	r0, [r4, #84]	; 0x54
 8008f80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f82:	602f      	str	r7, [r5, #0]
 8008f84:	2900      	cmp	r1, #0
 8008f86:	d0ca      	beq.n	8008f1e <__sflush_r+0x1a>
 8008f88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f8c:	4299      	cmp	r1, r3
 8008f8e:	d002      	beq.n	8008f96 <__sflush_r+0x92>
 8008f90:	4628      	mov	r0, r5
 8008f92:	f000 f9c5 	bl	8009320 <_free_r>
 8008f96:	2000      	movs	r0, #0
 8008f98:	6360      	str	r0, [r4, #52]	; 0x34
 8008f9a:	e7c1      	b.n	8008f20 <__sflush_r+0x1c>
 8008f9c:	6a21      	ldr	r1, [r4, #32]
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	4628      	mov	r0, r5
 8008fa2:	47b0      	blx	r6
 8008fa4:	1c41      	adds	r1, r0, #1
 8008fa6:	d1c7      	bne.n	8008f38 <__sflush_r+0x34>
 8008fa8:	682b      	ldr	r3, [r5, #0]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d0c4      	beq.n	8008f38 <__sflush_r+0x34>
 8008fae:	2b1d      	cmp	r3, #29
 8008fb0:	d001      	beq.n	8008fb6 <__sflush_r+0xb2>
 8008fb2:	2b16      	cmp	r3, #22
 8008fb4:	d101      	bne.n	8008fba <__sflush_r+0xb6>
 8008fb6:	602f      	str	r7, [r5, #0]
 8008fb8:	e7b1      	b.n	8008f1e <__sflush_r+0x1a>
 8008fba:	89a3      	ldrh	r3, [r4, #12]
 8008fbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fc0:	81a3      	strh	r3, [r4, #12]
 8008fc2:	e7ad      	b.n	8008f20 <__sflush_r+0x1c>
 8008fc4:	690f      	ldr	r7, [r1, #16]
 8008fc6:	2f00      	cmp	r7, #0
 8008fc8:	d0a9      	beq.n	8008f1e <__sflush_r+0x1a>
 8008fca:	0793      	lsls	r3, r2, #30
 8008fcc:	680e      	ldr	r6, [r1, #0]
 8008fce:	bf08      	it	eq
 8008fd0:	694b      	ldreq	r3, [r1, #20]
 8008fd2:	600f      	str	r7, [r1, #0]
 8008fd4:	bf18      	it	ne
 8008fd6:	2300      	movne	r3, #0
 8008fd8:	eba6 0807 	sub.w	r8, r6, r7
 8008fdc:	608b      	str	r3, [r1, #8]
 8008fde:	f1b8 0f00 	cmp.w	r8, #0
 8008fe2:	dd9c      	ble.n	8008f1e <__sflush_r+0x1a>
 8008fe4:	6a21      	ldr	r1, [r4, #32]
 8008fe6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008fe8:	4643      	mov	r3, r8
 8008fea:	463a      	mov	r2, r7
 8008fec:	4628      	mov	r0, r5
 8008fee:	47b0      	blx	r6
 8008ff0:	2800      	cmp	r0, #0
 8008ff2:	dc06      	bgt.n	8009002 <__sflush_r+0xfe>
 8008ff4:	89a3      	ldrh	r3, [r4, #12]
 8008ff6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ffa:	81a3      	strh	r3, [r4, #12]
 8008ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8009000:	e78e      	b.n	8008f20 <__sflush_r+0x1c>
 8009002:	4407      	add	r7, r0
 8009004:	eba8 0800 	sub.w	r8, r8, r0
 8009008:	e7e9      	b.n	8008fde <__sflush_r+0xda>
 800900a:	bf00      	nop
 800900c:	20400001 	.word	0x20400001

08009010 <_fflush_r>:
 8009010:	b538      	push	{r3, r4, r5, lr}
 8009012:	690b      	ldr	r3, [r1, #16]
 8009014:	4605      	mov	r5, r0
 8009016:	460c      	mov	r4, r1
 8009018:	b913      	cbnz	r3, 8009020 <_fflush_r+0x10>
 800901a:	2500      	movs	r5, #0
 800901c:	4628      	mov	r0, r5
 800901e:	bd38      	pop	{r3, r4, r5, pc}
 8009020:	b118      	cbz	r0, 800902a <_fflush_r+0x1a>
 8009022:	6983      	ldr	r3, [r0, #24]
 8009024:	b90b      	cbnz	r3, 800902a <_fflush_r+0x1a>
 8009026:	f000 f887 	bl	8009138 <__sinit>
 800902a:	4b14      	ldr	r3, [pc, #80]	; (800907c <_fflush_r+0x6c>)
 800902c:	429c      	cmp	r4, r3
 800902e:	d11b      	bne.n	8009068 <_fflush_r+0x58>
 8009030:	686c      	ldr	r4, [r5, #4]
 8009032:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d0ef      	beq.n	800901a <_fflush_r+0xa>
 800903a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800903c:	07d0      	lsls	r0, r2, #31
 800903e:	d404      	bmi.n	800904a <_fflush_r+0x3a>
 8009040:	0599      	lsls	r1, r3, #22
 8009042:	d402      	bmi.n	800904a <_fflush_r+0x3a>
 8009044:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009046:	f000 f93a 	bl	80092be <__retarget_lock_acquire_recursive>
 800904a:	4628      	mov	r0, r5
 800904c:	4621      	mov	r1, r4
 800904e:	f7ff ff59 	bl	8008f04 <__sflush_r>
 8009052:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009054:	07da      	lsls	r2, r3, #31
 8009056:	4605      	mov	r5, r0
 8009058:	d4e0      	bmi.n	800901c <_fflush_r+0xc>
 800905a:	89a3      	ldrh	r3, [r4, #12]
 800905c:	059b      	lsls	r3, r3, #22
 800905e:	d4dd      	bmi.n	800901c <_fflush_r+0xc>
 8009060:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009062:	f000 f92d 	bl	80092c0 <__retarget_lock_release_recursive>
 8009066:	e7d9      	b.n	800901c <_fflush_r+0xc>
 8009068:	4b05      	ldr	r3, [pc, #20]	; (8009080 <_fflush_r+0x70>)
 800906a:	429c      	cmp	r4, r3
 800906c:	d101      	bne.n	8009072 <_fflush_r+0x62>
 800906e:	68ac      	ldr	r4, [r5, #8]
 8009070:	e7df      	b.n	8009032 <_fflush_r+0x22>
 8009072:	4b04      	ldr	r3, [pc, #16]	; (8009084 <_fflush_r+0x74>)
 8009074:	429c      	cmp	r4, r3
 8009076:	bf08      	it	eq
 8009078:	68ec      	ldreq	r4, [r5, #12]
 800907a:	e7da      	b.n	8009032 <_fflush_r+0x22>
 800907c:	0800e59c 	.word	0x0800e59c
 8009080:	0800e5bc 	.word	0x0800e5bc
 8009084:	0800e57c 	.word	0x0800e57c

08009088 <std>:
 8009088:	2300      	movs	r3, #0
 800908a:	b510      	push	{r4, lr}
 800908c:	4604      	mov	r4, r0
 800908e:	e9c0 3300 	strd	r3, r3, [r0]
 8009092:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009096:	6083      	str	r3, [r0, #8]
 8009098:	8181      	strh	r1, [r0, #12]
 800909a:	6643      	str	r3, [r0, #100]	; 0x64
 800909c:	81c2      	strh	r2, [r0, #14]
 800909e:	6183      	str	r3, [r0, #24]
 80090a0:	4619      	mov	r1, r3
 80090a2:	2208      	movs	r2, #8
 80090a4:	305c      	adds	r0, #92	; 0x5c
 80090a6:	f000 f92b 	bl	8009300 <memset>
 80090aa:	4b05      	ldr	r3, [pc, #20]	; (80090c0 <std+0x38>)
 80090ac:	6263      	str	r3, [r4, #36]	; 0x24
 80090ae:	4b05      	ldr	r3, [pc, #20]	; (80090c4 <std+0x3c>)
 80090b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80090b2:	4b05      	ldr	r3, [pc, #20]	; (80090c8 <std+0x40>)
 80090b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80090b6:	4b05      	ldr	r3, [pc, #20]	; (80090cc <std+0x44>)
 80090b8:	6224      	str	r4, [r4, #32]
 80090ba:	6323      	str	r3, [r4, #48]	; 0x30
 80090bc:	bd10      	pop	{r4, pc}
 80090be:	bf00      	nop
 80090c0:	0800a3c5 	.word	0x0800a3c5
 80090c4:	0800a3eb 	.word	0x0800a3eb
 80090c8:	0800a423 	.word	0x0800a423
 80090cc:	0800a447 	.word	0x0800a447

080090d0 <_cleanup_r>:
 80090d0:	4901      	ldr	r1, [pc, #4]	; (80090d8 <_cleanup_r+0x8>)
 80090d2:	f000 b8af 	b.w	8009234 <_fwalk_reent>
 80090d6:	bf00      	nop
 80090d8:	08009011 	.word	0x08009011

080090dc <__sfmoreglue>:
 80090dc:	b570      	push	{r4, r5, r6, lr}
 80090de:	2268      	movs	r2, #104	; 0x68
 80090e0:	1e4d      	subs	r5, r1, #1
 80090e2:	4355      	muls	r5, r2
 80090e4:	460e      	mov	r6, r1
 80090e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80090ea:	f000 f985 	bl	80093f8 <_malloc_r>
 80090ee:	4604      	mov	r4, r0
 80090f0:	b140      	cbz	r0, 8009104 <__sfmoreglue+0x28>
 80090f2:	2100      	movs	r1, #0
 80090f4:	e9c0 1600 	strd	r1, r6, [r0]
 80090f8:	300c      	adds	r0, #12
 80090fa:	60a0      	str	r0, [r4, #8]
 80090fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009100:	f000 f8fe 	bl	8009300 <memset>
 8009104:	4620      	mov	r0, r4
 8009106:	bd70      	pop	{r4, r5, r6, pc}

08009108 <__sfp_lock_acquire>:
 8009108:	4801      	ldr	r0, [pc, #4]	; (8009110 <__sfp_lock_acquire+0x8>)
 800910a:	f000 b8d8 	b.w	80092be <__retarget_lock_acquire_recursive>
 800910e:	bf00      	nop
 8009110:	200014a9 	.word	0x200014a9

08009114 <__sfp_lock_release>:
 8009114:	4801      	ldr	r0, [pc, #4]	; (800911c <__sfp_lock_release+0x8>)
 8009116:	f000 b8d3 	b.w	80092c0 <__retarget_lock_release_recursive>
 800911a:	bf00      	nop
 800911c:	200014a9 	.word	0x200014a9

08009120 <__sinit_lock_acquire>:
 8009120:	4801      	ldr	r0, [pc, #4]	; (8009128 <__sinit_lock_acquire+0x8>)
 8009122:	f000 b8cc 	b.w	80092be <__retarget_lock_acquire_recursive>
 8009126:	bf00      	nop
 8009128:	200014aa 	.word	0x200014aa

0800912c <__sinit_lock_release>:
 800912c:	4801      	ldr	r0, [pc, #4]	; (8009134 <__sinit_lock_release+0x8>)
 800912e:	f000 b8c7 	b.w	80092c0 <__retarget_lock_release_recursive>
 8009132:	bf00      	nop
 8009134:	200014aa 	.word	0x200014aa

08009138 <__sinit>:
 8009138:	b510      	push	{r4, lr}
 800913a:	4604      	mov	r4, r0
 800913c:	f7ff fff0 	bl	8009120 <__sinit_lock_acquire>
 8009140:	69a3      	ldr	r3, [r4, #24]
 8009142:	b11b      	cbz	r3, 800914c <__sinit+0x14>
 8009144:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009148:	f7ff bff0 	b.w	800912c <__sinit_lock_release>
 800914c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009150:	6523      	str	r3, [r4, #80]	; 0x50
 8009152:	4b13      	ldr	r3, [pc, #76]	; (80091a0 <__sinit+0x68>)
 8009154:	4a13      	ldr	r2, [pc, #76]	; (80091a4 <__sinit+0x6c>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	62a2      	str	r2, [r4, #40]	; 0x28
 800915a:	42a3      	cmp	r3, r4
 800915c:	bf04      	itt	eq
 800915e:	2301      	moveq	r3, #1
 8009160:	61a3      	streq	r3, [r4, #24]
 8009162:	4620      	mov	r0, r4
 8009164:	f000 f820 	bl	80091a8 <__sfp>
 8009168:	6060      	str	r0, [r4, #4]
 800916a:	4620      	mov	r0, r4
 800916c:	f000 f81c 	bl	80091a8 <__sfp>
 8009170:	60a0      	str	r0, [r4, #8]
 8009172:	4620      	mov	r0, r4
 8009174:	f000 f818 	bl	80091a8 <__sfp>
 8009178:	2200      	movs	r2, #0
 800917a:	60e0      	str	r0, [r4, #12]
 800917c:	2104      	movs	r1, #4
 800917e:	6860      	ldr	r0, [r4, #4]
 8009180:	f7ff ff82 	bl	8009088 <std>
 8009184:	68a0      	ldr	r0, [r4, #8]
 8009186:	2201      	movs	r2, #1
 8009188:	2109      	movs	r1, #9
 800918a:	f7ff ff7d 	bl	8009088 <std>
 800918e:	68e0      	ldr	r0, [r4, #12]
 8009190:	2202      	movs	r2, #2
 8009192:	2112      	movs	r1, #18
 8009194:	f7ff ff78 	bl	8009088 <std>
 8009198:	2301      	movs	r3, #1
 800919a:	61a3      	str	r3, [r4, #24]
 800919c:	e7d2      	b.n	8009144 <__sinit+0xc>
 800919e:	bf00      	nop
 80091a0:	0800e5dc 	.word	0x0800e5dc
 80091a4:	080090d1 	.word	0x080090d1

080091a8 <__sfp>:
 80091a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091aa:	4607      	mov	r7, r0
 80091ac:	f7ff ffac 	bl	8009108 <__sfp_lock_acquire>
 80091b0:	4b1e      	ldr	r3, [pc, #120]	; (800922c <__sfp+0x84>)
 80091b2:	681e      	ldr	r6, [r3, #0]
 80091b4:	69b3      	ldr	r3, [r6, #24]
 80091b6:	b913      	cbnz	r3, 80091be <__sfp+0x16>
 80091b8:	4630      	mov	r0, r6
 80091ba:	f7ff ffbd 	bl	8009138 <__sinit>
 80091be:	3648      	adds	r6, #72	; 0x48
 80091c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80091c4:	3b01      	subs	r3, #1
 80091c6:	d503      	bpl.n	80091d0 <__sfp+0x28>
 80091c8:	6833      	ldr	r3, [r6, #0]
 80091ca:	b30b      	cbz	r3, 8009210 <__sfp+0x68>
 80091cc:	6836      	ldr	r6, [r6, #0]
 80091ce:	e7f7      	b.n	80091c0 <__sfp+0x18>
 80091d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80091d4:	b9d5      	cbnz	r5, 800920c <__sfp+0x64>
 80091d6:	4b16      	ldr	r3, [pc, #88]	; (8009230 <__sfp+0x88>)
 80091d8:	60e3      	str	r3, [r4, #12]
 80091da:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80091de:	6665      	str	r5, [r4, #100]	; 0x64
 80091e0:	f000 f86c 	bl	80092bc <__retarget_lock_init_recursive>
 80091e4:	f7ff ff96 	bl	8009114 <__sfp_lock_release>
 80091e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80091ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80091f0:	6025      	str	r5, [r4, #0]
 80091f2:	61a5      	str	r5, [r4, #24]
 80091f4:	2208      	movs	r2, #8
 80091f6:	4629      	mov	r1, r5
 80091f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80091fc:	f000 f880 	bl	8009300 <memset>
 8009200:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009204:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009208:	4620      	mov	r0, r4
 800920a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800920c:	3468      	adds	r4, #104	; 0x68
 800920e:	e7d9      	b.n	80091c4 <__sfp+0x1c>
 8009210:	2104      	movs	r1, #4
 8009212:	4638      	mov	r0, r7
 8009214:	f7ff ff62 	bl	80090dc <__sfmoreglue>
 8009218:	4604      	mov	r4, r0
 800921a:	6030      	str	r0, [r6, #0]
 800921c:	2800      	cmp	r0, #0
 800921e:	d1d5      	bne.n	80091cc <__sfp+0x24>
 8009220:	f7ff ff78 	bl	8009114 <__sfp_lock_release>
 8009224:	230c      	movs	r3, #12
 8009226:	603b      	str	r3, [r7, #0]
 8009228:	e7ee      	b.n	8009208 <__sfp+0x60>
 800922a:	bf00      	nop
 800922c:	0800e5dc 	.word	0x0800e5dc
 8009230:	ffff0001 	.word	0xffff0001

08009234 <_fwalk_reent>:
 8009234:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009238:	4606      	mov	r6, r0
 800923a:	4688      	mov	r8, r1
 800923c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009240:	2700      	movs	r7, #0
 8009242:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009246:	f1b9 0901 	subs.w	r9, r9, #1
 800924a:	d505      	bpl.n	8009258 <_fwalk_reent+0x24>
 800924c:	6824      	ldr	r4, [r4, #0]
 800924e:	2c00      	cmp	r4, #0
 8009250:	d1f7      	bne.n	8009242 <_fwalk_reent+0xe>
 8009252:	4638      	mov	r0, r7
 8009254:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009258:	89ab      	ldrh	r3, [r5, #12]
 800925a:	2b01      	cmp	r3, #1
 800925c:	d907      	bls.n	800926e <_fwalk_reent+0x3a>
 800925e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009262:	3301      	adds	r3, #1
 8009264:	d003      	beq.n	800926e <_fwalk_reent+0x3a>
 8009266:	4629      	mov	r1, r5
 8009268:	4630      	mov	r0, r6
 800926a:	47c0      	blx	r8
 800926c:	4307      	orrs	r7, r0
 800926e:	3568      	adds	r5, #104	; 0x68
 8009270:	e7e9      	b.n	8009246 <_fwalk_reent+0x12>
	...

08009274 <__libc_init_array>:
 8009274:	b570      	push	{r4, r5, r6, lr}
 8009276:	4d0d      	ldr	r5, [pc, #52]	; (80092ac <__libc_init_array+0x38>)
 8009278:	4c0d      	ldr	r4, [pc, #52]	; (80092b0 <__libc_init_array+0x3c>)
 800927a:	1b64      	subs	r4, r4, r5
 800927c:	10a4      	asrs	r4, r4, #2
 800927e:	2600      	movs	r6, #0
 8009280:	42a6      	cmp	r6, r4
 8009282:	d109      	bne.n	8009298 <__libc_init_array+0x24>
 8009284:	4d0b      	ldr	r5, [pc, #44]	; (80092b4 <__libc_init_array+0x40>)
 8009286:	4c0c      	ldr	r4, [pc, #48]	; (80092b8 <__libc_init_array+0x44>)
 8009288:	f004 ffcc 	bl	800e224 <_init>
 800928c:	1b64      	subs	r4, r4, r5
 800928e:	10a4      	asrs	r4, r4, #2
 8009290:	2600      	movs	r6, #0
 8009292:	42a6      	cmp	r6, r4
 8009294:	d105      	bne.n	80092a2 <__libc_init_array+0x2e>
 8009296:	bd70      	pop	{r4, r5, r6, pc}
 8009298:	f855 3b04 	ldr.w	r3, [r5], #4
 800929c:	4798      	blx	r3
 800929e:	3601      	adds	r6, #1
 80092a0:	e7ee      	b.n	8009280 <__libc_init_array+0xc>
 80092a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80092a6:	4798      	blx	r3
 80092a8:	3601      	adds	r6, #1
 80092aa:	e7f2      	b.n	8009292 <__libc_init_array+0x1e>
 80092ac:	0800ea3c 	.word	0x0800ea3c
 80092b0:	0800ea3c 	.word	0x0800ea3c
 80092b4:	0800ea3c 	.word	0x0800ea3c
 80092b8:	0800ea40 	.word	0x0800ea40

080092bc <__retarget_lock_init_recursive>:
 80092bc:	4770      	bx	lr

080092be <__retarget_lock_acquire_recursive>:
 80092be:	4770      	bx	lr

080092c0 <__retarget_lock_release_recursive>:
 80092c0:	4770      	bx	lr
	...

080092c4 <malloc>:
 80092c4:	4b02      	ldr	r3, [pc, #8]	; (80092d0 <malloc+0xc>)
 80092c6:	4601      	mov	r1, r0
 80092c8:	6818      	ldr	r0, [r3, #0]
 80092ca:	f000 b895 	b.w	80093f8 <_malloc_r>
 80092ce:	bf00      	nop
 80092d0:	20000124 	.word	0x20000124

080092d4 <free>:
 80092d4:	4b02      	ldr	r3, [pc, #8]	; (80092e0 <free+0xc>)
 80092d6:	4601      	mov	r1, r0
 80092d8:	6818      	ldr	r0, [r3, #0]
 80092da:	f000 b821 	b.w	8009320 <_free_r>
 80092de:	bf00      	nop
 80092e0:	20000124 	.word	0x20000124

080092e4 <memcpy>:
 80092e4:	440a      	add	r2, r1
 80092e6:	4291      	cmp	r1, r2
 80092e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80092ec:	d100      	bne.n	80092f0 <memcpy+0xc>
 80092ee:	4770      	bx	lr
 80092f0:	b510      	push	{r4, lr}
 80092f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80092fa:	4291      	cmp	r1, r2
 80092fc:	d1f9      	bne.n	80092f2 <memcpy+0xe>
 80092fe:	bd10      	pop	{r4, pc}

08009300 <memset>:
 8009300:	4402      	add	r2, r0
 8009302:	4603      	mov	r3, r0
 8009304:	4293      	cmp	r3, r2
 8009306:	d100      	bne.n	800930a <memset+0xa>
 8009308:	4770      	bx	lr
 800930a:	f803 1b01 	strb.w	r1, [r3], #1
 800930e:	e7f9      	b.n	8009304 <memset+0x4>

08009310 <malloc_usable_size>:
 8009310:	4b02      	ldr	r3, [pc, #8]	; (800931c <malloc_usable_size+0xc>)
 8009312:	4601      	mov	r1, r0
 8009314:	6818      	ldr	r0, [r3, #0]
 8009316:	f000 b8e3 	b.w	80094e0 <_malloc_usable_size_r>
 800931a:	bf00      	nop
 800931c:	20000124 	.word	0x20000124

08009320 <_free_r>:
 8009320:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009322:	2900      	cmp	r1, #0
 8009324:	d044      	beq.n	80093b0 <_free_r+0x90>
 8009326:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800932a:	9001      	str	r0, [sp, #4]
 800932c:	2b00      	cmp	r3, #0
 800932e:	f1a1 0404 	sub.w	r4, r1, #4
 8009332:	bfb8      	it	lt
 8009334:	18e4      	addlt	r4, r4, r3
 8009336:	f003 faaf 	bl	800c898 <__malloc_lock>
 800933a:	4a1e      	ldr	r2, [pc, #120]	; (80093b4 <_free_r+0x94>)
 800933c:	9801      	ldr	r0, [sp, #4]
 800933e:	6813      	ldr	r3, [r2, #0]
 8009340:	b933      	cbnz	r3, 8009350 <_free_r+0x30>
 8009342:	6063      	str	r3, [r4, #4]
 8009344:	6014      	str	r4, [r2, #0]
 8009346:	b003      	add	sp, #12
 8009348:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800934c:	f003 baaa 	b.w	800c8a4 <__malloc_unlock>
 8009350:	42a3      	cmp	r3, r4
 8009352:	d908      	bls.n	8009366 <_free_r+0x46>
 8009354:	6825      	ldr	r5, [r4, #0]
 8009356:	1961      	adds	r1, r4, r5
 8009358:	428b      	cmp	r3, r1
 800935a:	bf01      	itttt	eq
 800935c:	6819      	ldreq	r1, [r3, #0]
 800935e:	685b      	ldreq	r3, [r3, #4]
 8009360:	1949      	addeq	r1, r1, r5
 8009362:	6021      	streq	r1, [r4, #0]
 8009364:	e7ed      	b.n	8009342 <_free_r+0x22>
 8009366:	461a      	mov	r2, r3
 8009368:	685b      	ldr	r3, [r3, #4]
 800936a:	b10b      	cbz	r3, 8009370 <_free_r+0x50>
 800936c:	42a3      	cmp	r3, r4
 800936e:	d9fa      	bls.n	8009366 <_free_r+0x46>
 8009370:	6811      	ldr	r1, [r2, #0]
 8009372:	1855      	adds	r5, r2, r1
 8009374:	42a5      	cmp	r5, r4
 8009376:	d10b      	bne.n	8009390 <_free_r+0x70>
 8009378:	6824      	ldr	r4, [r4, #0]
 800937a:	4421      	add	r1, r4
 800937c:	1854      	adds	r4, r2, r1
 800937e:	42a3      	cmp	r3, r4
 8009380:	6011      	str	r1, [r2, #0]
 8009382:	d1e0      	bne.n	8009346 <_free_r+0x26>
 8009384:	681c      	ldr	r4, [r3, #0]
 8009386:	685b      	ldr	r3, [r3, #4]
 8009388:	6053      	str	r3, [r2, #4]
 800938a:	4421      	add	r1, r4
 800938c:	6011      	str	r1, [r2, #0]
 800938e:	e7da      	b.n	8009346 <_free_r+0x26>
 8009390:	d902      	bls.n	8009398 <_free_r+0x78>
 8009392:	230c      	movs	r3, #12
 8009394:	6003      	str	r3, [r0, #0]
 8009396:	e7d6      	b.n	8009346 <_free_r+0x26>
 8009398:	6825      	ldr	r5, [r4, #0]
 800939a:	1961      	adds	r1, r4, r5
 800939c:	428b      	cmp	r3, r1
 800939e:	bf04      	itt	eq
 80093a0:	6819      	ldreq	r1, [r3, #0]
 80093a2:	685b      	ldreq	r3, [r3, #4]
 80093a4:	6063      	str	r3, [r4, #4]
 80093a6:	bf04      	itt	eq
 80093a8:	1949      	addeq	r1, r1, r5
 80093aa:	6021      	streq	r1, [r4, #0]
 80093ac:	6054      	str	r4, [r2, #4]
 80093ae:	e7ca      	b.n	8009346 <_free_r+0x26>
 80093b0:	b003      	add	sp, #12
 80093b2:	bd30      	pop	{r4, r5, pc}
 80093b4:	200014ac 	.word	0x200014ac

080093b8 <sbrk_aligned>:
 80093b8:	b570      	push	{r4, r5, r6, lr}
 80093ba:	4e0e      	ldr	r6, [pc, #56]	; (80093f4 <sbrk_aligned+0x3c>)
 80093bc:	460c      	mov	r4, r1
 80093be:	6831      	ldr	r1, [r6, #0]
 80093c0:	4605      	mov	r5, r0
 80093c2:	b911      	cbnz	r1, 80093ca <sbrk_aligned+0x12>
 80093c4:	f000 ff9c 	bl	800a300 <_sbrk_r>
 80093c8:	6030      	str	r0, [r6, #0]
 80093ca:	4621      	mov	r1, r4
 80093cc:	4628      	mov	r0, r5
 80093ce:	f000 ff97 	bl	800a300 <_sbrk_r>
 80093d2:	1c43      	adds	r3, r0, #1
 80093d4:	d00a      	beq.n	80093ec <sbrk_aligned+0x34>
 80093d6:	1cc4      	adds	r4, r0, #3
 80093d8:	f024 0403 	bic.w	r4, r4, #3
 80093dc:	42a0      	cmp	r0, r4
 80093de:	d007      	beq.n	80093f0 <sbrk_aligned+0x38>
 80093e0:	1a21      	subs	r1, r4, r0
 80093e2:	4628      	mov	r0, r5
 80093e4:	f000 ff8c 	bl	800a300 <_sbrk_r>
 80093e8:	3001      	adds	r0, #1
 80093ea:	d101      	bne.n	80093f0 <sbrk_aligned+0x38>
 80093ec:	f04f 34ff 	mov.w	r4, #4294967295
 80093f0:	4620      	mov	r0, r4
 80093f2:	bd70      	pop	{r4, r5, r6, pc}
 80093f4:	200014b0 	.word	0x200014b0

080093f8 <_malloc_r>:
 80093f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093fc:	1ccd      	adds	r5, r1, #3
 80093fe:	f025 0503 	bic.w	r5, r5, #3
 8009402:	3508      	adds	r5, #8
 8009404:	2d0c      	cmp	r5, #12
 8009406:	bf38      	it	cc
 8009408:	250c      	movcc	r5, #12
 800940a:	2d00      	cmp	r5, #0
 800940c:	4607      	mov	r7, r0
 800940e:	db01      	blt.n	8009414 <_malloc_r+0x1c>
 8009410:	42a9      	cmp	r1, r5
 8009412:	d905      	bls.n	8009420 <_malloc_r+0x28>
 8009414:	230c      	movs	r3, #12
 8009416:	603b      	str	r3, [r7, #0]
 8009418:	2600      	movs	r6, #0
 800941a:	4630      	mov	r0, r6
 800941c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009420:	4e2e      	ldr	r6, [pc, #184]	; (80094dc <_malloc_r+0xe4>)
 8009422:	f003 fa39 	bl	800c898 <__malloc_lock>
 8009426:	6833      	ldr	r3, [r6, #0]
 8009428:	461c      	mov	r4, r3
 800942a:	bb34      	cbnz	r4, 800947a <_malloc_r+0x82>
 800942c:	4629      	mov	r1, r5
 800942e:	4638      	mov	r0, r7
 8009430:	f7ff ffc2 	bl	80093b8 <sbrk_aligned>
 8009434:	1c43      	adds	r3, r0, #1
 8009436:	4604      	mov	r4, r0
 8009438:	d14d      	bne.n	80094d6 <_malloc_r+0xde>
 800943a:	6834      	ldr	r4, [r6, #0]
 800943c:	4626      	mov	r6, r4
 800943e:	2e00      	cmp	r6, #0
 8009440:	d140      	bne.n	80094c4 <_malloc_r+0xcc>
 8009442:	6823      	ldr	r3, [r4, #0]
 8009444:	4631      	mov	r1, r6
 8009446:	4638      	mov	r0, r7
 8009448:	eb04 0803 	add.w	r8, r4, r3
 800944c:	f000 ff58 	bl	800a300 <_sbrk_r>
 8009450:	4580      	cmp	r8, r0
 8009452:	d13a      	bne.n	80094ca <_malloc_r+0xd2>
 8009454:	6821      	ldr	r1, [r4, #0]
 8009456:	3503      	adds	r5, #3
 8009458:	1a6d      	subs	r5, r5, r1
 800945a:	f025 0503 	bic.w	r5, r5, #3
 800945e:	3508      	adds	r5, #8
 8009460:	2d0c      	cmp	r5, #12
 8009462:	bf38      	it	cc
 8009464:	250c      	movcc	r5, #12
 8009466:	4629      	mov	r1, r5
 8009468:	4638      	mov	r0, r7
 800946a:	f7ff ffa5 	bl	80093b8 <sbrk_aligned>
 800946e:	3001      	adds	r0, #1
 8009470:	d02b      	beq.n	80094ca <_malloc_r+0xd2>
 8009472:	6823      	ldr	r3, [r4, #0]
 8009474:	442b      	add	r3, r5
 8009476:	6023      	str	r3, [r4, #0]
 8009478:	e00e      	b.n	8009498 <_malloc_r+0xa0>
 800947a:	6822      	ldr	r2, [r4, #0]
 800947c:	1b52      	subs	r2, r2, r5
 800947e:	d41e      	bmi.n	80094be <_malloc_r+0xc6>
 8009480:	2a0b      	cmp	r2, #11
 8009482:	d916      	bls.n	80094b2 <_malloc_r+0xba>
 8009484:	1961      	adds	r1, r4, r5
 8009486:	42a3      	cmp	r3, r4
 8009488:	6025      	str	r5, [r4, #0]
 800948a:	bf18      	it	ne
 800948c:	6059      	strne	r1, [r3, #4]
 800948e:	6863      	ldr	r3, [r4, #4]
 8009490:	bf08      	it	eq
 8009492:	6031      	streq	r1, [r6, #0]
 8009494:	5162      	str	r2, [r4, r5]
 8009496:	604b      	str	r3, [r1, #4]
 8009498:	4638      	mov	r0, r7
 800949a:	f104 060b 	add.w	r6, r4, #11
 800949e:	f003 fa01 	bl	800c8a4 <__malloc_unlock>
 80094a2:	f026 0607 	bic.w	r6, r6, #7
 80094a6:	1d23      	adds	r3, r4, #4
 80094a8:	1af2      	subs	r2, r6, r3
 80094aa:	d0b6      	beq.n	800941a <_malloc_r+0x22>
 80094ac:	1b9b      	subs	r3, r3, r6
 80094ae:	50a3      	str	r3, [r4, r2]
 80094b0:	e7b3      	b.n	800941a <_malloc_r+0x22>
 80094b2:	6862      	ldr	r2, [r4, #4]
 80094b4:	42a3      	cmp	r3, r4
 80094b6:	bf0c      	ite	eq
 80094b8:	6032      	streq	r2, [r6, #0]
 80094ba:	605a      	strne	r2, [r3, #4]
 80094bc:	e7ec      	b.n	8009498 <_malloc_r+0xa0>
 80094be:	4623      	mov	r3, r4
 80094c0:	6864      	ldr	r4, [r4, #4]
 80094c2:	e7b2      	b.n	800942a <_malloc_r+0x32>
 80094c4:	4634      	mov	r4, r6
 80094c6:	6876      	ldr	r6, [r6, #4]
 80094c8:	e7b9      	b.n	800943e <_malloc_r+0x46>
 80094ca:	230c      	movs	r3, #12
 80094cc:	603b      	str	r3, [r7, #0]
 80094ce:	4638      	mov	r0, r7
 80094d0:	f003 f9e8 	bl	800c8a4 <__malloc_unlock>
 80094d4:	e7a1      	b.n	800941a <_malloc_r+0x22>
 80094d6:	6025      	str	r5, [r4, #0]
 80094d8:	e7de      	b.n	8009498 <_malloc_r+0xa0>
 80094da:	bf00      	nop
 80094dc:	200014ac 	.word	0x200014ac

080094e0 <_malloc_usable_size_r>:
 80094e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094e4:	1f18      	subs	r0, r3, #4
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	bfbc      	itt	lt
 80094ea:	580b      	ldrlt	r3, [r1, r0]
 80094ec:	18c0      	addlt	r0, r0, r3
 80094ee:	4770      	bx	lr

080094f0 <__cvt>:
 80094f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80094f4:	ec55 4b10 	vmov	r4, r5, d0
 80094f8:	2d00      	cmp	r5, #0
 80094fa:	460e      	mov	r6, r1
 80094fc:	4619      	mov	r1, r3
 80094fe:	462b      	mov	r3, r5
 8009500:	bfbb      	ittet	lt
 8009502:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009506:	461d      	movlt	r5, r3
 8009508:	2300      	movge	r3, #0
 800950a:	232d      	movlt	r3, #45	; 0x2d
 800950c:	700b      	strb	r3, [r1, #0]
 800950e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009510:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009514:	4691      	mov	r9, r2
 8009516:	f023 0820 	bic.w	r8, r3, #32
 800951a:	bfbc      	itt	lt
 800951c:	4622      	movlt	r2, r4
 800951e:	4614      	movlt	r4, r2
 8009520:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009524:	d005      	beq.n	8009532 <__cvt+0x42>
 8009526:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800952a:	d100      	bne.n	800952e <__cvt+0x3e>
 800952c:	3601      	adds	r6, #1
 800952e:	2102      	movs	r1, #2
 8009530:	e000      	b.n	8009534 <__cvt+0x44>
 8009532:	2103      	movs	r1, #3
 8009534:	ab03      	add	r3, sp, #12
 8009536:	9301      	str	r3, [sp, #4]
 8009538:	ab02      	add	r3, sp, #8
 800953a:	9300      	str	r3, [sp, #0]
 800953c:	ec45 4b10 	vmov	d0, r4, r5
 8009540:	4653      	mov	r3, sl
 8009542:	4632      	mov	r2, r6
 8009544:	f001 ffbc 	bl	800b4c0 <_dtoa_r>
 8009548:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800954c:	4607      	mov	r7, r0
 800954e:	d102      	bne.n	8009556 <__cvt+0x66>
 8009550:	f019 0f01 	tst.w	r9, #1
 8009554:	d022      	beq.n	800959c <__cvt+0xac>
 8009556:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800955a:	eb07 0906 	add.w	r9, r7, r6
 800955e:	d110      	bne.n	8009582 <__cvt+0x92>
 8009560:	783b      	ldrb	r3, [r7, #0]
 8009562:	2b30      	cmp	r3, #48	; 0x30
 8009564:	d10a      	bne.n	800957c <__cvt+0x8c>
 8009566:	2200      	movs	r2, #0
 8009568:	2300      	movs	r3, #0
 800956a:	4620      	mov	r0, r4
 800956c:	4629      	mov	r1, r5
 800956e:	f7f7 fac3 	bl	8000af8 <__aeabi_dcmpeq>
 8009572:	b918      	cbnz	r0, 800957c <__cvt+0x8c>
 8009574:	f1c6 0601 	rsb	r6, r6, #1
 8009578:	f8ca 6000 	str.w	r6, [sl]
 800957c:	f8da 3000 	ldr.w	r3, [sl]
 8009580:	4499      	add	r9, r3
 8009582:	2200      	movs	r2, #0
 8009584:	2300      	movs	r3, #0
 8009586:	4620      	mov	r0, r4
 8009588:	4629      	mov	r1, r5
 800958a:	f7f7 fab5 	bl	8000af8 <__aeabi_dcmpeq>
 800958e:	b108      	cbz	r0, 8009594 <__cvt+0xa4>
 8009590:	f8cd 900c 	str.w	r9, [sp, #12]
 8009594:	2230      	movs	r2, #48	; 0x30
 8009596:	9b03      	ldr	r3, [sp, #12]
 8009598:	454b      	cmp	r3, r9
 800959a:	d307      	bcc.n	80095ac <__cvt+0xbc>
 800959c:	9b03      	ldr	r3, [sp, #12]
 800959e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80095a0:	1bdb      	subs	r3, r3, r7
 80095a2:	4638      	mov	r0, r7
 80095a4:	6013      	str	r3, [r2, #0]
 80095a6:	b004      	add	sp, #16
 80095a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095ac:	1c59      	adds	r1, r3, #1
 80095ae:	9103      	str	r1, [sp, #12]
 80095b0:	701a      	strb	r2, [r3, #0]
 80095b2:	e7f0      	b.n	8009596 <__cvt+0xa6>

080095b4 <__exponent>:
 80095b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80095b6:	4603      	mov	r3, r0
 80095b8:	2900      	cmp	r1, #0
 80095ba:	bfb8      	it	lt
 80095bc:	4249      	neglt	r1, r1
 80095be:	f803 2b02 	strb.w	r2, [r3], #2
 80095c2:	bfb4      	ite	lt
 80095c4:	222d      	movlt	r2, #45	; 0x2d
 80095c6:	222b      	movge	r2, #43	; 0x2b
 80095c8:	2909      	cmp	r1, #9
 80095ca:	7042      	strb	r2, [r0, #1]
 80095cc:	dd2a      	ble.n	8009624 <__exponent+0x70>
 80095ce:	f10d 0407 	add.w	r4, sp, #7
 80095d2:	46a4      	mov	ip, r4
 80095d4:	270a      	movs	r7, #10
 80095d6:	46a6      	mov	lr, r4
 80095d8:	460a      	mov	r2, r1
 80095da:	fb91 f6f7 	sdiv	r6, r1, r7
 80095de:	fb07 1516 	mls	r5, r7, r6, r1
 80095e2:	3530      	adds	r5, #48	; 0x30
 80095e4:	2a63      	cmp	r2, #99	; 0x63
 80095e6:	f104 34ff 	add.w	r4, r4, #4294967295
 80095ea:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80095ee:	4631      	mov	r1, r6
 80095f0:	dcf1      	bgt.n	80095d6 <__exponent+0x22>
 80095f2:	3130      	adds	r1, #48	; 0x30
 80095f4:	f1ae 0502 	sub.w	r5, lr, #2
 80095f8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80095fc:	1c44      	adds	r4, r0, #1
 80095fe:	4629      	mov	r1, r5
 8009600:	4561      	cmp	r1, ip
 8009602:	d30a      	bcc.n	800961a <__exponent+0x66>
 8009604:	f10d 0209 	add.w	r2, sp, #9
 8009608:	eba2 020e 	sub.w	r2, r2, lr
 800960c:	4565      	cmp	r5, ip
 800960e:	bf88      	it	hi
 8009610:	2200      	movhi	r2, #0
 8009612:	4413      	add	r3, r2
 8009614:	1a18      	subs	r0, r3, r0
 8009616:	b003      	add	sp, #12
 8009618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800961a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800961e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009622:	e7ed      	b.n	8009600 <__exponent+0x4c>
 8009624:	2330      	movs	r3, #48	; 0x30
 8009626:	3130      	adds	r1, #48	; 0x30
 8009628:	7083      	strb	r3, [r0, #2]
 800962a:	70c1      	strb	r1, [r0, #3]
 800962c:	1d03      	adds	r3, r0, #4
 800962e:	e7f1      	b.n	8009614 <__exponent+0x60>

08009630 <_printf_float>:
 8009630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009634:	ed2d 8b02 	vpush	{d8}
 8009638:	b08d      	sub	sp, #52	; 0x34
 800963a:	460c      	mov	r4, r1
 800963c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009640:	4616      	mov	r6, r2
 8009642:	461f      	mov	r7, r3
 8009644:	4605      	mov	r5, r0
 8009646:	f003 f899 	bl	800c77c <_localeconv_r>
 800964a:	f8d0 a000 	ldr.w	sl, [r0]
 800964e:	4650      	mov	r0, sl
 8009650:	f7f6 fdd6 	bl	8000200 <strlen>
 8009654:	2300      	movs	r3, #0
 8009656:	930a      	str	r3, [sp, #40]	; 0x28
 8009658:	6823      	ldr	r3, [r4, #0]
 800965a:	9305      	str	r3, [sp, #20]
 800965c:	f8d8 3000 	ldr.w	r3, [r8]
 8009660:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009664:	3307      	adds	r3, #7
 8009666:	f023 0307 	bic.w	r3, r3, #7
 800966a:	f103 0208 	add.w	r2, r3, #8
 800966e:	f8c8 2000 	str.w	r2, [r8]
 8009672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009676:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800967a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800967e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009682:	9307      	str	r3, [sp, #28]
 8009684:	f8cd 8018 	str.w	r8, [sp, #24]
 8009688:	ee08 0a10 	vmov	s16, r0
 800968c:	4b9f      	ldr	r3, [pc, #636]	; (800990c <_printf_float+0x2dc>)
 800968e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009692:	f04f 32ff 	mov.w	r2, #4294967295
 8009696:	f7f7 fa61 	bl	8000b5c <__aeabi_dcmpun>
 800969a:	bb88      	cbnz	r0, 8009700 <_printf_float+0xd0>
 800969c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80096a0:	4b9a      	ldr	r3, [pc, #616]	; (800990c <_printf_float+0x2dc>)
 80096a2:	f04f 32ff 	mov.w	r2, #4294967295
 80096a6:	f7f7 fa3b 	bl	8000b20 <__aeabi_dcmple>
 80096aa:	bb48      	cbnz	r0, 8009700 <_printf_float+0xd0>
 80096ac:	2200      	movs	r2, #0
 80096ae:	2300      	movs	r3, #0
 80096b0:	4640      	mov	r0, r8
 80096b2:	4649      	mov	r1, r9
 80096b4:	f7f7 fa2a 	bl	8000b0c <__aeabi_dcmplt>
 80096b8:	b110      	cbz	r0, 80096c0 <_printf_float+0x90>
 80096ba:	232d      	movs	r3, #45	; 0x2d
 80096bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096c0:	4b93      	ldr	r3, [pc, #588]	; (8009910 <_printf_float+0x2e0>)
 80096c2:	4894      	ldr	r0, [pc, #592]	; (8009914 <_printf_float+0x2e4>)
 80096c4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80096c8:	bf94      	ite	ls
 80096ca:	4698      	movls	r8, r3
 80096cc:	4680      	movhi	r8, r0
 80096ce:	2303      	movs	r3, #3
 80096d0:	6123      	str	r3, [r4, #16]
 80096d2:	9b05      	ldr	r3, [sp, #20]
 80096d4:	f023 0204 	bic.w	r2, r3, #4
 80096d8:	6022      	str	r2, [r4, #0]
 80096da:	f04f 0900 	mov.w	r9, #0
 80096de:	9700      	str	r7, [sp, #0]
 80096e0:	4633      	mov	r3, r6
 80096e2:	aa0b      	add	r2, sp, #44	; 0x2c
 80096e4:	4621      	mov	r1, r4
 80096e6:	4628      	mov	r0, r5
 80096e8:	f000 f9d8 	bl	8009a9c <_printf_common>
 80096ec:	3001      	adds	r0, #1
 80096ee:	f040 8090 	bne.w	8009812 <_printf_float+0x1e2>
 80096f2:	f04f 30ff 	mov.w	r0, #4294967295
 80096f6:	b00d      	add	sp, #52	; 0x34
 80096f8:	ecbd 8b02 	vpop	{d8}
 80096fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009700:	4642      	mov	r2, r8
 8009702:	464b      	mov	r3, r9
 8009704:	4640      	mov	r0, r8
 8009706:	4649      	mov	r1, r9
 8009708:	f7f7 fa28 	bl	8000b5c <__aeabi_dcmpun>
 800970c:	b140      	cbz	r0, 8009720 <_printf_float+0xf0>
 800970e:	464b      	mov	r3, r9
 8009710:	2b00      	cmp	r3, #0
 8009712:	bfbc      	itt	lt
 8009714:	232d      	movlt	r3, #45	; 0x2d
 8009716:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800971a:	487f      	ldr	r0, [pc, #508]	; (8009918 <_printf_float+0x2e8>)
 800971c:	4b7f      	ldr	r3, [pc, #508]	; (800991c <_printf_float+0x2ec>)
 800971e:	e7d1      	b.n	80096c4 <_printf_float+0x94>
 8009720:	6863      	ldr	r3, [r4, #4]
 8009722:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009726:	9206      	str	r2, [sp, #24]
 8009728:	1c5a      	adds	r2, r3, #1
 800972a:	d13f      	bne.n	80097ac <_printf_float+0x17c>
 800972c:	2306      	movs	r3, #6
 800972e:	6063      	str	r3, [r4, #4]
 8009730:	9b05      	ldr	r3, [sp, #20]
 8009732:	6861      	ldr	r1, [r4, #4]
 8009734:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009738:	2300      	movs	r3, #0
 800973a:	9303      	str	r3, [sp, #12]
 800973c:	ab0a      	add	r3, sp, #40	; 0x28
 800973e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009742:	ab09      	add	r3, sp, #36	; 0x24
 8009744:	ec49 8b10 	vmov	d0, r8, r9
 8009748:	9300      	str	r3, [sp, #0]
 800974a:	6022      	str	r2, [r4, #0]
 800974c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009750:	4628      	mov	r0, r5
 8009752:	f7ff fecd 	bl	80094f0 <__cvt>
 8009756:	9b06      	ldr	r3, [sp, #24]
 8009758:	9909      	ldr	r1, [sp, #36]	; 0x24
 800975a:	2b47      	cmp	r3, #71	; 0x47
 800975c:	4680      	mov	r8, r0
 800975e:	d108      	bne.n	8009772 <_printf_float+0x142>
 8009760:	1cc8      	adds	r0, r1, #3
 8009762:	db02      	blt.n	800976a <_printf_float+0x13a>
 8009764:	6863      	ldr	r3, [r4, #4]
 8009766:	4299      	cmp	r1, r3
 8009768:	dd41      	ble.n	80097ee <_printf_float+0x1be>
 800976a:	f1ab 0b02 	sub.w	fp, fp, #2
 800976e:	fa5f fb8b 	uxtb.w	fp, fp
 8009772:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009776:	d820      	bhi.n	80097ba <_printf_float+0x18a>
 8009778:	3901      	subs	r1, #1
 800977a:	465a      	mov	r2, fp
 800977c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009780:	9109      	str	r1, [sp, #36]	; 0x24
 8009782:	f7ff ff17 	bl	80095b4 <__exponent>
 8009786:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009788:	1813      	adds	r3, r2, r0
 800978a:	2a01      	cmp	r2, #1
 800978c:	4681      	mov	r9, r0
 800978e:	6123      	str	r3, [r4, #16]
 8009790:	dc02      	bgt.n	8009798 <_printf_float+0x168>
 8009792:	6822      	ldr	r2, [r4, #0]
 8009794:	07d2      	lsls	r2, r2, #31
 8009796:	d501      	bpl.n	800979c <_printf_float+0x16c>
 8009798:	3301      	adds	r3, #1
 800979a:	6123      	str	r3, [r4, #16]
 800979c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d09c      	beq.n	80096de <_printf_float+0xae>
 80097a4:	232d      	movs	r3, #45	; 0x2d
 80097a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80097aa:	e798      	b.n	80096de <_printf_float+0xae>
 80097ac:	9a06      	ldr	r2, [sp, #24]
 80097ae:	2a47      	cmp	r2, #71	; 0x47
 80097b0:	d1be      	bne.n	8009730 <_printf_float+0x100>
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d1bc      	bne.n	8009730 <_printf_float+0x100>
 80097b6:	2301      	movs	r3, #1
 80097b8:	e7b9      	b.n	800972e <_printf_float+0xfe>
 80097ba:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80097be:	d118      	bne.n	80097f2 <_printf_float+0x1c2>
 80097c0:	2900      	cmp	r1, #0
 80097c2:	6863      	ldr	r3, [r4, #4]
 80097c4:	dd0b      	ble.n	80097de <_printf_float+0x1ae>
 80097c6:	6121      	str	r1, [r4, #16]
 80097c8:	b913      	cbnz	r3, 80097d0 <_printf_float+0x1a0>
 80097ca:	6822      	ldr	r2, [r4, #0]
 80097cc:	07d0      	lsls	r0, r2, #31
 80097ce:	d502      	bpl.n	80097d6 <_printf_float+0x1a6>
 80097d0:	3301      	adds	r3, #1
 80097d2:	440b      	add	r3, r1
 80097d4:	6123      	str	r3, [r4, #16]
 80097d6:	65a1      	str	r1, [r4, #88]	; 0x58
 80097d8:	f04f 0900 	mov.w	r9, #0
 80097dc:	e7de      	b.n	800979c <_printf_float+0x16c>
 80097de:	b913      	cbnz	r3, 80097e6 <_printf_float+0x1b6>
 80097e0:	6822      	ldr	r2, [r4, #0]
 80097e2:	07d2      	lsls	r2, r2, #31
 80097e4:	d501      	bpl.n	80097ea <_printf_float+0x1ba>
 80097e6:	3302      	adds	r3, #2
 80097e8:	e7f4      	b.n	80097d4 <_printf_float+0x1a4>
 80097ea:	2301      	movs	r3, #1
 80097ec:	e7f2      	b.n	80097d4 <_printf_float+0x1a4>
 80097ee:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80097f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097f4:	4299      	cmp	r1, r3
 80097f6:	db05      	blt.n	8009804 <_printf_float+0x1d4>
 80097f8:	6823      	ldr	r3, [r4, #0]
 80097fa:	6121      	str	r1, [r4, #16]
 80097fc:	07d8      	lsls	r0, r3, #31
 80097fe:	d5ea      	bpl.n	80097d6 <_printf_float+0x1a6>
 8009800:	1c4b      	adds	r3, r1, #1
 8009802:	e7e7      	b.n	80097d4 <_printf_float+0x1a4>
 8009804:	2900      	cmp	r1, #0
 8009806:	bfd4      	ite	le
 8009808:	f1c1 0202 	rsble	r2, r1, #2
 800980c:	2201      	movgt	r2, #1
 800980e:	4413      	add	r3, r2
 8009810:	e7e0      	b.n	80097d4 <_printf_float+0x1a4>
 8009812:	6823      	ldr	r3, [r4, #0]
 8009814:	055a      	lsls	r2, r3, #21
 8009816:	d407      	bmi.n	8009828 <_printf_float+0x1f8>
 8009818:	6923      	ldr	r3, [r4, #16]
 800981a:	4642      	mov	r2, r8
 800981c:	4631      	mov	r1, r6
 800981e:	4628      	mov	r0, r5
 8009820:	47b8      	blx	r7
 8009822:	3001      	adds	r0, #1
 8009824:	d12c      	bne.n	8009880 <_printf_float+0x250>
 8009826:	e764      	b.n	80096f2 <_printf_float+0xc2>
 8009828:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800982c:	f240 80e0 	bls.w	80099f0 <_printf_float+0x3c0>
 8009830:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009834:	2200      	movs	r2, #0
 8009836:	2300      	movs	r3, #0
 8009838:	f7f7 f95e 	bl	8000af8 <__aeabi_dcmpeq>
 800983c:	2800      	cmp	r0, #0
 800983e:	d034      	beq.n	80098aa <_printf_float+0x27a>
 8009840:	4a37      	ldr	r2, [pc, #220]	; (8009920 <_printf_float+0x2f0>)
 8009842:	2301      	movs	r3, #1
 8009844:	4631      	mov	r1, r6
 8009846:	4628      	mov	r0, r5
 8009848:	47b8      	blx	r7
 800984a:	3001      	adds	r0, #1
 800984c:	f43f af51 	beq.w	80096f2 <_printf_float+0xc2>
 8009850:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009854:	429a      	cmp	r2, r3
 8009856:	db02      	blt.n	800985e <_printf_float+0x22e>
 8009858:	6823      	ldr	r3, [r4, #0]
 800985a:	07d8      	lsls	r0, r3, #31
 800985c:	d510      	bpl.n	8009880 <_printf_float+0x250>
 800985e:	ee18 3a10 	vmov	r3, s16
 8009862:	4652      	mov	r2, sl
 8009864:	4631      	mov	r1, r6
 8009866:	4628      	mov	r0, r5
 8009868:	47b8      	blx	r7
 800986a:	3001      	adds	r0, #1
 800986c:	f43f af41 	beq.w	80096f2 <_printf_float+0xc2>
 8009870:	f04f 0800 	mov.w	r8, #0
 8009874:	f104 091a 	add.w	r9, r4, #26
 8009878:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800987a:	3b01      	subs	r3, #1
 800987c:	4543      	cmp	r3, r8
 800987e:	dc09      	bgt.n	8009894 <_printf_float+0x264>
 8009880:	6823      	ldr	r3, [r4, #0]
 8009882:	079b      	lsls	r3, r3, #30
 8009884:	f100 8105 	bmi.w	8009a92 <_printf_float+0x462>
 8009888:	68e0      	ldr	r0, [r4, #12]
 800988a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800988c:	4298      	cmp	r0, r3
 800988e:	bfb8      	it	lt
 8009890:	4618      	movlt	r0, r3
 8009892:	e730      	b.n	80096f6 <_printf_float+0xc6>
 8009894:	2301      	movs	r3, #1
 8009896:	464a      	mov	r2, r9
 8009898:	4631      	mov	r1, r6
 800989a:	4628      	mov	r0, r5
 800989c:	47b8      	blx	r7
 800989e:	3001      	adds	r0, #1
 80098a0:	f43f af27 	beq.w	80096f2 <_printf_float+0xc2>
 80098a4:	f108 0801 	add.w	r8, r8, #1
 80098a8:	e7e6      	b.n	8009878 <_printf_float+0x248>
 80098aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	dc39      	bgt.n	8009924 <_printf_float+0x2f4>
 80098b0:	4a1b      	ldr	r2, [pc, #108]	; (8009920 <_printf_float+0x2f0>)
 80098b2:	2301      	movs	r3, #1
 80098b4:	4631      	mov	r1, r6
 80098b6:	4628      	mov	r0, r5
 80098b8:	47b8      	blx	r7
 80098ba:	3001      	adds	r0, #1
 80098bc:	f43f af19 	beq.w	80096f2 <_printf_float+0xc2>
 80098c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80098c4:	4313      	orrs	r3, r2
 80098c6:	d102      	bne.n	80098ce <_printf_float+0x29e>
 80098c8:	6823      	ldr	r3, [r4, #0]
 80098ca:	07d9      	lsls	r1, r3, #31
 80098cc:	d5d8      	bpl.n	8009880 <_printf_float+0x250>
 80098ce:	ee18 3a10 	vmov	r3, s16
 80098d2:	4652      	mov	r2, sl
 80098d4:	4631      	mov	r1, r6
 80098d6:	4628      	mov	r0, r5
 80098d8:	47b8      	blx	r7
 80098da:	3001      	adds	r0, #1
 80098dc:	f43f af09 	beq.w	80096f2 <_printf_float+0xc2>
 80098e0:	f04f 0900 	mov.w	r9, #0
 80098e4:	f104 0a1a 	add.w	sl, r4, #26
 80098e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098ea:	425b      	negs	r3, r3
 80098ec:	454b      	cmp	r3, r9
 80098ee:	dc01      	bgt.n	80098f4 <_printf_float+0x2c4>
 80098f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098f2:	e792      	b.n	800981a <_printf_float+0x1ea>
 80098f4:	2301      	movs	r3, #1
 80098f6:	4652      	mov	r2, sl
 80098f8:	4631      	mov	r1, r6
 80098fa:	4628      	mov	r0, r5
 80098fc:	47b8      	blx	r7
 80098fe:	3001      	adds	r0, #1
 8009900:	f43f aef7 	beq.w	80096f2 <_printf_float+0xc2>
 8009904:	f109 0901 	add.w	r9, r9, #1
 8009908:	e7ee      	b.n	80098e8 <_printf_float+0x2b8>
 800990a:	bf00      	nop
 800990c:	7fefffff 	.word	0x7fefffff
 8009910:	0800e5e0 	.word	0x0800e5e0
 8009914:	0800e5e4 	.word	0x0800e5e4
 8009918:	0800e5ec 	.word	0x0800e5ec
 800991c:	0800e5e8 	.word	0x0800e5e8
 8009920:	0800e9e1 	.word	0x0800e9e1
 8009924:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009926:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009928:	429a      	cmp	r2, r3
 800992a:	bfa8      	it	ge
 800992c:	461a      	movge	r2, r3
 800992e:	2a00      	cmp	r2, #0
 8009930:	4691      	mov	r9, r2
 8009932:	dc37      	bgt.n	80099a4 <_printf_float+0x374>
 8009934:	f04f 0b00 	mov.w	fp, #0
 8009938:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800993c:	f104 021a 	add.w	r2, r4, #26
 8009940:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009942:	9305      	str	r3, [sp, #20]
 8009944:	eba3 0309 	sub.w	r3, r3, r9
 8009948:	455b      	cmp	r3, fp
 800994a:	dc33      	bgt.n	80099b4 <_printf_float+0x384>
 800994c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009950:	429a      	cmp	r2, r3
 8009952:	db3b      	blt.n	80099cc <_printf_float+0x39c>
 8009954:	6823      	ldr	r3, [r4, #0]
 8009956:	07da      	lsls	r2, r3, #31
 8009958:	d438      	bmi.n	80099cc <_printf_float+0x39c>
 800995a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800995c:	9a05      	ldr	r2, [sp, #20]
 800995e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009960:	1a9a      	subs	r2, r3, r2
 8009962:	eba3 0901 	sub.w	r9, r3, r1
 8009966:	4591      	cmp	r9, r2
 8009968:	bfa8      	it	ge
 800996a:	4691      	movge	r9, r2
 800996c:	f1b9 0f00 	cmp.w	r9, #0
 8009970:	dc35      	bgt.n	80099de <_printf_float+0x3ae>
 8009972:	f04f 0800 	mov.w	r8, #0
 8009976:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800997a:	f104 0a1a 	add.w	sl, r4, #26
 800997e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009982:	1a9b      	subs	r3, r3, r2
 8009984:	eba3 0309 	sub.w	r3, r3, r9
 8009988:	4543      	cmp	r3, r8
 800998a:	f77f af79 	ble.w	8009880 <_printf_float+0x250>
 800998e:	2301      	movs	r3, #1
 8009990:	4652      	mov	r2, sl
 8009992:	4631      	mov	r1, r6
 8009994:	4628      	mov	r0, r5
 8009996:	47b8      	blx	r7
 8009998:	3001      	adds	r0, #1
 800999a:	f43f aeaa 	beq.w	80096f2 <_printf_float+0xc2>
 800999e:	f108 0801 	add.w	r8, r8, #1
 80099a2:	e7ec      	b.n	800997e <_printf_float+0x34e>
 80099a4:	4613      	mov	r3, r2
 80099a6:	4631      	mov	r1, r6
 80099a8:	4642      	mov	r2, r8
 80099aa:	4628      	mov	r0, r5
 80099ac:	47b8      	blx	r7
 80099ae:	3001      	adds	r0, #1
 80099b0:	d1c0      	bne.n	8009934 <_printf_float+0x304>
 80099b2:	e69e      	b.n	80096f2 <_printf_float+0xc2>
 80099b4:	2301      	movs	r3, #1
 80099b6:	4631      	mov	r1, r6
 80099b8:	4628      	mov	r0, r5
 80099ba:	9205      	str	r2, [sp, #20]
 80099bc:	47b8      	blx	r7
 80099be:	3001      	adds	r0, #1
 80099c0:	f43f ae97 	beq.w	80096f2 <_printf_float+0xc2>
 80099c4:	9a05      	ldr	r2, [sp, #20]
 80099c6:	f10b 0b01 	add.w	fp, fp, #1
 80099ca:	e7b9      	b.n	8009940 <_printf_float+0x310>
 80099cc:	ee18 3a10 	vmov	r3, s16
 80099d0:	4652      	mov	r2, sl
 80099d2:	4631      	mov	r1, r6
 80099d4:	4628      	mov	r0, r5
 80099d6:	47b8      	blx	r7
 80099d8:	3001      	adds	r0, #1
 80099da:	d1be      	bne.n	800995a <_printf_float+0x32a>
 80099dc:	e689      	b.n	80096f2 <_printf_float+0xc2>
 80099de:	9a05      	ldr	r2, [sp, #20]
 80099e0:	464b      	mov	r3, r9
 80099e2:	4442      	add	r2, r8
 80099e4:	4631      	mov	r1, r6
 80099e6:	4628      	mov	r0, r5
 80099e8:	47b8      	blx	r7
 80099ea:	3001      	adds	r0, #1
 80099ec:	d1c1      	bne.n	8009972 <_printf_float+0x342>
 80099ee:	e680      	b.n	80096f2 <_printf_float+0xc2>
 80099f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80099f2:	2a01      	cmp	r2, #1
 80099f4:	dc01      	bgt.n	80099fa <_printf_float+0x3ca>
 80099f6:	07db      	lsls	r3, r3, #31
 80099f8:	d538      	bpl.n	8009a6c <_printf_float+0x43c>
 80099fa:	2301      	movs	r3, #1
 80099fc:	4642      	mov	r2, r8
 80099fe:	4631      	mov	r1, r6
 8009a00:	4628      	mov	r0, r5
 8009a02:	47b8      	blx	r7
 8009a04:	3001      	adds	r0, #1
 8009a06:	f43f ae74 	beq.w	80096f2 <_printf_float+0xc2>
 8009a0a:	ee18 3a10 	vmov	r3, s16
 8009a0e:	4652      	mov	r2, sl
 8009a10:	4631      	mov	r1, r6
 8009a12:	4628      	mov	r0, r5
 8009a14:	47b8      	blx	r7
 8009a16:	3001      	adds	r0, #1
 8009a18:	f43f ae6b 	beq.w	80096f2 <_printf_float+0xc2>
 8009a1c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009a20:	2200      	movs	r2, #0
 8009a22:	2300      	movs	r3, #0
 8009a24:	f7f7 f868 	bl	8000af8 <__aeabi_dcmpeq>
 8009a28:	b9d8      	cbnz	r0, 8009a62 <_printf_float+0x432>
 8009a2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a2c:	f108 0201 	add.w	r2, r8, #1
 8009a30:	3b01      	subs	r3, #1
 8009a32:	4631      	mov	r1, r6
 8009a34:	4628      	mov	r0, r5
 8009a36:	47b8      	blx	r7
 8009a38:	3001      	adds	r0, #1
 8009a3a:	d10e      	bne.n	8009a5a <_printf_float+0x42a>
 8009a3c:	e659      	b.n	80096f2 <_printf_float+0xc2>
 8009a3e:	2301      	movs	r3, #1
 8009a40:	4652      	mov	r2, sl
 8009a42:	4631      	mov	r1, r6
 8009a44:	4628      	mov	r0, r5
 8009a46:	47b8      	blx	r7
 8009a48:	3001      	adds	r0, #1
 8009a4a:	f43f ae52 	beq.w	80096f2 <_printf_float+0xc2>
 8009a4e:	f108 0801 	add.w	r8, r8, #1
 8009a52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a54:	3b01      	subs	r3, #1
 8009a56:	4543      	cmp	r3, r8
 8009a58:	dcf1      	bgt.n	8009a3e <_printf_float+0x40e>
 8009a5a:	464b      	mov	r3, r9
 8009a5c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009a60:	e6dc      	b.n	800981c <_printf_float+0x1ec>
 8009a62:	f04f 0800 	mov.w	r8, #0
 8009a66:	f104 0a1a 	add.w	sl, r4, #26
 8009a6a:	e7f2      	b.n	8009a52 <_printf_float+0x422>
 8009a6c:	2301      	movs	r3, #1
 8009a6e:	4642      	mov	r2, r8
 8009a70:	e7df      	b.n	8009a32 <_printf_float+0x402>
 8009a72:	2301      	movs	r3, #1
 8009a74:	464a      	mov	r2, r9
 8009a76:	4631      	mov	r1, r6
 8009a78:	4628      	mov	r0, r5
 8009a7a:	47b8      	blx	r7
 8009a7c:	3001      	adds	r0, #1
 8009a7e:	f43f ae38 	beq.w	80096f2 <_printf_float+0xc2>
 8009a82:	f108 0801 	add.w	r8, r8, #1
 8009a86:	68e3      	ldr	r3, [r4, #12]
 8009a88:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009a8a:	1a5b      	subs	r3, r3, r1
 8009a8c:	4543      	cmp	r3, r8
 8009a8e:	dcf0      	bgt.n	8009a72 <_printf_float+0x442>
 8009a90:	e6fa      	b.n	8009888 <_printf_float+0x258>
 8009a92:	f04f 0800 	mov.w	r8, #0
 8009a96:	f104 0919 	add.w	r9, r4, #25
 8009a9a:	e7f4      	b.n	8009a86 <_printf_float+0x456>

08009a9c <_printf_common>:
 8009a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009aa0:	4616      	mov	r6, r2
 8009aa2:	4699      	mov	r9, r3
 8009aa4:	688a      	ldr	r2, [r1, #8]
 8009aa6:	690b      	ldr	r3, [r1, #16]
 8009aa8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009aac:	4293      	cmp	r3, r2
 8009aae:	bfb8      	it	lt
 8009ab0:	4613      	movlt	r3, r2
 8009ab2:	6033      	str	r3, [r6, #0]
 8009ab4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009ab8:	4607      	mov	r7, r0
 8009aba:	460c      	mov	r4, r1
 8009abc:	b10a      	cbz	r2, 8009ac2 <_printf_common+0x26>
 8009abe:	3301      	adds	r3, #1
 8009ac0:	6033      	str	r3, [r6, #0]
 8009ac2:	6823      	ldr	r3, [r4, #0]
 8009ac4:	0699      	lsls	r1, r3, #26
 8009ac6:	bf42      	ittt	mi
 8009ac8:	6833      	ldrmi	r3, [r6, #0]
 8009aca:	3302      	addmi	r3, #2
 8009acc:	6033      	strmi	r3, [r6, #0]
 8009ace:	6825      	ldr	r5, [r4, #0]
 8009ad0:	f015 0506 	ands.w	r5, r5, #6
 8009ad4:	d106      	bne.n	8009ae4 <_printf_common+0x48>
 8009ad6:	f104 0a19 	add.w	sl, r4, #25
 8009ada:	68e3      	ldr	r3, [r4, #12]
 8009adc:	6832      	ldr	r2, [r6, #0]
 8009ade:	1a9b      	subs	r3, r3, r2
 8009ae0:	42ab      	cmp	r3, r5
 8009ae2:	dc26      	bgt.n	8009b32 <_printf_common+0x96>
 8009ae4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009ae8:	1e13      	subs	r3, r2, #0
 8009aea:	6822      	ldr	r2, [r4, #0]
 8009aec:	bf18      	it	ne
 8009aee:	2301      	movne	r3, #1
 8009af0:	0692      	lsls	r2, r2, #26
 8009af2:	d42b      	bmi.n	8009b4c <_printf_common+0xb0>
 8009af4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009af8:	4649      	mov	r1, r9
 8009afa:	4638      	mov	r0, r7
 8009afc:	47c0      	blx	r8
 8009afe:	3001      	adds	r0, #1
 8009b00:	d01e      	beq.n	8009b40 <_printf_common+0xa4>
 8009b02:	6823      	ldr	r3, [r4, #0]
 8009b04:	68e5      	ldr	r5, [r4, #12]
 8009b06:	6832      	ldr	r2, [r6, #0]
 8009b08:	f003 0306 	and.w	r3, r3, #6
 8009b0c:	2b04      	cmp	r3, #4
 8009b0e:	bf08      	it	eq
 8009b10:	1aad      	subeq	r5, r5, r2
 8009b12:	68a3      	ldr	r3, [r4, #8]
 8009b14:	6922      	ldr	r2, [r4, #16]
 8009b16:	bf0c      	ite	eq
 8009b18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b1c:	2500      	movne	r5, #0
 8009b1e:	4293      	cmp	r3, r2
 8009b20:	bfc4      	itt	gt
 8009b22:	1a9b      	subgt	r3, r3, r2
 8009b24:	18ed      	addgt	r5, r5, r3
 8009b26:	2600      	movs	r6, #0
 8009b28:	341a      	adds	r4, #26
 8009b2a:	42b5      	cmp	r5, r6
 8009b2c:	d11a      	bne.n	8009b64 <_printf_common+0xc8>
 8009b2e:	2000      	movs	r0, #0
 8009b30:	e008      	b.n	8009b44 <_printf_common+0xa8>
 8009b32:	2301      	movs	r3, #1
 8009b34:	4652      	mov	r2, sl
 8009b36:	4649      	mov	r1, r9
 8009b38:	4638      	mov	r0, r7
 8009b3a:	47c0      	blx	r8
 8009b3c:	3001      	adds	r0, #1
 8009b3e:	d103      	bne.n	8009b48 <_printf_common+0xac>
 8009b40:	f04f 30ff 	mov.w	r0, #4294967295
 8009b44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b48:	3501      	adds	r5, #1
 8009b4a:	e7c6      	b.n	8009ada <_printf_common+0x3e>
 8009b4c:	18e1      	adds	r1, r4, r3
 8009b4e:	1c5a      	adds	r2, r3, #1
 8009b50:	2030      	movs	r0, #48	; 0x30
 8009b52:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009b56:	4422      	add	r2, r4
 8009b58:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009b5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009b60:	3302      	adds	r3, #2
 8009b62:	e7c7      	b.n	8009af4 <_printf_common+0x58>
 8009b64:	2301      	movs	r3, #1
 8009b66:	4622      	mov	r2, r4
 8009b68:	4649      	mov	r1, r9
 8009b6a:	4638      	mov	r0, r7
 8009b6c:	47c0      	blx	r8
 8009b6e:	3001      	adds	r0, #1
 8009b70:	d0e6      	beq.n	8009b40 <_printf_common+0xa4>
 8009b72:	3601      	adds	r6, #1
 8009b74:	e7d9      	b.n	8009b2a <_printf_common+0x8e>
	...

08009b78 <_printf_i>:
 8009b78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b7c:	7e0f      	ldrb	r7, [r1, #24]
 8009b7e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009b80:	2f78      	cmp	r7, #120	; 0x78
 8009b82:	4691      	mov	r9, r2
 8009b84:	4680      	mov	r8, r0
 8009b86:	460c      	mov	r4, r1
 8009b88:	469a      	mov	sl, r3
 8009b8a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009b8e:	d807      	bhi.n	8009ba0 <_printf_i+0x28>
 8009b90:	2f62      	cmp	r7, #98	; 0x62
 8009b92:	d80a      	bhi.n	8009baa <_printf_i+0x32>
 8009b94:	2f00      	cmp	r7, #0
 8009b96:	f000 80d8 	beq.w	8009d4a <_printf_i+0x1d2>
 8009b9a:	2f58      	cmp	r7, #88	; 0x58
 8009b9c:	f000 80a3 	beq.w	8009ce6 <_printf_i+0x16e>
 8009ba0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ba4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009ba8:	e03a      	b.n	8009c20 <_printf_i+0xa8>
 8009baa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009bae:	2b15      	cmp	r3, #21
 8009bb0:	d8f6      	bhi.n	8009ba0 <_printf_i+0x28>
 8009bb2:	a101      	add	r1, pc, #4	; (adr r1, 8009bb8 <_printf_i+0x40>)
 8009bb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009bb8:	08009c11 	.word	0x08009c11
 8009bbc:	08009c25 	.word	0x08009c25
 8009bc0:	08009ba1 	.word	0x08009ba1
 8009bc4:	08009ba1 	.word	0x08009ba1
 8009bc8:	08009ba1 	.word	0x08009ba1
 8009bcc:	08009ba1 	.word	0x08009ba1
 8009bd0:	08009c25 	.word	0x08009c25
 8009bd4:	08009ba1 	.word	0x08009ba1
 8009bd8:	08009ba1 	.word	0x08009ba1
 8009bdc:	08009ba1 	.word	0x08009ba1
 8009be0:	08009ba1 	.word	0x08009ba1
 8009be4:	08009d31 	.word	0x08009d31
 8009be8:	08009c55 	.word	0x08009c55
 8009bec:	08009d13 	.word	0x08009d13
 8009bf0:	08009ba1 	.word	0x08009ba1
 8009bf4:	08009ba1 	.word	0x08009ba1
 8009bf8:	08009d53 	.word	0x08009d53
 8009bfc:	08009ba1 	.word	0x08009ba1
 8009c00:	08009c55 	.word	0x08009c55
 8009c04:	08009ba1 	.word	0x08009ba1
 8009c08:	08009ba1 	.word	0x08009ba1
 8009c0c:	08009d1b 	.word	0x08009d1b
 8009c10:	682b      	ldr	r3, [r5, #0]
 8009c12:	1d1a      	adds	r2, r3, #4
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	602a      	str	r2, [r5, #0]
 8009c18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009c20:	2301      	movs	r3, #1
 8009c22:	e0a3      	b.n	8009d6c <_printf_i+0x1f4>
 8009c24:	6820      	ldr	r0, [r4, #0]
 8009c26:	6829      	ldr	r1, [r5, #0]
 8009c28:	0606      	lsls	r6, r0, #24
 8009c2a:	f101 0304 	add.w	r3, r1, #4
 8009c2e:	d50a      	bpl.n	8009c46 <_printf_i+0xce>
 8009c30:	680e      	ldr	r6, [r1, #0]
 8009c32:	602b      	str	r3, [r5, #0]
 8009c34:	2e00      	cmp	r6, #0
 8009c36:	da03      	bge.n	8009c40 <_printf_i+0xc8>
 8009c38:	232d      	movs	r3, #45	; 0x2d
 8009c3a:	4276      	negs	r6, r6
 8009c3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c40:	485e      	ldr	r0, [pc, #376]	; (8009dbc <_printf_i+0x244>)
 8009c42:	230a      	movs	r3, #10
 8009c44:	e019      	b.n	8009c7a <_printf_i+0x102>
 8009c46:	680e      	ldr	r6, [r1, #0]
 8009c48:	602b      	str	r3, [r5, #0]
 8009c4a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009c4e:	bf18      	it	ne
 8009c50:	b236      	sxthne	r6, r6
 8009c52:	e7ef      	b.n	8009c34 <_printf_i+0xbc>
 8009c54:	682b      	ldr	r3, [r5, #0]
 8009c56:	6820      	ldr	r0, [r4, #0]
 8009c58:	1d19      	adds	r1, r3, #4
 8009c5a:	6029      	str	r1, [r5, #0]
 8009c5c:	0601      	lsls	r1, r0, #24
 8009c5e:	d501      	bpl.n	8009c64 <_printf_i+0xec>
 8009c60:	681e      	ldr	r6, [r3, #0]
 8009c62:	e002      	b.n	8009c6a <_printf_i+0xf2>
 8009c64:	0646      	lsls	r6, r0, #25
 8009c66:	d5fb      	bpl.n	8009c60 <_printf_i+0xe8>
 8009c68:	881e      	ldrh	r6, [r3, #0]
 8009c6a:	4854      	ldr	r0, [pc, #336]	; (8009dbc <_printf_i+0x244>)
 8009c6c:	2f6f      	cmp	r7, #111	; 0x6f
 8009c6e:	bf0c      	ite	eq
 8009c70:	2308      	moveq	r3, #8
 8009c72:	230a      	movne	r3, #10
 8009c74:	2100      	movs	r1, #0
 8009c76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009c7a:	6865      	ldr	r5, [r4, #4]
 8009c7c:	60a5      	str	r5, [r4, #8]
 8009c7e:	2d00      	cmp	r5, #0
 8009c80:	bfa2      	ittt	ge
 8009c82:	6821      	ldrge	r1, [r4, #0]
 8009c84:	f021 0104 	bicge.w	r1, r1, #4
 8009c88:	6021      	strge	r1, [r4, #0]
 8009c8a:	b90e      	cbnz	r6, 8009c90 <_printf_i+0x118>
 8009c8c:	2d00      	cmp	r5, #0
 8009c8e:	d04d      	beq.n	8009d2c <_printf_i+0x1b4>
 8009c90:	4615      	mov	r5, r2
 8009c92:	fbb6 f1f3 	udiv	r1, r6, r3
 8009c96:	fb03 6711 	mls	r7, r3, r1, r6
 8009c9a:	5dc7      	ldrb	r7, [r0, r7]
 8009c9c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009ca0:	4637      	mov	r7, r6
 8009ca2:	42bb      	cmp	r3, r7
 8009ca4:	460e      	mov	r6, r1
 8009ca6:	d9f4      	bls.n	8009c92 <_printf_i+0x11a>
 8009ca8:	2b08      	cmp	r3, #8
 8009caa:	d10b      	bne.n	8009cc4 <_printf_i+0x14c>
 8009cac:	6823      	ldr	r3, [r4, #0]
 8009cae:	07de      	lsls	r6, r3, #31
 8009cb0:	d508      	bpl.n	8009cc4 <_printf_i+0x14c>
 8009cb2:	6923      	ldr	r3, [r4, #16]
 8009cb4:	6861      	ldr	r1, [r4, #4]
 8009cb6:	4299      	cmp	r1, r3
 8009cb8:	bfde      	ittt	le
 8009cba:	2330      	movle	r3, #48	; 0x30
 8009cbc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009cc0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009cc4:	1b52      	subs	r2, r2, r5
 8009cc6:	6122      	str	r2, [r4, #16]
 8009cc8:	f8cd a000 	str.w	sl, [sp]
 8009ccc:	464b      	mov	r3, r9
 8009cce:	aa03      	add	r2, sp, #12
 8009cd0:	4621      	mov	r1, r4
 8009cd2:	4640      	mov	r0, r8
 8009cd4:	f7ff fee2 	bl	8009a9c <_printf_common>
 8009cd8:	3001      	adds	r0, #1
 8009cda:	d14c      	bne.n	8009d76 <_printf_i+0x1fe>
 8009cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8009ce0:	b004      	add	sp, #16
 8009ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ce6:	4835      	ldr	r0, [pc, #212]	; (8009dbc <_printf_i+0x244>)
 8009ce8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009cec:	6829      	ldr	r1, [r5, #0]
 8009cee:	6823      	ldr	r3, [r4, #0]
 8009cf0:	f851 6b04 	ldr.w	r6, [r1], #4
 8009cf4:	6029      	str	r1, [r5, #0]
 8009cf6:	061d      	lsls	r5, r3, #24
 8009cf8:	d514      	bpl.n	8009d24 <_printf_i+0x1ac>
 8009cfa:	07df      	lsls	r7, r3, #31
 8009cfc:	bf44      	itt	mi
 8009cfe:	f043 0320 	orrmi.w	r3, r3, #32
 8009d02:	6023      	strmi	r3, [r4, #0]
 8009d04:	b91e      	cbnz	r6, 8009d0e <_printf_i+0x196>
 8009d06:	6823      	ldr	r3, [r4, #0]
 8009d08:	f023 0320 	bic.w	r3, r3, #32
 8009d0c:	6023      	str	r3, [r4, #0]
 8009d0e:	2310      	movs	r3, #16
 8009d10:	e7b0      	b.n	8009c74 <_printf_i+0xfc>
 8009d12:	6823      	ldr	r3, [r4, #0]
 8009d14:	f043 0320 	orr.w	r3, r3, #32
 8009d18:	6023      	str	r3, [r4, #0]
 8009d1a:	2378      	movs	r3, #120	; 0x78
 8009d1c:	4828      	ldr	r0, [pc, #160]	; (8009dc0 <_printf_i+0x248>)
 8009d1e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009d22:	e7e3      	b.n	8009cec <_printf_i+0x174>
 8009d24:	0659      	lsls	r1, r3, #25
 8009d26:	bf48      	it	mi
 8009d28:	b2b6      	uxthmi	r6, r6
 8009d2a:	e7e6      	b.n	8009cfa <_printf_i+0x182>
 8009d2c:	4615      	mov	r5, r2
 8009d2e:	e7bb      	b.n	8009ca8 <_printf_i+0x130>
 8009d30:	682b      	ldr	r3, [r5, #0]
 8009d32:	6826      	ldr	r6, [r4, #0]
 8009d34:	6961      	ldr	r1, [r4, #20]
 8009d36:	1d18      	adds	r0, r3, #4
 8009d38:	6028      	str	r0, [r5, #0]
 8009d3a:	0635      	lsls	r5, r6, #24
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	d501      	bpl.n	8009d44 <_printf_i+0x1cc>
 8009d40:	6019      	str	r1, [r3, #0]
 8009d42:	e002      	b.n	8009d4a <_printf_i+0x1d2>
 8009d44:	0670      	lsls	r0, r6, #25
 8009d46:	d5fb      	bpl.n	8009d40 <_printf_i+0x1c8>
 8009d48:	8019      	strh	r1, [r3, #0]
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	6123      	str	r3, [r4, #16]
 8009d4e:	4615      	mov	r5, r2
 8009d50:	e7ba      	b.n	8009cc8 <_printf_i+0x150>
 8009d52:	682b      	ldr	r3, [r5, #0]
 8009d54:	1d1a      	adds	r2, r3, #4
 8009d56:	602a      	str	r2, [r5, #0]
 8009d58:	681d      	ldr	r5, [r3, #0]
 8009d5a:	6862      	ldr	r2, [r4, #4]
 8009d5c:	2100      	movs	r1, #0
 8009d5e:	4628      	mov	r0, r5
 8009d60:	f7f6 fa56 	bl	8000210 <memchr>
 8009d64:	b108      	cbz	r0, 8009d6a <_printf_i+0x1f2>
 8009d66:	1b40      	subs	r0, r0, r5
 8009d68:	6060      	str	r0, [r4, #4]
 8009d6a:	6863      	ldr	r3, [r4, #4]
 8009d6c:	6123      	str	r3, [r4, #16]
 8009d6e:	2300      	movs	r3, #0
 8009d70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d74:	e7a8      	b.n	8009cc8 <_printf_i+0x150>
 8009d76:	6923      	ldr	r3, [r4, #16]
 8009d78:	462a      	mov	r2, r5
 8009d7a:	4649      	mov	r1, r9
 8009d7c:	4640      	mov	r0, r8
 8009d7e:	47d0      	blx	sl
 8009d80:	3001      	adds	r0, #1
 8009d82:	d0ab      	beq.n	8009cdc <_printf_i+0x164>
 8009d84:	6823      	ldr	r3, [r4, #0]
 8009d86:	079b      	lsls	r3, r3, #30
 8009d88:	d413      	bmi.n	8009db2 <_printf_i+0x23a>
 8009d8a:	68e0      	ldr	r0, [r4, #12]
 8009d8c:	9b03      	ldr	r3, [sp, #12]
 8009d8e:	4298      	cmp	r0, r3
 8009d90:	bfb8      	it	lt
 8009d92:	4618      	movlt	r0, r3
 8009d94:	e7a4      	b.n	8009ce0 <_printf_i+0x168>
 8009d96:	2301      	movs	r3, #1
 8009d98:	4632      	mov	r2, r6
 8009d9a:	4649      	mov	r1, r9
 8009d9c:	4640      	mov	r0, r8
 8009d9e:	47d0      	blx	sl
 8009da0:	3001      	adds	r0, #1
 8009da2:	d09b      	beq.n	8009cdc <_printf_i+0x164>
 8009da4:	3501      	adds	r5, #1
 8009da6:	68e3      	ldr	r3, [r4, #12]
 8009da8:	9903      	ldr	r1, [sp, #12]
 8009daa:	1a5b      	subs	r3, r3, r1
 8009dac:	42ab      	cmp	r3, r5
 8009dae:	dcf2      	bgt.n	8009d96 <_printf_i+0x21e>
 8009db0:	e7eb      	b.n	8009d8a <_printf_i+0x212>
 8009db2:	2500      	movs	r5, #0
 8009db4:	f104 0619 	add.w	r6, r4, #25
 8009db8:	e7f5      	b.n	8009da6 <_printf_i+0x22e>
 8009dba:	bf00      	nop
 8009dbc:	0800e5f0 	.word	0x0800e5f0
 8009dc0:	0800e601 	.word	0x0800e601

08009dc4 <_scanf_float>:
 8009dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dc8:	b087      	sub	sp, #28
 8009dca:	4617      	mov	r7, r2
 8009dcc:	9303      	str	r3, [sp, #12]
 8009dce:	688b      	ldr	r3, [r1, #8]
 8009dd0:	1e5a      	subs	r2, r3, #1
 8009dd2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009dd6:	bf83      	ittte	hi
 8009dd8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009ddc:	195b      	addhi	r3, r3, r5
 8009dde:	9302      	strhi	r3, [sp, #8]
 8009de0:	2300      	movls	r3, #0
 8009de2:	bf86      	itte	hi
 8009de4:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009de8:	608b      	strhi	r3, [r1, #8]
 8009dea:	9302      	strls	r3, [sp, #8]
 8009dec:	680b      	ldr	r3, [r1, #0]
 8009dee:	468b      	mov	fp, r1
 8009df0:	2500      	movs	r5, #0
 8009df2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009df6:	f84b 3b1c 	str.w	r3, [fp], #28
 8009dfa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009dfe:	4680      	mov	r8, r0
 8009e00:	460c      	mov	r4, r1
 8009e02:	465e      	mov	r6, fp
 8009e04:	46aa      	mov	sl, r5
 8009e06:	46a9      	mov	r9, r5
 8009e08:	9501      	str	r5, [sp, #4]
 8009e0a:	68a2      	ldr	r2, [r4, #8]
 8009e0c:	b152      	cbz	r2, 8009e24 <_scanf_float+0x60>
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	781b      	ldrb	r3, [r3, #0]
 8009e12:	2b4e      	cmp	r3, #78	; 0x4e
 8009e14:	d864      	bhi.n	8009ee0 <_scanf_float+0x11c>
 8009e16:	2b40      	cmp	r3, #64	; 0x40
 8009e18:	d83c      	bhi.n	8009e94 <_scanf_float+0xd0>
 8009e1a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8009e1e:	b2c8      	uxtb	r0, r1
 8009e20:	280e      	cmp	r0, #14
 8009e22:	d93a      	bls.n	8009e9a <_scanf_float+0xd6>
 8009e24:	f1b9 0f00 	cmp.w	r9, #0
 8009e28:	d003      	beq.n	8009e32 <_scanf_float+0x6e>
 8009e2a:	6823      	ldr	r3, [r4, #0]
 8009e2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e30:	6023      	str	r3, [r4, #0]
 8009e32:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009e36:	f1ba 0f01 	cmp.w	sl, #1
 8009e3a:	f200 8113 	bhi.w	800a064 <_scanf_float+0x2a0>
 8009e3e:	455e      	cmp	r6, fp
 8009e40:	f200 8105 	bhi.w	800a04e <_scanf_float+0x28a>
 8009e44:	2501      	movs	r5, #1
 8009e46:	4628      	mov	r0, r5
 8009e48:	b007      	add	sp, #28
 8009e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e4e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8009e52:	2a0d      	cmp	r2, #13
 8009e54:	d8e6      	bhi.n	8009e24 <_scanf_float+0x60>
 8009e56:	a101      	add	r1, pc, #4	; (adr r1, 8009e5c <_scanf_float+0x98>)
 8009e58:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009e5c:	08009f9b 	.word	0x08009f9b
 8009e60:	08009e25 	.word	0x08009e25
 8009e64:	08009e25 	.word	0x08009e25
 8009e68:	08009e25 	.word	0x08009e25
 8009e6c:	08009ffb 	.word	0x08009ffb
 8009e70:	08009fd3 	.word	0x08009fd3
 8009e74:	08009e25 	.word	0x08009e25
 8009e78:	08009e25 	.word	0x08009e25
 8009e7c:	08009fa9 	.word	0x08009fa9
 8009e80:	08009e25 	.word	0x08009e25
 8009e84:	08009e25 	.word	0x08009e25
 8009e88:	08009e25 	.word	0x08009e25
 8009e8c:	08009e25 	.word	0x08009e25
 8009e90:	08009f61 	.word	0x08009f61
 8009e94:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009e98:	e7db      	b.n	8009e52 <_scanf_float+0x8e>
 8009e9a:	290e      	cmp	r1, #14
 8009e9c:	d8c2      	bhi.n	8009e24 <_scanf_float+0x60>
 8009e9e:	a001      	add	r0, pc, #4	; (adr r0, 8009ea4 <_scanf_float+0xe0>)
 8009ea0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009ea4:	08009f53 	.word	0x08009f53
 8009ea8:	08009e25 	.word	0x08009e25
 8009eac:	08009f53 	.word	0x08009f53
 8009eb0:	08009fe7 	.word	0x08009fe7
 8009eb4:	08009e25 	.word	0x08009e25
 8009eb8:	08009f01 	.word	0x08009f01
 8009ebc:	08009f3d 	.word	0x08009f3d
 8009ec0:	08009f3d 	.word	0x08009f3d
 8009ec4:	08009f3d 	.word	0x08009f3d
 8009ec8:	08009f3d 	.word	0x08009f3d
 8009ecc:	08009f3d 	.word	0x08009f3d
 8009ed0:	08009f3d 	.word	0x08009f3d
 8009ed4:	08009f3d 	.word	0x08009f3d
 8009ed8:	08009f3d 	.word	0x08009f3d
 8009edc:	08009f3d 	.word	0x08009f3d
 8009ee0:	2b6e      	cmp	r3, #110	; 0x6e
 8009ee2:	d809      	bhi.n	8009ef8 <_scanf_float+0x134>
 8009ee4:	2b60      	cmp	r3, #96	; 0x60
 8009ee6:	d8b2      	bhi.n	8009e4e <_scanf_float+0x8a>
 8009ee8:	2b54      	cmp	r3, #84	; 0x54
 8009eea:	d077      	beq.n	8009fdc <_scanf_float+0x218>
 8009eec:	2b59      	cmp	r3, #89	; 0x59
 8009eee:	d199      	bne.n	8009e24 <_scanf_float+0x60>
 8009ef0:	2d07      	cmp	r5, #7
 8009ef2:	d197      	bne.n	8009e24 <_scanf_float+0x60>
 8009ef4:	2508      	movs	r5, #8
 8009ef6:	e029      	b.n	8009f4c <_scanf_float+0x188>
 8009ef8:	2b74      	cmp	r3, #116	; 0x74
 8009efa:	d06f      	beq.n	8009fdc <_scanf_float+0x218>
 8009efc:	2b79      	cmp	r3, #121	; 0x79
 8009efe:	e7f6      	b.n	8009eee <_scanf_float+0x12a>
 8009f00:	6821      	ldr	r1, [r4, #0]
 8009f02:	05c8      	lsls	r0, r1, #23
 8009f04:	d51a      	bpl.n	8009f3c <_scanf_float+0x178>
 8009f06:	9b02      	ldr	r3, [sp, #8]
 8009f08:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009f0c:	6021      	str	r1, [r4, #0]
 8009f0e:	f109 0901 	add.w	r9, r9, #1
 8009f12:	b11b      	cbz	r3, 8009f1c <_scanf_float+0x158>
 8009f14:	3b01      	subs	r3, #1
 8009f16:	3201      	adds	r2, #1
 8009f18:	9302      	str	r3, [sp, #8]
 8009f1a:	60a2      	str	r2, [r4, #8]
 8009f1c:	68a3      	ldr	r3, [r4, #8]
 8009f1e:	3b01      	subs	r3, #1
 8009f20:	60a3      	str	r3, [r4, #8]
 8009f22:	6923      	ldr	r3, [r4, #16]
 8009f24:	3301      	adds	r3, #1
 8009f26:	6123      	str	r3, [r4, #16]
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	3b01      	subs	r3, #1
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	607b      	str	r3, [r7, #4]
 8009f30:	f340 8084 	ble.w	800a03c <_scanf_float+0x278>
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	3301      	adds	r3, #1
 8009f38:	603b      	str	r3, [r7, #0]
 8009f3a:	e766      	b.n	8009e0a <_scanf_float+0x46>
 8009f3c:	eb1a 0f05 	cmn.w	sl, r5
 8009f40:	f47f af70 	bne.w	8009e24 <_scanf_float+0x60>
 8009f44:	6822      	ldr	r2, [r4, #0]
 8009f46:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8009f4a:	6022      	str	r2, [r4, #0]
 8009f4c:	f806 3b01 	strb.w	r3, [r6], #1
 8009f50:	e7e4      	b.n	8009f1c <_scanf_float+0x158>
 8009f52:	6822      	ldr	r2, [r4, #0]
 8009f54:	0610      	lsls	r0, r2, #24
 8009f56:	f57f af65 	bpl.w	8009e24 <_scanf_float+0x60>
 8009f5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009f5e:	e7f4      	b.n	8009f4a <_scanf_float+0x186>
 8009f60:	f1ba 0f00 	cmp.w	sl, #0
 8009f64:	d10e      	bne.n	8009f84 <_scanf_float+0x1c0>
 8009f66:	f1b9 0f00 	cmp.w	r9, #0
 8009f6a:	d10e      	bne.n	8009f8a <_scanf_float+0x1c6>
 8009f6c:	6822      	ldr	r2, [r4, #0]
 8009f6e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009f72:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009f76:	d108      	bne.n	8009f8a <_scanf_float+0x1c6>
 8009f78:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009f7c:	6022      	str	r2, [r4, #0]
 8009f7e:	f04f 0a01 	mov.w	sl, #1
 8009f82:	e7e3      	b.n	8009f4c <_scanf_float+0x188>
 8009f84:	f1ba 0f02 	cmp.w	sl, #2
 8009f88:	d055      	beq.n	800a036 <_scanf_float+0x272>
 8009f8a:	2d01      	cmp	r5, #1
 8009f8c:	d002      	beq.n	8009f94 <_scanf_float+0x1d0>
 8009f8e:	2d04      	cmp	r5, #4
 8009f90:	f47f af48 	bne.w	8009e24 <_scanf_float+0x60>
 8009f94:	3501      	adds	r5, #1
 8009f96:	b2ed      	uxtb	r5, r5
 8009f98:	e7d8      	b.n	8009f4c <_scanf_float+0x188>
 8009f9a:	f1ba 0f01 	cmp.w	sl, #1
 8009f9e:	f47f af41 	bne.w	8009e24 <_scanf_float+0x60>
 8009fa2:	f04f 0a02 	mov.w	sl, #2
 8009fa6:	e7d1      	b.n	8009f4c <_scanf_float+0x188>
 8009fa8:	b97d      	cbnz	r5, 8009fca <_scanf_float+0x206>
 8009faa:	f1b9 0f00 	cmp.w	r9, #0
 8009fae:	f47f af3c 	bne.w	8009e2a <_scanf_float+0x66>
 8009fb2:	6822      	ldr	r2, [r4, #0]
 8009fb4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009fb8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009fbc:	f47f af39 	bne.w	8009e32 <_scanf_float+0x6e>
 8009fc0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009fc4:	6022      	str	r2, [r4, #0]
 8009fc6:	2501      	movs	r5, #1
 8009fc8:	e7c0      	b.n	8009f4c <_scanf_float+0x188>
 8009fca:	2d03      	cmp	r5, #3
 8009fcc:	d0e2      	beq.n	8009f94 <_scanf_float+0x1d0>
 8009fce:	2d05      	cmp	r5, #5
 8009fd0:	e7de      	b.n	8009f90 <_scanf_float+0x1cc>
 8009fd2:	2d02      	cmp	r5, #2
 8009fd4:	f47f af26 	bne.w	8009e24 <_scanf_float+0x60>
 8009fd8:	2503      	movs	r5, #3
 8009fda:	e7b7      	b.n	8009f4c <_scanf_float+0x188>
 8009fdc:	2d06      	cmp	r5, #6
 8009fde:	f47f af21 	bne.w	8009e24 <_scanf_float+0x60>
 8009fe2:	2507      	movs	r5, #7
 8009fe4:	e7b2      	b.n	8009f4c <_scanf_float+0x188>
 8009fe6:	6822      	ldr	r2, [r4, #0]
 8009fe8:	0591      	lsls	r1, r2, #22
 8009fea:	f57f af1b 	bpl.w	8009e24 <_scanf_float+0x60>
 8009fee:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009ff2:	6022      	str	r2, [r4, #0]
 8009ff4:	f8cd 9004 	str.w	r9, [sp, #4]
 8009ff8:	e7a8      	b.n	8009f4c <_scanf_float+0x188>
 8009ffa:	6822      	ldr	r2, [r4, #0]
 8009ffc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800a000:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a004:	d006      	beq.n	800a014 <_scanf_float+0x250>
 800a006:	0550      	lsls	r0, r2, #21
 800a008:	f57f af0c 	bpl.w	8009e24 <_scanf_float+0x60>
 800a00c:	f1b9 0f00 	cmp.w	r9, #0
 800a010:	f43f af0f 	beq.w	8009e32 <_scanf_float+0x6e>
 800a014:	0591      	lsls	r1, r2, #22
 800a016:	bf58      	it	pl
 800a018:	9901      	ldrpl	r1, [sp, #4]
 800a01a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a01e:	bf58      	it	pl
 800a020:	eba9 0101 	subpl.w	r1, r9, r1
 800a024:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800a028:	bf58      	it	pl
 800a02a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a02e:	6022      	str	r2, [r4, #0]
 800a030:	f04f 0900 	mov.w	r9, #0
 800a034:	e78a      	b.n	8009f4c <_scanf_float+0x188>
 800a036:	f04f 0a03 	mov.w	sl, #3
 800a03a:	e787      	b.n	8009f4c <_scanf_float+0x188>
 800a03c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a040:	4639      	mov	r1, r7
 800a042:	4640      	mov	r0, r8
 800a044:	4798      	blx	r3
 800a046:	2800      	cmp	r0, #0
 800a048:	f43f aedf 	beq.w	8009e0a <_scanf_float+0x46>
 800a04c:	e6ea      	b.n	8009e24 <_scanf_float+0x60>
 800a04e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a052:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a056:	463a      	mov	r2, r7
 800a058:	4640      	mov	r0, r8
 800a05a:	4798      	blx	r3
 800a05c:	6923      	ldr	r3, [r4, #16]
 800a05e:	3b01      	subs	r3, #1
 800a060:	6123      	str	r3, [r4, #16]
 800a062:	e6ec      	b.n	8009e3e <_scanf_float+0x7a>
 800a064:	1e6b      	subs	r3, r5, #1
 800a066:	2b06      	cmp	r3, #6
 800a068:	d825      	bhi.n	800a0b6 <_scanf_float+0x2f2>
 800a06a:	2d02      	cmp	r5, #2
 800a06c:	d836      	bhi.n	800a0dc <_scanf_float+0x318>
 800a06e:	455e      	cmp	r6, fp
 800a070:	f67f aee8 	bls.w	8009e44 <_scanf_float+0x80>
 800a074:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a078:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a07c:	463a      	mov	r2, r7
 800a07e:	4640      	mov	r0, r8
 800a080:	4798      	blx	r3
 800a082:	6923      	ldr	r3, [r4, #16]
 800a084:	3b01      	subs	r3, #1
 800a086:	6123      	str	r3, [r4, #16]
 800a088:	e7f1      	b.n	800a06e <_scanf_float+0x2aa>
 800a08a:	9802      	ldr	r0, [sp, #8]
 800a08c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a090:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800a094:	9002      	str	r0, [sp, #8]
 800a096:	463a      	mov	r2, r7
 800a098:	4640      	mov	r0, r8
 800a09a:	4798      	blx	r3
 800a09c:	6923      	ldr	r3, [r4, #16]
 800a09e:	3b01      	subs	r3, #1
 800a0a0:	6123      	str	r3, [r4, #16]
 800a0a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a0a6:	fa5f fa8a 	uxtb.w	sl, sl
 800a0aa:	f1ba 0f02 	cmp.w	sl, #2
 800a0ae:	d1ec      	bne.n	800a08a <_scanf_float+0x2c6>
 800a0b0:	3d03      	subs	r5, #3
 800a0b2:	b2ed      	uxtb	r5, r5
 800a0b4:	1b76      	subs	r6, r6, r5
 800a0b6:	6823      	ldr	r3, [r4, #0]
 800a0b8:	05da      	lsls	r2, r3, #23
 800a0ba:	d52f      	bpl.n	800a11c <_scanf_float+0x358>
 800a0bc:	055b      	lsls	r3, r3, #21
 800a0be:	d510      	bpl.n	800a0e2 <_scanf_float+0x31e>
 800a0c0:	455e      	cmp	r6, fp
 800a0c2:	f67f aebf 	bls.w	8009e44 <_scanf_float+0x80>
 800a0c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a0ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a0ce:	463a      	mov	r2, r7
 800a0d0:	4640      	mov	r0, r8
 800a0d2:	4798      	blx	r3
 800a0d4:	6923      	ldr	r3, [r4, #16]
 800a0d6:	3b01      	subs	r3, #1
 800a0d8:	6123      	str	r3, [r4, #16]
 800a0da:	e7f1      	b.n	800a0c0 <_scanf_float+0x2fc>
 800a0dc:	46aa      	mov	sl, r5
 800a0de:	9602      	str	r6, [sp, #8]
 800a0e0:	e7df      	b.n	800a0a2 <_scanf_float+0x2de>
 800a0e2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a0e6:	6923      	ldr	r3, [r4, #16]
 800a0e8:	2965      	cmp	r1, #101	; 0x65
 800a0ea:	f103 33ff 	add.w	r3, r3, #4294967295
 800a0ee:	f106 35ff 	add.w	r5, r6, #4294967295
 800a0f2:	6123      	str	r3, [r4, #16]
 800a0f4:	d00c      	beq.n	800a110 <_scanf_float+0x34c>
 800a0f6:	2945      	cmp	r1, #69	; 0x45
 800a0f8:	d00a      	beq.n	800a110 <_scanf_float+0x34c>
 800a0fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a0fe:	463a      	mov	r2, r7
 800a100:	4640      	mov	r0, r8
 800a102:	4798      	blx	r3
 800a104:	6923      	ldr	r3, [r4, #16]
 800a106:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a10a:	3b01      	subs	r3, #1
 800a10c:	1eb5      	subs	r5, r6, #2
 800a10e:	6123      	str	r3, [r4, #16]
 800a110:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a114:	463a      	mov	r2, r7
 800a116:	4640      	mov	r0, r8
 800a118:	4798      	blx	r3
 800a11a:	462e      	mov	r6, r5
 800a11c:	6825      	ldr	r5, [r4, #0]
 800a11e:	f015 0510 	ands.w	r5, r5, #16
 800a122:	d159      	bne.n	800a1d8 <_scanf_float+0x414>
 800a124:	7035      	strb	r5, [r6, #0]
 800a126:	6823      	ldr	r3, [r4, #0]
 800a128:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a12c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a130:	d11b      	bne.n	800a16a <_scanf_float+0x3a6>
 800a132:	9b01      	ldr	r3, [sp, #4]
 800a134:	454b      	cmp	r3, r9
 800a136:	eba3 0209 	sub.w	r2, r3, r9
 800a13a:	d123      	bne.n	800a184 <_scanf_float+0x3c0>
 800a13c:	2200      	movs	r2, #0
 800a13e:	4659      	mov	r1, fp
 800a140:	4640      	mov	r0, r8
 800a142:	f000 ffc3 	bl	800b0cc <_strtod_r>
 800a146:	6822      	ldr	r2, [r4, #0]
 800a148:	9b03      	ldr	r3, [sp, #12]
 800a14a:	f012 0f02 	tst.w	r2, #2
 800a14e:	ec57 6b10 	vmov	r6, r7, d0
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	d021      	beq.n	800a19a <_scanf_float+0x3d6>
 800a156:	9903      	ldr	r1, [sp, #12]
 800a158:	1d1a      	adds	r2, r3, #4
 800a15a:	600a      	str	r2, [r1, #0]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	e9c3 6700 	strd	r6, r7, [r3]
 800a162:	68e3      	ldr	r3, [r4, #12]
 800a164:	3301      	adds	r3, #1
 800a166:	60e3      	str	r3, [r4, #12]
 800a168:	e66d      	b.n	8009e46 <_scanf_float+0x82>
 800a16a:	9b04      	ldr	r3, [sp, #16]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d0e5      	beq.n	800a13c <_scanf_float+0x378>
 800a170:	9905      	ldr	r1, [sp, #20]
 800a172:	230a      	movs	r3, #10
 800a174:	462a      	mov	r2, r5
 800a176:	3101      	adds	r1, #1
 800a178:	4640      	mov	r0, r8
 800a17a:	f001 f82f 	bl	800b1dc <_strtol_r>
 800a17e:	9b04      	ldr	r3, [sp, #16]
 800a180:	9e05      	ldr	r6, [sp, #20]
 800a182:	1ac2      	subs	r2, r0, r3
 800a184:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a188:	429e      	cmp	r6, r3
 800a18a:	bf28      	it	cs
 800a18c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800a190:	4912      	ldr	r1, [pc, #72]	; (800a1dc <_scanf_float+0x418>)
 800a192:	4630      	mov	r0, r6
 800a194:	f000 f8ca 	bl	800a32c <siprintf>
 800a198:	e7d0      	b.n	800a13c <_scanf_float+0x378>
 800a19a:	9903      	ldr	r1, [sp, #12]
 800a19c:	f012 0f04 	tst.w	r2, #4
 800a1a0:	f103 0204 	add.w	r2, r3, #4
 800a1a4:	600a      	str	r2, [r1, #0]
 800a1a6:	d1d9      	bne.n	800a15c <_scanf_float+0x398>
 800a1a8:	f8d3 8000 	ldr.w	r8, [r3]
 800a1ac:	ee10 2a10 	vmov	r2, s0
 800a1b0:	ee10 0a10 	vmov	r0, s0
 800a1b4:	463b      	mov	r3, r7
 800a1b6:	4639      	mov	r1, r7
 800a1b8:	f7f6 fcd0 	bl	8000b5c <__aeabi_dcmpun>
 800a1bc:	b128      	cbz	r0, 800a1ca <_scanf_float+0x406>
 800a1be:	4808      	ldr	r0, [pc, #32]	; (800a1e0 <_scanf_float+0x41c>)
 800a1c0:	f000 f8ae 	bl	800a320 <nanf>
 800a1c4:	ed88 0a00 	vstr	s0, [r8]
 800a1c8:	e7cb      	b.n	800a162 <_scanf_float+0x39e>
 800a1ca:	4630      	mov	r0, r6
 800a1cc:	4639      	mov	r1, r7
 800a1ce:	f7f6 fd23 	bl	8000c18 <__aeabi_d2f>
 800a1d2:	f8c8 0000 	str.w	r0, [r8]
 800a1d6:	e7c4      	b.n	800a162 <_scanf_float+0x39e>
 800a1d8:	2500      	movs	r5, #0
 800a1da:	e634      	b.n	8009e46 <_scanf_float+0x82>
 800a1dc:	0800e612 	.word	0x0800e612
 800a1e0:	0800ea33 	.word	0x0800ea33

0800a1e4 <iprintf>:
 800a1e4:	b40f      	push	{r0, r1, r2, r3}
 800a1e6:	4b0a      	ldr	r3, [pc, #40]	; (800a210 <iprintf+0x2c>)
 800a1e8:	b513      	push	{r0, r1, r4, lr}
 800a1ea:	681c      	ldr	r4, [r3, #0]
 800a1ec:	b124      	cbz	r4, 800a1f8 <iprintf+0x14>
 800a1ee:	69a3      	ldr	r3, [r4, #24]
 800a1f0:	b913      	cbnz	r3, 800a1f8 <iprintf+0x14>
 800a1f2:	4620      	mov	r0, r4
 800a1f4:	f7fe ffa0 	bl	8009138 <__sinit>
 800a1f8:	ab05      	add	r3, sp, #20
 800a1fa:	9a04      	ldr	r2, [sp, #16]
 800a1fc:	68a1      	ldr	r1, [r4, #8]
 800a1fe:	9301      	str	r3, [sp, #4]
 800a200:	4620      	mov	r0, r4
 800a202:	f003 fb83 	bl	800d90c <_vfiprintf_r>
 800a206:	b002      	add	sp, #8
 800a208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a20c:	b004      	add	sp, #16
 800a20e:	4770      	bx	lr
 800a210:	20000124 	.word	0x20000124

0800a214 <_puts_r>:
 800a214:	b570      	push	{r4, r5, r6, lr}
 800a216:	460e      	mov	r6, r1
 800a218:	4605      	mov	r5, r0
 800a21a:	b118      	cbz	r0, 800a224 <_puts_r+0x10>
 800a21c:	6983      	ldr	r3, [r0, #24]
 800a21e:	b90b      	cbnz	r3, 800a224 <_puts_r+0x10>
 800a220:	f7fe ff8a 	bl	8009138 <__sinit>
 800a224:	69ab      	ldr	r3, [r5, #24]
 800a226:	68ac      	ldr	r4, [r5, #8]
 800a228:	b913      	cbnz	r3, 800a230 <_puts_r+0x1c>
 800a22a:	4628      	mov	r0, r5
 800a22c:	f7fe ff84 	bl	8009138 <__sinit>
 800a230:	4b2c      	ldr	r3, [pc, #176]	; (800a2e4 <_puts_r+0xd0>)
 800a232:	429c      	cmp	r4, r3
 800a234:	d120      	bne.n	800a278 <_puts_r+0x64>
 800a236:	686c      	ldr	r4, [r5, #4]
 800a238:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a23a:	07db      	lsls	r3, r3, #31
 800a23c:	d405      	bmi.n	800a24a <_puts_r+0x36>
 800a23e:	89a3      	ldrh	r3, [r4, #12]
 800a240:	0598      	lsls	r0, r3, #22
 800a242:	d402      	bmi.n	800a24a <_puts_r+0x36>
 800a244:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a246:	f7ff f83a 	bl	80092be <__retarget_lock_acquire_recursive>
 800a24a:	89a3      	ldrh	r3, [r4, #12]
 800a24c:	0719      	lsls	r1, r3, #28
 800a24e:	d51d      	bpl.n	800a28c <_puts_r+0x78>
 800a250:	6923      	ldr	r3, [r4, #16]
 800a252:	b1db      	cbz	r3, 800a28c <_puts_r+0x78>
 800a254:	3e01      	subs	r6, #1
 800a256:	68a3      	ldr	r3, [r4, #8]
 800a258:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a25c:	3b01      	subs	r3, #1
 800a25e:	60a3      	str	r3, [r4, #8]
 800a260:	bb39      	cbnz	r1, 800a2b2 <_puts_r+0x9e>
 800a262:	2b00      	cmp	r3, #0
 800a264:	da38      	bge.n	800a2d8 <_puts_r+0xc4>
 800a266:	4622      	mov	r2, r4
 800a268:	210a      	movs	r1, #10
 800a26a:	4628      	mov	r0, r5
 800a26c:	f000 ffb8 	bl	800b1e0 <__swbuf_r>
 800a270:	3001      	adds	r0, #1
 800a272:	d011      	beq.n	800a298 <_puts_r+0x84>
 800a274:	250a      	movs	r5, #10
 800a276:	e011      	b.n	800a29c <_puts_r+0x88>
 800a278:	4b1b      	ldr	r3, [pc, #108]	; (800a2e8 <_puts_r+0xd4>)
 800a27a:	429c      	cmp	r4, r3
 800a27c:	d101      	bne.n	800a282 <_puts_r+0x6e>
 800a27e:	68ac      	ldr	r4, [r5, #8]
 800a280:	e7da      	b.n	800a238 <_puts_r+0x24>
 800a282:	4b1a      	ldr	r3, [pc, #104]	; (800a2ec <_puts_r+0xd8>)
 800a284:	429c      	cmp	r4, r3
 800a286:	bf08      	it	eq
 800a288:	68ec      	ldreq	r4, [r5, #12]
 800a28a:	e7d5      	b.n	800a238 <_puts_r+0x24>
 800a28c:	4621      	mov	r1, r4
 800a28e:	4628      	mov	r0, r5
 800a290:	f001 f80a 	bl	800b2a8 <__swsetup_r>
 800a294:	2800      	cmp	r0, #0
 800a296:	d0dd      	beq.n	800a254 <_puts_r+0x40>
 800a298:	f04f 35ff 	mov.w	r5, #4294967295
 800a29c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a29e:	07da      	lsls	r2, r3, #31
 800a2a0:	d405      	bmi.n	800a2ae <_puts_r+0x9a>
 800a2a2:	89a3      	ldrh	r3, [r4, #12]
 800a2a4:	059b      	lsls	r3, r3, #22
 800a2a6:	d402      	bmi.n	800a2ae <_puts_r+0x9a>
 800a2a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a2aa:	f7ff f809 	bl	80092c0 <__retarget_lock_release_recursive>
 800a2ae:	4628      	mov	r0, r5
 800a2b0:	bd70      	pop	{r4, r5, r6, pc}
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	da04      	bge.n	800a2c0 <_puts_r+0xac>
 800a2b6:	69a2      	ldr	r2, [r4, #24]
 800a2b8:	429a      	cmp	r2, r3
 800a2ba:	dc06      	bgt.n	800a2ca <_puts_r+0xb6>
 800a2bc:	290a      	cmp	r1, #10
 800a2be:	d004      	beq.n	800a2ca <_puts_r+0xb6>
 800a2c0:	6823      	ldr	r3, [r4, #0]
 800a2c2:	1c5a      	adds	r2, r3, #1
 800a2c4:	6022      	str	r2, [r4, #0]
 800a2c6:	7019      	strb	r1, [r3, #0]
 800a2c8:	e7c5      	b.n	800a256 <_puts_r+0x42>
 800a2ca:	4622      	mov	r2, r4
 800a2cc:	4628      	mov	r0, r5
 800a2ce:	f000 ff87 	bl	800b1e0 <__swbuf_r>
 800a2d2:	3001      	adds	r0, #1
 800a2d4:	d1bf      	bne.n	800a256 <_puts_r+0x42>
 800a2d6:	e7df      	b.n	800a298 <_puts_r+0x84>
 800a2d8:	6823      	ldr	r3, [r4, #0]
 800a2da:	250a      	movs	r5, #10
 800a2dc:	1c5a      	adds	r2, r3, #1
 800a2de:	6022      	str	r2, [r4, #0]
 800a2e0:	701d      	strb	r5, [r3, #0]
 800a2e2:	e7db      	b.n	800a29c <_puts_r+0x88>
 800a2e4:	0800e59c 	.word	0x0800e59c
 800a2e8:	0800e5bc 	.word	0x0800e5bc
 800a2ec:	0800e57c 	.word	0x0800e57c

0800a2f0 <puts>:
 800a2f0:	4b02      	ldr	r3, [pc, #8]	; (800a2fc <puts+0xc>)
 800a2f2:	4601      	mov	r1, r0
 800a2f4:	6818      	ldr	r0, [r3, #0]
 800a2f6:	f7ff bf8d 	b.w	800a214 <_puts_r>
 800a2fa:	bf00      	nop
 800a2fc:	20000124 	.word	0x20000124

0800a300 <_sbrk_r>:
 800a300:	b538      	push	{r3, r4, r5, lr}
 800a302:	4d06      	ldr	r5, [pc, #24]	; (800a31c <_sbrk_r+0x1c>)
 800a304:	2300      	movs	r3, #0
 800a306:	4604      	mov	r4, r0
 800a308:	4608      	mov	r0, r1
 800a30a:	602b      	str	r3, [r5, #0]
 800a30c:	f7f7 fb04 	bl	8001918 <_sbrk>
 800a310:	1c43      	adds	r3, r0, #1
 800a312:	d102      	bne.n	800a31a <_sbrk_r+0x1a>
 800a314:	682b      	ldr	r3, [r5, #0]
 800a316:	b103      	cbz	r3, 800a31a <_sbrk_r+0x1a>
 800a318:	6023      	str	r3, [r4, #0]
 800a31a:	bd38      	pop	{r3, r4, r5, pc}
 800a31c:	200014b4 	.word	0x200014b4

0800a320 <nanf>:
 800a320:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a328 <nanf+0x8>
 800a324:	4770      	bx	lr
 800a326:	bf00      	nop
 800a328:	7fc00000 	.word	0x7fc00000

0800a32c <siprintf>:
 800a32c:	b40e      	push	{r1, r2, r3}
 800a32e:	b500      	push	{lr}
 800a330:	b09c      	sub	sp, #112	; 0x70
 800a332:	ab1d      	add	r3, sp, #116	; 0x74
 800a334:	9002      	str	r0, [sp, #8]
 800a336:	9006      	str	r0, [sp, #24]
 800a338:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a33c:	4809      	ldr	r0, [pc, #36]	; (800a364 <siprintf+0x38>)
 800a33e:	9107      	str	r1, [sp, #28]
 800a340:	9104      	str	r1, [sp, #16]
 800a342:	4909      	ldr	r1, [pc, #36]	; (800a368 <siprintf+0x3c>)
 800a344:	f853 2b04 	ldr.w	r2, [r3], #4
 800a348:	9105      	str	r1, [sp, #20]
 800a34a:	6800      	ldr	r0, [r0, #0]
 800a34c:	9301      	str	r3, [sp, #4]
 800a34e:	a902      	add	r1, sp, #8
 800a350:	f002 ffe0 	bl	800d314 <_svfiprintf_r>
 800a354:	9b02      	ldr	r3, [sp, #8]
 800a356:	2200      	movs	r2, #0
 800a358:	701a      	strb	r2, [r3, #0]
 800a35a:	b01c      	add	sp, #112	; 0x70
 800a35c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a360:	b003      	add	sp, #12
 800a362:	4770      	bx	lr
 800a364:	20000124 	.word	0x20000124
 800a368:	ffff0208 	.word	0xffff0208

0800a36c <siscanf>:
 800a36c:	b40e      	push	{r1, r2, r3}
 800a36e:	b510      	push	{r4, lr}
 800a370:	b09f      	sub	sp, #124	; 0x7c
 800a372:	ac21      	add	r4, sp, #132	; 0x84
 800a374:	f44f 7101 	mov.w	r1, #516	; 0x204
 800a378:	f854 2b04 	ldr.w	r2, [r4], #4
 800a37c:	9201      	str	r2, [sp, #4]
 800a37e:	f8ad 101c 	strh.w	r1, [sp, #28]
 800a382:	9004      	str	r0, [sp, #16]
 800a384:	9008      	str	r0, [sp, #32]
 800a386:	f7f5 ff3b 	bl	8000200 <strlen>
 800a38a:	4b0c      	ldr	r3, [pc, #48]	; (800a3bc <siscanf+0x50>)
 800a38c:	9005      	str	r0, [sp, #20]
 800a38e:	9009      	str	r0, [sp, #36]	; 0x24
 800a390:	930d      	str	r3, [sp, #52]	; 0x34
 800a392:	480b      	ldr	r0, [pc, #44]	; (800a3c0 <siscanf+0x54>)
 800a394:	9a01      	ldr	r2, [sp, #4]
 800a396:	6800      	ldr	r0, [r0, #0]
 800a398:	9403      	str	r4, [sp, #12]
 800a39a:	2300      	movs	r3, #0
 800a39c:	9311      	str	r3, [sp, #68]	; 0x44
 800a39e:	9316      	str	r3, [sp, #88]	; 0x58
 800a3a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a3a4:	f8ad 301e 	strh.w	r3, [sp, #30]
 800a3a8:	a904      	add	r1, sp, #16
 800a3aa:	4623      	mov	r3, r4
 800a3ac:	f003 f90c 	bl	800d5c8 <__ssvfiscanf_r>
 800a3b0:	b01f      	add	sp, #124	; 0x7c
 800a3b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3b6:	b003      	add	sp, #12
 800a3b8:	4770      	bx	lr
 800a3ba:	bf00      	nop
 800a3bc:	0800a3e7 	.word	0x0800a3e7
 800a3c0:	20000124 	.word	0x20000124

0800a3c4 <__sread>:
 800a3c4:	b510      	push	{r4, lr}
 800a3c6:	460c      	mov	r4, r1
 800a3c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3cc:	f003 fd20 	bl	800de10 <_read_r>
 800a3d0:	2800      	cmp	r0, #0
 800a3d2:	bfab      	itete	ge
 800a3d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a3d6:	89a3      	ldrhlt	r3, [r4, #12]
 800a3d8:	181b      	addge	r3, r3, r0
 800a3da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a3de:	bfac      	ite	ge
 800a3e0:	6563      	strge	r3, [r4, #84]	; 0x54
 800a3e2:	81a3      	strhlt	r3, [r4, #12]
 800a3e4:	bd10      	pop	{r4, pc}

0800a3e6 <__seofread>:
 800a3e6:	2000      	movs	r0, #0
 800a3e8:	4770      	bx	lr

0800a3ea <__swrite>:
 800a3ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3ee:	461f      	mov	r7, r3
 800a3f0:	898b      	ldrh	r3, [r1, #12]
 800a3f2:	05db      	lsls	r3, r3, #23
 800a3f4:	4605      	mov	r5, r0
 800a3f6:	460c      	mov	r4, r1
 800a3f8:	4616      	mov	r6, r2
 800a3fa:	d505      	bpl.n	800a408 <__swrite+0x1e>
 800a3fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a400:	2302      	movs	r3, #2
 800a402:	2200      	movs	r2, #0
 800a404:	f002 f9be 	bl	800c784 <_lseek_r>
 800a408:	89a3      	ldrh	r3, [r4, #12]
 800a40a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a40e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a412:	81a3      	strh	r3, [r4, #12]
 800a414:	4632      	mov	r2, r6
 800a416:	463b      	mov	r3, r7
 800a418:	4628      	mov	r0, r5
 800a41a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a41e:	f000 bf31 	b.w	800b284 <_write_r>

0800a422 <__sseek>:
 800a422:	b510      	push	{r4, lr}
 800a424:	460c      	mov	r4, r1
 800a426:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a42a:	f002 f9ab 	bl	800c784 <_lseek_r>
 800a42e:	1c43      	adds	r3, r0, #1
 800a430:	89a3      	ldrh	r3, [r4, #12]
 800a432:	bf15      	itete	ne
 800a434:	6560      	strne	r0, [r4, #84]	; 0x54
 800a436:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a43a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a43e:	81a3      	strheq	r3, [r4, #12]
 800a440:	bf18      	it	ne
 800a442:	81a3      	strhne	r3, [r4, #12]
 800a444:	bd10      	pop	{r4, pc}

0800a446 <__sclose>:
 800a446:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a44a:	f000 bf9b 	b.w	800b384 <_close_r>

0800a44e <strcpy>:
 800a44e:	4603      	mov	r3, r0
 800a450:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a454:	f803 2b01 	strb.w	r2, [r3], #1
 800a458:	2a00      	cmp	r2, #0
 800a45a:	d1f9      	bne.n	800a450 <strcpy+0x2>
 800a45c:	4770      	bx	lr

0800a45e <strncpy>:
 800a45e:	b510      	push	{r4, lr}
 800a460:	3901      	subs	r1, #1
 800a462:	4603      	mov	r3, r0
 800a464:	b132      	cbz	r2, 800a474 <strncpy+0x16>
 800a466:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a46a:	f803 4b01 	strb.w	r4, [r3], #1
 800a46e:	3a01      	subs	r2, #1
 800a470:	2c00      	cmp	r4, #0
 800a472:	d1f7      	bne.n	800a464 <strncpy+0x6>
 800a474:	441a      	add	r2, r3
 800a476:	2100      	movs	r1, #0
 800a478:	4293      	cmp	r3, r2
 800a47a:	d100      	bne.n	800a47e <strncpy+0x20>
 800a47c:	bd10      	pop	{r4, pc}
 800a47e:	f803 1b01 	strb.w	r1, [r3], #1
 800a482:	e7f9      	b.n	800a478 <strncpy+0x1a>

0800a484 <sulp>:
 800a484:	b570      	push	{r4, r5, r6, lr}
 800a486:	4604      	mov	r4, r0
 800a488:	460d      	mov	r5, r1
 800a48a:	ec45 4b10 	vmov	d0, r4, r5
 800a48e:	4616      	mov	r6, r2
 800a490:	f002 fd80 	bl	800cf94 <__ulp>
 800a494:	ec51 0b10 	vmov	r0, r1, d0
 800a498:	b17e      	cbz	r6, 800a4ba <sulp+0x36>
 800a49a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a49e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	dd09      	ble.n	800a4ba <sulp+0x36>
 800a4a6:	051b      	lsls	r3, r3, #20
 800a4a8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a4ac:	2400      	movs	r4, #0
 800a4ae:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a4b2:	4622      	mov	r2, r4
 800a4b4:	462b      	mov	r3, r5
 800a4b6:	f7f6 f8b7 	bl	8000628 <__aeabi_dmul>
 800a4ba:	bd70      	pop	{r4, r5, r6, pc}
 800a4bc:	0000      	movs	r0, r0
	...

0800a4c0 <_strtod_l>:
 800a4c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4c4:	ed2d 8b02 	vpush	{d8}
 800a4c8:	b09d      	sub	sp, #116	; 0x74
 800a4ca:	461f      	mov	r7, r3
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	9318      	str	r3, [sp, #96]	; 0x60
 800a4d0:	4ba2      	ldr	r3, [pc, #648]	; (800a75c <_strtod_l+0x29c>)
 800a4d2:	9213      	str	r2, [sp, #76]	; 0x4c
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	9305      	str	r3, [sp, #20]
 800a4d8:	4604      	mov	r4, r0
 800a4da:	4618      	mov	r0, r3
 800a4dc:	4688      	mov	r8, r1
 800a4de:	f7f5 fe8f 	bl	8000200 <strlen>
 800a4e2:	f04f 0a00 	mov.w	sl, #0
 800a4e6:	4605      	mov	r5, r0
 800a4e8:	f04f 0b00 	mov.w	fp, #0
 800a4ec:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a4f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a4f2:	781a      	ldrb	r2, [r3, #0]
 800a4f4:	2a2b      	cmp	r2, #43	; 0x2b
 800a4f6:	d04e      	beq.n	800a596 <_strtod_l+0xd6>
 800a4f8:	d83b      	bhi.n	800a572 <_strtod_l+0xb2>
 800a4fa:	2a0d      	cmp	r2, #13
 800a4fc:	d834      	bhi.n	800a568 <_strtod_l+0xa8>
 800a4fe:	2a08      	cmp	r2, #8
 800a500:	d834      	bhi.n	800a56c <_strtod_l+0xac>
 800a502:	2a00      	cmp	r2, #0
 800a504:	d03e      	beq.n	800a584 <_strtod_l+0xc4>
 800a506:	2300      	movs	r3, #0
 800a508:	930a      	str	r3, [sp, #40]	; 0x28
 800a50a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800a50c:	7833      	ldrb	r3, [r6, #0]
 800a50e:	2b30      	cmp	r3, #48	; 0x30
 800a510:	f040 80b0 	bne.w	800a674 <_strtod_l+0x1b4>
 800a514:	7873      	ldrb	r3, [r6, #1]
 800a516:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a51a:	2b58      	cmp	r3, #88	; 0x58
 800a51c:	d168      	bne.n	800a5f0 <_strtod_l+0x130>
 800a51e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a520:	9301      	str	r3, [sp, #4]
 800a522:	ab18      	add	r3, sp, #96	; 0x60
 800a524:	9702      	str	r7, [sp, #8]
 800a526:	9300      	str	r3, [sp, #0]
 800a528:	4a8d      	ldr	r2, [pc, #564]	; (800a760 <_strtod_l+0x2a0>)
 800a52a:	ab19      	add	r3, sp, #100	; 0x64
 800a52c:	a917      	add	r1, sp, #92	; 0x5c
 800a52e:	4620      	mov	r0, r4
 800a530:	f001 fe1c 	bl	800c16c <__gethex>
 800a534:	f010 0707 	ands.w	r7, r0, #7
 800a538:	4605      	mov	r5, r0
 800a53a:	d005      	beq.n	800a548 <_strtod_l+0x88>
 800a53c:	2f06      	cmp	r7, #6
 800a53e:	d12c      	bne.n	800a59a <_strtod_l+0xda>
 800a540:	3601      	adds	r6, #1
 800a542:	2300      	movs	r3, #0
 800a544:	9617      	str	r6, [sp, #92]	; 0x5c
 800a546:	930a      	str	r3, [sp, #40]	; 0x28
 800a548:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	f040 8590 	bne.w	800b070 <_strtod_l+0xbb0>
 800a550:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a552:	b1eb      	cbz	r3, 800a590 <_strtod_l+0xd0>
 800a554:	4652      	mov	r2, sl
 800a556:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a55a:	ec43 2b10 	vmov	d0, r2, r3
 800a55e:	b01d      	add	sp, #116	; 0x74
 800a560:	ecbd 8b02 	vpop	{d8}
 800a564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a568:	2a20      	cmp	r2, #32
 800a56a:	d1cc      	bne.n	800a506 <_strtod_l+0x46>
 800a56c:	3301      	adds	r3, #1
 800a56e:	9317      	str	r3, [sp, #92]	; 0x5c
 800a570:	e7be      	b.n	800a4f0 <_strtod_l+0x30>
 800a572:	2a2d      	cmp	r2, #45	; 0x2d
 800a574:	d1c7      	bne.n	800a506 <_strtod_l+0x46>
 800a576:	2201      	movs	r2, #1
 800a578:	920a      	str	r2, [sp, #40]	; 0x28
 800a57a:	1c5a      	adds	r2, r3, #1
 800a57c:	9217      	str	r2, [sp, #92]	; 0x5c
 800a57e:	785b      	ldrb	r3, [r3, #1]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d1c2      	bne.n	800a50a <_strtod_l+0x4a>
 800a584:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a586:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	f040 856e 	bne.w	800b06c <_strtod_l+0xbac>
 800a590:	4652      	mov	r2, sl
 800a592:	465b      	mov	r3, fp
 800a594:	e7e1      	b.n	800a55a <_strtod_l+0x9a>
 800a596:	2200      	movs	r2, #0
 800a598:	e7ee      	b.n	800a578 <_strtod_l+0xb8>
 800a59a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a59c:	b13a      	cbz	r2, 800a5ae <_strtod_l+0xee>
 800a59e:	2135      	movs	r1, #53	; 0x35
 800a5a0:	a81a      	add	r0, sp, #104	; 0x68
 800a5a2:	f002 fe02 	bl	800d1aa <__copybits>
 800a5a6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a5a8:	4620      	mov	r0, r4
 800a5aa:	f002 f9c1 	bl	800c930 <_Bfree>
 800a5ae:	3f01      	subs	r7, #1
 800a5b0:	2f04      	cmp	r7, #4
 800a5b2:	d806      	bhi.n	800a5c2 <_strtod_l+0x102>
 800a5b4:	e8df f007 	tbb	[pc, r7]
 800a5b8:	1714030a 	.word	0x1714030a
 800a5bc:	0a          	.byte	0x0a
 800a5bd:	00          	.byte	0x00
 800a5be:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800a5c2:	0728      	lsls	r0, r5, #28
 800a5c4:	d5c0      	bpl.n	800a548 <_strtod_l+0x88>
 800a5c6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800a5ca:	e7bd      	b.n	800a548 <_strtod_l+0x88>
 800a5cc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800a5d0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a5d2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a5d6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a5da:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a5de:	e7f0      	b.n	800a5c2 <_strtod_l+0x102>
 800a5e0:	f8df b180 	ldr.w	fp, [pc, #384]	; 800a764 <_strtod_l+0x2a4>
 800a5e4:	e7ed      	b.n	800a5c2 <_strtod_l+0x102>
 800a5e6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800a5ea:	f04f 3aff 	mov.w	sl, #4294967295
 800a5ee:	e7e8      	b.n	800a5c2 <_strtod_l+0x102>
 800a5f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a5f2:	1c5a      	adds	r2, r3, #1
 800a5f4:	9217      	str	r2, [sp, #92]	; 0x5c
 800a5f6:	785b      	ldrb	r3, [r3, #1]
 800a5f8:	2b30      	cmp	r3, #48	; 0x30
 800a5fa:	d0f9      	beq.n	800a5f0 <_strtod_l+0x130>
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d0a3      	beq.n	800a548 <_strtod_l+0x88>
 800a600:	2301      	movs	r3, #1
 800a602:	f04f 0900 	mov.w	r9, #0
 800a606:	9304      	str	r3, [sp, #16]
 800a608:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a60a:	9308      	str	r3, [sp, #32]
 800a60c:	f8cd 901c 	str.w	r9, [sp, #28]
 800a610:	464f      	mov	r7, r9
 800a612:	220a      	movs	r2, #10
 800a614:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800a616:	7806      	ldrb	r6, [r0, #0]
 800a618:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a61c:	b2d9      	uxtb	r1, r3
 800a61e:	2909      	cmp	r1, #9
 800a620:	d92a      	bls.n	800a678 <_strtod_l+0x1b8>
 800a622:	9905      	ldr	r1, [sp, #20]
 800a624:	462a      	mov	r2, r5
 800a626:	f003 fc47 	bl	800deb8 <strncmp>
 800a62a:	b398      	cbz	r0, 800a694 <_strtod_l+0x1d4>
 800a62c:	2000      	movs	r0, #0
 800a62e:	4632      	mov	r2, r6
 800a630:	463d      	mov	r5, r7
 800a632:	9005      	str	r0, [sp, #20]
 800a634:	4603      	mov	r3, r0
 800a636:	2a65      	cmp	r2, #101	; 0x65
 800a638:	d001      	beq.n	800a63e <_strtod_l+0x17e>
 800a63a:	2a45      	cmp	r2, #69	; 0x45
 800a63c:	d118      	bne.n	800a670 <_strtod_l+0x1b0>
 800a63e:	b91d      	cbnz	r5, 800a648 <_strtod_l+0x188>
 800a640:	9a04      	ldr	r2, [sp, #16]
 800a642:	4302      	orrs	r2, r0
 800a644:	d09e      	beq.n	800a584 <_strtod_l+0xc4>
 800a646:	2500      	movs	r5, #0
 800a648:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800a64c:	f108 0201 	add.w	r2, r8, #1
 800a650:	9217      	str	r2, [sp, #92]	; 0x5c
 800a652:	f898 2001 	ldrb.w	r2, [r8, #1]
 800a656:	2a2b      	cmp	r2, #43	; 0x2b
 800a658:	d075      	beq.n	800a746 <_strtod_l+0x286>
 800a65a:	2a2d      	cmp	r2, #45	; 0x2d
 800a65c:	d07b      	beq.n	800a756 <_strtod_l+0x296>
 800a65e:	f04f 0c00 	mov.w	ip, #0
 800a662:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a666:	2909      	cmp	r1, #9
 800a668:	f240 8082 	bls.w	800a770 <_strtod_l+0x2b0>
 800a66c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a670:	2600      	movs	r6, #0
 800a672:	e09d      	b.n	800a7b0 <_strtod_l+0x2f0>
 800a674:	2300      	movs	r3, #0
 800a676:	e7c4      	b.n	800a602 <_strtod_l+0x142>
 800a678:	2f08      	cmp	r7, #8
 800a67a:	bfd8      	it	le
 800a67c:	9907      	ldrle	r1, [sp, #28]
 800a67e:	f100 0001 	add.w	r0, r0, #1
 800a682:	bfda      	itte	le
 800a684:	fb02 3301 	mlale	r3, r2, r1, r3
 800a688:	9307      	strle	r3, [sp, #28]
 800a68a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800a68e:	3701      	adds	r7, #1
 800a690:	9017      	str	r0, [sp, #92]	; 0x5c
 800a692:	e7bf      	b.n	800a614 <_strtod_l+0x154>
 800a694:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a696:	195a      	adds	r2, r3, r5
 800a698:	9217      	str	r2, [sp, #92]	; 0x5c
 800a69a:	5d5a      	ldrb	r2, [r3, r5]
 800a69c:	2f00      	cmp	r7, #0
 800a69e:	d037      	beq.n	800a710 <_strtod_l+0x250>
 800a6a0:	9005      	str	r0, [sp, #20]
 800a6a2:	463d      	mov	r5, r7
 800a6a4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a6a8:	2b09      	cmp	r3, #9
 800a6aa:	d912      	bls.n	800a6d2 <_strtod_l+0x212>
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	e7c2      	b.n	800a636 <_strtod_l+0x176>
 800a6b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a6b2:	1c5a      	adds	r2, r3, #1
 800a6b4:	9217      	str	r2, [sp, #92]	; 0x5c
 800a6b6:	785a      	ldrb	r2, [r3, #1]
 800a6b8:	3001      	adds	r0, #1
 800a6ba:	2a30      	cmp	r2, #48	; 0x30
 800a6bc:	d0f8      	beq.n	800a6b0 <_strtod_l+0x1f0>
 800a6be:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a6c2:	2b08      	cmp	r3, #8
 800a6c4:	f200 84d9 	bhi.w	800b07a <_strtod_l+0xbba>
 800a6c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a6ca:	9005      	str	r0, [sp, #20]
 800a6cc:	2000      	movs	r0, #0
 800a6ce:	9308      	str	r3, [sp, #32]
 800a6d0:	4605      	mov	r5, r0
 800a6d2:	3a30      	subs	r2, #48	; 0x30
 800a6d4:	f100 0301 	add.w	r3, r0, #1
 800a6d8:	d014      	beq.n	800a704 <_strtod_l+0x244>
 800a6da:	9905      	ldr	r1, [sp, #20]
 800a6dc:	4419      	add	r1, r3
 800a6de:	9105      	str	r1, [sp, #20]
 800a6e0:	462b      	mov	r3, r5
 800a6e2:	eb00 0e05 	add.w	lr, r0, r5
 800a6e6:	210a      	movs	r1, #10
 800a6e8:	4573      	cmp	r3, lr
 800a6ea:	d113      	bne.n	800a714 <_strtod_l+0x254>
 800a6ec:	182b      	adds	r3, r5, r0
 800a6ee:	2b08      	cmp	r3, #8
 800a6f0:	f105 0501 	add.w	r5, r5, #1
 800a6f4:	4405      	add	r5, r0
 800a6f6:	dc1c      	bgt.n	800a732 <_strtod_l+0x272>
 800a6f8:	9907      	ldr	r1, [sp, #28]
 800a6fa:	230a      	movs	r3, #10
 800a6fc:	fb03 2301 	mla	r3, r3, r1, r2
 800a700:	9307      	str	r3, [sp, #28]
 800a702:	2300      	movs	r3, #0
 800a704:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a706:	1c51      	adds	r1, r2, #1
 800a708:	9117      	str	r1, [sp, #92]	; 0x5c
 800a70a:	7852      	ldrb	r2, [r2, #1]
 800a70c:	4618      	mov	r0, r3
 800a70e:	e7c9      	b.n	800a6a4 <_strtod_l+0x1e4>
 800a710:	4638      	mov	r0, r7
 800a712:	e7d2      	b.n	800a6ba <_strtod_l+0x1fa>
 800a714:	2b08      	cmp	r3, #8
 800a716:	dc04      	bgt.n	800a722 <_strtod_l+0x262>
 800a718:	9e07      	ldr	r6, [sp, #28]
 800a71a:	434e      	muls	r6, r1
 800a71c:	9607      	str	r6, [sp, #28]
 800a71e:	3301      	adds	r3, #1
 800a720:	e7e2      	b.n	800a6e8 <_strtod_l+0x228>
 800a722:	f103 0c01 	add.w	ip, r3, #1
 800a726:	f1bc 0f10 	cmp.w	ip, #16
 800a72a:	bfd8      	it	le
 800a72c:	fb01 f909 	mulle.w	r9, r1, r9
 800a730:	e7f5      	b.n	800a71e <_strtod_l+0x25e>
 800a732:	2d10      	cmp	r5, #16
 800a734:	bfdc      	itt	le
 800a736:	230a      	movle	r3, #10
 800a738:	fb03 2909 	mlale	r9, r3, r9, r2
 800a73c:	e7e1      	b.n	800a702 <_strtod_l+0x242>
 800a73e:	2300      	movs	r3, #0
 800a740:	9305      	str	r3, [sp, #20]
 800a742:	2301      	movs	r3, #1
 800a744:	e77c      	b.n	800a640 <_strtod_l+0x180>
 800a746:	f04f 0c00 	mov.w	ip, #0
 800a74a:	f108 0202 	add.w	r2, r8, #2
 800a74e:	9217      	str	r2, [sp, #92]	; 0x5c
 800a750:	f898 2002 	ldrb.w	r2, [r8, #2]
 800a754:	e785      	b.n	800a662 <_strtod_l+0x1a2>
 800a756:	f04f 0c01 	mov.w	ip, #1
 800a75a:	e7f6      	b.n	800a74a <_strtod_l+0x28a>
 800a75c:	0800e860 	.word	0x0800e860
 800a760:	0800e618 	.word	0x0800e618
 800a764:	7ff00000 	.word	0x7ff00000
 800a768:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a76a:	1c51      	adds	r1, r2, #1
 800a76c:	9117      	str	r1, [sp, #92]	; 0x5c
 800a76e:	7852      	ldrb	r2, [r2, #1]
 800a770:	2a30      	cmp	r2, #48	; 0x30
 800a772:	d0f9      	beq.n	800a768 <_strtod_l+0x2a8>
 800a774:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800a778:	2908      	cmp	r1, #8
 800a77a:	f63f af79 	bhi.w	800a670 <_strtod_l+0x1b0>
 800a77e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800a782:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a784:	9206      	str	r2, [sp, #24]
 800a786:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a788:	1c51      	adds	r1, r2, #1
 800a78a:	9117      	str	r1, [sp, #92]	; 0x5c
 800a78c:	7852      	ldrb	r2, [r2, #1]
 800a78e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800a792:	2e09      	cmp	r6, #9
 800a794:	d937      	bls.n	800a806 <_strtod_l+0x346>
 800a796:	9e06      	ldr	r6, [sp, #24]
 800a798:	1b89      	subs	r1, r1, r6
 800a79a:	2908      	cmp	r1, #8
 800a79c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800a7a0:	dc02      	bgt.n	800a7a8 <_strtod_l+0x2e8>
 800a7a2:	4576      	cmp	r6, lr
 800a7a4:	bfa8      	it	ge
 800a7a6:	4676      	movge	r6, lr
 800a7a8:	f1bc 0f00 	cmp.w	ip, #0
 800a7ac:	d000      	beq.n	800a7b0 <_strtod_l+0x2f0>
 800a7ae:	4276      	negs	r6, r6
 800a7b0:	2d00      	cmp	r5, #0
 800a7b2:	d14d      	bne.n	800a850 <_strtod_l+0x390>
 800a7b4:	9904      	ldr	r1, [sp, #16]
 800a7b6:	4301      	orrs	r1, r0
 800a7b8:	f47f aec6 	bne.w	800a548 <_strtod_l+0x88>
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	f47f aee1 	bne.w	800a584 <_strtod_l+0xc4>
 800a7c2:	2a69      	cmp	r2, #105	; 0x69
 800a7c4:	d027      	beq.n	800a816 <_strtod_l+0x356>
 800a7c6:	dc24      	bgt.n	800a812 <_strtod_l+0x352>
 800a7c8:	2a49      	cmp	r2, #73	; 0x49
 800a7ca:	d024      	beq.n	800a816 <_strtod_l+0x356>
 800a7cc:	2a4e      	cmp	r2, #78	; 0x4e
 800a7ce:	f47f aed9 	bne.w	800a584 <_strtod_l+0xc4>
 800a7d2:	499f      	ldr	r1, [pc, #636]	; (800aa50 <_strtod_l+0x590>)
 800a7d4:	a817      	add	r0, sp, #92	; 0x5c
 800a7d6:	f001 ff21 	bl	800c61c <__match>
 800a7da:	2800      	cmp	r0, #0
 800a7dc:	f43f aed2 	beq.w	800a584 <_strtod_l+0xc4>
 800a7e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a7e2:	781b      	ldrb	r3, [r3, #0]
 800a7e4:	2b28      	cmp	r3, #40	; 0x28
 800a7e6:	d12d      	bne.n	800a844 <_strtod_l+0x384>
 800a7e8:	499a      	ldr	r1, [pc, #616]	; (800aa54 <_strtod_l+0x594>)
 800a7ea:	aa1a      	add	r2, sp, #104	; 0x68
 800a7ec:	a817      	add	r0, sp, #92	; 0x5c
 800a7ee:	f001 ff29 	bl	800c644 <__hexnan>
 800a7f2:	2805      	cmp	r0, #5
 800a7f4:	d126      	bne.n	800a844 <_strtod_l+0x384>
 800a7f6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a7f8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800a7fc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800a800:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800a804:	e6a0      	b.n	800a548 <_strtod_l+0x88>
 800a806:	210a      	movs	r1, #10
 800a808:	fb01 2e0e 	mla	lr, r1, lr, r2
 800a80c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800a810:	e7b9      	b.n	800a786 <_strtod_l+0x2c6>
 800a812:	2a6e      	cmp	r2, #110	; 0x6e
 800a814:	e7db      	b.n	800a7ce <_strtod_l+0x30e>
 800a816:	4990      	ldr	r1, [pc, #576]	; (800aa58 <_strtod_l+0x598>)
 800a818:	a817      	add	r0, sp, #92	; 0x5c
 800a81a:	f001 feff 	bl	800c61c <__match>
 800a81e:	2800      	cmp	r0, #0
 800a820:	f43f aeb0 	beq.w	800a584 <_strtod_l+0xc4>
 800a824:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a826:	498d      	ldr	r1, [pc, #564]	; (800aa5c <_strtod_l+0x59c>)
 800a828:	3b01      	subs	r3, #1
 800a82a:	a817      	add	r0, sp, #92	; 0x5c
 800a82c:	9317      	str	r3, [sp, #92]	; 0x5c
 800a82e:	f001 fef5 	bl	800c61c <__match>
 800a832:	b910      	cbnz	r0, 800a83a <_strtod_l+0x37a>
 800a834:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a836:	3301      	adds	r3, #1
 800a838:	9317      	str	r3, [sp, #92]	; 0x5c
 800a83a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800aa6c <_strtod_l+0x5ac>
 800a83e:	f04f 0a00 	mov.w	sl, #0
 800a842:	e681      	b.n	800a548 <_strtod_l+0x88>
 800a844:	4886      	ldr	r0, [pc, #536]	; (800aa60 <_strtod_l+0x5a0>)
 800a846:	f003 faf7 	bl	800de38 <nan>
 800a84a:	ec5b ab10 	vmov	sl, fp, d0
 800a84e:	e67b      	b.n	800a548 <_strtod_l+0x88>
 800a850:	9b05      	ldr	r3, [sp, #20]
 800a852:	9807      	ldr	r0, [sp, #28]
 800a854:	1af3      	subs	r3, r6, r3
 800a856:	2f00      	cmp	r7, #0
 800a858:	bf08      	it	eq
 800a85a:	462f      	moveq	r7, r5
 800a85c:	2d10      	cmp	r5, #16
 800a85e:	9306      	str	r3, [sp, #24]
 800a860:	46a8      	mov	r8, r5
 800a862:	bfa8      	it	ge
 800a864:	f04f 0810 	movge.w	r8, #16
 800a868:	f7f5 fe64 	bl	8000534 <__aeabi_ui2d>
 800a86c:	2d09      	cmp	r5, #9
 800a86e:	4682      	mov	sl, r0
 800a870:	468b      	mov	fp, r1
 800a872:	dd13      	ble.n	800a89c <_strtod_l+0x3dc>
 800a874:	4b7b      	ldr	r3, [pc, #492]	; (800aa64 <_strtod_l+0x5a4>)
 800a876:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a87a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a87e:	f7f5 fed3 	bl	8000628 <__aeabi_dmul>
 800a882:	4682      	mov	sl, r0
 800a884:	4648      	mov	r0, r9
 800a886:	468b      	mov	fp, r1
 800a888:	f7f5 fe54 	bl	8000534 <__aeabi_ui2d>
 800a88c:	4602      	mov	r2, r0
 800a88e:	460b      	mov	r3, r1
 800a890:	4650      	mov	r0, sl
 800a892:	4659      	mov	r1, fp
 800a894:	f7f5 fd12 	bl	80002bc <__adddf3>
 800a898:	4682      	mov	sl, r0
 800a89a:	468b      	mov	fp, r1
 800a89c:	2d0f      	cmp	r5, #15
 800a89e:	dc38      	bgt.n	800a912 <_strtod_l+0x452>
 800a8a0:	9b06      	ldr	r3, [sp, #24]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	f43f ae50 	beq.w	800a548 <_strtod_l+0x88>
 800a8a8:	dd24      	ble.n	800a8f4 <_strtod_l+0x434>
 800a8aa:	2b16      	cmp	r3, #22
 800a8ac:	dc0b      	bgt.n	800a8c6 <_strtod_l+0x406>
 800a8ae:	496d      	ldr	r1, [pc, #436]	; (800aa64 <_strtod_l+0x5a4>)
 800a8b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a8b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a8b8:	4652      	mov	r2, sl
 800a8ba:	465b      	mov	r3, fp
 800a8bc:	f7f5 feb4 	bl	8000628 <__aeabi_dmul>
 800a8c0:	4682      	mov	sl, r0
 800a8c2:	468b      	mov	fp, r1
 800a8c4:	e640      	b.n	800a548 <_strtod_l+0x88>
 800a8c6:	9a06      	ldr	r2, [sp, #24]
 800a8c8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800a8cc:	4293      	cmp	r3, r2
 800a8ce:	db20      	blt.n	800a912 <_strtod_l+0x452>
 800a8d0:	4c64      	ldr	r4, [pc, #400]	; (800aa64 <_strtod_l+0x5a4>)
 800a8d2:	f1c5 050f 	rsb	r5, r5, #15
 800a8d6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a8da:	4652      	mov	r2, sl
 800a8dc:	465b      	mov	r3, fp
 800a8de:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a8e2:	f7f5 fea1 	bl	8000628 <__aeabi_dmul>
 800a8e6:	9b06      	ldr	r3, [sp, #24]
 800a8e8:	1b5d      	subs	r5, r3, r5
 800a8ea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a8ee:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a8f2:	e7e3      	b.n	800a8bc <_strtod_l+0x3fc>
 800a8f4:	9b06      	ldr	r3, [sp, #24]
 800a8f6:	3316      	adds	r3, #22
 800a8f8:	db0b      	blt.n	800a912 <_strtod_l+0x452>
 800a8fa:	9b05      	ldr	r3, [sp, #20]
 800a8fc:	1b9e      	subs	r6, r3, r6
 800a8fe:	4b59      	ldr	r3, [pc, #356]	; (800aa64 <_strtod_l+0x5a4>)
 800a900:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800a904:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a908:	4650      	mov	r0, sl
 800a90a:	4659      	mov	r1, fp
 800a90c:	f7f5 ffb6 	bl	800087c <__aeabi_ddiv>
 800a910:	e7d6      	b.n	800a8c0 <_strtod_l+0x400>
 800a912:	9b06      	ldr	r3, [sp, #24]
 800a914:	eba5 0808 	sub.w	r8, r5, r8
 800a918:	4498      	add	r8, r3
 800a91a:	f1b8 0f00 	cmp.w	r8, #0
 800a91e:	dd74      	ble.n	800aa0a <_strtod_l+0x54a>
 800a920:	f018 030f 	ands.w	r3, r8, #15
 800a924:	d00a      	beq.n	800a93c <_strtod_l+0x47c>
 800a926:	494f      	ldr	r1, [pc, #316]	; (800aa64 <_strtod_l+0x5a4>)
 800a928:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a92c:	4652      	mov	r2, sl
 800a92e:	465b      	mov	r3, fp
 800a930:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a934:	f7f5 fe78 	bl	8000628 <__aeabi_dmul>
 800a938:	4682      	mov	sl, r0
 800a93a:	468b      	mov	fp, r1
 800a93c:	f038 080f 	bics.w	r8, r8, #15
 800a940:	d04f      	beq.n	800a9e2 <_strtod_l+0x522>
 800a942:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800a946:	dd22      	ble.n	800a98e <_strtod_l+0x4ce>
 800a948:	2500      	movs	r5, #0
 800a94a:	462e      	mov	r6, r5
 800a94c:	9507      	str	r5, [sp, #28]
 800a94e:	9505      	str	r5, [sp, #20]
 800a950:	2322      	movs	r3, #34	; 0x22
 800a952:	f8df b118 	ldr.w	fp, [pc, #280]	; 800aa6c <_strtod_l+0x5ac>
 800a956:	6023      	str	r3, [r4, #0]
 800a958:	f04f 0a00 	mov.w	sl, #0
 800a95c:	9b07      	ldr	r3, [sp, #28]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	f43f adf2 	beq.w	800a548 <_strtod_l+0x88>
 800a964:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a966:	4620      	mov	r0, r4
 800a968:	f001 ffe2 	bl	800c930 <_Bfree>
 800a96c:	9905      	ldr	r1, [sp, #20]
 800a96e:	4620      	mov	r0, r4
 800a970:	f001 ffde 	bl	800c930 <_Bfree>
 800a974:	4631      	mov	r1, r6
 800a976:	4620      	mov	r0, r4
 800a978:	f001 ffda 	bl	800c930 <_Bfree>
 800a97c:	9907      	ldr	r1, [sp, #28]
 800a97e:	4620      	mov	r0, r4
 800a980:	f001 ffd6 	bl	800c930 <_Bfree>
 800a984:	4629      	mov	r1, r5
 800a986:	4620      	mov	r0, r4
 800a988:	f001 ffd2 	bl	800c930 <_Bfree>
 800a98c:	e5dc      	b.n	800a548 <_strtod_l+0x88>
 800a98e:	4b36      	ldr	r3, [pc, #216]	; (800aa68 <_strtod_l+0x5a8>)
 800a990:	9304      	str	r3, [sp, #16]
 800a992:	2300      	movs	r3, #0
 800a994:	ea4f 1828 	mov.w	r8, r8, asr #4
 800a998:	4650      	mov	r0, sl
 800a99a:	4659      	mov	r1, fp
 800a99c:	4699      	mov	r9, r3
 800a99e:	f1b8 0f01 	cmp.w	r8, #1
 800a9a2:	dc21      	bgt.n	800a9e8 <_strtod_l+0x528>
 800a9a4:	b10b      	cbz	r3, 800a9aa <_strtod_l+0x4ea>
 800a9a6:	4682      	mov	sl, r0
 800a9a8:	468b      	mov	fp, r1
 800a9aa:	4b2f      	ldr	r3, [pc, #188]	; (800aa68 <_strtod_l+0x5a8>)
 800a9ac:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800a9b0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800a9b4:	4652      	mov	r2, sl
 800a9b6:	465b      	mov	r3, fp
 800a9b8:	e9d9 0100 	ldrd	r0, r1, [r9]
 800a9bc:	f7f5 fe34 	bl	8000628 <__aeabi_dmul>
 800a9c0:	4b2a      	ldr	r3, [pc, #168]	; (800aa6c <_strtod_l+0x5ac>)
 800a9c2:	460a      	mov	r2, r1
 800a9c4:	400b      	ands	r3, r1
 800a9c6:	492a      	ldr	r1, [pc, #168]	; (800aa70 <_strtod_l+0x5b0>)
 800a9c8:	428b      	cmp	r3, r1
 800a9ca:	4682      	mov	sl, r0
 800a9cc:	d8bc      	bhi.n	800a948 <_strtod_l+0x488>
 800a9ce:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a9d2:	428b      	cmp	r3, r1
 800a9d4:	bf86      	itte	hi
 800a9d6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800aa74 <_strtod_l+0x5b4>
 800a9da:	f04f 3aff 	movhi.w	sl, #4294967295
 800a9de:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	9304      	str	r3, [sp, #16]
 800a9e6:	e084      	b.n	800aaf2 <_strtod_l+0x632>
 800a9e8:	f018 0f01 	tst.w	r8, #1
 800a9ec:	d005      	beq.n	800a9fa <_strtod_l+0x53a>
 800a9ee:	9b04      	ldr	r3, [sp, #16]
 800a9f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9f4:	f7f5 fe18 	bl	8000628 <__aeabi_dmul>
 800a9f8:	2301      	movs	r3, #1
 800a9fa:	9a04      	ldr	r2, [sp, #16]
 800a9fc:	3208      	adds	r2, #8
 800a9fe:	f109 0901 	add.w	r9, r9, #1
 800aa02:	ea4f 0868 	mov.w	r8, r8, asr #1
 800aa06:	9204      	str	r2, [sp, #16]
 800aa08:	e7c9      	b.n	800a99e <_strtod_l+0x4de>
 800aa0a:	d0ea      	beq.n	800a9e2 <_strtod_l+0x522>
 800aa0c:	f1c8 0800 	rsb	r8, r8, #0
 800aa10:	f018 020f 	ands.w	r2, r8, #15
 800aa14:	d00a      	beq.n	800aa2c <_strtod_l+0x56c>
 800aa16:	4b13      	ldr	r3, [pc, #76]	; (800aa64 <_strtod_l+0x5a4>)
 800aa18:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa1c:	4650      	mov	r0, sl
 800aa1e:	4659      	mov	r1, fp
 800aa20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa24:	f7f5 ff2a 	bl	800087c <__aeabi_ddiv>
 800aa28:	4682      	mov	sl, r0
 800aa2a:	468b      	mov	fp, r1
 800aa2c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800aa30:	d0d7      	beq.n	800a9e2 <_strtod_l+0x522>
 800aa32:	f1b8 0f1f 	cmp.w	r8, #31
 800aa36:	dd1f      	ble.n	800aa78 <_strtod_l+0x5b8>
 800aa38:	2500      	movs	r5, #0
 800aa3a:	462e      	mov	r6, r5
 800aa3c:	9507      	str	r5, [sp, #28]
 800aa3e:	9505      	str	r5, [sp, #20]
 800aa40:	2322      	movs	r3, #34	; 0x22
 800aa42:	f04f 0a00 	mov.w	sl, #0
 800aa46:	f04f 0b00 	mov.w	fp, #0
 800aa4a:	6023      	str	r3, [r4, #0]
 800aa4c:	e786      	b.n	800a95c <_strtod_l+0x49c>
 800aa4e:	bf00      	nop
 800aa50:	0800e5ed 	.word	0x0800e5ed
 800aa54:	0800e62c 	.word	0x0800e62c
 800aa58:	0800e5e5 	.word	0x0800e5e5
 800aa5c:	0800e76c 	.word	0x0800e76c
 800aa60:	0800ea33 	.word	0x0800ea33
 800aa64:	0800e8f8 	.word	0x0800e8f8
 800aa68:	0800e8d0 	.word	0x0800e8d0
 800aa6c:	7ff00000 	.word	0x7ff00000
 800aa70:	7ca00000 	.word	0x7ca00000
 800aa74:	7fefffff 	.word	0x7fefffff
 800aa78:	f018 0310 	ands.w	r3, r8, #16
 800aa7c:	bf18      	it	ne
 800aa7e:	236a      	movne	r3, #106	; 0x6a
 800aa80:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800ae30 <_strtod_l+0x970>
 800aa84:	9304      	str	r3, [sp, #16]
 800aa86:	4650      	mov	r0, sl
 800aa88:	4659      	mov	r1, fp
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	f018 0f01 	tst.w	r8, #1
 800aa90:	d004      	beq.n	800aa9c <_strtod_l+0x5dc>
 800aa92:	e9d9 2300 	ldrd	r2, r3, [r9]
 800aa96:	f7f5 fdc7 	bl	8000628 <__aeabi_dmul>
 800aa9a:	2301      	movs	r3, #1
 800aa9c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800aaa0:	f109 0908 	add.w	r9, r9, #8
 800aaa4:	d1f2      	bne.n	800aa8c <_strtod_l+0x5cc>
 800aaa6:	b10b      	cbz	r3, 800aaac <_strtod_l+0x5ec>
 800aaa8:	4682      	mov	sl, r0
 800aaaa:	468b      	mov	fp, r1
 800aaac:	9b04      	ldr	r3, [sp, #16]
 800aaae:	b1c3      	cbz	r3, 800aae2 <_strtod_l+0x622>
 800aab0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800aab4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	4659      	mov	r1, fp
 800aabc:	dd11      	ble.n	800aae2 <_strtod_l+0x622>
 800aabe:	2b1f      	cmp	r3, #31
 800aac0:	f340 8124 	ble.w	800ad0c <_strtod_l+0x84c>
 800aac4:	2b34      	cmp	r3, #52	; 0x34
 800aac6:	bfde      	ittt	le
 800aac8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800aacc:	f04f 33ff 	movle.w	r3, #4294967295
 800aad0:	fa03 f202 	lslle.w	r2, r3, r2
 800aad4:	f04f 0a00 	mov.w	sl, #0
 800aad8:	bfcc      	ite	gt
 800aada:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800aade:	ea02 0b01 	andle.w	fp, r2, r1
 800aae2:	2200      	movs	r2, #0
 800aae4:	2300      	movs	r3, #0
 800aae6:	4650      	mov	r0, sl
 800aae8:	4659      	mov	r1, fp
 800aaea:	f7f6 f805 	bl	8000af8 <__aeabi_dcmpeq>
 800aaee:	2800      	cmp	r0, #0
 800aaf0:	d1a2      	bne.n	800aa38 <_strtod_l+0x578>
 800aaf2:	9b07      	ldr	r3, [sp, #28]
 800aaf4:	9300      	str	r3, [sp, #0]
 800aaf6:	9908      	ldr	r1, [sp, #32]
 800aaf8:	462b      	mov	r3, r5
 800aafa:	463a      	mov	r2, r7
 800aafc:	4620      	mov	r0, r4
 800aafe:	f001 ff7f 	bl	800ca00 <__s2b>
 800ab02:	9007      	str	r0, [sp, #28]
 800ab04:	2800      	cmp	r0, #0
 800ab06:	f43f af1f 	beq.w	800a948 <_strtod_l+0x488>
 800ab0a:	9b05      	ldr	r3, [sp, #20]
 800ab0c:	1b9e      	subs	r6, r3, r6
 800ab0e:	9b06      	ldr	r3, [sp, #24]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	bfb4      	ite	lt
 800ab14:	4633      	movlt	r3, r6
 800ab16:	2300      	movge	r3, #0
 800ab18:	930c      	str	r3, [sp, #48]	; 0x30
 800ab1a:	9b06      	ldr	r3, [sp, #24]
 800ab1c:	2500      	movs	r5, #0
 800ab1e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ab22:	9312      	str	r3, [sp, #72]	; 0x48
 800ab24:	462e      	mov	r6, r5
 800ab26:	9b07      	ldr	r3, [sp, #28]
 800ab28:	4620      	mov	r0, r4
 800ab2a:	6859      	ldr	r1, [r3, #4]
 800ab2c:	f001 fec0 	bl	800c8b0 <_Balloc>
 800ab30:	9005      	str	r0, [sp, #20]
 800ab32:	2800      	cmp	r0, #0
 800ab34:	f43f af0c 	beq.w	800a950 <_strtod_l+0x490>
 800ab38:	9b07      	ldr	r3, [sp, #28]
 800ab3a:	691a      	ldr	r2, [r3, #16]
 800ab3c:	3202      	adds	r2, #2
 800ab3e:	f103 010c 	add.w	r1, r3, #12
 800ab42:	0092      	lsls	r2, r2, #2
 800ab44:	300c      	adds	r0, #12
 800ab46:	f7fe fbcd 	bl	80092e4 <memcpy>
 800ab4a:	ec4b ab10 	vmov	d0, sl, fp
 800ab4e:	aa1a      	add	r2, sp, #104	; 0x68
 800ab50:	a919      	add	r1, sp, #100	; 0x64
 800ab52:	4620      	mov	r0, r4
 800ab54:	f002 fa9a 	bl	800d08c <__d2b>
 800ab58:	ec4b ab18 	vmov	d8, sl, fp
 800ab5c:	9018      	str	r0, [sp, #96]	; 0x60
 800ab5e:	2800      	cmp	r0, #0
 800ab60:	f43f aef6 	beq.w	800a950 <_strtod_l+0x490>
 800ab64:	2101      	movs	r1, #1
 800ab66:	4620      	mov	r0, r4
 800ab68:	f001 ffe4 	bl	800cb34 <__i2b>
 800ab6c:	4606      	mov	r6, r0
 800ab6e:	2800      	cmp	r0, #0
 800ab70:	f43f aeee 	beq.w	800a950 <_strtod_l+0x490>
 800ab74:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ab76:	9904      	ldr	r1, [sp, #16]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	bfab      	itete	ge
 800ab7c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800ab7e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800ab80:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800ab82:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800ab86:	bfac      	ite	ge
 800ab88:	eb03 0902 	addge.w	r9, r3, r2
 800ab8c:	1ad7      	sublt	r7, r2, r3
 800ab8e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ab90:	eba3 0801 	sub.w	r8, r3, r1
 800ab94:	4490      	add	r8, r2
 800ab96:	4ba1      	ldr	r3, [pc, #644]	; (800ae1c <_strtod_l+0x95c>)
 800ab98:	f108 38ff 	add.w	r8, r8, #4294967295
 800ab9c:	4598      	cmp	r8, r3
 800ab9e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800aba2:	f280 80c7 	bge.w	800ad34 <_strtod_l+0x874>
 800aba6:	eba3 0308 	sub.w	r3, r3, r8
 800abaa:	2b1f      	cmp	r3, #31
 800abac:	eba2 0203 	sub.w	r2, r2, r3
 800abb0:	f04f 0101 	mov.w	r1, #1
 800abb4:	f300 80b1 	bgt.w	800ad1a <_strtod_l+0x85a>
 800abb8:	fa01 f303 	lsl.w	r3, r1, r3
 800abbc:	930d      	str	r3, [sp, #52]	; 0x34
 800abbe:	2300      	movs	r3, #0
 800abc0:	9308      	str	r3, [sp, #32]
 800abc2:	eb09 0802 	add.w	r8, r9, r2
 800abc6:	9b04      	ldr	r3, [sp, #16]
 800abc8:	45c1      	cmp	r9, r8
 800abca:	4417      	add	r7, r2
 800abcc:	441f      	add	r7, r3
 800abce:	464b      	mov	r3, r9
 800abd0:	bfa8      	it	ge
 800abd2:	4643      	movge	r3, r8
 800abd4:	42bb      	cmp	r3, r7
 800abd6:	bfa8      	it	ge
 800abd8:	463b      	movge	r3, r7
 800abda:	2b00      	cmp	r3, #0
 800abdc:	bfc2      	ittt	gt
 800abde:	eba8 0803 	subgt.w	r8, r8, r3
 800abe2:	1aff      	subgt	r7, r7, r3
 800abe4:	eba9 0903 	subgt.w	r9, r9, r3
 800abe8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800abea:	2b00      	cmp	r3, #0
 800abec:	dd17      	ble.n	800ac1e <_strtod_l+0x75e>
 800abee:	4631      	mov	r1, r6
 800abf0:	461a      	mov	r2, r3
 800abf2:	4620      	mov	r0, r4
 800abf4:	f002 f85e 	bl	800ccb4 <__pow5mult>
 800abf8:	4606      	mov	r6, r0
 800abfa:	2800      	cmp	r0, #0
 800abfc:	f43f aea8 	beq.w	800a950 <_strtod_l+0x490>
 800ac00:	4601      	mov	r1, r0
 800ac02:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ac04:	4620      	mov	r0, r4
 800ac06:	f001 ffab 	bl	800cb60 <__multiply>
 800ac0a:	900b      	str	r0, [sp, #44]	; 0x2c
 800ac0c:	2800      	cmp	r0, #0
 800ac0e:	f43f ae9f 	beq.w	800a950 <_strtod_l+0x490>
 800ac12:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ac14:	4620      	mov	r0, r4
 800ac16:	f001 fe8b 	bl	800c930 <_Bfree>
 800ac1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac1c:	9318      	str	r3, [sp, #96]	; 0x60
 800ac1e:	f1b8 0f00 	cmp.w	r8, #0
 800ac22:	f300 808c 	bgt.w	800ad3e <_strtod_l+0x87e>
 800ac26:	9b06      	ldr	r3, [sp, #24]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	dd08      	ble.n	800ac3e <_strtod_l+0x77e>
 800ac2c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ac2e:	9905      	ldr	r1, [sp, #20]
 800ac30:	4620      	mov	r0, r4
 800ac32:	f002 f83f 	bl	800ccb4 <__pow5mult>
 800ac36:	9005      	str	r0, [sp, #20]
 800ac38:	2800      	cmp	r0, #0
 800ac3a:	f43f ae89 	beq.w	800a950 <_strtod_l+0x490>
 800ac3e:	2f00      	cmp	r7, #0
 800ac40:	dd08      	ble.n	800ac54 <_strtod_l+0x794>
 800ac42:	9905      	ldr	r1, [sp, #20]
 800ac44:	463a      	mov	r2, r7
 800ac46:	4620      	mov	r0, r4
 800ac48:	f002 f88e 	bl	800cd68 <__lshift>
 800ac4c:	9005      	str	r0, [sp, #20]
 800ac4e:	2800      	cmp	r0, #0
 800ac50:	f43f ae7e 	beq.w	800a950 <_strtod_l+0x490>
 800ac54:	f1b9 0f00 	cmp.w	r9, #0
 800ac58:	dd08      	ble.n	800ac6c <_strtod_l+0x7ac>
 800ac5a:	4631      	mov	r1, r6
 800ac5c:	464a      	mov	r2, r9
 800ac5e:	4620      	mov	r0, r4
 800ac60:	f002 f882 	bl	800cd68 <__lshift>
 800ac64:	4606      	mov	r6, r0
 800ac66:	2800      	cmp	r0, #0
 800ac68:	f43f ae72 	beq.w	800a950 <_strtod_l+0x490>
 800ac6c:	9a05      	ldr	r2, [sp, #20]
 800ac6e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ac70:	4620      	mov	r0, r4
 800ac72:	f002 f905 	bl	800ce80 <__mdiff>
 800ac76:	4605      	mov	r5, r0
 800ac78:	2800      	cmp	r0, #0
 800ac7a:	f43f ae69 	beq.w	800a950 <_strtod_l+0x490>
 800ac7e:	68c3      	ldr	r3, [r0, #12]
 800ac80:	930b      	str	r3, [sp, #44]	; 0x2c
 800ac82:	2300      	movs	r3, #0
 800ac84:	60c3      	str	r3, [r0, #12]
 800ac86:	4631      	mov	r1, r6
 800ac88:	f002 f8de 	bl	800ce48 <__mcmp>
 800ac8c:	2800      	cmp	r0, #0
 800ac8e:	da60      	bge.n	800ad52 <_strtod_l+0x892>
 800ac90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac92:	ea53 030a 	orrs.w	r3, r3, sl
 800ac96:	f040 8082 	bne.w	800ad9e <_strtod_l+0x8de>
 800ac9a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d17d      	bne.n	800ad9e <_strtod_l+0x8de>
 800aca2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800aca6:	0d1b      	lsrs	r3, r3, #20
 800aca8:	051b      	lsls	r3, r3, #20
 800acaa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800acae:	d976      	bls.n	800ad9e <_strtod_l+0x8de>
 800acb0:	696b      	ldr	r3, [r5, #20]
 800acb2:	b913      	cbnz	r3, 800acba <_strtod_l+0x7fa>
 800acb4:	692b      	ldr	r3, [r5, #16]
 800acb6:	2b01      	cmp	r3, #1
 800acb8:	dd71      	ble.n	800ad9e <_strtod_l+0x8de>
 800acba:	4629      	mov	r1, r5
 800acbc:	2201      	movs	r2, #1
 800acbe:	4620      	mov	r0, r4
 800acc0:	f002 f852 	bl	800cd68 <__lshift>
 800acc4:	4631      	mov	r1, r6
 800acc6:	4605      	mov	r5, r0
 800acc8:	f002 f8be 	bl	800ce48 <__mcmp>
 800accc:	2800      	cmp	r0, #0
 800acce:	dd66      	ble.n	800ad9e <_strtod_l+0x8de>
 800acd0:	9904      	ldr	r1, [sp, #16]
 800acd2:	4a53      	ldr	r2, [pc, #332]	; (800ae20 <_strtod_l+0x960>)
 800acd4:	465b      	mov	r3, fp
 800acd6:	2900      	cmp	r1, #0
 800acd8:	f000 8081 	beq.w	800adde <_strtod_l+0x91e>
 800acdc:	ea02 010b 	and.w	r1, r2, fp
 800ace0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ace4:	dc7b      	bgt.n	800adde <_strtod_l+0x91e>
 800ace6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800acea:	f77f aea9 	ble.w	800aa40 <_strtod_l+0x580>
 800acee:	4b4d      	ldr	r3, [pc, #308]	; (800ae24 <_strtod_l+0x964>)
 800acf0:	4650      	mov	r0, sl
 800acf2:	4659      	mov	r1, fp
 800acf4:	2200      	movs	r2, #0
 800acf6:	f7f5 fc97 	bl	8000628 <__aeabi_dmul>
 800acfa:	460b      	mov	r3, r1
 800acfc:	4303      	orrs	r3, r0
 800acfe:	bf08      	it	eq
 800ad00:	2322      	moveq	r3, #34	; 0x22
 800ad02:	4682      	mov	sl, r0
 800ad04:	468b      	mov	fp, r1
 800ad06:	bf08      	it	eq
 800ad08:	6023      	streq	r3, [r4, #0]
 800ad0a:	e62b      	b.n	800a964 <_strtod_l+0x4a4>
 800ad0c:	f04f 32ff 	mov.w	r2, #4294967295
 800ad10:	fa02 f303 	lsl.w	r3, r2, r3
 800ad14:	ea03 0a0a 	and.w	sl, r3, sl
 800ad18:	e6e3      	b.n	800aae2 <_strtod_l+0x622>
 800ad1a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800ad1e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800ad22:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800ad26:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800ad2a:	fa01 f308 	lsl.w	r3, r1, r8
 800ad2e:	9308      	str	r3, [sp, #32]
 800ad30:	910d      	str	r1, [sp, #52]	; 0x34
 800ad32:	e746      	b.n	800abc2 <_strtod_l+0x702>
 800ad34:	2300      	movs	r3, #0
 800ad36:	9308      	str	r3, [sp, #32]
 800ad38:	2301      	movs	r3, #1
 800ad3a:	930d      	str	r3, [sp, #52]	; 0x34
 800ad3c:	e741      	b.n	800abc2 <_strtod_l+0x702>
 800ad3e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ad40:	4642      	mov	r2, r8
 800ad42:	4620      	mov	r0, r4
 800ad44:	f002 f810 	bl	800cd68 <__lshift>
 800ad48:	9018      	str	r0, [sp, #96]	; 0x60
 800ad4a:	2800      	cmp	r0, #0
 800ad4c:	f47f af6b 	bne.w	800ac26 <_strtod_l+0x766>
 800ad50:	e5fe      	b.n	800a950 <_strtod_l+0x490>
 800ad52:	465f      	mov	r7, fp
 800ad54:	d16e      	bne.n	800ae34 <_strtod_l+0x974>
 800ad56:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ad58:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ad5c:	b342      	cbz	r2, 800adb0 <_strtod_l+0x8f0>
 800ad5e:	4a32      	ldr	r2, [pc, #200]	; (800ae28 <_strtod_l+0x968>)
 800ad60:	4293      	cmp	r3, r2
 800ad62:	d128      	bne.n	800adb6 <_strtod_l+0x8f6>
 800ad64:	9b04      	ldr	r3, [sp, #16]
 800ad66:	4651      	mov	r1, sl
 800ad68:	b1eb      	cbz	r3, 800ada6 <_strtod_l+0x8e6>
 800ad6a:	4b2d      	ldr	r3, [pc, #180]	; (800ae20 <_strtod_l+0x960>)
 800ad6c:	403b      	ands	r3, r7
 800ad6e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ad72:	f04f 32ff 	mov.w	r2, #4294967295
 800ad76:	d819      	bhi.n	800adac <_strtod_l+0x8ec>
 800ad78:	0d1b      	lsrs	r3, r3, #20
 800ad7a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ad7e:	fa02 f303 	lsl.w	r3, r2, r3
 800ad82:	4299      	cmp	r1, r3
 800ad84:	d117      	bne.n	800adb6 <_strtod_l+0x8f6>
 800ad86:	4b29      	ldr	r3, [pc, #164]	; (800ae2c <_strtod_l+0x96c>)
 800ad88:	429f      	cmp	r7, r3
 800ad8a:	d102      	bne.n	800ad92 <_strtod_l+0x8d2>
 800ad8c:	3101      	adds	r1, #1
 800ad8e:	f43f addf 	beq.w	800a950 <_strtod_l+0x490>
 800ad92:	4b23      	ldr	r3, [pc, #140]	; (800ae20 <_strtod_l+0x960>)
 800ad94:	403b      	ands	r3, r7
 800ad96:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800ad9a:	f04f 0a00 	mov.w	sl, #0
 800ad9e:	9b04      	ldr	r3, [sp, #16]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d1a4      	bne.n	800acee <_strtod_l+0x82e>
 800ada4:	e5de      	b.n	800a964 <_strtod_l+0x4a4>
 800ada6:	f04f 33ff 	mov.w	r3, #4294967295
 800adaa:	e7ea      	b.n	800ad82 <_strtod_l+0x8c2>
 800adac:	4613      	mov	r3, r2
 800adae:	e7e8      	b.n	800ad82 <_strtod_l+0x8c2>
 800adb0:	ea53 030a 	orrs.w	r3, r3, sl
 800adb4:	d08c      	beq.n	800acd0 <_strtod_l+0x810>
 800adb6:	9b08      	ldr	r3, [sp, #32]
 800adb8:	b1db      	cbz	r3, 800adf2 <_strtod_l+0x932>
 800adba:	423b      	tst	r3, r7
 800adbc:	d0ef      	beq.n	800ad9e <_strtod_l+0x8de>
 800adbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800adc0:	9a04      	ldr	r2, [sp, #16]
 800adc2:	4650      	mov	r0, sl
 800adc4:	4659      	mov	r1, fp
 800adc6:	b1c3      	cbz	r3, 800adfa <_strtod_l+0x93a>
 800adc8:	f7ff fb5c 	bl	800a484 <sulp>
 800adcc:	4602      	mov	r2, r0
 800adce:	460b      	mov	r3, r1
 800add0:	ec51 0b18 	vmov	r0, r1, d8
 800add4:	f7f5 fa72 	bl	80002bc <__adddf3>
 800add8:	4682      	mov	sl, r0
 800adda:	468b      	mov	fp, r1
 800addc:	e7df      	b.n	800ad9e <_strtod_l+0x8de>
 800adde:	4013      	ands	r3, r2
 800ade0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ade4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ade8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800adec:	f04f 3aff 	mov.w	sl, #4294967295
 800adf0:	e7d5      	b.n	800ad9e <_strtod_l+0x8de>
 800adf2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800adf4:	ea13 0f0a 	tst.w	r3, sl
 800adf8:	e7e0      	b.n	800adbc <_strtod_l+0x8fc>
 800adfa:	f7ff fb43 	bl	800a484 <sulp>
 800adfe:	4602      	mov	r2, r0
 800ae00:	460b      	mov	r3, r1
 800ae02:	ec51 0b18 	vmov	r0, r1, d8
 800ae06:	f7f5 fa57 	bl	80002b8 <__aeabi_dsub>
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	4682      	mov	sl, r0
 800ae10:	468b      	mov	fp, r1
 800ae12:	f7f5 fe71 	bl	8000af8 <__aeabi_dcmpeq>
 800ae16:	2800      	cmp	r0, #0
 800ae18:	d0c1      	beq.n	800ad9e <_strtod_l+0x8de>
 800ae1a:	e611      	b.n	800aa40 <_strtod_l+0x580>
 800ae1c:	fffffc02 	.word	0xfffffc02
 800ae20:	7ff00000 	.word	0x7ff00000
 800ae24:	39500000 	.word	0x39500000
 800ae28:	000fffff 	.word	0x000fffff
 800ae2c:	7fefffff 	.word	0x7fefffff
 800ae30:	0800e640 	.word	0x0800e640
 800ae34:	4631      	mov	r1, r6
 800ae36:	4628      	mov	r0, r5
 800ae38:	f002 f984 	bl	800d144 <__ratio>
 800ae3c:	ec59 8b10 	vmov	r8, r9, d0
 800ae40:	ee10 0a10 	vmov	r0, s0
 800ae44:	2200      	movs	r2, #0
 800ae46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ae4a:	4649      	mov	r1, r9
 800ae4c:	f7f5 fe68 	bl	8000b20 <__aeabi_dcmple>
 800ae50:	2800      	cmp	r0, #0
 800ae52:	d07a      	beq.n	800af4a <_strtod_l+0xa8a>
 800ae54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d04a      	beq.n	800aef0 <_strtod_l+0xa30>
 800ae5a:	4b95      	ldr	r3, [pc, #596]	; (800b0b0 <_strtod_l+0xbf0>)
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ae62:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800b0b0 <_strtod_l+0xbf0>
 800ae66:	f04f 0800 	mov.w	r8, #0
 800ae6a:	4b92      	ldr	r3, [pc, #584]	; (800b0b4 <_strtod_l+0xbf4>)
 800ae6c:	403b      	ands	r3, r7
 800ae6e:	930d      	str	r3, [sp, #52]	; 0x34
 800ae70:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ae72:	4b91      	ldr	r3, [pc, #580]	; (800b0b8 <_strtod_l+0xbf8>)
 800ae74:	429a      	cmp	r2, r3
 800ae76:	f040 80b0 	bne.w	800afda <_strtod_l+0xb1a>
 800ae7a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ae7e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800ae82:	ec4b ab10 	vmov	d0, sl, fp
 800ae86:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ae8a:	f002 f883 	bl	800cf94 <__ulp>
 800ae8e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ae92:	ec53 2b10 	vmov	r2, r3, d0
 800ae96:	f7f5 fbc7 	bl	8000628 <__aeabi_dmul>
 800ae9a:	4652      	mov	r2, sl
 800ae9c:	465b      	mov	r3, fp
 800ae9e:	f7f5 fa0d 	bl	80002bc <__adddf3>
 800aea2:	460b      	mov	r3, r1
 800aea4:	4983      	ldr	r1, [pc, #524]	; (800b0b4 <_strtod_l+0xbf4>)
 800aea6:	4a85      	ldr	r2, [pc, #532]	; (800b0bc <_strtod_l+0xbfc>)
 800aea8:	4019      	ands	r1, r3
 800aeaa:	4291      	cmp	r1, r2
 800aeac:	4682      	mov	sl, r0
 800aeae:	d960      	bls.n	800af72 <_strtod_l+0xab2>
 800aeb0:	ee18 3a90 	vmov	r3, s17
 800aeb4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800aeb8:	4293      	cmp	r3, r2
 800aeba:	d104      	bne.n	800aec6 <_strtod_l+0xa06>
 800aebc:	ee18 3a10 	vmov	r3, s16
 800aec0:	3301      	adds	r3, #1
 800aec2:	f43f ad45 	beq.w	800a950 <_strtod_l+0x490>
 800aec6:	f8df b200 	ldr.w	fp, [pc, #512]	; 800b0c8 <_strtod_l+0xc08>
 800aeca:	f04f 3aff 	mov.w	sl, #4294967295
 800aece:	9918      	ldr	r1, [sp, #96]	; 0x60
 800aed0:	4620      	mov	r0, r4
 800aed2:	f001 fd2d 	bl	800c930 <_Bfree>
 800aed6:	9905      	ldr	r1, [sp, #20]
 800aed8:	4620      	mov	r0, r4
 800aeda:	f001 fd29 	bl	800c930 <_Bfree>
 800aede:	4631      	mov	r1, r6
 800aee0:	4620      	mov	r0, r4
 800aee2:	f001 fd25 	bl	800c930 <_Bfree>
 800aee6:	4629      	mov	r1, r5
 800aee8:	4620      	mov	r0, r4
 800aeea:	f001 fd21 	bl	800c930 <_Bfree>
 800aeee:	e61a      	b.n	800ab26 <_strtod_l+0x666>
 800aef0:	f1ba 0f00 	cmp.w	sl, #0
 800aef4:	d11b      	bne.n	800af2e <_strtod_l+0xa6e>
 800aef6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aefa:	b9f3      	cbnz	r3, 800af3a <_strtod_l+0xa7a>
 800aefc:	4b6c      	ldr	r3, [pc, #432]	; (800b0b0 <_strtod_l+0xbf0>)
 800aefe:	2200      	movs	r2, #0
 800af00:	4640      	mov	r0, r8
 800af02:	4649      	mov	r1, r9
 800af04:	f7f5 fe02 	bl	8000b0c <__aeabi_dcmplt>
 800af08:	b9d0      	cbnz	r0, 800af40 <_strtod_l+0xa80>
 800af0a:	4640      	mov	r0, r8
 800af0c:	4649      	mov	r1, r9
 800af0e:	4b6c      	ldr	r3, [pc, #432]	; (800b0c0 <_strtod_l+0xc00>)
 800af10:	2200      	movs	r2, #0
 800af12:	f7f5 fb89 	bl	8000628 <__aeabi_dmul>
 800af16:	4680      	mov	r8, r0
 800af18:	4689      	mov	r9, r1
 800af1a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800af1e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800af22:	9315      	str	r3, [sp, #84]	; 0x54
 800af24:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800af28:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800af2c:	e79d      	b.n	800ae6a <_strtod_l+0x9aa>
 800af2e:	f1ba 0f01 	cmp.w	sl, #1
 800af32:	d102      	bne.n	800af3a <_strtod_l+0xa7a>
 800af34:	2f00      	cmp	r7, #0
 800af36:	f43f ad83 	beq.w	800aa40 <_strtod_l+0x580>
 800af3a:	4b62      	ldr	r3, [pc, #392]	; (800b0c4 <_strtod_l+0xc04>)
 800af3c:	2200      	movs	r2, #0
 800af3e:	e78e      	b.n	800ae5e <_strtod_l+0x99e>
 800af40:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800b0c0 <_strtod_l+0xc00>
 800af44:	f04f 0800 	mov.w	r8, #0
 800af48:	e7e7      	b.n	800af1a <_strtod_l+0xa5a>
 800af4a:	4b5d      	ldr	r3, [pc, #372]	; (800b0c0 <_strtod_l+0xc00>)
 800af4c:	4640      	mov	r0, r8
 800af4e:	4649      	mov	r1, r9
 800af50:	2200      	movs	r2, #0
 800af52:	f7f5 fb69 	bl	8000628 <__aeabi_dmul>
 800af56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af58:	4680      	mov	r8, r0
 800af5a:	4689      	mov	r9, r1
 800af5c:	b933      	cbnz	r3, 800af6c <_strtod_l+0xaac>
 800af5e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800af62:	900e      	str	r0, [sp, #56]	; 0x38
 800af64:	930f      	str	r3, [sp, #60]	; 0x3c
 800af66:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800af6a:	e7dd      	b.n	800af28 <_strtod_l+0xa68>
 800af6c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800af70:	e7f9      	b.n	800af66 <_strtod_l+0xaa6>
 800af72:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800af76:	9b04      	ldr	r3, [sp, #16]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d1a8      	bne.n	800aece <_strtod_l+0xa0e>
 800af7c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800af80:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800af82:	0d1b      	lsrs	r3, r3, #20
 800af84:	051b      	lsls	r3, r3, #20
 800af86:	429a      	cmp	r2, r3
 800af88:	d1a1      	bne.n	800aece <_strtod_l+0xa0e>
 800af8a:	4640      	mov	r0, r8
 800af8c:	4649      	mov	r1, r9
 800af8e:	f7f5 feab 	bl	8000ce8 <__aeabi_d2lz>
 800af92:	f7f5 fb1b 	bl	80005cc <__aeabi_l2d>
 800af96:	4602      	mov	r2, r0
 800af98:	460b      	mov	r3, r1
 800af9a:	4640      	mov	r0, r8
 800af9c:	4649      	mov	r1, r9
 800af9e:	f7f5 f98b 	bl	80002b8 <__aeabi_dsub>
 800afa2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800afa4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800afa8:	ea43 030a 	orr.w	r3, r3, sl
 800afac:	4313      	orrs	r3, r2
 800afae:	4680      	mov	r8, r0
 800afb0:	4689      	mov	r9, r1
 800afb2:	d055      	beq.n	800b060 <_strtod_l+0xba0>
 800afb4:	a336      	add	r3, pc, #216	; (adr r3, 800b090 <_strtod_l+0xbd0>)
 800afb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afba:	f7f5 fda7 	bl	8000b0c <__aeabi_dcmplt>
 800afbe:	2800      	cmp	r0, #0
 800afc0:	f47f acd0 	bne.w	800a964 <_strtod_l+0x4a4>
 800afc4:	a334      	add	r3, pc, #208	; (adr r3, 800b098 <_strtod_l+0xbd8>)
 800afc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afca:	4640      	mov	r0, r8
 800afcc:	4649      	mov	r1, r9
 800afce:	f7f5 fdbb 	bl	8000b48 <__aeabi_dcmpgt>
 800afd2:	2800      	cmp	r0, #0
 800afd4:	f43f af7b 	beq.w	800aece <_strtod_l+0xa0e>
 800afd8:	e4c4      	b.n	800a964 <_strtod_l+0x4a4>
 800afda:	9b04      	ldr	r3, [sp, #16]
 800afdc:	b333      	cbz	r3, 800b02c <_strtod_l+0xb6c>
 800afde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800afe0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800afe4:	d822      	bhi.n	800b02c <_strtod_l+0xb6c>
 800afe6:	a32e      	add	r3, pc, #184	; (adr r3, 800b0a0 <_strtod_l+0xbe0>)
 800afe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afec:	4640      	mov	r0, r8
 800afee:	4649      	mov	r1, r9
 800aff0:	f7f5 fd96 	bl	8000b20 <__aeabi_dcmple>
 800aff4:	b1a0      	cbz	r0, 800b020 <_strtod_l+0xb60>
 800aff6:	4649      	mov	r1, r9
 800aff8:	4640      	mov	r0, r8
 800affa:	f7f5 fded 	bl	8000bd8 <__aeabi_d2uiz>
 800affe:	2801      	cmp	r0, #1
 800b000:	bf38      	it	cc
 800b002:	2001      	movcc	r0, #1
 800b004:	f7f5 fa96 	bl	8000534 <__aeabi_ui2d>
 800b008:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b00a:	4680      	mov	r8, r0
 800b00c:	4689      	mov	r9, r1
 800b00e:	bb23      	cbnz	r3, 800b05a <_strtod_l+0xb9a>
 800b010:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b014:	9010      	str	r0, [sp, #64]	; 0x40
 800b016:	9311      	str	r3, [sp, #68]	; 0x44
 800b018:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b01c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b020:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b022:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b024:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b028:	1a9b      	subs	r3, r3, r2
 800b02a:	9309      	str	r3, [sp, #36]	; 0x24
 800b02c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b030:	eeb0 0a48 	vmov.f32	s0, s16
 800b034:	eef0 0a68 	vmov.f32	s1, s17
 800b038:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b03c:	f001 ffaa 	bl	800cf94 <__ulp>
 800b040:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b044:	ec53 2b10 	vmov	r2, r3, d0
 800b048:	f7f5 faee 	bl	8000628 <__aeabi_dmul>
 800b04c:	ec53 2b18 	vmov	r2, r3, d8
 800b050:	f7f5 f934 	bl	80002bc <__adddf3>
 800b054:	4682      	mov	sl, r0
 800b056:	468b      	mov	fp, r1
 800b058:	e78d      	b.n	800af76 <_strtod_l+0xab6>
 800b05a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800b05e:	e7db      	b.n	800b018 <_strtod_l+0xb58>
 800b060:	a311      	add	r3, pc, #68	; (adr r3, 800b0a8 <_strtod_l+0xbe8>)
 800b062:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b066:	f7f5 fd51 	bl	8000b0c <__aeabi_dcmplt>
 800b06a:	e7b2      	b.n	800afd2 <_strtod_l+0xb12>
 800b06c:	2300      	movs	r3, #0
 800b06e:	930a      	str	r3, [sp, #40]	; 0x28
 800b070:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b072:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b074:	6013      	str	r3, [r2, #0]
 800b076:	f7ff ba6b 	b.w	800a550 <_strtod_l+0x90>
 800b07a:	2a65      	cmp	r2, #101	; 0x65
 800b07c:	f43f ab5f 	beq.w	800a73e <_strtod_l+0x27e>
 800b080:	2a45      	cmp	r2, #69	; 0x45
 800b082:	f43f ab5c 	beq.w	800a73e <_strtod_l+0x27e>
 800b086:	2301      	movs	r3, #1
 800b088:	f7ff bb94 	b.w	800a7b4 <_strtod_l+0x2f4>
 800b08c:	f3af 8000 	nop.w
 800b090:	94a03595 	.word	0x94a03595
 800b094:	3fdfffff 	.word	0x3fdfffff
 800b098:	35afe535 	.word	0x35afe535
 800b09c:	3fe00000 	.word	0x3fe00000
 800b0a0:	ffc00000 	.word	0xffc00000
 800b0a4:	41dfffff 	.word	0x41dfffff
 800b0a8:	94a03595 	.word	0x94a03595
 800b0ac:	3fcfffff 	.word	0x3fcfffff
 800b0b0:	3ff00000 	.word	0x3ff00000
 800b0b4:	7ff00000 	.word	0x7ff00000
 800b0b8:	7fe00000 	.word	0x7fe00000
 800b0bc:	7c9fffff 	.word	0x7c9fffff
 800b0c0:	3fe00000 	.word	0x3fe00000
 800b0c4:	bff00000 	.word	0xbff00000
 800b0c8:	7fefffff 	.word	0x7fefffff

0800b0cc <_strtod_r>:
 800b0cc:	4b01      	ldr	r3, [pc, #4]	; (800b0d4 <_strtod_r+0x8>)
 800b0ce:	f7ff b9f7 	b.w	800a4c0 <_strtod_l>
 800b0d2:	bf00      	nop
 800b0d4:	2000018c 	.word	0x2000018c

0800b0d8 <_strtol_l.constprop.0>:
 800b0d8:	2b01      	cmp	r3, #1
 800b0da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0de:	d001      	beq.n	800b0e4 <_strtol_l.constprop.0+0xc>
 800b0e0:	2b24      	cmp	r3, #36	; 0x24
 800b0e2:	d906      	bls.n	800b0f2 <_strtol_l.constprop.0+0x1a>
 800b0e4:	f7fd ff08 	bl	8008ef8 <__errno>
 800b0e8:	2316      	movs	r3, #22
 800b0ea:	6003      	str	r3, [r0, #0]
 800b0ec:	2000      	movs	r0, #0
 800b0ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0f2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b1d8 <_strtol_l.constprop.0+0x100>
 800b0f6:	460d      	mov	r5, r1
 800b0f8:	462e      	mov	r6, r5
 800b0fa:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b0fe:	f814 700c 	ldrb.w	r7, [r4, ip]
 800b102:	f017 0708 	ands.w	r7, r7, #8
 800b106:	d1f7      	bne.n	800b0f8 <_strtol_l.constprop.0+0x20>
 800b108:	2c2d      	cmp	r4, #45	; 0x2d
 800b10a:	d132      	bne.n	800b172 <_strtol_l.constprop.0+0x9a>
 800b10c:	782c      	ldrb	r4, [r5, #0]
 800b10e:	2701      	movs	r7, #1
 800b110:	1cb5      	adds	r5, r6, #2
 800b112:	2b00      	cmp	r3, #0
 800b114:	d05b      	beq.n	800b1ce <_strtol_l.constprop.0+0xf6>
 800b116:	2b10      	cmp	r3, #16
 800b118:	d109      	bne.n	800b12e <_strtol_l.constprop.0+0x56>
 800b11a:	2c30      	cmp	r4, #48	; 0x30
 800b11c:	d107      	bne.n	800b12e <_strtol_l.constprop.0+0x56>
 800b11e:	782c      	ldrb	r4, [r5, #0]
 800b120:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b124:	2c58      	cmp	r4, #88	; 0x58
 800b126:	d14d      	bne.n	800b1c4 <_strtol_l.constprop.0+0xec>
 800b128:	786c      	ldrb	r4, [r5, #1]
 800b12a:	2310      	movs	r3, #16
 800b12c:	3502      	adds	r5, #2
 800b12e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b132:	f108 38ff 	add.w	r8, r8, #4294967295
 800b136:	f04f 0c00 	mov.w	ip, #0
 800b13a:	fbb8 f9f3 	udiv	r9, r8, r3
 800b13e:	4666      	mov	r6, ip
 800b140:	fb03 8a19 	mls	sl, r3, r9, r8
 800b144:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800b148:	f1be 0f09 	cmp.w	lr, #9
 800b14c:	d816      	bhi.n	800b17c <_strtol_l.constprop.0+0xa4>
 800b14e:	4674      	mov	r4, lr
 800b150:	42a3      	cmp	r3, r4
 800b152:	dd24      	ble.n	800b19e <_strtol_l.constprop.0+0xc6>
 800b154:	f1bc 0f00 	cmp.w	ip, #0
 800b158:	db1e      	blt.n	800b198 <_strtol_l.constprop.0+0xc0>
 800b15a:	45b1      	cmp	r9, r6
 800b15c:	d31c      	bcc.n	800b198 <_strtol_l.constprop.0+0xc0>
 800b15e:	d101      	bne.n	800b164 <_strtol_l.constprop.0+0x8c>
 800b160:	45a2      	cmp	sl, r4
 800b162:	db19      	blt.n	800b198 <_strtol_l.constprop.0+0xc0>
 800b164:	fb06 4603 	mla	r6, r6, r3, r4
 800b168:	f04f 0c01 	mov.w	ip, #1
 800b16c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b170:	e7e8      	b.n	800b144 <_strtol_l.constprop.0+0x6c>
 800b172:	2c2b      	cmp	r4, #43	; 0x2b
 800b174:	bf04      	itt	eq
 800b176:	782c      	ldrbeq	r4, [r5, #0]
 800b178:	1cb5      	addeq	r5, r6, #2
 800b17a:	e7ca      	b.n	800b112 <_strtol_l.constprop.0+0x3a>
 800b17c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800b180:	f1be 0f19 	cmp.w	lr, #25
 800b184:	d801      	bhi.n	800b18a <_strtol_l.constprop.0+0xb2>
 800b186:	3c37      	subs	r4, #55	; 0x37
 800b188:	e7e2      	b.n	800b150 <_strtol_l.constprop.0+0x78>
 800b18a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800b18e:	f1be 0f19 	cmp.w	lr, #25
 800b192:	d804      	bhi.n	800b19e <_strtol_l.constprop.0+0xc6>
 800b194:	3c57      	subs	r4, #87	; 0x57
 800b196:	e7db      	b.n	800b150 <_strtol_l.constprop.0+0x78>
 800b198:	f04f 3cff 	mov.w	ip, #4294967295
 800b19c:	e7e6      	b.n	800b16c <_strtol_l.constprop.0+0x94>
 800b19e:	f1bc 0f00 	cmp.w	ip, #0
 800b1a2:	da05      	bge.n	800b1b0 <_strtol_l.constprop.0+0xd8>
 800b1a4:	2322      	movs	r3, #34	; 0x22
 800b1a6:	6003      	str	r3, [r0, #0]
 800b1a8:	4646      	mov	r6, r8
 800b1aa:	b942      	cbnz	r2, 800b1be <_strtol_l.constprop.0+0xe6>
 800b1ac:	4630      	mov	r0, r6
 800b1ae:	e79e      	b.n	800b0ee <_strtol_l.constprop.0+0x16>
 800b1b0:	b107      	cbz	r7, 800b1b4 <_strtol_l.constprop.0+0xdc>
 800b1b2:	4276      	negs	r6, r6
 800b1b4:	2a00      	cmp	r2, #0
 800b1b6:	d0f9      	beq.n	800b1ac <_strtol_l.constprop.0+0xd4>
 800b1b8:	f1bc 0f00 	cmp.w	ip, #0
 800b1bc:	d000      	beq.n	800b1c0 <_strtol_l.constprop.0+0xe8>
 800b1be:	1e69      	subs	r1, r5, #1
 800b1c0:	6011      	str	r1, [r2, #0]
 800b1c2:	e7f3      	b.n	800b1ac <_strtol_l.constprop.0+0xd4>
 800b1c4:	2430      	movs	r4, #48	; 0x30
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d1b1      	bne.n	800b12e <_strtol_l.constprop.0+0x56>
 800b1ca:	2308      	movs	r3, #8
 800b1cc:	e7af      	b.n	800b12e <_strtol_l.constprop.0+0x56>
 800b1ce:	2c30      	cmp	r4, #48	; 0x30
 800b1d0:	d0a5      	beq.n	800b11e <_strtol_l.constprop.0+0x46>
 800b1d2:	230a      	movs	r3, #10
 800b1d4:	e7ab      	b.n	800b12e <_strtol_l.constprop.0+0x56>
 800b1d6:	bf00      	nop
 800b1d8:	0800e669 	.word	0x0800e669

0800b1dc <_strtol_r>:
 800b1dc:	f7ff bf7c 	b.w	800b0d8 <_strtol_l.constprop.0>

0800b1e0 <__swbuf_r>:
 800b1e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1e2:	460e      	mov	r6, r1
 800b1e4:	4614      	mov	r4, r2
 800b1e6:	4605      	mov	r5, r0
 800b1e8:	b118      	cbz	r0, 800b1f2 <__swbuf_r+0x12>
 800b1ea:	6983      	ldr	r3, [r0, #24]
 800b1ec:	b90b      	cbnz	r3, 800b1f2 <__swbuf_r+0x12>
 800b1ee:	f7fd ffa3 	bl	8009138 <__sinit>
 800b1f2:	4b21      	ldr	r3, [pc, #132]	; (800b278 <__swbuf_r+0x98>)
 800b1f4:	429c      	cmp	r4, r3
 800b1f6:	d12b      	bne.n	800b250 <__swbuf_r+0x70>
 800b1f8:	686c      	ldr	r4, [r5, #4]
 800b1fa:	69a3      	ldr	r3, [r4, #24]
 800b1fc:	60a3      	str	r3, [r4, #8]
 800b1fe:	89a3      	ldrh	r3, [r4, #12]
 800b200:	071a      	lsls	r2, r3, #28
 800b202:	d52f      	bpl.n	800b264 <__swbuf_r+0x84>
 800b204:	6923      	ldr	r3, [r4, #16]
 800b206:	b36b      	cbz	r3, 800b264 <__swbuf_r+0x84>
 800b208:	6923      	ldr	r3, [r4, #16]
 800b20a:	6820      	ldr	r0, [r4, #0]
 800b20c:	1ac0      	subs	r0, r0, r3
 800b20e:	6963      	ldr	r3, [r4, #20]
 800b210:	b2f6      	uxtb	r6, r6
 800b212:	4283      	cmp	r3, r0
 800b214:	4637      	mov	r7, r6
 800b216:	dc04      	bgt.n	800b222 <__swbuf_r+0x42>
 800b218:	4621      	mov	r1, r4
 800b21a:	4628      	mov	r0, r5
 800b21c:	f7fd fef8 	bl	8009010 <_fflush_r>
 800b220:	bb30      	cbnz	r0, 800b270 <__swbuf_r+0x90>
 800b222:	68a3      	ldr	r3, [r4, #8]
 800b224:	3b01      	subs	r3, #1
 800b226:	60a3      	str	r3, [r4, #8]
 800b228:	6823      	ldr	r3, [r4, #0]
 800b22a:	1c5a      	adds	r2, r3, #1
 800b22c:	6022      	str	r2, [r4, #0]
 800b22e:	701e      	strb	r6, [r3, #0]
 800b230:	6963      	ldr	r3, [r4, #20]
 800b232:	3001      	adds	r0, #1
 800b234:	4283      	cmp	r3, r0
 800b236:	d004      	beq.n	800b242 <__swbuf_r+0x62>
 800b238:	89a3      	ldrh	r3, [r4, #12]
 800b23a:	07db      	lsls	r3, r3, #31
 800b23c:	d506      	bpl.n	800b24c <__swbuf_r+0x6c>
 800b23e:	2e0a      	cmp	r6, #10
 800b240:	d104      	bne.n	800b24c <__swbuf_r+0x6c>
 800b242:	4621      	mov	r1, r4
 800b244:	4628      	mov	r0, r5
 800b246:	f7fd fee3 	bl	8009010 <_fflush_r>
 800b24a:	b988      	cbnz	r0, 800b270 <__swbuf_r+0x90>
 800b24c:	4638      	mov	r0, r7
 800b24e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b250:	4b0a      	ldr	r3, [pc, #40]	; (800b27c <__swbuf_r+0x9c>)
 800b252:	429c      	cmp	r4, r3
 800b254:	d101      	bne.n	800b25a <__swbuf_r+0x7a>
 800b256:	68ac      	ldr	r4, [r5, #8]
 800b258:	e7cf      	b.n	800b1fa <__swbuf_r+0x1a>
 800b25a:	4b09      	ldr	r3, [pc, #36]	; (800b280 <__swbuf_r+0xa0>)
 800b25c:	429c      	cmp	r4, r3
 800b25e:	bf08      	it	eq
 800b260:	68ec      	ldreq	r4, [r5, #12]
 800b262:	e7ca      	b.n	800b1fa <__swbuf_r+0x1a>
 800b264:	4621      	mov	r1, r4
 800b266:	4628      	mov	r0, r5
 800b268:	f000 f81e 	bl	800b2a8 <__swsetup_r>
 800b26c:	2800      	cmp	r0, #0
 800b26e:	d0cb      	beq.n	800b208 <__swbuf_r+0x28>
 800b270:	f04f 37ff 	mov.w	r7, #4294967295
 800b274:	e7ea      	b.n	800b24c <__swbuf_r+0x6c>
 800b276:	bf00      	nop
 800b278:	0800e59c 	.word	0x0800e59c
 800b27c:	0800e5bc 	.word	0x0800e5bc
 800b280:	0800e57c 	.word	0x0800e57c

0800b284 <_write_r>:
 800b284:	b538      	push	{r3, r4, r5, lr}
 800b286:	4d07      	ldr	r5, [pc, #28]	; (800b2a4 <_write_r+0x20>)
 800b288:	4604      	mov	r4, r0
 800b28a:	4608      	mov	r0, r1
 800b28c:	4611      	mov	r1, r2
 800b28e:	2200      	movs	r2, #0
 800b290:	602a      	str	r2, [r5, #0]
 800b292:	461a      	mov	r2, r3
 800b294:	f7f6 fb26 	bl	80018e4 <_write>
 800b298:	1c43      	adds	r3, r0, #1
 800b29a:	d102      	bne.n	800b2a2 <_write_r+0x1e>
 800b29c:	682b      	ldr	r3, [r5, #0]
 800b29e:	b103      	cbz	r3, 800b2a2 <_write_r+0x1e>
 800b2a0:	6023      	str	r3, [r4, #0]
 800b2a2:	bd38      	pop	{r3, r4, r5, pc}
 800b2a4:	200014b4 	.word	0x200014b4

0800b2a8 <__swsetup_r>:
 800b2a8:	4b32      	ldr	r3, [pc, #200]	; (800b374 <__swsetup_r+0xcc>)
 800b2aa:	b570      	push	{r4, r5, r6, lr}
 800b2ac:	681d      	ldr	r5, [r3, #0]
 800b2ae:	4606      	mov	r6, r0
 800b2b0:	460c      	mov	r4, r1
 800b2b2:	b125      	cbz	r5, 800b2be <__swsetup_r+0x16>
 800b2b4:	69ab      	ldr	r3, [r5, #24]
 800b2b6:	b913      	cbnz	r3, 800b2be <__swsetup_r+0x16>
 800b2b8:	4628      	mov	r0, r5
 800b2ba:	f7fd ff3d 	bl	8009138 <__sinit>
 800b2be:	4b2e      	ldr	r3, [pc, #184]	; (800b378 <__swsetup_r+0xd0>)
 800b2c0:	429c      	cmp	r4, r3
 800b2c2:	d10f      	bne.n	800b2e4 <__swsetup_r+0x3c>
 800b2c4:	686c      	ldr	r4, [r5, #4]
 800b2c6:	89a3      	ldrh	r3, [r4, #12]
 800b2c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b2cc:	0719      	lsls	r1, r3, #28
 800b2ce:	d42c      	bmi.n	800b32a <__swsetup_r+0x82>
 800b2d0:	06dd      	lsls	r5, r3, #27
 800b2d2:	d411      	bmi.n	800b2f8 <__swsetup_r+0x50>
 800b2d4:	2309      	movs	r3, #9
 800b2d6:	6033      	str	r3, [r6, #0]
 800b2d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b2dc:	81a3      	strh	r3, [r4, #12]
 800b2de:	f04f 30ff 	mov.w	r0, #4294967295
 800b2e2:	e03e      	b.n	800b362 <__swsetup_r+0xba>
 800b2e4:	4b25      	ldr	r3, [pc, #148]	; (800b37c <__swsetup_r+0xd4>)
 800b2e6:	429c      	cmp	r4, r3
 800b2e8:	d101      	bne.n	800b2ee <__swsetup_r+0x46>
 800b2ea:	68ac      	ldr	r4, [r5, #8]
 800b2ec:	e7eb      	b.n	800b2c6 <__swsetup_r+0x1e>
 800b2ee:	4b24      	ldr	r3, [pc, #144]	; (800b380 <__swsetup_r+0xd8>)
 800b2f0:	429c      	cmp	r4, r3
 800b2f2:	bf08      	it	eq
 800b2f4:	68ec      	ldreq	r4, [r5, #12]
 800b2f6:	e7e6      	b.n	800b2c6 <__swsetup_r+0x1e>
 800b2f8:	0758      	lsls	r0, r3, #29
 800b2fa:	d512      	bpl.n	800b322 <__swsetup_r+0x7a>
 800b2fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b2fe:	b141      	cbz	r1, 800b312 <__swsetup_r+0x6a>
 800b300:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b304:	4299      	cmp	r1, r3
 800b306:	d002      	beq.n	800b30e <__swsetup_r+0x66>
 800b308:	4630      	mov	r0, r6
 800b30a:	f7fe f809 	bl	8009320 <_free_r>
 800b30e:	2300      	movs	r3, #0
 800b310:	6363      	str	r3, [r4, #52]	; 0x34
 800b312:	89a3      	ldrh	r3, [r4, #12]
 800b314:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b318:	81a3      	strh	r3, [r4, #12]
 800b31a:	2300      	movs	r3, #0
 800b31c:	6063      	str	r3, [r4, #4]
 800b31e:	6923      	ldr	r3, [r4, #16]
 800b320:	6023      	str	r3, [r4, #0]
 800b322:	89a3      	ldrh	r3, [r4, #12]
 800b324:	f043 0308 	orr.w	r3, r3, #8
 800b328:	81a3      	strh	r3, [r4, #12]
 800b32a:	6923      	ldr	r3, [r4, #16]
 800b32c:	b94b      	cbnz	r3, 800b342 <__swsetup_r+0x9a>
 800b32e:	89a3      	ldrh	r3, [r4, #12]
 800b330:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b334:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b338:	d003      	beq.n	800b342 <__swsetup_r+0x9a>
 800b33a:	4621      	mov	r1, r4
 800b33c:	4630      	mov	r0, r6
 800b33e:	f001 fa59 	bl	800c7f4 <__smakebuf_r>
 800b342:	89a0      	ldrh	r0, [r4, #12]
 800b344:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b348:	f010 0301 	ands.w	r3, r0, #1
 800b34c:	d00a      	beq.n	800b364 <__swsetup_r+0xbc>
 800b34e:	2300      	movs	r3, #0
 800b350:	60a3      	str	r3, [r4, #8]
 800b352:	6963      	ldr	r3, [r4, #20]
 800b354:	425b      	negs	r3, r3
 800b356:	61a3      	str	r3, [r4, #24]
 800b358:	6923      	ldr	r3, [r4, #16]
 800b35a:	b943      	cbnz	r3, 800b36e <__swsetup_r+0xc6>
 800b35c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b360:	d1ba      	bne.n	800b2d8 <__swsetup_r+0x30>
 800b362:	bd70      	pop	{r4, r5, r6, pc}
 800b364:	0781      	lsls	r1, r0, #30
 800b366:	bf58      	it	pl
 800b368:	6963      	ldrpl	r3, [r4, #20]
 800b36a:	60a3      	str	r3, [r4, #8]
 800b36c:	e7f4      	b.n	800b358 <__swsetup_r+0xb0>
 800b36e:	2000      	movs	r0, #0
 800b370:	e7f7      	b.n	800b362 <__swsetup_r+0xba>
 800b372:	bf00      	nop
 800b374:	20000124 	.word	0x20000124
 800b378:	0800e59c 	.word	0x0800e59c
 800b37c:	0800e5bc 	.word	0x0800e5bc
 800b380:	0800e57c 	.word	0x0800e57c

0800b384 <_close_r>:
 800b384:	b538      	push	{r3, r4, r5, lr}
 800b386:	4d06      	ldr	r5, [pc, #24]	; (800b3a0 <_close_r+0x1c>)
 800b388:	2300      	movs	r3, #0
 800b38a:	4604      	mov	r4, r0
 800b38c:	4608      	mov	r0, r1
 800b38e:	602b      	str	r3, [r5, #0]
 800b390:	f7f6 fab6 	bl	8001900 <_close>
 800b394:	1c43      	adds	r3, r0, #1
 800b396:	d102      	bne.n	800b39e <_close_r+0x1a>
 800b398:	682b      	ldr	r3, [r5, #0]
 800b39a:	b103      	cbz	r3, 800b39e <_close_r+0x1a>
 800b39c:	6023      	str	r3, [r4, #0]
 800b39e:	bd38      	pop	{r3, r4, r5, pc}
 800b3a0:	200014b4 	.word	0x200014b4

0800b3a4 <quorem>:
 800b3a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3a8:	6903      	ldr	r3, [r0, #16]
 800b3aa:	690c      	ldr	r4, [r1, #16]
 800b3ac:	42a3      	cmp	r3, r4
 800b3ae:	4607      	mov	r7, r0
 800b3b0:	f2c0 8081 	blt.w	800b4b6 <quorem+0x112>
 800b3b4:	3c01      	subs	r4, #1
 800b3b6:	f101 0814 	add.w	r8, r1, #20
 800b3ba:	f100 0514 	add.w	r5, r0, #20
 800b3be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b3c2:	9301      	str	r3, [sp, #4]
 800b3c4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b3c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b3cc:	3301      	adds	r3, #1
 800b3ce:	429a      	cmp	r2, r3
 800b3d0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b3d4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b3d8:	fbb2 f6f3 	udiv	r6, r2, r3
 800b3dc:	d331      	bcc.n	800b442 <quorem+0x9e>
 800b3de:	f04f 0e00 	mov.w	lr, #0
 800b3e2:	4640      	mov	r0, r8
 800b3e4:	46ac      	mov	ip, r5
 800b3e6:	46f2      	mov	sl, lr
 800b3e8:	f850 2b04 	ldr.w	r2, [r0], #4
 800b3ec:	b293      	uxth	r3, r2
 800b3ee:	fb06 e303 	mla	r3, r6, r3, lr
 800b3f2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b3f6:	b29b      	uxth	r3, r3
 800b3f8:	ebaa 0303 	sub.w	r3, sl, r3
 800b3fc:	f8dc a000 	ldr.w	sl, [ip]
 800b400:	0c12      	lsrs	r2, r2, #16
 800b402:	fa13 f38a 	uxtah	r3, r3, sl
 800b406:	fb06 e202 	mla	r2, r6, r2, lr
 800b40a:	9300      	str	r3, [sp, #0]
 800b40c:	9b00      	ldr	r3, [sp, #0]
 800b40e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b412:	b292      	uxth	r2, r2
 800b414:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b418:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b41c:	f8bd 3000 	ldrh.w	r3, [sp]
 800b420:	4581      	cmp	r9, r0
 800b422:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b426:	f84c 3b04 	str.w	r3, [ip], #4
 800b42a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b42e:	d2db      	bcs.n	800b3e8 <quorem+0x44>
 800b430:	f855 300b 	ldr.w	r3, [r5, fp]
 800b434:	b92b      	cbnz	r3, 800b442 <quorem+0x9e>
 800b436:	9b01      	ldr	r3, [sp, #4]
 800b438:	3b04      	subs	r3, #4
 800b43a:	429d      	cmp	r5, r3
 800b43c:	461a      	mov	r2, r3
 800b43e:	d32e      	bcc.n	800b49e <quorem+0xfa>
 800b440:	613c      	str	r4, [r7, #16]
 800b442:	4638      	mov	r0, r7
 800b444:	f001 fd00 	bl	800ce48 <__mcmp>
 800b448:	2800      	cmp	r0, #0
 800b44a:	db24      	blt.n	800b496 <quorem+0xf2>
 800b44c:	3601      	adds	r6, #1
 800b44e:	4628      	mov	r0, r5
 800b450:	f04f 0c00 	mov.w	ip, #0
 800b454:	f858 2b04 	ldr.w	r2, [r8], #4
 800b458:	f8d0 e000 	ldr.w	lr, [r0]
 800b45c:	b293      	uxth	r3, r2
 800b45e:	ebac 0303 	sub.w	r3, ip, r3
 800b462:	0c12      	lsrs	r2, r2, #16
 800b464:	fa13 f38e 	uxtah	r3, r3, lr
 800b468:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b46c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b470:	b29b      	uxth	r3, r3
 800b472:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b476:	45c1      	cmp	r9, r8
 800b478:	f840 3b04 	str.w	r3, [r0], #4
 800b47c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b480:	d2e8      	bcs.n	800b454 <quorem+0xb0>
 800b482:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b486:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b48a:	b922      	cbnz	r2, 800b496 <quorem+0xf2>
 800b48c:	3b04      	subs	r3, #4
 800b48e:	429d      	cmp	r5, r3
 800b490:	461a      	mov	r2, r3
 800b492:	d30a      	bcc.n	800b4aa <quorem+0x106>
 800b494:	613c      	str	r4, [r7, #16]
 800b496:	4630      	mov	r0, r6
 800b498:	b003      	add	sp, #12
 800b49a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b49e:	6812      	ldr	r2, [r2, #0]
 800b4a0:	3b04      	subs	r3, #4
 800b4a2:	2a00      	cmp	r2, #0
 800b4a4:	d1cc      	bne.n	800b440 <quorem+0x9c>
 800b4a6:	3c01      	subs	r4, #1
 800b4a8:	e7c7      	b.n	800b43a <quorem+0x96>
 800b4aa:	6812      	ldr	r2, [r2, #0]
 800b4ac:	3b04      	subs	r3, #4
 800b4ae:	2a00      	cmp	r2, #0
 800b4b0:	d1f0      	bne.n	800b494 <quorem+0xf0>
 800b4b2:	3c01      	subs	r4, #1
 800b4b4:	e7eb      	b.n	800b48e <quorem+0xea>
 800b4b6:	2000      	movs	r0, #0
 800b4b8:	e7ee      	b.n	800b498 <quorem+0xf4>
 800b4ba:	0000      	movs	r0, r0
 800b4bc:	0000      	movs	r0, r0
	...

0800b4c0 <_dtoa_r>:
 800b4c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4c4:	ed2d 8b04 	vpush	{d8-d9}
 800b4c8:	ec57 6b10 	vmov	r6, r7, d0
 800b4cc:	b093      	sub	sp, #76	; 0x4c
 800b4ce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b4d0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b4d4:	9106      	str	r1, [sp, #24]
 800b4d6:	ee10 aa10 	vmov	sl, s0
 800b4da:	4604      	mov	r4, r0
 800b4dc:	9209      	str	r2, [sp, #36]	; 0x24
 800b4de:	930c      	str	r3, [sp, #48]	; 0x30
 800b4e0:	46bb      	mov	fp, r7
 800b4e2:	b975      	cbnz	r5, 800b502 <_dtoa_r+0x42>
 800b4e4:	2010      	movs	r0, #16
 800b4e6:	f7fd feed 	bl	80092c4 <malloc>
 800b4ea:	4602      	mov	r2, r0
 800b4ec:	6260      	str	r0, [r4, #36]	; 0x24
 800b4ee:	b920      	cbnz	r0, 800b4fa <_dtoa_r+0x3a>
 800b4f0:	4ba7      	ldr	r3, [pc, #668]	; (800b790 <_dtoa_r+0x2d0>)
 800b4f2:	21ea      	movs	r1, #234	; 0xea
 800b4f4:	48a7      	ldr	r0, [pc, #668]	; (800b794 <_dtoa_r+0x2d4>)
 800b4f6:	f002 fdaf 	bl	800e058 <__assert_func>
 800b4fa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b4fe:	6005      	str	r5, [r0, #0]
 800b500:	60c5      	str	r5, [r0, #12]
 800b502:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b504:	6819      	ldr	r1, [r3, #0]
 800b506:	b151      	cbz	r1, 800b51e <_dtoa_r+0x5e>
 800b508:	685a      	ldr	r2, [r3, #4]
 800b50a:	604a      	str	r2, [r1, #4]
 800b50c:	2301      	movs	r3, #1
 800b50e:	4093      	lsls	r3, r2
 800b510:	608b      	str	r3, [r1, #8]
 800b512:	4620      	mov	r0, r4
 800b514:	f001 fa0c 	bl	800c930 <_Bfree>
 800b518:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b51a:	2200      	movs	r2, #0
 800b51c:	601a      	str	r2, [r3, #0]
 800b51e:	1e3b      	subs	r3, r7, #0
 800b520:	bfaa      	itet	ge
 800b522:	2300      	movge	r3, #0
 800b524:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b528:	f8c8 3000 	strge.w	r3, [r8]
 800b52c:	4b9a      	ldr	r3, [pc, #616]	; (800b798 <_dtoa_r+0x2d8>)
 800b52e:	bfbc      	itt	lt
 800b530:	2201      	movlt	r2, #1
 800b532:	f8c8 2000 	strlt.w	r2, [r8]
 800b536:	ea33 030b 	bics.w	r3, r3, fp
 800b53a:	d11b      	bne.n	800b574 <_dtoa_r+0xb4>
 800b53c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b53e:	f242 730f 	movw	r3, #9999	; 0x270f
 800b542:	6013      	str	r3, [r2, #0]
 800b544:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b548:	4333      	orrs	r3, r6
 800b54a:	f000 8592 	beq.w	800c072 <_dtoa_r+0xbb2>
 800b54e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b550:	b963      	cbnz	r3, 800b56c <_dtoa_r+0xac>
 800b552:	4b92      	ldr	r3, [pc, #584]	; (800b79c <_dtoa_r+0x2dc>)
 800b554:	e022      	b.n	800b59c <_dtoa_r+0xdc>
 800b556:	4b92      	ldr	r3, [pc, #584]	; (800b7a0 <_dtoa_r+0x2e0>)
 800b558:	9301      	str	r3, [sp, #4]
 800b55a:	3308      	adds	r3, #8
 800b55c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b55e:	6013      	str	r3, [r2, #0]
 800b560:	9801      	ldr	r0, [sp, #4]
 800b562:	b013      	add	sp, #76	; 0x4c
 800b564:	ecbd 8b04 	vpop	{d8-d9}
 800b568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b56c:	4b8b      	ldr	r3, [pc, #556]	; (800b79c <_dtoa_r+0x2dc>)
 800b56e:	9301      	str	r3, [sp, #4]
 800b570:	3303      	adds	r3, #3
 800b572:	e7f3      	b.n	800b55c <_dtoa_r+0x9c>
 800b574:	2200      	movs	r2, #0
 800b576:	2300      	movs	r3, #0
 800b578:	4650      	mov	r0, sl
 800b57a:	4659      	mov	r1, fp
 800b57c:	f7f5 fabc 	bl	8000af8 <__aeabi_dcmpeq>
 800b580:	ec4b ab19 	vmov	d9, sl, fp
 800b584:	4680      	mov	r8, r0
 800b586:	b158      	cbz	r0, 800b5a0 <_dtoa_r+0xe0>
 800b588:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b58a:	2301      	movs	r3, #1
 800b58c:	6013      	str	r3, [r2, #0]
 800b58e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b590:	2b00      	cmp	r3, #0
 800b592:	f000 856b 	beq.w	800c06c <_dtoa_r+0xbac>
 800b596:	4883      	ldr	r0, [pc, #524]	; (800b7a4 <_dtoa_r+0x2e4>)
 800b598:	6018      	str	r0, [r3, #0]
 800b59a:	1e43      	subs	r3, r0, #1
 800b59c:	9301      	str	r3, [sp, #4]
 800b59e:	e7df      	b.n	800b560 <_dtoa_r+0xa0>
 800b5a0:	ec4b ab10 	vmov	d0, sl, fp
 800b5a4:	aa10      	add	r2, sp, #64	; 0x40
 800b5a6:	a911      	add	r1, sp, #68	; 0x44
 800b5a8:	4620      	mov	r0, r4
 800b5aa:	f001 fd6f 	bl	800d08c <__d2b>
 800b5ae:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b5b2:	ee08 0a10 	vmov	s16, r0
 800b5b6:	2d00      	cmp	r5, #0
 800b5b8:	f000 8084 	beq.w	800b6c4 <_dtoa_r+0x204>
 800b5bc:	ee19 3a90 	vmov	r3, s19
 800b5c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b5c4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b5c8:	4656      	mov	r6, sl
 800b5ca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b5ce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b5d2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b5d6:	4b74      	ldr	r3, [pc, #464]	; (800b7a8 <_dtoa_r+0x2e8>)
 800b5d8:	2200      	movs	r2, #0
 800b5da:	4630      	mov	r0, r6
 800b5dc:	4639      	mov	r1, r7
 800b5de:	f7f4 fe6b 	bl	80002b8 <__aeabi_dsub>
 800b5e2:	a365      	add	r3, pc, #404	; (adr r3, 800b778 <_dtoa_r+0x2b8>)
 800b5e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5e8:	f7f5 f81e 	bl	8000628 <__aeabi_dmul>
 800b5ec:	a364      	add	r3, pc, #400	; (adr r3, 800b780 <_dtoa_r+0x2c0>)
 800b5ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5f2:	f7f4 fe63 	bl	80002bc <__adddf3>
 800b5f6:	4606      	mov	r6, r0
 800b5f8:	4628      	mov	r0, r5
 800b5fa:	460f      	mov	r7, r1
 800b5fc:	f7f4 ffaa 	bl	8000554 <__aeabi_i2d>
 800b600:	a361      	add	r3, pc, #388	; (adr r3, 800b788 <_dtoa_r+0x2c8>)
 800b602:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b606:	f7f5 f80f 	bl	8000628 <__aeabi_dmul>
 800b60a:	4602      	mov	r2, r0
 800b60c:	460b      	mov	r3, r1
 800b60e:	4630      	mov	r0, r6
 800b610:	4639      	mov	r1, r7
 800b612:	f7f4 fe53 	bl	80002bc <__adddf3>
 800b616:	4606      	mov	r6, r0
 800b618:	460f      	mov	r7, r1
 800b61a:	f7f5 fab5 	bl	8000b88 <__aeabi_d2iz>
 800b61e:	2200      	movs	r2, #0
 800b620:	9000      	str	r0, [sp, #0]
 800b622:	2300      	movs	r3, #0
 800b624:	4630      	mov	r0, r6
 800b626:	4639      	mov	r1, r7
 800b628:	f7f5 fa70 	bl	8000b0c <__aeabi_dcmplt>
 800b62c:	b150      	cbz	r0, 800b644 <_dtoa_r+0x184>
 800b62e:	9800      	ldr	r0, [sp, #0]
 800b630:	f7f4 ff90 	bl	8000554 <__aeabi_i2d>
 800b634:	4632      	mov	r2, r6
 800b636:	463b      	mov	r3, r7
 800b638:	f7f5 fa5e 	bl	8000af8 <__aeabi_dcmpeq>
 800b63c:	b910      	cbnz	r0, 800b644 <_dtoa_r+0x184>
 800b63e:	9b00      	ldr	r3, [sp, #0]
 800b640:	3b01      	subs	r3, #1
 800b642:	9300      	str	r3, [sp, #0]
 800b644:	9b00      	ldr	r3, [sp, #0]
 800b646:	2b16      	cmp	r3, #22
 800b648:	d85a      	bhi.n	800b700 <_dtoa_r+0x240>
 800b64a:	9a00      	ldr	r2, [sp, #0]
 800b64c:	4b57      	ldr	r3, [pc, #348]	; (800b7ac <_dtoa_r+0x2ec>)
 800b64e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b652:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b656:	ec51 0b19 	vmov	r0, r1, d9
 800b65a:	f7f5 fa57 	bl	8000b0c <__aeabi_dcmplt>
 800b65e:	2800      	cmp	r0, #0
 800b660:	d050      	beq.n	800b704 <_dtoa_r+0x244>
 800b662:	9b00      	ldr	r3, [sp, #0]
 800b664:	3b01      	subs	r3, #1
 800b666:	9300      	str	r3, [sp, #0]
 800b668:	2300      	movs	r3, #0
 800b66a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b66c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b66e:	1b5d      	subs	r5, r3, r5
 800b670:	1e6b      	subs	r3, r5, #1
 800b672:	9305      	str	r3, [sp, #20]
 800b674:	bf45      	ittet	mi
 800b676:	f1c5 0301 	rsbmi	r3, r5, #1
 800b67a:	9304      	strmi	r3, [sp, #16]
 800b67c:	2300      	movpl	r3, #0
 800b67e:	2300      	movmi	r3, #0
 800b680:	bf4c      	ite	mi
 800b682:	9305      	strmi	r3, [sp, #20]
 800b684:	9304      	strpl	r3, [sp, #16]
 800b686:	9b00      	ldr	r3, [sp, #0]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	db3d      	blt.n	800b708 <_dtoa_r+0x248>
 800b68c:	9b05      	ldr	r3, [sp, #20]
 800b68e:	9a00      	ldr	r2, [sp, #0]
 800b690:	920a      	str	r2, [sp, #40]	; 0x28
 800b692:	4413      	add	r3, r2
 800b694:	9305      	str	r3, [sp, #20]
 800b696:	2300      	movs	r3, #0
 800b698:	9307      	str	r3, [sp, #28]
 800b69a:	9b06      	ldr	r3, [sp, #24]
 800b69c:	2b09      	cmp	r3, #9
 800b69e:	f200 8089 	bhi.w	800b7b4 <_dtoa_r+0x2f4>
 800b6a2:	2b05      	cmp	r3, #5
 800b6a4:	bfc4      	itt	gt
 800b6a6:	3b04      	subgt	r3, #4
 800b6a8:	9306      	strgt	r3, [sp, #24]
 800b6aa:	9b06      	ldr	r3, [sp, #24]
 800b6ac:	f1a3 0302 	sub.w	r3, r3, #2
 800b6b0:	bfcc      	ite	gt
 800b6b2:	2500      	movgt	r5, #0
 800b6b4:	2501      	movle	r5, #1
 800b6b6:	2b03      	cmp	r3, #3
 800b6b8:	f200 8087 	bhi.w	800b7ca <_dtoa_r+0x30a>
 800b6bc:	e8df f003 	tbb	[pc, r3]
 800b6c0:	59383a2d 	.word	0x59383a2d
 800b6c4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b6c8:	441d      	add	r5, r3
 800b6ca:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b6ce:	2b20      	cmp	r3, #32
 800b6d0:	bfc1      	itttt	gt
 800b6d2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b6d6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b6da:	fa0b f303 	lslgt.w	r3, fp, r3
 800b6de:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b6e2:	bfda      	itte	le
 800b6e4:	f1c3 0320 	rsble	r3, r3, #32
 800b6e8:	fa06 f003 	lslle.w	r0, r6, r3
 800b6ec:	4318      	orrgt	r0, r3
 800b6ee:	f7f4 ff21 	bl	8000534 <__aeabi_ui2d>
 800b6f2:	2301      	movs	r3, #1
 800b6f4:	4606      	mov	r6, r0
 800b6f6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b6fa:	3d01      	subs	r5, #1
 800b6fc:	930e      	str	r3, [sp, #56]	; 0x38
 800b6fe:	e76a      	b.n	800b5d6 <_dtoa_r+0x116>
 800b700:	2301      	movs	r3, #1
 800b702:	e7b2      	b.n	800b66a <_dtoa_r+0x1aa>
 800b704:	900b      	str	r0, [sp, #44]	; 0x2c
 800b706:	e7b1      	b.n	800b66c <_dtoa_r+0x1ac>
 800b708:	9b04      	ldr	r3, [sp, #16]
 800b70a:	9a00      	ldr	r2, [sp, #0]
 800b70c:	1a9b      	subs	r3, r3, r2
 800b70e:	9304      	str	r3, [sp, #16]
 800b710:	4253      	negs	r3, r2
 800b712:	9307      	str	r3, [sp, #28]
 800b714:	2300      	movs	r3, #0
 800b716:	930a      	str	r3, [sp, #40]	; 0x28
 800b718:	e7bf      	b.n	800b69a <_dtoa_r+0x1da>
 800b71a:	2300      	movs	r3, #0
 800b71c:	9308      	str	r3, [sp, #32]
 800b71e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b720:	2b00      	cmp	r3, #0
 800b722:	dc55      	bgt.n	800b7d0 <_dtoa_r+0x310>
 800b724:	2301      	movs	r3, #1
 800b726:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b72a:	461a      	mov	r2, r3
 800b72c:	9209      	str	r2, [sp, #36]	; 0x24
 800b72e:	e00c      	b.n	800b74a <_dtoa_r+0x28a>
 800b730:	2301      	movs	r3, #1
 800b732:	e7f3      	b.n	800b71c <_dtoa_r+0x25c>
 800b734:	2300      	movs	r3, #0
 800b736:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b738:	9308      	str	r3, [sp, #32]
 800b73a:	9b00      	ldr	r3, [sp, #0]
 800b73c:	4413      	add	r3, r2
 800b73e:	9302      	str	r3, [sp, #8]
 800b740:	3301      	adds	r3, #1
 800b742:	2b01      	cmp	r3, #1
 800b744:	9303      	str	r3, [sp, #12]
 800b746:	bfb8      	it	lt
 800b748:	2301      	movlt	r3, #1
 800b74a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b74c:	2200      	movs	r2, #0
 800b74e:	6042      	str	r2, [r0, #4]
 800b750:	2204      	movs	r2, #4
 800b752:	f102 0614 	add.w	r6, r2, #20
 800b756:	429e      	cmp	r6, r3
 800b758:	6841      	ldr	r1, [r0, #4]
 800b75a:	d93d      	bls.n	800b7d8 <_dtoa_r+0x318>
 800b75c:	4620      	mov	r0, r4
 800b75e:	f001 f8a7 	bl	800c8b0 <_Balloc>
 800b762:	9001      	str	r0, [sp, #4]
 800b764:	2800      	cmp	r0, #0
 800b766:	d13b      	bne.n	800b7e0 <_dtoa_r+0x320>
 800b768:	4b11      	ldr	r3, [pc, #68]	; (800b7b0 <_dtoa_r+0x2f0>)
 800b76a:	4602      	mov	r2, r0
 800b76c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b770:	e6c0      	b.n	800b4f4 <_dtoa_r+0x34>
 800b772:	2301      	movs	r3, #1
 800b774:	e7df      	b.n	800b736 <_dtoa_r+0x276>
 800b776:	bf00      	nop
 800b778:	636f4361 	.word	0x636f4361
 800b77c:	3fd287a7 	.word	0x3fd287a7
 800b780:	8b60c8b3 	.word	0x8b60c8b3
 800b784:	3fc68a28 	.word	0x3fc68a28
 800b788:	509f79fb 	.word	0x509f79fb
 800b78c:	3fd34413 	.word	0x3fd34413
 800b790:	0800e776 	.word	0x0800e776
 800b794:	0800e78d 	.word	0x0800e78d
 800b798:	7ff00000 	.word	0x7ff00000
 800b79c:	0800e772 	.word	0x0800e772
 800b7a0:	0800e769 	.word	0x0800e769
 800b7a4:	0800e9e2 	.word	0x0800e9e2
 800b7a8:	3ff80000 	.word	0x3ff80000
 800b7ac:	0800e8f8 	.word	0x0800e8f8
 800b7b0:	0800e7e8 	.word	0x0800e7e8
 800b7b4:	2501      	movs	r5, #1
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	9306      	str	r3, [sp, #24]
 800b7ba:	9508      	str	r5, [sp, #32]
 800b7bc:	f04f 33ff 	mov.w	r3, #4294967295
 800b7c0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	2312      	movs	r3, #18
 800b7c8:	e7b0      	b.n	800b72c <_dtoa_r+0x26c>
 800b7ca:	2301      	movs	r3, #1
 800b7cc:	9308      	str	r3, [sp, #32]
 800b7ce:	e7f5      	b.n	800b7bc <_dtoa_r+0x2fc>
 800b7d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7d2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b7d6:	e7b8      	b.n	800b74a <_dtoa_r+0x28a>
 800b7d8:	3101      	adds	r1, #1
 800b7da:	6041      	str	r1, [r0, #4]
 800b7dc:	0052      	lsls	r2, r2, #1
 800b7de:	e7b8      	b.n	800b752 <_dtoa_r+0x292>
 800b7e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b7e2:	9a01      	ldr	r2, [sp, #4]
 800b7e4:	601a      	str	r2, [r3, #0]
 800b7e6:	9b03      	ldr	r3, [sp, #12]
 800b7e8:	2b0e      	cmp	r3, #14
 800b7ea:	f200 809d 	bhi.w	800b928 <_dtoa_r+0x468>
 800b7ee:	2d00      	cmp	r5, #0
 800b7f0:	f000 809a 	beq.w	800b928 <_dtoa_r+0x468>
 800b7f4:	9b00      	ldr	r3, [sp, #0]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	dd32      	ble.n	800b860 <_dtoa_r+0x3a0>
 800b7fa:	4ab7      	ldr	r2, [pc, #732]	; (800bad8 <_dtoa_r+0x618>)
 800b7fc:	f003 030f 	and.w	r3, r3, #15
 800b800:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b804:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b808:	9b00      	ldr	r3, [sp, #0]
 800b80a:	05d8      	lsls	r0, r3, #23
 800b80c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b810:	d516      	bpl.n	800b840 <_dtoa_r+0x380>
 800b812:	4bb2      	ldr	r3, [pc, #712]	; (800badc <_dtoa_r+0x61c>)
 800b814:	ec51 0b19 	vmov	r0, r1, d9
 800b818:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b81c:	f7f5 f82e 	bl	800087c <__aeabi_ddiv>
 800b820:	f007 070f 	and.w	r7, r7, #15
 800b824:	4682      	mov	sl, r0
 800b826:	468b      	mov	fp, r1
 800b828:	2503      	movs	r5, #3
 800b82a:	4eac      	ldr	r6, [pc, #688]	; (800badc <_dtoa_r+0x61c>)
 800b82c:	b957      	cbnz	r7, 800b844 <_dtoa_r+0x384>
 800b82e:	4642      	mov	r2, r8
 800b830:	464b      	mov	r3, r9
 800b832:	4650      	mov	r0, sl
 800b834:	4659      	mov	r1, fp
 800b836:	f7f5 f821 	bl	800087c <__aeabi_ddiv>
 800b83a:	4682      	mov	sl, r0
 800b83c:	468b      	mov	fp, r1
 800b83e:	e028      	b.n	800b892 <_dtoa_r+0x3d2>
 800b840:	2502      	movs	r5, #2
 800b842:	e7f2      	b.n	800b82a <_dtoa_r+0x36a>
 800b844:	07f9      	lsls	r1, r7, #31
 800b846:	d508      	bpl.n	800b85a <_dtoa_r+0x39a>
 800b848:	4640      	mov	r0, r8
 800b84a:	4649      	mov	r1, r9
 800b84c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b850:	f7f4 feea 	bl	8000628 <__aeabi_dmul>
 800b854:	3501      	adds	r5, #1
 800b856:	4680      	mov	r8, r0
 800b858:	4689      	mov	r9, r1
 800b85a:	107f      	asrs	r7, r7, #1
 800b85c:	3608      	adds	r6, #8
 800b85e:	e7e5      	b.n	800b82c <_dtoa_r+0x36c>
 800b860:	f000 809b 	beq.w	800b99a <_dtoa_r+0x4da>
 800b864:	9b00      	ldr	r3, [sp, #0]
 800b866:	4f9d      	ldr	r7, [pc, #628]	; (800badc <_dtoa_r+0x61c>)
 800b868:	425e      	negs	r6, r3
 800b86a:	4b9b      	ldr	r3, [pc, #620]	; (800bad8 <_dtoa_r+0x618>)
 800b86c:	f006 020f 	and.w	r2, r6, #15
 800b870:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b874:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b878:	ec51 0b19 	vmov	r0, r1, d9
 800b87c:	f7f4 fed4 	bl	8000628 <__aeabi_dmul>
 800b880:	1136      	asrs	r6, r6, #4
 800b882:	4682      	mov	sl, r0
 800b884:	468b      	mov	fp, r1
 800b886:	2300      	movs	r3, #0
 800b888:	2502      	movs	r5, #2
 800b88a:	2e00      	cmp	r6, #0
 800b88c:	d17a      	bne.n	800b984 <_dtoa_r+0x4c4>
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d1d3      	bne.n	800b83a <_dtoa_r+0x37a>
 800b892:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b894:	2b00      	cmp	r3, #0
 800b896:	f000 8082 	beq.w	800b99e <_dtoa_r+0x4de>
 800b89a:	4b91      	ldr	r3, [pc, #580]	; (800bae0 <_dtoa_r+0x620>)
 800b89c:	2200      	movs	r2, #0
 800b89e:	4650      	mov	r0, sl
 800b8a0:	4659      	mov	r1, fp
 800b8a2:	f7f5 f933 	bl	8000b0c <__aeabi_dcmplt>
 800b8a6:	2800      	cmp	r0, #0
 800b8a8:	d079      	beq.n	800b99e <_dtoa_r+0x4de>
 800b8aa:	9b03      	ldr	r3, [sp, #12]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d076      	beq.n	800b99e <_dtoa_r+0x4de>
 800b8b0:	9b02      	ldr	r3, [sp, #8]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	dd36      	ble.n	800b924 <_dtoa_r+0x464>
 800b8b6:	9b00      	ldr	r3, [sp, #0]
 800b8b8:	4650      	mov	r0, sl
 800b8ba:	4659      	mov	r1, fp
 800b8bc:	1e5f      	subs	r7, r3, #1
 800b8be:	2200      	movs	r2, #0
 800b8c0:	4b88      	ldr	r3, [pc, #544]	; (800bae4 <_dtoa_r+0x624>)
 800b8c2:	f7f4 feb1 	bl	8000628 <__aeabi_dmul>
 800b8c6:	9e02      	ldr	r6, [sp, #8]
 800b8c8:	4682      	mov	sl, r0
 800b8ca:	468b      	mov	fp, r1
 800b8cc:	3501      	adds	r5, #1
 800b8ce:	4628      	mov	r0, r5
 800b8d0:	f7f4 fe40 	bl	8000554 <__aeabi_i2d>
 800b8d4:	4652      	mov	r2, sl
 800b8d6:	465b      	mov	r3, fp
 800b8d8:	f7f4 fea6 	bl	8000628 <__aeabi_dmul>
 800b8dc:	4b82      	ldr	r3, [pc, #520]	; (800bae8 <_dtoa_r+0x628>)
 800b8de:	2200      	movs	r2, #0
 800b8e0:	f7f4 fcec 	bl	80002bc <__adddf3>
 800b8e4:	46d0      	mov	r8, sl
 800b8e6:	46d9      	mov	r9, fp
 800b8e8:	4682      	mov	sl, r0
 800b8ea:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b8ee:	2e00      	cmp	r6, #0
 800b8f0:	d158      	bne.n	800b9a4 <_dtoa_r+0x4e4>
 800b8f2:	4b7e      	ldr	r3, [pc, #504]	; (800baec <_dtoa_r+0x62c>)
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	4640      	mov	r0, r8
 800b8f8:	4649      	mov	r1, r9
 800b8fa:	f7f4 fcdd 	bl	80002b8 <__aeabi_dsub>
 800b8fe:	4652      	mov	r2, sl
 800b900:	465b      	mov	r3, fp
 800b902:	4680      	mov	r8, r0
 800b904:	4689      	mov	r9, r1
 800b906:	f7f5 f91f 	bl	8000b48 <__aeabi_dcmpgt>
 800b90a:	2800      	cmp	r0, #0
 800b90c:	f040 8295 	bne.w	800be3a <_dtoa_r+0x97a>
 800b910:	4652      	mov	r2, sl
 800b912:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b916:	4640      	mov	r0, r8
 800b918:	4649      	mov	r1, r9
 800b91a:	f7f5 f8f7 	bl	8000b0c <__aeabi_dcmplt>
 800b91e:	2800      	cmp	r0, #0
 800b920:	f040 8289 	bne.w	800be36 <_dtoa_r+0x976>
 800b924:	ec5b ab19 	vmov	sl, fp, d9
 800b928:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	f2c0 8148 	blt.w	800bbc0 <_dtoa_r+0x700>
 800b930:	9a00      	ldr	r2, [sp, #0]
 800b932:	2a0e      	cmp	r2, #14
 800b934:	f300 8144 	bgt.w	800bbc0 <_dtoa_r+0x700>
 800b938:	4b67      	ldr	r3, [pc, #412]	; (800bad8 <_dtoa_r+0x618>)
 800b93a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b93e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b942:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b944:	2b00      	cmp	r3, #0
 800b946:	f280 80d5 	bge.w	800baf4 <_dtoa_r+0x634>
 800b94a:	9b03      	ldr	r3, [sp, #12]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	f300 80d1 	bgt.w	800baf4 <_dtoa_r+0x634>
 800b952:	f040 826f 	bne.w	800be34 <_dtoa_r+0x974>
 800b956:	4b65      	ldr	r3, [pc, #404]	; (800baec <_dtoa_r+0x62c>)
 800b958:	2200      	movs	r2, #0
 800b95a:	4640      	mov	r0, r8
 800b95c:	4649      	mov	r1, r9
 800b95e:	f7f4 fe63 	bl	8000628 <__aeabi_dmul>
 800b962:	4652      	mov	r2, sl
 800b964:	465b      	mov	r3, fp
 800b966:	f7f5 f8e5 	bl	8000b34 <__aeabi_dcmpge>
 800b96a:	9e03      	ldr	r6, [sp, #12]
 800b96c:	4637      	mov	r7, r6
 800b96e:	2800      	cmp	r0, #0
 800b970:	f040 8245 	bne.w	800bdfe <_dtoa_r+0x93e>
 800b974:	9d01      	ldr	r5, [sp, #4]
 800b976:	2331      	movs	r3, #49	; 0x31
 800b978:	f805 3b01 	strb.w	r3, [r5], #1
 800b97c:	9b00      	ldr	r3, [sp, #0]
 800b97e:	3301      	adds	r3, #1
 800b980:	9300      	str	r3, [sp, #0]
 800b982:	e240      	b.n	800be06 <_dtoa_r+0x946>
 800b984:	07f2      	lsls	r2, r6, #31
 800b986:	d505      	bpl.n	800b994 <_dtoa_r+0x4d4>
 800b988:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b98c:	f7f4 fe4c 	bl	8000628 <__aeabi_dmul>
 800b990:	3501      	adds	r5, #1
 800b992:	2301      	movs	r3, #1
 800b994:	1076      	asrs	r6, r6, #1
 800b996:	3708      	adds	r7, #8
 800b998:	e777      	b.n	800b88a <_dtoa_r+0x3ca>
 800b99a:	2502      	movs	r5, #2
 800b99c:	e779      	b.n	800b892 <_dtoa_r+0x3d2>
 800b99e:	9f00      	ldr	r7, [sp, #0]
 800b9a0:	9e03      	ldr	r6, [sp, #12]
 800b9a2:	e794      	b.n	800b8ce <_dtoa_r+0x40e>
 800b9a4:	9901      	ldr	r1, [sp, #4]
 800b9a6:	4b4c      	ldr	r3, [pc, #304]	; (800bad8 <_dtoa_r+0x618>)
 800b9a8:	4431      	add	r1, r6
 800b9aa:	910d      	str	r1, [sp, #52]	; 0x34
 800b9ac:	9908      	ldr	r1, [sp, #32]
 800b9ae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b9b2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b9b6:	2900      	cmp	r1, #0
 800b9b8:	d043      	beq.n	800ba42 <_dtoa_r+0x582>
 800b9ba:	494d      	ldr	r1, [pc, #308]	; (800baf0 <_dtoa_r+0x630>)
 800b9bc:	2000      	movs	r0, #0
 800b9be:	f7f4 ff5d 	bl	800087c <__aeabi_ddiv>
 800b9c2:	4652      	mov	r2, sl
 800b9c4:	465b      	mov	r3, fp
 800b9c6:	f7f4 fc77 	bl	80002b8 <__aeabi_dsub>
 800b9ca:	9d01      	ldr	r5, [sp, #4]
 800b9cc:	4682      	mov	sl, r0
 800b9ce:	468b      	mov	fp, r1
 800b9d0:	4649      	mov	r1, r9
 800b9d2:	4640      	mov	r0, r8
 800b9d4:	f7f5 f8d8 	bl	8000b88 <__aeabi_d2iz>
 800b9d8:	4606      	mov	r6, r0
 800b9da:	f7f4 fdbb 	bl	8000554 <__aeabi_i2d>
 800b9de:	4602      	mov	r2, r0
 800b9e0:	460b      	mov	r3, r1
 800b9e2:	4640      	mov	r0, r8
 800b9e4:	4649      	mov	r1, r9
 800b9e6:	f7f4 fc67 	bl	80002b8 <__aeabi_dsub>
 800b9ea:	3630      	adds	r6, #48	; 0x30
 800b9ec:	f805 6b01 	strb.w	r6, [r5], #1
 800b9f0:	4652      	mov	r2, sl
 800b9f2:	465b      	mov	r3, fp
 800b9f4:	4680      	mov	r8, r0
 800b9f6:	4689      	mov	r9, r1
 800b9f8:	f7f5 f888 	bl	8000b0c <__aeabi_dcmplt>
 800b9fc:	2800      	cmp	r0, #0
 800b9fe:	d163      	bne.n	800bac8 <_dtoa_r+0x608>
 800ba00:	4642      	mov	r2, r8
 800ba02:	464b      	mov	r3, r9
 800ba04:	4936      	ldr	r1, [pc, #216]	; (800bae0 <_dtoa_r+0x620>)
 800ba06:	2000      	movs	r0, #0
 800ba08:	f7f4 fc56 	bl	80002b8 <__aeabi_dsub>
 800ba0c:	4652      	mov	r2, sl
 800ba0e:	465b      	mov	r3, fp
 800ba10:	f7f5 f87c 	bl	8000b0c <__aeabi_dcmplt>
 800ba14:	2800      	cmp	r0, #0
 800ba16:	f040 80b5 	bne.w	800bb84 <_dtoa_r+0x6c4>
 800ba1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ba1c:	429d      	cmp	r5, r3
 800ba1e:	d081      	beq.n	800b924 <_dtoa_r+0x464>
 800ba20:	4b30      	ldr	r3, [pc, #192]	; (800bae4 <_dtoa_r+0x624>)
 800ba22:	2200      	movs	r2, #0
 800ba24:	4650      	mov	r0, sl
 800ba26:	4659      	mov	r1, fp
 800ba28:	f7f4 fdfe 	bl	8000628 <__aeabi_dmul>
 800ba2c:	4b2d      	ldr	r3, [pc, #180]	; (800bae4 <_dtoa_r+0x624>)
 800ba2e:	4682      	mov	sl, r0
 800ba30:	468b      	mov	fp, r1
 800ba32:	4640      	mov	r0, r8
 800ba34:	4649      	mov	r1, r9
 800ba36:	2200      	movs	r2, #0
 800ba38:	f7f4 fdf6 	bl	8000628 <__aeabi_dmul>
 800ba3c:	4680      	mov	r8, r0
 800ba3e:	4689      	mov	r9, r1
 800ba40:	e7c6      	b.n	800b9d0 <_dtoa_r+0x510>
 800ba42:	4650      	mov	r0, sl
 800ba44:	4659      	mov	r1, fp
 800ba46:	f7f4 fdef 	bl	8000628 <__aeabi_dmul>
 800ba4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ba4c:	9d01      	ldr	r5, [sp, #4]
 800ba4e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ba50:	4682      	mov	sl, r0
 800ba52:	468b      	mov	fp, r1
 800ba54:	4649      	mov	r1, r9
 800ba56:	4640      	mov	r0, r8
 800ba58:	f7f5 f896 	bl	8000b88 <__aeabi_d2iz>
 800ba5c:	4606      	mov	r6, r0
 800ba5e:	f7f4 fd79 	bl	8000554 <__aeabi_i2d>
 800ba62:	3630      	adds	r6, #48	; 0x30
 800ba64:	4602      	mov	r2, r0
 800ba66:	460b      	mov	r3, r1
 800ba68:	4640      	mov	r0, r8
 800ba6a:	4649      	mov	r1, r9
 800ba6c:	f7f4 fc24 	bl	80002b8 <__aeabi_dsub>
 800ba70:	f805 6b01 	strb.w	r6, [r5], #1
 800ba74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ba76:	429d      	cmp	r5, r3
 800ba78:	4680      	mov	r8, r0
 800ba7a:	4689      	mov	r9, r1
 800ba7c:	f04f 0200 	mov.w	r2, #0
 800ba80:	d124      	bne.n	800bacc <_dtoa_r+0x60c>
 800ba82:	4b1b      	ldr	r3, [pc, #108]	; (800baf0 <_dtoa_r+0x630>)
 800ba84:	4650      	mov	r0, sl
 800ba86:	4659      	mov	r1, fp
 800ba88:	f7f4 fc18 	bl	80002bc <__adddf3>
 800ba8c:	4602      	mov	r2, r0
 800ba8e:	460b      	mov	r3, r1
 800ba90:	4640      	mov	r0, r8
 800ba92:	4649      	mov	r1, r9
 800ba94:	f7f5 f858 	bl	8000b48 <__aeabi_dcmpgt>
 800ba98:	2800      	cmp	r0, #0
 800ba9a:	d173      	bne.n	800bb84 <_dtoa_r+0x6c4>
 800ba9c:	4652      	mov	r2, sl
 800ba9e:	465b      	mov	r3, fp
 800baa0:	4913      	ldr	r1, [pc, #76]	; (800baf0 <_dtoa_r+0x630>)
 800baa2:	2000      	movs	r0, #0
 800baa4:	f7f4 fc08 	bl	80002b8 <__aeabi_dsub>
 800baa8:	4602      	mov	r2, r0
 800baaa:	460b      	mov	r3, r1
 800baac:	4640      	mov	r0, r8
 800baae:	4649      	mov	r1, r9
 800bab0:	f7f5 f82c 	bl	8000b0c <__aeabi_dcmplt>
 800bab4:	2800      	cmp	r0, #0
 800bab6:	f43f af35 	beq.w	800b924 <_dtoa_r+0x464>
 800baba:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800babc:	1e6b      	subs	r3, r5, #1
 800babe:	930f      	str	r3, [sp, #60]	; 0x3c
 800bac0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bac4:	2b30      	cmp	r3, #48	; 0x30
 800bac6:	d0f8      	beq.n	800baba <_dtoa_r+0x5fa>
 800bac8:	9700      	str	r7, [sp, #0]
 800baca:	e049      	b.n	800bb60 <_dtoa_r+0x6a0>
 800bacc:	4b05      	ldr	r3, [pc, #20]	; (800bae4 <_dtoa_r+0x624>)
 800bace:	f7f4 fdab 	bl	8000628 <__aeabi_dmul>
 800bad2:	4680      	mov	r8, r0
 800bad4:	4689      	mov	r9, r1
 800bad6:	e7bd      	b.n	800ba54 <_dtoa_r+0x594>
 800bad8:	0800e8f8 	.word	0x0800e8f8
 800badc:	0800e8d0 	.word	0x0800e8d0
 800bae0:	3ff00000 	.word	0x3ff00000
 800bae4:	40240000 	.word	0x40240000
 800bae8:	401c0000 	.word	0x401c0000
 800baec:	40140000 	.word	0x40140000
 800baf0:	3fe00000 	.word	0x3fe00000
 800baf4:	9d01      	ldr	r5, [sp, #4]
 800baf6:	4656      	mov	r6, sl
 800baf8:	465f      	mov	r7, fp
 800bafa:	4642      	mov	r2, r8
 800bafc:	464b      	mov	r3, r9
 800bafe:	4630      	mov	r0, r6
 800bb00:	4639      	mov	r1, r7
 800bb02:	f7f4 febb 	bl	800087c <__aeabi_ddiv>
 800bb06:	f7f5 f83f 	bl	8000b88 <__aeabi_d2iz>
 800bb0a:	4682      	mov	sl, r0
 800bb0c:	f7f4 fd22 	bl	8000554 <__aeabi_i2d>
 800bb10:	4642      	mov	r2, r8
 800bb12:	464b      	mov	r3, r9
 800bb14:	f7f4 fd88 	bl	8000628 <__aeabi_dmul>
 800bb18:	4602      	mov	r2, r0
 800bb1a:	460b      	mov	r3, r1
 800bb1c:	4630      	mov	r0, r6
 800bb1e:	4639      	mov	r1, r7
 800bb20:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800bb24:	f7f4 fbc8 	bl	80002b8 <__aeabi_dsub>
 800bb28:	f805 6b01 	strb.w	r6, [r5], #1
 800bb2c:	9e01      	ldr	r6, [sp, #4]
 800bb2e:	9f03      	ldr	r7, [sp, #12]
 800bb30:	1bae      	subs	r6, r5, r6
 800bb32:	42b7      	cmp	r7, r6
 800bb34:	4602      	mov	r2, r0
 800bb36:	460b      	mov	r3, r1
 800bb38:	d135      	bne.n	800bba6 <_dtoa_r+0x6e6>
 800bb3a:	f7f4 fbbf 	bl	80002bc <__adddf3>
 800bb3e:	4642      	mov	r2, r8
 800bb40:	464b      	mov	r3, r9
 800bb42:	4606      	mov	r6, r0
 800bb44:	460f      	mov	r7, r1
 800bb46:	f7f4 ffff 	bl	8000b48 <__aeabi_dcmpgt>
 800bb4a:	b9d0      	cbnz	r0, 800bb82 <_dtoa_r+0x6c2>
 800bb4c:	4642      	mov	r2, r8
 800bb4e:	464b      	mov	r3, r9
 800bb50:	4630      	mov	r0, r6
 800bb52:	4639      	mov	r1, r7
 800bb54:	f7f4 ffd0 	bl	8000af8 <__aeabi_dcmpeq>
 800bb58:	b110      	cbz	r0, 800bb60 <_dtoa_r+0x6a0>
 800bb5a:	f01a 0f01 	tst.w	sl, #1
 800bb5e:	d110      	bne.n	800bb82 <_dtoa_r+0x6c2>
 800bb60:	4620      	mov	r0, r4
 800bb62:	ee18 1a10 	vmov	r1, s16
 800bb66:	f000 fee3 	bl	800c930 <_Bfree>
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	9800      	ldr	r0, [sp, #0]
 800bb6e:	702b      	strb	r3, [r5, #0]
 800bb70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bb72:	3001      	adds	r0, #1
 800bb74:	6018      	str	r0, [r3, #0]
 800bb76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	f43f acf1 	beq.w	800b560 <_dtoa_r+0xa0>
 800bb7e:	601d      	str	r5, [r3, #0]
 800bb80:	e4ee      	b.n	800b560 <_dtoa_r+0xa0>
 800bb82:	9f00      	ldr	r7, [sp, #0]
 800bb84:	462b      	mov	r3, r5
 800bb86:	461d      	mov	r5, r3
 800bb88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bb8c:	2a39      	cmp	r2, #57	; 0x39
 800bb8e:	d106      	bne.n	800bb9e <_dtoa_r+0x6de>
 800bb90:	9a01      	ldr	r2, [sp, #4]
 800bb92:	429a      	cmp	r2, r3
 800bb94:	d1f7      	bne.n	800bb86 <_dtoa_r+0x6c6>
 800bb96:	9901      	ldr	r1, [sp, #4]
 800bb98:	2230      	movs	r2, #48	; 0x30
 800bb9a:	3701      	adds	r7, #1
 800bb9c:	700a      	strb	r2, [r1, #0]
 800bb9e:	781a      	ldrb	r2, [r3, #0]
 800bba0:	3201      	adds	r2, #1
 800bba2:	701a      	strb	r2, [r3, #0]
 800bba4:	e790      	b.n	800bac8 <_dtoa_r+0x608>
 800bba6:	4ba6      	ldr	r3, [pc, #664]	; (800be40 <_dtoa_r+0x980>)
 800bba8:	2200      	movs	r2, #0
 800bbaa:	f7f4 fd3d 	bl	8000628 <__aeabi_dmul>
 800bbae:	2200      	movs	r2, #0
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	4606      	mov	r6, r0
 800bbb4:	460f      	mov	r7, r1
 800bbb6:	f7f4 ff9f 	bl	8000af8 <__aeabi_dcmpeq>
 800bbba:	2800      	cmp	r0, #0
 800bbbc:	d09d      	beq.n	800bafa <_dtoa_r+0x63a>
 800bbbe:	e7cf      	b.n	800bb60 <_dtoa_r+0x6a0>
 800bbc0:	9a08      	ldr	r2, [sp, #32]
 800bbc2:	2a00      	cmp	r2, #0
 800bbc4:	f000 80d7 	beq.w	800bd76 <_dtoa_r+0x8b6>
 800bbc8:	9a06      	ldr	r2, [sp, #24]
 800bbca:	2a01      	cmp	r2, #1
 800bbcc:	f300 80ba 	bgt.w	800bd44 <_dtoa_r+0x884>
 800bbd0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bbd2:	2a00      	cmp	r2, #0
 800bbd4:	f000 80b2 	beq.w	800bd3c <_dtoa_r+0x87c>
 800bbd8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bbdc:	9e07      	ldr	r6, [sp, #28]
 800bbde:	9d04      	ldr	r5, [sp, #16]
 800bbe0:	9a04      	ldr	r2, [sp, #16]
 800bbe2:	441a      	add	r2, r3
 800bbe4:	9204      	str	r2, [sp, #16]
 800bbe6:	9a05      	ldr	r2, [sp, #20]
 800bbe8:	2101      	movs	r1, #1
 800bbea:	441a      	add	r2, r3
 800bbec:	4620      	mov	r0, r4
 800bbee:	9205      	str	r2, [sp, #20]
 800bbf0:	f000 ffa0 	bl	800cb34 <__i2b>
 800bbf4:	4607      	mov	r7, r0
 800bbf6:	2d00      	cmp	r5, #0
 800bbf8:	dd0c      	ble.n	800bc14 <_dtoa_r+0x754>
 800bbfa:	9b05      	ldr	r3, [sp, #20]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	dd09      	ble.n	800bc14 <_dtoa_r+0x754>
 800bc00:	42ab      	cmp	r3, r5
 800bc02:	9a04      	ldr	r2, [sp, #16]
 800bc04:	bfa8      	it	ge
 800bc06:	462b      	movge	r3, r5
 800bc08:	1ad2      	subs	r2, r2, r3
 800bc0a:	9204      	str	r2, [sp, #16]
 800bc0c:	9a05      	ldr	r2, [sp, #20]
 800bc0e:	1aed      	subs	r5, r5, r3
 800bc10:	1ad3      	subs	r3, r2, r3
 800bc12:	9305      	str	r3, [sp, #20]
 800bc14:	9b07      	ldr	r3, [sp, #28]
 800bc16:	b31b      	cbz	r3, 800bc60 <_dtoa_r+0x7a0>
 800bc18:	9b08      	ldr	r3, [sp, #32]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	f000 80af 	beq.w	800bd7e <_dtoa_r+0x8be>
 800bc20:	2e00      	cmp	r6, #0
 800bc22:	dd13      	ble.n	800bc4c <_dtoa_r+0x78c>
 800bc24:	4639      	mov	r1, r7
 800bc26:	4632      	mov	r2, r6
 800bc28:	4620      	mov	r0, r4
 800bc2a:	f001 f843 	bl	800ccb4 <__pow5mult>
 800bc2e:	ee18 2a10 	vmov	r2, s16
 800bc32:	4601      	mov	r1, r0
 800bc34:	4607      	mov	r7, r0
 800bc36:	4620      	mov	r0, r4
 800bc38:	f000 ff92 	bl	800cb60 <__multiply>
 800bc3c:	ee18 1a10 	vmov	r1, s16
 800bc40:	4680      	mov	r8, r0
 800bc42:	4620      	mov	r0, r4
 800bc44:	f000 fe74 	bl	800c930 <_Bfree>
 800bc48:	ee08 8a10 	vmov	s16, r8
 800bc4c:	9b07      	ldr	r3, [sp, #28]
 800bc4e:	1b9a      	subs	r2, r3, r6
 800bc50:	d006      	beq.n	800bc60 <_dtoa_r+0x7a0>
 800bc52:	ee18 1a10 	vmov	r1, s16
 800bc56:	4620      	mov	r0, r4
 800bc58:	f001 f82c 	bl	800ccb4 <__pow5mult>
 800bc5c:	ee08 0a10 	vmov	s16, r0
 800bc60:	2101      	movs	r1, #1
 800bc62:	4620      	mov	r0, r4
 800bc64:	f000 ff66 	bl	800cb34 <__i2b>
 800bc68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	4606      	mov	r6, r0
 800bc6e:	f340 8088 	ble.w	800bd82 <_dtoa_r+0x8c2>
 800bc72:	461a      	mov	r2, r3
 800bc74:	4601      	mov	r1, r0
 800bc76:	4620      	mov	r0, r4
 800bc78:	f001 f81c 	bl	800ccb4 <__pow5mult>
 800bc7c:	9b06      	ldr	r3, [sp, #24]
 800bc7e:	2b01      	cmp	r3, #1
 800bc80:	4606      	mov	r6, r0
 800bc82:	f340 8081 	ble.w	800bd88 <_dtoa_r+0x8c8>
 800bc86:	f04f 0800 	mov.w	r8, #0
 800bc8a:	6933      	ldr	r3, [r6, #16]
 800bc8c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bc90:	6918      	ldr	r0, [r3, #16]
 800bc92:	f000 feff 	bl	800ca94 <__hi0bits>
 800bc96:	f1c0 0020 	rsb	r0, r0, #32
 800bc9a:	9b05      	ldr	r3, [sp, #20]
 800bc9c:	4418      	add	r0, r3
 800bc9e:	f010 001f 	ands.w	r0, r0, #31
 800bca2:	f000 8092 	beq.w	800bdca <_dtoa_r+0x90a>
 800bca6:	f1c0 0320 	rsb	r3, r0, #32
 800bcaa:	2b04      	cmp	r3, #4
 800bcac:	f340 808a 	ble.w	800bdc4 <_dtoa_r+0x904>
 800bcb0:	f1c0 001c 	rsb	r0, r0, #28
 800bcb4:	9b04      	ldr	r3, [sp, #16]
 800bcb6:	4403      	add	r3, r0
 800bcb8:	9304      	str	r3, [sp, #16]
 800bcba:	9b05      	ldr	r3, [sp, #20]
 800bcbc:	4403      	add	r3, r0
 800bcbe:	4405      	add	r5, r0
 800bcc0:	9305      	str	r3, [sp, #20]
 800bcc2:	9b04      	ldr	r3, [sp, #16]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	dd07      	ble.n	800bcd8 <_dtoa_r+0x818>
 800bcc8:	ee18 1a10 	vmov	r1, s16
 800bccc:	461a      	mov	r2, r3
 800bcce:	4620      	mov	r0, r4
 800bcd0:	f001 f84a 	bl	800cd68 <__lshift>
 800bcd4:	ee08 0a10 	vmov	s16, r0
 800bcd8:	9b05      	ldr	r3, [sp, #20]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	dd05      	ble.n	800bcea <_dtoa_r+0x82a>
 800bcde:	4631      	mov	r1, r6
 800bce0:	461a      	mov	r2, r3
 800bce2:	4620      	mov	r0, r4
 800bce4:	f001 f840 	bl	800cd68 <__lshift>
 800bce8:	4606      	mov	r6, r0
 800bcea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d06e      	beq.n	800bdce <_dtoa_r+0x90e>
 800bcf0:	ee18 0a10 	vmov	r0, s16
 800bcf4:	4631      	mov	r1, r6
 800bcf6:	f001 f8a7 	bl	800ce48 <__mcmp>
 800bcfa:	2800      	cmp	r0, #0
 800bcfc:	da67      	bge.n	800bdce <_dtoa_r+0x90e>
 800bcfe:	9b00      	ldr	r3, [sp, #0]
 800bd00:	3b01      	subs	r3, #1
 800bd02:	ee18 1a10 	vmov	r1, s16
 800bd06:	9300      	str	r3, [sp, #0]
 800bd08:	220a      	movs	r2, #10
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	4620      	mov	r0, r4
 800bd0e:	f000 fe31 	bl	800c974 <__multadd>
 800bd12:	9b08      	ldr	r3, [sp, #32]
 800bd14:	ee08 0a10 	vmov	s16, r0
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	f000 81b1 	beq.w	800c080 <_dtoa_r+0xbc0>
 800bd1e:	2300      	movs	r3, #0
 800bd20:	4639      	mov	r1, r7
 800bd22:	220a      	movs	r2, #10
 800bd24:	4620      	mov	r0, r4
 800bd26:	f000 fe25 	bl	800c974 <__multadd>
 800bd2a:	9b02      	ldr	r3, [sp, #8]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	4607      	mov	r7, r0
 800bd30:	f300 808e 	bgt.w	800be50 <_dtoa_r+0x990>
 800bd34:	9b06      	ldr	r3, [sp, #24]
 800bd36:	2b02      	cmp	r3, #2
 800bd38:	dc51      	bgt.n	800bdde <_dtoa_r+0x91e>
 800bd3a:	e089      	b.n	800be50 <_dtoa_r+0x990>
 800bd3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bd3e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bd42:	e74b      	b.n	800bbdc <_dtoa_r+0x71c>
 800bd44:	9b03      	ldr	r3, [sp, #12]
 800bd46:	1e5e      	subs	r6, r3, #1
 800bd48:	9b07      	ldr	r3, [sp, #28]
 800bd4a:	42b3      	cmp	r3, r6
 800bd4c:	bfbf      	itttt	lt
 800bd4e:	9b07      	ldrlt	r3, [sp, #28]
 800bd50:	9607      	strlt	r6, [sp, #28]
 800bd52:	1af2      	sublt	r2, r6, r3
 800bd54:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800bd56:	bfb6      	itet	lt
 800bd58:	189b      	addlt	r3, r3, r2
 800bd5a:	1b9e      	subge	r6, r3, r6
 800bd5c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800bd5e:	9b03      	ldr	r3, [sp, #12]
 800bd60:	bfb8      	it	lt
 800bd62:	2600      	movlt	r6, #0
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	bfb7      	itett	lt
 800bd68:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800bd6c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800bd70:	1a9d      	sublt	r5, r3, r2
 800bd72:	2300      	movlt	r3, #0
 800bd74:	e734      	b.n	800bbe0 <_dtoa_r+0x720>
 800bd76:	9e07      	ldr	r6, [sp, #28]
 800bd78:	9d04      	ldr	r5, [sp, #16]
 800bd7a:	9f08      	ldr	r7, [sp, #32]
 800bd7c:	e73b      	b.n	800bbf6 <_dtoa_r+0x736>
 800bd7e:	9a07      	ldr	r2, [sp, #28]
 800bd80:	e767      	b.n	800bc52 <_dtoa_r+0x792>
 800bd82:	9b06      	ldr	r3, [sp, #24]
 800bd84:	2b01      	cmp	r3, #1
 800bd86:	dc18      	bgt.n	800bdba <_dtoa_r+0x8fa>
 800bd88:	f1ba 0f00 	cmp.w	sl, #0
 800bd8c:	d115      	bne.n	800bdba <_dtoa_r+0x8fa>
 800bd8e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bd92:	b993      	cbnz	r3, 800bdba <_dtoa_r+0x8fa>
 800bd94:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bd98:	0d1b      	lsrs	r3, r3, #20
 800bd9a:	051b      	lsls	r3, r3, #20
 800bd9c:	b183      	cbz	r3, 800bdc0 <_dtoa_r+0x900>
 800bd9e:	9b04      	ldr	r3, [sp, #16]
 800bda0:	3301      	adds	r3, #1
 800bda2:	9304      	str	r3, [sp, #16]
 800bda4:	9b05      	ldr	r3, [sp, #20]
 800bda6:	3301      	adds	r3, #1
 800bda8:	9305      	str	r3, [sp, #20]
 800bdaa:	f04f 0801 	mov.w	r8, #1
 800bdae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	f47f af6a 	bne.w	800bc8a <_dtoa_r+0x7ca>
 800bdb6:	2001      	movs	r0, #1
 800bdb8:	e76f      	b.n	800bc9a <_dtoa_r+0x7da>
 800bdba:	f04f 0800 	mov.w	r8, #0
 800bdbe:	e7f6      	b.n	800bdae <_dtoa_r+0x8ee>
 800bdc0:	4698      	mov	r8, r3
 800bdc2:	e7f4      	b.n	800bdae <_dtoa_r+0x8ee>
 800bdc4:	f43f af7d 	beq.w	800bcc2 <_dtoa_r+0x802>
 800bdc8:	4618      	mov	r0, r3
 800bdca:	301c      	adds	r0, #28
 800bdcc:	e772      	b.n	800bcb4 <_dtoa_r+0x7f4>
 800bdce:	9b03      	ldr	r3, [sp, #12]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	dc37      	bgt.n	800be44 <_dtoa_r+0x984>
 800bdd4:	9b06      	ldr	r3, [sp, #24]
 800bdd6:	2b02      	cmp	r3, #2
 800bdd8:	dd34      	ble.n	800be44 <_dtoa_r+0x984>
 800bdda:	9b03      	ldr	r3, [sp, #12]
 800bddc:	9302      	str	r3, [sp, #8]
 800bdde:	9b02      	ldr	r3, [sp, #8]
 800bde0:	b96b      	cbnz	r3, 800bdfe <_dtoa_r+0x93e>
 800bde2:	4631      	mov	r1, r6
 800bde4:	2205      	movs	r2, #5
 800bde6:	4620      	mov	r0, r4
 800bde8:	f000 fdc4 	bl	800c974 <__multadd>
 800bdec:	4601      	mov	r1, r0
 800bdee:	4606      	mov	r6, r0
 800bdf0:	ee18 0a10 	vmov	r0, s16
 800bdf4:	f001 f828 	bl	800ce48 <__mcmp>
 800bdf8:	2800      	cmp	r0, #0
 800bdfa:	f73f adbb 	bgt.w	800b974 <_dtoa_r+0x4b4>
 800bdfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be00:	9d01      	ldr	r5, [sp, #4]
 800be02:	43db      	mvns	r3, r3
 800be04:	9300      	str	r3, [sp, #0]
 800be06:	f04f 0800 	mov.w	r8, #0
 800be0a:	4631      	mov	r1, r6
 800be0c:	4620      	mov	r0, r4
 800be0e:	f000 fd8f 	bl	800c930 <_Bfree>
 800be12:	2f00      	cmp	r7, #0
 800be14:	f43f aea4 	beq.w	800bb60 <_dtoa_r+0x6a0>
 800be18:	f1b8 0f00 	cmp.w	r8, #0
 800be1c:	d005      	beq.n	800be2a <_dtoa_r+0x96a>
 800be1e:	45b8      	cmp	r8, r7
 800be20:	d003      	beq.n	800be2a <_dtoa_r+0x96a>
 800be22:	4641      	mov	r1, r8
 800be24:	4620      	mov	r0, r4
 800be26:	f000 fd83 	bl	800c930 <_Bfree>
 800be2a:	4639      	mov	r1, r7
 800be2c:	4620      	mov	r0, r4
 800be2e:	f000 fd7f 	bl	800c930 <_Bfree>
 800be32:	e695      	b.n	800bb60 <_dtoa_r+0x6a0>
 800be34:	2600      	movs	r6, #0
 800be36:	4637      	mov	r7, r6
 800be38:	e7e1      	b.n	800bdfe <_dtoa_r+0x93e>
 800be3a:	9700      	str	r7, [sp, #0]
 800be3c:	4637      	mov	r7, r6
 800be3e:	e599      	b.n	800b974 <_dtoa_r+0x4b4>
 800be40:	40240000 	.word	0x40240000
 800be44:	9b08      	ldr	r3, [sp, #32]
 800be46:	2b00      	cmp	r3, #0
 800be48:	f000 80ca 	beq.w	800bfe0 <_dtoa_r+0xb20>
 800be4c:	9b03      	ldr	r3, [sp, #12]
 800be4e:	9302      	str	r3, [sp, #8]
 800be50:	2d00      	cmp	r5, #0
 800be52:	dd05      	ble.n	800be60 <_dtoa_r+0x9a0>
 800be54:	4639      	mov	r1, r7
 800be56:	462a      	mov	r2, r5
 800be58:	4620      	mov	r0, r4
 800be5a:	f000 ff85 	bl	800cd68 <__lshift>
 800be5e:	4607      	mov	r7, r0
 800be60:	f1b8 0f00 	cmp.w	r8, #0
 800be64:	d05b      	beq.n	800bf1e <_dtoa_r+0xa5e>
 800be66:	6879      	ldr	r1, [r7, #4]
 800be68:	4620      	mov	r0, r4
 800be6a:	f000 fd21 	bl	800c8b0 <_Balloc>
 800be6e:	4605      	mov	r5, r0
 800be70:	b928      	cbnz	r0, 800be7e <_dtoa_r+0x9be>
 800be72:	4b87      	ldr	r3, [pc, #540]	; (800c090 <_dtoa_r+0xbd0>)
 800be74:	4602      	mov	r2, r0
 800be76:	f240 21ea 	movw	r1, #746	; 0x2ea
 800be7a:	f7ff bb3b 	b.w	800b4f4 <_dtoa_r+0x34>
 800be7e:	693a      	ldr	r2, [r7, #16]
 800be80:	3202      	adds	r2, #2
 800be82:	0092      	lsls	r2, r2, #2
 800be84:	f107 010c 	add.w	r1, r7, #12
 800be88:	300c      	adds	r0, #12
 800be8a:	f7fd fa2b 	bl	80092e4 <memcpy>
 800be8e:	2201      	movs	r2, #1
 800be90:	4629      	mov	r1, r5
 800be92:	4620      	mov	r0, r4
 800be94:	f000 ff68 	bl	800cd68 <__lshift>
 800be98:	9b01      	ldr	r3, [sp, #4]
 800be9a:	f103 0901 	add.w	r9, r3, #1
 800be9e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800bea2:	4413      	add	r3, r2
 800bea4:	9305      	str	r3, [sp, #20]
 800bea6:	f00a 0301 	and.w	r3, sl, #1
 800beaa:	46b8      	mov	r8, r7
 800beac:	9304      	str	r3, [sp, #16]
 800beae:	4607      	mov	r7, r0
 800beb0:	4631      	mov	r1, r6
 800beb2:	ee18 0a10 	vmov	r0, s16
 800beb6:	f7ff fa75 	bl	800b3a4 <quorem>
 800beba:	4641      	mov	r1, r8
 800bebc:	9002      	str	r0, [sp, #8]
 800bebe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bec2:	ee18 0a10 	vmov	r0, s16
 800bec6:	f000 ffbf 	bl	800ce48 <__mcmp>
 800beca:	463a      	mov	r2, r7
 800becc:	9003      	str	r0, [sp, #12]
 800bece:	4631      	mov	r1, r6
 800bed0:	4620      	mov	r0, r4
 800bed2:	f000 ffd5 	bl	800ce80 <__mdiff>
 800bed6:	68c2      	ldr	r2, [r0, #12]
 800bed8:	f109 3bff 	add.w	fp, r9, #4294967295
 800bedc:	4605      	mov	r5, r0
 800bede:	bb02      	cbnz	r2, 800bf22 <_dtoa_r+0xa62>
 800bee0:	4601      	mov	r1, r0
 800bee2:	ee18 0a10 	vmov	r0, s16
 800bee6:	f000 ffaf 	bl	800ce48 <__mcmp>
 800beea:	4602      	mov	r2, r0
 800beec:	4629      	mov	r1, r5
 800beee:	4620      	mov	r0, r4
 800bef0:	9207      	str	r2, [sp, #28]
 800bef2:	f000 fd1d 	bl	800c930 <_Bfree>
 800bef6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800befa:	ea43 0102 	orr.w	r1, r3, r2
 800befe:	9b04      	ldr	r3, [sp, #16]
 800bf00:	430b      	orrs	r3, r1
 800bf02:	464d      	mov	r5, r9
 800bf04:	d10f      	bne.n	800bf26 <_dtoa_r+0xa66>
 800bf06:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bf0a:	d02a      	beq.n	800bf62 <_dtoa_r+0xaa2>
 800bf0c:	9b03      	ldr	r3, [sp, #12]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	dd02      	ble.n	800bf18 <_dtoa_r+0xa58>
 800bf12:	9b02      	ldr	r3, [sp, #8]
 800bf14:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800bf18:	f88b a000 	strb.w	sl, [fp]
 800bf1c:	e775      	b.n	800be0a <_dtoa_r+0x94a>
 800bf1e:	4638      	mov	r0, r7
 800bf20:	e7ba      	b.n	800be98 <_dtoa_r+0x9d8>
 800bf22:	2201      	movs	r2, #1
 800bf24:	e7e2      	b.n	800beec <_dtoa_r+0xa2c>
 800bf26:	9b03      	ldr	r3, [sp, #12]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	db04      	blt.n	800bf36 <_dtoa_r+0xa76>
 800bf2c:	9906      	ldr	r1, [sp, #24]
 800bf2e:	430b      	orrs	r3, r1
 800bf30:	9904      	ldr	r1, [sp, #16]
 800bf32:	430b      	orrs	r3, r1
 800bf34:	d122      	bne.n	800bf7c <_dtoa_r+0xabc>
 800bf36:	2a00      	cmp	r2, #0
 800bf38:	ddee      	ble.n	800bf18 <_dtoa_r+0xa58>
 800bf3a:	ee18 1a10 	vmov	r1, s16
 800bf3e:	2201      	movs	r2, #1
 800bf40:	4620      	mov	r0, r4
 800bf42:	f000 ff11 	bl	800cd68 <__lshift>
 800bf46:	4631      	mov	r1, r6
 800bf48:	ee08 0a10 	vmov	s16, r0
 800bf4c:	f000 ff7c 	bl	800ce48 <__mcmp>
 800bf50:	2800      	cmp	r0, #0
 800bf52:	dc03      	bgt.n	800bf5c <_dtoa_r+0xa9c>
 800bf54:	d1e0      	bne.n	800bf18 <_dtoa_r+0xa58>
 800bf56:	f01a 0f01 	tst.w	sl, #1
 800bf5a:	d0dd      	beq.n	800bf18 <_dtoa_r+0xa58>
 800bf5c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bf60:	d1d7      	bne.n	800bf12 <_dtoa_r+0xa52>
 800bf62:	2339      	movs	r3, #57	; 0x39
 800bf64:	f88b 3000 	strb.w	r3, [fp]
 800bf68:	462b      	mov	r3, r5
 800bf6a:	461d      	mov	r5, r3
 800bf6c:	3b01      	subs	r3, #1
 800bf6e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bf72:	2a39      	cmp	r2, #57	; 0x39
 800bf74:	d071      	beq.n	800c05a <_dtoa_r+0xb9a>
 800bf76:	3201      	adds	r2, #1
 800bf78:	701a      	strb	r2, [r3, #0]
 800bf7a:	e746      	b.n	800be0a <_dtoa_r+0x94a>
 800bf7c:	2a00      	cmp	r2, #0
 800bf7e:	dd07      	ble.n	800bf90 <_dtoa_r+0xad0>
 800bf80:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bf84:	d0ed      	beq.n	800bf62 <_dtoa_r+0xaa2>
 800bf86:	f10a 0301 	add.w	r3, sl, #1
 800bf8a:	f88b 3000 	strb.w	r3, [fp]
 800bf8e:	e73c      	b.n	800be0a <_dtoa_r+0x94a>
 800bf90:	9b05      	ldr	r3, [sp, #20]
 800bf92:	f809 ac01 	strb.w	sl, [r9, #-1]
 800bf96:	4599      	cmp	r9, r3
 800bf98:	d047      	beq.n	800c02a <_dtoa_r+0xb6a>
 800bf9a:	ee18 1a10 	vmov	r1, s16
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	220a      	movs	r2, #10
 800bfa2:	4620      	mov	r0, r4
 800bfa4:	f000 fce6 	bl	800c974 <__multadd>
 800bfa8:	45b8      	cmp	r8, r7
 800bfaa:	ee08 0a10 	vmov	s16, r0
 800bfae:	f04f 0300 	mov.w	r3, #0
 800bfb2:	f04f 020a 	mov.w	r2, #10
 800bfb6:	4641      	mov	r1, r8
 800bfb8:	4620      	mov	r0, r4
 800bfba:	d106      	bne.n	800bfca <_dtoa_r+0xb0a>
 800bfbc:	f000 fcda 	bl	800c974 <__multadd>
 800bfc0:	4680      	mov	r8, r0
 800bfc2:	4607      	mov	r7, r0
 800bfc4:	f109 0901 	add.w	r9, r9, #1
 800bfc8:	e772      	b.n	800beb0 <_dtoa_r+0x9f0>
 800bfca:	f000 fcd3 	bl	800c974 <__multadd>
 800bfce:	4639      	mov	r1, r7
 800bfd0:	4680      	mov	r8, r0
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	220a      	movs	r2, #10
 800bfd6:	4620      	mov	r0, r4
 800bfd8:	f000 fccc 	bl	800c974 <__multadd>
 800bfdc:	4607      	mov	r7, r0
 800bfde:	e7f1      	b.n	800bfc4 <_dtoa_r+0xb04>
 800bfe0:	9b03      	ldr	r3, [sp, #12]
 800bfe2:	9302      	str	r3, [sp, #8]
 800bfe4:	9d01      	ldr	r5, [sp, #4]
 800bfe6:	ee18 0a10 	vmov	r0, s16
 800bfea:	4631      	mov	r1, r6
 800bfec:	f7ff f9da 	bl	800b3a4 <quorem>
 800bff0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bff4:	9b01      	ldr	r3, [sp, #4]
 800bff6:	f805 ab01 	strb.w	sl, [r5], #1
 800bffa:	1aea      	subs	r2, r5, r3
 800bffc:	9b02      	ldr	r3, [sp, #8]
 800bffe:	4293      	cmp	r3, r2
 800c000:	dd09      	ble.n	800c016 <_dtoa_r+0xb56>
 800c002:	ee18 1a10 	vmov	r1, s16
 800c006:	2300      	movs	r3, #0
 800c008:	220a      	movs	r2, #10
 800c00a:	4620      	mov	r0, r4
 800c00c:	f000 fcb2 	bl	800c974 <__multadd>
 800c010:	ee08 0a10 	vmov	s16, r0
 800c014:	e7e7      	b.n	800bfe6 <_dtoa_r+0xb26>
 800c016:	9b02      	ldr	r3, [sp, #8]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	bfc8      	it	gt
 800c01c:	461d      	movgt	r5, r3
 800c01e:	9b01      	ldr	r3, [sp, #4]
 800c020:	bfd8      	it	le
 800c022:	2501      	movle	r5, #1
 800c024:	441d      	add	r5, r3
 800c026:	f04f 0800 	mov.w	r8, #0
 800c02a:	ee18 1a10 	vmov	r1, s16
 800c02e:	2201      	movs	r2, #1
 800c030:	4620      	mov	r0, r4
 800c032:	f000 fe99 	bl	800cd68 <__lshift>
 800c036:	4631      	mov	r1, r6
 800c038:	ee08 0a10 	vmov	s16, r0
 800c03c:	f000 ff04 	bl	800ce48 <__mcmp>
 800c040:	2800      	cmp	r0, #0
 800c042:	dc91      	bgt.n	800bf68 <_dtoa_r+0xaa8>
 800c044:	d102      	bne.n	800c04c <_dtoa_r+0xb8c>
 800c046:	f01a 0f01 	tst.w	sl, #1
 800c04a:	d18d      	bne.n	800bf68 <_dtoa_r+0xaa8>
 800c04c:	462b      	mov	r3, r5
 800c04e:	461d      	mov	r5, r3
 800c050:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c054:	2a30      	cmp	r2, #48	; 0x30
 800c056:	d0fa      	beq.n	800c04e <_dtoa_r+0xb8e>
 800c058:	e6d7      	b.n	800be0a <_dtoa_r+0x94a>
 800c05a:	9a01      	ldr	r2, [sp, #4]
 800c05c:	429a      	cmp	r2, r3
 800c05e:	d184      	bne.n	800bf6a <_dtoa_r+0xaaa>
 800c060:	9b00      	ldr	r3, [sp, #0]
 800c062:	3301      	adds	r3, #1
 800c064:	9300      	str	r3, [sp, #0]
 800c066:	2331      	movs	r3, #49	; 0x31
 800c068:	7013      	strb	r3, [r2, #0]
 800c06a:	e6ce      	b.n	800be0a <_dtoa_r+0x94a>
 800c06c:	4b09      	ldr	r3, [pc, #36]	; (800c094 <_dtoa_r+0xbd4>)
 800c06e:	f7ff ba95 	b.w	800b59c <_dtoa_r+0xdc>
 800c072:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c074:	2b00      	cmp	r3, #0
 800c076:	f47f aa6e 	bne.w	800b556 <_dtoa_r+0x96>
 800c07a:	4b07      	ldr	r3, [pc, #28]	; (800c098 <_dtoa_r+0xbd8>)
 800c07c:	f7ff ba8e 	b.w	800b59c <_dtoa_r+0xdc>
 800c080:	9b02      	ldr	r3, [sp, #8]
 800c082:	2b00      	cmp	r3, #0
 800c084:	dcae      	bgt.n	800bfe4 <_dtoa_r+0xb24>
 800c086:	9b06      	ldr	r3, [sp, #24]
 800c088:	2b02      	cmp	r3, #2
 800c08a:	f73f aea8 	bgt.w	800bdde <_dtoa_r+0x91e>
 800c08e:	e7a9      	b.n	800bfe4 <_dtoa_r+0xb24>
 800c090:	0800e7e8 	.word	0x0800e7e8
 800c094:	0800e9e1 	.word	0x0800e9e1
 800c098:	0800e769 	.word	0x0800e769

0800c09c <rshift>:
 800c09c:	6903      	ldr	r3, [r0, #16]
 800c09e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c0a2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c0a6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c0aa:	f100 0414 	add.w	r4, r0, #20
 800c0ae:	dd45      	ble.n	800c13c <rshift+0xa0>
 800c0b0:	f011 011f 	ands.w	r1, r1, #31
 800c0b4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c0b8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c0bc:	d10c      	bne.n	800c0d8 <rshift+0x3c>
 800c0be:	f100 0710 	add.w	r7, r0, #16
 800c0c2:	4629      	mov	r1, r5
 800c0c4:	42b1      	cmp	r1, r6
 800c0c6:	d334      	bcc.n	800c132 <rshift+0x96>
 800c0c8:	1a9b      	subs	r3, r3, r2
 800c0ca:	009b      	lsls	r3, r3, #2
 800c0cc:	1eea      	subs	r2, r5, #3
 800c0ce:	4296      	cmp	r6, r2
 800c0d0:	bf38      	it	cc
 800c0d2:	2300      	movcc	r3, #0
 800c0d4:	4423      	add	r3, r4
 800c0d6:	e015      	b.n	800c104 <rshift+0x68>
 800c0d8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c0dc:	f1c1 0820 	rsb	r8, r1, #32
 800c0e0:	40cf      	lsrs	r7, r1
 800c0e2:	f105 0e04 	add.w	lr, r5, #4
 800c0e6:	46a1      	mov	r9, r4
 800c0e8:	4576      	cmp	r6, lr
 800c0ea:	46f4      	mov	ip, lr
 800c0ec:	d815      	bhi.n	800c11a <rshift+0x7e>
 800c0ee:	1a9a      	subs	r2, r3, r2
 800c0f0:	0092      	lsls	r2, r2, #2
 800c0f2:	3a04      	subs	r2, #4
 800c0f4:	3501      	adds	r5, #1
 800c0f6:	42ae      	cmp	r6, r5
 800c0f8:	bf38      	it	cc
 800c0fa:	2200      	movcc	r2, #0
 800c0fc:	18a3      	adds	r3, r4, r2
 800c0fe:	50a7      	str	r7, [r4, r2]
 800c100:	b107      	cbz	r7, 800c104 <rshift+0x68>
 800c102:	3304      	adds	r3, #4
 800c104:	1b1a      	subs	r2, r3, r4
 800c106:	42a3      	cmp	r3, r4
 800c108:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c10c:	bf08      	it	eq
 800c10e:	2300      	moveq	r3, #0
 800c110:	6102      	str	r2, [r0, #16]
 800c112:	bf08      	it	eq
 800c114:	6143      	streq	r3, [r0, #20]
 800c116:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c11a:	f8dc c000 	ldr.w	ip, [ip]
 800c11e:	fa0c fc08 	lsl.w	ip, ip, r8
 800c122:	ea4c 0707 	orr.w	r7, ip, r7
 800c126:	f849 7b04 	str.w	r7, [r9], #4
 800c12a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c12e:	40cf      	lsrs	r7, r1
 800c130:	e7da      	b.n	800c0e8 <rshift+0x4c>
 800c132:	f851 cb04 	ldr.w	ip, [r1], #4
 800c136:	f847 cf04 	str.w	ip, [r7, #4]!
 800c13a:	e7c3      	b.n	800c0c4 <rshift+0x28>
 800c13c:	4623      	mov	r3, r4
 800c13e:	e7e1      	b.n	800c104 <rshift+0x68>

0800c140 <__hexdig_fun>:
 800c140:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c144:	2b09      	cmp	r3, #9
 800c146:	d802      	bhi.n	800c14e <__hexdig_fun+0xe>
 800c148:	3820      	subs	r0, #32
 800c14a:	b2c0      	uxtb	r0, r0
 800c14c:	4770      	bx	lr
 800c14e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c152:	2b05      	cmp	r3, #5
 800c154:	d801      	bhi.n	800c15a <__hexdig_fun+0x1a>
 800c156:	3847      	subs	r0, #71	; 0x47
 800c158:	e7f7      	b.n	800c14a <__hexdig_fun+0xa>
 800c15a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c15e:	2b05      	cmp	r3, #5
 800c160:	d801      	bhi.n	800c166 <__hexdig_fun+0x26>
 800c162:	3827      	subs	r0, #39	; 0x27
 800c164:	e7f1      	b.n	800c14a <__hexdig_fun+0xa>
 800c166:	2000      	movs	r0, #0
 800c168:	4770      	bx	lr
	...

0800c16c <__gethex>:
 800c16c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c170:	ed2d 8b02 	vpush	{d8}
 800c174:	b089      	sub	sp, #36	; 0x24
 800c176:	ee08 0a10 	vmov	s16, r0
 800c17a:	9304      	str	r3, [sp, #16]
 800c17c:	4bb4      	ldr	r3, [pc, #720]	; (800c450 <__gethex+0x2e4>)
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	9301      	str	r3, [sp, #4]
 800c182:	4618      	mov	r0, r3
 800c184:	468b      	mov	fp, r1
 800c186:	4690      	mov	r8, r2
 800c188:	f7f4 f83a 	bl	8000200 <strlen>
 800c18c:	9b01      	ldr	r3, [sp, #4]
 800c18e:	f8db 2000 	ldr.w	r2, [fp]
 800c192:	4403      	add	r3, r0
 800c194:	4682      	mov	sl, r0
 800c196:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c19a:	9305      	str	r3, [sp, #20]
 800c19c:	1c93      	adds	r3, r2, #2
 800c19e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c1a2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c1a6:	32fe      	adds	r2, #254	; 0xfe
 800c1a8:	18d1      	adds	r1, r2, r3
 800c1aa:	461f      	mov	r7, r3
 800c1ac:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c1b0:	9100      	str	r1, [sp, #0]
 800c1b2:	2830      	cmp	r0, #48	; 0x30
 800c1b4:	d0f8      	beq.n	800c1a8 <__gethex+0x3c>
 800c1b6:	f7ff ffc3 	bl	800c140 <__hexdig_fun>
 800c1ba:	4604      	mov	r4, r0
 800c1bc:	2800      	cmp	r0, #0
 800c1be:	d13a      	bne.n	800c236 <__gethex+0xca>
 800c1c0:	9901      	ldr	r1, [sp, #4]
 800c1c2:	4652      	mov	r2, sl
 800c1c4:	4638      	mov	r0, r7
 800c1c6:	f001 fe77 	bl	800deb8 <strncmp>
 800c1ca:	4605      	mov	r5, r0
 800c1cc:	2800      	cmp	r0, #0
 800c1ce:	d168      	bne.n	800c2a2 <__gethex+0x136>
 800c1d0:	f817 000a 	ldrb.w	r0, [r7, sl]
 800c1d4:	eb07 060a 	add.w	r6, r7, sl
 800c1d8:	f7ff ffb2 	bl	800c140 <__hexdig_fun>
 800c1dc:	2800      	cmp	r0, #0
 800c1de:	d062      	beq.n	800c2a6 <__gethex+0x13a>
 800c1e0:	4633      	mov	r3, r6
 800c1e2:	7818      	ldrb	r0, [r3, #0]
 800c1e4:	2830      	cmp	r0, #48	; 0x30
 800c1e6:	461f      	mov	r7, r3
 800c1e8:	f103 0301 	add.w	r3, r3, #1
 800c1ec:	d0f9      	beq.n	800c1e2 <__gethex+0x76>
 800c1ee:	f7ff ffa7 	bl	800c140 <__hexdig_fun>
 800c1f2:	2301      	movs	r3, #1
 800c1f4:	fab0 f480 	clz	r4, r0
 800c1f8:	0964      	lsrs	r4, r4, #5
 800c1fa:	4635      	mov	r5, r6
 800c1fc:	9300      	str	r3, [sp, #0]
 800c1fe:	463a      	mov	r2, r7
 800c200:	4616      	mov	r6, r2
 800c202:	3201      	adds	r2, #1
 800c204:	7830      	ldrb	r0, [r6, #0]
 800c206:	f7ff ff9b 	bl	800c140 <__hexdig_fun>
 800c20a:	2800      	cmp	r0, #0
 800c20c:	d1f8      	bne.n	800c200 <__gethex+0x94>
 800c20e:	9901      	ldr	r1, [sp, #4]
 800c210:	4652      	mov	r2, sl
 800c212:	4630      	mov	r0, r6
 800c214:	f001 fe50 	bl	800deb8 <strncmp>
 800c218:	b980      	cbnz	r0, 800c23c <__gethex+0xd0>
 800c21a:	b94d      	cbnz	r5, 800c230 <__gethex+0xc4>
 800c21c:	eb06 050a 	add.w	r5, r6, sl
 800c220:	462a      	mov	r2, r5
 800c222:	4616      	mov	r6, r2
 800c224:	3201      	adds	r2, #1
 800c226:	7830      	ldrb	r0, [r6, #0]
 800c228:	f7ff ff8a 	bl	800c140 <__hexdig_fun>
 800c22c:	2800      	cmp	r0, #0
 800c22e:	d1f8      	bne.n	800c222 <__gethex+0xb6>
 800c230:	1bad      	subs	r5, r5, r6
 800c232:	00ad      	lsls	r5, r5, #2
 800c234:	e004      	b.n	800c240 <__gethex+0xd4>
 800c236:	2400      	movs	r4, #0
 800c238:	4625      	mov	r5, r4
 800c23a:	e7e0      	b.n	800c1fe <__gethex+0x92>
 800c23c:	2d00      	cmp	r5, #0
 800c23e:	d1f7      	bne.n	800c230 <__gethex+0xc4>
 800c240:	7833      	ldrb	r3, [r6, #0]
 800c242:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c246:	2b50      	cmp	r3, #80	; 0x50
 800c248:	d13b      	bne.n	800c2c2 <__gethex+0x156>
 800c24a:	7873      	ldrb	r3, [r6, #1]
 800c24c:	2b2b      	cmp	r3, #43	; 0x2b
 800c24e:	d02c      	beq.n	800c2aa <__gethex+0x13e>
 800c250:	2b2d      	cmp	r3, #45	; 0x2d
 800c252:	d02e      	beq.n	800c2b2 <__gethex+0x146>
 800c254:	1c71      	adds	r1, r6, #1
 800c256:	f04f 0900 	mov.w	r9, #0
 800c25a:	7808      	ldrb	r0, [r1, #0]
 800c25c:	f7ff ff70 	bl	800c140 <__hexdig_fun>
 800c260:	1e43      	subs	r3, r0, #1
 800c262:	b2db      	uxtb	r3, r3
 800c264:	2b18      	cmp	r3, #24
 800c266:	d82c      	bhi.n	800c2c2 <__gethex+0x156>
 800c268:	f1a0 0210 	sub.w	r2, r0, #16
 800c26c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c270:	f7ff ff66 	bl	800c140 <__hexdig_fun>
 800c274:	1e43      	subs	r3, r0, #1
 800c276:	b2db      	uxtb	r3, r3
 800c278:	2b18      	cmp	r3, #24
 800c27a:	d91d      	bls.n	800c2b8 <__gethex+0x14c>
 800c27c:	f1b9 0f00 	cmp.w	r9, #0
 800c280:	d000      	beq.n	800c284 <__gethex+0x118>
 800c282:	4252      	negs	r2, r2
 800c284:	4415      	add	r5, r2
 800c286:	f8cb 1000 	str.w	r1, [fp]
 800c28a:	b1e4      	cbz	r4, 800c2c6 <__gethex+0x15a>
 800c28c:	9b00      	ldr	r3, [sp, #0]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	bf14      	ite	ne
 800c292:	2700      	movne	r7, #0
 800c294:	2706      	moveq	r7, #6
 800c296:	4638      	mov	r0, r7
 800c298:	b009      	add	sp, #36	; 0x24
 800c29a:	ecbd 8b02 	vpop	{d8}
 800c29e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2a2:	463e      	mov	r6, r7
 800c2a4:	4625      	mov	r5, r4
 800c2a6:	2401      	movs	r4, #1
 800c2a8:	e7ca      	b.n	800c240 <__gethex+0xd4>
 800c2aa:	f04f 0900 	mov.w	r9, #0
 800c2ae:	1cb1      	adds	r1, r6, #2
 800c2b0:	e7d3      	b.n	800c25a <__gethex+0xee>
 800c2b2:	f04f 0901 	mov.w	r9, #1
 800c2b6:	e7fa      	b.n	800c2ae <__gethex+0x142>
 800c2b8:	230a      	movs	r3, #10
 800c2ba:	fb03 0202 	mla	r2, r3, r2, r0
 800c2be:	3a10      	subs	r2, #16
 800c2c0:	e7d4      	b.n	800c26c <__gethex+0x100>
 800c2c2:	4631      	mov	r1, r6
 800c2c4:	e7df      	b.n	800c286 <__gethex+0x11a>
 800c2c6:	1bf3      	subs	r3, r6, r7
 800c2c8:	3b01      	subs	r3, #1
 800c2ca:	4621      	mov	r1, r4
 800c2cc:	2b07      	cmp	r3, #7
 800c2ce:	dc0b      	bgt.n	800c2e8 <__gethex+0x17c>
 800c2d0:	ee18 0a10 	vmov	r0, s16
 800c2d4:	f000 faec 	bl	800c8b0 <_Balloc>
 800c2d8:	4604      	mov	r4, r0
 800c2da:	b940      	cbnz	r0, 800c2ee <__gethex+0x182>
 800c2dc:	4b5d      	ldr	r3, [pc, #372]	; (800c454 <__gethex+0x2e8>)
 800c2de:	4602      	mov	r2, r0
 800c2e0:	21de      	movs	r1, #222	; 0xde
 800c2e2:	485d      	ldr	r0, [pc, #372]	; (800c458 <__gethex+0x2ec>)
 800c2e4:	f001 feb8 	bl	800e058 <__assert_func>
 800c2e8:	3101      	adds	r1, #1
 800c2ea:	105b      	asrs	r3, r3, #1
 800c2ec:	e7ee      	b.n	800c2cc <__gethex+0x160>
 800c2ee:	f100 0914 	add.w	r9, r0, #20
 800c2f2:	f04f 0b00 	mov.w	fp, #0
 800c2f6:	f1ca 0301 	rsb	r3, sl, #1
 800c2fa:	f8cd 9008 	str.w	r9, [sp, #8]
 800c2fe:	f8cd b000 	str.w	fp, [sp]
 800c302:	9306      	str	r3, [sp, #24]
 800c304:	42b7      	cmp	r7, r6
 800c306:	d340      	bcc.n	800c38a <__gethex+0x21e>
 800c308:	9802      	ldr	r0, [sp, #8]
 800c30a:	9b00      	ldr	r3, [sp, #0]
 800c30c:	f840 3b04 	str.w	r3, [r0], #4
 800c310:	eba0 0009 	sub.w	r0, r0, r9
 800c314:	1080      	asrs	r0, r0, #2
 800c316:	0146      	lsls	r6, r0, #5
 800c318:	6120      	str	r0, [r4, #16]
 800c31a:	4618      	mov	r0, r3
 800c31c:	f000 fbba 	bl	800ca94 <__hi0bits>
 800c320:	1a30      	subs	r0, r6, r0
 800c322:	f8d8 6000 	ldr.w	r6, [r8]
 800c326:	42b0      	cmp	r0, r6
 800c328:	dd63      	ble.n	800c3f2 <__gethex+0x286>
 800c32a:	1b87      	subs	r7, r0, r6
 800c32c:	4639      	mov	r1, r7
 800c32e:	4620      	mov	r0, r4
 800c330:	f000 ff5e 	bl	800d1f0 <__any_on>
 800c334:	4682      	mov	sl, r0
 800c336:	b1a8      	cbz	r0, 800c364 <__gethex+0x1f8>
 800c338:	1e7b      	subs	r3, r7, #1
 800c33a:	1159      	asrs	r1, r3, #5
 800c33c:	f003 021f 	and.w	r2, r3, #31
 800c340:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c344:	f04f 0a01 	mov.w	sl, #1
 800c348:	fa0a f202 	lsl.w	r2, sl, r2
 800c34c:	420a      	tst	r2, r1
 800c34e:	d009      	beq.n	800c364 <__gethex+0x1f8>
 800c350:	4553      	cmp	r3, sl
 800c352:	dd05      	ble.n	800c360 <__gethex+0x1f4>
 800c354:	1eb9      	subs	r1, r7, #2
 800c356:	4620      	mov	r0, r4
 800c358:	f000 ff4a 	bl	800d1f0 <__any_on>
 800c35c:	2800      	cmp	r0, #0
 800c35e:	d145      	bne.n	800c3ec <__gethex+0x280>
 800c360:	f04f 0a02 	mov.w	sl, #2
 800c364:	4639      	mov	r1, r7
 800c366:	4620      	mov	r0, r4
 800c368:	f7ff fe98 	bl	800c09c <rshift>
 800c36c:	443d      	add	r5, r7
 800c36e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c372:	42ab      	cmp	r3, r5
 800c374:	da4c      	bge.n	800c410 <__gethex+0x2a4>
 800c376:	ee18 0a10 	vmov	r0, s16
 800c37a:	4621      	mov	r1, r4
 800c37c:	f000 fad8 	bl	800c930 <_Bfree>
 800c380:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c382:	2300      	movs	r3, #0
 800c384:	6013      	str	r3, [r2, #0]
 800c386:	27a3      	movs	r7, #163	; 0xa3
 800c388:	e785      	b.n	800c296 <__gethex+0x12a>
 800c38a:	1e73      	subs	r3, r6, #1
 800c38c:	9a05      	ldr	r2, [sp, #20]
 800c38e:	9303      	str	r3, [sp, #12]
 800c390:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c394:	4293      	cmp	r3, r2
 800c396:	d019      	beq.n	800c3cc <__gethex+0x260>
 800c398:	f1bb 0f20 	cmp.w	fp, #32
 800c39c:	d107      	bne.n	800c3ae <__gethex+0x242>
 800c39e:	9b02      	ldr	r3, [sp, #8]
 800c3a0:	9a00      	ldr	r2, [sp, #0]
 800c3a2:	f843 2b04 	str.w	r2, [r3], #4
 800c3a6:	9302      	str	r3, [sp, #8]
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	9300      	str	r3, [sp, #0]
 800c3ac:	469b      	mov	fp, r3
 800c3ae:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c3b2:	f7ff fec5 	bl	800c140 <__hexdig_fun>
 800c3b6:	9b00      	ldr	r3, [sp, #0]
 800c3b8:	f000 000f 	and.w	r0, r0, #15
 800c3bc:	fa00 f00b 	lsl.w	r0, r0, fp
 800c3c0:	4303      	orrs	r3, r0
 800c3c2:	9300      	str	r3, [sp, #0]
 800c3c4:	f10b 0b04 	add.w	fp, fp, #4
 800c3c8:	9b03      	ldr	r3, [sp, #12]
 800c3ca:	e00d      	b.n	800c3e8 <__gethex+0x27c>
 800c3cc:	9b03      	ldr	r3, [sp, #12]
 800c3ce:	9a06      	ldr	r2, [sp, #24]
 800c3d0:	4413      	add	r3, r2
 800c3d2:	42bb      	cmp	r3, r7
 800c3d4:	d3e0      	bcc.n	800c398 <__gethex+0x22c>
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	9901      	ldr	r1, [sp, #4]
 800c3da:	9307      	str	r3, [sp, #28]
 800c3dc:	4652      	mov	r2, sl
 800c3de:	f001 fd6b 	bl	800deb8 <strncmp>
 800c3e2:	9b07      	ldr	r3, [sp, #28]
 800c3e4:	2800      	cmp	r0, #0
 800c3e6:	d1d7      	bne.n	800c398 <__gethex+0x22c>
 800c3e8:	461e      	mov	r6, r3
 800c3ea:	e78b      	b.n	800c304 <__gethex+0x198>
 800c3ec:	f04f 0a03 	mov.w	sl, #3
 800c3f0:	e7b8      	b.n	800c364 <__gethex+0x1f8>
 800c3f2:	da0a      	bge.n	800c40a <__gethex+0x29e>
 800c3f4:	1a37      	subs	r7, r6, r0
 800c3f6:	4621      	mov	r1, r4
 800c3f8:	ee18 0a10 	vmov	r0, s16
 800c3fc:	463a      	mov	r2, r7
 800c3fe:	f000 fcb3 	bl	800cd68 <__lshift>
 800c402:	1bed      	subs	r5, r5, r7
 800c404:	4604      	mov	r4, r0
 800c406:	f100 0914 	add.w	r9, r0, #20
 800c40a:	f04f 0a00 	mov.w	sl, #0
 800c40e:	e7ae      	b.n	800c36e <__gethex+0x202>
 800c410:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c414:	42a8      	cmp	r0, r5
 800c416:	dd72      	ble.n	800c4fe <__gethex+0x392>
 800c418:	1b45      	subs	r5, r0, r5
 800c41a:	42ae      	cmp	r6, r5
 800c41c:	dc36      	bgt.n	800c48c <__gethex+0x320>
 800c41e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c422:	2b02      	cmp	r3, #2
 800c424:	d02a      	beq.n	800c47c <__gethex+0x310>
 800c426:	2b03      	cmp	r3, #3
 800c428:	d02c      	beq.n	800c484 <__gethex+0x318>
 800c42a:	2b01      	cmp	r3, #1
 800c42c:	d11c      	bne.n	800c468 <__gethex+0x2fc>
 800c42e:	42ae      	cmp	r6, r5
 800c430:	d11a      	bne.n	800c468 <__gethex+0x2fc>
 800c432:	2e01      	cmp	r6, #1
 800c434:	d112      	bne.n	800c45c <__gethex+0x2f0>
 800c436:	9a04      	ldr	r2, [sp, #16]
 800c438:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c43c:	6013      	str	r3, [r2, #0]
 800c43e:	2301      	movs	r3, #1
 800c440:	6123      	str	r3, [r4, #16]
 800c442:	f8c9 3000 	str.w	r3, [r9]
 800c446:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c448:	2762      	movs	r7, #98	; 0x62
 800c44a:	601c      	str	r4, [r3, #0]
 800c44c:	e723      	b.n	800c296 <__gethex+0x12a>
 800c44e:	bf00      	nop
 800c450:	0800e860 	.word	0x0800e860
 800c454:	0800e7e8 	.word	0x0800e7e8
 800c458:	0800e7f9 	.word	0x0800e7f9
 800c45c:	1e71      	subs	r1, r6, #1
 800c45e:	4620      	mov	r0, r4
 800c460:	f000 fec6 	bl	800d1f0 <__any_on>
 800c464:	2800      	cmp	r0, #0
 800c466:	d1e6      	bne.n	800c436 <__gethex+0x2ca>
 800c468:	ee18 0a10 	vmov	r0, s16
 800c46c:	4621      	mov	r1, r4
 800c46e:	f000 fa5f 	bl	800c930 <_Bfree>
 800c472:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c474:	2300      	movs	r3, #0
 800c476:	6013      	str	r3, [r2, #0]
 800c478:	2750      	movs	r7, #80	; 0x50
 800c47a:	e70c      	b.n	800c296 <__gethex+0x12a>
 800c47c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d1f2      	bne.n	800c468 <__gethex+0x2fc>
 800c482:	e7d8      	b.n	800c436 <__gethex+0x2ca>
 800c484:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c486:	2b00      	cmp	r3, #0
 800c488:	d1d5      	bne.n	800c436 <__gethex+0x2ca>
 800c48a:	e7ed      	b.n	800c468 <__gethex+0x2fc>
 800c48c:	1e6f      	subs	r7, r5, #1
 800c48e:	f1ba 0f00 	cmp.w	sl, #0
 800c492:	d131      	bne.n	800c4f8 <__gethex+0x38c>
 800c494:	b127      	cbz	r7, 800c4a0 <__gethex+0x334>
 800c496:	4639      	mov	r1, r7
 800c498:	4620      	mov	r0, r4
 800c49a:	f000 fea9 	bl	800d1f0 <__any_on>
 800c49e:	4682      	mov	sl, r0
 800c4a0:	117b      	asrs	r3, r7, #5
 800c4a2:	2101      	movs	r1, #1
 800c4a4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c4a8:	f007 071f 	and.w	r7, r7, #31
 800c4ac:	fa01 f707 	lsl.w	r7, r1, r7
 800c4b0:	421f      	tst	r7, r3
 800c4b2:	4629      	mov	r1, r5
 800c4b4:	4620      	mov	r0, r4
 800c4b6:	bf18      	it	ne
 800c4b8:	f04a 0a02 	orrne.w	sl, sl, #2
 800c4bc:	1b76      	subs	r6, r6, r5
 800c4be:	f7ff fded 	bl	800c09c <rshift>
 800c4c2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c4c6:	2702      	movs	r7, #2
 800c4c8:	f1ba 0f00 	cmp.w	sl, #0
 800c4cc:	d048      	beq.n	800c560 <__gethex+0x3f4>
 800c4ce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c4d2:	2b02      	cmp	r3, #2
 800c4d4:	d015      	beq.n	800c502 <__gethex+0x396>
 800c4d6:	2b03      	cmp	r3, #3
 800c4d8:	d017      	beq.n	800c50a <__gethex+0x39e>
 800c4da:	2b01      	cmp	r3, #1
 800c4dc:	d109      	bne.n	800c4f2 <__gethex+0x386>
 800c4de:	f01a 0f02 	tst.w	sl, #2
 800c4e2:	d006      	beq.n	800c4f2 <__gethex+0x386>
 800c4e4:	f8d9 0000 	ldr.w	r0, [r9]
 800c4e8:	ea4a 0a00 	orr.w	sl, sl, r0
 800c4ec:	f01a 0f01 	tst.w	sl, #1
 800c4f0:	d10e      	bne.n	800c510 <__gethex+0x3a4>
 800c4f2:	f047 0710 	orr.w	r7, r7, #16
 800c4f6:	e033      	b.n	800c560 <__gethex+0x3f4>
 800c4f8:	f04f 0a01 	mov.w	sl, #1
 800c4fc:	e7d0      	b.n	800c4a0 <__gethex+0x334>
 800c4fe:	2701      	movs	r7, #1
 800c500:	e7e2      	b.n	800c4c8 <__gethex+0x35c>
 800c502:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c504:	f1c3 0301 	rsb	r3, r3, #1
 800c508:	9315      	str	r3, [sp, #84]	; 0x54
 800c50a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d0f0      	beq.n	800c4f2 <__gethex+0x386>
 800c510:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c514:	f104 0314 	add.w	r3, r4, #20
 800c518:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c51c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c520:	f04f 0c00 	mov.w	ip, #0
 800c524:	4618      	mov	r0, r3
 800c526:	f853 2b04 	ldr.w	r2, [r3], #4
 800c52a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c52e:	d01c      	beq.n	800c56a <__gethex+0x3fe>
 800c530:	3201      	adds	r2, #1
 800c532:	6002      	str	r2, [r0, #0]
 800c534:	2f02      	cmp	r7, #2
 800c536:	f104 0314 	add.w	r3, r4, #20
 800c53a:	d13f      	bne.n	800c5bc <__gethex+0x450>
 800c53c:	f8d8 2000 	ldr.w	r2, [r8]
 800c540:	3a01      	subs	r2, #1
 800c542:	42b2      	cmp	r2, r6
 800c544:	d10a      	bne.n	800c55c <__gethex+0x3f0>
 800c546:	1171      	asrs	r1, r6, #5
 800c548:	2201      	movs	r2, #1
 800c54a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c54e:	f006 061f 	and.w	r6, r6, #31
 800c552:	fa02 f606 	lsl.w	r6, r2, r6
 800c556:	421e      	tst	r6, r3
 800c558:	bf18      	it	ne
 800c55a:	4617      	movne	r7, r2
 800c55c:	f047 0720 	orr.w	r7, r7, #32
 800c560:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c562:	601c      	str	r4, [r3, #0]
 800c564:	9b04      	ldr	r3, [sp, #16]
 800c566:	601d      	str	r5, [r3, #0]
 800c568:	e695      	b.n	800c296 <__gethex+0x12a>
 800c56a:	4299      	cmp	r1, r3
 800c56c:	f843 cc04 	str.w	ip, [r3, #-4]
 800c570:	d8d8      	bhi.n	800c524 <__gethex+0x3b8>
 800c572:	68a3      	ldr	r3, [r4, #8]
 800c574:	459b      	cmp	fp, r3
 800c576:	db19      	blt.n	800c5ac <__gethex+0x440>
 800c578:	6861      	ldr	r1, [r4, #4]
 800c57a:	ee18 0a10 	vmov	r0, s16
 800c57e:	3101      	adds	r1, #1
 800c580:	f000 f996 	bl	800c8b0 <_Balloc>
 800c584:	4681      	mov	r9, r0
 800c586:	b918      	cbnz	r0, 800c590 <__gethex+0x424>
 800c588:	4b1a      	ldr	r3, [pc, #104]	; (800c5f4 <__gethex+0x488>)
 800c58a:	4602      	mov	r2, r0
 800c58c:	2184      	movs	r1, #132	; 0x84
 800c58e:	e6a8      	b.n	800c2e2 <__gethex+0x176>
 800c590:	6922      	ldr	r2, [r4, #16]
 800c592:	3202      	adds	r2, #2
 800c594:	f104 010c 	add.w	r1, r4, #12
 800c598:	0092      	lsls	r2, r2, #2
 800c59a:	300c      	adds	r0, #12
 800c59c:	f7fc fea2 	bl	80092e4 <memcpy>
 800c5a0:	4621      	mov	r1, r4
 800c5a2:	ee18 0a10 	vmov	r0, s16
 800c5a6:	f000 f9c3 	bl	800c930 <_Bfree>
 800c5aa:	464c      	mov	r4, r9
 800c5ac:	6923      	ldr	r3, [r4, #16]
 800c5ae:	1c5a      	adds	r2, r3, #1
 800c5b0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c5b4:	6122      	str	r2, [r4, #16]
 800c5b6:	2201      	movs	r2, #1
 800c5b8:	615a      	str	r2, [r3, #20]
 800c5ba:	e7bb      	b.n	800c534 <__gethex+0x3c8>
 800c5bc:	6922      	ldr	r2, [r4, #16]
 800c5be:	455a      	cmp	r2, fp
 800c5c0:	dd0b      	ble.n	800c5da <__gethex+0x46e>
 800c5c2:	2101      	movs	r1, #1
 800c5c4:	4620      	mov	r0, r4
 800c5c6:	f7ff fd69 	bl	800c09c <rshift>
 800c5ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c5ce:	3501      	adds	r5, #1
 800c5d0:	42ab      	cmp	r3, r5
 800c5d2:	f6ff aed0 	blt.w	800c376 <__gethex+0x20a>
 800c5d6:	2701      	movs	r7, #1
 800c5d8:	e7c0      	b.n	800c55c <__gethex+0x3f0>
 800c5da:	f016 061f 	ands.w	r6, r6, #31
 800c5de:	d0fa      	beq.n	800c5d6 <__gethex+0x46a>
 800c5e0:	4453      	add	r3, sl
 800c5e2:	f1c6 0620 	rsb	r6, r6, #32
 800c5e6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c5ea:	f000 fa53 	bl	800ca94 <__hi0bits>
 800c5ee:	42b0      	cmp	r0, r6
 800c5f0:	dbe7      	blt.n	800c5c2 <__gethex+0x456>
 800c5f2:	e7f0      	b.n	800c5d6 <__gethex+0x46a>
 800c5f4:	0800e7e8 	.word	0x0800e7e8

0800c5f8 <L_shift>:
 800c5f8:	f1c2 0208 	rsb	r2, r2, #8
 800c5fc:	0092      	lsls	r2, r2, #2
 800c5fe:	b570      	push	{r4, r5, r6, lr}
 800c600:	f1c2 0620 	rsb	r6, r2, #32
 800c604:	6843      	ldr	r3, [r0, #4]
 800c606:	6804      	ldr	r4, [r0, #0]
 800c608:	fa03 f506 	lsl.w	r5, r3, r6
 800c60c:	432c      	orrs	r4, r5
 800c60e:	40d3      	lsrs	r3, r2
 800c610:	6004      	str	r4, [r0, #0]
 800c612:	f840 3f04 	str.w	r3, [r0, #4]!
 800c616:	4288      	cmp	r0, r1
 800c618:	d3f4      	bcc.n	800c604 <L_shift+0xc>
 800c61a:	bd70      	pop	{r4, r5, r6, pc}

0800c61c <__match>:
 800c61c:	b530      	push	{r4, r5, lr}
 800c61e:	6803      	ldr	r3, [r0, #0]
 800c620:	3301      	adds	r3, #1
 800c622:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c626:	b914      	cbnz	r4, 800c62e <__match+0x12>
 800c628:	6003      	str	r3, [r0, #0]
 800c62a:	2001      	movs	r0, #1
 800c62c:	bd30      	pop	{r4, r5, pc}
 800c62e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c632:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c636:	2d19      	cmp	r5, #25
 800c638:	bf98      	it	ls
 800c63a:	3220      	addls	r2, #32
 800c63c:	42a2      	cmp	r2, r4
 800c63e:	d0f0      	beq.n	800c622 <__match+0x6>
 800c640:	2000      	movs	r0, #0
 800c642:	e7f3      	b.n	800c62c <__match+0x10>

0800c644 <__hexnan>:
 800c644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c648:	680b      	ldr	r3, [r1, #0]
 800c64a:	115e      	asrs	r6, r3, #5
 800c64c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c650:	f013 031f 	ands.w	r3, r3, #31
 800c654:	b087      	sub	sp, #28
 800c656:	bf18      	it	ne
 800c658:	3604      	addne	r6, #4
 800c65a:	2500      	movs	r5, #0
 800c65c:	1f37      	subs	r7, r6, #4
 800c65e:	4690      	mov	r8, r2
 800c660:	6802      	ldr	r2, [r0, #0]
 800c662:	9301      	str	r3, [sp, #4]
 800c664:	4682      	mov	sl, r0
 800c666:	f846 5c04 	str.w	r5, [r6, #-4]
 800c66a:	46b9      	mov	r9, r7
 800c66c:	463c      	mov	r4, r7
 800c66e:	9502      	str	r5, [sp, #8]
 800c670:	46ab      	mov	fp, r5
 800c672:	7851      	ldrb	r1, [r2, #1]
 800c674:	1c53      	adds	r3, r2, #1
 800c676:	9303      	str	r3, [sp, #12]
 800c678:	b341      	cbz	r1, 800c6cc <__hexnan+0x88>
 800c67a:	4608      	mov	r0, r1
 800c67c:	9205      	str	r2, [sp, #20]
 800c67e:	9104      	str	r1, [sp, #16]
 800c680:	f7ff fd5e 	bl	800c140 <__hexdig_fun>
 800c684:	2800      	cmp	r0, #0
 800c686:	d14f      	bne.n	800c728 <__hexnan+0xe4>
 800c688:	9904      	ldr	r1, [sp, #16]
 800c68a:	9a05      	ldr	r2, [sp, #20]
 800c68c:	2920      	cmp	r1, #32
 800c68e:	d818      	bhi.n	800c6c2 <__hexnan+0x7e>
 800c690:	9b02      	ldr	r3, [sp, #8]
 800c692:	459b      	cmp	fp, r3
 800c694:	dd13      	ble.n	800c6be <__hexnan+0x7a>
 800c696:	454c      	cmp	r4, r9
 800c698:	d206      	bcs.n	800c6a8 <__hexnan+0x64>
 800c69a:	2d07      	cmp	r5, #7
 800c69c:	dc04      	bgt.n	800c6a8 <__hexnan+0x64>
 800c69e:	462a      	mov	r2, r5
 800c6a0:	4649      	mov	r1, r9
 800c6a2:	4620      	mov	r0, r4
 800c6a4:	f7ff ffa8 	bl	800c5f8 <L_shift>
 800c6a8:	4544      	cmp	r4, r8
 800c6aa:	d950      	bls.n	800c74e <__hexnan+0x10a>
 800c6ac:	2300      	movs	r3, #0
 800c6ae:	f1a4 0904 	sub.w	r9, r4, #4
 800c6b2:	f844 3c04 	str.w	r3, [r4, #-4]
 800c6b6:	f8cd b008 	str.w	fp, [sp, #8]
 800c6ba:	464c      	mov	r4, r9
 800c6bc:	461d      	mov	r5, r3
 800c6be:	9a03      	ldr	r2, [sp, #12]
 800c6c0:	e7d7      	b.n	800c672 <__hexnan+0x2e>
 800c6c2:	2929      	cmp	r1, #41	; 0x29
 800c6c4:	d156      	bne.n	800c774 <__hexnan+0x130>
 800c6c6:	3202      	adds	r2, #2
 800c6c8:	f8ca 2000 	str.w	r2, [sl]
 800c6cc:	f1bb 0f00 	cmp.w	fp, #0
 800c6d0:	d050      	beq.n	800c774 <__hexnan+0x130>
 800c6d2:	454c      	cmp	r4, r9
 800c6d4:	d206      	bcs.n	800c6e4 <__hexnan+0xa0>
 800c6d6:	2d07      	cmp	r5, #7
 800c6d8:	dc04      	bgt.n	800c6e4 <__hexnan+0xa0>
 800c6da:	462a      	mov	r2, r5
 800c6dc:	4649      	mov	r1, r9
 800c6de:	4620      	mov	r0, r4
 800c6e0:	f7ff ff8a 	bl	800c5f8 <L_shift>
 800c6e4:	4544      	cmp	r4, r8
 800c6e6:	d934      	bls.n	800c752 <__hexnan+0x10e>
 800c6e8:	f1a8 0204 	sub.w	r2, r8, #4
 800c6ec:	4623      	mov	r3, r4
 800c6ee:	f853 1b04 	ldr.w	r1, [r3], #4
 800c6f2:	f842 1f04 	str.w	r1, [r2, #4]!
 800c6f6:	429f      	cmp	r7, r3
 800c6f8:	d2f9      	bcs.n	800c6ee <__hexnan+0xaa>
 800c6fa:	1b3b      	subs	r3, r7, r4
 800c6fc:	f023 0303 	bic.w	r3, r3, #3
 800c700:	3304      	adds	r3, #4
 800c702:	3401      	adds	r4, #1
 800c704:	3e03      	subs	r6, #3
 800c706:	42b4      	cmp	r4, r6
 800c708:	bf88      	it	hi
 800c70a:	2304      	movhi	r3, #4
 800c70c:	4443      	add	r3, r8
 800c70e:	2200      	movs	r2, #0
 800c710:	f843 2b04 	str.w	r2, [r3], #4
 800c714:	429f      	cmp	r7, r3
 800c716:	d2fb      	bcs.n	800c710 <__hexnan+0xcc>
 800c718:	683b      	ldr	r3, [r7, #0]
 800c71a:	b91b      	cbnz	r3, 800c724 <__hexnan+0xe0>
 800c71c:	4547      	cmp	r7, r8
 800c71e:	d127      	bne.n	800c770 <__hexnan+0x12c>
 800c720:	2301      	movs	r3, #1
 800c722:	603b      	str	r3, [r7, #0]
 800c724:	2005      	movs	r0, #5
 800c726:	e026      	b.n	800c776 <__hexnan+0x132>
 800c728:	3501      	adds	r5, #1
 800c72a:	2d08      	cmp	r5, #8
 800c72c:	f10b 0b01 	add.w	fp, fp, #1
 800c730:	dd06      	ble.n	800c740 <__hexnan+0xfc>
 800c732:	4544      	cmp	r4, r8
 800c734:	d9c3      	bls.n	800c6be <__hexnan+0x7a>
 800c736:	2300      	movs	r3, #0
 800c738:	f844 3c04 	str.w	r3, [r4, #-4]
 800c73c:	2501      	movs	r5, #1
 800c73e:	3c04      	subs	r4, #4
 800c740:	6822      	ldr	r2, [r4, #0]
 800c742:	f000 000f 	and.w	r0, r0, #15
 800c746:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800c74a:	6022      	str	r2, [r4, #0]
 800c74c:	e7b7      	b.n	800c6be <__hexnan+0x7a>
 800c74e:	2508      	movs	r5, #8
 800c750:	e7b5      	b.n	800c6be <__hexnan+0x7a>
 800c752:	9b01      	ldr	r3, [sp, #4]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d0df      	beq.n	800c718 <__hexnan+0xd4>
 800c758:	f04f 32ff 	mov.w	r2, #4294967295
 800c75c:	f1c3 0320 	rsb	r3, r3, #32
 800c760:	fa22 f303 	lsr.w	r3, r2, r3
 800c764:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c768:	401a      	ands	r2, r3
 800c76a:	f846 2c04 	str.w	r2, [r6, #-4]
 800c76e:	e7d3      	b.n	800c718 <__hexnan+0xd4>
 800c770:	3f04      	subs	r7, #4
 800c772:	e7d1      	b.n	800c718 <__hexnan+0xd4>
 800c774:	2004      	movs	r0, #4
 800c776:	b007      	add	sp, #28
 800c778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c77c <_localeconv_r>:
 800c77c:	4800      	ldr	r0, [pc, #0]	; (800c780 <_localeconv_r+0x4>)
 800c77e:	4770      	bx	lr
 800c780:	2000027c 	.word	0x2000027c

0800c784 <_lseek_r>:
 800c784:	b538      	push	{r3, r4, r5, lr}
 800c786:	4d07      	ldr	r5, [pc, #28]	; (800c7a4 <_lseek_r+0x20>)
 800c788:	4604      	mov	r4, r0
 800c78a:	4608      	mov	r0, r1
 800c78c:	4611      	mov	r1, r2
 800c78e:	2200      	movs	r2, #0
 800c790:	602a      	str	r2, [r5, #0]
 800c792:	461a      	mov	r2, r3
 800c794:	f7f5 f8be 	bl	8001914 <_lseek>
 800c798:	1c43      	adds	r3, r0, #1
 800c79a:	d102      	bne.n	800c7a2 <_lseek_r+0x1e>
 800c79c:	682b      	ldr	r3, [r5, #0]
 800c79e:	b103      	cbz	r3, 800c7a2 <_lseek_r+0x1e>
 800c7a0:	6023      	str	r3, [r4, #0]
 800c7a2:	bd38      	pop	{r3, r4, r5, pc}
 800c7a4:	200014b4 	.word	0x200014b4

0800c7a8 <__swhatbuf_r>:
 800c7a8:	b570      	push	{r4, r5, r6, lr}
 800c7aa:	460e      	mov	r6, r1
 800c7ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7b0:	2900      	cmp	r1, #0
 800c7b2:	b096      	sub	sp, #88	; 0x58
 800c7b4:	4614      	mov	r4, r2
 800c7b6:	461d      	mov	r5, r3
 800c7b8:	da08      	bge.n	800c7cc <__swhatbuf_r+0x24>
 800c7ba:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c7be:	2200      	movs	r2, #0
 800c7c0:	602a      	str	r2, [r5, #0]
 800c7c2:	061a      	lsls	r2, r3, #24
 800c7c4:	d410      	bmi.n	800c7e8 <__swhatbuf_r+0x40>
 800c7c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c7ca:	e00e      	b.n	800c7ea <__swhatbuf_r+0x42>
 800c7cc:	466a      	mov	r2, sp
 800c7ce:	f001 fc73 	bl	800e0b8 <_fstat_r>
 800c7d2:	2800      	cmp	r0, #0
 800c7d4:	dbf1      	blt.n	800c7ba <__swhatbuf_r+0x12>
 800c7d6:	9a01      	ldr	r2, [sp, #4]
 800c7d8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c7dc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c7e0:	425a      	negs	r2, r3
 800c7e2:	415a      	adcs	r2, r3
 800c7e4:	602a      	str	r2, [r5, #0]
 800c7e6:	e7ee      	b.n	800c7c6 <__swhatbuf_r+0x1e>
 800c7e8:	2340      	movs	r3, #64	; 0x40
 800c7ea:	2000      	movs	r0, #0
 800c7ec:	6023      	str	r3, [r4, #0]
 800c7ee:	b016      	add	sp, #88	; 0x58
 800c7f0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c7f4 <__smakebuf_r>:
 800c7f4:	898b      	ldrh	r3, [r1, #12]
 800c7f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c7f8:	079d      	lsls	r5, r3, #30
 800c7fa:	4606      	mov	r6, r0
 800c7fc:	460c      	mov	r4, r1
 800c7fe:	d507      	bpl.n	800c810 <__smakebuf_r+0x1c>
 800c800:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c804:	6023      	str	r3, [r4, #0]
 800c806:	6123      	str	r3, [r4, #16]
 800c808:	2301      	movs	r3, #1
 800c80a:	6163      	str	r3, [r4, #20]
 800c80c:	b002      	add	sp, #8
 800c80e:	bd70      	pop	{r4, r5, r6, pc}
 800c810:	ab01      	add	r3, sp, #4
 800c812:	466a      	mov	r2, sp
 800c814:	f7ff ffc8 	bl	800c7a8 <__swhatbuf_r>
 800c818:	9900      	ldr	r1, [sp, #0]
 800c81a:	4605      	mov	r5, r0
 800c81c:	4630      	mov	r0, r6
 800c81e:	f7fc fdeb 	bl	80093f8 <_malloc_r>
 800c822:	b948      	cbnz	r0, 800c838 <__smakebuf_r+0x44>
 800c824:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c828:	059a      	lsls	r2, r3, #22
 800c82a:	d4ef      	bmi.n	800c80c <__smakebuf_r+0x18>
 800c82c:	f023 0303 	bic.w	r3, r3, #3
 800c830:	f043 0302 	orr.w	r3, r3, #2
 800c834:	81a3      	strh	r3, [r4, #12]
 800c836:	e7e3      	b.n	800c800 <__smakebuf_r+0xc>
 800c838:	4b0d      	ldr	r3, [pc, #52]	; (800c870 <__smakebuf_r+0x7c>)
 800c83a:	62b3      	str	r3, [r6, #40]	; 0x28
 800c83c:	89a3      	ldrh	r3, [r4, #12]
 800c83e:	6020      	str	r0, [r4, #0]
 800c840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c844:	81a3      	strh	r3, [r4, #12]
 800c846:	9b00      	ldr	r3, [sp, #0]
 800c848:	6163      	str	r3, [r4, #20]
 800c84a:	9b01      	ldr	r3, [sp, #4]
 800c84c:	6120      	str	r0, [r4, #16]
 800c84e:	b15b      	cbz	r3, 800c868 <__smakebuf_r+0x74>
 800c850:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c854:	4630      	mov	r0, r6
 800c856:	f001 fc41 	bl	800e0dc <_isatty_r>
 800c85a:	b128      	cbz	r0, 800c868 <__smakebuf_r+0x74>
 800c85c:	89a3      	ldrh	r3, [r4, #12]
 800c85e:	f023 0303 	bic.w	r3, r3, #3
 800c862:	f043 0301 	orr.w	r3, r3, #1
 800c866:	81a3      	strh	r3, [r4, #12]
 800c868:	89a0      	ldrh	r0, [r4, #12]
 800c86a:	4305      	orrs	r5, r0
 800c86c:	81a5      	strh	r5, [r4, #12]
 800c86e:	e7cd      	b.n	800c80c <__smakebuf_r+0x18>
 800c870:	080090d1 	.word	0x080090d1

0800c874 <__ascii_mbtowc>:
 800c874:	b082      	sub	sp, #8
 800c876:	b901      	cbnz	r1, 800c87a <__ascii_mbtowc+0x6>
 800c878:	a901      	add	r1, sp, #4
 800c87a:	b142      	cbz	r2, 800c88e <__ascii_mbtowc+0x1a>
 800c87c:	b14b      	cbz	r3, 800c892 <__ascii_mbtowc+0x1e>
 800c87e:	7813      	ldrb	r3, [r2, #0]
 800c880:	600b      	str	r3, [r1, #0]
 800c882:	7812      	ldrb	r2, [r2, #0]
 800c884:	1e10      	subs	r0, r2, #0
 800c886:	bf18      	it	ne
 800c888:	2001      	movne	r0, #1
 800c88a:	b002      	add	sp, #8
 800c88c:	4770      	bx	lr
 800c88e:	4610      	mov	r0, r2
 800c890:	e7fb      	b.n	800c88a <__ascii_mbtowc+0x16>
 800c892:	f06f 0001 	mvn.w	r0, #1
 800c896:	e7f8      	b.n	800c88a <__ascii_mbtowc+0x16>

0800c898 <__malloc_lock>:
 800c898:	4801      	ldr	r0, [pc, #4]	; (800c8a0 <__malloc_lock+0x8>)
 800c89a:	f7fc bd10 	b.w	80092be <__retarget_lock_acquire_recursive>
 800c89e:	bf00      	nop
 800c8a0:	200014a8 	.word	0x200014a8

0800c8a4 <__malloc_unlock>:
 800c8a4:	4801      	ldr	r0, [pc, #4]	; (800c8ac <__malloc_unlock+0x8>)
 800c8a6:	f7fc bd0b 	b.w	80092c0 <__retarget_lock_release_recursive>
 800c8aa:	bf00      	nop
 800c8ac:	200014a8 	.word	0x200014a8

0800c8b0 <_Balloc>:
 800c8b0:	b570      	push	{r4, r5, r6, lr}
 800c8b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c8b4:	4604      	mov	r4, r0
 800c8b6:	460d      	mov	r5, r1
 800c8b8:	b976      	cbnz	r6, 800c8d8 <_Balloc+0x28>
 800c8ba:	2010      	movs	r0, #16
 800c8bc:	f7fc fd02 	bl	80092c4 <malloc>
 800c8c0:	4602      	mov	r2, r0
 800c8c2:	6260      	str	r0, [r4, #36]	; 0x24
 800c8c4:	b920      	cbnz	r0, 800c8d0 <_Balloc+0x20>
 800c8c6:	4b18      	ldr	r3, [pc, #96]	; (800c928 <_Balloc+0x78>)
 800c8c8:	4818      	ldr	r0, [pc, #96]	; (800c92c <_Balloc+0x7c>)
 800c8ca:	2166      	movs	r1, #102	; 0x66
 800c8cc:	f001 fbc4 	bl	800e058 <__assert_func>
 800c8d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c8d4:	6006      	str	r6, [r0, #0]
 800c8d6:	60c6      	str	r6, [r0, #12]
 800c8d8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c8da:	68f3      	ldr	r3, [r6, #12]
 800c8dc:	b183      	cbz	r3, 800c900 <_Balloc+0x50>
 800c8de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c8e0:	68db      	ldr	r3, [r3, #12]
 800c8e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c8e6:	b9b8      	cbnz	r0, 800c918 <_Balloc+0x68>
 800c8e8:	2101      	movs	r1, #1
 800c8ea:	fa01 f605 	lsl.w	r6, r1, r5
 800c8ee:	1d72      	adds	r2, r6, #5
 800c8f0:	0092      	lsls	r2, r2, #2
 800c8f2:	4620      	mov	r0, r4
 800c8f4:	f000 fc9d 	bl	800d232 <_calloc_r>
 800c8f8:	b160      	cbz	r0, 800c914 <_Balloc+0x64>
 800c8fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c8fe:	e00e      	b.n	800c91e <_Balloc+0x6e>
 800c900:	2221      	movs	r2, #33	; 0x21
 800c902:	2104      	movs	r1, #4
 800c904:	4620      	mov	r0, r4
 800c906:	f000 fc94 	bl	800d232 <_calloc_r>
 800c90a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c90c:	60f0      	str	r0, [r6, #12]
 800c90e:	68db      	ldr	r3, [r3, #12]
 800c910:	2b00      	cmp	r3, #0
 800c912:	d1e4      	bne.n	800c8de <_Balloc+0x2e>
 800c914:	2000      	movs	r0, #0
 800c916:	bd70      	pop	{r4, r5, r6, pc}
 800c918:	6802      	ldr	r2, [r0, #0]
 800c91a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c91e:	2300      	movs	r3, #0
 800c920:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c924:	e7f7      	b.n	800c916 <_Balloc+0x66>
 800c926:	bf00      	nop
 800c928:	0800e776 	.word	0x0800e776
 800c92c:	0800e874 	.word	0x0800e874

0800c930 <_Bfree>:
 800c930:	b570      	push	{r4, r5, r6, lr}
 800c932:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c934:	4605      	mov	r5, r0
 800c936:	460c      	mov	r4, r1
 800c938:	b976      	cbnz	r6, 800c958 <_Bfree+0x28>
 800c93a:	2010      	movs	r0, #16
 800c93c:	f7fc fcc2 	bl	80092c4 <malloc>
 800c940:	4602      	mov	r2, r0
 800c942:	6268      	str	r0, [r5, #36]	; 0x24
 800c944:	b920      	cbnz	r0, 800c950 <_Bfree+0x20>
 800c946:	4b09      	ldr	r3, [pc, #36]	; (800c96c <_Bfree+0x3c>)
 800c948:	4809      	ldr	r0, [pc, #36]	; (800c970 <_Bfree+0x40>)
 800c94a:	218a      	movs	r1, #138	; 0x8a
 800c94c:	f001 fb84 	bl	800e058 <__assert_func>
 800c950:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c954:	6006      	str	r6, [r0, #0]
 800c956:	60c6      	str	r6, [r0, #12]
 800c958:	b13c      	cbz	r4, 800c96a <_Bfree+0x3a>
 800c95a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c95c:	6862      	ldr	r2, [r4, #4]
 800c95e:	68db      	ldr	r3, [r3, #12]
 800c960:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c964:	6021      	str	r1, [r4, #0]
 800c966:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c96a:	bd70      	pop	{r4, r5, r6, pc}
 800c96c:	0800e776 	.word	0x0800e776
 800c970:	0800e874 	.word	0x0800e874

0800c974 <__multadd>:
 800c974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c978:	690d      	ldr	r5, [r1, #16]
 800c97a:	4607      	mov	r7, r0
 800c97c:	460c      	mov	r4, r1
 800c97e:	461e      	mov	r6, r3
 800c980:	f101 0c14 	add.w	ip, r1, #20
 800c984:	2000      	movs	r0, #0
 800c986:	f8dc 3000 	ldr.w	r3, [ip]
 800c98a:	b299      	uxth	r1, r3
 800c98c:	fb02 6101 	mla	r1, r2, r1, r6
 800c990:	0c1e      	lsrs	r6, r3, #16
 800c992:	0c0b      	lsrs	r3, r1, #16
 800c994:	fb02 3306 	mla	r3, r2, r6, r3
 800c998:	b289      	uxth	r1, r1
 800c99a:	3001      	adds	r0, #1
 800c99c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c9a0:	4285      	cmp	r5, r0
 800c9a2:	f84c 1b04 	str.w	r1, [ip], #4
 800c9a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c9aa:	dcec      	bgt.n	800c986 <__multadd+0x12>
 800c9ac:	b30e      	cbz	r6, 800c9f2 <__multadd+0x7e>
 800c9ae:	68a3      	ldr	r3, [r4, #8]
 800c9b0:	42ab      	cmp	r3, r5
 800c9b2:	dc19      	bgt.n	800c9e8 <__multadd+0x74>
 800c9b4:	6861      	ldr	r1, [r4, #4]
 800c9b6:	4638      	mov	r0, r7
 800c9b8:	3101      	adds	r1, #1
 800c9ba:	f7ff ff79 	bl	800c8b0 <_Balloc>
 800c9be:	4680      	mov	r8, r0
 800c9c0:	b928      	cbnz	r0, 800c9ce <__multadd+0x5a>
 800c9c2:	4602      	mov	r2, r0
 800c9c4:	4b0c      	ldr	r3, [pc, #48]	; (800c9f8 <__multadd+0x84>)
 800c9c6:	480d      	ldr	r0, [pc, #52]	; (800c9fc <__multadd+0x88>)
 800c9c8:	21b5      	movs	r1, #181	; 0xb5
 800c9ca:	f001 fb45 	bl	800e058 <__assert_func>
 800c9ce:	6922      	ldr	r2, [r4, #16]
 800c9d0:	3202      	adds	r2, #2
 800c9d2:	f104 010c 	add.w	r1, r4, #12
 800c9d6:	0092      	lsls	r2, r2, #2
 800c9d8:	300c      	adds	r0, #12
 800c9da:	f7fc fc83 	bl	80092e4 <memcpy>
 800c9de:	4621      	mov	r1, r4
 800c9e0:	4638      	mov	r0, r7
 800c9e2:	f7ff ffa5 	bl	800c930 <_Bfree>
 800c9e6:	4644      	mov	r4, r8
 800c9e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c9ec:	3501      	adds	r5, #1
 800c9ee:	615e      	str	r6, [r3, #20]
 800c9f0:	6125      	str	r5, [r4, #16]
 800c9f2:	4620      	mov	r0, r4
 800c9f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9f8:	0800e7e8 	.word	0x0800e7e8
 800c9fc:	0800e874 	.word	0x0800e874

0800ca00 <__s2b>:
 800ca00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca04:	460c      	mov	r4, r1
 800ca06:	4615      	mov	r5, r2
 800ca08:	461f      	mov	r7, r3
 800ca0a:	2209      	movs	r2, #9
 800ca0c:	3308      	adds	r3, #8
 800ca0e:	4606      	mov	r6, r0
 800ca10:	fb93 f3f2 	sdiv	r3, r3, r2
 800ca14:	2100      	movs	r1, #0
 800ca16:	2201      	movs	r2, #1
 800ca18:	429a      	cmp	r2, r3
 800ca1a:	db09      	blt.n	800ca30 <__s2b+0x30>
 800ca1c:	4630      	mov	r0, r6
 800ca1e:	f7ff ff47 	bl	800c8b0 <_Balloc>
 800ca22:	b940      	cbnz	r0, 800ca36 <__s2b+0x36>
 800ca24:	4602      	mov	r2, r0
 800ca26:	4b19      	ldr	r3, [pc, #100]	; (800ca8c <__s2b+0x8c>)
 800ca28:	4819      	ldr	r0, [pc, #100]	; (800ca90 <__s2b+0x90>)
 800ca2a:	21ce      	movs	r1, #206	; 0xce
 800ca2c:	f001 fb14 	bl	800e058 <__assert_func>
 800ca30:	0052      	lsls	r2, r2, #1
 800ca32:	3101      	adds	r1, #1
 800ca34:	e7f0      	b.n	800ca18 <__s2b+0x18>
 800ca36:	9b08      	ldr	r3, [sp, #32]
 800ca38:	6143      	str	r3, [r0, #20]
 800ca3a:	2d09      	cmp	r5, #9
 800ca3c:	f04f 0301 	mov.w	r3, #1
 800ca40:	6103      	str	r3, [r0, #16]
 800ca42:	dd16      	ble.n	800ca72 <__s2b+0x72>
 800ca44:	f104 0909 	add.w	r9, r4, #9
 800ca48:	46c8      	mov	r8, r9
 800ca4a:	442c      	add	r4, r5
 800ca4c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ca50:	4601      	mov	r1, r0
 800ca52:	3b30      	subs	r3, #48	; 0x30
 800ca54:	220a      	movs	r2, #10
 800ca56:	4630      	mov	r0, r6
 800ca58:	f7ff ff8c 	bl	800c974 <__multadd>
 800ca5c:	45a0      	cmp	r8, r4
 800ca5e:	d1f5      	bne.n	800ca4c <__s2b+0x4c>
 800ca60:	f1a5 0408 	sub.w	r4, r5, #8
 800ca64:	444c      	add	r4, r9
 800ca66:	1b2d      	subs	r5, r5, r4
 800ca68:	1963      	adds	r3, r4, r5
 800ca6a:	42bb      	cmp	r3, r7
 800ca6c:	db04      	blt.n	800ca78 <__s2b+0x78>
 800ca6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca72:	340a      	adds	r4, #10
 800ca74:	2509      	movs	r5, #9
 800ca76:	e7f6      	b.n	800ca66 <__s2b+0x66>
 800ca78:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ca7c:	4601      	mov	r1, r0
 800ca7e:	3b30      	subs	r3, #48	; 0x30
 800ca80:	220a      	movs	r2, #10
 800ca82:	4630      	mov	r0, r6
 800ca84:	f7ff ff76 	bl	800c974 <__multadd>
 800ca88:	e7ee      	b.n	800ca68 <__s2b+0x68>
 800ca8a:	bf00      	nop
 800ca8c:	0800e7e8 	.word	0x0800e7e8
 800ca90:	0800e874 	.word	0x0800e874

0800ca94 <__hi0bits>:
 800ca94:	0c03      	lsrs	r3, r0, #16
 800ca96:	041b      	lsls	r3, r3, #16
 800ca98:	b9d3      	cbnz	r3, 800cad0 <__hi0bits+0x3c>
 800ca9a:	0400      	lsls	r0, r0, #16
 800ca9c:	2310      	movs	r3, #16
 800ca9e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800caa2:	bf04      	itt	eq
 800caa4:	0200      	lsleq	r0, r0, #8
 800caa6:	3308      	addeq	r3, #8
 800caa8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800caac:	bf04      	itt	eq
 800caae:	0100      	lsleq	r0, r0, #4
 800cab0:	3304      	addeq	r3, #4
 800cab2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800cab6:	bf04      	itt	eq
 800cab8:	0080      	lsleq	r0, r0, #2
 800caba:	3302      	addeq	r3, #2
 800cabc:	2800      	cmp	r0, #0
 800cabe:	db05      	blt.n	800cacc <__hi0bits+0x38>
 800cac0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800cac4:	f103 0301 	add.w	r3, r3, #1
 800cac8:	bf08      	it	eq
 800caca:	2320      	moveq	r3, #32
 800cacc:	4618      	mov	r0, r3
 800cace:	4770      	bx	lr
 800cad0:	2300      	movs	r3, #0
 800cad2:	e7e4      	b.n	800ca9e <__hi0bits+0xa>

0800cad4 <__lo0bits>:
 800cad4:	6803      	ldr	r3, [r0, #0]
 800cad6:	f013 0207 	ands.w	r2, r3, #7
 800cada:	4601      	mov	r1, r0
 800cadc:	d00b      	beq.n	800caf6 <__lo0bits+0x22>
 800cade:	07da      	lsls	r2, r3, #31
 800cae0:	d423      	bmi.n	800cb2a <__lo0bits+0x56>
 800cae2:	0798      	lsls	r0, r3, #30
 800cae4:	bf49      	itett	mi
 800cae6:	085b      	lsrmi	r3, r3, #1
 800cae8:	089b      	lsrpl	r3, r3, #2
 800caea:	2001      	movmi	r0, #1
 800caec:	600b      	strmi	r3, [r1, #0]
 800caee:	bf5c      	itt	pl
 800caf0:	600b      	strpl	r3, [r1, #0]
 800caf2:	2002      	movpl	r0, #2
 800caf4:	4770      	bx	lr
 800caf6:	b298      	uxth	r0, r3
 800caf8:	b9a8      	cbnz	r0, 800cb26 <__lo0bits+0x52>
 800cafa:	0c1b      	lsrs	r3, r3, #16
 800cafc:	2010      	movs	r0, #16
 800cafe:	b2da      	uxtb	r2, r3
 800cb00:	b90a      	cbnz	r2, 800cb06 <__lo0bits+0x32>
 800cb02:	3008      	adds	r0, #8
 800cb04:	0a1b      	lsrs	r3, r3, #8
 800cb06:	071a      	lsls	r2, r3, #28
 800cb08:	bf04      	itt	eq
 800cb0a:	091b      	lsreq	r3, r3, #4
 800cb0c:	3004      	addeq	r0, #4
 800cb0e:	079a      	lsls	r2, r3, #30
 800cb10:	bf04      	itt	eq
 800cb12:	089b      	lsreq	r3, r3, #2
 800cb14:	3002      	addeq	r0, #2
 800cb16:	07da      	lsls	r2, r3, #31
 800cb18:	d403      	bmi.n	800cb22 <__lo0bits+0x4e>
 800cb1a:	085b      	lsrs	r3, r3, #1
 800cb1c:	f100 0001 	add.w	r0, r0, #1
 800cb20:	d005      	beq.n	800cb2e <__lo0bits+0x5a>
 800cb22:	600b      	str	r3, [r1, #0]
 800cb24:	4770      	bx	lr
 800cb26:	4610      	mov	r0, r2
 800cb28:	e7e9      	b.n	800cafe <__lo0bits+0x2a>
 800cb2a:	2000      	movs	r0, #0
 800cb2c:	4770      	bx	lr
 800cb2e:	2020      	movs	r0, #32
 800cb30:	4770      	bx	lr
	...

0800cb34 <__i2b>:
 800cb34:	b510      	push	{r4, lr}
 800cb36:	460c      	mov	r4, r1
 800cb38:	2101      	movs	r1, #1
 800cb3a:	f7ff feb9 	bl	800c8b0 <_Balloc>
 800cb3e:	4602      	mov	r2, r0
 800cb40:	b928      	cbnz	r0, 800cb4e <__i2b+0x1a>
 800cb42:	4b05      	ldr	r3, [pc, #20]	; (800cb58 <__i2b+0x24>)
 800cb44:	4805      	ldr	r0, [pc, #20]	; (800cb5c <__i2b+0x28>)
 800cb46:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800cb4a:	f001 fa85 	bl	800e058 <__assert_func>
 800cb4e:	2301      	movs	r3, #1
 800cb50:	6144      	str	r4, [r0, #20]
 800cb52:	6103      	str	r3, [r0, #16]
 800cb54:	bd10      	pop	{r4, pc}
 800cb56:	bf00      	nop
 800cb58:	0800e7e8 	.word	0x0800e7e8
 800cb5c:	0800e874 	.word	0x0800e874

0800cb60 <__multiply>:
 800cb60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb64:	4691      	mov	r9, r2
 800cb66:	690a      	ldr	r2, [r1, #16]
 800cb68:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cb6c:	429a      	cmp	r2, r3
 800cb6e:	bfb8      	it	lt
 800cb70:	460b      	movlt	r3, r1
 800cb72:	460c      	mov	r4, r1
 800cb74:	bfbc      	itt	lt
 800cb76:	464c      	movlt	r4, r9
 800cb78:	4699      	movlt	r9, r3
 800cb7a:	6927      	ldr	r7, [r4, #16]
 800cb7c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cb80:	68a3      	ldr	r3, [r4, #8]
 800cb82:	6861      	ldr	r1, [r4, #4]
 800cb84:	eb07 060a 	add.w	r6, r7, sl
 800cb88:	42b3      	cmp	r3, r6
 800cb8a:	b085      	sub	sp, #20
 800cb8c:	bfb8      	it	lt
 800cb8e:	3101      	addlt	r1, #1
 800cb90:	f7ff fe8e 	bl	800c8b0 <_Balloc>
 800cb94:	b930      	cbnz	r0, 800cba4 <__multiply+0x44>
 800cb96:	4602      	mov	r2, r0
 800cb98:	4b44      	ldr	r3, [pc, #272]	; (800ccac <__multiply+0x14c>)
 800cb9a:	4845      	ldr	r0, [pc, #276]	; (800ccb0 <__multiply+0x150>)
 800cb9c:	f240 115d 	movw	r1, #349	; 0x15d
 800cba0:	f001 fa5a 	bl	800e058 <__assert_func>
 800cba4:	f100 0514 	add.w	r5, r0, #20
 800cba8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cbac:	462b      	mov	r3, r5
 800cbae:	2200      	movs	r2, #0
 800cbb0:	4543      	cmp	r3, r8
 800cbb2:	d321      	bcc.n	800cbf8 <__multiply+0x98>
 800cbb4:	f104 0314 	add.w	r3, r4, #20
 800cbb8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800cbbc:	f109 0314 	add.w	r3, r9, #20
 800cbc0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800cbc4:	9202      	str	r2, [sp, #8]
 800cbc6:	1b3a      	subs	r2, r7, r4
 800cbc8:	3a15      	subs	r2, #21
 800cbca:	f022 0203 	bic.w	r2, r2, #3
 800cbce:	3204      	adds	r2, #4
 800cbd0:	f104 0115 	add.w	r1, r4, #21
 800cbd4:	428f      	cmp	r7, r1
 800cbd6:	bf38      	it	cc
 800cbd8:	2204      	movcc	r2, #4
 800cbda:	9201      	str	r2, [sp, #4]
 800cbdc:	9a02      	ldr	r2, [sp, #8]
 800cbde:	9303      	str	r3, [sp, #12]
 800cbe0:	429a      	cmp	r2, r3
 800cbe2:	d80c      	bhi.n	800cbfe <__multiply+0x9e>
 800cbe4:	2e00      	cmp	r6, #0
 800cbe6:	dd03      	ble.n	800cbf0 <__multiply+0x90>
 800cbe8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d05a      	beq.n	800cca6 <__multiply+0x146>
 800cbf0:	6106      	str	r6, [r0, #16]
 800cbf2:	b005      	add	sp, #20
 800cbf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbf8:	f843 2b04 	str.w	r2, [r3], #4
 800cbfc:	e7d8      	b.n	800cbb0 <__multiply+0x50>
 800cbfe:	f8b3 a000 	ldrh.w	sl, [r3]
 800cc02:	f1ba 0f00 	cmp.w	sl, #0
 800cc06:	d024      	beq.n	800cc52 <__multiply+0xf2>
 800cc08:	f104 0e14 	add.w	lr, r4, #20
 800cc0c:	46a9      	mov	r9, r5
 800cc0e:	f04f 0c00 	mov.w	ip, #0
 800cc12:	f85e 2b04 	ldr.w	r2, [lr], #4
 800cc16:	f8d9 1000 	ldr.w	r1, [r9]
 800cc1a:	fa1f fb82 	uxth.w	fp, r2
 800cc1e:	b289      	uxth	r1, r1
 800cc20:	fb0a 110b 	mla	r1, sl, fp, r1
 800cc24:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800cc28:	f8d9 2000 	ldr.w	r2, [r9]
 800cc2c:	4461      	add	r1, ip
 800cc2e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cc32:	fb0a c20b 	mla	r2, sl, fp, ip
 800cc36:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800cc3a:	b289      	uxth	r1, r1
 800cc3c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800cc40:	4577      	cmp	r7, lr
 800cc42:	f849 1b04 	str.w	r1, [r9], #4
 800cc46:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cc4a:	d8e2      	bhi.n	800cc12 <__multiply+0xb2>
 800cc4c:	9a01      	ldr	r2, [sp, #4]
 800cc4e:	f845 c002 	str.w	ip, [r5, r2]
 800cc52:	9a03      	ldr	r2, [sp, #12]
 800cc54:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800cc58:	3304      	adds	r3, #4
 800cc5a:	f1b9 0f00 	cmp.w	r9, #0
 800cc5e:	d020      	beq.n	800cca2 <__multiply+0x142>
 800cc60:	6829      	ldr	r1, [r5, #0]
 800cc62:	f104 0c14 	add.w	ip, r4, #20
 800cc66:	46ae      	mov	lr, r5
 800cc68:	f04f 0a00 	mov.w	sl, #0
 800cc6c:	f8bc b000 	ldrh.w	fp, [ip]
 800cc70:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800cc74:	fb09 220b 	mla	r2, r9, fp, r2
 800cc78:	4492      	add	sl, r2
 800cc7a:	b289      	uxth	r1, r1
 800cc7c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800cc80:	f84e 1b04 	str.w	r1, [lr], #4
 800cc84:	f85c 2b04 	ldr.w	r2, [ip], #4
 800cc88:	f8be 1000 	ldrh.w	r1, [lr]
 800cc8c:	0c12      	lsrs	r2, r2, #16
 800cc8e:	fb09 1102 	mla	r1, r9, r2, r1
 800cc92:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800cc96:	4567      	cmp	r7, ip
 800cc98:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800cc9c:	d8e6      	bhi.n	800cc6c <__multiply+0x10c>
 800cc9e:	9a01      	ldr	r2, [sp, #4]
 800cca0:	50a9      	str	r1, [r5, r2]
 800cca2:	3504      	adds	r5, #4
 800cca4:	e79a      	b.n	800cbdc <__multiply+0x7c>
 800cca6:	3e01      	subs	r6, #1
 800cca8:	e79c      	b.n	800cbe4 <__multiply+0x84>
 800ccaa:	bf00      	nop
 800ccac:	0800e7e8 	.word	0x0800e7e8
 800ccb0:	0800e874 	.word	0x0800e874

0800ccb4 <__pow5mult>:
 800ccb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ccb8:	4615      	mov	r5, r2
 800ccba:	f012 0203 	ands.w	r2, r2, #3
 800ccbe:	4606      	mov	r6, r0
 800ccc0:	460f      	mov	r7, r1
 800ccc2:	d007      	beq.n	800ccd4 <__pow5mult+0x20>
 800ccc4:	4c25      	ldr	r4, [pc, #148]	; (800cd5c <__pow5mult+0xa8>)
 800ccc6:	3a01      	subs	r2, #1
 800ccc8:	2300      	movs	r3, #0
 800ccca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ccce:	f7ff fe51 	bl	800c974 <__multadd>
 800ccd2:	4607      	mov	r7, r0
 800ccd4:	10ad      	asrs	r5, r5, #2
 800ccd6:	d03d      	beq.n	800cd54 <__pow5mult+0xa0>
 800ccd8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ccda:	b97c      	cbnz	r4, 800ccfc <__pow5mult+0x48>
 800ccdc:	2010      	movs	r0, #16
 800ccde:	f7fc faf1 	bl	80092c4 <malloc>
 800cce2:	4602      	mov	r2, r0
 800cce4:	6270      	str	r0, [r6, #36]	; 0x24
 800cce6:	b928      	cbnz	r0, 800ccf4 <__pow5mult+0x40>
 800cce8:	4b1d      	ldr	r3, [pc, #116]	; (800cd60 <__pow5mult+0xac>)
 800ccea:	481e      	ldr	r0, [pc, #120]	; (800cd64 <__pow5mult+0xb0>)
 800ccec:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ccf0:	f001 f9b2 	bl	800e058 <__assert_func>
 800ccf4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ccf8:	6004      	str	r4, [r0, #0]
 800ccfa:	60c4      	str	r4, [r0, #12]
 800ccfc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800cd00:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cd04:	b94c      	cbnz	r4, 800cd1a <__pow5mult+0x66>
 800cd06:	f240 2171 	movw	r1, #625	; 0x271
 800cd0a:	4630      	mov	r0, r6
 800cd0c:	f7ff ff12 	bl	800cb34 <__i2b>
 800cd10:	2300      	movs	r3, #0
 800cd12:	f8c8 0008 	str.w	r0, [r8, #8]
 800cd16:	4604      	mov	r4, r0
 800cd18:	6003      	str	r3, [r0, #0]
 800cd1a:	f04f 0900 	mov.w	r9, #0
 800cd1e:	07eb      	lsls	r3, r5, #31
 800cd20:	d50a      	bpl.n	800cd38 <__pow5mult+0x84>
 800cd22:	4639      	mov	r1, r7
 800cd24:	4622      	mov	r2, r4
 800cd26:	4630      	mov	r0, r6
 800cd28:	f7ff ff1a 	bl	800cb60 <__multiply>
 800cd2c:	4639      	mov	r1, r7
 800cd2e:	4680      	mov	r8, r0
 800cd30:	4630      	mov	r0, r6
 800cd32:	f7ff fdfd 	bl	800c930 <_Bfree>
 800cd36:	4647      	mov	r7, r8
 800cd38:	106d      	asrs	r5, r5, #1
 800cd3a:	d00b      	beq.n	800cd54 <__pow5mult+0xa0>
 800cd3c:	6820      	ldr	r0, [r4, #0]
 800cd3e:	b938      	cbnz	r0, 800cd50 <__pow5mult+0x9c>
 800cd40:	4622      	mov	r2, r4
 800cd42:	4621      	mov	r1, r4
 800cd44:	4630      	mov	r0, r6
 800cd46:	f7ff ff0b 	bl	800cb60 <__multiply>
 800cd4a:	6020      	str	r0, [r4, #0]
 800cd4c:	f8c0 9000 	str.w	r9, [r0]
 800cd50:	4604      	mov	r4, r0
 800cd52:	e7e4      	b.n	800cd1e <__pow5mult+0x6a>
 800cd54:	4638      	mov	r0, r7
 800cd56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd5a:	bf00      	nop
 800cd5c:	0800e9c0 	.word	0x0800e9c0
 800cd60:	0800e776 	.word	0x0800e776
 800cd64:	0800e874 	.word	0x0800e874

0800cd68 <__lshift>:
 800cd68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd6c:	460c      	mov	r4, r1
 800cd6e:	6849      	ldr	r1, [r1, #4]
 800cd70:	6923      	ldr	r3, [r4, #16]
 800cd72:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cd76:	68a3      	ldr	r3, [r4, #8]
 800cd78:	4607      	mov	r7, r0
 800cd7a:	4691      	mov	r9, r2
 800cd7c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cd80:	f108 0601 	add.w	r6, r8, #1
 800cd84:	42b3      	cmp	r3, r6
 800cd86:	db0b      	blt.n	800cda0 <__lshift+0x38>
 800cd88:	4638      	mov	r0, r7
 800cd8a:	f7ff fd91 	bl	800c8b0 <_Balloc>
 800cd8e:	4605      	mov	r5, r0
 800cd90:	b948      	cbnz	r0, 800cda6 <__lshift+0x3e>
 800cd92:	4602      	mov	r2, r0
 800cd94:	4b2a      	ldr	r3, [pc, #168]	; (800ce40 <__lshift+0xd8>)
 800cd96:	482b      	ldr	r0, [pc, #172]	; (800ce44 <__lshift+0xdc>)
 800cd98:	f240 11d9 	movw	r1, #473	; 0x1d9
 800cd9c:	f001 f95c 	bl	800e058 <__assert_func>
 800cda0:	3101      	adds	r1, #1
 800cda2:	005b      	lsls	r3, r3, #1
 800cda4:	e7ee      	b.n	800cd84 <__lshift+0x1c>
 800cda6:	2300      	movs	r3, #0
 800cda8:	f100 0114 	add.w	r1, r0, #20
 800cdac:	f100 0210 	add.w	r2, r0, #16
 800cdb0:	4618      	mov	r0, r3
 800cdb2:	4553      	cmp	r3, sl
 800cdb4:	db37      	blt.n	800ce26 <__lshift+0xbe>
 800cdb6:	6920      	ldr	r0, [r4, #16]
 800cdb8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cdbc:	f104 0314 	add.w	r3, r4, #20
 800cdc0:	f019 091f 	ands.w	r9, r9, #31
 800cdc4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cdc8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800cdcc:	d02f      	beq.n	800ce2e <__lshift+0xc6>
 800cdce:	f1c9 0e20 	rsb	lr, r9, #32
 800cdd2:	468a      	mov	sl, r1
 800cdd4:	f04f 0c00 	mov.w	ip, #0
 800cdd8:	681a      	ldr	r2, [r3, #0]
 800cdda:	fa02 f209 	lsl.w	r2, r2, r9
 800cdde:	ea42 020c 	orr.w	r2, r2, ip
 800cde2:	f84a 2b04 	str.w	r2, [sl], #4
 800cde6:	f853 2b04 	ldr.w	r2, [r3], #4
 800cdea:	4298      	cmp	r0, r3
 800cdec:	fa22 fc0e 	lsr.w	ip, r2, lr
 800cdf0:	d8f2      	bhi.n	800cdd8 <__lshift+0x70>
 800cdf2:	1b03      	subs	r3, r0, r4
 800cdf4:	3b15      	subs	r3, #21
 800cdf6:	f023 0303 	bic.w	r3, r3, #3
 800cdfa:	3304      	adds	r3, #4
 800cdfc:	f104 0215 	add.w	r2, r4, #21
 800ce00:	4290      	cmp	r0, r2
 800ce02:	bf38      	it	cc
 800ce04:	2304      	movcc	r3, #4
 800ce06:	f841 c003 	str.w	ip, [r1, r3]
 800ce0a:	f1bc 0f00 	cmp.w	ip, #0
 800ce0e:	d001      	beq.n	800ce14 <__lshift+0xac>
 800ce10:	f108 0602 	add.w	r6, r8, #2
 800ce14:	3e01      	subs	r6, #1
 800ce16:	4638      	mov	r0, r7
 800ce18:	612e      	str	r6, [r5, #16]
 800ce1a:	4621      	mov	r1, r4
 800ce1c:	f7ff fd88 	bl	800c930 <_Bfree>
 800ce20:	4628      	mov	r0, r5
 800ce22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce26:	f842 0f04 	str.w	r0, [r2, #4]!
 800ce2a:	3301      	adds	r3, #1
 800ce2c:	e7c1      	b.n	800cdb2 <__lshift+0x4a>
 800ce2e:	3904      	subs	r1, #4
 800ce30:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce34:	f841 2f04 	str.w	r2, [r1, #4]!
 800ce38:	4298      	cmp	r0, r3
 800ce3a:	d8f9      	bhi.n	800ce30 <__lshift+0xc8>
 800ce3c:	e7ea      	b.n	800ce14 <__lshift+0xac>
 800ce3e:	bf00      	nop
 800ce40:	0800e7e8 	.word	0x0800e7e8
 800ce44:	0800e874 	.word	0x0800e874

0800ce48 <__mcmp>:
 800ce48:	b530      	push	{r4, r5, lr}
 800ce4a:	6902      	ldr	r2, [r0, #16]
 800ce4c:	690c      	ldr	r4, [r1, #16]
 800ce4e:	1b12      	subs	r2, r2, r4
 800ce50:	d10e      	bne.n	800ce70 <__mcmp+0x28>
 800ce52:	f100 0314 	add.w	r3, r0, #20
 800ce56:	3114      	adds	r1, #20
 800ce58:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ce5c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ce60:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ce64:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ce68:	42a5      	cmp	r5, r4
 800ce6a:	d003      	beq.n	800ce74 <__mcmp+0x2c>
 800ce6c:	d305      	bcc.n	800ce7a <__mcmp+0x32>
 800ce6e:	2201      	movs	r2, #1
 800ce70:	4610      	mov	r0, r2
 800ce72:	bd30      	pop	{r4, r5, pc}
 800ce74:	4283      	cmp	r3, r0
 800ce76:	d3f3      	bcc.n	800ce60 <__mcmp+0x18>
 800ce78:	e7fa      	b.n	800ce70 <__mcmp+0x28>
 800ce7a:	f04f 32ff 	mov.w	r2, #4294967295
 800ce7e:	e7f7      	b.n	800ce70 <__mcmp+0x28>

0800ce80 <__mdiff>:
 800ce80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce84:	460c      	mov	r4, r1
 800ce86:	4606      	mov	r6, r0
 800ce88:	4611      	mov	r1, r2
 800ce8a:	4620      	mov	r0, r4
 800ce8c:	4690      	mov	r8, r2
 800ce8e:	f7ff ffdb 	bl	800ce48 <__mcmp>
 800ce92:	1e05      	subs	r5, r0, #0
 800ce94:	d110      	bne.n	800ceb8 <__mdiff+0x38>
 800ce96:	4629      	mov	r1, r5
 800ce98:	4630      	mov	r0, r6
 800ce9a:	f7ff fd09 	bl	800c8b0 <_Balloc>
 800ce9e:	b930      	cbnz	r0, 800ceae <__mdiff+0x2e>
 800cea0:	4b3a      	ldr	r3, [pc, #232]	; (800cf8c <__mdiff+0x10c>)
 800cea2:	4602      	mov	r2, r0
 800cea4:	f240 2132 	movw	r1, #562	; 0x232
 800cea8:	4839      	ldr	r0, [pc, #228]	; (800cf90 <__mdiff+0x110>)
 800ceaa:	f001 f8d5 	bl	800e058 <__assert_func>
 800ceae:	2301      	movs	r3, #1
 800ceb0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ceb4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ceb8:	bfa4      	itt	ge
 800ceba:	4643      	movge	r3, r8
 800cebc:	46a0      	movge	r8, r4
 800cebe:	4630      	mov	r0, r6
 800cec0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800cec4:	bfa6      	itte	ge
 800cec6:	461c      	movge	r4, r3
 800cec8:	2500      	movge	r5, #0
 800ceca:	2501      	movlt	r5, #1
 800cecc:	f7ff fcf0 	bl	800c8b0 <_Balloc>
 800ced0:	b920      	cbnz	r0, 800cedc <__mdiff+0x5c>
 800ced2:	4b2e      	ldr	r3, [pc, #184]	; (800cf8c <__mdiff+0x10c>)
 800ced4:	4602      	mov	r2, r0
 800ced6:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ceda:	e7e5      	b.n	800cea8 <__mdiff+0x28>
 800cedc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800cee0:	6926      	ldr	r6, [r4, #16]
 800cee2:	60c5      	str	r5, [r0, #12]
 800cee4:	f104 0914 	add.w	r9, r4, #20
 800cee8:	f108 0514 	add.w	r5, r8, #20
 800ceec:	f100 0e14 	add.w	lr, r0, #20
 800cef0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800cef4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800cef8:	f108 0210 	add.w	r2, r8, #16
 800cefc:	46f2      	mov	sl, lr
 800cefe:	2100      	movs	r1, #0
 800cf00:	f859 3b04 	ldr.w	r3, [r9], #4
 800cf04:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800cf08:	fa1f f883 	uxth.w	r8, r3
 800cf0c:	fa11 f18b 	uxtah	r1, r1, fp
 800cf10:	0c1b      	lsrs	r3, r3, #16
 800cf12:	eba1 0808 	sub.w	r8, r1, r8
 800cf16:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cf1a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800cf1e:	fa1f f888 	uxth.w	r8, r8
 800cf22:	1419      	asrs	r1, r3, #16
 800cf24:	454e      	cmp	r6, r9
 800cf26:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800cf2a:	f84a 3b04 	str.w	r3, [sl], #4
 800cf2e:	d8e7      	bhi.n	800cf00 <__mdiff+0x80>
 800cf30:	1b33      	subs	r3, r6, r4
 800cf32:	3b15      	subs	r3, #21
 800cf34:	f023 0303 	bic.w	r3, r3, #3
 800cf38:	3304      	adds	r3, #4
 800cf3a:	3415      	adds	r4, #21
 800cf3c:	42a6      	cmp	r6, r4
 800cf3e:	bf38      	it	cc
 800cf40:	2304      	movcc	r3, #4
 800cf42:	441d      	add	r5, r3
 800cf44:	4473      	add	r3, lr
 800cf46:	469e      	mov	lr, r3
 800cf48:	462e      	mov	r6, r5
 800cf4a:	4566      	cmp	r6, ip
 800cf4c:	d30e      	bcc.n	800cf6c <__mdiff+0xec>
 800cf4e:	f10c 0203 	add.w	r2, ip, #3
 800cf52:	1b52      	subs	r2, r2, r5
 800cf54:	f022 0203 	bic.w	r2, r2, #3
 800cf58:	3d03      	subs	r5, #3
 800cf5a:	45ac      	cmp	ip, r5
 800cf5c:	bf38      	it	cc
 800cf5e:	2200      	movcc	r2, #0
 800cf60:	441a      	add	r2, r3
 800cf62:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800cf66:	b17b      	cbz	r3, 800cf88 <__mdiff+0x108>
 800cf68:	6107      	str	r7, [r0, #16]
 800cf6a:	e7a3      	b.n	800ceb4 <__mdiff+0x34>
 800cf6c:	f856 8b04 	ldr.w	r8, [r6], #4
 800cf70:	fa11 f288 	uxtah	r2, r1, r8
 800cf74:	1414      	asrs	r4, r2, #16
 800cf76:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800cf7a:	b292      	uxth	r2, r2
 800cf7c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800cf80:	f84e 2b04 	str.w	r2, [lr], #4
 800cf84:	1421      	asrs	r1, r4, #16
 800cf86:	e7e0      	b.n	800cf4a <__mdiff+0xca>
 800cf88:	3f01      	subs	r7, #1
 800cf8a:	e7ea      	b.n	800cf62 <__mdiff+0xe2>
 800cf8c:	0800e7e8 	.word	0x0800e7e8
 800cf90:	0800e874 	.word	0x0800e874

0800cf94 <__ulp>:
 800cf94:	b082      	sub	sp, #8
 800cf96:	ed8d 0b00 	vstr	d0, [sp]
 800cf9a:	9b01      	ldr	r3, [sp, #4]
 800cf9c:	4912      	ldr	r1, [pc, #72]	; (800cfe8 <__ulp+0x54>)
 800cf9e:	4019      	ands	r1, r3
 800cfa0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800cfa4:	2900      	cmp	r1, #0
 800cfa6:	dd05      	ble.n	800cfb4 <__ulp+0x20>
 800cfa8:	2200      	movs	r2, #0
 800cfaa:	460b      	mov	r3, r1
 800cfac:	ec43 2b10 	vmov	d0, r2, r3
 800cfb0:	b002      	add	sp, #8
 800cfb2:	4770      	bx	lr
 800cfb4:	4249      	negs	r1, r1
 800cfb6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800cfba:	ea4f 5021 	mov.w	r0, r1, asr #20
 800cfbe:	f04f 0200 	mov.w	r2, #0
 800cfc2:	f04f 0300 	mov.w	r3, #0
 800cfc6:	da04      	bge.n	800cfd2 <__ulp+0x3e>
 800cfc8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800cfcc:	fa41 f300 	asr.w	r3, r1, r0
 800cfd0:	e7ec      	b.n	800cfac <__ulp+0x18>
 800cfd2:	f1a0 0114 	sub.w	r1, r0, #20
 800cfd6:	291e      	cmp	r1, #30
 800cfd8:	bfda      	itte	le
 800cfda:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800cfde:	fa20 f101 	lsrle.w	r1, r0, r1
 800cfe2:	2101      	movgt	r1, #1
 800cfe4:	460a      	mov	r2, r1
 800cfe6:	e7e1      	b.n	800cfac <__ulp+0x18>
 800cfe8:	7ff00000 	.word	0x7ff00000

0800cfec <__b2d>:
 800cfec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfee:	6905      	ldr	r5, [r0, #16]
 800cff0:	f100 0714 	add.w	r7, r0, #20
 800cff4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800cff8:	1f2e      	subs	r6, r5, #4
 800cffa:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800cffe:	4620      	mov	r0, r4
 800d000:	f7ff fd48 	bl	800ca94 <__hi0bits>
 800d004:	f1c0 0320 	rsb	r3, r0, #32
 800d008:	280a      	cmp	r0, #10
 800d00a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800d088 <__b2d+0x9c>
 800d00e:	600b      	str	r3, [r1, #0]
 800d010:	dc14      	bgt.n	800d03c <__b2d+0x50>
 800d012:	f1c0 0e0b 	rsb	lr, r0, #11
 800d016:	fa24 f10e 	lsr.w	r1, r4, lr
 800d01a:	42b7      	cmp	r7, r6
 800d01c:	ea41 030c 	orr.w	r3, r1, ip
 800d020:	bf34      	ite	cc
 800d022:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d026:	2100      	movcs	r1, #0
 800d028:	3015      	adds	r0, #21
 800d02a:	fa04 f000 	lsl.w	r0, r4, r0
 800d02e:	fa21 f10e 	lsr.w	r1, r1, lr
 800d032:	ea40 0201 	orr.w	r2, r0, r1
 800d036:	ec43 2b10 	vmov	d0, r2, r3
 800d03a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d03c:	42b7      	cmp	r7, r6
 800d03e:	bf3a      	itte	cc
 800d040:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d044:	f1a5 0608 	subcc.w	r6, r5, #8
 800d048:	2100      	movcs	r1, #0
 800d04a:	380b      	subs	r0, #11
 800d04c:	d017      	beq.n	800d07e <__b2d+0x92>
 800d04e:	f1c0 0c20 	rsb	ip, r0, #32
 800d052:	fa04 f500 	lsl.w	r5, r4, r0
 800d056:	42be      	cmp	r6, r7
 800d058:	fa21 f40c 	lsr.w	r4, r1, ip
 800d05c:	ea45 0504 	orr.w	r5, r5, r4
 800d060:	bf8c      	ite	hi
 800d062:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800d066:	2400      	movls	r4, #0
 800d068:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800d06c:	fa01 f000 	lsl.w	r0, r1, r0
 800d070:	fa24 f40c 	lsr.w	r4, r4, ip
 800d074:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d078:	ea40 0204 	orr.w	r2, r0, r4
 800d07c:	e7db      	b.n	800d036 <__b2d+0x4a>
 800d07e:	ea44 030c 	orr.w	r3, r4, ip
 800d082:	460a      	mov	r2, r1
 800d084:	e7d7      	b.n	800d036 <__b2d+0x4a>
 800d086:	bf00      	nop
 800d088:	3ff00000 	.word	0x3ff00000

0800d08c <__d2b>:
 800d08c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d090:	4689      	mov	r9, r1
 800d092:	2101      	movs	r1, #1
 800d094:	ec57 6b10 	vmov	r6, r7, d0
 800d098:	4690      	mov	r8, r2
 800d09a:	f7ff fc09 	bl	800c8b0 <_Balloc>
 800d09e:	4604      	mov	r4, r0
 800d0a0:	b930      	cbnz	r0, 800d0b0 <__d2b+0x24>
 800d0a2:	4602      	mov	r2, r0
 800d0a4:	4b25      	ldr	r3, [pc, #148]	; (800d13c <__d2b+0xb0>)
 800d0a6:	4826      	ldr	r0, [pc, #152]	; (800d140 <__d2b+0xb4>)
 800d0a8:	f240 310a 	movw	r1, #778	; 0x30a
 800d0ac:	f000 ffd4 	bl	800e058 <__assert_func>
 800d0b0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d0b4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d0b8:	bb35      	cbnz	r5, 800d108 <__d2b+0x7c>
 800d0ba:	2e00      	cmp	r6, #0
 800d0bc:	9301      	str	r3, [sp, #4]
 800d0be:	d028      	beq.n	800d112 <__d2b+0x86>
 800d0c0:	4668      	mov	r0, sp
 800d0c2:	9600      	str	r6, [sp, #0]
 800d0c4:	f7ff fd06 	bl	800cad4 <__lo0bits>
 800d0c8:	9900      	ldr	r1, [sp, #0]
 800d0ca:	b300      	cbz	r0, 800d10e <__d2b+0x82>
 800d0cc:	9a01      	ldr	r2, [sp, #4]
 800d0ce:	f1c0 0320 	rsb	r3, r0, #32
 800d0d2:	fa02 f303 	lsl.w	r3, r2, r3
 800d0d6:	430b      	orrs	r3, r1
 800d0d8:	40c2      	lsrs	r2, r0
 800d0da:	6163      	str	r3, [r4, #20]
 800d0dc:	9201      	str	r2, [sp, #4]
 800d0de:	9b01      	ldr	r3, [sp, #4]
 800d0e0:	61a3      	str	r3, [r4, #24]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	bf14      	ite	ne
 800d0e6:	2202      	movne	r2, #2
 800d0e8:	2201      	moveq	r2, #1
 800d0ea:	6122      	str	r2, [r4, #16]
 800d0ec:	b1d5      	cbz	r5, 800d124 <__d2b+0x98>
 800d0ee:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d0f2:	4405      	add	r5, r0
 800d0f4:	f8c9 5000 	str.w	r5, [r9]
 800d0f8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d0fc:	f8c8 0000 	str.w	r0, [r8]
 800d100:	4620      	mov	r0, r4
 800d102:	b003      	add	sp, #12
 800d104:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d108:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d10c:	e7d5      	b.n	800d0ba <__d2b+0x2e>
 800d10e:	6161      	str	r1, [r4, #20]
 800d110:	e7e5      	b.n	800d0de <__d2b+0x52>
 800d112:	a801      	add	r0, sp, #4
 800d114:	f7ff fcde 	bl	800cad4 <__lo0bits>
 800d118:	9b01      	ldr	r3, [sp, #4]
 800d11a:	6163      	str	r3, [r4, #20]
 800d11c:	2201      	movs	r2, #1
 800d11e:	6122      	str	r2, [r4, #16]
 800d120:	3020      	adds	r0, #32
 800d122:	e7e3      	b.n	800d0ec <__d2b+0x60>
 800d124:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d128:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d12c:	f8c9 0000 	str.w	r0, [r9]
 800d130:	6918      	ldr	r0, [r3, #16]
 800d132:	f7ff fcaf 	bl	800ca94 <__hi0bits>
 800d136:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d13a:	e7df      	b.n	800d0fc <__d2b+0x70>
 800d13c:	0800e7e8 	.word	0x0800e7e8
 800d140:	0800e874 	.word	0x0800e874

0800d144 <__ratio>:
 800d144:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d148:	4688      	mov	r8, r1
 800d14a:	4669      	mov	r1, sp
 800d14c:	4681      	mov	r9, r0
 800d14e:	f7ff ff4d 	bl	800cfec <__b2d>
 800d152:	a901      	add	r1, sp, #4
 800d154:	4640      	mov	r0, r8
 800d156:	ec55 4b10 	vmov	r4, r5, d0
 800d15a:	f7ff ff47 	bl	800cfec <__b2d>
 800d15e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d162:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d166:	eba3 0c02 	sub.w	ip, r3, r2
 800d16a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d16e:	1a9b      	subs	r3, r3, r2
 800d170:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d174:	ec51 0b10 	vmov	r0, r1, d0
 800d178:	2b00      	cmp	r3, #0
 800d17a:	bfd6      	itet	le
 800d17c:	460a      	movle	r2, r1
 800d17e:	462a      	movgt	r2, r5
 800d180:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d184:	468b      	mov	fp, r1
 800d186:	462f      	mov	r7, r5
 800d188:	bfd4      	ite	le
 800d18a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d18e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d192:	4620      	mov	r0, r4
 800d194:	ee10 2a10 	vmov	r2, s0
 800d198:	465b      	mov	r3, fp
 800d19a:	4639      	mov	r1, r7
 800d19c:	f7f3 fb6e 	bl	800087c <__aeabi_ddiv>
 800d1a0:	ec41 0b10 	vmov	d0, r0, r1
 800d1a4:	b003      	add	sp, #12
 800d1a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d1aa <__copybits>:
 800d1aa:	3901      	subs	r1, #1
 800d1ac:	b570      	push	{r4, r5, r6, lr}
 800d1ae:	1149      	asrs	r1, r1, #5
 800d1b0:	6914      	ldr	r4, [r2, #16]
 800d1b2:	3101      	adds	r1, #1
 800d1b4:	f102 0314 	add.w	r3, r2, #20
 800d1b8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d1bc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d1c0:	1f05      	subs	r5, r0, #4
 800d1c2:	42a3      	cmp	r3, r4
 800d1c4:	d30c      	bcc.n	800d1e0 <__copybits+0x36>
 800d1c6:	1aa3      	subs	r3, r4, r2
 800d1c8:	3b11      	subs	r3, #17
 800d1ca:	f023 0303 	bic.w	r3, r3, #3
 800d1ce:	3211      	adds	r2, #17
 800d1d0:	42a2      	cmp	r2, r4
 800d1d2:	bf88      	it	hi
 800d1d4:	2300      	movhi	r3, #0
 800d1d6:	4418      	add	r0, r3
 800d1d8:	2300      	movs	r3, #0
 800d1da:	4288      	cmp	r0, r1
 800d1dc:	d305      	bcc.n	800d1ea <__copybits+0x40>
 800d1de:	bd70      	pop	{r4, r5, r6, pc}
 800d1e0:	f853 6b04 	ldr.w	r6, [r3], #4
 800d1e4:	f845 6f04 	str.w	r6, [r5, #4]!
 800d1e8:	e7eb      	b.n	800d1c2 <__copybits+0x18>
 800d1ea:	f840 3b04 	str.w	r3, [r0], #4
 800d1ee:	e7f4      	b.n	800d1da <__copybits+0x30>

0800d1f0 <__any_on>:
 800d1f0:	f100 0214 	add.w	r2, r0, #20
 800d1f4:	6900      	ldr	r0, [r0, #16]
 800d1f6:	114b      	asrs	r3, r1, #5
 800d1f8:	4298      	cmp	r0, r3
 800d1fa:	b510      	push	{r4, lr}
 800d1fc:	db11      	blt.n	800d222 <__any_on+0x32>
 800d1fe:	dd0a      	ble.n	800d216 <__any_on+0x26>
 800d200:	f011 011f 	ands.w	r1, r1, #31
 800d204:	d007      	beq.n	800d216 <__any_on+0x26>
 800d206:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d20a:	fa24 f001 	lsr.w	r0, r4, r1
 800d20e:	fa00 f101 	lsl.w	r1, r0, r1
 800d212:	428c      	cmp	r4, r1
 800d214:	d10b      	bne.n	800d22e <__any_on+0x3e>
 800d216:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d21a:	4293      	cmp	r3, r2
 800d21c:	d803      	bhi.n	800d226 <__any_on+0x36>
 800d21e:	2000      	movs	r0, #0
 800d220:	bd10      	pop	{r4, pc}
 800d222:	4603      	mov	r3, r0
 800d224:	e7f7      	b.n	800d216 <__any_on+0x26>
 800d226:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d22a:	2900      	cmp	r1, #0
 800d22c:	d0f5      	beq.n	800d21a <__any_on+0x2a>
 800d22e:	2001      	movs	r0, #1
 800d230:	e7f6      	b.n	800d220 <__any_on+0x30>

0800d232 <_calloc_r>:
 800d232:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d234:	fba1 2402 	umull	r2, r4, r1, r2
 800d238:	b94c      	cbnz	r4, 800d24e <_calloc_r+0x1c>
 800d23a:	4611      	mov	r1, r2
 800d23c:	9201      	str	r2, [sp, #4]
 800d23e:	f7fc f8db 	bl	80093f8 <_malloc_r>
 800d242:	9a01      	ldr	r2, [sp, #4]
 800d244:	4605      	mov	r5, r0
 800d246:	b930      	cbnz	r0, 800d256 <_calloc_r+0x24>
 800d248:	4628      	mov	r0, r5
 800d24a:	b003      	add	sp, #12
 800d24c:	bd30      	pop	{r4, r5, pc}
 800d24e:	220c      	movs	r2, #12
 800d250:	6002      	str	r2, [r0, #0]
 800d252:	2500      	movs	r5, #0
 800d254:	e7f8      	b.n	800d248 <_calloc_r+0x16>
 800d256:	4621      	mov	r1, r4
 800d258:	f7fc f852 	bl	8009300 <memset>
 800d25c:	e7f4      	b.n	800d248 <_calloc_r+0x16>

0800d25e <__ssputs_r>:
 800d25e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d262:	688e      	ldr	r6, [r1, #8]
 800d264:	429e      	cmp	r6, r3
 800d266:	4682      	mov	sl, r0
 800d268:	460c      	mov	r4, r1
 800d26a:	4690      	mov	r8, r2
 800d26c:	461f      	mov	r7, r3
 800d26e:	d838      	bhi.n	800d2e2 <__ssputs_r+0x84>
 800d270:	898a      	ldrh	r2, [r1, #12]
 800d272:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d276:	d032      	beq.n	800d2de <__ssputs_r+0x80>
 800d278:	6825      	ldr	r5, [r4, #0]
 800d27a:	6909      	ldr	r1, [r1, #16]
 800d27c:	eba5 0901 	sub.w	r9, r5, r1
 800d280:	6965      	ldr	r5, [r4, #20]
 800d282:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d286:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d28a:	3301      	adds	r3, #1
 800d28c:	444b      	add	r3, r9
 800d28e:	106d      	asrs	r5, r5, #1
 800d290:	429d      	cmp	r5, r3
 800d292:	bf38      	it	cc
 800d294:	461d      	movcc	r5, r3
 800d296:	0553      	lsls	r3, r2, #21
 800d298:	d531      	bpl.n	800d2fe <__ssputs_r+0xa0>
 800d29a:	4629      	mov	r1, r5
 800d29c:	f7fc f8ac 	bl	80093f8 <_malloc_r>
 800d2a0:	4606      	mov	r6, r0
 800d2a2:	b950      	cbnz	r0, 800d2ba <__ssputs_r+0x5c>
 800d2a4:	230c      	movs	r3, #12
 800d2a6:	f8ca 3000 	str.w	r3, [sl]
 800d2aa:	89a3      	ldrh	r3, [r4, #12]
 800d2ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d2b0:	81a3      	strh	r3, [r4, #12]
 800d2b2:	f04f 30ff 	mov.w	r0, #4294967295
 800d2b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2ba:	6921      	ldr	r1, [r4, #16]
 800d2bc:	464a      	mov	r2, r9
 800d2be:	f7fc f811 	bl	80092e4 <memcpy>
 800d2c2:	89a3      	ldrh	r3, [r4, #12]
 800d2c4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d2c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d2cc:	81a3      	strh	r3, [r4, #12]
 800d2ce:	6126      	str	r6, [r4, #16]
 800d2d0:	6165      	str	r5, [r4, #20]
 800d2d2:	444e      	add	r6, r9
 800d2d4:	eba5 0509 	sub.w	r5, r5, r9
 800d2d8:	6026      	str	r6, [r4, #0]
 800d2da:	60a5      	str	r5, [r4, #8]
 800d2dc:	463e      	mov	r6, r7
 800d2de:	42be      	cmp	r6, r7
 800d2e0:	d900      	bls.n	800d2e4 <__ssputs_r+0x86>
 800d2e2:	463e      	mov	r6, r7
 800d2e4:	6820      	ldr	r0, [r4, #0]
 800d2e6:	4632      	mov	r2, r6
 800d2e8:	4641      	mov	r1, r8
 800d2ea:	f000 ff07 	bl	800e0fc <memmove>
 800d2ee:	68a3      	ldr	r3, [r4, #8]
 800d2f0:	1b9b      	subs	r3, r3, r6
 800d2f2:	60a3      	str	r3, [r4, #8]
 800d2f4:	6823      	ldr	r3, [r4, #0]
 800d2f6:	4433      	add	r3, r6
 800d2f8:	6023      	str	r3, [r4, #0]
 800d2fa:	2000      	movs	r0, #0
 800d2fc:	e7db      	b.n	800d2b6 <__ssputs_r+0x58>
 800d2fe:	462a      	mov	r2, r5
 800d300:	f000 ff16 	bl	800e130 <_realloc_r>
 800d304:	4606      	mov	r6, r0
 800d306:	2800      	cmp	r0, #0
 800d308:	d1e1      	bne.n	800d2ce <__ssputs_r+0x70>
 800d30a:	6921      	ldr	r1, [r4, #16]
 800d30c:	4650      	mov	r0, sl
 800d30e:	f7fc f807 	bl	8009320 <_free_r>
 800d312:	e7c7      	b.n	800d2a4 <__ssputs_r+0x46>

0800d314 <_svfiprintf_r>:
 800d314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d318:	4698      	mov	r8, r3
 800d31a:	898b      	ldrh	r3, [r1, #12]
 800d31c:	061b      	lsls	r3, r3, #24
 800d31e:	b09d      	sub	sp, #116	; 0x74
 800d320:	4607      	mov	r7, r0
 800d322:	460d      	mov	r5, r1
 800d324:	4614      	mov	r4, r2
 800d326:	d50e      	bpl.n	800d346 <_svfiprintf_r+0x32>
 800d328:	690b      	ldr	r3, [r1, #16]
 800d32a:	b963      	cbnz	r3, 800d346 <_svfiprintf_r+0x32>
 800d32c:	2140      	movs	r1, #64	; 0x40
 800d32e:	f7fc f863 	bl	80093f8 <_malloc_r>
 800d332:	6028      	str	r0, [r5, #0]
 800d334:	6128      	str	r0, [r5, #16]
 800d336:	b920      	cbnz	r0, 800d342 <_svfiprintf_r+0x2e>
 800d338:	230c      	movs	r3, #12
 800d33a:	603b      	str	r3, [r7, #0]
 800d33c:	f04f 30ff 	mov.w	r0, #4294967295
 800d340:	e0d1      	b.n	800d4e6 <_svfiprintf_r+0x1d2>
 800d342:	2340      	movs	r3, #64	; 0x40
 800d344:	616b      	str	r3, [r5, #20]
 800d346:	2300      	movs	r3, #0
 800d348:	9309      	str	r3, [sp, #36]	; 0x24
 800d34a:	2320      	movs	r3, #32
 800d34c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d350:	f8cd 800c 	str.w	r8, [sp, #12]
 800d354:	2330      	movs	r3, #48	; 0x30
 800d356:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d500 <_svfiprintf_r+0x1ec>
 800d35a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d35e:	f04f 0901 	mov.w	r9, #1
 800d362:	4623      	mov	r3, r4
 800d364:	469a      	mov	sl, r3
 800d366:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d36a:	b10a      	cbz	r2, 800d370 <_svfiprintf_r+0x5c>
 800d36c:	2a25      	cmp	r2, #37	; 0x25
 800d36e:	d1f9      	bne.n	800d364 <_svfiprintf_r+0x50>
 800d370:	ebba 0b04 	subs.w	fp, sl, r4
 800d374:	d00b      	beq.n	800d38e <_svfiprintf_r+0x7a>
 800d376:	465b      	mov	r3, fp
 800d378:	4622      	mov	r2, r4
 800d37a:	4629      	mov	r1, r5
 800d37c:	4638      	mov	r0, r7
 800d37e:	f7ff ff6e 	bl	800d25e <__ssputs_r>
 800d382:	3001      	adds	r0, #1
 800d384:	f000 80aa 	beq.w	800d4dc <_svfiprintf_r+0x1c8>
 800d388:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d38a:	445a      	add	r2, fp
 800d38c:	9209      	str	r2, [sp, #36]	; 0x24
 800d38e:	f89a 3000 	ldrb.w	r3, [sl]
 800d392:	2b00      	cmp	r3, #0
 800d394:	f000 80a2 	beq.w	800d4dc <_svfiprintf_r+0x1c8>
 800d398:	2300      	movs	r3, #0
 800d39a:	f04f 32ff 	mov.w	r2, #4294967295
 800d39e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d3a2:	f10a 0a01 	add.w	sl, sl, #1
 800d3a6:	9304      	str	r3, [sp, #16]
 800d3a8:	9307      	str	r3, [sp, #28]
 800d3aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d3ae:	931a      	str	r3, [sp, #104]	; 0x68
 800d3b0:	4654      	mov	r4, sl
 800d3b2:	2205      	movs	r2, #5
 800d3b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3b8:	4851      	ldr	r0, [pc, #324]	; (800d500 <_svfiprintf_r+0x1ec>)
 800d3ba:	f7f2 ff29 	bl	8000210 <memchr>
 800d3be:	9a04      	ldr	r2, [sp, #16]
 800d3c0:	b9d8      	cbnz	r0, 800d3fa <_svfiprintf_r+0xe6>
 800d3c2:	06d0      	lsls	r0, r2, #27
 800d3c4:	bf44      	itt	mi
 800d3c6:	2320      	movmi	r3, #32
 800d3c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d3cc:	0711      	lsls	r1, r2, #28
 800d3ce:	bf44      	itt	mi
 800d3d0:	232b      	movmi	r3, #43	; 0x2b
 800d3d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d3d6:	f89a 3000 	ldrb.w	r3, [sl]
 800d3da:	2b2a      	cmp	r3, #42	; 0x2a
 800d3dc:	d015      	beq.n	800d40a <_svfiprintf_r+0xf6>
 800d3de:	9a07      	ldr	r2, [sp, #28]
 800d3e0:	4654      	mov	r4, sl
 800d3e2:	2000      	movs	r0, #0
 800d3e4:	f04f 0c0a 	mov.w	ip, #10
 800d3e8:	4621      	mov	r1, r4
 800d3ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d3ee:	3b30      	subs	r3, #48	; 0x30
 800d3f0:	2b09      	cmp	r3, #9
 800d3f2:	d94e      	bls.n	800d492 <_svfiprintf_r+0x17e>
 800d3f4:	b1b0      	cbz	r0, 800d424 <_svfiprintf_r+0x110>
 800d3f6:	9207      	str	r2, [sp, #28]
 800d3f8:	e014      	b.n	800d424 <_svfiprintf_r+0x110>
 800d3fa:	eba0 0308 	sub.w	r3, r0, r8
 800d3fe:	fa09 f303 	lsl.w	r3, r9, r3
 800d402:	4313      	orrs	r3, r2
 800d404:	9304      	str	r3, [sp, #16]
 800d406:	46a2      	mov	sl, r4
 800d408:	e7d2      	b.n	800d3b0 <_svfiprintf_r+0x9c>
 800d40a:	9b03      	ldr	r3, [sp, #12]
 800d40c:	1d19      	adds	r1, r3, #4
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	9103      	str	r1, [sp, #12]
 800d412:	2b00      	cmp	r3, #0
 800d414:	bfbb      	ittet	lt
 800d416:	425b      	neglt	r3, r3
 800d418:	f042 0202 	orrlt.w	r2, r2, #2
 800d41c:	9307      	strge	r3, [sp, #28]
 800d41e:	9307      	strlt	r3, [sp, #28]
 800d420:	bfb8      	it	lt
 800d422:	9204      	strlt	r2, [sp, #16]
 800d424:	7823      	ldrb	r3, [r4, #0]
 800d426:	2b2e      	cmp	r3, #46	; 0x2e
 800d428:	d10c      	bne.n	800d444 <_svfiprintf_r+0x130>
 800d42a:	7863      	ldrb	r3, [r4, #1]
 800d42c:	2b2a      	cmp	r3, #42	; 0x2a
 800d42e:	d135      	bne.n	800d49c <_svfiprintf_r+0x188>
 800d430:	9b03      	ldr	r3, [sp, #12]
 800d432:	1d1a      	adds	r2, r3, #4
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	9203      	str	r2, [sp, #12]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	bfb8      	it	lt
 800d43c:	f04f 33ff 	movlt.w	r3, #4294967295
 800d440:	3402      	adds	r4, #2
 800d442:	9305      	str	r3, [sp, #20]
 800d444:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d510 <_svfiprintf_r+0x1fc>
 800d448:	7821      	ldrb	r1, [r4, #0]
 800d44a:	2203      	movs	r2, #3
 800d44c:	4650      	mov	r0, sl
 800d44e:	f7f2 fedf 	bl	8000210 <memchr>
 800d452:	b140      	cbz	r0, 800d466 <_svfiprintf_r+0x152>
 800d454:	2340      	movs	r3, #64	; 0x40
 800d456:	eba0 000a 	sub.w	r0, r0, sl
 800d45a:	fa03 f000 	lsl.w	r0, r3, r0
 800d45e:	9b04      	ldr	r3, [sp, #16]
 800d460:	4303      	orrs	r3, r0
 800d462:	3401      	adds	r4, #1
 800d464:	9304      	str	r3, [sp, #16]
 800d466:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d46a:	4826      	ldr	r0, [pc, #152]	; (800d504 <_svfiprintf_r+0x1f0>)
 800d46c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d470:	2206      	movs	r2, #6
 800d472:	f7f2 fecd 	bl	8000210 <memchr>
 800d476:	2800      	cmp	r0, #0
 800d478:	d038      	beq.n	800d4ec <_svfiprintf_r+0x1d8>
 800d47a:	4b23      	ldr	r3, [pc, #140]	; (800d508 <_svfiprintf_r+0x1f4>)
 800d47c:	bb1b      	cbnz	r3, 800d4c6 <_svfiprintf_r+0x1b2>
 800d47e:	9b03      	ldr	r3, [sp, #12]
 800d480:	3307      	adds	r3, #7
 800d482:	f023 0307 	bic.w	r3, r3, #7
 800d486:	3308      	adds	r3, #8
 800d488:	9303      	str	r3, [sp, #12]
 800d48a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d48c:	4433      	add	r3, r6
 800d48e:	9309      	str	r3, [sp, #36]	; 0x24
 800d490:	e767      	b.n	800d362 <_svfiprintf_r+0x4e>
 800d492:	fb0c 3202 	mla	r2, ip, r2, r3
 800d496:	460c      	mov	r4, r1
 800d498:	2001      	movs	r0, #1
 800d49a:	e7a5      	b.n	800d3e8 <_svfiprintf_r+0xd4>
 800d49c:	2300      	movs	r3, #0
 800d49e:	3401      	adds	r4, #1
 800d4a0:	9305      	str	r3, [sp, #20]
 800d4a2:	4619      	mov	r1, r3
 800d4a4:	f04f 0c0a 	mov.w	ip, #10
 800d4a8:	4620      	mov	r0, r4
 800d4aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d4ae:	3a30      	subs	r2, #48	; 0x30
 800d4b0:	2a09      	cmp	r2, #9
 800d4b2:	d903      	bls.n	800d4bc <_svfiprintf_r+0x1a8>
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d0c5      	beq.n	800d444 <_svfiprintf_r+0x130>
 800d4b8:	9105      	str	r1, [sp, #20]
 800d4ba:	e7c3      	b.n	800d444 <_svfiprintf_r+0x130>
 800d4bc:	fb0c 2101 	mla	r1, ip, r1, r2
 800d4c0:	4604      	mov	r4, r0
 800d4c2:	2301      	movs	r3, #1
 800d4c4:	e7f0      	b.n	800d4a8 <_svfiprintf_r+0x194>
 800d4c6:	ab03      	add	r3, sp, #12
 800d4c8:	9300      	str	r3, [sp, #0]
 800d4ca:	462a      	mov	r2, r5
 800d4cc:	4b0f      	ldr	r3, [pc, #60]	; (800d50c <_svfiprintf_r+0x1f8>)
 800d4ce:	a904      	add	r1, sp, #16
 800d4d0:	4638      	mov	r0, r7
 800d4d2:	f7fc f8ad 	bl	8009630 <_printf_float>
 800d4d6:	1c42      	adds	r2, r0, #1
 800d4d8:	4606      	mov	r6, r0
 800d4da:	d1d6      	bne.n	800d48a <_svfiprintf_r+0x176>
 800d4dc:	89ab      	ldrh	r3, [r5, #12]
 800d4de:	065b      	lsls	r3, r3, #25
 800d4e0:	f53f af2c 	bmi.w	800d33c <_svfiprintf_r+0x28>
 800d4e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d4e6:	b01d      	add	sp, #116	; 0x74
 800d4e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4ec:	ab03      	add	r3, sp, #12
 800d4ee:	9300      	str	r3, [sp, #0]
 800d4f0:	462a      	mov	r2, r5
 800d4f2:	4b06      	ldr	r3, [pc, #24]	; (800d50c <_svfiprintf_r+0x1f8>)
 800d4f4:	a904      	add	r1, sp, #16
 800d4f6:	4638      	mov	r0, r7
 800d4f8:	f7fc fb3e 	bl	8009b78 <_printf_i>
 800d4fc:	e7eb      	b.n	800d4d6 <_svfiprintf_r+0x1c2>
 800d4fe:	bf00      	nop
 800d500:	0800e9cc 	.word	0x0800e9cc
 800d504:	0800e9d6 	.word	0x0800e9d6
 800d508:	08009631 	.word	0x08009631
 800d50c:	0800d25f 	.word	0x0800d25f
 800d510:	0800e9d2 	.word	0x0800e9d2

0800d514 <_sungetc_r>:
 800d514:	b538      	push	{r3, r4, r5, lr}
 800d516:	1c4b      	adds	r3, r1, #1
 800d518:	4614      	mov	r4, r2
 800d51a:	d103      	bne.n	800d524 <_sungetc_r+0x10>
 800d51c:	f04f 35ff 	mov.w	r5, #4294967295
 800d520:	4628      	mov	r0, r5
 800d522:	bd38      	pop	{r3, r4, r5, pc}
 800d524:	8993      	ldrh	r3, [r2, #12]
 800d526:	f023 0320 	bic.w	r3, r3, #32
 800d52a:	8193      	strh	r3, [r2, #12]
 800d52c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d52e:	6852      	ldr	r2, [r2, #4]
 800d530:	b2cd      	uxtb	r5, r1
 800d532:	b18b      	cbz	r3, 800d558 <_sungetc_r+0x44>
 800d534:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d536:	4293      	cmp	r3, r2
 800d538:	dd08      	ble.n	800d54c <_sungetc_r+0x38>
 800d53a:	6823      	ldr	r3, [r4, #0]
 800d53c:	1e5a      	subs	r2, r3, #1
 800d53e:	6022      	str	r2, [r4, #0]
 800d540:	f803 5c01 	strb.w	r5, [r3, #-1]
 800d544:	6863      	ldr	r3, [r4, #4]
 800d546:	3301      	adds	r3, #1
 800d548:	6063      	str	r3, [r4, #4]
 800d54a:	e7e9      	b.n	800d520 <_sungetc_r+0xc>
 800d54c:	4621      	mov	r1, r4
 800d54e:	f000 fd3b 	bl	800dfc8 <__submore>
 800d552:	2800      	cmp	r0, #0
 800d554:	d0f1      	beq.n	800d53a <_sungetc_r+0x26>
 800d556:	e7e1      	b.n	800d51c <_sungetc_r+0x8>
 800d558:	6921      	ldr	r1, [r4, #16]
 800d55a:	6823      	ldr	r3, [r4, #0]
 800d55c:	b151      	cbz	r1, 800d574 <_sungetc_r+0x60>
 800d55e:	4299      	cmp	r1, r3
 800d560:	d208      	bcs.n	800d574 <_sungetc_r+0x60>
 800d562:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800d566:	42a9      	cmp	r1, r5
 800d568:	d104      	bne.n	800d574 <_sungetc_r+0x60>
 800d56a:	3b01      	subs	r3, #1
 800d56c:	3201      	adds	r2, #1
 800d56e:	6023      	str	r3, [r4, #0]
 800d570:	6062      	str	r2, [r4, #4]
 800d572:	e7d5      	b.n	800d520 <_sungetc_r+0xc>
 800d574:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800d578:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d57c:	6363      	str	r3, [r4, #52]	; 0x34
 800d57e:	2303      	movs	r3, #3
 800d580:	63a3      	str	r3, [r4, #56]	; 0x38
 800d582:	4623      	mov	r3, r4
 800d584:	f803 5f46 	strb.w	r5, [r3, #70]!
 800d588:	6023      	str	r3, [r4, #0]
 800d58a:	2301      	movs	r3, #1
 800d58c:	e7dc      	b.n	800d548 <_sungetc_r+0x34>

0800d58e <__ssrefill_r>:
 800d58e:	b510      	push	{r4, lr}
 800d590:	460c      	mov	r4, r1
 800d592:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800d594:	b169      	cbz	r1, 800d5b2 <__ssrefill_r+0x24>
 800d596:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d59a:	4299      	cmp	r1, r3
 800d59c:	d001      	beq.n	800d5a2 <__ssrefill_r+0x14>
 800d59e:	f7fb febf 	bl	8009320 <_free_r>
 800d5a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d5a4:	6063      	str	r3, [r4, #4]
 800d5a6:	2000      	movs	r0, #0
 800d5a8:	6360      	str	r0, [r4, #52]	; 0x34
 800d5aa:	b113      	cbz	r3, 800d5b2 <__ssrefill_r+0x24>
 800d5ac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d5ae:	6023      	str	r3, [r4, #0]
 800d5b0:	bd10      	pop	{r4, pc}
 800d5b2:	6923      	ldr	r3, [r4, #16]
 800d5b4:	6023      	str	r3, [r4, #0]
 800d5b6:	2300      	movs	r3, #0
 800d5b8:	6063      	str	r3, [r4, #4]
 800d5ba:	89a3      	ldrh	r3, [r4, #12]
 800d5bc:	f043 0320 	orr.w	r3, r3, #32
 800d5c0:	81a3      	strh	r3, [r4, #12]
 800d5c2:	f04f 30ff 	mov.w	r0, #4294967295
 800d5c6:	e7f3      	b.n	800d5b0 <__ssrefill_r+0x22>

0800d5c8 <__ssvfiscanf_r>:
 800d5c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5cc:	460c      	mov	r4, r1
 800d5ce:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800d5d2:	2100      	movs	r1, #0
 800d5d4:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800d5d8:	49a6      	ldr	r1, [pc, #664]	; (800d874 <__ssvfiscanf_r+0x2ac>)
 800d5da:	91a0      	str	r1, [sp, #640]	; 0x280
 800d5dc:	f10d 0804 	add.w	r8, sp, #4
 800d5e0:	49a5      	ldr	r1, [pc, #660]	; (800d878 <__ssvfiscanf_r+0x2b0>)
 800d5e2:	4fa6      	ldr	r7, [pc, #664]	; (800d87c <__ssvfiscanf_r+0x2b4>)
 800d5e4:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800d880 <__ssvfiscanf_r+0x2b8>
 800d5e8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800d5ec:	4606      	mov	r6, r0
 800d5ee:	91a1      	str	r1, [sp, #644]	; 0x284
 800d5f0:	9300      	str	r3, [sp, #0]
 800d5f2:	7813      	ldrb	r3, [r2, #0]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	f000 815a 	beq.w	800d8ae <__ssvfiscanf_r+0x2e6>
 800d5fa:	5dd9      	ldrb	r1, [r3, r7]
 800d5fc:	f011 0108 	ands.w	r1, r1, #8
 800d600:	f102 0501 	add.w	r5, r2, #1
 800d604:	d019      	beq.n	800d63a <__ssvfiscanf_r+0x72>
 800d606:	6863      	ldr	r3, [r4, #4]
 800d608:	2b00      	cmp	r3, #0
 800d60a:	dd0f      	ble.n	800d62c <__ssvfiscanf_r+0x64>
 800d60c:	6823      	ldr	r3, [r4, #0]
 800d60e:	781a      	ldrb	r2, [r3, #0]
 800d610:	5cba      	ldrb	r2, [r7, r2]
 800d612:	0712      	lsls	r2, r2, #28
 800d614:	d401      	bmi.n	800d61a <__ssvfiscanf_r+0x52>
 800d616:	462a      	mov	r2, r5
 800d618:	e7eb      	b.n	800d5f2 <__ssvfiscanf_r+0x2a>
 800d61a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d61c:	3201      	adds	r2, #1
 800d61e:	9245      	str	r2, [sp, #276]	; 0x114
 800d620:	6862      	ldr	r2, [r4, #4]
 800d622:	3301      	adds	r3, #1
 800d624:	3a01      	subs	r2, #1
 800d626:	6062      	str	r2, [r4, #4]
 800d628:	6023      	str	r3, [r4, #0]
 800d62a:	e7ec      	b.n	800d606 <__ssvfiscanf_r+0x3e>
 800d62c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d62e:	4621      	mov	r1, r4
 800d630:	4630      	mov	r0, r6
 800d632:	4798      	blx	r3
 800d634:	2800      	cmp	r0, #0
 800d636:	d0e9      	beq.n	800d60c <__ssvfiscanf_r+0x44>
 800d638:	e7ed      	b.n	800d616 <__ssvfiscanf_r+0x4e>
 800d63a:	2b25      	cmp	r3, #37	; 0x25
 800d63c:	d012      	beq.n	800d664 <__ssvfiscanf_r+0x9c>
 800d63e:	469a      	mov	sl, r3
 800d640:	6863      	ldr	r3, [r4, #4]
 800d642:	2b00      	cmp	r3, #0
 800d644:	f340 8091 	ble.w	800d76a <__ssvfiscanf_r+0x1a2>
 800d648:	6822      	ldr	r2, [r4, #0]
 800d64a:	7813      	ldrb	r3, [r2, #0]
 800d64c:	4553      	cmp	r3, sl
 800d64e:	f040 812e 	bne.w	800d8ae <__ssvfiscanf_r+0x2e6>
 800d652:	6863      	ldr	r3, [r4, #4]
 800d654:	3b01      	subs	r3, #1
 800d656:	6063      	str	r3, [r4, #4]
 800d658:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800d65a:	3201      	adds	r2, #1
 800d65c:	3301      	adds	r3, #1
 800d65e:	6022      	str	r2, [r4, #0]
 800d660:	9345      	str	r3, [sp, #276]	; 0x114
 800d662:	e7d8      	b.n	800d616 <__ssvfiscanf_r+0x4e>
 800d664:	9141      	str	r1, [sp, #260]	; 0x104
 800d666:	9143      	str	r1, [sp, #268]	; 0x10c
 800d668:	7853      	ldrb	r3, [r2, #1]
 800d66a:	2b2a      	cmp	r3, #42	; 0x2a
 800d66c:	bf02      	ittt	eq
 800d66e:	2310      	moveq	r3, #16
 800d670:	1c95      	addeq	r5, r2, #2
 800d672:	9341      	streq	r3, [sp, #260]	; 0x104
 800d674:	220a      	movs	r2, #10
 800d676:	46aa      	mov	sl, r5
 800d678:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800d67c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800d680:	2b09      	cmp	r3, #9
 800d682:	d91d      	bls.n	800d6c0 <__ssvfiscanf_r+0xf8>
 800d684:	487e      	ldr	r0, [pc, #504]	; (800d880 <__ssvfiscanf_r+0x2b8>)
 800d686:	2203      	movs	r2, #3
 800d688:	f7f2 fdc2 	bl	8000210 <memchr>
 800d68c:	b140      	cbz	r0, 800d6a0 <__ssvfiscanf_r+0xd8>
 800d68e:	2301      	movs	r3, #1
 800d690:	eba0 0009 	sub.w	r0, r0, r9
 800d694:	fa03 f000 	lsl.w	r0, r3, r0
 800d698:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d69a:	4318      	orrs	r0, r3
 800d69c:	9041      	str	r0, [sp, #260]	; 0x104
 800d69e:	4655      	mov	r5, sl
 800d6a0:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d6a4:	2b78      	cmp	r3, #120	; 0x78
 800d6a6:	d806      	bhi.n	800d6b6 <__ssvfiscanf_r+0xee>
 800d6a8:	2b57      	cmp	r3, #87	; 0x57
 800d6aa:	d810      	bhi.n	800d6ce <__ssvfiscanf_r+0x106>
 800d6ac:	2b25      	cmp	r3, #37	; 0x25
 800d6ae:	d0c6      	beq.n	800d63e <__ssvfiscanf_r+0x76>
 800d6b0:	d856      	bhi.n	800d760 <__ssvfiscanf_r+0x198>
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d064      	beq.n	800d780 <__ssvfiscanf_r+0x1b8>
 800d6b6:	2303      	movs	r3, #3
 800d6b8:	9347      	str	r3, [sp, #284]	; 0x11c
 800d6ba:	230a      	movs	r3, #10
 800d6bc:	9342      	str	r3, [sp, #264]	; 0x108
 800d6be:	e071      	b.n	800d7a4 <__ssvfiscanf_r+0x1dc>
 800d6c0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800d6c2:	fb02 1103 	mla	r1, r2, r3, r1
 800d6c6:	3930      	subs	r1, #48	; 0x30
 800d6c8:	9143      	str	r1, [sp, #268]	; 0x10c
 800d6ca:	4655      	mov	r5, sl
 800d6cc:	e7d3      	b.n	800d676 <__ssvfiscanf_r+0xae>
 800d6ce:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800d6d2:	2a20      	cmp	r2, #32
 800d6d4:	d8ef      	bhi.n	800d6b6 <__ssvfiscanf_r+0xee>
 800d6d6:	a101      	add	r1, pc, #4	; (adr r1, 800d6dc <__ssvfiscanf_r+0x114>)
 800d6d8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d6dc:	0800d78f 	.word	0x0800d78f
 800d6e0:	0800d6b7 	.word	0x0800d6b7
 800d6e4:	0800d6b7 	.word	0x0800d6b7
 800d6e8:	0800d7ed 	.word	0x0800d7ed
 800d6ec:	0800d6b7 	.word	0x0800d6b7
 800d6f0:	0800d6b7 	.word	0x0800d6b7
 800d6f4:	0800d6b7 	.word	0x0800d6b7
 800d6f8:	0800d6b7 	.word	0x0800d6b7
 800d6fc:	0800d6b7 	.word	0x0800d6b7
 800d700:	0800d6b7 	.word	0x0800d6b7
 800d704:	0800d6b7 	.word	0x0800d6b7
 800d708:	0800d803 	.word	0x0800d803
 800d70c:	0800d7d9 	.word	0x0800d7d9
 800d710:	0800d767 	.word	0x0800d767
 800d714:	0800d767 	.word	0x0800d767
 800d718:	0800d767 	.word	0x0800d767
 800d71c:	0800d6b7 	.word	0x0800d6b7
 800d720:	0800d7dd 	.word	0x0800d7dd
 800d724:	0800d6b7 	.word	0x0800d6b7
 800d728:	0800d6b7 	.word	0x0800d6b7
 800d72c:	0800d6b7 	.word	0x0800d6b7
 800d730:	0800d6b7 	.word	0x0800d6b7
 800d734:	0800d813 	.word	0x0800d813
 800d738:	0800d7e5 	.word	0x0800d7e5
 800d73c:	0800d787 	.word	0x0800d787
 800d740:	0800d6b7 	.word	0x0800d6b7
 800d744:	0800d6b7 	.word	0x0800d6b7
 800d748:	0800d80f 	.word	0x0800d80f
 800d74c:	0800d6b7 	.word	0x0800d6b7
 800d750:	0800d7d9 	.word	0x0800d7d9
 800d754:	0800d6b7 	.word	0x0800d6b7
 800d758:	0800d6b7 	.word	0x0800d6b7
 800d75c:	0800d78f 	.word	0x0800d78f
 800d760:	3b45      	subs	r3, #69	; 0x45
 800d762:	2b02      	cmp	r3, #2
 800d764:	d8a7      	bhi.n	800d6b6 <__ssvfiscanf_r+0xee>
 800d766:	2305      	movs	r3, #5
 800d768:	e01b      	b.n	800d7a2 <__ssvfiscanf_r+0x1da>
 800d76a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d76c:	4621      	mov	r1, r4
 800d76e:	4630      	mov	r0, r6
 800d770:	4798      	blx	r3
 800d772:	2800      	cmp	r0, #0
 800d774:	f43f af68 	beq.w	800d648 <__ssvfiscanf_r+0x80>
 800d778:	9844      	ldr	r0, [sp, #272]	; 0x110
 800d77a:	2800      	cmp	r0, #0
 800d77c:	f040 808d 	bne.w	800d89a <__ssvfiscanf_r+0x2d2>
 800d780:	f04f 30ff 	mov.w	r0, #4294967295
 800d784:	e08f      	b.n	800d8a6 <__ssvfiscanf_r+0x2de>
 800d786:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800d788:	f042 0220 	orr.w	r2, r2, #32
 800d78c:	9241      	str	r2, [sp, #260]	; 0x104
 800d78e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800d790:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d794:	9241      	str	r2, [sp, #260]	; 0x104
 800d796:	2210      	movs	r2, #16
 800d798:	2b6f      	cmp	r3, #111	; 0x6f
 800d79a:	9242      	str	r2, [sp, #264]	; 0x108
 800d79c:	bf34      	ite	cc
 800d79e:	2303      	movcc	r3, #3
 800d7a0:	2304      	movcs	r3, #4
 800d7a2:	9347      	str	r3, [sp, #284]	; 0x11c
 800d7a4:	6863      	ldr	r3, [r4, #4]
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	dd42      	ble.n	800d830 <__ssvfiscanf_r+0x268>
 800d7aa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d7ac:	0659      	lsls	r1, r3, #25
 800d7ae:	d404      	bmi.n	800d7ba <__ssvfiscanf_r+0x1f2>
 800d7b0:	6823      	ldr	r3, [r4, #0]
 800d7b2:	781a      	ldrb	r2, [r3, #0]
 800d7b4:	5cba      	ldrb	r2, [r7, r2]
 800d7b6:	0712      	lsls	r2, r2, #28
 800d7b8:	d441      	bmi.n	800d83e <__ssvfiscanf_r+0x276>
 800d7ba:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800d7bc:	2b02      	cmp	r3, #2
 800d7be:	dc50      	bgt.n	800d862 <__ssvfiscanf_r+0x29a>
 800d7c0:	466b      	mov	r3, sp
 800d7c2:	4622      	mov	r2, r4
 800d7c4:	a941      	add	r1, sp, #260	; 0x104
 800d7c6:	4630      	mov	r0, r6
 800d7c8:	f000 f9d0 	bl	800db6c <_scanf_chars>
 800d7cc:	2801      	cmp	r0, #1
 800d7ce:	d06e      	beq.n	800d8ae <__ssvfiscanf_r+0x2e6>
 800d7d0:	2802      	cmp	r0, #2
 800d7d2:	f47f af20 	bne.w	800d616 <__ssvfiscanf_r+0x4e>
 800d7d6:	e7cf      	b.n	800d778 <__ssvfiscanf_r+0x1b0>
 800d7d8:	220a      	movs	r2, #10
 800d7da:	e7dd      	b.n	800d798 <__ssvfiscanf_r+0x1d0>
 800d7dc:	2300      	movs	r3, #0
 800d7de:	9342      	str	r3, [sp, #264]	; 0x108
 800d7e0:	2303      	movs	r3, #3
 800d7e2:	e7de      	b.n	800d7a2 <__ssvfiscanf_r+0x1da>
 800d7e4:	2308      	movs	r3, #8
 800d7e6:	9342      	str	r3, [sp, #264]	; 0x108
 800d7e8:	2304      	movs	r3, #4
 800d7ea:	e7da      	b.n	800d7a2 <__ssvfiscanf_r+0x1da>
 800d7ec:	4629      	mov	r1, r5
 800d7ee:	4640      	mov	r0, r8
 800d7f0:	f000 fb2a 	bl	800de48 <__sccl>
 800d7f4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d7f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d7fa:	9341      	str	r3, [sp, #260]	; 0x104
 800d7fc:	4605      	mov	r5, r0
 800d7fe:	2301      	movs	r3, #1
 800d800:	e7cf      	b.n	800d7a2 <__ssvfiscanf_r+0x1da>
 800d802:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d804:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d808:	9341      	str	r3, [sp, #260]	; 0x104
 800d80a:	2300      	movs	r3, #0
 800d80c:	e7c9      	b.n	800d7a2 <__ssvfiscanf_r+0x1da>
 800d80e:	2302      	movs	r3, #2
 800d810:	e7c7      	b.n	800d7a2 <__ssvfiscanf_r+0x1da>
 800d812:	9841      	ldr	r0, [sp, #260]	; 0x104
 800d814:	06c3      	lsls	r3, r0, #27
 800d816:	f53f aefe 	bmi.w	800d616 <__ssvfiscanf_r+0x4e>
 800d81a:	9b00      	ldr	r3, [sp, #0]
 800d81c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d81e:	1d19      	adds	r1, r3, #4
 800d820:	9100      	str	r1, [sp, #0]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	f010 0f01 	tst.w	r0, #1
 800d828:	bf14      	ite	ne
 800d82a:	801a      	strhne	r2, [r3, #0]
 800d82c:	601a      	streq	r2, [r3, #0]
 800d82e:	e6f2      	b.n	800d616 <__ssvfiscanf_r+0x4e>
 800d830:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d832:	4621      	mov	r1, r4
 800d834:	4630      	mov	r0, r6
 800d836:	4798      	blx	r3
 800d838:	2800      	cmp	r0, #0
 800d83a:	d0b6      	beq.n	800d7aa <__ssvfiscanf_r+0x1e2>
 800d83c:	e79c      	b.n	800d778 <__ssvfiscanf_r+0x1b0>
 800d83e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d840:	3201      	adds	r2, #1
 800d842:	9245      	str	r2, [sp, #276]	; 0x114
 800d844:	6862      	ldr	r2, [r4, #4]
 800d846:	3a01      	subs	r2, #1
 800d848:	2a00      	cmp	r2, #0
 800d84a:	6062      	str	r2, [r4, #4]
 800d84c:	dd02      	ble.n	800d854 <__ssvfiscanf_r+0x28c>
 800d84e:	3301      	adds	r3, #1
 800d850:	6023      	str	r3, [r4, #0]
 800d852:	e7ad      	b.n	800d7b0 <__ssvfiscanf_r+0x1e8>
 800d854:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d856:	4621      	mov	r1, r4
 800d858:	4630      	mov	r0, r6
 800d85a:	4798      	blx	r3
 800d85c:	2800      	cmp	r0, #0
 800d85e:	d0a7      	beq.n	800d7b0 <__ssvfiscanf_r+0x1e8>
 800d860:	e78a      	b.n	800d778 <__ssvfiscanf_r+0x1b0>
 800d862:	2b04      	cmp	r3, #4
 800d864:	dc0e      	bgt.n	800d884 <__ssvfiscanf_r+0x2bc>
 800d866:	466b      	mov	r3, sp
 800d868:	4622      	mov	r2, r4
 800d86a:	a941      	add	r1, sp, #260	; 0x104
 800d86c:	4630      	mov	r0, r6
 800d86e:	f000 f9d7 	bl	800dc20 <_scanf_i>
 800d872:	e7ab      	b.n	800d7cc <__ssvfiscanf_r+0x204>
 800d874:	0800d515 	.word	0x0800d515
 800d878:	0800d58f 	.word	0x0800d58f
 800d87c:	0800e669 	.word	0x0800e669
 800d880:	0800e9d2 	.word	0x0800e9d2
 800d884:	4b0b      	ldr	r3, [pc, #44]	; (800d8b4 <__ssvfiscanf_r+0x2ec>)
 800d886:	2b00      	cmp	r3, #0
 800d888:	f43f aec5 	beq.w	800d616 <__ssvfiscanf_r+0x4e>
 800d88c:	466b      	mov	r3, sp
 800d88e:	4622      	mov	r2, r4
 800d890:	a941      	add	r1, sp, #260	; 0x104
 800d892:	4630      	mov	r0, r6
 800d894:	f7fc fa96 	bl	8009dc4 <_scanf_float>
 800d898:	e798      	b.n	800d7cc <__ssvfiscanf_r+0x204>
 800d89a:	89a3      	ldrh	r3, [r4, #12]
 800d89c:	f013 0f40 	tst.w	r3, #64	; 0x40
 800d8a0:	bf18      	it	ne
 800d8a2:	f04f 30ff 	movne.w	r0, #4294967295
 800d8a6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800d8aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8ae:	9844      	ldr	r0, [sp, #272]	; 0x110
 800d8b0:	e7f9      	b.n	800d8a6 <__ssvfiscanf_r+0x2de>
 800d8b2:	bf00      	nop
 800d8b4:	08009dc5 	.word	0x08009dc5

0800d8b8 <__sfputc_r>:
 800d8b8:	6893      	ldr	r3, [r2, #8]
 800d8ba:	3b01      	subs	r3, #1
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	b410      	push	{r4}
 800d8c0:	6093      	str	r3, [r2, #8]
 800d8c2:	da08      	bge.n	800d8d6 <__sfputc_r+0x1e>
 800d8c4:	6994      	ldr	r4, [r2, #24]
 800d8c6:	42a3      	cmp	r3, r4
 800d8c8:	db01      	blt.n	800d8ce <__sfputc_r+0x16>
 800d8ca:	290a      	cmp	r1, #10
 800d8cc:	d103      	bne.n	800d8d6 <__sfputc_r+0x1e>
 800d8ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d8d2:	f7fd bc85 	b.w	800b1e0 <__swbuf_r>
 800d8d6:	6813      	ldr	r3, [r2, #0]
 800d8d8:	1c58      	adds	r0, r3, #1
 800d8da:	6010      	str	r0, [r2, #0]
 800d8dc:	7019      	strb	r1, [r3, #0]
 800d8de:	4608      	mov	r0, r1
 800d8e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d8e4:	4770      	bx	lr

0800d8e6 <__sfputs_r>:
 800d8e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8e8:	4606      	mov	r6, r0
 800d8ea:	460f      	mov	r7, r1
 800d8ec:	4614      	mov	r4, r2
 800d8ee:	18d5      	adds	r5, r2, r3
 800d8f0:	42ac      	cmp	r4, r5
 800d8f2:	d101      	bne.n	800d8f8 <__sfputs_r+0x12>
 800d8f4:	2000      	movs	r0, #0
 800d8f6:	e007      	b.n	800d908 <__sfputs_r+0x22>
 800d8f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d8fc:	463a      	mov	r2, r7
 800d8fe:	4630      	mov	r0, r6
 800d900:	f7ff ffda 	bl	800d8b8 <__sfputc_r>
 800d904:	1c43      	adds	r3, r0, #1
 800d906:	d1f3      	bne.n	800d8f0 <__sfputs_r+0xa>
 800d908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d90c <_vfiprintf_r>:
 800d90c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d910:	460d      	mov	r5, r1
 800d912:	b09d      	sub	sp, #116	; 0x74
 800d914:	4614      	mov	r4, r2
 800d916:	4698      	mov	r8, r3
 800d918:	4606      	mov	r6, r0
 800d91a:	b118      	cbz	r0, 800d924 <_vfiprintf_r+0x18>
 800d91c:	6983      	ldr	r3, [r0, #24]
 800d91e:	b90b      	cbnz	r3, 800d924 <_vfiprintf_r+0x18>
 800d920:	f7fb fc0a 	bl	8009138 <__sinit>
 800d924:	4b89      	ldr	r3, [pc, #548]	; (800db4c <_vfiprintf_r+0x240>)
 800d926:	429d      	cmp	r5, r3
 800d928:	d11b      	bne.n	800d962 <_vfiprintf_r+0x56>
 800d92a:	6875      	ldr	r5, [r6, #4]
 800d92c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d92e:	07d9      	lsls	r1, r3, #31
 800d930:	d405      	bmi.n	800d93e <_vfiprintf_r+0x32>
 800d932:	89ab      	ldrh	r3, [r5, #12]
 800d934:	059a      	lsls	r2, r3, #22
 800d936:	d402      	bmi.n	800d93e <_vfiprintf_r+0x32>
 800d938:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d93a:	f7fb fcc0 	bl	80092be <__retarget_lock_acquire_recursive>
 800d93e:	89ab      	ldrh	r3, [r5, #12]
 800d940:	071b      	lsls	r3, r3, #28
 800d942:	d501      	bpl.n	800d948 <_vfiprintf_r+0x3c>
 800d944:	692b      	ldr	r3, [r5, #16]
 800d946:	b9eb      	cbnz	r3, 800d984 <_vfiprintf_r+0x78>
 800d948:	4629      	mov	r1, r5
 800d94a:	4630      	mov	r0, r6
 800d94c:	f7fd fcac 	bl	800b2a8 <__swsetup_r>
 800d950:	b1c0      	cbz	r0, 800d984 <_vfiprintf_r+0x78>
 800d952:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d954:	07dc      	lsls	r4, r3, #31
 800d956:	d50e      	bpl.n	800d976 <_vfiprintf_r+0x6a>
 800d958:	f04f 30ff 	mov.w	r0, #4294967295
 800d95c:	b01d      	add	sp, #116	; 0x74
 800d95e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d962:	4b7b      	ldr	r3, [pc, #492]	; (800db50 <_vfiprintf_r+0x244>)
 800d964:	429d      	cmp	r5, r3
 800d966:	d101      	bne.n	800d96c <_vfiprintf_r+0x60>
 800d968:	68b5      	ldr	r5, [r6, #8]
 800d96a:	e7df      	b.n	800d92c <_vfiprintf_r+0x20>
 800d96c:	4b79      	ldr	r3, [pc, #484]	; (800db54 <_vfiprintf_r+0x248>)
 800d96e:	429d      	cmp	r5, r3
 800d970:	bf08      	it	eq
 800d972:	68f5      	ldreq	r5, [r6, #12]
 800d974:	e7da      	b.n	800d92c <_vfiprintf_r+0x20>
 800d976:	89ab      	ldrh	r3, [r5, #12]
 800d978:	0598      	lsls	r0, r3, #22
 800d97a:	d4ed      	bmi.n	800d958 <_vfiprintf_r+0x4c>
 800d97c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d97e:	f7fb fc9f 	bl	80092c0 <__retarget_lock_release_recursive>
 800d982:	e7e9      	b.n	800d958 <_vfiprintf_r+0x4c>
 800d984:	2300      	movs	r3, #0
 800d986:	9309      	str	r3, [sp, #36]	; 0x24
 800d988:	2320      	movs	r3, #32
 800d98a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d98e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d992:	2330      	movs	r3, #48	; 0x30
 800d994:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800db58 <_vfiprintf_r+0x24c>
 800d998:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d99c:	f04f 0901 	mov.w	r9, #1
 800d9a0:	4623      	mov	r3, r4
 800d9a2:	469a      	mov	sl, r3
 800d9a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d9a8:	b10a      	cbz	r2, 800d9ae <_vfiprintf_r+0xa2>
 800d9aa:	2a25      	cmp	r2, #37	; 0x25
 800d9ac:	d1f9      	bne.n	800d9a2 <_vfiprintf_r+0x96>
 800d9ae:	ebba 0b04 	subs.w	fp, sl, r4
 800d9b2:	d00b      	beq.n	800d9cc <_vfiprintf_r+0xc0>
 800d9b4:	465b      	mov	r3, fp
 800d9b6:	4622      	mov	r2, r4
 800d9b8:	4629      	mov	r1, r5
 800d9ba:	4630      	mov	r0, r6
 800d9bc:	f7ff ff93 	bl	800d8e6 <__sfputs_r>
 800d9c0:	3001      	adds	r0, #1
 800d9c2:	f000 80aa 	beq.w	800db1a <_vfiprintf_r+0x20e>
 800d9c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d9c8:	445a      	add	r2, fp
 800d9ca:	9209      	str	r2, [sp, #36]	; 0x24
 800d9cc:	f89a 3000 	ldrb.w	r3, [sl]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	f000 80a2 	beq.w	800db1a <_vfiprintf_r+0x20e>
 800d9d6:	2300      	movs	r3, #0
 800d9d8:	f04f 32ff 	mov.w	r2, #4294967295
 800d9dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d9e0:	f10a 0a01 	add.w	sl, sl, #1
 800d9e4:	9304      	str	r3, [sp, #16]
 800d9e6:	9307      	str	r3, [sp, #28]
 800d9e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d9ec:	931a      	str	r3, [sp, #104]	; 0x68
 800d9ee:	4654      	mov	r4, sl
 800d9f0:	2205      	movs	r2, #5
 800d9f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9f6:	4858      	ldr	r0, [pc, #352]	; (800db58 <_vfiprintf_r+0x24c>)
 800d9f8:	f7f2 fc0a 	bl	8000210 <memchr>
 800d9fc:	9a04      	ldr	r2, [sp, #16]
 800d9fe:	b9d8      	cbnz	r0, 800da38 <_vfiprintf_r+0x12c>
 800da00:	06d1      	lsls	r1, r2, #27
 800da02:	bf44      	itt	mi
 800da04:	2320      	movmi	r3, #32
 800da06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800da0a:	0713      	lsls	r3, r2, #28
 800da0c:	bf44      	itt	mi
 800da0e:	232b      	movmi	r3, #43	; 0x2b
 800da10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800da14:	f89a 3000 	ldrb.w	r3, [sl]
 800da18:	2b2a      	cmp	r3, #42	; 0x2a
 800da1a:	d015      	beq.n	800da48 <_vfiprintf_r+0x13c>
 800da1c:	9a07      	ldr	r2, [sp, #28]
 800da1e:	4654      	mov	r4, sl
 800da20:	2000      	movs	r0, #0
 800da22:	f04f 0c0a 	mov.w	ip, #10
 800da26:	4621      	mov	r1, r4
 800da28:	f811 3b01 	ldrb.w	r3, [r1], #1
 800da2c:	3b30      	subs	r3, #48	; 0x30
 800da2e:	2b09      	cmp	r3, #9
 800da30:	d94e      	bls.n	800dad0 <_vfiprintf_r+0x1c4>
 800da32:	b1b0      	cbz	r0, 800da62 <_vfiprintf_r+0x156>
 800da34:	9207      	str	r2, [sp, #28]
 800da36:	e014      	b.n	800da62 <_vfiprintf_r+0x156>
 800da38:	eba0 0308 	sub.w	r3, r0, r8
 800da3c:	fa09 f303 	lsl.w	r3, r9, r3
 800da40:	4313      	orrs	r3, r2
 800da42:	9304      	str	r3, [sp, #16]
 800da44:	46a2      	mov	sl, r4
 800da46:	e7d2      	b.n	800d9ee <_vfiprintf_r+0xe2>
 800da48:	9b03      	ldr	r3, [sp, #12]
 800da4a:	1d19      	adds	r1, r3, #4
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	9103      	str	r1, [sp, #12]
 800da50:	2b00      	cmp	r3, #0
 800da52:	bfbb      	ittet	lt
 800da54:	425b      	neglt	r3, r3
 800da56:	f042 0202 	orrlt.w	r2, r2, #2
 800da5a:	9307      	strge	r3, [sp, #28]
 800da5c:	9307      	strlt	r3, [sp, #28]
 800da5e:	bfb8      	it	lt
 800da60:	9204      	strlt	r2, [sp, #16]
 800da62:	7823      	ldrb	r3, [r4, #0]
 800da64:	2b2e      	cmp	r3, #46	; 0x2e
 800da66:	d10c      	bne.n	800da82 <_vfiprintf_r+0x176>
 800da68:	7863      	ldrb	r3, [r4, #1]
 800da6a:	2b2a      	cmp	r3, #42	; 0x2a
 800da6c:	d135      	bne.n	800dada <_vfiprintf_r+0x1ce>
 800da6e:	9b03      	ldr	r3, [sp, #12]
 800da70:	1d1a      	adds	r2, r3, #4
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	9203      	str	r2, [sp, #12]
 800da76:	2b00      	cmp	r3, #0
 800da78:	bfb8      	it	lt
 800da7a:	f04f 33ff 	movlt.w	r3, #4294967295
 800da7e:	3402      	adds	r4, #2
 800da80:	9305      	str	r3, [sp, #20]
 800da82:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800db68 <_vfiprintf_r+0x25c>
 800da86:	7821      	ldrb	r1, [r4, #0]
 800da88:	2203      	movs	r2, #3
 800da8a:	4650      	mov	r0, sl
 800da8c:	f7f2 fbc0 	bl	8000210 <memchr>
 800da90:	b140      	cbz	r0, 800daa4 <_vfiprintf_r+0x198>
 800da92:	2340      	movs	r3, #64	; 0x40
 800da94:	eba0 000a 	sub.w	r0, r0, sl
 800da98:	fa03 f000 	lsl.w	r0, r3, r0
 800da9c:	9b04      	ldr	r3, [sp, #16]
 800da9e:	4303      	orrs	r3, r0
 800daa0:	3401      	adds	r4, #1
 800daa2:	9304      	str	r3, [sp, #16]
 800daa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800daa8:	482c      	ldr	r0, [pc, #176]	; (800db5c <_vfiprintf_r+0x250>)
 800daaa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800daae:	2206      	movs	r2, #6
 800dab0:	f7f2 fbae 	bl	8000210 <memchr>
 800dab4:	2800      	cmp	r0, #0
 800dab6:	d03f      	beq.n	800db38 <_vfiprintf_r+0x22c>
 800dab8:	4b29      	ldr	r3, [pc, #164]	; (800db60 <_vfiprintf_r+0x254>)
 800daba:	bb1b      	cbnz	r3, 800db04 <_vfiprintf_r+0x1f8>
 800dabc:	9b03      	ldr	r3, [sp, #12]
 800dabe:	3307      	adds	r3, #7
 800dac0:	f023 0307 	bic.w	r3, r3, #7
 800dac4:	3308      	adds	r3, #8
 800dac6:	9303      	str	r3, [sp, #12]
 800dac8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800daca:	443b      	add	r3, r7
 800dacc:	9309      	str	r3, [sp, #36]	; 0x24
 800dace:	e767      	b.n	800d9a0 <_vfiprintf_r+0x94>
 800dad0:	fb0c 3202 	mla	r2, ip, r2, r3
 800dad4:	460c      	mov	r4, r1
 800dad6:	2001      	movs	r0, #1
 800dad8:	e7a5      	b.n	800da26 <_vfiprintf_r+0x11a>
 800dada:	2300      	movs	r3, #0
 800dadc:	3401      	adds	r4, #1
 800dade:	9305      	str	r3, [sp, #20]
 800dae0:	4619      	mov	r1, r3
 800dae2:	f04f 0c0a 	mov.w	ip, #10
 800dae6:	4620      	mov	r0, r4
 800dae8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800daec:	3a30      	subs	r2, #48	; 0x30
 800daee:	2a09      	cmp	r2, #9
 800daf0:	d903      	bls.n	800dafa <_vfiprintf_r+0x1ee>
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d0c5      	beq.n	800da82 <_vfiprintf_r+0x176>
 800daf6:	9105      	str	r1, [sp, #20]
 800daf8:	e7c3      	b.n	800da82 <_vfiprintf_r+0x176>
 800dafa:	fb0c 2101 	mla	r1, ip, r1, r2
 800dafe:	4604      	mov	r4, r0
 800db00:	2301      	movs	r3, #1
 800db02:	e7f0      	b.n	800dae6 <_vfiprintf_r+0x1da>
 800db04:	ab03      	add	r3, sp, #12
 800db06:	9300      	str	r3, [sp, #0]
 800db08:	462a      	mov	r2, r5
 800db0a:	4b16      	ldr	r3, [pc, #88]	; (800db64 <_vfiprintf_r+0x258>)
 800db0c:	a904      	add	r1, sp, #16
 800db0e:	4630      	mov	r0, r6
 800db10:	f7fb fd8e 	bl	8009630 <_printf_float>
 800db14:	4607      	mov	r7, r0
 800db16:	1c78      	adds	r0, r7, #1
 800db18:	d1d6      	bne.n	800dac8 <_vfiprintf_r+0x1bc>
 800db1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800db1c:	07d9      	lsls	r1, r3, #31
 800db1e:	d405      	bmi.n	800db2c <_vfiprintf_r+0x220>
 800db20:	89ab      	ldrh	r3, [r5, #12]
 800db22:	059a      	lsls	r2, r3, #22
 800db24:	d402      	bmi.n	800db2c <_vfiprintf_r+0x220>
 800db26:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800db28:	f7fb fbca 	bl	80092c0 <__retarget_lock_release_recursive>
 800db2c:	89ab      	ldrh	r3, [r5, #12]
 800db2e:	065b      	lsls	r3, r3, #25
 800db30:	f53f af12 	bmi.w	800d958 <_vfiprintf_r+0x4c>
 800db34:	9809      	ldr	r0, [sp, #36]	; 0x24
 800db36:	e711      	b.n	800d95c <_vfiprintf_r+0x50>
 800db38:	ab03      	add	r3, sp, #12
 800db3a:	9300      	str	r3, [sp, #0]
 800db3c:	462a      	mov	r2, r5
 800db3e:	4b09      	ldr	r3, [pc, #36]	; (800db64 <_vfiprintf_r+0x258>)
 800db40:	a904      	add	r1, sp, #16
 800db42:	4630      	mov	r0, r6
 800db44:	f7fc f818 	bl	8009b78 <_printf_i>
 800db48:	e7e4      	b.n	800db14 <_vfiprintf_r+0x208>
 800db4a:	bf00      	nop
 800db4c:	0800e59c 	.word	0x0800e59c
 800db50:	0800e5bc 	.word	0x0800e5bc
 800db54:	0800e57c 	.word	0x0800e57c
 800db58:	0800e9cc 	.word	0x0800e9cc
 800db5c:	0800e9d6 	.word	0x0800e9d6
 800db60:	08009631 	.word	0x08009631
 800db64:	0800d8e7 	.word	0x0800d8e7
 800db68:	0800e9d2 	.word	0x0800e9d2

0800db6c <_scanf_chars>:
 800db6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db70:	4615      	mov	r5, r2
 800db72:	688a      	ldr	r2, [r1, #8]
 800db74:	4680      	mov	r8, r0
 800db76:	460c      	mov	r4, r1
 800db78:	b932      	cbnz	r2, 800db88 <_scanf_chars+0x1c>
 800db7a:	698a      	ldr	r2, [r1, #24]
 800db7c:	2a00      	cmp	r2, #0
 800db7e:	bf0c      	ite	eq
 800db80:	2201      	moveq	r2, #1
 800db82:	f04f 32ff 	movne.w	r2, #4294967295
 800db86:	608a      	str	r2, [r1, #8]
 800db88:	6822      	ldr	r2, [r4, #0]
 800db8a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800dc1c <_scanf_chars+0xb0>
 800db8e:	06d1      	lsls	r1, r2, #27
 800db90:	bf5f      	itttt	pl
 800db92:	681a      	ldrpl	r2, [r3, #0]
 800db94:	1d11      	addpl	r1, r2, #4
 800db96:	6019      	strpl	r1, [r3, #0]
 800db98:	6816      	ldrpl	r6, [r2, #0]
 800db9a:	2700      	movs	r7, #0
 800db9c:	69a0      	ldr	r0, [r4, #24]
 800db9e:	b188      	cbz	r0, 800dbc4 <_scanf_chars+0x58>
 800dba0:	2801      	cmp	r0, #1
 800dba2:	d107      	bne.n	800dbb4 <_scanf_chars+0x48>
 800dba4:	682a      	ldr	r2, [r5, #0]
 800dba6:	7811      	ldrb	r1, [r2, #0]
 800dba8:	6962      	ldr	r2, [r4, #20]
 800dbaa:	5c52      	ldrb	r2, [r2, r1]
 800dbac:	b952      	cbnz	r2, 800dbc4 <_scanf_chars+0x58>
 800dbae:	2f00      	cmp	r7, #0
 800dbb0:	d031      	beq.n	800dc16 <_scanf_chars+0xaa>
 800dbb2:	e022      	b.n	800dbfa <_scanf_chars+0x8e>
 800dbb4:	2802      	cmp	r0, #2
 800dbb6:	d120      	bne.n	800dbfa <_scanf_chars+0x8e>
 800dbb8:	682b      	ldr	r3, [r5, #0]
 800dbba:	781b      	ldrb	r3, [r3, #0]
 800dbbc:	f813 3009 	ldrb.w	r3, [r3, r9]
 800dbc0:	071b      	lsls	r3, r3, #28
 800dbc2:	d41a      	bmi.n	800dbfa <_scanf_chars+0x8e>
 800dbc4:	6823      	ldr	r3, [r4, #0]
 800dbc6:	06da      	lsls	r2, r3, #27
 800dbc8:	bf5e      	ittt	pl
 800dbca:	682b      	ldrpl	r3, [r5, #0]
 800dbcc:	781b      	ldrbpl	r3, [r3, #0]
 800dbce:	f806 3b01 	strbpl.w	r3, [r6], #1
 800dbd2:	682a      	ldr	r2, [r5, #0]
 800dbd4:	686b      	ldr	r3, [r5, #4]
 800dbd6:	3201      	adds	r2, #1
 800dbd8:	602a      	str	r2, [r5, #0]
 800dbda:	68a2      	ldr	r2, [r4, #8]
 800dbdc:	3b01      	subs	r3, #1
 800dbde:	3a01      	subs	r2, #1
 800dbe0:	606b      	str	r3, [r5, #4]
 800dbe2:	3701      	adds	r7, #1
 800dbe4:	60a2      	str	r2, [r4, #8]
 800dbe6:	b142      	cbz	r2, 800dbfa <_scanf_chars+0x8e>
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	dcd7      	bgt.n	800db9c <_scanf_chars+0x30>
 800dbec:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800dbf0:	4629      	mov	r1, r5
 800dbf2:	4640      	mov	r0, r8
 800dbf4:	4798      	blx	r3
 800dbf6:	2800      	cmp	r0, #0
 800dbf8:	d0d0      	beq.n	800db9c <_scanf_chars+0x30>
 800dbfa:	6823      	ldr	r3, [r4, #0]
 800dbfc:	f013 0310 	ands.w	r3, r3, #16
 800dc00:	d105      	bne.n	800dc0e <_scanf_chars+0xa2>
 800dc02:	68e2      	ldr	r2, [r4, #12]
 800dc04:	3201      	adds	r2, #1
 800dc06:	60e2      	str	r2, [r4, #12]
 800dc08:	69a2      	ldr	r2, [r4, #24]
 800dc0a:	b102      	cbz	r2, 800dc0e <_scanf_chars+0xa2>
 800dc0c:	7033      	strb	r3, [r6, #0]
 800dc0e:	6923      	ldr	r3, [r4, #16]
 800dc10:	443b      	add	r3, r7
 800dc12:	6123      	str	r3, [r4, #16]
 800dc14:	2000      	movs	r0, #0
 800dc16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc1a:	bf00      	nop
 800dc1c:	0800e669 	.word	0x0800e669

0800dc20 <_scanf_i>:
 800dc20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc24:	4698      	mov	r8, r3
 800dc26:	4b76      	ldr	r3, [pc, #472]	; (800de00 <_scanf_i+0x1e0>)
 800dc28:	460c      	mov	r4, r1
 800dc2a:	4682      	mov	sl, r0
 800dc2c:	4616      	mov	r6, r2
 800dc2e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800dc32:	b087      	sub	sp, #28
 800dc34:	ab03      	add	r3, sp, #12
 800dc36:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800dc3a:	4b72      	ldr	r3, [pc, #456]	; (800de04 <_scanf_i+0x1e4>)
 800dc3c:	69a1      	ldr	r1, [r4, #24]
 800dc3e:	4a72      	ldr	r2, [pc, #456]	; (800de08 <_scanf_i+0x1e8>)
 800dc40:	2903      	cmp	r1, #3
 800dc42:	bf18      	it	ne
 800dc44:	461a      	movne	r2, r3
 800dc46:	68a3      	ldr	r3, [r4, #8]
 800dc48:	9201      	str	r2, [sp, #4]
 800dc4a:	1e5a      	subs	r2, r3, #1
 800dc4c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800dc50:	bf88      	it	hi
 800dc52:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800dc56:	4627      	mov	r7, r4
 800dc58:	bf82      	ittt	hi
 800dc5a:	eb03 0905 	addhi.w	r9, r3, r5
 800dc5e:	f240 135d 	movwhi	r3, #349	; 0x15d
 800dc62:	60a3      	strhi	r3, [r4, #8]
 800dc64:	f857 3b1c 	ldr.w	r3, [r7], #28
 800dc68:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800dc6c:	bf98      	it	ls
 800dc6e:	f04f 0900 	movls.w	r9, #0
 800dc72:	6023      	str	r3, [r4, #0]
 800dc74:	463d      	mov	r5, r7
 800dc76:	f04f 0b00 	mov.w	fp, #0
 800dc7a:	6831      	ldr	r1, [r6, #0]
 800dc7c:	ab03      	add	r3, sp, #12
 800dc7e:	7809      	ldrb	r1, [r1, #0]
 800dc80:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800dc84:	2202      	movs	r2, #2
 800dc86:	f7f2 fac3 	bl	8000210 <memchr>
 800dc8a:	b328      	cbz	r0, 800dcd8 <_scanf_i+0xb8>
 800dc8c:	f1bb 0f01 	cmp.w	fp, #1
 800dc90:	d159      	bne.n	800dd46 <_scanf_i+0x126>
 800dc92:	6862      	ldr	r2, [r4, #4]
 800dc94:	b92a      	cbnz	r2, 800dca2 <_scanf_i+0x82>
 800dc96:	6822      	ldr	r2, [r4, #0]
 800dc98:	2308      	movs	r3, #8
 800dc9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dc9e:	6063      	str	r3, [r4, #4]
 800dca0:	6022      	str	r2, [r4, #0]
 800dca2:	6822      	ldr	r2, [r4, #0]
 800dca4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800dca8:	6022      	str	r2, [r4, #0]
 800dcaa:	68a2      	ldr	r2, [r4, #8]
 800dcac:	1e51      	subs	r1, r2, #1
 800dcae:	60a1      	str	r1, [r4, #8]
 800dcb0:	b192      	cbz	r2, 800dcd8 <_scanf_i+0xb8>
 800dcb2:	6832      	ldr	r2, [r6, #0]
 800dcb4:	1c51      	adds	r1, r2, #1
 800dcb6:	6031      	str	r1, [r6, #0]
 800dcb8:	7812      	ldrb	r2, [r2, #0]
 800dcba:	f805 2b01 	strb.w	r2, [r5], #1
 800dcbe:	6872      	ldr	r2, [r6, #4]
 800dcc0:	3a01      	subs	r2, #1
 800dcc2:	2a00      	cmp	r2, #0
 800dcc4:	6072      	str	r2, [r6, #4]
 800dcc6:	dc07      	bgt.n	800dcd8 <_scanf_i+0xb8>
 800dcc8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800dccc:	4631      	mov	r1, r6
 800dcce:	4650      	mov	r0, sl
 800dcd0:	4790      	blx	r2
 800dcd2:	2800      	cmp	r0, #0
 800dcd4:	f040 8085 	bne.w	800dde2 <_scanf_i+0x1c2>
 800dcd8:	f10b 0b01 	add.w	fp, fp, #1
 800dcdc:	f1bb 0f03 	cmp.w	fp, #3
 800dce0:	d1cb      	bne.n	800dc7a <_scanf_i+0x5a>
 800dce2:	6863      	ldr	r3, [r4, #4]
 800dce4:	b90b      	cbnz	r3, 800dcea <_scanf_i+0xca>
 800dce6:	230a      	movs	r3, #10
 800dce8:	6063      	str	r3, [r4, #4]
 800dcea:	6863      	ldr	r3, [r4, #4]
 800dcec:	4947      	ldr	r1, [pc, #284]	; (800de0c <_scanf_i+0x1ec>)
 800dcee:	6960      	ldr	r0, [r4, #20]
 800dcf0:	1ac9      	subs	r1, r1, r3
 800dcf2:	f000 f8a9 	bl	800de48 <__sccl>
 800dcf6:	f04f 0b00 	mov.w	fp, #0
 800dcfa:	68a3      	ldr	r3, [r4, #8]
 800dcfc:	6822      	ldr	r2, [r4, #0]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d03d      	beq.n	800dd7e <_scanf_i+0x15e>
 800dd02:	6831      	ldr	r1, [r6, #0]
 800dd04:	6960      	ldr	r0, [r4, #20]
 800dd06:	f891 c000 	ldrb.w	ip, [r1]
 800dd0a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800dd0e:	2800      	cmp	r0, #0
 800dd10:	d035      	beq.n	800dd7e <_scanf_i+0x15e>
 800dd12:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800dd16:	d124      	bne.n	800dd62 <_scanf_i+0x142>
 800dd18:	0510      	lsls	r0, r2, #20
 800dd1a:	d522      	bpl.n	800dd62 <_scanf_i+0x142>
 800dd1c:	f10b 0b01 	add.w	fp, fp, #1
 800dd20:	f1b9 0f00 	cmp.w	r9, #0
 800dd24:	d003      	beq.n	800dd2e <_scanf_i+0x10e>
 800dd26:	3301      	adds	r3, #1
 800dd28:	f109 39ff 	add.w	r9, r9, #4294967295
 800dd2c:	60a3      	str	r3, [r4, #8]
 800dd2e:	6873      	ldr	r3, [r6, #4]
 800dd30:	3b01      	subs	r3, #1
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	6073      	str	r3, [r6, #4]
 800dd36:	dd1b      	ble.n	800dd70 <_scanf_i+0x150>
 800dd38:	6833      	ldr	r3, [r6, #0]
 800dd3a:	3301      	adds	r3, #1
 800dd3c:	6033      	str	r3, [r6, #0]
 800dd3e:	68a3      	ldr	r3, [r4, #8]
 800dd40:	3b01      	subs	r3, #1
 800dd42:	60a3      	str	r3, [r4, #8]
 800dd44:	e7d9      	b.n	800dcfa <_scanf_i+0xda>
 800dd46:	f1bb 0f02 	cmp.w	fp, #2
 800dd4a:	d1ae      	bne.n	800dcaa <_scanf_i+0x8a>
 800dd4c:	6822      	ldr	r2, [r4, #0]
 800dd4e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800dd52:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800dd56:	d1bf      	bne.n	800dcd8 <_scanf_i+0xb8>
 800dd58:	2310      	movs	r3, #16
 800dd5a:	6063      	str	r3, [r4, #4]
 800dd5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800dd60:	e7a2      	b.n	800dca8 <_scanf_i+0x88>
 800dd62:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800dd66:	6022      	str	r2, [r4, #0]
 800dd68:	780b      	ldrb	r3, [r1, #0]
 800dd6a:	f805 3b01 	strb.w	r3, [r5], #1
 800dd6e:	e7de      	b.n	800dd2e <_scanf_i+0x10e>
 800dd70:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800dd74:	4631      	mov	r1, r6
 800dd76:	4650      	mov	r0, sl
 800dd78:	4798      	blx	r3
 800dd7a:	2800      	cmp	r0, #0
 800dd7c:	d0df      	beq.n	800dd3e <_scanf_i+0x11e>
 800dd7e:	6823      	ldr	r3, [r4, #0]
 800dd80:	05db      	lsls	r3, r3, #23
 800dd82:	d50d      	bpl.n	800dda0 <_scanf_i+0x180>
 800dd84:	42bd      	cmp	r5, r7
 800dd86:	d909      	bls.n	800dd9c <_scanf_i+0x17c>
 800dd88:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800dd8c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dd90:	4632      	mov	r2, r6
 800dd92:	4650      	mov	r0, sl
 800dd94:	4798      	blx	r3
 800dd96:	f105 39ff 	add.w	r9, r5, #4294967295
 800dd9a:	464d      	mov	r5, r9
 800dd9c:	42bd      	cmp	r5, r7
 800dd9e:	d02d      	beq.n	800ddfc <_scanf_i+0x1dc>
 800dda0:	6822      	ldr	r2, [r4, #0]
 800dda2:	f012 0210 	ands.w	r2, r2, #16
 800dda6:	d113      	bne.n	800ddd0 <_scanf_i+0x1b0>
 800dda8:	702a      	strb	r2, [r5, #0]
 800ddaa:	6863      	ldr	r3, [r4, #4]
 800ddac:	9e01      	ldr	r6, [sp, #4]
 800ddae:	4639      	mov	r1, r7
 800ddb0:	4650      	mov	r0, sl
 800ddb2:	47b0      	blx	r6
 800ddb4:	6821      	ldr	r1, [r4, #0]
 800ddb6:	f8d8 3000 	ldr.w	r3, [r8]
 800ddba:	f011 0f20 	tst.w	r1, #32
 800ddbe:	d013      	beq.n	800dde8 <_scanf_i+0x1c8>
 800ddc0:	1d1a      	adds	r2, r3, #4
 800ddc2:	f8c8 2000 	str.w	r2, [r8]
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	6018      	str	r0, [r3, #0]
 800ddca:	68e3      	ldr	r3, [r4, #12]
 800ddcc:	3301      	adds	r3, #1
 800ddce:	60e3      	str	r3, [r4, #12]
 800ddd0:	1bed      	subs	r5, r5, r7
 800ddd2:	44ab      	add	fp, r5
 800ddd4:	6925      	ldr	r5, [r4, #16]
 800ddd6:	445d      	add	r5, fp
 800ddd8:	6125      	str	r5, [r4, #16]
 800ddda:	2000      	movs	r0, #0
 800dddc:	b007      	add	sp, #28
 800ddde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dde2:	f04f 0b00 	mov.w	fp, #0
 800dde6:	e7ca      	b.n	800dd7e <_scanf_i+0x15e>
 800dde8:	1d1a      	adds	r2, r3, #4
 800ddea:	f8c8 2000 	str.w	r2, [r8]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	f011 0f01 	tst.w	r1, #1
 800ddf4:	bf14      	ite	ne
 800ddf6:	8018      	strhne	r0, [r3, #0]
 800ddf8:	6018      	streq	r0, [r3, #0]
 800ddfa:	e7e6      	b.n	800ddca <_scanf_i+0x1aa>
 800ddfc:	2001      	movs	r0, #1
 800ddfe:	e7ed      	b.n	800dddc <_scanf_i+0x1bc>
 800de00:	0800e240 	.word	0x0800e240
 800de04:	0800dfc5 	.word	0x0800dfc5
 800de08:	0800b1dd 	.word	0x0800b1dd
 800de0c:	0800e9f6 	.word	0x0800e9f6

0800de10 <_read_r>:
 800de10:	b538      	push	{r3, r4, r5, lr}
 800de12:	4d07      	ldr	r5, [pc, #28]	; (800de30 <_read_r+0x20>)
 800de14:	4604      	mov	r4, r0
 800de16:	4608      	mov	r0, r1
 800de18:	4611      	mov	r1, r2
 800de1a:	2200      	movs	r2, #0
 800de1c:	602a      	str	r2, [r5, #0]
 800de1e:	461a      	mov	r2, r3
 800de20:	f7f3 fd50 	bl	80018c4 <_read>
 800de24:	1c43      	adds	r3, r0, #1
 800de26:	d102      	bne.n	800de2e <_read_r+0x1e>
 800de28:	682b      	ldr	r3, [r5, #0]
 800de2a:	b103      	cbz	r3, 800de2e <_read_r+0x1e>
 800de2c:	6023      	str	r3, [r4, #0]
 800de2e:	bd38      	pop	{r3, r4, r5, pc}
 800de30:	200014b4 	.word	0x200014b4
 800de34:	00000000 	.word	0x00000000

0800de38 <nan>:
 800de38:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800de40 <nan+0x8>
 800de3c:	4770      	bx	lr
 800de3e:	bf00      	nop
 800de40:	00000000 	.word	0x00000000
 800de44:	7ff80000 	.word	0x7ff80000

0800de48 <__sccl>:
 800de48:	b570      	push	{r4, r5, r6, lr}
 800de4a:	780b      	ldrb	r3, [r1, #0]
 800de4c:	4604      	mov	r4, r0
 800de4e:	2b5e      	cmp	r3, #94	; 0x5e
 800de50:	bf0b      	itete	eq
 800de52:	784b      	ldrbeq	r3, [r1, #1]
 800de54:	1c48      	addne	r0, r1, #1
 800de56:	1c88      	addeq	r0, r1, #2
 800de58:	2200      	movne	r2, #0
 800de5a:	bf08      	it	eq
 800de5c:	2201      	moveq	r2, #1
 800de5e:	1e61      	subs	r1, r4, #1
 800de60:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800de64:	f801 2f01 	strb.w	r2, [r1, #1]!
 800de68:	42a9      	cmp	r1, r5
 800de6a:	d1fb      	bne.n	800de64 <__sccl+0x1c>
 800de6c:	b90b      	cbnz	r3, 800de72 <__sccl+0x2a>
 800de6e:	3801      	subs	r0, #1
 800de70:	bd70      	pop	{r4, r5, r6, pc}
 800de72:	f082 0201 	eor.w	r2, r2, #1
 800de76:	54e2      	strb	r2, [r4, r3]
 800de78:	4605      	mov	r5, r0
 800de7a:	4628      	mov	r0, r5
 800de7c:	f810 1b01 	ldrb.w	r1, [r0], #1
 800de80:	292d      	cmp	r1, #45	; 0x2d
 800de82:	d006      	beq.n	800de92 <__sccl+0x4a>
 800de84:	295d      	cmp	r1, #93	; 0x5d
 800de86:	d0f3      	beq.n	800de70 <__sccl+0x28>
 800de88:	b909      	cbnz	r1, 800de8e <__sccl+0x46>
 800de8a:	4628      	mov	r0, r5
 800de8c:	e7f0      	b.n	800de70 <__sccl+0x28>
 800de8e:	460b      	mov	r3, r1
 800de90:	e7f1      	b.n	800de76 <__sccl+0x2e>
 800de92:	786e      	ldrb	r6, [r5, #1]
 800de94:	2e5d      	cmp	r6, #93	; 0x5d
 800de96:	d0fa      	beq.n	800de8e <__sccl+0x46>
 800de98:	42b3      	cmp	r3, r6
 800de9a:	dcf8      	bgt.n	800de8e <__sccl+0x46>
 800de9c:	3502      	adds	r5, #2
 800de9e:	4619      	mov	r1, r3
 800dea0:	3101      	adds	r1, #1
 800dea2:	428e      	cmp	r6, r1
 800dea4:	5462      	strb	r2, [r4, r1]
 800dea6:	dcfb      	bgt.n	800dea0 <__sccl+0x58>
 800dea8:	1af1      	subs	r1, r6, r3
 800deaa:	3901      	subs	r1, #1
 800deac:	1c58      	adds	r0, r3, #1
 800deae:	42b3      	cmp	r3, r6
 800deb0:	bfa8      	it	ge
 800deb2:	2100      	movge	r1, #0
 800deb4:	1843      	adds	r3, r0, r1
 800deb6:	e7e0      	b.n	800de7a <__sccl+0x32>

0800deb8 <strncmp>:
 800deb8:	b510      	push	{r4, lr}
 800deba:	b17a      	cbz	r2, 800dedc <strncmp+0x24>
 800debc:	4603      	mov	r3, r0
 800debe:	3901      	subs	r1, #1
 800dec0:	1884      	adds	r4, r0, r2
 800dec2:	f813 0b01 	ldrb.w	r0, [r3], #1
 800dec6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800deca:	4290      	cmp	r0, r2
 800decc:	d101      	bne.n	800ded2 <strncmp+0x1a>
 800dece:	42a3      	cmp	r3, r4
 800ded0:	d101      	bne.n	800ded6 <strncmp+0x1e>
 800ded2:	1a80      	subs	r0, r0, r2
 800ded4:	bd10      	pop	{r4, pc}
 800ded6:	2800      	cmp	r0, #0
 800ded8:	d1f3      	bne.n	800dec2 <strncmp+0xa>
 800deda:	e7fa      	b.n	800ded2 <strncmp+0x1a>
 800dedc:	4610      	mov	r0, r2
 800dede:	e7f9      	b.n	800ded4 <strncmp+0x1c>

0800dee0 <_strtoul_l.constprop.0>:
 800dee0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dee4:	4f36      	ldr	r7, [pc, #216]	; (800dfc0 <_strtoul_l.constprop.0+0xe0>)
 800dee6:	4686      	mov	lr, r0
 800dee8:	460d      	mov	r5, r1
 800deea:	4628      	mov	r0, r5
 800deec:	f815 4b01 	ldrb.w	r4, [r5], #1
 800def0:	5de6      	ldrb	r6, [r4, r7]
 800def2:	f016 0608 	ands.w	r6, r6, #8
 800def6:	d1f8      	bne.n	800deea <_strtoul_l.constprop.0+0xa>
 800def8:	2c2d      	cmp	r4, #45	; 0x2d
 800defa:	d12f      	bne.n	800df5c <_strtoul_l.constprop.0+0x7c>
 800defc:	782c      	ldrb	r4, [r5, #0]
 800defe:	2601      	movs	r6, #1
 800df00:	1c85      	adds	r5, r0, #2
 800df02:	2b00      	cmp	r3, #0
 800df04:	d057      	beq.n	800dfb6 <_strtoul_l.constprop.0+0xd6>
 800df06:	2b10      	cmp	r3, #16
 800df08:	d109      	bne.n	800df1e <_strtoul_l.constprop.0+0x3e>
 800df0a:	2c30      	cmp	r4, #48	; 0x30
 800df0c:	d107      	bne.n	800df1e <_strtoul_l.constprop.0+0x3e>
 800df0e:	7828      	ldrb	r0, [r5, #0]
 800df10:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800df14:	2858      	cmp	r0, #88	; 0x58
 800df16:	d149      	bne.n	800dfac <_strtoul_l.constprop.0+0xcc>
 800df18:	786c      	ldrb	r4, [r5, #1]
 800df1a:	2310      	movs	r3, #16
 800df1c:	3502      	adds	r5, #2
 800df1e:	f04f 38ff 	mov.w	r8, #4294967295
 800df22:	2700      	movs	r7, #0
 800df24:	fbb8 f8f3 	udiv	r8, r8, r3
 800df28:	fb03 f908 	mul.w	r9, r3, r8
 800df2c:	ea6f 0909 	mvn.w	r9, r9
 800df30:	4638      	mov	r0, r7
 800df32:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800df36:	f1bc 0f09 	cmp.w	ip, #9
 800df3a:	d814      	bhi.n	800df66 <_strtoul_l.constprop.0+0x86>
 800df3c:	4664      	mov	r4, ip
 800df3e:	42a3      	cmp	r3, r4
 800df40:	dd22      	ble.n	800df88 <_strtoul_l.constprop.0+0xa8>
 800df42:	2f00      	cmp	r7, #0
 800df44:	db1d      	blt.n	800df82 <_strtoul_l.constprop.0+0xa2>
 800df46:	4580      	cmp	r8, r0
 800df48:	d31b      	bcc.n	800df82 <_strtoul_l.constprop.0+0xa2>
 800df4a:	d101      	bne.n	800df50 <_strtoul_l.constprop.0+0x70>
 800df4c:	45a1      	cmp	r9, r4
 800df4e:	db18      	blt.n	800df82 <_strtoul_l.constprop.0+0xa2>
 800df50:	fb00 4003 	mla	r0, r0, r3, r4
 800df54:	2701      	movs	r7, #1
 800df56:	f815 4b01 	ldrb.w	r4, [r5], #1
 800df5a:	e7ea      	b.n	800df32 <_strtoul_l.constprop.0+0x52>
 800df5c:	2c2b      	cmp	r4, #43	; 0x2b
 800df5e:	bf04      	itt	eq
 800df60:	782c      	ldrbeq	r4, [r5, #0]
 800df62:	1c85      	addeq	r5, r0, #2
 800df64:	e7cd      	b.n	800df02 <_strtoul_l.constprop.0+0x22>
 800df66:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800df6a:	f1bc 0f19 	cmp.w	ip, #25
 800df6e:	d801      	bhi.n	800df74 <_strtoul_l.constprop.0+0x94>
 800df70:	3c37      	subs	r4, #55	; 0x37
 800df72:	e7e4      	b.n	800df3e <_strtoul_l.constprop.0+0x5e>
 800df74:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800df78:	f1bc 0f19 	cmp.w	ip, #25
 800df7c:	d804      	bhi.n	800df88 <_strtoul_l.constprop.0+0xa8>
 800df7e:	3c57      	subs	r4, #87	; 0x57
 800df80:	e7dd      	b.n	800df3e <_strtoul_l.constprop.0+0x5e>
 800df82:	f04f 37ff 	mov.w	r7, #4294967295
 800df86:	e7e6      	b.n	800df56 <_strtoul_l.constprop.0+0x76>
 800df88:	2f00      	cmp	r7, #0
 800df8a:	da07      	bge.n	800df9c <_strtoul_l.constprop.0+0xbc>
 800df8c:	2322      	movs	r3, #34	; 0x22
 800df8e:	f8ce 3000 	str.w	r3, [lr]
 800df92:	f04f 30ff 	mov.w	r0, #4294967295
 800df96:	b932      	cbnz	r2, 800dfa6 <_strtoul_l.constprop.0+0xc6>
 800df98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800df9c:	b106      	cbz	r6, 800dfa0 <_strtoul_l.constprop.0+0xc0>
 800df9e:	4240      	negs	r0, r0
 800dfa0:	2a00      	cmp	r2, #0
 800dfa2:	d0f9      	beq.n	800df98 <_strtoul_l.constprop.0+0xb8>
 800dfa4:	b107      	cbz	r7, 800dfa8 <_strtoul_l.constprop.0+0xc8>
 800dfa6:	1e69      	subs	r1, r5, #1
 800dfa8:	6011      	str	r1, [r2, #0]
 800dfaa:	e7f5      	b.n	800df98 <_strtoul_l.constprop.0+0xb8>
 800dfac:	2430      	movs	r4, #48	; 0x30
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d1b5      	bne.n	800df1e <_strtoul_l.constprop.0+0x3e>
 800dfb2:	2308      	movs	r3, #8
 800dfb4:	e7b3      	b.n	800df1e <_strtoul_l.constprop.0+0x3e>
 800dfb6:	2c30      	cmp	r4, #48	; 0x30
 800dfb8:	d0a9      	beq.n	800df0e <_strtoul_l.constprop.0+0x2e>
 800dfba:	230a      	movs	r3, #10
 800dfbc:	e7af      	b.n	800df1e <_strtoul_l.constprop.0+0x3e>
 800dfbe:	bf00      	nop
 800dfc0:	0800e669 	.word	0x0800e669

0800dfc4 <_strtoul_r>:
 800dfc4:	f7ff bf8c 	b.w	800dee0 <_strtoul_l.constprop.0>

0800dfc8 <__submore>:
 800dfc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfcc:	460c      	mov	r4, r1
 800dfce:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800dfd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dfd4:	4299      	cmp	r1, r3
 800dfd6:	d11d      	bne.n	800e014 <__submore+0x4c>
 800dfd8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800dfdc:	f7fb fa0c 	bl	80093f8 <_malloc_r>
 800dfe0:	b918      	cbnz	r0, 800dfea <__submore+0x22>
 800dfe2:	f04f 30ff 	mov.w	r0, #4294967295
 800dfe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dfee:	63a3      	str	r3, [r4, #56]	; 0x38
 800dff0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800dff4:	6360      	str	r0, [r4, #52]	; 0x34
 800dff6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800dffa:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800dffe:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800e002:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800e006:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800e00a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800e00e:	6020      	str	r0, [r4, #0]
 800e010:	2000      	movs	r0, #0
 800e012:	e7e8      	b.n	800dfe6 <__submore+0x1e>
 800e014:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800e016:	0077      	lsls	r7, r6, #1
 800e018:	463a      	mov	r2, r7
 800e01a:	f000 f889 	bl	800e130 <_realloc_r>
 800e01e:	4605      	mov	r5, r0
 800e020:	2800      	cmp	r0, #0
 800e022:	d0de      	beq.n	800dfe2 <__submore+0x1a>
 800e024:	eb00 0806 	add.w	r8, r0, r6
 800e028:	4601      	mov	r1, r0
 800e02a:	4632      	mov	r2, r6
 800e02c:	4640      	mov	r0, r8
 800e02e:	f7fb f959 	bl	80092e4 <memcpy>
 800e032:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800e036:	f8c4 8000 	str.w	r8, [r4]
 800e03a:	e7e9      	b.n	800e010 <__submore+0x48>

0800e03c <__ascii_wctomb>:
 800e03c:	b149      	cbz	r1, 800e052 <__ascii_wctomb+0x16>
 800e03e:	2aff      	cmp	r2, #255	; 0xff
 800e040:	bf85      	ittet	hi
 800e042:	238a      	movhi	r3, #138	; 0x8a
 800e044:	6003      	strhi	r3, [r0, #0]
 800e046:	700a      	strbls	r2, [r1, #0]
 800e048:	f04f 30ff 	movhi.w	r0, #4294967295
 800e04c:	bf98      	it	ls
 800e04e:	2001      	movls	r0, #1
 800e050:	4770      	bx	lr
 800e052:	4608      	mov	r0, r1
 800e054:	4770      	bx	lr
	...

0800e058 <__assert_func>:
 800e058:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e05a:	4614      	mov	r4, r2
 800e05c:	461a      	mov	r2, r3
 800e05e:	4b09      	ldr	r3, [pc, #36]	; (800e084 <__assert_func+0x2c>)
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	4605      	mov	r5, r0
 800e064:	68d8      	ldr	r0, [r3, #12]
 800e066:	b14c      	cbz	r4, 800e07c <__assert_func+0x24>
 800e068:	4b07      	ldr	r3, [pc, #28]	; (800e088 <__assert_func+0x30>)
 800e06a:	9100      	str	r1, [sp, #0]
 800e06c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e070:	4906      	ldr	r1, [pc, #24]	; (800e08c <__assert_func+0x34>)
 800e072:	462b      	mov	r3, r5
 800e074:	f000 f80e 	bl	800e094 <fiprintf>
 800e078:	f000 f889 	bl	800e18e <abort>
 800e07c:	4b04      	ldr	r3, [pc, #16]	; (800e090 <__assert_func+0x38>)
 800e07e:	461c      	mov	r4, r3
 800e080:	e7f3      	b.n	800e06a <__assert_func+0x12>
 800e082:	bf00      	nop
 800e084:	20000124 	.word	0x20000124
 800e088:	0800e9f8 	.word	0x0800e9f8
 800e08c:	0800ea05 	.word	0x0800ea05
 800e090:	0800ea33 	.word	0x0800ea33

0800e094 <fiprintf>:
 800e094:	b40e      	push	{r1, r2, r3}
 800e096:	b503      	push	{r0, r1, lr}
 800e098:	4601      	mov	r1, r0
 800e09a:	ab03      	add	r3, sp, #12
 800e09c:	4805      	ldr	r0, [pc, #20]	; (800e0b4 <fiprintf+0x20>)
 800e09e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e0a2:	6800      	ldr	r0, [r0, #0]
 800e0a4:	9301      	str	r3, [sp, #4]
 800e0a6:	f7ff fc31 	bl	800d90c <_vfiprintf_r>
 800e0aa:	b002      	add	sp, #8
 800e0ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800e0b0:	b003      	add	sp, #12
 800e0b2:	4770      	bx	lr
 800e0b4:	20000124 	.word	0x20000124

0800e0b8 <_fstat_r>:
 800e0b8:	b538      	push	{r3, r4, r5, lr}
 800e0ba:	4d07      	ldr	r5, [pc, #28]	; (800e0d8 <_fstat_r+0x20>)
 800e0bc:	2300      	movs	r3, #0
 800e0be:	4604      	mov	r4, r0
 800e0c0:	4608      	mov	r0, r1
 800e0c2:	4611      	mov	r1, r2
 800e0c4:	602b      	str	r3, [r5, #0]
 800e0c6:	f7f3 fc1e 	bl	8001906 <_fstat>
 800e0ca:	1c43      	adds	r3, r0, #1
 800e0cc:	d102      	bne.n	800e0d4 <_fstat_r+0x1c>
 800e0ce:	682b      	ldr	r3, [r5, #0]
 800e0d0:	b103      	cbz	r3, 800e0d4 <_fstat_r+0x1c>
 800e0d2:	6023      	str	r3, [r4, #0]
 800e0d4:	bd38      	pop	{r3, r4, r5, pc}
 800e0d6:	bf00      	nop
 800e0d8:	200014b4 	.word	0x200014b4

0800e0dc <_isatty_r>:
 800e0dc:	b538      	push	{r3, r4, r5, lr}
 800e0de:	4d06      	ldr	r5, [pc, #24]	; (800e0f8 <_isatty_r+0x1c>)
 800e0e0:	2300      	movs	r3, #0
 800e0e2:	4604      	mov	r4, r0
 800e0e4:	4608      	mov	r0, r1
 800e0e6:	602b      	str	r3, [r5, #0]
 800e0e8:	f7f3 fc12 	bl	8001910 <_isatty>
 800e0ec:	1c43      	adds	r3, r0, #1
 800e0ee:	d102      	bne.n	800e0f6 <_isatty_r+0x1a>
 800e0f0:	682b      	ldr	r3, [r5, #0]
 800e0f2:	b103      	cbz	r3, 800e0f6 <_isatty_r+0x1a>
 800e0f4:	6023      	str	r3, [r4, #0]
 800e0f6:	bd38      	pop	{r3, r4, r5, pc}
 800e0f8:	200014b4 	.word	0x200014b4

0800e0fc <memmove>:
 800e0fc:	4288      	cmp	r0, r1
 800e0fe:	b510      	push	{r4, lr}
 800e100:	eb01 0402 	add.w	r4, r1, r2
 800e104:	d902      	bls.n	800e10c <memmove+0x10>
 800e106:	4284      	cmp	r4, r0
 800e108:	4623      	mov	r3, r4
 800e10a:	d807      	bhi.n	800e11c <memmove+0x20>
 800e10c:	1e43      	subs	r3, r0, #1
 800e10e:	42a1      	cmp	r1, r4
 800e110:	d008      	beq.n	800e124 <memmove+0x28>
 800e112:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e116:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e11a:	e7f8      	b.n	800e10e <memmove+0x12>
 800e11c:	4402      	add	r2, r0
 800e11e:	4601      	mov	r1, r0
 800e120:	428a      	cmp	r2, r1
 800e122:	d100      	bne.n	800e126 <memmove+0x2a>
 800e124:	bd10      	pop	{r4, pc}
 800e126:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e12a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e12e:	e7f7      	b.n	800e120 <memmove+0x24>

0800e130 <_realloc_r>:
 800e130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e134:	4680      	mov	r8, r0
 800e136:	4614      	mov	r4, r2
 800e138:	460e      	mov	r6, r1
 800e13a:	b921      	cbnz	r1, 800e146 <_realloc_r+0x16>
 800e13c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e140:	4611      	mov	r1, r2
 800e142:	f7fb b959 	b.w	80093f8 <_malloc_r>
 800e146:	b92a      	cbnz	r2, 800e154 <_realloc_r+0x24>
 800e148:	f7fb f8ea 	bl	8009320 <_free_r>
 800e14c:	4625      	mov	r5, r4
 800e14e:	4628      	mov	r0, r5
 800e150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e154:	f7fb f9c4 	bl	80094e0 <_malloc_usable_size_r>
 800e158:	4284      	cmp	r4, r0
 800e15a:	4607      	mov	r7, r0
 800e15c:	d802      	bhi.n	800e164 <_realloc_r+0x34>
 800e15e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e162:	d812      	bhi.n	800e18a <_realloc_r+0x5a>
 800e164:	4621      	mov	r1, r4
 800e166:	4640      	mov	r0, r8
 800e168:	f7fb f946 	bl	80093f8 <_malloc_r>
 800e16c:	4605      	mov	r5, r0
 800e16e:	2800      	cmp	r0, #0
 800e170:	d0ed      	beq.n	800e14e <_realloc_r+0x1e>
 800e172:	42bc      	cmp	r4, r7
 800e174:	4622      	mov	r2, r4
 800e176:	4631      	mov	r1, r6
 800e178:	bf28      	it	cs
 800e17a:	463a      	movcs	r2, r7
 800e17c:	f7fb f8b2 	bl	80092e4 <memcpy>
 800e180:	4631      	mov	r1, r6
 800e182:	4640      	mov	r0, r8
 800e184:	f7fb f8cc 	bl	8009320 <_free_r>
 800e188:	e7e1      	b.n	800e14e <_realloc_r+0x1e>
 800e18a:	4635      	mov	r5, r6
 800e18c:	e7df      	b.n	800e14e <_realloc_r+0x1e>

0800e18e <abort>:
 800e18e:	b508      	push	{r3, lr}
 800e190:	2006      	movs	r0, #6
 800e192:	f000 f82b 	bl	800e1ec <raise>
 800e196:	2001      	movs	r0, #1
 800e198:	f7f3 fb8e 	bl	80018b8 <_exit>

0800e19c <_raise_r>:
 800e19c:	291f      	cmp	r1, #31
 800e19e:	b538      	push	{r3, r4, r5, lr}
 800e1a0:	4604      	mov	r4, r0
 800e1a2:	460d      	mov	r5, r1
 800e1a4:	d904      	bls.n	800e1b0 <_raise_r+0x14>
 800e1a6:	2316      	movs	r3, #22
 800e1a8:	6003      	str	r3, [r0, #0]
 800e1aa:	f04f 30ff 	mov.w	r0, #4294967295
 800e1ae:	bd38      	pop	{r3, r4, r5, pc}
 800e1b0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e1b2:	b112      	cbz	r2, 800e1ba <_raise_r+0x1e>
 800e1b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e1b8:	b94b      	cbnz	r3, 800e1ce <_raise_r+0x32>
 800e1ba:	4620      	mov	r0, r4
 800e1bc:	f000 f830 	bl	800e220 <_getpid_r>
 800e1c0:	462a      	mov	r2, r5
 800e1c2:	4601      	mov	r1, r0
 800e1c4:	4620      	mov	r0, r4
 800e1c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e1ca:	f000 b817 	b.w	800e1fc <_kill_r>
 800e1ce:	2b01      	cmp	r3, #1
 800e1d0:	d00a      	beq.n	800e1e8 <_raise_r+0x4c>
 800e1d2:	1c59      	adds	r1, r3, #1
 800e1d4:	d103      	bne.n	800e1de <_raise_r+0x42>
 800e1d6:	2316      	movs	r3, #22
 800e1d8:	6003      	str	r3, [r0, #0]
 800e1da:	2001      	movs	r0, #1
 800e1dc:	e7e7      	b.n	800e1ae <_raise_r+0x12>
 800e1de:	2400      	movs	r4, #0
 800e1e0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e1e4:	4628      	mov	r0, r5
 800e1e6:	4798      	blx	r3
 800e1e8:	2000      	movs	r0, #0
 800e1ea:	e7e0      	b.n	800e1ae <_raise_r+0x12>

0800e1ec <raise>:
 800e1ec:	4b02      	ldr	r3, [pc, #8]	; (800e1f8 <raise+0xc>)
 800e1ee:	4601      	mov	r1, r0
 800e1f0:	6818      	ldr	r0, [r3, #0]
 800e1f2:	f7ff bfd3 	b.w	800e19c <_raise_r>
 800e1f6:	bf00      	nop
 800e1f8:	20000124 	.word	0x20000124

0800e1fc <_kill_r>:
 800e1fc:	b538      	push	{r3, r4, r5, lr}
 800e1fe:	4d07      	ldr	r5, [pc, #28]	; (800e21c <_kill_r+0x20>)
 800e200:	2300      	movs	r3, #0
 800e202:	4604      	mov	r4, r0
 800e204:	4608      	mov	r0, r1
 800e206:	4611      	mov	r1, r2
 800e208:	602b      	str	r3, [r5, #0]
 800e20a:	f7f3 fb4d 	bl	80018a8 <_kill>
 800e20e:	1c43      	adds	r3, r0, #1
 800e210:	d102      	bne.n	800e218 <_kill_r+0x1c>
 800e212:	682b      	ldr	r3, [r5, #0]
 800e214:	b103      	cbz	r3, 800e218 <_kill_r+0x1c>
 800e216:	6023      	str	r3, [r4, #0]
 800e218:	bd38      	pop	{r3, r4, r5, pc}
 800e21a:	bf00      	nop
 800e21c:	200014b4 	.word	0x200014b4

0800e220 <_getpid_r>:
 800e220:	f7f3 bb40 	b.w	80018a4 <_getpid>

0800e224 <_init>:
 800e224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e226:	bf00      	nop
 800e228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e22a:	bc08      	pop	{r3}
 800e22c:	469e      	mov	lr, r3
 800e22e:	4770      	bx	lr

0800e230 <_fini>:
 800e230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e232:	bf00      	nop
 800e234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e236:	bc08      	pop	{r3}
 800e238:	469e      	mov	lr, r3
 800e23a:	4770      	bx	lr
